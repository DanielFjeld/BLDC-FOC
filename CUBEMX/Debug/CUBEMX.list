
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c990  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800cb70  0800cb70  0001cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc58  0800cc58  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc58  0800cc58  0001cc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc60  0800cc60  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc60  0800cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc64  0800cc64  0001cc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800cc68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da4  20000134  0800cd9c  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  0800cd9c  00020ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   000254a2  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e73  00000000  00000000  00045649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0004a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d9  00000000  00000000  0004c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255dd  00000000  00000000  0004d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f1a  00000000  00000000  00072f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d1a  00000000  00000000  0009ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081ec  00000000  00000000  00185b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000134 	.word	0x20000134
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb58 	.word	0x0800cb58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000138 	.word	0x20000138
 800021c:	0800cb58 	.word	0x0800cb58

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <Update_FIR_filter+0x88>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <Update_FIR_filter+0x8c>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp = 0;
 80005e4:	f04f 0300 	mov.w	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	e016      	b.n	800061e <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <Update_FIR_filter+0x90>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	ed93 7a00 	vldr	s14, [r3]
 80005fc:	4a16      	ldr	r2, [pc, #88]	; (8000658 <Update_FIR_filter+0x8c>)
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	edd3 7a00 	vldr	s15, [r3]
 8000608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800060c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	dde5      	ble.n	80005f0 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <Update_FIR_filter+0x88>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d806      	bhi.n	800063a <Update_FIR_filter+0x6e>
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <Update_FIR_filter+0x88>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <Update_FIR_filter+0x88>)
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e002      	b.n	8000640 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Update_FIR_filter+0x88>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
	return temp;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	ee07 3a90 	vmov	s15, r3
}
 8000646:	eeb0 0a67 	vmov.f32	s0, s15
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000018c 	.word	0x2000018c
 8000658:	20000190 	.word	0x20000190
 800065c:	20000000 	.word	0x20000000

08000660 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <Current_IRQ+0x20>
 800066e:	2210      	movs	r2, #16
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <Current_IRQ+0x28>)
 8000674:	f00b fe20 	bl	800c2b8 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <Current_IRQ+0x2c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e000      	b.n	8000682 <Current_IRQ+0x22>
    else return;
 8000680:	bf00      	nop
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000160 	.word	0x20000160
 800068c:	20000150 	.word	0x20000150

08000690 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000698:	2208      	movs	r2, #8
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <Voltage_Temp_IRQ+0x1c>)
 800069e:	f00b fe0b 	bl	800c2b8 <memcpy>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000170 	.word	0x20000170

080006b0 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	//memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006cc:	220c      	movs	r2, #12
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <Can_RX_Status_IRQ+0x1c>)
 80006d2:	f00b fdf1 	bl	800c2b8 <memcpy>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200001b8 	.word	0x200001b8

080006e4 <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80006f6:	ed97 7a00 	vldr	s14, [r7]
 80006fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000702:	da09      	bge.n	8000718 <check_value+0x34>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	edd3 7a02 	vldr	s15, [r3, #8]
 800070a:	ed97 7a00 	vldr	s14, [r7]
 800070e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	d801      	bhi.n	800071c <check_value+0x38>
 8000718:	2302      	movs	r3, #2
 800071a:	e016      	b.n	800074a <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000722:	ed97 7a00 	vldr	s14, [r7]
 8000726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	da09      	bge.n	8000744 <check_value+0x60>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	edd3 7a01 	vldr	s15, [r3, #4]
 8000736:	ed97 7a00 	vldr	s14, [r7]
 800073a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000742:	d801      	bhi.n	8000748 <check_value+0x64>
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
 800075e:	af06      	add	r7, sp, #24
	HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f003 fac7 	bl	8003cf4 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000766:	2128      	movs	r1, #40	; 0x28
 8000768:	48a3      	ldr	r0, [pc, #652]	; (80009f8 <BLDC_main+0x2a0>)
 800076a:	f001 fa23 	bl	8001bb4 <SetSampleTime>
	SetTunings(&Current_PID, 0.00000005f, 80.1f, 0.0f, 1); //alva
 800076e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000772:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 80009fc <BLDC_main+0x2a4>
 8000776:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8000a00 <BLDC_main+0x2a8>
 800077a:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8000a04 <BLDC_main+0x2ac>
 800077e:	489e      	ldr	r0, [pc, #632]	; (80009f8 <BLDC_main+0x2a0>)
 8000780:	f001 f95e 	bl	8001a40 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 8000784:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8000a08 <BLDC_main+0x2b0>
 8000788:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80009fc <BLDC_main+0x2a4>
 800078c:	489a      	ldr	r0, [pc, #616]	; (80009f8 <BLDC_main+0x2a0>)
 800078e:	f001 fa45 	bl	8001c1c <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8000792:	2100      	movs	r1, #0
 8000794:	4898      	ldr	r0, [pc, #608]	; (80009f8 <BLDC_main+0x2a0>)
 8000796:	f001 faf1 	bl	8001d7c <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800079a:	2101      	movs	r1, #1
 800079c:	4896      	ldr	r0, [pc, #600]	; (80009f8 <BLDC_main+0x2a0>)
 800079e:	f001 fa99 	bl	8001cd4 <SetMode>
	Initialize(&Current_PID);
 80007a2:	4895      	ldr	r0, [pc, #596]	; (80009f8 <BLDC_main+0x2a0>)
 80007a4:	f001 fab8 	bl	8001d18 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 80007a8:	2164      	movs	r1, #100	; 0x64
 80007aa:	4898      	ldr	r0, [pc, #608]	; (8000a0c <BLDC_main+0x2b4>)
 80007ac:	f001 fa02 	bl	8001bb4 <SetSampleTime>
	SetTunings(&Velocity_PID, 0.0005f, 0.03f, 0.0f, 1);
 80007b0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007b4:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80009fc <BLDC_main+0x2a4>
 80007b8:	eddf 0a95 	vldr	s1, [pc, #596]	; 8000a10 <BLDC_main+0x2b8>
 80007bc:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8000a14 <BLDC_main+0x2bc>
 80007c0:	4892      	ldr	r0, [pc, #584]	; (8000a0c <BLDC_main+0x2b4>)
 80007c2:	f001 f93d 	bl	8001a40 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 500);
 80007c6:	eddf 0a94 	vldr	s1, [pc, #592]	; 8000a18 <BLDC_main+0x2c0>
 80007ca:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80009fc <BLDC_main+0x2a4>
 80007ce:	488f      	ldr	r0, [pc, #572]	; (8000a0c <BLDC_main+0x2b4>)
 80007d0:	f001 fa24 	bl	8001c1c <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80007d4:	2100      	movs	r1, #0
 80007d6:	488d      	ldr	r0, [pc, #564]	; (8000a0c <BLDC_main+0x2b4>)
 80007d8:	f001 fad0 	bl	8001d7c <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80007dc:	2101      	movs	r1, #1
 80007de:	488b      	ldr	r0, [pc, #556]	; (8000a0c <BLDC_main+0x2b4>)
 80007e0:	f001 fa78 	bl	8001cd4 <SetMode>
	Initialize(&Velocity_PID);
 80007e4:	4889      	ldr	r0, [pc, #548]	; (8000a0c <BLDC_main+0x2b4>)
 80007e6:	f001 fa97 	bl	8001d18 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80007ea:	2164      	movs	r1, #100	; 0x64
 80007ec:	488b      	ldr	r0, [pc, #556]	; (8000a1c <BLDC_main+0x2c4>)
 80007ee:	f001 f9e1 	bl	8001bb4 <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 80007f2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007f6:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80009fc <BLDC_main+0x2a4>
 80007fa:	eddf 0a80 	vldr	s1, [pc, #512]	; 80009fc <BLDC_main+0x2a4>
 80007fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000802:	4886      	ldr	r0, [pc, #536]	; (8000a1c <BLDC_main+0x2c4>)
 8000804:	f001 f91c 	bl	8001a40 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 8000808:	eddf 0a85 	vldr	s1, [pc, #532]	; 8000a20 <BLDC_main+0x2c8>
 800080c:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8000a24 <BLDC_main+0x2cc>
 8000810:	4882      	ldr	r0, [pc, #520]	; (8000a1c <BLDC_main+0x2c4>)
 8000812:	f001 fa03 	bl	8001c1c <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8000816:	2100      	movs	r1, #0
 8000818:	4880      	ldr	r0, [pc, #512]	; (8000a1c <BLDC_main+0x2c4>)
 800081a:	f001 faaf 	bl	8001d7c <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 800081e:	2101      	movs	r1, #1
 8000820:	487e      	ldr	r0, [pc, #504]	; (8000a1c <BLDC_main+0x2c4>)
 8000822:	f001 fa57 	bl	8001cd4 <SetMode>
	Initialize(&Angle_PID);
 8000826:	487d      	ldr	r0, [pc, #500]	; (8000a1c <BLDC_main+0x2c4>)
 8000828:	f001 fa76 	bl	8001d18 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 800082c:	487e      	ldr	r0, [pc, #504]	; (8000a28 <BLDC_main+0x2d0>)
 800082e:	f000 fee7 	bl	8001600 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8000832:	487e      	ldr	r0, [pc, #504]	; (8000a2c <BLDC_main+0x2d4>)
 8000834:	f001 fb82 	bl	8001f3c <current_init>

	//calibrate DC current offset
	//HAL_Delay(1000); //let thing settle before starting

	uint16_t current_offset_averaging = 100;
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	f8a7 3396 	strh.w	r3, [r7, #918]	; 0x396
	volatile int32_t current_offset = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	while (current_offset_averaging){
 8000844:	e013      	b.n	800086e <BLDC_main+0x116>
		while(!Current_Callback_flag);
 8000846:	bf00      	nop
 8000848:	4b79      	ldr	r3, [pc, #484]	; (8000a30 <BLDC_main+0x2d8>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0fb      	beq.n	8000848 <BLDC_main+0xf0>
		Current_Callback_flag = 0;
 8000850:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <BLDC_main+0x2d8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 8000856:	4b77      	ldr	r3, [pc, #476]	; (8000a34 <BLDC_main+0x2dc>)
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800085e:	4413      	add	r3, r2
 8000860:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		current_offset_averaging--;
 8000864:	f8b7 3396 	ldrh.w	r3, [r7, #918]	; 0x396
 8000868:	3b01      	subs	r3, #1
 800086a:	f8a7 3396 	strh.w	r3, [r7, #918]	; 0x396
	while (current_offset_averaging){
 800086e:	f8b7 3396 	ldrh.w	r3, [r7, #918]	; 0x396
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1e7      	bne.n	8000846 <BLDC_main+0xee>
	}
	current_offset = current_offset/100;
 8000876:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800087a:	4a6f      	ldr	r2, [pc, #444]	; (8000a38 <BLDC_main+0x2e0>)
 800087c:	fb82 1203 	smull	r1, r2, r2, r3
 8000880:	1152      	asrs	r2, r2, #5
 8000882:	17db      	asrs	r3, r3, #31
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 800088a:	486c      	ldr	r0, [pc, #432]	; (8000a3c <BLDC_main+0x2e4>)
 800088c:	f001 fb7c 	bl	8001f88 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 8000890:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <BLDC_main+0x2e8>)
 8000892:	2136      	movs	r1, #54	; 0x36
 8000894:	486b      	ldr	r0, [pc, #428]	; (8000a44 <BLDC_main+0x2ec>)
 8000896:	f001 fe1d 	bl	80024d4 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 800089a:	486a      	ldr	r0, [pc, #424]	; (8000a44 <BLDC_main+0x2ec>)
 800089c:	f001 fdfe 	bl	800249c <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80008a0:	f000 fcdc 	bl	800125c <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f003 fa25 	bl	8003cf4 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80008aa:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80008b8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 80008c2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80008d2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80008de:	2300      	movs	r3, #0
 80008e0:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395

	float velocity_temp[200] = {0};
 80008e4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80008e8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80008ec:	4618      	mov	r0, r3
 80008ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80008f2:	461a      	mov	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f00b fcab 	bl	800c250 <memset>
	uint32_t last_pos = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
	uint8_t velocity_index = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 338f 	strb.w	r3, [r7, #911]	; 0x38f
	float velocity = 0;
 8000906:	f04f 0300 	mov.w	r3, #0
 800090a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388

	int32_t position_overflow = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8000914:	bf00      	nop
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <BLDC_main+0x2d8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0fb      	beq.n	8000916 <BLDC_main+0x1be>

		Current_Callback_flag = 0;
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <BLDC_main+0x2d8>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 8000924:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <BLDC_main+0x2dc>)
 8000926:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 800092a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800092c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000930:	4a45      	ldr	r2, [pc, #276]	; (8000a48 <BLDC_main+0x2f0>)
 8000932:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8000936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093a:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <BLDC_main+0x2f4>)
 8000940:	f507 7450 	add.w	r4, r7, #832	; 0x340
 8000944:	461d      	mov	r5, r3
 8000946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094a:	682b      	ldr	r3, [r5, #0]
 800094c:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 800094e:	4a40      	ldr	r2, [pc, #256]	; (8000a50 <BLDC_main+0x2f8>)
 8000950:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000954:	ca07      	ldmia	r2, {r0, r1, r2}
 8000956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 800095a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800095e:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8000968:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 800096c:	2b00      	cmp	r3, #0
 800096e:	d107      	bne.n	8000980 <BLDC_main+0x228>
 8000970:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000974:	2b04      	cmp	r3, #4
 8000976:	d103      	bne.n	8000980 <BLDC_main+0x228>
 8000978:	2302      	movs	r3, #2
 800097a:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395
 800097e:	e076      	b.n	8000a6e <BLDC_main+0x316>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8000980:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <BLDC_main+0x240>
 8000988:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800098c:	2b05      	cmp	r3, #5
 800098e:	d103      	bne.n	8000998 <BLDC_main+0x240>
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <BLDC_main+0x2fc>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	e06a      	b.n	8000a6e <BLDC_main+0x316>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8000998:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 800099c:	2b00      	cmp	r3, #0
 800099e:	d113      	bne.n	80009c8 <BLDC_main+0x270>
 80009a0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d10f      	bne.n	80009c8 <BLDC_main+0x270>
			Status = BLDC_RUNNING;
 80009a8:	2303      	movs	r3, #3
 80009aa:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395
			SetMode(&Current_PID,  AUTOMATIC);
 80009ae:	2101      	movs	r1, #1
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <BLDC_main+0x2a0>)
 80009b2:	f001 f98f 	bl	8001cd4 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80009b6:	2101      	movs	r1, #1
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <BLDC_main+0x2b4>)
 80009ba:	f001 f98b 	bl	8001cd4 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80009be:	2101      	movs	r1, #1
 80009c0:	4816      	ldr	r0, [pc, #88]	; (8000a1c <BLDC_main+0x2c4>)
 80009c2:	f001 f987 	bl	8001cd4 <SetMode>
 80009c6:	e052      	b.n	8000a6e <BLDC_main+0x316>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80009c8:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d143      	bne.n	8000a58 <BLDC_main+0x300>
 80009d0:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13f      	bne.n	8000a58 <BLDC_main+0x300>
			Status = BLDC_STOPPED_WITH_BREAK;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395
			SetMode(&Current_PID,  MANUAL);
 80009de:	2100      	movs	r1, #0
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <BLDC_main+0x2a0>)
 80009e2:	f001 f977 	bl	8001cd4 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <BLDC_main+0x2b4>)
 80009ea:	f001 f973 	bl	8001cd4 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 80009ee:	2100      	movs	r1, #0
 80009f0:	480a      	ldr	r0, [pc, #40]	; (8000a1c <BLDC_main+0x2c4>)
 80009f2:	f001 f96f 	bl	8001cd4 <SetMode>
 80009f6:	e03a      	b.n	8000a6e <BLDC_main+0x316>
 80009f8:	20000204 	.word	0x20000204
 80009fc:	00000000 	.word	0x00000000
 8000a00:	42a03333 	.word	0x42a03333
 8000a04:	3356bf95 	.word	0x3356bf95
 8000a08:	44bb6000 	.word	0x44bb6000
 8000a0c:	20000244 	.word	0x20000244
 8000a10:	3cf5c28f 	.word	0x3cf5c28f
 8000a14:	3a03126f 	.word	0x3a03126f
 8000a18:	43fa0000 	.word	0x43fa0000
 8000a1c:	20000284 	.word	0x20000284
 8000a20:	4a742400 	.word	0x4a742400
 8000a24:	ca742400 	.word	0xca742400
 8000a28:	080006b1 	.word	0x080006b1
 8000a2c:	08000661 	.word	0x08000661
 8000a30:	20000150 	.word	0x20000150
 8000a34:	20000160 	.word	0x20000160
 8000a38:	51eb851f 	.word	0x51eb851f
 8000a3c:	08000691 	.word	0x08000691
 8000a40:	080006c5 	.word	0x080006c5
 8000a44:	2000091c 	.word	0x2000091c
 8000a48:	20000170 	.word	0x20000170
 8000a4c:	20000178 	.word	0x20000178
 8000a50:	200001b8 	.word	0x200001b8
 8000a54:	2000015c 	.word	0x2000015c
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a58:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d106      	bne.n	8000a6e <BLDC_main+0x316>
 8000a60:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d102      	bne.n	8000a6e <BLDC_main+0x316>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395

		//time keepers
		timing_CAN_feedback++;
 8000a6e:	4bcf      	ldr	r3, [pc, #828]	; (8000dac <BLDC_main+0x654>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4acd      	ldr	r2, [pc, #820]	; (8000dac <BLDC_main+0x654>)
 8000a76:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a78:	4bcd      	ldr	r3, [pc, #820]	; (8000db0 <BLDC_main+0x658>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4acc      	ldr	r2, [pc, #816]	; (8000db0 <BLDC_main+0x658>)
 8000a80:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000a88:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a94:	eeb0 0a67 	vmov.f32	s0, s15
 8000a98:	48c6      	ldr	r0, [pc, #792]	; (8000db4 <BLDC_main+0x65c>)
 8000a9a:	f7ff fe23 	bl	80006e4 <check_value>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 0; //warning
 8000aa4:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000ab6:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000aba:	105b      	asrs	r3, r3, #1
 8000abc:	f003 0201 	and.w	r2, r3, #1
 8000ac0:	4bbd      	ldr	r3, [pc, #756]	; (8000db8 <BLDC_main+0x660>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	4abc      	ldr	r2, [pc, #752]	; (8000db8 <BLDC_main+0x660>)
 8000ac8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000aca:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ada:	48b8      	ldr	r0, [pc, #736]	; (8000dbc <BLDC_main+0x664>)
 8000adc:	f7ff fe02 	bl	80006e4 <check_value>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 1; //warning
 8000ae6:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000af4:	4313      	orrs	r3, r2
 8000af6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000afa:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000afe:	f003 0202 	and.w	r2, r3, #2
 8000b02:	4bad      	ldr	r3, [pc, #692]	; (8000db8 <BLDC_main+0x660>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	4aab      	ldr	r2, [pc, #684]	; (8000db8 <BLDC_main+0x660>)
 8000b0a:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000b0c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000b10:	ee07 3a90 	vmov	s15, r3
 8000b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	48a8      	ldr	r0, [pc, #672]	; (8000dc0 <BLDC_main+0x668>)
 8000b1e:	f7ff fde1 	bl	80006e4 <check_value>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 2; //warning
 8000b28:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000b36:	4313      	orrs	r3, r2
 8000b38:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b3c:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000b40:	105b      	asrs	r3, r3, #1
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	f003 0204 	and.w	r2, r3, #4
 8000b48:	4b9b      	ldr	r3, [pc, #620]	; (8000db8 <BLDC_main+0x660>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	4a9a      	ldr	r2, [pc, #616]	; (8000db8 <BLDC_main+0x660>)
 8000b50:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b52:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	4898      	ldr	r0, [pc, #608]	; (8000dc4 <BLDC_main+0x66c>)
 8000b64:	f7ff fdbe 	bl	80006e4 <check_value>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 3; //warning
 8000b6e:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b82:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000b86:	105b      	asrs	r3, r3, #1
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	f003 0208 	and.w	r2, r3, #8
 8000b8e:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <BLDC_main+0x660>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	4a88      	ldr	r2, [pc, #544]	; (8000db8 <BLDC_main+0x660>)
 8000b96:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000b98:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba8:	4887      	ldr	r0, [pc, #540]	; (8000dc8 <BLDC_main+0x670>)
 8000baa:	f7ff fd9b 	bl	80006e4 <check_value>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 4; //warning
 8000bb4:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000bc8:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000bcc:	105b      	asrs	r3, r3, #1
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	f003 0210 	and.w	r2, r3, #16
 8000bd4:	4b78      	ldr	r3, [pc, #480]	; (8000db8 <BLDC_main+0x660>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	4a77      	ldr	r2, [pc, #476]	; (8000db8 <BLDC_main+0x660>)
 8000bdc:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000bde:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	4877      	ldr	r0, [pc, #476]	; (8000dcc <BLDC_main+0x674>)
 8000bf0:	f7ff fd78 	bl	80006e4 <check_value>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 5; //warning
 8000bfa:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	f003 0320 	and.w	r3, r3, #32
 8000c04:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000c0e:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000c12:	105b      	asrs	r3, r3, #1
 8000c14:	015b      	lsls	r3, r3, #5
 8000c16:	f003 0220 	and.w	r2, r3, #32
 8000c1a:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <BLDC_main+0x660>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	4a65      	ldr	r2, [pc, #404]	; (8000db8 <BLDC_main+0x660>)
 8000c22:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000c24:	f997 335a 	ldrsb.w	r3, [r7, #858]	; 0x35a
 8000c28:	ee07 3a90 	vmov	s15, r3
 8000c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c30:	eeb0 0a67 	vmov.f32	s0, s15
 8000c34:	4866      	ldr	r0, [pc, #408]	; (8000dd0 <BLDC_main+0x678>)
 8000c36:	f7ff fd55 	bl	80006e4 <check_value>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 6; //warning
 8000c40:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000c44:	019b      	lsls	r3, r3, #6
 8000c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4a:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c54:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000c58:	105b      	asrs	r3, r3, #1
 8000c5a:	019b      	lsls	r3, r3, #6
 8000c5c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c60:	4b55      	ldr	r3, [pc, #340]	; (8000db8 <BLDC_main+0x660>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	4a54      	ldr	r2, [pc, #336]	; (8000db8 <BLDC_main+0x660>)
 8000c68:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c6a:	f997 335b 	ldrsb.w	r3, [r7, #859]	; 0x35b
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c76:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7a:	4855      	ldr	r0, [pc, #340]	; (8000dd0 <BLDC_main+0x678>)
 8000c7c:	f7ff fd32 	bl	80006e4 <check_value>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a
		warning |= (Limit_callback&1)      << 7; //warning
 8000c86:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000c8a:	01db      	lsls	r3, r3, #7
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8000c92:	4313      	orrs	r3, r2
 8000c94:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000c98:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8000c9c:	105b      	asrs	r3, r3, #1
 8000c9e:	01db      	lsls	r3, r3, #7
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <BLDC_main+0x660>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <BLDC_main+0x660>)
 8000caa:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 8000cac:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <BLDC_main+0x67c>)
 8000cae:	ed93 7a00 	vldr	s14, [r3]
 8000cb2:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000cb6:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8000cba:	3b20      	subs	r3, #32
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	d410      	bmi.n	8000cf0 <BLDC_main+0x598>
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <BLDC_main+0x67c>)
 8000cd0:	ed93 7a00 	vldr	s14, [r3]
 8000cd4:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000cd8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8000cdc:	3320      	adds	r3, #32
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	dd05      	ble.n	8000cfc <BLDC_main+0x5a4>
 8000cf0:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000cfc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d08:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0c:	f7ff fc5e 	bl	80005cc <Update_FIR_filter>
 8000d10:	ed87 0add 	vstr	s0, [r7, #884]	; 0x374

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8000d14:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <BLDC_main+0x680>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d90a      	bls.n	8000d34 <BLDC_main+0x5dc>
 8000d1e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <BLDC_main+0x684>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d805      	bhi.n	8000d34 <BLDC_main+0x5dc>
 8000d28:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8000d32:	e00e      	b.n	8000d52 <BLDC_main+0x5fa>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8000d34:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <BLDC_main+0x684>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d809      	bhi.n	8000d52 <BLDC_main+0x5fa>
 8000d3e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000d42:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <BLDC_main+0x680>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d904      	bls.n	8000d52 <BLDC_main+0x5fa>
 8000d48:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8000d52:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8000d56:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8000d5a:	1ad2      	subs	r2, r2, r3
 8000d5c:	f897 338f 	ldrb.w	r3, [r7, #911]	; 0x38f
 8000d60:	ee07 2a90 	vmov	s15, r2
 8000d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d68:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8000d6c:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000d78:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000d7c:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
		velocity_index++;
 8000d80:	f897 338f 	ldrb.w	r3, [r7, #911]	; 0x38f
 8000d84:	3301      	adds	r3, #1
 8000d86:	f887 338f 	strb.w	r3, [r7, #911]	; 0x38f
		velocity_index = velocity_index % 200;
 8000d8a:	f897 338f 	ldrb.w	r3, [r7, #911]	; 0x38f
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <BLDC_main+0x688>)
 8000d90:	fba2 1203 	umull	r1, r2, r2, r3
 8000d94:	0992      	lsrs	r2, r2, #6
 8000d96:	21c8      	movs	r1, #200	; 0xc8
 8000d98:	fb01 f202 	mul.w	r2, r1, r2
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	f887 338f 	strb.w	r3, [r7, #911]	; 0x38f
		for(int i = 0; i > 200; i++){
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8000da8:	e031      	b.n	8000e0e <BLDC_main+0x6b6>
 8000daa:	bf00      	nop
 8000dac:	20000154 	.word	0x20000154
 8000db0:	20000158 	.word	0x20000158
 8000db4:	200000a0 	.word	0x200000a0
 8000db8:	2000015c 	.word	0x2000015c
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	20000040 	.word	0x20000040
 8000dc4:	200000b8 	.word	0x200000b8
 8000dc8:	20000070 	.word	0x20000070
 8000dcc:	20000058 	.word	0x20000058
 8000dd0:	20000088 	.word	0x20000088
 8000dd4:	20000284 	.word	0x20000284
 8000dd8:	00041eb0 	.word	0x00041eb0
 8000ddc:	00015f8f 	.word	0x00015f8f
 8000de0:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8000de4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8000de8:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8000dec:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	edd3 7a00 	vldr	s15, [r3]
 8000df8:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8000dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e00:	edc7 7ae2 	vstr	s15, [r7, #904]	; 0x388
		for(int i = 0; i > 200; i++){
 8000e04:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8000e0e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000e12:	2bc8      	cmp	r3, #200	; 0xc8
 8000e14:	dce6      	bgt.n	8000de4 <BLDC_main+0x68c>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8000e16:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000e1a:	ee07 3a90 	vmov	s15, r3
 8000e1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e22:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8000e26:	4ab2      	ldr	r2, [pc, #712]	; (80010f0 <BLDC_main+0x998>)
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e38:	4bae      	ldr	r3, [pc, #696]	; (80010f4 <BLDC_main+0x99c>)
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 8000e3e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bfb8      	it	lt
 8000e46:	425b      	neglt	r3, r3
 8000e48:	ee07 3a90 	vmov	s15, r3
 8000e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e50:	4ba9      	ldr	r3, [pc, #676]	; (80010f8 <BLDC_main+0x9a0>)
 8000e52:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000e56:	4aa9      	ldr	r2, [pc, #676]	; (80010fc <BLDC_main+0x9a4>)
 8000e58:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000e5c:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8000e5e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e6a:	4ba2      	ldr	r3, [pc, #648]	; (80010f4 <BLDC_main+0x99c>)
 8000e6c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8000e70:	48a0      	ldr	r0, [pc, #640]	; (80010f4 <BLDC_main+0x99c>)
 8000e72:	f000 fd33 	bl	80018dc <Compute>

		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
 8000e76:	4b9f      	ldr	r3, [pc, #636]	; (80010f4 <BLDC_main+0x99c>)
 8000e78:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e80:	ee17 3a90 	vmov	r3, s15
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfb8      	it	lt
 8000e88:	425b      	neglt	r3, r3
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e92:	4b99      	ldr	r3, [pc, #612]	; (80010f8 <BLDC_main+0x9a0>)
 8000e94:	edc3 7a02 	vstr	s15, [r3, #8]

		Compute(&Velocity_PID);
 8000e98:	4897      	ldr	r0, [pc, #604]	; (80010f8 <BLDC_main+0x9a0>)
 8000e9a:	f000 fd1f 	bl	80018dc <Compute>

		int8_t direction = -1;
 8000e9e:	23ff      	movs	r3, #255	; 0xff
 8000ea0:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 3000;
 8000ea4:	4b95      	ldr	r3, [pc, #596]	; (80010fc <BLDC_main+0x9a4>)
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <BLDC_main+0x9a8>)
 8000ea8:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 8000eaa:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <BLDC_main+0x99c>)
 8000eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	dd03      	ble.n	8000ec2 <BLDC_main+0x76a>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
 8000ec0:	e002      	b.n	8000ec8 <BLDC_main+0x770>
		else direction = -1;
 8000ec2:	23ff      	movs	r3, #255	; 0xff
 8000ec4:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
//		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
//		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
//		else direction = 1;
		#endif

		Compute(&Current_PID);
 8000ec8:	488c      	ldr	r0, [pc, #560]	; (80010fc <BLDC_main+0x9a4>)
 8000eca:	f000 fd07 	bl	80018dc <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000ece:	4b8d      	ldr	r3, [pc, #564]	; (8001104 <BLDC_main+0x9ac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <BLDC_main+0x78a>
			Status = BLDC_ERROR;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395
			shutoff();
 8000edc:	f000 fb5c 	bl	8001598 <shutoff>
 8000ee0:	e065      	b.n	8000fae <BLDC_main+0x856>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000ee2:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d104      	bne.n	8000ef4 <BLDC_main+0x79c>
			shutoff();
 8000eea:	f000 fb55 	bl	8001598 <shutoff>
			shutdown();
 8000eee:	f000 fb65 	bl	80015bc <shutdown>
 8000ef2:	e05c      	b.n	8000fae <BLDC_main+0x856>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000ef4:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d12a      	bne.n	8000f52 <BLDC_main+0x7fa>
			uint16_t test2 = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8a7 3372 	strh.w	r3, [r7, #882]	; 0x372
			if(Current_PID.Output != NAN)test2 = (uint16_t)Current_PID.Output;
 8000f02:	4b7e      	ldr	r3, [pc, #504]	; (80010fc <BLDC_main+0x9a4>)
 8000f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0c:	ee17 3a90 	vmov	r3, s15
 8000f10:	f8a7 3372 	strh.w	r3, [r7, #882]	; 0x372
//			shutoff();
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), test2);
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), 500);
 8000f14:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000f18:	497b      	ldr	r1, [pc, #492]	; (8001108 <BLDC_main+0x9b0>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f920 	bl	8001160 <mech_to_el_deg>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	335a      	adds	r3, #90	; 0x5a
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f9e0 	bl	80012f4 <inverter>
			dac_value(8*mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+200);
 8000f34:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000f38:	4973      	ldr	r1, [pc, #460]	; (8001108 <BLDC_main+0x9b0>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f910 	bl	8001160 <mech_to_el_deg>
 8000f40:	4603      	mov	r3, r0
 8000f42:	3319      	adds	r3, #25
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fa88 	bl	8002460 <dac_value>
 8000f50:	e02d      	b.n	8000fae <BLDC_main+0x856>
//			inverter(0, 200);

			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8000f52:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d122      	bne.n	8000fa0 <BLDC_main+0x848>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
 8000f5a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000f5e:	496a      	ldr	r1, [pc, #424]	; (8001108 <BLDC_main+0x9b0>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f8fd 	bl	8001160 <mech_to_el_deg>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f997 337b 	ldrsb.w	r3, [r7, #891]	; 0x37b
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	0049      	lsls	r1, r1, #1
 8000f74:	440b      	add	r3, r1
 8000f76:	4619      	mov	r1, r3
 8000f78:	0109      	lsls	r1, r1, #4
 8000f7a:	1acb      	subs	r3, r1, r3
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <BLDC_main+0x9a0>)
 8000f88:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f90:	ee17 2a90 	vmov	r2, s15
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f9ab 	bl	80012f4 <inverter>
 8000f9e:	e006      	b.n	8000fae <BLDC_main+0x856>
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000fa0:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d102      	bne.n	8000fae <BLDC_main+0x856>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 3395 	strb.w	r3, [r7, #917]	; 0x395
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000fae:	4b57      	ldr	r3, [pc, #348]	; (800110c <BLDC_main+0x9b4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b95      	cmp	r3, #149	; 0x95
 8000fb4:	d97f      	bls.n	80010b6 <BLDC_main+0x95e>
			timing_CAN_feedback = 0;
 8000fb6:	4b55      	ldr	r3, [pc, #340]	; (800110c <BLDC_main+0x9b4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000fbc:	4a54      	ldr	r2, [pc, #336]	; (8001110 <BLDC_main+0x9b8>)
 8000fbe:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8000fc2:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000fc4:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <BLDC_main+0x9ac>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a51      	ldr	r2, [pc, #324]	; (8001110 <BLDC_main+0x9b8>)
 8000fca:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000fcc:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	; (8001110 <BLDC_main+0x9b8>)
 8000fd2:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000fd4:	f897 3395 	ldrb.w	r3, [r7, #917]	; 0x395
 8000fd8:	4a4d      	ldr	r2, [pc, #308]	; (8001110 <BLDC_main+0x9b8>)
 8000fda:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000fdc:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <BLDC_main+0x9b8>)
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000fe6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000fea:	4a49      	ldr	r2, [pc, #292]	; (8001110 <BLDC_main+0x9b8>)
 8000fec:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000fee:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000ff2:	4a47      	ldr	r2, [pc, #284]	; (8001110 <BLDC_main+0x9b8>)
 8000ff4:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000ff6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000ffa:	4a45      	ldr	r2, [pc, #276]	; (8001110 <BLDC_main+0x9b8>)
 8000ffc:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000ffe:	f8b7 3358 	ldrh.w	r3, [r7, #856]	; 0x358
 8001002:	461a      	mov	r2, r3
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <BLDC_main+0x9b8>)
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8001008:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800100c:	4a40      	ldr	r2, [pc, #256]	; (8001110 <BLDC_main+0x9b8>)
 800100e:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001010:	f997 335a 	ldrsb.w	r3, [r7, #858]	; 0x35a
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <BLDC_main+0x9b8>)
 8001018:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 800101a:	f997 335b 	ldrsb.w	r3, [r7, #859]	; 0x35b
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <BLDC_main+0x9b8>)
 8001022:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001024:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8001028:	4a39      	ldr	r2, [pc, #228]	; (8001110 <BLDC_main+0x9b8>)
 800102a:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 800102c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <BLDC_main+0x9b8>)
 8001032:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <BLDC_main+0x99c>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103e:	ee17 2a90 	vmov	r2, s15
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <BLDC_main+0x9b8>)
 8001044:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001046:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <BLDC_main+0x9b8>)
 800104c:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <BLDC_main+0x9b8>)
 8001050:	f240 4136 	movw	r1, #1078	; 0x436
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <BLDC_main+0x9bc>)
 8001056:	f001 fa79 	bl	800254c <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <BLDC_main+0x9b8>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <BLDC_main+0x9b8>)
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001064:	60ba      	str	r2, [r7, #8]
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <BLDC_main+0x9b8>)
 8001068:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <BLDC_main+0x9b8>)
 800106e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
					#ifdef Position_debug
					"POSITION[EN1:%7d EN2:%7d CALC:%7d VELOCITY:%7i]"
					#endif
					"\r\n"
					#ifdef Current_debug
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90) //(int32_t)test
 8001070:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8001074:	4924      	ldr	r1, [pc, #144]	; (8001108 <BLDC_main+0x9b0>)
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f872 	bl	8001160 <mech_to_el_deg>
 800107c:	4603      	mov	r3, r0
			PrintServerPrintf(
 800107e:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <BLDC_main+0x9b8>)
 8001084:	6919      	ldr	r1, [r3, #16]
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <BLDC_main+0x9b8>)
 8001088:	6958      	ldr	r0, [r3, #20]
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <BLDC_main+0x9b8>)
 800108c:	699d      	ldr	r5, [r3, #24]
					#endif
					#ifdef Status_debug
					, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
						#endif
					#ifdef Position_debug
					, Feedback.Position_Encoder1_pos, Feedback.Position_Encoder2_pos, Feedback.Position_Calculated_pos, Feedback.Position_Velocity/1000
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <BLDC_main+0x9b8>)
 8001090:	69db      	ldr	r3, [r3, #28]
			PrintServerPrintf(
 8001092:	4e21      	ldr	r6, [pc, #132]	; (8001118 <BLDC_main+0x9c0>)
 8001094:	fb86 c603 	smull	ip, r6, r6, r3
 8001098:	11b6      	asrs	r6, r6, #6
 800109a:	17db      	asrs	r3, r3, #31
 800109c:	1af3      	subs	r3, r6, r3
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9504      	str	r5, [sp, #16]
 80010a2:	9003      	str	r0, [sp, #12]
 80010a4:	9102      	str	r1, [sp, #8]
 80010a6:	9201      	str	r2, [sp, #4]
 80010a8:	9400      	str	r4, [sp, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <BLDC_main+0x9c4>)
 80010b2:	f000 fe71 	bl	8001d98 <PrintServerPrintf>
					); // \r only goes back not to next line!
			#endif


		}
		IRQ_Encoders.Encoder1_pos += 10;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <BLDC_main+0x9c8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	330a      	adds	r3, #10
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <BLDC_main+0x9c8>)
 80010be:	6013      	str	r3, [r2, #0]
		if(IRQ_Encoders.Encoder1_pos > 360000){
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <BLDC_main+0x9c8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <BLDC_main+0x998>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d906      	bls.n	80010d8 <BLDC_main+0x980>
			IRQ_Encoders.Encoder1_pos = 0;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <BLDC_main+0x9c8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <BLDC_main+0x9cc>)
 80010d4:	f006 f988 	bl	80073e8 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <BLDC_main+0x9ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <BLDC_main+0x9d0>
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f006 f965 	bl	80073b8 <HAL_GPIO_WritePin>
 80010ee:	e022      	b.n	8001136 <BLDC_main+0x9de>
 80010f0:	00057e40 	.word	0x00057e40
 80010f4:	20000284 	.word	0x20000284
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000204 	.word	0x20000204
 8001100:	453b8000 	.word	0x453b8000
 8001104:	2000015c 	.word	0x2000015c
 8001108:	0001d2a9 	.word	0x0001d2a9
 800110c:	20000154 	.word	0x20000154
 8001110:	200001c4 	.word	0x200001c4
 8001114:	2000091c 	.word	0x2000091c
 8001118:	10624dd3 	.word	0x10624dd3
 800111c:	0800cb70 	.word	0x0800cb70
 8001120:	20000178 	.word	0x20000178
 8001124:	48000800 	.word	0x48000800
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f006 f941 	bl	80073b8 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001136:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <BLDC_main+0x9f4>
 800113e:	2201      	movs	r2, #1
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <BLDC_main+0xa04>)
 8001144:	f006 f938 	bl	80073b8 <HAL_GPIO_WritePin>
 8001148:	f7ff bbe4 	b.w	8000914 <BLDC_main+0x1bc>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <BLDC_main+0xa04>)
 8001152:	f006 f931 	bl	80073b8 <HAL_GPIO_WritePin>
	while(1){
 8001156:	f7ff bbdd 	b.w	8000914 <BLDC_main+0x1bc>
 800115a:	bf00      	nop
 800115c:	48000800 	.word	0x48000800

08001160 <mech_to_el_deg>:
//		dac_value(test/10);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001174:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001180:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8001184:	e007      	b.n	8001196 <mech_to_el_deg+0x36>
 8001186:	edd7 7a03 	vldr	s15, [r7, #12]
 800118a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800124c <mech_to_el_deg+0xec>
 800118e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001192:	edc7 7a03 	vstr	s15, [r7, #12]
 8001196:	edd7 7a03 	vldr	s15, [r7, #12]
 800119a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800124c <mech_to_el_deg+0xec>
 800119e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	dcee      	bgt.n	8001186 <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 80011a8:	e007      	b.n	80011ba <mech_to_el_deg+0x5a>
 80011aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ae:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001250 <mech_to_el_deg+0xf0>
 80011b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]
 80011ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80011be:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001250 <mech_to_el_deg+0xf0>
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dcee      	bgt.n	80011aa <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80011d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011d8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001254 <mech_to_el_deg+0xf4>
 80011dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e0:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 80011e4:	e007      	b.n	80011f6 <mech_to_el_deg+0x96>
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001258 <mech_to_el_deg+0xf8>
 80011ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f2:	edc7 7a03 	vstr	s15, [r7, #12]
 80011f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fa:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001258 <mech_to_el_deg+0xf8>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	dcee      	bgt.n	80011e6 <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 8001208:	edd7 7a03 	vldr	s15, [r7, #12]
 800120c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d501      	bpl.n	800121a <mech_to_el_deg+0xba>
 8001216:	2300      	movs	r3, #0
 8001218:	e012      	b.n	8001240 <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 800121a:	edd7 7a03 	vldr	s15, [r7, #12]
 800121e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001258 <mech_to_el_deg+0xf8>
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dd02      	ble.n	8001232 <mech_to_el_deg+0xd2>
 800122c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001230:	e006      	b.n	8001240 <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 8001232:	edd7 7a03 	vldr	s15, [r7, #12]
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	b21b      	sxth	r3, r3

//	return (int16_t)((((angle_deg)-offset_deg+360000*2)%deg_pr_pole)/(1000/17))%360;
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	48afc800 	.word	0x48afc800
 8001250:	46a57000 	.word	0x46a57000
 8001254:	447a0000 	.word	0x447a0000
 8001258:	43b40000 	.word	0x43b40000

0800125c <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001260:	2100      	movs	r1, #0
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <CTRL_init_PWM+0x8c>)
 8001264:	f008 f83c 	bl	80092e0 <HAL_TIM_PWM_Start>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <CTRL_init_PWM+0x16>
 800126e:	f001 ff3b 	bl	80030e8 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001272:	2100      	movs	r1, #0
 8001274:	481c      	ldr	r0, [pc, #112]	; (80012e8 <CTRL_init_PWM+0x8c>)
 8001276:	f009 f9c7 	bl	800a608 <HAL_TIMEx_PWMN_Start>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <CTRL_init_PWM+0x28>
 8001280:	f001 ff32 	bl	80030e8 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001284:	2104      	movs	r1, #4
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <CTRL_init_PWM+0x8c>)
 8001288:	f008 f82a 	bl	80092e0 <HAL_TIM_PWM_Start>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <CTRL_init_PWM+0x3a>
 8001292:	f001 ff29 	bl	80030e8 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001296:	2104      	movs	r1, #4
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <CTRL_init_PWM+0x8c>)
 800129a:	f009 f9b5 	bl	800a608 <HAL_TIMEx_PWMN_Start>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <CTRL_init_PWM+0x4c>
 80012a4:	f001 ff20 	bl	80030e8 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80012a8:	2108      	movs	r1, #8
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <CTRL_init_PWM+0x8c>)
 80012ac:	f008 f818 	bl	80092e0 <HAL_TIM_PWM_Start>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <CTRL_init_PWM+0x5e>
 80012b6:	f001 ff17 	bl	80030e8 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80012ba:	2108      	movs	r1, #8
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <CTRL_init_PWM+0x8c>)
 80012be:	f009 f9a3 	bl	800a608 <HAL_TIMEx_PWMN_Start>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <CTRL_init_PWM+0x70>
 80012c8:	f001 ff0e 	bl	80030e8 <Error_Handler>

	TIM1->CCR1 = 0;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <CTRL_init_PWM+0x90>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <CTRL_init_PWM+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <CTRL_init_PWM+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <CTRL_init_PWM+0x94>)
 80012e0:	f007 ff32 	bl	8009148 <HAL_TIM_Base_Start_IT>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000c04 	.word	0x20000c04
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	20000c50 	.word	0x20000c50

080012f4 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001308:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800130c:	4a9c      	ldr	r2, [pc, #624]	; (8001580 <inverter+0x28c>)
 800130e:	fb82 1203 	smull	r1, r2, r2, r3
 8001312:	441a      	add	r2, r3
 8001314:	1211      	asrs	r1, r2, #8
 8001316:	17da      	asrs	r2, r3, #31
 8001318:	1a8a      	subs	r2, r1, r2
 800131a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800131e:	fb01 f202 	mul.w	r2, r1, r2
 8001322:	1a9a      	subs	r2, r3, r2
 8001324:	4613      	mov	r3, r2
 8001326:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800132e:	b29b      	uxth	r3, r3
 8001330:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001336:	4a92      	ldr	r2, [pc, #584]	; (8001580 <inverter+0x28c>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	441a      	add	r2, r3
 800133e:	1211      	asrs	r1, r2, #8
 8001340:	17da      	asrs	r2, r3, #31
 8001342:	1a8a      	subs	r2, r1, r2
 8001344:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001348:	fb01 f202 	mul.w	r2, r1, r2
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 800135c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001360:	4b88      	ldr	r3, [pc, #544]	; (8001584 <inverter+0x290>)
 8001362:	fb83 1302 	smull	r1, r3, r3, r2
 8001366:	4413      	add	r3, r2
 8001368:	1159      	asrs	r1, r3, #5
 800136a:	17d3      	asrs	r3, r2, #31
 800136c:	1ac9      	subs	r1, r1, r3
 800136e:	460b      	mov	r3, r1
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b21b      	sxth	r3, r3
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001382:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001390:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001588 <inverter+0x294>
 8001394:	edd7 7a04 	vldr	s15, [r7, #16]
 8001398:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800139c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80013a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80013a4:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8001588 <inverter+0x294>
 80013a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013b0:	ed9f 6a76 	vldr	s12, [pc, #472]	; 800158c <inverter+0x298>
 80013b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013b8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80013bc:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001588 <inverter+0x294>
 80013c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013c8:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8001588 <inverter+0x294>
 80013cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80013d4:	eddf 5a6d 	vldr	s11, [pc, #436]	; 800158c <inverter+0x298>
 80013d8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80013dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e0:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001590 <inverter+0x29c>
 80013e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	ee17 3a90 	vmov	r3, s15
 80013f8:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	edd7 7a04 	vldr	s15, [r7, #16]
 8001408:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800140c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001410:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 800158c <inverter+0x298>
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	ee76 7a67 	vsub.f32	s15, s12, s15
 800141c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001420:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800158c <inverter+0x298>
 8001424:	edd7 7a04 	vldr	s15, [r7, #16]
 8001428:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001434:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001590 <inverter+0x29c>
 8001438:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 3a90 	vmov	r3, s15
 800144c:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001454:	3303      	adds	r3, #3
 8001456:	89ba      	ldrh	r2, [r7, #12]
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	0fda      	lsrs	r2, r3, #31
 800145c:	4413      	add	r3, r2
 800145e:	105b      	asrs	r3, r3, #1
 8001460:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db10      	blt.n	800148c <inverter+0x198>
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	2b3b      	cmp	r3, #59	; 0x3b
 8001470:	dc0c      	bgt.n	800148c <inverter+0x198>
		compare_M1 = T0;
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8001476:	897a      	ldrh	r2, [r7, #10]
 8001478:	89bb      	ldrh	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 800147e:	897a      	ldrh	r2, [r7, #10]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	441a      	add	r2, r3
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e06a      	b.n	8001562 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 800148c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001490:	2b3b      	cmp	r3, #59	; 0x3b
 8001492:	dd10      	ble.n	80014b6 <inverter+0x1c2>
 8001494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001498:	2b77      	cmp	r3, #119	; 0x77
 800149a:	dc0c      	bgt.n	80014b6 <inverter+0x1c2>
		compare_M1 = T0;
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80014a0:	897a      	ldrh	r2, [r7, #10]
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	441a      	add	r2, r3
 80014a6:	89bb      	ldrh	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 80014ac:	897a      	ldrh	r2, [r7, #10]
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	4413      	add	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e055      	b.n	8001562 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 80014b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ba:	2b77      	cmp	r3, #119	; 0x77
 80014bc:	dd10      	ble.n	80014e0 <inverter+0x1ec>
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c2:	2bb3      	cmp	r3, #179	; 0xb3
 80014c4:	dc0c      	bgt.n	80014e0 <inverter+0x1ec>
		compare_M1 = T0+T2;
 80014c6:	897a      	ldrh	r2, [r7, #10]
 80014c8:	89bb      	ldrh	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80014ce:	897a      	ldrh	r2, [r7, #10]
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	441a      	add	r2, r3
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e040      	b.n	8001562 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	2bb3      	cmp	r3, #179	; 0xb3
 80014e6:	dd10      	ble.n	800150a <inverter+0x216>
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	2bef      	cmp	r3, #239	; 0xef
 80014ee:	dc0c      	bgt.n	800150a <inverter+0x216>
		compare_M1 = T0+T1+T2;
 80014f0:	897a      	ldrh	r2, [r7, #10]
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	441a      	add	r2, r3
 80014f6:	89bb      	ldrh	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 80014fc:	897a      	ldrh	r2, [r7, #10]
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	4413      	add	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001504:	897b      	ldrh	r3, [r7, #10]
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e02b      	b.n	8001562 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	2bef      	cmp	r3, #239	; 0xef
 8001510:	dd11      	ble.n	8001536 <inverter+0x242>
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800151a:	da0c      	bge.n	8001536 <inverter+0x242>
		compare_M1 = T0+T1+T2;
 800151c:	897a      	ldrh	r2, [r7, #10]
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	441a      	add	r2, r3
 8001522:	89bb      	ldrh	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 800152c:	897a      	ldrh	r2, [r7, #10]
 800152e:	89bb      	ldrh	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e015      	b.n	8001562 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800153e:	db10      	blt.n	8001562 <inverter+0x26e>
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001548:	dc0b      	bgt.n	8001562 <inverter+0x26e>
		compare_M1 = T0+T1;
 800154a:	897a      	ldrh	r2, [r7, #10]
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	4413      	add	r3, r2
 8001550:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001552:	897b      	ldrh	r3, [r7, #10]
 8001554:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001556:	897a      	ldrh	r2, [r7, #10]
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	441a      	add	r2, r3
 800155c:	89bb      	ldrh	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <inverter+0x2a0>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <inverter+0x2a0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <inverter+0x2a0>)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	63d3      	str	r3, [r2, #60]	; 0x3c

	//dac_value(compare_M1);

}
 8001574:	bf00      	nop
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	b60b60b7 	.word	0xb60b60b7
 8001584:	88888889 	.word	0x88888889
 8001588:	42700000 	.word	0x42700000
 800158c:	43340000 	.word	0x43340000
 8001590:	471e3400 	.word	0x471e3400
 8001594:	40012c00 	.word	0x40012c00

08001598 <shutoff>:
void shutoff(void){
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <shutoff+0x20>)
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <shutoff+0x20>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <shutoff+0x20>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40012c00 	.word	0x40012c00

080015bc <shutdown>:
void shutdown(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 80015c0:	2100      	movs	r1, #0
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <shutdown+0x40>)
 80015c4:	f007 ff8c 	bl	80094e0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 80015c8:	2100      	movs	r1, #0
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <shutdown+0x40>)
 80015cc:	f009 f8d0 	bl	800a770 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 80015d0:	2104      	movs	r1, #4
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <shutdown+0x40>)
 80015d4:	f007 ff84 	bl	80094e0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 80015d8:	2104      	movs	r1, #4
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <shutdown+0x40>)
 80015dc:	f009 f8c8 	bl	800a770 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 80015e0:	2108      	movs	r1, #8
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <shutdown+0x40>)
 80015e4:	f007 ff7c 	bl	80094e0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80015e8:	2108      	movs	r1, #8
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <shutdown+0x40>)
 80015ec:	f009 f8c0 	bl	800a770 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <shutdown+0x40>)
 80015f2:	f007 fd82 	bl	80090fa <HAL_TIM_Base_Stop>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000c04 	.word	0x20000c04

08001600 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	2140      	movs	r1, #64	; 0x40
 800160c:	4815      	ldr	r0, [pc, #84]	; (8001664 <ORBIS_init+0x64>)
 800160e:	f005 fed3 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	2104      	movs	r1, #4
 8001616:	4814      	ldr	r0, [pc, #80]	; (8001668 <ORBIS_init+0x68>)
 8001618:	f005 fece 	bl	80073b8 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 800161c:	4a13      	ldr	r2, [pc, #76]	; (800166c <ORBIS_init+0x6c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <ORBIS_init+0x70>)
 8001624:	2274      	movs	r2, #116	; 0x74
 8001626:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <ORBIS_init+0x64>)
 800162e:	f005 fec3 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2104      	movs	r1, #4
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <ORBIS_init+0x68>)
 8001638:	f005 febe 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800163c:	2305      	movs	r3, #5
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <ORBIS_init+0x74>)
 8001640:	490b      	ldr	r1, [pc, #44]	; (8001670 <ORBIS_init+0x70>)
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <ORBIS_init+0x78>)
 8001644:	f006 ffb0 	bl	80085a8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8001648:	2305      	movs	r3, #5
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <ORBIS_init+0x7c>)
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <ORBIS_init+0x80>)
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <ORBIS_init+0x84>)
 8001650:	f006 ffaa 	bl	80085a8 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <ORBIS_init+0x88>)
 8001656:	f007 fd77 	bl	8009148 <HAL_TIM_Base_Start_IT>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	48000400 	.word	0x48000400
 8001668:	48000c00 	.word	0x48000c00
 800166c:	200002e4 	.word	0x200002e4
 8001670:	200002c4 	.word	0x200002c4
 8001674:	200002cc 	.word	0x200002cc
 8001678:	200009b8 	.word	0x200009b8
 800167c:	200002dc 	.word	0x200002dc
 8001680:	200002d4 	.word	0x200002d4
 8001684:	20000a1c 	.word	0x20000a1c
 8001688:	20000c50 	.word	0x20000c50

0800168c <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a68      	ldr	r2, [pc, #416]	; (8001838 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	f040 80a5 	bne.w	80017e8 <HAL_SPI_TxRxCpltCallback+0x15c>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	2140      	movs	r1, #64	; 0x40
 80016a2:	4866      	ldr	r0, [pc, #408]	; (800183c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016a4:	f005 fe88 	bl	80073b8 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016b0:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016d0:	6013      	str	r3, [r2, #0]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80016d2:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a5b      	ldr	r2, [pc, #364]	; (800184c <HAL_SPI_TxRxCpltCallback+0x1c0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	dd10      	ble.n	8001706 <HAL_SPI_TxRxCpltCallback+0x7a>
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80016f4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001700:	edc7 7a03 	vstr	s15, [r7, #12]
 8001704:	e025      	b.n	8001752 <HAL_SPI_TxRxCpltCallback+0xc6>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8001706:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_SPI_TxRxCpltCallback+0x1c4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	da10      	bge.n	800173a <HAL_SPI_TxRxCpltCallback+0xae>
 8001718:	4b4a      	ldr	r3, [pc, #296]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001728:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	edc7 7a03 	vstr	s15, [r7, #12]
 8001738:	e00b      	b.n	8001752 <HAL_SPI_TxRxCpltCallback+0xc6>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b3b      	ldr	r3, [pc, #236]	; (8001848 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800175a:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 800175c:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	edd7 7a03 	vldr	s15, [r7, #12]
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800176c:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4a38      	ldr	r2, [pc, #224]	; (800185c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800178a:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	601a      	str	r2, [r3, #0]
		velocity_index++;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80017a6:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b64      	cmp	r3, #100	; 0x64
 80017ae:	d102      	bne.n	80017b6 <HAL_SPI_TxRxCpltCallback+0x12a>
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001860 <HAL_SPI_TxRxCpltCallback+0x1d4>
 80017c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001864 <HAL_SPI_TxRxCpltCallback+0x1d8>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001868 <HAL_SPI_TxRxCpltCallback+0x1dc>
 80017d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017d4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800186c <HAL_SPI_TxRxCpltCallback+0x1e0>
 80017d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 2a90 	vmov	r2, s15
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80017e6:	60da      	str	r2, [r3, #12]
	}
	if (hspi == &hspi3) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d11a      	bne.n	8001826 <HAL_SPI_TxRxCpltCallback+0x19a>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2104      	movs	r1, #4
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80017f6:	f005 fddf 	bl	80073b8 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80017fc:	78db      	ldrb	r3, [r3, #3]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001804:	789b      	ldrb	r3, [r3, #2]
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800180e:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8001818:	7852      	ldrb	r2, [r2, #1]
 800181a:	0892      	lsrs	r2, r2, #2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	4313      	orrs	r3, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001824:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_SPI_TxRxCpltCallback+0x1f0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800182c:	4798      	blx	r3
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200009b8 	.word	0x200009b8
 800183c:	48000400 	.word	0x48000400
 8001840:	200002cc 	.word	0x200002cc
 8001844:	200002e8 	.word	0x200002e8
 8001848:	20000300 	.word	0x20000300
 800184c:	0002bf20 	.word	0x0002bf20
 8001850:	fffd40e0 	.word	0xfffd40e0
 8001854:	200002fc 	.word	0x200002fc
 8001858:	20000304 	.word	0x20000304
 800185c:	20000308 	.word	0x20000308
 8001860:	461c4000 	.word	0x461c4000
 8001864:	42700000 	.word	0x42700000
 8001868:	43b40000 	.word	0x43b40000
 800186c:	42c80000 	.word	0x42c80000
 8001870:	20000a1c 	.word	0x20000a1c
 8001874:	48000c00 	.word	0x48000c00
 8001878:	200002dc 	.word	0x200002dc
 800187c:	200002e4 	.word	0x200002e4

08001880 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2140      	movs	r1, #64	; 0x40
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800188e:	f005 fd93 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2104      	movs	r1, #4
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001898:	f005 fd8e 	bl	80073b8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800189c:	2305      	movs	r3, #5
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018a0:	4909      	ldr	r1, [pc, #36]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018a4:	f006 fe80 	bl	80085a8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80018a8:	2305      	movs	r3, #5
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018ac:	4909      	ldr	r1, [pc, #36]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018ae:	480a      	ldr	r0, [pc, #40]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018b0:	f006 fe7a 	bl	80085a8 <HAL_SPI_TransmitReceive_DMA>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	200002cc 	.word	0x200002cc
 80018c8:	200002c4 	.word	0x200002c4
 80018cc:	200009b8 	.word	0x200009b8
 80018d0:	200002dc 	.word	0x200002dc
 80018d4:	200002d4 	.word	0x200002d4
 80018d8:	20000a1c 	.word	0x20000a1c

080018dc <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a2 	beq.w	8001a34 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001900:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	ed93 7a03 	vldr	s14, [r3, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	edd3 6a06 	vldr	s13, [r3, #24]
 8001924:	edd7 7a03 	vldr	s15, [r7, #12]
 8001928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00e      	beq.n	800195e <Compute+0x82>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	ed93 7a03 	vldr	s14, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800194c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	ed93 7a03 	vldr	s14, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	dd04      	ble.n	800197e <Compute+0xa2>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e00e      	b.n	800199c <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ed93 7a03 	vldr	s14, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edd3 7a08 	vldr	s15, [r3, #32]
 800198a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	d503      	bpl.n	800199c <Compute+0xc0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1a      	ldr	r2, [r3, #32]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <Compute+0xe0>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edc3 7a01 	vstr	s15, [r3, #4]
 80019ba:	e003      	b.n	80019c4 <Compute+0xe8>
	else val->Output = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	ed93 6a07 	vldr	s12, [r3, #28]
 80019d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	dd04      	ble.n	8001a0c <Compute+0x130>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	e00e      	b.n	8001a2a <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	d503      	bpl.n	8001a2a <Compute+0x14e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	e000      	b.n	8001a36 <Compute+0x15a>
	if(!val->inAuto) return;
 8001a34:	bf00      	nop
}
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6178      	str	r0, [r7, #20]
 8001a48:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a50:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a54:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	f100 809b 	bmi.w	8001b9e <SetTunings+0x15e>
 8001a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	f100 8093 	bmi.w	8001b9e <SetTunings+0x15e>
 8001a78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	f100 808b 	bmi.w	8001b9e <SetTunings+0x15e>
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	f100 8083 	bmi.w	8001b9e <SetTunings+0x15e>
 8001a98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	dc79      	bgt.n	8001b9e <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 8001aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	bfcc      	ite	gt
 8001ab8:	2301      	movgt	r3, #1
 8001aba:	2300      	movle	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8001ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	bf4c      	ite	mi
 8001ad8:	2301      	movmi	r3, #1
 8001ada:	2300      	movpl	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001af2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001bac <SetTunings+0x16c>
 8001af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afa:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8001b04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8001b16:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d11d      	bne.n	8001b6c <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b36:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001bb0 <SetTunings+0x170>
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b4a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bb0 <SetTunings+0x170>
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001bb0 <SetTunings+0x170>
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001b9c:	e000      	b.n	8001ba0 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001b9e:	bf00      	nop
}
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	49742400 	.word	0x49742400
 8001bb0:	00000000 	.word	0x00000000

08001bb4 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	dd25      	ble.n	8001c10 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bde:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	ed93 7a06 	vldr	s14, [r3, #24]
 8001be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edd3 6a07 	vldr	s13, [r3, #28]
 8001bfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c28:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001c2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	dc44      	bgt.n	8001cc8 <SetOutputLimits+0xac>
   val->outMin = Min;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	dd04      	ble.n	8001c6a <SetOutputLimits+0x4e>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	e00e      	b.n	8001c88 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	d503      	bpl.n	8001c88 <SetOutputLimits+0x6c>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	dd04      	ble.n	8001ca8 <SetOutputLimits+0x8c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	e010      	b.n	8001cca <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	d505      	bpl.n	8001cca <SetOutputLimits+0xae>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	e000      	b.n	8001cca <SetOutputLimits+0xae>
   if(Min > Max) return;
 8001cc8:	bf00      	nop
}
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001cf4:	2a00      	cmp	r2, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2201      	moveq	r2, #1
 8001cfa:	2200      	movne	r2, #0
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d102      	bne.n	8001d08 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f808 	bl	8001d18 <Initialize>
    }
    val->inAuto = newAuto;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <Initialize>:

void Initialize(PID_instance *val)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	dd04      	ble.n	8001d50 <Initialize+0x38>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001d4e:	e00f      	b.n	8001d70 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d64:	d400      	bmi.n	8001d68 <Initialize+0x50>
}
 8001d66:	e003      	b.n	8001d70 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8001d98:	b40f      	push	{r0, r1, r2, r3}
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <PrintServerPrintf+0x44>)
 8001db0:	f00a fa40 	bl	800c234 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <PrintServerPrintf+0x48>)
 8001db6:	681c      	ldr	r4, [r3, #0]
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <PrintServerPrintf+0x44>)
 8001dba:	f7fe fa31 	bl	8000220 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4905      	ldr	r1, [pc, #20]	; (8001ddc <PrintServerPrintf+0x44>)
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f008 ff0e 	bl	800abe8 <HAL_UART_Transmit_DMA>
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001dd6:	b004      	add	sp, #16
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000498 	.word	0x20000498
 8001de0:	200000d0 	.word	0x200000d0

08001de4 <ADC_CAL>:

#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};
void ADC_CAL(){
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <ADC_CAL+0x134>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <ADC_CAL+0x138>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <ADC_CAL+0x13c>)
 8001e08:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <ADC_CAL+0x138>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <ADC_CAL+0x13c>)
 8001e12:	8812      	ldrh	r2, [r2, #0]
 8001e14:	b212      	sxth	r2, r2
 8001e16:	fb03 f202 	mul.w	r2, r3, r2
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <ADC_CAL+0x140>)
 8001e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	0852      	lsrs	r2, r2, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	011a      	lsls	r2, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <ADC_CAL+0x144>)
 8001e36:	fb82 1203 	smull	r1, r2, r2, r3
 8001e3a:	1152      	asrs	r2, r2, #5
 8001e3c:	17db      	asrs	r3, r3, #31
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	4b3a      	ldr	r3, [pc, #232]	; (8001f2c <ADC_CAL+0x148>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <ADC_CAL+0x148>)
 8001e48:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <ADC_CAL+0x138>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <ADC_CAL+0x13c>)
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	b212      	sxth	r2, r2
 8001e56:	fb03 f202 	mul.w	r2, r3, r2
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <ADC_CAL+0x140>)
 8001e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e60:	1ad2      	subs	r2, r2, r3
 8001e62:	0852      	lsrs	r2, r2, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	0adb      	lsrs	r3, r3, #11
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	011a      	lsls	r2, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <ADC_CAL+0x144>)
 8001e76:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7a:	1152      	asrs	r2, r2, #5
 8001e7c:	17db      	asrs	r3, r3, #31
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <ADC_CAL+0x148>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <ADC_CAL+0x148>)
 8001e88:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <ADC_CAL+0x138>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <ADC_CAL+0x13c>)
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	b212      	sxth	r2, r2
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <ADC_CAL+0x140>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	011a      	lsls	r2, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <ADC_CAL+0x144>)
 8001eb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eba:	1152      	asrs	r2, r2, #5
 8001ebc:	17db      	asrs	r3, r3, #31
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <ADC_CAL+0x148>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <ADC_CAL+0x148>)
 8001ec8:	6093      	str	r3, [r2, #8]
	calibrating--;
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <ADC_CAL+0x14c>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <ADC_CAL+0x14c>)
 8001ed4:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <ADC_CAL+0x14c>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d117      	bne.n	8001f0e <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <ADC_CAL+0x148>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <ADC_CAL+0x150>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <ADC_CAL+0x154>)
 8001eec:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <ADC_CAL+0x148>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <ADC_CAL+0x150>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <ADC_CAL+0x154>)
 8001efc:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <ADC_CAL+0x148>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <ADC_CAL+0x150>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	099b      	lsrs	r3, r3, #6
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <ADC_CAL+0x154>)
 8001f0c:	6093      	str	r3, [r2, #8]
	}
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	200000d4 	.word	0x200000d4
 8001f1c:	20000698 	.word	0x20000698
 8001f20:	200006e4 	.word	0x200006e4
 8001f24:	00100101 	.word	0x00100101
 8001f28:	51eb851f 	.word	0x51eb851f
 8001f2c:	2000070c 	.word	0x2000070c
 8001f30:	20000708 	.word	0x20000708
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	200006d8 	.word	0x200006d8

08001f3c <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <current_init+0x38>)
 8001f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f4a:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <current_init+0x3c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001f52:	2208      	movs	r2, #8
 8001f54:	4909      	ldr	r1, [pc, #36]	; (8001f7c <current_init+0x40>)
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <current_init+0x44>)
 8001f58:	f002 fabc 	bl	80044d4 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <current_init+0x48>)
 8001f5e:	f003 fc8c 	bl	800587a <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8001f62:	2100      	movs	r1, #0
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <current_init+0x48>)
 8001f66:	f003 fcaa 	bl	80058be <HAL_DAC_Start>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000708 	.word	0x20000708
 8001f78:	200006e8 	.word	0x200006e8
 8001f7c:	20000698 	.word	0x20000698
 8001f80:	2000076c 	.word	0x2000076c
 8001f84:	20000908 	.word	0x20000908

08001f88 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <voltage_temperature_init+0x20>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8001f96:	2208      	movs	r2, #8
 8001f98:	4904      	ldr	r1, [pc, #16]	; (8001fac <voltage_temperature_init+0x24>)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <voltage_temperature_init+0x28>)
 8001f9c:	f002 fa9a 	bl	80044d4 <HAL_ADC_Start_DMA>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200006fc 	.word	0x200006fc
 8001fac:	200006b8 	.word	0x200006b8
 8001fb0:	200007d8 	.word	0x200007d8

08001fb4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a83      	ldr	r2, [pc, #524]	; (80021cc <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	f040 80a9 	bne.w	8002118 <HAL_ADC_ConvHalfCpltCallback+0x164>
		if(calibrating)ADC_CAL();
 8001fc6:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_ADC_ConvHalfCpltCallback+0x20>
 8001fce:	f7ff ff09 	bl	8001de4 <ADC_CAL>
 8001fd2:	e0a1      	b.n	8002118 <HAL_ADC_ConvHalfCpltCallback+0x164>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001fd4:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8001ff4:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4b76      	ldr	r3, [pc, #472]	; (80021d8 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	da00      	bge.n	8002006 <HAL_ADC_ConvHalfCpltCallback+0x52>
 8002004:	330f      	adds	r3, #15
 8002006:	111b      	asrs	r3, r3, #4
 8002008:	461a      	mov	r2, r3
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b21b      	sxth	r3, r3
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8002016:	fb82 0203 	smull	r0, r2, r2, r3
 800201a:	441a      	add	r2, r3
 800201c:	12d2      	asrs	r2, r2, #11
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	011a      	lsls	r2, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	4a6e      	ldr	r2, [pc, #440]	; (80021e8 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 800202e:	fb82 0203 	smull	r0, r2, r2, r3
 8002032:	1152      	asrs	r2, r2, #5
 8002034:	17db      	asrs	r3, r3, #31
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	440b      	add	r3, r1
 800203a:	2232      	movs	r2, #50	; 0x32
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8002042:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4619      	mov	r1, r3
 800204a:	4b63      	ldr	r3, [pc, #396]	; (80021d8 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	da00      	bge.n	8002054 <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8002052:	330f      	adds	r3, #15
 8002054:	111b      	asrs	r3, r3, #4
 8002056:	461a      	mov	r2, r3
 8002058:	4b60      	ldr	r3, [pc, #384]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b21b      	sxth	r3, r3
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 8002064:	fb82 0203 	smull	r0, r2, r2, r3
 8002068:	441a      	add	r2, r3
 800206a:	12d2      	asrs	r2, r2, #11
 800206c:	17db      	asrs	r3, r3, #31
 800206e:	1ad2      	subs	r2, r2, r3
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	011a      	lsls	r2, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 800207c:	fb82 0203 	smull	r0, r2, r2, r3
 8002080:	1152      	asrs	r2, r2, #5
 8002082:	17db      	asrs	r3, r3, #31
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	440b      	add	r3, r1
 8002088:	2232      	movs	r2, #50	; 0x32
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8002090:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4619      	mov	r1, r3
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_ADC_ConvHalfCpltCallback+0x224>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da00      	bge.n	80020a2 <HAL_ADC_ConvHalfCpltCallback+0xee>
 80020a0:	330f      	adds	r3, #15
 80020a2:	111b      	asrs	r3, r3, #4
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 80020b2:	fb82 0203 	smull	r0, r2, r2, r3
 80020b6:	441a      	add	r2, r3
 80020b8:	12d2      	asrs	r2, r2, #11
 80020ba:	17db      	asrs	r3, r3, #31
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	011a      	lsls	r2, r3, #4
 80020c6:	4413      	add	r3, r2
 80020c8:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 80020ca:	fb82 0203 	smull	r0, r2, r2, r3
 80020ce:	1152      	asrs	r2, r2, #5
 80020d0:	17db      	asrs	r3, r3, #31
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	2232      	movs	r2, #50	; 0x32
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	4a43      	ldr	r2, [pc, #268]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 80020de:	6093      	str	r3, [r2, #8]
			data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020ec:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bfb8      	it	lt
 80020f4:	425b      	neglt	r3, r3
 80020f6:	441a      	add	r2, r3
 80020f8:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bfb8      	it	lt
 8002100:	425b      	neglt	r3, r3
 8002102:	4413      	add	r3, r2
 8002104:	0fda      	lsrs	r2, r3, #31
 8002106:	4413      	add	r3, r2
 8002108:	105b      	asrs	r3, r3, #1
 800210a:	461a      	mov	r2, r3
 800210c:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 800210e:	60da      	str	r2, [r3, #12]
			Curent_IRQ_callback(&data);
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_ADC_ConvHalfCpltCallback+0x23c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4835      	ldr	r0, [pc, #212]	; (80021ec <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8002116:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a36      	ldr	r2, [pc, #216]	; (80021f4 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d151      	bne.n	80021c4 <HAL_ADC_ConvHalfCpltCallback+0x210>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	b212      	sxth	r2, r2
 800212c:	fb03 f202 	mul.w	r2, r3, r2
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002132:	fba3 1302 	umull	r1, r3, r3, r2
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	0852      	lsrs	r2, r2, #1
 800213a:	4413      	add	r3, r2
 800213c:	0adb      	lsrs	r3, r3, #11
 800213e:	b25a      	sxtb	r2, r3
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002142:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	4a24      	ldr	r2, [pc, #144]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	b212      	sxth	r2, r2
 8002150:	fb03 f202 	mul.w	r2, r3, r2
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002156:	fba3 1302 	umull	r1, r3, r3, r2
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	0852      	lsrs	r2, r2, #1
 800215e:	4413      	add	r3, r2
 8002160:	0adb      	lsrs	r3, r3, #11
 8002162:	b25a      	sxtb	r2, r3
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002166:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	b212      	sxth	r2, r2
 8002174:	fb03 f202 	mul.w	r2, r3, r2
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	461a      	mov	r2, r3
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002184:	fba3 1302 	umull	r1, r3, r3, r2
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	0852      	lsrs	r2, r2, #1
 800218c:	4413      	add	r3, r2
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002192:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800219c:	8812      	ldrh	r2, [r2, #0]
 800219e:	b212      	sxth	r2, r2
 80021a0:	fb03 f202 	mul.w	r2, r3, r2
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <HAL_ADC_ConvHalfCpltCallback+0x250>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	0bdb      	lsrs	r3, r3, #15
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 80021ba:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	480f      	ldr	r0, [pc, #60]	; (8002200 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 80021c2:	4798      	blx	r3
	}
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	2000076c 	.word	0x2000076c
 80021d0:	20000708 	.word	0x20000708
 80021d4:	200000d4 	.word	0x200000d4
 80021d8:	20000698 	.word	0x20000698
 80021dc:	200006e4 	.word	0x200006e4
 80021e0:	200006d8 	.word	0x200006d8
 80021e4:	80080081 	.word	0x80080081
 80021e8:	51eb851f 	.word	0x51eb851f
 80021ec:	200006ec 	.word	0x200006ec
 80021f0:	200006e8 	.word	0x200006e8
 80021f4:	200007d8 	.word	0x200007d8
 80021f8:	200006b8 	.word	0x200006b8
 80021fc:	00100101 	.word	0x00100101
 8002200:	20000700 	.word	0x20000700
 8002204:	ccd99a67 	.word	0xccd99a67
 8002208:	200006fc 	.word	0x200006fc

0800220c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a82      	ldr	r2, [pc, #520]	; (8002420 <HAL_ADC_ConvCpltCallback+0x214>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 80a7 	bne.w	800236c <HAL_ADC_ConvCpltCallback+0x160>
 800221e:	4b81      	ldr	r3, [pc, #516]	; (8002424 <HAL_ADC_ConvCpltCallback+0x218>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80a2 	bne.w	800236c <HAL_ADC_ConvCpltCallback+0x160>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8002228:	4b7f      	ldr	r3, [pc, #508]	; (8002428 <HAL_ADC_ConvCpltCallback+0x21c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b7c      	ldr	r3, [pc, #496]	; (800242c <HAL_ADC_ConvCpltCallback+0x220>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	b21a      	sxth	r2, r3
 8002246:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 8002248:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800224a:	4b7a      	ldr	r3, [pc, #488]	; (8002434 <HAL_ADC_ConvCpltCallback+0x228>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4b76      	ldr	r3, [pc, #472]	; (800242c <HAL_ADC_ConvCpltCallback+0x220>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	da00      	bge.n	800225a <HAL_ADC_ConvCpltCallback+0x4e>
 8002258:	330f      	adds	r3, #15
 800225a:	111b      	asrs	r3, r3, #4
 800225c:	461a      	mov	r2, r3
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b21b      	sxth	r3, r3
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	4a73      	ldr	r2, [pc, #460]	; (8002438 <HAL_ADC_ConvCpltCallback+0x22c>)
 800226a:	fb82 0203 	smull	r0, r2, r2, r3
 800226e:	441a      	add	r2, r3
 8002270:	12d2      	asrs	r2, r2, #11
 8002272:	17db      	asrs	r3, r3, #31
 8002274:	1ad2      	subs	r2, r2, r3
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	011a      	lsls	r2, r3, #4
 800227e:	4413      	add	r3, r2
 8002280:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_ADC_ConvCpltCallback+0x230>)
 8002282:	fb82 0203 	smull	r0, r2, r2, r3
 8002286:	1152      	asrs	r2, r2, #5
 8002288:	17db      	asrs	r3, r3, #31
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	440b      	add	r3, r1
 800228e:	2232      	movs	r2, #50	; 0x32
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 8002296:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_ADC_ConvCpltCallback+0x228>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_ADC_ConvCpltCallback+0x220>)
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da00      	bge.n	80022a8 <HAL_ADC_ConvCpltCallback+0x9c>
 80022a6:	330f      	adds	r3, #15
 80022a8:	111b      	asrs	r3, r3, #4
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b60      	ldr	r3, [pc, #384]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_ADC_ConvCpltCallback+0x22c>)
 80022b8:	fb82 0203 	smull	r0, r2, r2, r3
 80022bc:	441a      	add	r2, r3
 80022be:	12d2      	asrs	r2, r2, #11
 80022c0:	17db      	asrs	r3, r3, #31
 80022c2:	1ad2      	subs	r2, r2, r3
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	4413      	add	r3, r2
 80022ce:	4a5b      	ldr	r2, [pc, #364]	; (800243c <HAL_ADC_ConvCpltCallback+0x230>)
 80022d0:	fb82 0203 	smull	r0, r2, r2, r3
 80022d4:	1152      	asrs	r2, r2, #5
 80022d6:	17db      	asrs	r3, r3, #31
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	440b      	add	r3, r1
 80022dc:	2232      	movs	r2, #50	; 0x32
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a57      	ldr	r2, [pc, #348]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 80022e4:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80022e6:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_ADC_ConvCpltCallback+0x228>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_ADC_ConvCpltCallback+0x220>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da00      	bge.n	80022f6 <HAL_ADC_ConvCpltCallback+0xea>
 80022f4:	330f      	adds	r3, #15
 80022f6:	111b      	asrs	r3, r3, #4
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b21b      	sxth	r3, r3
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_ADC_ConvCpltCallback+0x22c>)
 8002306:	fb82 0203 	smull	r0, r2, r2, r3
 800230a:	441a      	add	r2, r3
 800230c:	12d2      	asrs	r2, r2, #11
 800230e:	17db      	asrs	r3, r3, #31
 8002310:	1ad2      	subs	r2, r2, r3
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	011a      	lsls	r2, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_ADC_ConvCpltCallback+0x230>)
 800231e:	fb82 0203 	smull	r0, r2, r2, r3
 8002322:	1152      	asrs	r2, r2, #5
 8002324:	17db      	asrs	r3, r3, #31
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	440b      	add	r3, r1
 800232a:	2232      	movs	r2, #50	; 0x32
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	4a43      	ldr	r2, [pc, #268]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 8002332:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002334:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800233c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	bfb8      	it	lt
 8002348:	425b      	neglt	r3, r3
 800234a:	441a      	add	r2, r3
 800234c:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	bfb8      	it	lt
 8002354:	425b      	neglt	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	0fda      	lsrs	r2, r3, #31
 800235a:	4413      	add	r3, r2
 800235c:	105b      	asrs	r3, r3, #1
 800235e:	461a      	mov	r2, r3
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 8002362:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8002364:	4b37      	ldr	r3, [pc, #220]	; (8002444 <HAL_ADC_ConvCpltCallback+0x238>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4835      	ldr	r0, [pc, #212]	; (8002440 <HAL_ADC_ConvCpltCallback+0x234>)
 800236a:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a36      	ldr	r2, [pc, #216]	; (8002448 <HAL_ADC_ConvCpltCallback+0x23c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d151      	bne.n	8002418 <HAL_ADC_ConvCpltCallback+0x20c>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_ADC_ConvCpltCallback+0x240>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	b212      	sxth	r2, r2
 8002380:	fb03 f202 	mul.w	r2, r3, r2
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_ADC_ConvCpltCallback+0x244>)
 8002386:	fba3 1302 	umull	r1, r3, r3, r2
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	0852      	lsrs	r2, r2, #1
 800238e:	4413      	add	r3, r2
 8002390:	0adb      	lsrs	r3, r3, #11
 8002392:	b25a      	sxtb	r2, r3
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_ADC_ConvCpltCallback+0x248>)
 8002396:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_ADC_ConvCpltCallback+0x240>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	4a24      	ldr	r2, [pc, #144]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	b212      	sxth	r2, r2
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_ADC_ConvCpltCallback+0x244>)
 80023aa:	fba3 1302 	umull	r1, r3, r3, r2
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	0adb      	lsrs	r3, r3, #11
 80023b6:	b25a      	sxtb	r2, r3
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_ADC_ConvCpltCallback+0x248>)
 80023ba:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_ADC_ConvCpltCallback+0x240>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	b212      	sxth	r2, r2
 80023c8:	fb03 f202 	mul.w	r2, r3, r2
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_ADC_ConvCpltCallback+0x244>)
 80023d8:	fba3 1302 	umull	r1, r3, r3, r2
 80023dc:	1ad2      	subs	r2, r2, r3
 80023de:	0852      	lsrs	r2, r2, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	0adb      	lsrs	r3, r3, #11
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_ADC_ConvCpltCallback+0x248>)
 80023e6:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_ADC_ConvCpltCallback+0x240>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <HAL_ADC_ConvCpltCallback+0x224>)
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	b212      	sxth	r2, r2
 80023f4:	fb03 f202 	mul.w	r2, r3, r2
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <HAL_ADC_ConvCpltCallback+0x24c>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	0bdb      	lsrs	r3, r3, #15
 800240a:	b29a      	uxth	r2, r3
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_ADC_ConvCpltCallback+0x248>)
 800240e:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_ADC_ConvCpltCallback+0x250>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <HAL_ADC_ConvCpltCallback+0x248>)
 8002416:	4798      	blx	r3
	}
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000076c 	.word	0x2000076c
 8002424:	20000708 	.word	0x20000708
 8002428:	200000d4 	.word	0x200000d4
 800242c:	20000698 	.word	0x20000698
 8002430:	200006e4 	.word	0x200006e4
 8002434:	200006d8 	.word	0x200006d8
 8002438:	80080081 	.word	0x80080081
 800243c:	51eb851f 	.word	0x51eb851f
 8002440:	200006ec 	.word	0x200006ec
 8002444:	200006e8 	.word	0x200006e8
 8002448:	200007d8 	.word	0x200007d8
 800244c:	200006b8 	.word	0x200006b8
 8002450:	00100101 	.word	0x00100101
 8002454:	20000700 	.word	0x20000700
 8002458:	ccd99a67 	.word	0xccd99a67
 800245c:	200006fc 	.word	0x200006fc

08002460 <dac_value>:

void dac_value(uint16_t V_dac){
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	4613      	mov	r3, r2
 800246e:	031b      	lsls	r3, r3, #12
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <dac_value+0x34>)
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	b212      	sxth	r2, r2
 8002478:	fb93 f3f2 	sdiv	r3, r3, r2
 800247c:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	4804      	ldr	r0, [pc, #16]	; (8002498 <dac_value+0x38>)
 8002486:	f003 fa6d 	bl	8005964 <HAL_DAC_SetValue>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200006e4 	.word	0x200006e4
 8002498:	20000908 	.word	0x20000908

0800249c <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f004 f8b9 	bl	800661c <HAL_FDCAN_Start>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e00a      	b.n	80024ca <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f004 f9f5 	bl	80068a8 <HAL_FDCAN_ActivateNotification>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <FDCAN_addCallback+0x70>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d901      	bls.n	80024ec <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e025      	b.n	8002538 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e00c      	b.n	800250c <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <FDCAN_addCallback+0x74>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d101      	bne.n	8002506 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e018      	b.n	8002538 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <FDCAN_addCallback+0x70>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	429a      	cmp	r2, r3
 8002514:	d3ed      	bcc.n	80024f2 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <FDCAN_addCallback+0x70>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	490a      	ldr	r1, [pc, #40]	; (8002548 <FDCAN_addCallback+0x74>)
 800251e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <FDCAN_addCallback+0x74>)
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <FDCAN_addCallback+0x70>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	4a04      	ldr	r2, [pc, #16]	; (8002544 <FDCAN_addCallback+0x70>)
 8002534:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3724      	adds	r7, #36	; 0x24
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000768 	.word	0x20000768
 8002548:	20000718 	.word	0x20000718

0800254c <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08e      	sub	sp, #56	; 0x38
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800255c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002560:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800256e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8002574:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4619      	mov	r1, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f004 f86e 	bl	800666c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3738      	adds	r7, #56	; 0x38
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b09e      	sub	sp, #120	; 0x78
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f004 f89b 	bl	80066f4 <HAL_FDCAN_GetRxMessage>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80025c4:	f000 fd90 	bl	80030e8 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80025c8:	2300      	movs	r3, #0
 80025ca:	677b      	str	r3, [r7, #116]	; 0x74
 80025cc:	e012      	b.n	80025f4 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	429a      	cmp	r2, r3
 80025dc:	d107      	bne.n	80025ee <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80025e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025e6:	f107 020c 	add.w	r2, r7, #12
 80025ea:	4610      	mov	r0, r2
 80025ec:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80025ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f0:	3301      	adds	r3, #1
 80025f2:	677b      	str	r3, [r7, #116]	; 0x74
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_FDCAN_RxFifo0Callback+0x68>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d3e7      	bcc.n	80025ce <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3778      	adds	r7, #120	; 0x78
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000718 	.word	0x20000718
 800260c:	20000768 	.word	0x20000768

08002610 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2220      	movs	r2, #32
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f009 fe11 	bl	800c250 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800262e:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <MX_ADC1_Init+0x154>)
 8002630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <MX_ADC1_Init+0x154>)
 8002638:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800263c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <MX_ADC1_Init+0x154>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <MX_ADC1_Init+0x154>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <MX_ADC1_Init+0x154>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002650:	4b44      	ldr	r3, [pc, #272]	; (8002764 <MX_ADC1_Init+0x154>)
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002656:	4b43      	ldr	r3, [pc, #268]	; (8002764 <MX_ADC1_Init+0x154>)
 8002658:	2208      	movs	r2, #8
 800265a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <MX_ADC1_Init+0x154>)
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002662:	4b40      	ldr	r3, [pc, #256]	; (8002764 <MX_ADC1_Init+0x154>)
 8002664:	2201      	movs	r2, #1
 8002666:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <MX_ADC1_Init+0x154>)
 800266a:	2204      	movs	r2, #4
 800266c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <MX_ADC1_Init+0x154>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <MX_ADC1_Init+0x154>)
 8002678:	2200      	movs	r2, #0
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <MX_ADC1_Init+0x154>)
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <MX_ADC1_Init+0x154>)
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <MX_ADC1_Init+0x154>)
 800268c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <MX_ADC1_Init+0x154>)
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800269a:	4b32      	ldr	r3, [pc, #200]	; (8002764 <MX_ADC1_Init+0x154>)
 800269c:	220c      	movs	r2, #12
 800269e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <MX_ADC1_Init+0x154>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <MX_ADC1_Init+0x154>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <MX_ADC1_Init+0x154>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026b2:	482c      	ldr	r0, [pc, #176]	; (8002764 <MX_ADC1_Init+0x154>)
 80026b4:	f001 fd84 	bl	80041c0 <HAL_ADC_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80026be:	f000 fd13 	bl	80030e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ca:	4619      	mov	r1, r3
 80026cc:	4825      	ldr	r0, [pc, #148]	; (8002764 <MX_ADC1_Init+0x154>)
 80026ce:	f002 ff21 	bl	8005514 <HAL_ADCEx_MultiModeConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80026d8:	f000 fd06 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_ADC1_Init+0x158>)
 80026de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026e0:	2306      	movs	r3, #6
 80026e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80026e4:	2303      	movs	r3, #3
 80026e6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026e8:	237f      	movs	r3, #127	; 0x7f
 80026ea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026ec:	2304      	movs	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	481a      	ldr	r0, [pc, #104]	; (8002764 <MX_ADC1_Init+0x154>)
 80026fa:	f002 f9cd 	bl	8004a98 <HAL_ADC_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002704:	f000 fcf0 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_ADC1_Init+0x15c>)
 800270a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800270c:	230c      	movs	r3, #12
 800270e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4813      	ldr	r0, [pc, #76]	; (8002764 <MX_ADC1_Init+0x154>)
 8002716:	f002 f9bf 	bl	8004a98 <HAL_ADC_ConfigChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002720:	f000 fce2 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_ADC1_Init+0x160>)
 8002726:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002728:	2312      	movs	r3, #18
 800272a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4619      	mov	r1, r3
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <MX_ADC1_Init+0x154>)
 8002732:	f002 f9b1 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 800273c:	f000 fcd4 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_ADC1_Init+0x164>)
 8002742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002744:	2318      	movs	r3, #24
 8002746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	4619      	mov	r1, r3
 800274c:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_ADC1_Init+0x154>)
 800274e:	f002 f9a3 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8002758:	f000 fcc6 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800275c:	bf00      	nop
 800275e:	3730      	adds	r7, #48	; 0x30
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000076c 	.word	0x2000076c
 8002768:	04300002 	.word	0x04300002
 800276c:	08600004 	.word	0x08600004
 8002770:	0c900008 	.word	0x0c900008
 8002774:	cb840000 	.word	0xcb840000

08002778 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800277e:	463b      	mov	r3, r7
 8002780:	2220      	movs	r2, #32
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f009 fd63 	bl	800c250 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800278a:	4b47      	ldr	r3, [pc, #284]	; (80028a8 <MX_ADC2_Init+0x130>)
 800278c:	4a47      	ldr	r2, [pc, #284]	; (80028ac <MX_ADC2_Init+0x134>)
 800278e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <MX_ADC2_Init+0x130>)
 8002792:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002796:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <MX_ADC2_Init+0x130>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800279e:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80027a4:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027b2:	2204      	movs	r2, #4
 80027b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027be:	2201      	movs	r2, #1
 80027c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027c4:	2204      	movs	r2, #4
 80027c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027d0:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80027ec:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <MX_ADC2_Init+0x130>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <MX_ADC2_Init+0x130>)
 8002802:	2200      	movs	r2, #0
 8002804:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <MX_ADC2_Init+0x130>)
 8002808:	2201      	movs	r2, #1
 800280a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800280c:	4826      	ldr	r0, [pc, #152]	; (80028a8 <MX_ADC2_Init+0x130>)
 800280e:	f001 fcd7 	bl	80041c0 <HAL_ADC_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8002818:	f000 fc66 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <MX_ADC2_Init+0x138>)
 800281e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002820:	2306      	movs	r3, #6
 8002822:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002824:	2307      	movs	r3, #7
 8002826:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002828:	237f      	movs	r3, #127	; 0x7f
 800282a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800282c:	2304      	movs	r3, #4
 800282e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4619      	mov	r1, r3
 8002838:	481b      	ldr	r0, [pc, #108]	; (80028a8 <MX_ADC2_Init+0x130>)
 800283a:	f002 f92d 	bl	8004a98 <HAL_ADC_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002844:	f000 fc50 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_ADC2_Init+0x13c>)
 800284a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800284c:	230c      	movs	r3, #12
 800284e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002854:	463b      	mov	r3, r7
 8002856:	4619      	mov	r1, r3
 8002858:	4813      	ldr	r0, [pc, #76]	; (80028a8 <MX_ADC2_Init+0x130>)
 800285a:	f002 f91d 	bl	8004a98 <HAL_ADC_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8002864:	f000 fc40 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_ADC2_Init+0x140>)
 800286a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800286c:	2312      	movs	r3, #18
 800286e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <MX_ADC2_Init+0x130>)
 8002876:	f002 f90f 	bl	8004a98 <HAL_ADC_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8002880:	f000 fc32 	bl	80030e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <MX_ADC2_Init+0x144>)
 8002886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002888:	2318      	movs	r3, #24
 800288a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_ADC2_Init+0x130>)
 8002892:	f002 f901 	bl	8004a98 <HAL_ADC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 800289c:	f000 fc24 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200007d8 	.word	0x200007d8
 80028ac:	50000100 	.word	0x50000100
 80028b0:	32601000 	.word	0x32601000
 80028b4:	3ac04000 	.word	0x3ac04000
 80028b8:	36902000 	.word	0x36902000
 80028bc:	0c900008 	.word	0x0c900008

080028c0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b09e      	sub	sp, #120	; 0x78
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	2244      	movs	r2, #68	; 0x44
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f009 fcb5 	bl	800c250 <memset>
  if(adcHandle->Instance==ADC1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ee:	d171      	bne.n	80029d4 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80028f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80028f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f005 fbb5 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800290c:	f000 fbec 	bl	80030e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002910:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	4a79      	ldr	r2, [pc, #484]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 8002918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800291a:	4b78      	ldr	r3, [pc, #480]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10b      	bne.n	800293a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002922:	4b77      	ldr	r3, [pc, #476]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a76      	ldr	r2, [pc, #472]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293a:	4b71      	ldr	r3, [pc, #452]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b6e      	ldr	r3, [pc, #440]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8002952:	2307      	movs	r3, #7
 8002954:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002956:	2303      	movs	r3, #3
 8002958:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002962:	4619      	mov	r1, r3
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002968:	f004 fba4 	bl	80070b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800296c:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_ADC_MspInit+0x248>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 8002974:	2205      	movs	r2, #5
 8002976:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002978:	4b62      	ldr	r3, [pc, #392]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002984:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 800298c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002990:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002992:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 8002994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002998:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 800299c:	2220      	movs	r2, #32
 800299e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029a0:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029a6:	4857      	ldr	r0, [pc, #348]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 80029a8:	f003 f9ac 	bl	8005d04 <HAL_DMA_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80029b2:	f000 fb99 	bl	80030e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
 80029bc:	4a51      	ldr	r2, [pc, #324]	; (8002b04 <HAL_ADC_MspInit+0x244>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2012      	movs	r0, #18
 80029c8:	f002 ff23 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80029cc:	2012      	movs	r0, #18
 80029ce:	f002 ff3a 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80029d2:	e08f      	b.n	8002af4 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	; (8002b0c <HAL_ADC_MspInit+0x24c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	f040 808a 	bne.w	8002af4 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80029e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80029e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fb3d 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 80029fc:	f000 fb74 	bl	80030e8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a3d      	ldr	r2, [pc, #244]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 8002a08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <HAL_ADC_MspInit+0x23c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10b      	bne.n	8002a2a <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	4a3a      	ldr	r2, [pc, #232]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a36:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <HAL_ADC_MspInit+0x240>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8002a5a:	2360      	movs	r3, #96	; 0x60
 8002a5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a70:	f004 fb20 	bl	80070b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002a74:	f640 0304 	movw	r3, #2052	; 0x804
 8002a78:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a86:	4619      	mov	r1, r3
 8002a88:	4821      	ldr	r0, [pc, #132]	; (8002b10 <HAL_ADC_MspInit+0x250>)
 8002a8a:	f004 fb13 	bl	80070b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002a90:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_ADC_MspInit+0x258>)
 8002a92:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa0:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002ac8:	4812      	ldr	r0, [pc, #72]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002aca:	f003 f91b 	bl	8005d04 <HAL_DMA_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002ad4:	f000 fb08 	bl	80030e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_ADC_MspInit+0x254>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2012      	movs	r0, #18
 8002aea:	f002 fe92 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002aee:	2012      	movs	r0, #18
 8002af0:	f002 fea9 	bl	8005846 <HAL_NVIC_EnableIRQ>
}
 8002af4:	bf00      	nop
 8002af6:	3778      	adds	r7, #120	; 0x78
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000904 	.word	0x20000904
 8002b00:	40021000 	.word	0x40021000
 8002b04:	20000844 	.word	0x20000844
 8002b08:	40020008 	.word	0x40020008
 8002b0c:	50000100 	.word	0x50000100
 8002b10:	48000400 	.word	0x48000400
 8002b14:	200008a4 	.word	0x200008a4
 8002b18:	4002001c 	.word	0x4002001c

08002b1c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002b22:	463b      	mov	r3, r7
 8002b24:	2230      	movs	r2, #48	; 0x30
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f009 fb91 	bl	800c250 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <MX_DAC1_Init+0x6c>)
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <MX_DAC1_Init+0x70>)
 8002b32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002b34:	4814      	ldr	r0, [pc, #80]	; (8002b88 <MX_DAC1_Init+0x6c>)
 8002b36:	f002 fea0 	bl	800587a <HAL_DAC_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002b40:	f000 fad2 	bl	80030e8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b68:	463b      	mov	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <MX_DAC1_Init+0x6c>)
 8002b70:	f002 ff20 	bl	80059b4 <HAL_DAC_ConfigChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002b7a:	f000 fab5 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000908 	.word	0x20000908
 8002b8c:	50000800 	.word	0x50000800

08002b90 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_DAC_MspInit+0x74>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d124      	bne.n	8002bfc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_DAC_MspInit+0x78>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002be2:	2310      	movs	r3, #16
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be6:	2303      	movs	r3, #3
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf8:	f004 fa5c 	bl	80070b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	50000800 	.word	0x50000800
 8002c08:	40021000 	.word	0x40021000

08002c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002c12:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6493      	str	r3, [r2, #72]	; 0x48
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c4e:	4b21      	ldr	r3, [pc, #132]	; (8002cd4 <MX_DMA_Init+0xc8>)
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	200b      	movs	r0, #11
 8002c60:	f002 fdd7 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c64:	200b      	movs	r0, #11
 8002c66:	f002 fdee 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	200c      	movs	r0, #12
 8002c70:	f002 fdcf 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002c74:	200c      	movs	r0, #12
 8002c76:	f002 fde6 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	200d      	movs	r0, #13
 8002c80:	f002 fdc7 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002c84:	200d      	movs	r0, #13
 8002c86:	f002 fdde 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	200e      	movs	r0, #14
 8002c90:	f002 fdbf 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002c94:	200e      	movs	r0, #14
 8002c96:	f002 fdd6 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2038      	movs	r0, #56	; 0x38
 8002ca0:	f002 fdb7 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002ca4:	2038      	movs	r0, #56	; 0x38
 8002ca6:	f002 fdce 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	2039      	movs	r0, #57	; 0x39
 8002cb0:	f002 fdaf 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002cb4:	2039      	movs	r0, #57	; 0x39
 8002cb6:	f002 fdc6 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	203a      	movs	r0, #58	; 0x3a
 8002cc0:	f002 fda7 	bl	8005812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002cc4:	203a      	movs	r0, #58	; 0x3a
 8002cc6:	f002 fdbe 	bl	8005846 <HAL_NVIC_EnableIRQ>

}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002cde:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <MX_FDCAN1_Init+0x8c>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002cea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002cee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d16:	222a      	movs	r2, #42	; 0x2a
 8002d18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d28:	2209      	movs	r2, #9
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d2e:	220a      	movs	r2, #10
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d34:	2209      	movs	r2, #9
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002d4a:	4805      	ldr	r0, [pc, #20]	; (8002d60 <MX_FDCAN1_Init+0x88>)
 8002d4c:	f003 fb0c 	bl	8006368 <HAL_FDCAN_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002d56:	f000 f9c7 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000091c 	.word	0x2000091c
 8002d64:	40006400 	.word	0x40006400

08002d68 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b09a      	sub	sp, #104	; 0x68
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	2244      	movs	r2, #68	; 0x44
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f009 fa61 	bl	800c250 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_FDCAN_MspInit+0xbc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d141      	bne.n	8002e1c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002d9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	4618      	mov	r0, r3
 8002daa:	f005 f961 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002db4:	f000 f998 	bl	80030e8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_FDCAN_MspInit+0xc0>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002de8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002dfa:	2309      	movs	r3, #9
 8002dfc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e02:	4619      	mov	r1, r3
 8002e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e08:	f004 f954 	bl	80070b4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2015      	movs	r0, #21
 8002e12:	f002 fcfe 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002e16:	2015      	movs	r0, #21
 8002e18:	f002 fd15 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3768      	adds	r7, #104	; 0x68
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40006400 	.word	0x40006400
 8002e28:	40021000 	.word	0x40021000

08002e2c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_FMAC_Init+0x20>)
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <MX_FMAC_Init+0x24>)
 8002e34:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_FMAC_Init+0x20>)
 8002e38:	f004 f890 	bl	8006f5c <HAL_FMAC_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002e42:	f000 f951 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000980 	.word	0x20000980
 8002e50:	40021400 	.word	0x40021400

08002e54 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_FMAC_MspInit+0x38>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10b      	bne.n	8002e7e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_FMAC_MspInit+0x3c>)
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_FMAC_MspInit+0x3c>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	6493      	str	r3, [r2, #72]	; 0x48
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <HAL_FMAC_MspInit+0x3c>)
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021000 	.word	0x40021000

08002e94 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002eb0:	f043 0320 	orr.w	r3, r3, #32
 8002eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ece:	4b48      	ldr	r3, [pc, #288]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	4a44      	ldr	r2, [pc, #272]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee6:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a3e      	ldr	r2, [pc, #248]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efe:	4b3c      	ldr	r3, [pc, #240]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <MX_GPIO_Init+0x15c>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	21c0      	movs	r1, #192	; 0xc0
 8002f26:	4833      	ldr	r0, [pc, #204]	; (8002ff4 <MX_GPIO_Init+0x160>)
 8002f28:	f004 fa46 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f36:	f004 fa3f 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	482e      	ldr	r0, [pc, #184]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002f40:	f004 fa3a 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	482c      	ldr	r0, [pc, #176]	; (8002ffc <MX_GPIO_Init+0x168>)
 8002f4a:	f004 fa35 	bl	80073b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4823      	ldr	r0, [pc, #140]	; (8002ff4 <MX_GPIO_Init+0x160>)
 8002f66:	f004 f8a5 	bl	80070b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4619      	mov	r1, r3
 8002f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f8a:	f004 f893 	bl	80070b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002faa:	f004 f883 	bl	80070b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <MX_GPIO_Init+0x164>)
 8002fc6:	f004 f875 	bl	80070b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4806      	ldr	r0, [pc, #24]	; (8002ffc <MX_GPIO_Init+0x168>)
 8002fe2:	f004 f867 	bl	80070b4 <HAL_GPIO_Init>

}
 8002fe6:	bf00      	nop
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	48000800 	.word	0x48000800
 8002ff8:	48000c00 	.word	0x48000c00
 8002ffc:	48000400 	.word	0x48000400

08003000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003004:	f000 fe05 	bl	8003c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003008:	f000 f81b 	bl	8003042 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800300c:	f7ff ff42 	bl	8002e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8003010:	f7ff fdfc 	bl	8002c0c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003014:	f7ff fe60 	bl	8002cd8 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8003018:	f000 f86c 	bl	80030f4 <MX_SPI1_Init>
  MX_SPI3_Init();
 800301c:	f000 f8a8 	bl	8003170 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003020:	f000 fb3c 	bl	800369c <MX_TIM1_Init>
  MX_ADC1_Init();
 8003024:	f7ff faf4 	bl	8002610 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003028:	f7ff fba6 	bl	8002778 <MX_ADC2_Init>
  MX_DAC1_Init();
 800302c:	f7ff fd76 	bl	8002b1c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8003030:	f000 fcec 	bl	8003a0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003034:	f000 fbfa 	bl	800382c <MX_TIM3_Init>
  MX_FMAC_Init();
 8003038:	f7ff fef8 	bl	8002e2c <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 800303c:	f7fd fb8c 	bl	8000758 <BLDC_main>
 8003040:	e7fc      	b.n	800303c <main+0x3c>

08003042 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b094      	sub	sp, #80	; 0x50
 8003046:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	2238      	movs	r2, #56	; 0x38
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f009 f8fd 	bl	800c250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003064:	2000      	movs	r0, #0
 8003066:	f004 f9d9 	bl	800741c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800306a:	2302      	movs	r3, #2
 800306c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800306e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003074:	2340      	movs	r3, #64	; 0x40
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003078:	2302      	movs	r3, #2
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800307c:	2302      	movs	r3, #2
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003080:	2304      	movs	r3, #4
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003084:	2350      	movs	r3, #80	; 0x50
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003088:	2302      	movs	r3, #2
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800308c:	2308      	movs	r3, #8
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003090:	2302      	movs	r3, #2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fa73 	bl	8007584 <HAL_RCC_OscConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80030a4:	f000 f820 	bl	80030e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a8:	230f      	movs	r3, #15
 80030aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ac:	2303      	movs	r3, #3
 80030ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	2104      	movs	r1, #4
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 fd77 	bl	8007bb4 <HAL_RCC_ClockConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80030cc:	f000 f80c 	bl	80030e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 80030d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d4:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80030d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030dc:	f004 fea6 	bl	8007e2c <HAL_RCC_MCOConfig>
}
 80030e0:	bf00      	nop
 80030e2:	3750      	adds	r7, #80	; 0x50
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
}
 80030ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <Error_Handler+0x8>
	...

080030f4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <MX_SPI1_Init+0x74>)
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <MX_SPI1_Init+0x78>)
 80030fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <MX_SPI1_Init+0x74>)
 8003100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <MX_SPI1_Init+0x74>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <MX_SPI1_Init+0x74>)
 800310e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003112:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_SPI1_Init+0x74>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_SPI1_Init+0x74>)
 800311c:	2201      	movs	r2, #1
 800311e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_SPI1_Init+0x74>)
 8003122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003126:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_SPI1_Init+0x74>)
 800312a:	2228      	movs	r2, #40	; 0x28
 800312c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_SPI1_Init+0x74>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_SPI1_Init+0x74>)
 8003136:	2200      	movs	r2, #0
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_SPI1_Init+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_SPI1_Init+0x74>)
 8003142:	2207      	movs	r2, #7
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_SPI1_Init+0x74>)
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_SPI1_Init+0x74>)
 800314e:	2200      	movs	r2, #0
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <MX_SPI1_Init+0x74>)
 8003154:	f005 f97c 	bl	8008450 <HAL_SPI_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800315e:	f7ff ffc3 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200009b8 	.word	0x200009b8
 800316c:	40013000 	.word	0x40013000

08003170 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <MX_SPI3_Init+0x74>)
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <MX_SPI3_Init+0x78>)
 8003178:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <MX_SPI3_Init+0x74>)
 800317c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003180:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <MX_SPI3_Init+0x74>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <MX_SPI3_Init+0x74>)
 800318a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800318e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <MX_SPI3_Init+0x74>)
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <MX_SPI3_Init+0x74>)
 8003198:	2201      	movs	r2, #1
 800319a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_SPI3_Init+0x74>)
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031a6:	2228      	movs	r2, #40	; 0x28
 80031a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031be:	2207      	movs	r2, #7
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <MX_SPI3_Init+0x74>)
 80031d0:	f005 f93e 	bl	8008450 <HAL_SPI_Init>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80031da:	f7ff ff85 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000a1c 	.word	0x20000a1c
 80031e8:	40003c00 	.word	0x40003c00

080031ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a89      	ldr	r2, [pc, #548]	; (8003430 <HAL_SPI_MspInit+0x244>)
 800320a:	4293      	cmp	r3, r2
 800320c:	f040 8083 	bne.w	8003316 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003210:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800321a:	6613      	str	r3, [r2, #96]	; 0x60
 800321c:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_SPI_MspInit+0x248>)
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003228:	4b82      	ldr	r3, [pc, #520]	; (8003434 <HAL_SPI_MspInit+0x248>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	4a81      	ldr	r2, [pc, #516]	; (8003434 <HAL_SPI_MspInit+0x248>)
 800322e:	f043 0302 	orr.w	r3, r3, #2
 8003232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003234:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003240:	2338      	movs	r3, #56	; 0x38
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003250:	2305      	movs	r3, #5
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4877      	ldr	r0, [pc, #476]	; (8003438 <HAL_SPI_MspInit+0x24c>)
 800325c:	f003 ff2a 	bl	80070b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003260:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003262:	4a77      	ldr	r2, [pc, #476]	; (8003440 <HAL_SPI_MspInit+0x254>)
 8003264:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003266:	4b75      	ldr	r3, [pc, #468]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003268:	220a      	movs	r2, #10
 800326a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800326c:	4b73      	ldr	r3, [pc, #460]	; (800343c <HAL_SPI_MspInit+0x250>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003272:	4b72      	ldr	r3, [pc, #456]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003278:	4b70      	ldr	r3, [pc, #448]	; (800343c <HAL_SPI_MspInit+0x250>)
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800327e:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003284:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800328a:	4b6c      	ldr	r3, [pc, #432]	; (800343c <HAL_SPI_MspInit+0x250>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003296:	4869      	ldr	r0, [pc, #420]	; (800343c <HAL_SPI_MspInit+0x250>)
 8003298:	f002 fd34 	bl	8005d04 <HAL_DMA_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80032a2:	f7ff ff21 	bl	80030e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a64      	ldr	r2, [pc, #400]	; (800343c <HAL_SPI_MspInit+0x250>)
 80032aa:	659a      	str	r2, [r3, #88]	; 0x58
 80032ac:	4a63      	ldr	r2, [pc, #396]	; (800343c <HAL_SPI_MspInit+0x250>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80032b2:	4b64      	ldr	r3, [pc, #400]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032b4:	4a64      	ldr	r2, [pc, #400]	; (8003448 <HAL_SPI_MspInit+0x25c>)
 80032b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032ba:	220b      	movs	r2, #11
 80032bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032c0:	2210      	movs	r2, #16
 80032c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c4:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ca:	4b5e      	ldr	r3, [pc, #376]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d0:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80032dc:	4b59      	ldr	r3, [pc, #356]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80032e8:	4856      	ldr	r0, [pc, #344]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032ea:	f002 fd0b 	bl	8005d04 <HAL_DMA_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80032f4:	f7ff fef8 	bl	80030e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_SPI_MspInit+0x258>)
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
 80032fe:	4a51      	ldr	r2, [pc, #324]	; (8003444 <HAL_SPI_MspInit+0x258>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	2023      	movs	r0, #35	; 0x23
 800330a:	f002 fa82 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800330e:	2023      	movs	r0, #35	; 0x23
 8003310:	f002 fa99 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003314:	e088      	b.n	8003428 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a4c      	ldr	r2, [pc, #304]	; (800344c <HAL_SPI_MspInit+0x260>)
 800331c:	4293      	cmp	r3, r2
 800331e:	f040 8083 	bne.w	8003428 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003322:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a43      	ldr	r2, [pc, #268]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333a:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_SPI_MspInit+0x248>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003340:	f043 0304 	orr.w	r3, r3, #4
 8003344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_SPI_MspInit+0x248>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003352:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003364:	2306      	movs	r3, #6
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	4838      	ldr	r0, [pc, #224]	; (8003450 <HAL_SPI_MspInit+0x264>)
 8003370:	f003 fea0 	bl	80070b4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003374:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_SPI_MspInit+0x268>)
 8003376:	4a38      	ldr	r2, [pc, #224]	; (8003458 <HAL_SPI_MspInit+0x26c>)
 8003378:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_SPI_MspInit+0x268>)
 800337c:	220e      	movs	r2, #14
 800337e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_SPI_MspInit+0x268>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <HAL_SPI_MspInit+0x268>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800338c:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_SPI_MspInit+0x268>)
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <HAL_SPI_MspInit+0x268>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003398:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <HAL_SPI_MspInit+0x268>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_SPI_MspInit+0x268>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033a4:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_SPI_MspInit+0x268>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80033aa:	482a      	ldr	r0, [pc, #168]	; (8003454 <HAL_SPI_MspInit+0x268>)
 80033ac:	f002 fcaa 	bl	8005d04 <HAL_DMA_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80033b6:	f7ff fe97 	bl	80030e8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_SPI_MspInit+0x268>)
 80033be:	659a      	str	r2, [r3, #88]	; 0x58
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_SPI_MspInit+0x268>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_SPI_MspInit+0x274>)
 80033ca:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033ce:	220f      	movs	r2, #15
 80033d0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d2:	4b22      	ldr	r3, [pc, #136]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033d4:	2210      	movs	r2, #16
 80033d6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033de:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80033fc:	4817      	ldr	r0, [pc, #92]	; (800345c <HAL_SPI_MspInit+0x270>)
 80033fe:	f002 fc81 	bl	8005d04 <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8003408:	f7ff fe6e 	bl	80030e8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_SPI_MspInit+0x270>)
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <HAL_SPI_MspInit+0x270>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	2033      	movs	r0, #51	; 0x33
 800341e:	f002 f9f8 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003422:	2033      	movs	r0, #51	; 0x33
 8003424:	f002 fa0f 	bl	8005846 <HAL_NVIC_EnableIRQ>
}
 8003428:	bf00      	nop
 800342a:	3730      	adds	r7, #48	; 0x30
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40013000 	.word	0x40013000
 8003434:	40021000 	.word	0x40021000
 8003438:	48000400 	.word	0x48000400
 800343c:	20000a80 	.word	0x20000a80
 8003440:	40020030 	.word	0x40020030
 8003444:	20000ae0 	.word	0x20000ae0
 8003448:	40020044 	.word	0x40020044
 800344c:	40003c00 	.word	0x40003c00
 8003450:	48000800 	.word	0x48000800
 8003454:	20000b40 	.word	0x20000b40
 8003458:	40020408 	.word	0x40020408
 800345c:	20000ba0 	.word	0x20000ba0
 8003460:	4002041c 	.word	0x4002041c

08003464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_MspInit+0x44>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_MspInit+0x44>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6613      	str	r3, [r2, #96]	; 0x60
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_MspInit+0x44>)
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_MspInit+0x44>)
 8003484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <HAL_MspInit+0x44>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6593      	str	r3, [r2, #88]	; 0x58
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_MspInit+0x44>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800349a:	f004 f863 	bl	8007564 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <NMI_Handler+0x4>

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f8:	f000 fbde 	bl	8003cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA1_Channel1_IRQHandler+0x10>)
 8003506:	f002 fde0 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000844 	.word	0x20000844

08003514 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <DMA1_Channel2_IRQHandler+0x10>)
 800351a:	f002 fdd6 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200008a4 	.word	0x200008a4

08003528 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA1_Channel3_IRQHandler+0x10>)
 800352e:	f002 fdcc 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000a80 	.word	0x20000a80

0800353c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Channel4_IRQHandler+0x10>)
 8003542:	f002 fdc2 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000ae0 	.word	0x20000ae0

08003550 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <ADC1_2_IRQHandler+0x14>)
 8003556:	f001 f871 	bl	800463c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <ADC1_2_IRQHandler+0x18>)
 800355c:	f001 f86e 	bl	800463c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	2000076c 	.word	0x2000076c
 8003568:	200007d8 	.word	0x200007d8

0800356c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <FDCAN1_IT0_IRQHandler+0x10>)
 8003572:	f003 fa7f 	bl	8006a74 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000091c 	.word	0x2000091c

08003580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <TIM3_IRQHandler+0x10>)
 8003586:	f006 f841 	bl	800960c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000c50 	.word	0x20000c50

08003594 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <SPI1_IRQHandler+0x10>)
 800359a:	f005 f991 	bl	80088c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200009b8 	.word	0x200009b8

080035a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <USART1_IRQHandler+0x10>)
 80035ae:	f007 fbad 	bl	800ad0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000c9c 	.word	0x20000c9c

080035bc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <SPI3_IRQHandler+0x10>)
 80035c2:	f005 f97d 	bl	80088c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000a1c 	.word	0x20000a1c

080035d0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <DMA2_Channel1_IRQHandler+0x10>)
 80035d6:	f002 fd78 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000b40 	.word	0x20000b40

080035e4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA2_Channel2_IRQHandler+0x10>)
 80035ea:	f002 fd6e 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000ba0 	.word	0x20000ba0

080035f8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <DMA2_Channel3_IRQHandler+0x10>)
 80035fe:	f002 fd64 	bl	80060ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000d2c 	.word	0x20000d2c

0800360c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <_sbrk+0x5c>)
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <_sbrk+0x60>)
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <_sbrk+0x64>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <_sbrk+0x64>)
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <_sbrk+0x68>)
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <_sbrk+0x64>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800363c:	f008 fe10 	bl	800c260 <__errno>
 8003640:	4603      	mov	r3, r0
 8003642:	220c      	movs	r2, #12
 8003644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	e009      	b.n	8003660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <_sbrk+0x64>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	4a05      	ldr	r2, [pc, #20]	; (8003670 <_sbrk+0x64>)
 800365c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20008000 	.word	0x20008000
 800366c:	00000400 	.word	0x00000400
 8003670:	20000c00 	.word	0x20000c00
 8003674:	20000ed8 	.word	0x20000ed8

08003678 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <SystemInit+0x20>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <SystemInit+0x20>)
 8003684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b09c      	sub	sp, #112	; 0x70
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
 80036cc:	615a      	str	r2, [r3, #20]
 80036ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	2234      	movs	r2, #52	; 0x34
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f008 fdba 	bl	800c250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036dc:	4b51      	ldr	r3, [pc, #324]	; (8003824 <MX_TIM1_Init+0x188>)
 80036de:	4a52      	ldr	r2, [pc, #328]	; (8003828 <MX_TIM1_Init+0x18c>)
 80036e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036e2:	4b50      	ldr	r3, [pc, #320]	; (8003824 <MX_TIM1_Init+0x188>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80036e8:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <MX_TIM1_Init+0x188>)
 80036ea:	2220      	movs	r2, #32
 80036ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80036ee:	4b4d      	ldr	r3, [pc, #308]	; (8003824 <MX_TIM1_Init+0x188>)
 80036f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80036f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <MX_TIM1_Init+0x188>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <MX_TIM1_Init+0x188>)
 80036fe:	2200      	movs	r2, #0
 8003700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <MX_TIM1_Init+0x188>)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003708:	4846      	ldr	r0, [pc, #280]	; (8003824 <MX_TIM1_Init+0x188>)
 800370a:	f005 fc9f 	bl	800904c <HAL_TIM_Base_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003714:	f7ff fce8 	bl	80030e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800371e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003722:	4619      	mov	r1, r3
 8003724:	483f      	ldr	r0, [pc, #252]	; (8003824 <MX_TIM1_Init+0x188>)
 8003726:	f006 fa05 	bl	8009b34 <HAL_TIM_ConfigClockSource>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003730:	f7ff fcda 	bl	80030e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003734:	483b      	ldr	r0, [pc, #236]	; (8003824 <MX_TIM1_Init+0x188>)
 8003736:	f005 fd71 	bl	800921c <HAL_TIM_PWM_Init>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003740:	f7ff fcd2 	bl	80030e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003744:	2300      	movs	r3, #0
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003748:	2300      	movs	r3, #0
 800374a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003754:	4619      	mov	r1, r3
 8003756:	4833      	ldr	r0, [pc, #204]	; (8003824 <MX_TIM1_Init+0x188>)
 8003758:	f007 f868 	bl	800a82c <HAL_TIMEx_MasterConfigSynchronization>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003762:	f7ff fcc1 	bl	80030e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003766:	2360      	movs	r3, #96	; 0x60
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800376e:	2302      	movs	r3, #2
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003772:	2308      	movs	r3, #8
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003786:	2200      	movs	r2, #0
 8003788:	4619      	mov	r1, r3
 800378a:	4826      	ldr	r0, [pc, #152]	; (8003824 <MX_TIM1_Init+0x188>)
 800378c:	f006 f8be 	bl	800990c <HAL_TIM_PWM_ConfigChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003796:	f7ff fca7 	bl	80030e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800379a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800379e:	2204      	movs	r2, #4
 80037a0:	4619      	mov	r1, r3
 80037a2:	4820      	ldr	r0, [pc, #128]	; (8003824 <MX_TIM1_Init+0x188>)
 80037a4:	f006 f8b2 	bl	800990c <HAL_TIM_PWM_ConfigChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80037ae:	f7ff fc9b 	bl	80030e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037b6:	2208      	movs	r2, #8
 80037b8:	4619      	mov	r1, r3
 80037ba:	481a      	ldr	r0, [pc, #104]	; (8003824 <MX_TIM1_Init+0x188>)
 80037bc:	f006 f8a6 	bl	800990c <HAL_TIM_PWM_ConfigChannel>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80037c6:	f7ff fc8f 	bl	80030e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80037f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80037fa:	2300      	movs	r3, #0
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <MX_TIM1_Init+0x188>)
 8003808:	f007 f892 	bl	800a930 <HAL_TIMEx_ConfigBreakDeadTime>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003812:	f7ff fc69 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003816:	4803      	ldr	r0, [pc, #12]	; (8003824 <MX_TIM1_Init+0x188>)
 8003818:	f000 f890 	bl	800393c <HAL_TIM_MspPostInit>

}
 800381c:	bf00      	nop
 800381e:	3770      	adds	r7, #112	; 0x70
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000c04 	.word	0x20000c04
 8003828:	40012c00 	.word	0x40012c00

0800382c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <MX_TIM3_Init+0x94>)
 800384c:	4a1d      	ldr	r2, [pc, #116]	; (80038c4 <MX_TIM3_Init+0x98>)
 800384e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003852:	2203      	movs	r2, #3
 8003854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003856:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <MX_TIM3_Init+0x94>)
 800385e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003862:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <MX_TIM3_Init+0x94>)
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003870:	4813      	ldr	r0, [pc, #76]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003872:	f005 fbeb 	bl	800904c <HAL_TIM_Base_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800387c:	f7ff fc34 	bl	80030e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003884:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4619      	mov	r1, r3
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <MX_TIM3_Init+0x94>)
 800388e:	f006 f951 	bl	8009b34 <HAL_TIM_ConfigClockSource>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003898:	f7ff fc26 	bl	80030e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4805      	ldr	r0, [pc, #20]	; (80038c0 <MX_TIM3_Init+0x94>)
 80038aa:	f006 ffbf 	bl	800a82c <HAL_TIMEx_MasterConfigSynchronization>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80038b4:	f7ff fc18 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000c50 	.word	0x20000c50
 80038c4:	40000400 	.word	0x40000400

080038c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <HAL_TIM_Base_MspInit+0x68>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10c      	bne.n	80038f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 80038dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 80038e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e4:	6613      	str	r3, [r2, #96]	; 0x60
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80038f2:	e018      	b.n	8003926 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_TIM_Base_MspInit+0x70>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 8003904:	f043 0302 	orr.w	r3, r3, #2
 8003908:	6593      	str	r3, [r2, #88]	; 0x58
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_TIM_Base_MspInit+0x6c>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2100      	movs	r1, #0
 800391a:	201d      	movs	r0, #29
 800391c:	f001 ff79 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003920:	201d      	movs	r0, #29
 8003922:	f001 ff90 	bl	8005846 <HAL_NVIC_EnableIRQ>
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40000400 	.word	0x40000400

0800393c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_TIM_MspPostInit+0xc0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d149      	bne.n	80039f2 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800395e:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <HAL_TIM_MspPostInit+0xc4>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800398e:	2307      	movs	r3, #7
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800399e:	2302      	movs	r3, #2
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	4816      	ldr	r0, [pc, #88]	; (8003a04 <HAL_TIM_MspPostInit+0xc8>)
 80039aa:	f003 fb83 	bl	80070b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80039ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80039c0:	2306      	movs	r3, #6
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	480f      	ldr	r0, [pc, #60]	; (8003a08 <HAL_TIM_MspPostInit+0xcc>)
 80039cc:	f003 fb72 	bl	80070b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80039d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80039e2:	2304      	movs	r3, #4
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4806      	ldr	r0, [pc, #24]	; (8003a08 <HAL_TIM_MspPostInit+0xcc>)
 80039ee:	f003 fb61 	bl	80070b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039f2:	bf00      	nop
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48000400 	.word	0x48000400

08003a0c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a12:	4a23      	ldr	r2, [pc, #140]	; (8003aa0 <MX_USART1_UART_Init+0x94>)
 8003a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003a16:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a18:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a30:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a32:	220c      	movs	r2, #12
 8003a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a54:	4811      	ldr	r0, [pc, #68]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a56:	f007 f876 	bl	800ab46 <HAL_UART_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a60:	f7ff fb42 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a64:	2100      	movs	r1, #0
 8003a66:	480d      	ldr	r0, [pc, #52]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a68:	f008 faed 	bl	800c046 <HAL_UARTEx_SetTxFifoThreshold>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a72:	f7ff fb39 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a76:	2100      	movs	r1, #0
 8003a78:	4808      	ldr	r0, [pc, #32]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a7a:	f008 fb22 	bl	800c0c2 <HAL_UARTEx_SetRxFifoThreshold>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a84:	f7ff fb30 	bl	80030e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <MX_USART1_UART_Init+0x90>)
 8003a8a:	f008 faa3 	bl	800bfd4 <HAL_UARTEx_DisableFifoMode>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a94:	f7ff fb28 	bl	80030e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000c9c 	.word	0x20000c9c
 8003aa0:	40013800 	.word	0x40013800

08003aa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b09a      	sub	sp, #104	; 0x68
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003abc:	f107 0310 	add.w	r3, r7, #16
 8003ac0:	2244      	movs	r2, #68	; 0x44
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f008 fbc3 	bl	800c250 <memset>
  if(uartHandle->Instance==USART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_UART_MspInit+0x108>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d166      	bne.n	8003ba2 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 fac5 	bl	8008070 <HAL_RCCEx_PeriphCLKConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003aec:	f7ff fafc 	bl	80030e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	4a2e      	ldr	r2, [pc, #184]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afa:	6613      	str	r3, [r2, #96]	; 0x60
 8003afc:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0c:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b14:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <HAL_UART_MspInit+0x10c>)
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b20:	2330      	movs	r3, #48	; 0x30
 8003b22:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	2302      	movs	r3, #2
 8003b26:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b30:	2307      	movs	r3, #7
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b38:	4619      	mov	r1, r3
 8003b3a:	481e      	ldr	r0, [pc, #120]	; (8003bb4 <HAL_UART_MspInit+0x110>)
 8003b3c:	f003 faba 	bl	80070b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_UART_MspInit+0x118>)
 8003b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003b46:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b48:	2219      	movs	r2, #25
 8003b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b4e:	2210      	movs	r2, #16
 8003b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b76:	4810      	ldr	r0, [pc, #64]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b78:	f002 f8c4 	bl	8005d04 <HAL_DMA_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003b82:	f7ff fab1 	bl	80030e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b8a:	679a      	str	r2, [r3, #120]	; 0x78
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_UART_MspInit+0x114>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	2025      	movs	r0, #37	; 0x25
 8003b98:	f001 fe3b 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b9c:	2025      	movs	r0, #37	; 0x25
 8003b9e:	f001 fe52 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3768      	adds	r7, #104	; 0x68
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	20000d2c 	.word	0x20000d2c
 8003bbc:	40020430 	.word	0x40020430

08003bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc4:	480d      	ldr	r0, [pc, #52]	; (8003bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8003bc6:	490e      	ldr	r1, [pc, #56]	; (8003c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <LoopForever+0xe>)
  movs r3, #0
 8003bca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003bcc:	e002      	b.n	8003bd4 <LoopCopyDataInit>

08003bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd2:	3304      	adds	r3, #4

08003bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd8:	d3f9      	bcc.n	8003bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bda:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bdc:	4c0b      	ldr	r4, [pc, #44]	; (8003c0c <LoopForever+0x16>)
  movs r3, #0
 8003bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be0:	e001      	b.n	8003be6 <LoopFillZerobss>

08003be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be4:	3204      	adds	r2, #4

08003be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be8:	d3fb      	bcc.n	8003be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bea:	f7ff fd45 	bl	8003678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bee:	f008 fb3d 	bl	800c26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bf2:	f7ff fa05 	bl	8003000 <main>

08003bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bf6:	e7fe      	b.n	8003bf6 <LoopForever>
  ldr   r0, =_estack
 8003bf8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c00:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003c04:	0800cc68 	.word	0x0800cc68
  ldr r2, =_sbss
 8003c08:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003c0c:	20000ed8 	.word	0x20000ed8

08003c10 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <COMP1_2_3_IRQHandler>

08003c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f001 fded 	bl	80057fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c22:	200f      	movs	r0, #15
 8003c24:	f000 f80e 	bl	8003c44 <HAL_InitTick>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	71fb      	strb	r3, [r7, #7]
 8003c32:	e001      	b.n	8003c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c34:	f7ff fc16 	bl	8003464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c38:	79fb      	ldrb	r3, [r7, #7]

}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c50:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_InitTick+0x68>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_InitTick+0x6c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_InitTick+0x68>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fdf8 	bl	8005862 <HAL_SYSTICK_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b0f      	cmp	r3, #15
 8003c7c:	d809      	bhi.n	8003c92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	f04f 30ff 	mov.w	r0, #4294967295
 8003c86:	f001 fdc4 	bl	8005812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_InitTick+0x70>)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e007      	b.n	8003ca2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e004      	b.n	8003ca2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e001      	b.n	8003ca2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	200000e0 	.word	0x200000e0
 8003cb0:	200000d8 	.word	0x200000d8
 8003cb4:	200000dc 	.word	0x200000dc

08003cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_IncTick+0x1c>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_IncTick+0x20>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <HAL_IncTick+0x1c>)
 8003cc8:	6013      	str	r3, [r2, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	20000d8c 	.word	0x20000d8c
 8003cd8:	200000e0 	.word	0x200000e0

08003cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_GetTick+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000d8c 	.word	0x20000d8c

08003cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff ffee 	bl	8003cdc <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d004      	beq.n	8003d18 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_Delay+0x40>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d18:	bf00      	nop
 8003d1a:	f7ff ffdf 	bl	8003cdc <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d8f7      	bhi.n	8003d1a <HAL_Delay+0x26>
  {
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200000e0 	.word	0x200000e0

08003d38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3360      	adds	r3, #96	; 0x60
 8003db2:	461a      	mov	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <LL_ADC_SetOffset+0x44>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	03fff000 	.word	0x03fff000

08003de8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3360      	adds	r3, #96	; 0x60
 8003df6:	461a      	mov	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3360      	adds	r3, #96	; 0x60
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b087      	sub	sp, #28
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3360      	adds	r3, #96	; 0x60
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3360      	adds	r3, #96	; 0x60
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	615a      	str	r2, [r3, #20]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3330      	adds	r3, #48	; 0x30
 8003f12:	461a      	mov	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	4413      	add	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	211f      	movs	r1, #31
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	401a      	ands	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 011f 	and.w	r1, r3, #31
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0e5b      	lsrs	r3, r3, #25
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	4413      	add	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	0d1b      	lsrs	r3, r3, #20
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2107      	movs	r1, #7
 8003fae:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	401a      	ands	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0d1b      	lsrs	r3, r3, #20
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10a      	bne.n	8004002 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004000:	e00a      	b.n	8004018 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	43db      	mvns	r3, r3
 8004010:	401a      	ands	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	407f0000 	.word	0x407f0000

08004028 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 031f 	and.w	r3, r3, #31
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6093      	str	r3, [r2, #8]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004098:	d101      	bne.n	800409e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80040bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040e8:	d101      	bne.n	80040ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800410c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <LL_ADC_IsEnabled+0x18>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <LL_ADC_IsEnabled+0x1a>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800415a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d101      	bne.n	800418a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d101      	bne.n	80041b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e177      	b.n	80044ca <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fe fb69 	bl	80028c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff3f 	bl	8004084 <LL_ADC_IsDeepPowerDownEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff25 	bl	8004060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ff5a 	bl	80040d4 <LL_ADC_IsInternalRegulatorEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d115      	bne.n	8004252 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff3e 	bl	80040ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004230:	4b9c      	ldr	r3, [pc, #624]	; (80044a4 <HAL_ADC_Init+0x2e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	4a9c      	ldr	r2, [pc, #624]	; (80044a8 <HAL_ADC_Init+0x2e8>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004244:	e002      	b.n	800424c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3b01      	subs	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f9      	bne.n	8004246 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff3c 	bl	80040d4 <LL_ADC_IsInternalRegulatorEnabled>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	f043 0210 	orr.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff75 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004288:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 8110 	bne.w	80044b8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 810c 	bne.w	80044b8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042a8:	f043 0202 	orr.w	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff35 	bl	8004124 <LL_ADC_IsEnabled>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042c4:	f7ff ff2e 	bl	8004124 <LL_ADC_IsEnabled>
 80042c8:	4604      	mov	r4, r0
 80042ca:	4878      	ldr	r0, [pc, #480]	; (80044ac <HAL_ADC_Init+0x2ec>)
 80042cc:	f7ff ff2a 	bl	8004124 <LL_ADC_IsEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4323      	orrs	r3, r4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	4874      	ldr	r0, [pc, #464]	; (80044b0 <HAL_ADC_Init+0x2f0>)
 80042e0:	f7ff fd2a 	bl	8003d38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7f5b      	ldrb	r3, [r3, #29]
 80042e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004302:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430e:	2b01      	cmp	r3, #1
 8004310:	d106      	bne.n	8004320 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	045b      	lsls	r3, r3, #17
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_ADC_Init+0x2f4>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	430b      	orrs	r3, r1
 800434e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff01 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004370:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ff0e 	bl	8004198 <LL_ADC_INJ_IsConversionOngoing>
 800437c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d16d      	bne.n	8004460 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d16a      	bne.n	8004460 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800438e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004396:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a6:	f023 0302 	bic.w	r3, r3, #2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6911      	ldr	r1, [r2, #16]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80043ea:	e013      	b.n	8004414 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800440c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004410:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800441a:	2b01      	cmp	r3, #1
 800441c:	d118      	bne.n	8004450 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004440:	430a      	orrs	r2, r1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	e007      	b.n	8004460 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10c      	bne.n	8004482 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f023 010f 	bic.w	r1, r3, #15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
 8004480:	e007      	b.n	8004492 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 020f 	bic.w	r2, r2, #15
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80044a2:	e011      	b.n	80044c8 <HAL_ADC_Init+0x308>
 80044a4:	200000d8 	.word	0x200000d8
 80044a8:	053e2d63 	.word	0x053e2d63
 80044ac:	50000100 	.word	0x50000100
 80044b0:	50000300 	.word	0x50000300
 80044b4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f043 0210 	orr.w	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop

080044d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e0:	4851      	ldr	r0, [pc, #324]	; (8004628 <HAL_ADC_Start_DMA+0x154>)
 80044e2:	f7ff fda1 	bl	8004028 <LL_ADC_GetMultimode>
 80044e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fe40 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 808f 	bne.w	8004618 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_ADC_Start_DMA+0x34>
 8004504:	2302      	movs	r3, #2
 8004506:	e08a      	b.n	800461e <HAL_ADC_Start_DMA+0x14a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d002      	beq.n	8004522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b09      	cmp	r3, #9
 8004520:	d173      	bne.n	800460a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fea8 	bl	8005278 <ADC_Enable>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d166      	bne.n	8004600 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_ADC_Start_DMA+0x158>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d002      	beq.n	8004556 <HAL_ADC_Start_DMA+0x82>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	e001      	b.n	800455a <HAL_ADC_Start_DMA+0x86>
 8004556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4293      	cmp	r3, r2
 8004560:	d002      	beq.n	8004568 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	f023 0206 	bic.w	r2, r3, #6
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
 800458c:	e002      	b.n	8004594 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_ADC_Start_DMA+0x15c>)
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	4a24      	ldr	r2, [pc, #144]	; (8004634 <HAL_ADC_Start_DMA+0x160>)
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <HAL_ADC_Start_DMA+0x164>)
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	221c      	movs	r2, #28
 80045b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0210 	orr.w	r2, r2, #16
 80045ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3340      	adds	r3, #64	; 0x40
 80045e6:	4619      	mov	r1, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f001 fc32 	bl	8005e54 <HAL_DMA_Start_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fda6 	bl	800414a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045fe:	e00d      	b.n	800461c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004608:	e008      	b.n	800461c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004616:	e001      	b.n	800461c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	50000300 	.word	0x50000300
 800462c:	50000100 	.word	0x50000100
 8004630:	0800533d 	.word	0x0800533d
 8004634:	08005415 	.word	0x08005415
 8004638:	08005431 	.word	0x08005431

0800463c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004644:	2300      	movs	r3, #0
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004658:	4883      	ldr	r0, [pc, #524]	; (8004868 <HAL_ADC_IRQHandler+0x22c>)
 800465a:	f7ff fce5 	bl	8004028 <LL_ADC_GetMultimode>
 800465e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d017      	beq.n	800469a <HAL_ADC_IRQHandler+0x5e>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004684:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 ff37 	bl	8005500 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2202      	movs	r2, #2
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_ADC_IRQHandler+0x72>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8085 	beq.w	80047c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d07f      	beq.n	80047c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fbfb 	bl	8003edc <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d064      	beq.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a5e      	ldr	r2, [pc, #376]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d002      	beq.n	80046fc <HAL_ADC_IRQHandler+0xc0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	e001      	b.n	8004700 <HAL_ADC_IRQHandler+0xc4>
 80046fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4293      	cmp	r3, r2
 8004706:	d008      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d002      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b09      	cmp	r3, #9
 8004718:	d104      	bne.n	8004724 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	e00d      	b.n	8004740 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a50      	ldr	r2, [pc, #320]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d002      	beq.n	8004734 <HAL_ADC_IRQHandler+0xf8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	e001      	b.n	8004738 <HAL_ADC_IRQHandler+0xfc>
 8004734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004738:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d135      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d12e      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fd08 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020c 	bic.w	r2, r2, #12
 8004776:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d112      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	65da      	str	r2, [r3, #92]	; 0x5c
 800479c:	e00b      	b.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f043 0210 	orr.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fd28 	bl	800220c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	220c      	movs	r2, #12
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_ADC_IRQHandler+0x19c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 809e 	beq.w	8004920 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8098 	beq.w	8004920 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fba4 	bl	8003f5a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004812:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fb5f 	bl	8003edc <LL_ADC_REG_IsTriggerSourceSWStart>
 800481e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d002      	beq.n	8004830 <HAL_ADC_IRQHandler+0x1f4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e001      	b.n	8004834 <HAL_ADC_IRQHandler+0x1f8>
 8004830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4293      	cmp	r3, r2
 800483a:	d008      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b06      	cmp	r3, #6
 8004846:	d002      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d104      	bne.n	8004858 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	e011      	b.n	800487c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a03      	ldr	r2, [pc, #12]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d006      	beq.n	8004870 <HAL_ADC_IRQHandler+0x234>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	e005      	b.n	8004874 <HAL_ADC_IRQHandler+0x238>
 8004868:	50000300 	.word	0x50000300
 800486c:	50000100 	.word	0x50000100
 8004870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004874:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d047      	beq.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_ADC_IRQHandler+0x260>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d03f      	beq.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13a      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d133      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d12e      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fc6d 	bl	8004198 <LL_ADC_INJ_IsConversionOngoing>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11a      	bne.n	80048fa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d112      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80048f8:	e00b      	b.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	f043 0210 	orr.w	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fdcc 	bl	80054b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2260      	movs	r2, #96	; 0x60
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <HAL_ADC_IRQHandler+0x312>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f895 	bl	8004a70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_ADC_IRQHandler+0x342>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fdb2 	bl	80054d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_ADC_IRQHandler+0x372>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fda4 	bl	80054ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d036      	beq.n	8004a26 <HAL_ADC_IRQHandler+0x3ea>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d031      	beq.n	8004a26 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80049ca:	2301      	movs	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e014      	b.n	80049fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80049d6:	4825      	ldr	r0, [pc, #148]	; (8004a6c <HAL_ADC_IRQHandler+0x430>)
 80049d8:	f7ff fb34 	bl	8004044 <LL_ADC_GetMultiDMATransfer>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80049e2:	2301      	movs	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e008      	b.n	80049fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80049f6:	2301      	movs	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10e      	bne.n	8004a1e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f833 	bl	8004a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2210      	movs	r2, #16
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d018      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x426>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	f043 0208 	orr.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fd31 	bl	80054c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004a62:	bf00      	nop
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	50000300 	.word	0x50000300

08004a70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b0b6      	sub	sp, #216	; 0xd8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x22>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e3c8      	b.n	800524c <HAL_ADC_ConfigChannel+0x7b4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fb53 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 83ad 	bne.w	800522e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f7ff fa0e 	bl	8003f02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fb41 	bl	8004172 <LL_ADC_REG_IsConversionOngoing>
 8004af0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff fb4d 	bl	8004198 <LL_ADC_INJ_IsConversionOngoing>
 8004afe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 81d9 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f040 81d4 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1e:	d10f      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f7ff fa28 	bl	8003f80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff f9bc 	bl	8003eb6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b3e:	e00e      	b.n	8004b5e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	6819      	ldr	r1, [r3, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f7ff fa17 	bl	8003f80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff f9ac 	bl	8003eb6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d022      	beq.n	8004bc6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6919      	ldr	r1, [r3, #16]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b90:	f7ff f906 	bl	8003da0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6919      	ldr	r1, [r3, #16]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f7ff f952 	bl	8003e4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	7f1b      	ldrb	r3, [r3, #28]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d102      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x124>
 8004bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bba:	e000      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x126>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7ff f95e 	bl	8003e80 <LL_ADC_SetOffsetSaturation>
 8004bc4:	e17b      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff f90b 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x15a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff f900 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004be8:	4603      	mov	r3, r0
 8004bea:	0e9b      	lsrs	r3, r3, #26
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	e01e      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x198>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff f8f5 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c08:	fa93 f3a3 	rbit	r3, r3
 8004c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004c20:	2320      	movs	r3, #32
 8004c22:	e004      	b.n	8004c2e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004c24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c28:	fab3 f383 	clz	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x1b0>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	e018      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x1e2>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	e004      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c74:	fab3 f383 	clz	r3, r3
 8004c78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d106      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f8c4 	bl	8003e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff f8a8 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x220>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f89d 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	f003 021f 	and.w	r2, r3, #31
 8004cb6:	e01e      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x25e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff f892 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	e004      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d105      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x276>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	e018      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x2a8>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004d32:	2320      	movs	r3, #32
 8004d34:	e004      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d106      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f861 	bl	8003e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2102      	movs	r1, #2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f845 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <HAL_ADC_ConfigChannel+0x2e6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f83a 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004d74:	4603      	mov	r3, r0
 8004d76:	0e9b      	lsrs	r3, r3, #26
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	e01e      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x324>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff f82f 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d94:	fa93 f3a3 	rbit	r3, r3
 8004d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004dac:	2320      	movs	r3, #32
 8004dae:	e004      	b.n	8004dba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x33c>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	e016      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x36a>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004df4:	2320      	movs	r3, #32
 8004df6:	e004      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d106      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff f800 	bl	8003e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2103      	movs	r1, #3
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ffe4 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x3a8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2103      	movs	r1, #3
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe ffd9 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004e36:	4603      	mov	r3, r0
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	f003 021f 	and.w	r2, r3, #31
 8004e3e:	e017      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x3d8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2103      	movs	r1, #3
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe ffce 	bl	8003de8 <LL_ADC_GetOffsetChannel>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e5a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004e62:	2320      	movs	r3, #32
 8004e64:	e003      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x3f0>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0e9b      	lsrs	r3, r3, #26
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	e011      	b.n	8004eac <HAL_ADC_ConfigChannel+0x414>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	e003      	b.n	8004eac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	fab3 f383 	clz	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d106      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe ffab 	bl	8003e14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f92e 	bl	8004124 <LL_ADC_IsEnabled>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8140 	bne.w	8005150 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	461a      	mov	r2, r3
 8004ede:	f7ff f87b 	bl	8003fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a8f      	ldr	r2, [pc, #572]	; (8005124 <HAL_ADC_ConfigChannel+0x68c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 8131 	bne.w	8005150 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x47e>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	0e9b      	lsrs	r3, r3, #26
 8004f04:	3301      	adds	r3, #1
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	bf94      	ite	ls
 8004f0e:	2301      	movls	r3, #1
 8004f10:	2300      	movhi	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e019      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x4b2>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f26:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e003      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	bf94      	ite	ls
 8004f44:	2301      	movls	r3, #1
 8004f46:	2300      	movhi	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d079      	beq.n	8005042 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x4d2>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	0e9b      	lsrs	r3, r3, #26
 8004f60:	3301      	adds	r3, #1
 8004f62:	069b      	lsls	r3, r3, #26
 8004f64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f68:	e015      	b.n	8004f96 <HAL_ADC_ConfigChannel+0x4fe>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004f82:	2320      	movs	r3, #32
 8004f84:	e003      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	fab3 f383 	clz	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	069b      	lsls	r3, r3, #26
 8004f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0x51e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	3301      	adds	r3, #1
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	e017      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0x54e>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e003      	b.n	8004fda <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	fab3 f383 	clz	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	ea42 0103 	orr.w	r1, r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <HAL_ADC_ConfigChannel+0x574>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f003 021f 	and.w	r2, r3, #31
 8005002:	4613      	mov	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4413      	add	r3, r2
 8005008:	051b      	lsls	r3, r3, #20
 800500a:	e018      	b.n	800503e <HAL_ADC_ConfigChannel+0x5a6>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800501a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	e003      	b.n	8005030 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3301      	adds	r3, #1
 8005032:	f003 021f 	and.w	r2, r3, #31
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800503e:	430b      	orrs	r3, r1
 8005040:	e081      	b.n	8005146 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_ADC_ConfigChannel+0x5c6>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	0e9b      	lsrs	r3, r3, #26
 8005054:	3301      	adds	r3, #1
 8005056:	069b      	lsls	r3, r3, #26
 8005058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800505c:	e015      	b.n	800508a <HAL_ADC_ConfigChannel+0x5f2>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005076:	2320      	movs	r3, #32
 8005078:	e003      	b.n	8005082 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	3301      	adds	r3, #1
 8005084:	069b      	lsls	r3, r3, #26
 8005086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x612>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	0e9b      	lsrs	r3, r3, #26
 800509c:	3301      	adds	r3, #1
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	e017      	b.n	80050da <HAL_ADC_ConfigChannel+0x642>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	61fb      	str	r3, [r7, #28]
  return result;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80050c2:	2320      	movs	r3, #32
 80050c4:	e003      	b.n	80050ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <HAL_ADC_ConfigChannel+0x66e>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	0e9b      	lsrs	r3, r3, #26
 80050f0:	3301      	adds	r3, #1
 80050f2:	f003 021f 	and.w	r2, r3, #31
 80050f6:	4613      	mov	r3, r2
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4413      	add	r3, r2
 80050fc:	3b1e      	subs	r3, #30
 80050fe:	051b      	lsls	r3, r3, #20
 8005100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005104:	e01e      	b.n	8005144 <HAL_ADC_ConfigChannel+0x6ac>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fa93 f3a3 	rbit	r3, r3
 8005112:	613b      	str	r3, [r7, #16]
  return result;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800511e:	2320      	movs	r3, #32
 8005120:	e006      	b.n	8005130 <HAL_ADC_ConfigChannel+0x698>
 8005122:	bf00      	nop
 8005124:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f003 021f 	and.w	r2, r3, #31
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	3b1e      	subs	r3, #30
 800513e:	051b      	lsls	r3, r3, #20
 8005140:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005144:	430b      	orrs	r3, r1
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	6892      	ldr	r2, [r2, #8]
 800514a:	4619      	mov	r1, r3
 800514c:	f7fe ff18 	bl	8003f80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <HAL_ADC_ConfigChannel+0x7bc>)
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d071      	beq.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800515c:	483e      	ldr	r0, [pc, #248]	; (8005258 <HAL_ADC_ConfigChannel+0x7c0>)
 800515e:	f7fe fe11 	bl	8003d84 <LL_ADC_GetCommonPathInternalCh>
 8005162:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3c      	ldr	r2, [pc, #240]	; (800525c <HAL_ADC_ConfigChannel+0x7c4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_ADC_ConfigChannel+0x6e2>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3a      	ldr	r2, [pc, #232]	; (8005260 <HAL_ADC_ConfigChannel+0x7c8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d127      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800517a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800517e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d121      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800518e:	d157      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005198:	4619      	mov	r1, r3
 800519a:	482f      	ldr	r0, [pc, #188]	; (8005258 <HAL_ADC_ConfigChannel+0x7c0>)
 800519c:	f7fe fddf 	bl	8003d5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051a0:	4b30      	ldr	r3, [pc, #192]	; (8005264 <HAL_ADC_ConfigChannel+0x7cc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	099b      	lsrs	r3, r3, #6
 80051a6:	4a30      	ldr	r2, [pc, #192]	; (8005268 <HAL_ADC_ConfigChannel+0x7d0>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	099b      	lsrs	r3, r3, #6
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	4613      	mov	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ba:	e002      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f9      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051c8:	e03a      	b.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a27      	ldr	r2, [pc, #156]	; (800526c <HAL_ADC_ConfigChannel+0x7d4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d113      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x764>
 80051d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_ADC_ConfigChannel+0x7d8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02a      	beq.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f2:	4619      	mov	r1, r3
 80051f4:	4818      	ldr	r0, [pc, #96]	; (8005258 <HAL_ADC_ConfigChannel+0x7c0>)
 80051f6:	f7fe fdb2 	bl	8003d5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051fa:	e021      	b.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_ADC_ConfigChannel+0x7dc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d11c      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d116      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_ADC_ConfigChannel+0x7d8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d011      	beq.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800521c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005224:	4619      	mov	r1, r3
 8005226:	480c      	ldr	r0, [pc, #48]	; (8005258 <HAL_ADC_ConfigChannel+0x7c0>)
 8005228:	f7fe fd99 	bl	8003d5e <LL_ADC_SetCommonPathInternalCh>
 800522c:	e008      	b.n	8005240 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005248:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800524c:	4618      	mov	r0, r3
 800524e:	37d8      	adds	r7, #216	; 0xd8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	80080000 	.word	0x80080000
 8005258:	50000300 	.word	0x50000300
 800525c:	c3210000 	.word	0xc3210000
 8005260:	90c00010 	.word	0x90c00010
 8005264:	200000d8 	.word	0x200000d8
 8005268:	053e2d63 	.word	0x053e2d63
 800526c:	c7520000 	.word	0xc7520000
 8005270:	50000100 	.word	0x50000100
 8005274:	cb840000 	.word	0xcb840000

08005278 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe ff4d 	bl	8004124 <LL_ADC_IsEnabled>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d14d      	bne.n	800532c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b28      	ldr	r3, [pc, #160]	; (8005338 <ADC_Enable+0xc0>)
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00d      	beq.n	80052ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	f043 0210 	orr.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ae:	f043 0201 	orr.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e039      	b.n	800532e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe ff1c 	bl	80040fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052c4:	f7fe fd0a 	bl	8003cdc <HAL_GetTick>
 80052c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ca:	e028      	b.n	800531e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe ff27 	bl	8004124 <LL_ADC_IsEnabled>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe ff0b 	bl	80040fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052e6:	f7fe fcf9 	bl	8003cdc <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d914      	bls.n	800531e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d00d      	beq.n	800531e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	f043 0210 	orr.w	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e007      	b.n	800532e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d1cf      	bne.n	80052cc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	8000003f 	.word	0x8000003f

0800533c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005352:	2b00      	cmp	r3, #0
 8005354:	d14b      	bne.n	80053ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d021      	beq.n	80053b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe fdb1 	bl	8003edc <LL_ADC_REG_IsTriggerSourceSWStart>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d032      	beq.n	80053e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d12b      	bne.n	80053e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d11f      	bne.n	80053e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	f043 0201 	orr.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80053b2:	e018      	b.n	80053e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d111      	bne.n	80053e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	f043 0201 	orr.w	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7fc ff10 	bl	800220c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053ec:	e00e      	b.n	800540c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff fb42 	bl	8004a84 <HAL_ADC_ErrorCallback>
}
 8005400:	e004      	b.n	800540c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7fc fdc6 	bl	8001fb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	f043 0204 	orr.w	r2, r3, #4
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fb14 	bl	8004a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <LL_ADC_IsEnabled>:
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <LL_ADC_IsEnabled+0x18>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <LL_ADC_IsEnabled+0x1a>
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_ADC_REG_IsConversionOngoing>:
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d101      	bne.n	80054a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b0a1      	sub	sp, #132	; 0x84
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800552e:	2302      	movs	r3, #2
 8005530:	e08b      	b.n	800564a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800553a:	2300      	movs	r3, #0
 800553c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800553e:	2300      	movs	r3, #0
 8005540:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800554a:	d102      	bne.n	8005552 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800554c:	4b41      	ldr	r3, [pc, #260]	; (8005654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	e001      	b.n	8005556 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e06a      	b.n	800564a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff87 	bl	800548a <LL_ADC_REG_IsConversionOngoing>
 800557c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff ff81 	bl	800548a <LL_ADC_REG_IsConversionOngoing>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d14c      	bne.n	8005628 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800558e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005590:	2b00      	cmp	r3, #0
 8005592:	d149      	bne.n	8005628 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005594:	4b30      	ldr	r3, [pc, #192]	; (8005658 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005596:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d028      	beq.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80055a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055b2:	035b      	lsls	r3, r3, #13
 80055b4:	430b      	orrs	r3, r1
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80055c0:	f7ff ff50 	bl	8005464 <LL_ADC_IsEnabled>
 80055c4:	4604      	mov	r4, r0
 80055c6:	4823      	ldr	r0, [pc, #140]	; (8005654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80055c8:	f7ff ff4c 	bl	8005464 <LL_ADC_IsEnabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	4323      	orrs	r3, r4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d133      	bne.n	800563c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055dc:	f023 030f 	bic.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	6811      	ldr	r1, [r2, #0]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	431a      	orrs	r2, r3
 80055ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055f0:	e024      	b.n	800563c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055fe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005602:	f7ff ff2f 	bl	8005464 <LL_ADC_IsEnabled>
 8005606:	4604      	mov	r4, r0
 8005608:	4812      	ldr	r0, [pc, #72]	; (8005654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800560a:	f7ff ff2b 	bl	8005464 <LL_ADC_IsEnabled>
 800560e:	4603      	mov	r3, r0
 8005610:	4323      	orrs	r3, r4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d112      	bne.n	800563c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800561e:	f023 030f 	bic.w	r3, r3, #15
 8005622:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005624:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005626:	e009      	b.n	800563c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800563a:	e000      	b.n	800563e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800563c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800564a:	4618      	mov	r0, r3
 800564c:	3784      	adds	r7, #132	; 0x84
 800564e:	46bd      	mov	sp, r7
 8005650:	bd90      	pop	{r4, r7, pc}
 8005652:	bf00      	nop
 8005654:	50000100 	.word	0x50000100
 8005658:	50000300 	.word	0x50000300

0800565c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800568c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800568e:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60d3      	str	r3, [r2, #12]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <__NVIC_GetPriorityGrouping+0x18>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 0307 	and.w	r3, r3, #7
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	db0b      	blt.n	80056ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4907      	ldr	r1, [pc, #28]	; (80056f8 <__NVIC_EnableIRQ+0x38>)
 80056da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2001      	movs	r0, #1
 80056e2:	fa00 f202 	lsl.w	r2, r0, r2
 80056e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	e000e100 	.word	0xe000e100

080056fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570c:	2b00      	cmp	r3, #0
 800570e:	db0a      	blt.n	8005726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	490c      	ldr	r1, [pc, #48]	; (8005748 <__NVIC_SetPriority+0x4c>)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	0112      	lsls	r2, r2, #4
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	440b      	add	r3, r1
 8005720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005724:	e00a      	b.n	800573c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4908      	ldr	r1, [pc, #32]	; (800574c <__NVIC_SetPriority+0x50>)
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	3b04      	subs	r3, #4
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	440b      	add	r3, r1
 800573a:	761a      	strb	r2, [r3, #24]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000e100 	.word	0xe000e100
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f1c3 0307 	rsb	r3, r3, #7
 800576a:	2b04      	cmp	r3, #4
 800576c:	bf28      	it	cs
 800576e:	2304      	movcs	r3, #4
 8005770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3304      	adds	r3, #4
 8005776:	2b06      	cmp	r3, #6
 8005778:	d902      	bls.n	8005780 <NVIC_EncodePriority+0x30>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3b03      	subs	r3, #3
 800577e:	e000      	b.n	8005782 <NVIC_EncodePriority+0x32>
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	401a      	ands	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005798:	f04f 31ff 	mov.w	r1, #4294967295
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	43d9      	mvns	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	4313      	orrs	r3, r2
         );
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c8:	d301      	bcc.n	80057ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ca:	2301      	movs	r3, #1
 80057cc:	e00f      	b.n	80057ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <SysTick_Config+0x40>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057d6:	210f      	movs	r1, #15
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	f7ff ff8e 	bl	80056fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <SysTick_Config+0x40>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <SysTick_Config+0x40>)
 80057e8:	2207      	movs	r2, #7
 80057ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010

080057fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff29 	bl	800565c <__NVIC_SetPriorityGrouping>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005820:	f7ff ff40 	bl	80056a4 <__NVIC_GetPriorityGrouping>
 8005824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	6978      	ldr	r0, [r7, #20]
 800582c:	f7ff ff90 	bl	8005750 <NVIC_EncodePriority>
 8005830:	4602      	mov	r2, r0
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff5f 	bl	80056fc <__NVIC_SetPriority>
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff33 	bl	80056c0 <__NVIC_EnableIRQ>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ffa4 	bl	80057b8 <SysTick_Config>
 8005870:	4603      	mov	r3, r0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e014      	b.n	80058b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fd f977 	bl	8002b90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	795b      	ldrb	r3, [r3, #5]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_DAC_Start+0x16>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e043      	b.n	800595c <HAL_DAC_Start+0x9e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2201      	movs	r2, #1
 80058ee:	409a      	lsls	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80058f8:	2001      	movs	r0, #1
 80058fa:	f7fe f9fb 	bl	8003cf4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800590e:	2b02      	cmp	r3, #2
 8005910:	d11d      	bne.n	800594e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	e014      	b.n	800594e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2102      	movs	r1, #2
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	429a      	cmp	r2, r3
 800593c:	d107      	bne.n	800594e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0202 	orr.w	r2, r2, #2
 800594c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	3308      	adds	r3, #8
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e004      	b.n	800599e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	3314      	adds	r3, #20
 800599c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	461a      	mov	r2, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	795b      	ldrb	r3, [r3, #5]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_DAC_ConfigChannel+0x18>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e192      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x33e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2202      	movs	r2, #2
 80059d6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d174      	bne.n	8005aca <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80059e0:	f7fe f97c 	bl	8003cdc <HAL_GetTick>
 80059e4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d134      	bne.n	8005a56 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059ec:	e011      	b.n	8005a12 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059ee:	f7fe f975 	bl	8003cdc <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d90a      	bls.n	8005a12 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f043 0208 	orr.w	r2, r3, #8
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e16f      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e6      	bne.n	80059ee <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005a20:	2001      	movs	r0, #1
 8005a22:	f7fe f967 	bl	8003cf4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a30:	e01e      	b.n	8005a70 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a32:	f7fe f953 	bl	8003cdc <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d90a      	bls.n	8005a56 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f043 0208 	orr.w	r2, r3, #8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e14d      	b.n	8005cf2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dbe8      	blt.n	8005a32 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005a60:	2001      	movs	r0, #1
 8005a62:	f7fe f947 	bl	8003cf4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	ea02 0103 	and.w	r1, r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	409a      	lsls	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	21ff      	movs	r1, #255	; 0xff
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	ea02 0103 	and.w	r1, r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d11d      	bne.n	8005b0e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	221f      	movs	r2, #31
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	4013      	ands	r3, r2
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b02:	4313      	orrs	r3, r2
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	4013      	ands	r3, r2
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d102      	bne.n	8005b38 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	e00f      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d102      	bne.n	8005b46 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005b40:	2301      	movs	r3, #1
 8005b42:	623b      	str	r3, [r7, #32]
 8005b44:	e008      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e001      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0310 	and.w	r3, r3, #16
 8005b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	791b      	ldrb	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d102      	bne.n	8005b8c <HAL_DAC_ConfigChannel+0x1d8>
 8005b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b8a:	e000      	b.n	8005b8e <HAL_DAC_ConfigChannel+0x1da>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	795b      	ldrb	r3, [r3, #5]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d102      	bne.n	8005bb8 <HAL_DAC_ConfigChannel+0x204>
 8005bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb6:	e000      	b.n	8005bba <HAL_DAC_ConfigChannel+0x206>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d114      	bne.n	8005bfa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005bd0:	f002 f9d2 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8005bd4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	4a48      	ldr	r2, [pc, #288]	; (8005cfc <HAL_DAC_ConfigChannel+0x348>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d904      	bls.n	8005be8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e00f      	b.n	8005c08 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4a45      	ldr	r2, [pc, #276]	; (8005d00 <HAL_DAC_ConfigChannel+0x34c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d90a      	bls.n	8005c06 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	e006      	b.n	8005c08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	4313      	orrs	r3, r2
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
 8005c04:	e000      	b.n	8005c08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005c06:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	4313      	orrs	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6819      	ldr	r1, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43da      	mvns	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	400a      	ands	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f003 0310 	and.w	r3, r3, #16
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	4313      	orrs	r3, r2
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	22c0      	movs	r2, #192	; 0xc0
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	43da      	mvns	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	400a      	ands	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	089b      	lsrs	r3, r3, #2
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	ea02 0103 	and.w	r1, r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3728      	adds	r7, #40	; 0x28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	09896800 	.word	0x09896800
 8005d00:	04c4b400 	.word	0x04c4b400

08005d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e08d      	b.n	8005e32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <HAL_DMA_Init+0x138>)
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d80f      	bhi.n	8005d42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b45      	ldr	r3, [pc, #276]	; (8005e40 <HAL_DMA_Init+0x13c>)
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4a45      	ldr	r2, [pc, #276]	; (8005e44 <HAL_DMA_Init+0x140>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	009a      	lsls	r2, r3, #2
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a42      	ldr	r2, [pc, #264]	; (8005e48 <HAL_DMA_Init+0x144>)
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40
 8005d40:	e00e      	b.n	8005d60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <HAL_DMA_Init+0x148>)
 8005d4a:	4413      	add	r3, r2
 8005d4c:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <HAL_DMA_Init+0x140>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	009a      	lsls	r2, r3, #2
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a3c      	ldr	r2, [pc, #240]	; (8005e50 <HAL_DMA_Init+0x14c>)
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa76 	bl	80062a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc0:	d102      	bne.n	8005dc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ddc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d010      	beq.n	8005e08 <HAL_DMA_Init+0x104>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d80c      	bhi.n	8005e08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa96 	bl	8006320 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e008      	b.n	8005e1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40020407 	.word	0x40020407
 8005e40:	bffdfff8 	.word	0xbffdfff8
 8005e44:	cccccccd 	.word	0xcccccccd
 8005e48:	40020000 	.word	0x40020000
 8005e4c:	bffdfbf8 	.word	0xbffdfbf8
 8005e50:	40020400 	.word	0x40020400

08005e54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_DMA_Start_IT+0x20>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e066      	b.n	8005f42 <HAL_DMA_Start_IT+0xee>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d155      	bne.n	8005f34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f9bb 	bl	8006228 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 020e 	orr.w	r2, r2, #14
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e00f      	b.n	8005eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 020a 	orr.w	r2, r2, #10
 8005eea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e005      	b.n	8005f40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d005      	beq.n	8005f6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e037      	b.n	8005fde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 020e 	bic.w	r2, r2, #14
 8005f7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	f003 021f 	and.w	r2, r3, #31
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	2101      	movs	r1, #1
 8005fac:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005fba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005fdc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d00d      	beq.n	8006030 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2204      	movs	r2, #4
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
 800602e:	e047      	b.n	80060c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020e 	bic.w	r2, r2, #14
 800603e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	f003 021f 	and.w	r2, r3, #31
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	2101      	movs	r1, #1
 800606e:	fa01 f202 	lsl.w	r2, r1, r2
 8006072:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800607c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006094:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800609e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
    }
  }
  return status;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2204      	movs	r2, #4
 80060ec:	409a      	lsls	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d026      	beq.n	8006144 <HAL_DMA_IRQHandler+0x7a>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d021      	beq.n	8006144 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d107      	bne.n	800611e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0204 	bic.w	r2, r2, #4
 800611c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006122:	f003 021f 	and.w	r2, r3, #31
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	2104      	movs	r1, #4
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	2b00      	cmp	r3, #0
 8006138:	d071      	beq.n	800621e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006142:	e06c      	b.n	800621e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2202      	movs	r2, #2
 800614e:	409a      	lsls	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d02e      	beq.n	80061b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d029      	beq.n	80061b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 020a 	bic.w	r2, r2, #10
 800617e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618c:	f003 021f 	and.w	r2, r3, #31
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	2102      	movs	r1, #2
 8006196:	fa01 f202 	lsl.w	r2, r1, r2
 800619a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d038      	beq.n	800621e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80061b4:	e033      	b.n	800621e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2208      	movs	r2, #8
 80061c0:	409a      	lsls	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02a      	beq.n	8006220 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d025      	beq.n	8006220 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 020e 	bic.w	r2, r2, #14
 80061e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	f003 021f 	and.w	r2, r3, #31
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	2101      	movs	r1, #1
 80061f2:	fa01 f202 	lsl.w	r2, r1, r2
 80061f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800621e:	bf00      	nop
 8006220:	bf00      	nop
}
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800623e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006250:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006256:	f003 021f 	and.w	r2, r3, #31
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f202 	lsl.w	r2, r1, r2
 8006264:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b10      	cmp	r3, #16
 8006274:	d108      	bne.n	8006288 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006286:	e007      	b.n	8006298 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d802      	bhi.n	80062be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80062be:	4b15      	ldr	r3, [pc, #84]	; (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80062c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	3b08      	subs	r3, #8
 80062ce:	4a12      	ldr	r2, [pc, #72]	; (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	009a      	lsls	r2, r3, #2
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a0b      	ldr	r2, [pc, #44]	; (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80062ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2201      	movs	r2, #1
 80062f8:	409a      	lsls	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40020407 	.word	0x40020407
 8006310:	40020800 	.word	0x40020800
 8006314:	40020820 	.word	0x40020820
 8006318:	cccccccd 	.word	0xcccccccd
 800631c:	40020880 	.word	0x40020880

08006320 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	461a      	mov	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006342:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b01      	subs	r3, #1
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2201      	movs	r2, #1
 800634e:	409a      	lsls	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	1000823f 	.word	0x1000823f
 8006364:	40020940 	.word	0x40020940

08006368 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e147      	b.n	800660a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fc fcea 	bl	8002d68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0210 	bic.w	r2, r2, #16
 80063a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063a4:	f7fd fc9a 	bl	8003cdc <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063aa:	e012      	b.n	80063d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80063ac:	f7fd fc96 	bl	8003cdc <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b0a      	cmp	r3, #10
 80063b8:	d90b      	bls.n	80063d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2203      	movs	r2, #3
 80063ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e11b      	b.n	800660a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d0e5      	beq.n	80063ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f0:	f7fd fc74 	bl	8003cdc <HAL_GetTick>
 80063f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80063f6:	e012      	b.n	800641e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80063f8:	f7fd fc70 	bl	8003cdc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b0a      	cmp	r3, #10
 8006404:	d90b      	bls.n	800641e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2203      	movs	r2, #3
 8006416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e0f5      	b.n	800660a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0e5      	beq.n	80063f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0202 	orr.w	r2, r2, #2
 800643a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a74      	ldr	r2, [pc, #464]	; (8006614 <HAL_FDCAN_Init+0x2ac>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d103      	bne.n	800644e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006446:	4a74      	ldr	r2, [pc, #464]	; (8006618 <HAL_FDCAN_Init+0x2b0>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7c1b      	ldrb	r3, [r3, #16]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d108      	bne.n	8006468 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006464:	619a      	str	r2, [r3, #24]
 8006466:	e007      	b.n	8006478 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7c5b      	ldrb	r3, [r3, #17]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d108      	bne.n	8006492 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800648e:	619a      	str	r2, [r3, #24]
 8006490:	e007      	b.n	80064a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	7c9b      	ldrb	r3, [r3, #18]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d108      	bne.n	80064bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064b8:	619a      	str	r2, [r3, #24]
 80064ba:	e007      	b.n	80064cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80064f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0210 	bic.w	r2, r2, #16
 8006500:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d108      	bne.n	800651c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0204 	orr.w	r2, r2, #4
 8006518:	619a      	str	r2, [r3, #24]
 800651a:	e02c      	b.n	8006576 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d028      	beq.n	8006576 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d01c      	beq.n	8006566 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800653a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691a      	ldr	r2, [r3, #16]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0210 	orr.w	r2, r2, #16
 800654a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d110      	bne.n	8006576 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0220 	orr.w	r2, r2, #32
 8006562:	619a      	str	r2, [r3, #24]
 8006564:	e007      	b.n	8006576 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0220 	orr.w	r2, r2, #32
 8006574:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	3b01      	subs	r3, #1
 800657c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	3b01      	subs	r3, #1
 8006584:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006586:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800658e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	3b01      	subs	r3, #1
 8006598:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800659e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80065a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065aa:	d115      	bne.n	80065d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	3b01      	subs	r3, #1
 80065b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80065ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	3b01      	subs	r3, #1
 80065c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	3b01      	subs	r3, #1
 80065ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80065d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80065d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fbe2 	bl	8006db8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40006400 	.word	0x40006400
 8006618:	40006500 	.word	0x40006500

0800661c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d110      	bne.n	8006652 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e006      	b.n	8006660 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006656:	f043 0204 	orr.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d12c      	bne.n	80066de <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800668c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e023      	b.n	80066ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fbd2 	bl	8006e64 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2101      	movs	r1, #1
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	fa01 f202 	lsl.w	r2, r1, r2
 80066cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80066d0:	2201      	movs	r2, #1
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	409a      	lsls	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e006      	b.n	80066ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e2:	f043 0208 	orr.w	r2, r3, #8
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b08b      	sub	sp, #44	; 0x2c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006708:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800670a:	7efb      	ldrb	r3, [r7, #27]
 800670c:	2b02      	cmp	r3, #2
 800670e:	f040 80bc 	bne.w	800688a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d121      	bne.n	800675c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	2b00      	cmp	r3, #0
 8006726:	d107      	bne.n	8006738 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0af      	b.n	8006898 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	e020      	b.n	800679e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e08d      	b.n	8006898 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006784:	0a1b      	lsrs	r3, r3, #8
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	440b      	add	r3, r1
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d107      	bne.n	80067c2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	0c9b      	lsrs	r3, r3, #18
 80067b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e005      	b.n	80067ce <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	3304      	adds	r3, #4
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	0e1b      	lsrs	r3, r3, #24
 8006820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0fda      	lsrs	r2, r3, #31
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	3304      	adds	r3, #4
 8006836:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	e00a      	b.n	8006858 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	441a      	add	r2, r3
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	440b      	add	r3, r1
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	3301      	adds	r3, #1
 8006856:	623b      	str	r3, [r7, #32]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006860:	5cd3      	ldrb	r3, [r2, r3]
 8006862:	461a      	mov	r2, r3
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	4293      	cmp	r3, r2
 8006868:	d3eb      	bcc.n	8006842 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d105      	bne.n	800687c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800687a:	e004      	b.n	8006886 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	e006      	b.n	8006898 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688e:	f043 0208 	orr.w	r2, r3, #8
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	372c      	adds	r7, #44	; 0x2c
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	0800cbec 	.word	0x0800cbec

080068a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80068ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d003      	beq.n	80068ca <HAL_FDCAN_ActivateNotification+0x22>
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	f040 80c8 	bne.w	8006a5a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d03b      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d031      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d027      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01d      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b00      	cmp	r3, #0
 8006934:	d013      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d13b      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d131      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d127      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11d      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d113      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0202 	orr.w	r2, r2, #2
 8006a08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e006      	b.n	8006a68 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a5e:	f043 0202 	orr.w	r2, r3, #2
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
  }
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	4013      	ands	r3, r2
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	6a3a      	ldr	r2, [r7, #32]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ab6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aca:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006ace:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006ae6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4013      	ands	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d006      	beq.n	8006b1e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2240      	movs	r2, #64	; 0x40
 8006b16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f92e 	bl	8006d7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01b      	beq.n	8006b64 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b42:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006b5c:	6939      	ldr	r1, [r7, #16]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8ec 	bl	8006d3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f8b6 	bl	8006ce6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fb fd0a 	bl	80025a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006b9e:	69f9      	ldr	r1, [r7, #28]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8ab 	bl	8006cfc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8a0 	bl	8006d12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01a      	beq.n	8006c16 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006bf6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4013      	ands	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2280      	movs	r2, #128	; 0x80
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f888 	bl	8006d26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00e      	beq.n	8006c42 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f888 	bl	8006d52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f87c 	bl	8006d66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d011      	beq.n	8006ca0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006cae:	6979      	ldr	r1, [r7, #20]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f876 	bl	8006da2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f858 	bl	8006d8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006cde:	bf00      	nop
 8006ce0:	3728      	adds	r7, #40	; 0x28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006d5a:	bf00      	nop
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006d96:	bf00      	nop
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006dc0:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006dc2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dda:	041a      	lsls	r2, r3, #16
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	061a      	lsls	r2, r3, #24
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e005      	b.n	8006e46 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3304      	adds	r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3f3      	bcc.n	8006e3a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	4000a400 	.word	0x4000a400

08006e64 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b089      	sub	sp, #36	; 0x24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006e82:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e00a      	b.n	8006ea6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006e98:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006e9e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006eb0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006eb6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006ebc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	440b      	add	r3, r1
 8006ed6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	3304      	adds	r3, #4
 8006eee:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e020      	b.n	8006f38 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	3303      	adds	r3, #3
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3302      	adds	r3, #2
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	440b      	add	r3, r1
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006f0e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3301      	adds	r3, #1
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	440b      	add	r3, r1
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006f1c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	440a      	add	r2, r1
 8006f24:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006f26:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	3304      	adds	r3, #4
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	4a06      	ldr	r2, [pc, #24]	; (8006f58 <FDCAN_CopyMessageToRAM+0xf4>)
 8006f40:	5cd3      	ldrb	r3, [r2, r3]
 8006f42:	461a      	mov	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d3d5      	bcc.n	8006ef6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
 8006f4e:	3724      	adds	r7, #36	; 0x24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	0800cbec 	.word	0x0800cbec

08006f5c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e033      	b.n	8006fd6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fb ff66 	bl	8002e54 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f854 	bl	800703c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f822 	bl	8006fde <FMAC_Reset>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d10c      	bne.n	8006fba <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	f043 0210 	orr.w	r2, r3, #16
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	22a0      	movs	r2, #160	; 0xa0
 8006fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	e008      	b.n	8006fcc <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fe6:	f7fc fe79 	bl	8003cdc <HAL_GetTick>
 8006fea:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ffa:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006ffc:	e00f      	b.n	800701e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006ffe:	f7fc fe6d 	bl	8003cdc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800700c:	d907      	bls.n	800701e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e00a      	b.n	8007034 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e8      	bne.n	8006ffe <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f807 	bl	8007058 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f81b 	bl	8007086 <FMAC_ResetOutputStateAndDataPointers>
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80070c2:	e15a      	b.n	800737a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	2101      	movs	r1, #1
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	fa01 f303 	lsl.w	r3, r1, r3
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 814c 	beq.w	8007374 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d005      	beq.n	80070f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d130      	bne.n	8007156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	2203      	movs	r2, #3
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4013      	ands	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800712a:	2201      	movs	r2, #1
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	43db      	mvns	r3, r3
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4013      	ands	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	f003 0201 	and.w	r2, r3, #1
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	2b03      	cmp	r3, #3
 8007160:	d017      	beq.n	8007192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	2203      	movs	r2, #3
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	43db      	mvns	r3, r3
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4013      	ands	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d123      	bne.n	80071e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	08da      	lsrs	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	3208      	adds	r2, #8
 80071a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	220f      	movs	r2, #15
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	43db      	mvns	r3, r3
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4013      	ands	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	691a      	ldr	r2, [r3, #16]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	08da      	lsrs	r2, r3, #3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3208      	adds	r2, #8
 80071e0:	6939      	ldr	r1, [r7, #16]
 80071e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	2203      	movs	r2, #3
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4013      	ands	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f003 0203 	and.w	r2, r3, #3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80a6 	beq.w	8007374 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007228:	4b5b      	ldr	r3, [pc, #364]	; (8007398 <HAL_GPIO_Init+0x2e4>)
 800722a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722c:	4a5a      	ldr	r2, [pc, #360]	; (8007398 <HAL_GPIO_Init+0x2e4>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	6613      	str	r3, [r2, #96]	; 0x60
 8007234:	4b58      	ldr	r3, [pc, #352]	; (8007398 <HAL_GPIO_Init+0x2e4>)
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007240:	4a56      	ldr	r2, [pc, #344]	; (800739c <HAL_GPIO_Init+0x2e8>)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	089b      	lsrs	r3, r3, #2
 8007246:	3302      	adds	r3, #2
 8007248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800724c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	220f      	movs	r2, #15
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	43db      	mvns	r3, r3
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4013      	ands	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800726a:	d01f      	beq.n	80072ac <HAL_GPIO_Init+0x1f8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a4c      	ldr	r2, [pc, #304]	; (80073a0 <HAL_GPIO_Init+0x2ec>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d019      	beq.n	80072a8 <HAL_GPIO_Init+0x1f4>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <HAL_GPIO_Init+0x2f0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_GPIO_Init+0x1f0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a4a      	ldr	r2, [pc, #296]	; (80073a8 <HAL_GPIO_Init+0x2f4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00d      	beq.n	80072a0 <HAL_GPIO_Init+0x1ec>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a49      	ldr	r2, [pc, #292]	; (80073ac <HAL_GPIO_Init+0x2f8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <HAL_GPIO_Init+0x1e8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a48      	ldr	r2, [pc, #288]	; (80073b0 <HAL_GPIO_Init+0x2fc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d101      	bne.n	8007298 <HAL_GPIO_Init+0x1e4>
 8007294:	2305      	movs	r3, #5
 8007296:	e00a      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 8007298:	2306      	movs	r3, #6
 800729a:	e008      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 800729c:	2304      	movs	r3, #4
 800729e:	e006      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 80072a0:	2303      	movs	r3, #3
 80072a2:	e004      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e002      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <HAL_GPIO_Init+0x1fa>
 80072ac:	2300      	movs	r3, #0
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	f002 0203 	and.w	r2, r2, #3
 80072b4:	0092      	lsls	r2, r2, #2
 80072b6:	4093      	lsls	r3, r2
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072be:	4937      	ldr	r1, [pc, #220]	; (800739c <HAL_GPIO_Init+0x2e8>)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	3302      	adds	r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072cc:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <HAL_GPIO_Init+0x300>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4013      	ands	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072f0:	4a30      	ldr	r2, [pc, #192]	; (80073b4 <HAL_GPIO_Init+0x300>)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072f6:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <HAL_GPIO_Init+0x300>)
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	43db      	mvns	r3, r3
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4013      	ands	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800731a:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <HAL_GPIO_Init+0x300>)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007320:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <HAL_GPIO_Init+0x300>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	43db      	mvns	r3, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4013      	ands	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007344:	4a1b      	ldr	r2, [pc, #108]	; (80073b4 <HAL_GPIO_Init+0x300>)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800734a:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_GPIO_Init+0x300>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	43db      	mvns	r3, r3
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4013      	ands	r3, r2
 8007358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800736e:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <HAL_GPIO_Init+0x300>)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3301      	adds	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f ae9d 	bne.w	80070c4 <HAL_GPIO_Init+0x10>
  }
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40021000 	.word	0x40021000
 800739c:	40010000 	.word	0x40010000
 80073a0:	48000400 	.word	0x48000400
 80073a4:	48000800 	.word	0x48000800
 80073a8:	48000c00 	.word	0x48000c00
 80073ac:	48001000 	.word	0x48001000
 80073b0:	48001400 	.word	0x48001400
 80073b4:	40010400 	.word	0x40010400

080073b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
 80073c4:	4613      	mov	r3, r2
 80073c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073c8:	787b      	ldrb	r3, [r7, #1]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073d4:	e002      	b.n	80073dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073d6:	887a      	ldrh	r2, [r7, #2]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4013      	ands	r3, r2
 8007400:	041a      	lsls	r2, r3, #16
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	43d9      	mvns	r1, r3
 8007406:	887b      	ldrh	r3, [r7, #2]
 8007408:	400b      	ands	r3, r1
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	619a      	str	r2, [r3, #24]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d141      	bne.n	80074ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800742a:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007436:	d131      	bne.n	800749c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007438:	4b47      	ldr	r3, [pc, #284]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800743a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743e:	4a46      	ldr	r2, [pc, #280]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007448:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007450:	4a41      	ldr	r2, [pc, #260]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007458:	4b40      	ldr	r3, [pc, #256]	; (800755c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2232      	movs	r2, #50	; 0x32
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	4a3f      	ldr	r2, [pc, #252]	; (8007560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007464:	fba2 2303 	umull	r2, r3, r2, r3
 8007468:	0c9b      	lsrs	r3, r3, #18
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800746e:	e002      	b.n	8007476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3b01      	subs	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007476:	4b38      	ldr	r3, [pc, #224]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007482:	d102      	bne.n	800748a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f2      	bne.n	8007470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800748a:	4b33      	ldr	r3, [pc, #204]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007496:	d158      	bne.n	800754a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e057      	b.n	800754c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800749c:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800749e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a2:	4a2d      	ldr	r2, [pc, #180]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80074ac:	e04d      	b.n	800754a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b4:	d141      	bne.n	800753a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80074b6:	4b28      	ldr	r3, [pc, #160]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c2:	d131      	bne.n	8007528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074c4:	4b24      	ldr	r3, [pc, #144]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ca:	4a23      	ldr	r2, [pc, #140]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074d4:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074dc:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074e4:	4b1d      	ldr	r3, [pc, #116]	; (800755c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2232      	movs	r2, #50	; 0x32
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	0c9b      	lsrs	r3, r3, #18
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074fa:	e002      	b.n	8007502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3b01      	subs	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007502:	4b15      	ldr	r3, [pc, #84]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d102      	bne.n	8007516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f2      	bne.n	80074fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800751e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007522:	d112      	bne.n	800754a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e011      	b.n	800754c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007538:	e007      	b.n	800754a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007542:	4a05      	ldr	r2, [pc, #20]	; (8007558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007548:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	40007000 	.word	0x40007000
 800755c:	200000d8 	.word	0x200000d8
 8007560:	431bde83 	.word	0x431bde83

08007564 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4a04      	ldr	r2, [pc, #16]	; (8007580 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800756e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007572:	6093      	str	r3, [r2, #8]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	40007000 	.word	0x40007000

08007584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e306      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d075      	beq.n	800768e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075a2:	4b97      	ldr	r3, [pc, #604]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
 80075aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075ac:	4b94      	ldr	r3, [pc, #592]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d102      	bne.n	80075c2 <HAL_RCC_OscConfig+0x3e>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d002      	beq.n	80075c8 <HAL_RCC_OscConfig+0x44>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d10b      	bne.n	80075e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c8:	4b8d      	ldr	r3, [pc, #564]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d05b      	beq.n	800768c <HAL_RCC_OscConfig+0x108>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d157      	bne.n	800768c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e2e1      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e8:	d106      	bne.n	80075f8 <HAL_RCC_OscConfig+0x74>
 80075ea:	4b85      	ldr	r3, [pc, #532]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a84      	ldr	r2, [pc, #528]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80075f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	e01d      	b.n	8007634 <HAL_RCC_OscConfig+0xb0>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007600:	d10c      	bne.n	800761c <HAL_RCC_OscConfig+0x98>
 8007602:	4b7f      	ldr	r3, [pc, #508]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a7e      	ldr	r2, [pc, #504]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	4b7c      	ldr	r3, [pc, #496]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a7b      	ldr	r2, [pc, #492]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e00b      	b.n	8007634 <HAL_RCC_OscConfig+0xb0>
 800761c:	4b78      	ldr	r3, [pc, #480]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a77      	ldr	r2, [pc, #476]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	4b75      	ldr	r3, [pc, #468]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a74      	ldr	r2, [pc, #464]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800762e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d013      	beq.n	8007664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fc fb4e 	bl	8003cdc <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007644:	f7fc fb4a 	bl	8003cdc <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b64      	cmp	r3, #100	; 0x64
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e2a6      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007656:	4b6a      	ldr	r3, [pc, #424]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0xc0>
 8007662:	e014      	b.n	800768e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fc fb3a 	bl	8003cdc <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800766c:	f7fc fb36 	bl	8003cdc <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e292      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800767e:	4b60      	ldr	r3, [pc, #384]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0xe8>
 800768a:	e000      	b.n	800768e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d075      	beq.n	8007786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800769a:	4b59      	ldr	r3, [pc, #356]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076a4:	4b56      	ldr	r3, [pc, #344]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b0c      	cmp	r3, #12
 80076b2:	d102      	bne.n	80076ba <HAL_RCC_OscConfig+0x136>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d002      	beq.n	80076c0 <HAL_RCC_OscConfig+0x13c>
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d11f      	bne.n	8007700 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076c0:	4b4f      	ldr	r3, [pc, #316]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCC_OscConfig+0x154>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e265      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d8:	4b49      	ldr	r3, [pc, #292]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	061b      	lsls	r3, r3, #24
 80076e6:	4946      	ldr	r1, [pc, #280]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <HAL_RCC_OscConfig+0x280>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fc faa7 	bl	8003c44 <HAL_InitTick>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d043      	beq.n	8007784 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e251      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d023      	beq.n	8007750 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007708:	4b3d      	ldr	r3, [pc, #244]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3c      	ldr	r2, [pc, #240]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800770e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fc fae2 	bl	8003cdc <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800771c:	f7fc fade 	bl	8003cdc <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e23a      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800772e:	4b34      	ldr	r3, [pc, #208]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773a:	4b31      	ldr	r3, [pc, #196]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	061b      	lsls	r3, r3, #24
 8007748:	492d      	ldr	r1, [pc, #180]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
 800774e:	e01a      	b.n	8007786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007750:	4b2b      	ldr	r3, [pc, #172]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fc fabe 	bl	8003cdc <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007764:	f7fc faba 	bl	8003cdc <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e216      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007776:	4b22      	ldr	r3, [pc, #136]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x1e0>
 8007782:	e000      	b.n	8007786 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007784:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d041      	beq.n	8007816 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01c      	beq.n	80077d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800779a:	4b19      	ldr	r3, [pc, #100]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 800779c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077a0:	4a17      	ldr	r2, [pc, #92]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80077a2:	f043 0301 	orr.w	r3, r3, #1
 80077a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077aa:	f7fc fa97 	bl	8003cdc <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077b0:	e008      	b.n	80077c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b2:	f7fc fa93 	bl	8003cdc <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e1ef      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80077c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ef      	beq.n	80077b2 <HAL_RCC_OscConfig+0x22e>
 80077d2:	e020      	b.n	8007816 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80077d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077da:	4a09      	ldr	r2, [pc, #36]	; (8007800 <HAL_RCC_OscConfig+0x27c>)
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e4:	f7fc fa7a 	bl	8003cdc <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077ea:	e00d      	b.n	8007808 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ec:	f7fc fa76 	bl	8003cdc <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d906      	bls.n	8007808 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e1d2      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
 80077fe:	bf00      	nop
 8007800:	40021000 	.word	0x40021000
 8007804:	200000dc 	.word	0x200000dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007808:	4b8c      	ldr	r3, [pc, #560]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 800780a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ea      	bne.n	80077ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 80a6 	beq.w	8007970 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007828:	4b84      	ldr	r3, [pc, #528]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_RCC_OscConfig+0x2b4>
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x2b6>
 8007838:	2300      	movs	r3, #0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800783e:	4b7f      	ldr	r3, [pc, #508]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	4a7e      	ldr	r2, [pc, #504]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007848:	6593      	str	r3, [r2, #88]	; 0x58
 800784a:	4b7c      	ldr	r3, [pc, #496]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007856:	2301      	movs	r3, #1
 8007858:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800785a:	4b79      	ldr	r3, [pc, #484]	; (8007a40 <HAL_RCC_OscConfig+0x4bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d118      	bne.n	8007898 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007866:	4b76      	ldr	r3, [pc, #472]	; (8007a40 <HAL_RCC_OscConfig+0x4bc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a75      	ldr	r2, [pc, #468]	; (8007a40 <HAL_RCC_OscConfig+0x4bc>)
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007872:	f7fc fa33 	bl	8003cdc <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007878:	e008      	b.n	800788c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800787a:	f7fc fa2f 	bl	8003cdc <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e18b      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800788c:	4b6c      	ldr	r3, [pc, #432]	; (8007a40 <HAL_RCC_OscConfig+0x4bc>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d108      	bne.n	80078b2 <HAL_RCC_OscConfig+0x32e>
 80078a0:	4b66      	ldr	r3, [pc, #408]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a6:	4a65      	ldr	r2, [pc, #404]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078a8:	f043 0301 	orr.w	r3, r3, #1
 80078ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078b0:	e024      	b.n	80078fc <HAL_RCC_OscConfig+0x378>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d110      	bne.n	80078dc <HAL_RCC_OscConfig+0x358>
 80078ba:	4b60      	ldr	r3, [pc, #384]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c0:	4a5e      	ldr	r2, [pc, #376]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078c2:	f043 0304 	orr.w	r3, r3, #4
 80078c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078ca:	4b5c      	ldr	r3, [pc, #368]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d0:	4a5a      	ldr	r2, [pc, #360]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078da:	e00f      	b.n	80078fc <HAL_RCC_OscConfig+0x378>
 80078dc:	4b57      	ldr	r3, [pc, #348]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e2:	4a56      	ldr	r2, [pc, #344]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80078ec:	4b53      	ldr	r3, [pc, #332]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f2:	4a52      	ldr	r2, [pc, #328]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80078f4:	f023 0304 	bic.w	r3, r3, #4
 80078f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d016      	beq.n	8007932 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007904:	f7fc f9ea 	bl	8003cdc <HAL_GetTick>
 8007908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800790a:	e00a      	b.n	8007922 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790c:	f7fc f9e6 	bl	8003cdc <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	f241 3288 	movw	r2, #5000	; 0x1388
 800791a:	4293      	cmp	r3, r2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e140      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007922:	4b46      	ldr	r3, [pc, #280]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0ed      	beq.n	800790c <HAL_RCC_OscConfig+0x388>
 8007930:	e015      	b.n	800795e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007932:	f7fc f9d3 	bl	8003cdc <HAL_GetTick>
 8007936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007938:	e00a      	b.n	8007950 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800793a:	f7fc f9cf 	bl	8003cdc <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	f241 3288 	movw	r2, #5000	; 0x1388
 8007948:	4293      	cmp	r3, r2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e129      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007950:	4b3a      	ldr	r3, [pc, #232]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1ed      	bne.n	800793a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800795e:	7ffb      	ldrb	r3, [r7, #31]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d105      	bne.n	8007970 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007964:	4b35      	ldr	r3, [pc, #212]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007968:	4a34      	ldr	r2, [pc, #208]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 800796a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800796e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d03c      	beq.n	80079f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01c      	beq.n	80079be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007984:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800798a:	4a2c      	ldr	r2, [pc, #176]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007994:	f7fc f9a2 	bl	8003cdc <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800799c:	f7fc f99e 	bl	8003cdc <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0fa      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80079ae:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80079b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0ef      	beq.n	800799c <HAL_RCC_OscConfig+0x418>
 80079bc:	e01b      	b.n	80079f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079be:	4b1f      	ldr	r3, [pc, #124]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80079c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80079c6:	f023 0301 	bic.w	r3, r3, #1
 80079ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ce:	f7fc f985 	bl	8003cdc <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079d6:	f7fc f981 	bl	8003cdc <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e0dd      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 80079ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ef      	bne.n	80079d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80d1 	beq.w	8007ba2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b0c      	cmp	r3, #12
 8007a0a:	f000 808b 	beq.w	8007b24 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d15e      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <HAL_RCC_OscConfig+0x4b8>)
 8007a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a22:	f7fc f95b 	bl	8003cdc <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a28:	e00c      	b.n	8007a44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a2a:	f7fc f957 	bl	8003cdc <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d905      	bls.n	8007a44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e0b3      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a44:	4b59      	ldr	r3, [pc, #356]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1ec      	bne.n	8007a2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a50:	4b56      	ldr	r3, [pc, #344]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	4b56      	ldr	r3, [pc, #344]	; (8007bb0 <HAL_RCC_OscConfig+0x62c>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6a11      	ldr	r1, [r2, #32]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a60:	3a01      	subs	r2, #1
 8007a62:	0112      	lsls	r2, r2, #4
 8007a64:	4311      	orrs	r1, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a6a:	0212      	lsls	r2, r2, #8
 8007a6c:	4311      	orrs	r1, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a72:	0852      	lsrs	r2, r2, #1
 8007a74:	3a01      	subs	r2, #1
 8007a76:	0552      	lsls	r2, r2, #21
 8007a78:	4311      	orrs	r1, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a7e:	0852      	lsrs	r2, r2, #1
 8007a80:	3a01      	subs	r2, #1
 8007a82:	0652      	lsls	r2, r2, #25
 8007a84:	4311      	orrs	r1, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a8a:	06d2      	lsls	r2, r2, #27
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	4947      	ldr	r1, [pc, #284]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a94:	4b45      	ldr	r3, [pc, #276]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a44      	ldr	r2, [pc, #272]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007aa0:	4b42      	ldr	r3, [pc, #264]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a41      	ldr	r2, [pc, #260]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007aaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aac:	f7fc f916 	bl	8003cdc <HAL_GetTick>
 8007ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ab4:	f7fc f912 	bl	8003cdc <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e06e      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ac6:	4b39      	ldr	r3, [pc, #228]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0f0      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x530>
 8007ad2:	e066      	b.n	8007ba2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ad4:	4b35      	ldr	r3, [pc, #212]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a34      	ldr	r2, [pc, #208]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ade:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ae0:	4b32      	ldr	r3, [pc, #200]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4a31      	ldr	r2, [pc, #196]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007ae6:	f023 0303 	bic.w	r3, r3, #3
 8007aea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007aec:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a2e      	ldr	r2, [pc, #184]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007af2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afc:	f7fc f8ee 	bl	8003cdc <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b04:	f7fc f8ea 	bl	8003cdc <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e046      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b16:	4b25      	ldr	r3, [pc, #148]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x580>
 8007b22:	e03e      	b.n	8007ba2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e039      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007b30:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <HAL_RCC_OscConfig+0x628>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f003 0203 	and.w	r2, r3, #3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d12c      	bne.n	8007b9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d123      	bne.n	8007b9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d11b      	bne.n	8007b9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d113      	bne.n	8007b9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	3b01      	subs	r3, #1
 8007b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d109      	bne.n	8007b9e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	3b01      	subs	r3, #1
 8007b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d001      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	019f800c 	.word	0x019f800c

08007bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e11e      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007bcc:	4b91      	ldr	r3, [pc, #580]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 030f 	and.w	r3, r3, #15
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d910      	bls.n	8007bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bda:	4b8e      	ldr	r3, [pc, #568]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f023 020f 	bic.w	r2, r3, #15
 8007be2:	498c      	ldr	r1, [pc, #560]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bea:	4b8a      	ldr	r3, [pc, #552]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e106      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d073      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d129      	bne.n	8007c64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c10:	4b81      	ldr	r3, [pc, #516]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0f4      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007c20:	f000 f9e2 	bl	8007fe8 <RCC_GetSysClockFreqFromPLLSource>
 8007c24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4a7c      	ldr	r2, [pc, #496]	; (8007e1c <HAL_RCC_ClockConfig+0x268>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d93f      	bls.n	8007cae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c2e:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d033      	beq.n	8007cae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d12f      	bne.n	8007cae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c4e:	4b72      	ldr	r3, [pc, #456]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c56:	4a70      	ldr	r2, [pc, #448]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e024      	b.n	8007cae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c6c:	4b6a      	ldr	r3, [pc, #424]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e0c6      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c7c:	4b66      	ldr	r3, [pc, #408]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0be      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c8c:	f000 f914 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 8007c90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	4a61      	ldr	r2, [pc, #388]	; (8007e1c <HAL_RCC_ClockConfig+0x268>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d909      	bls.n	8007cae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c9a:	4b5f      	ldr	r3, [pc, #380]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ca2:	4a5d      	ldr	r2, [pc, #372]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cae:	4b5a      	ldr	r3, [pc, #360]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f023 0203 	bic.w	r2, r3, #3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4957      	ldr	r1, [pc, #348]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc0:	f7fc f80c 	bl	8003cdc <HAL_GetTick>
 8007cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc6:	e00a      	b.n	8007cde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cc8:	f7fc f808 	bl	8003cdc <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e095      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cde:	4b4e      	ldr	r3, [pc, #312]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 020c 	and.w	r2, r3, #12
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d1eb      	bne.n	8007cc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d023      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d08:	4b43      	ldr	r3, [pc, #268]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4a42      	ldr	r2, [pc, #264]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d007      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007d20:	4b3d      	ldr	r3, [pc, #244]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d28:	4a3b      	ldr	r2, [pc, #236]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d30:	4b39      	ldr	r3, [pc, #228]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	4936      	ldr	r1, [pc, #216]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	608b      	str	r3, [r1, #8]
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2b80      	cmp	r3, #128	; 0x80
 8007d48:	d105      	bne.n	8007d56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007d4a:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	4a32      	ldr	r2, [pc, #200]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d56:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d21d      	bcs.n	8007da0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d64:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f023 020f 	bic.w	r2, r3, #15
 8007d6c:	4929      	ldr	r1, [pc, #164]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d74:	f7fb ffb2 	bl	8003cdc <HAL_GetTick>
 8007d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7a:	e00a      	b.n	8007d92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d7c:	f7fb ffae 	bl	8003cdc <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e03b      	b.n	8007e0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d92:	4b20      	ldr	r3, [pc, #128]	; (8007e14 <HAL_RCC_ClockConfig+0x260>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1ed      	bne.n	8007d7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d008      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4917      	ldr	r1, [pc, #92]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	490f      	ldr	r1, [pc, #60]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007dde:	f000 f86b 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <HAL_RCC_ClockConfig+0x264>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	490c      	ldr	r1, [pc, #48]	; (8007e20 <HAL_RCC_ClockConfig+0x26c>)
 8007df0:	5ccb      	ldrb	r3, [r1, r3]
 8007df2:	f003 031f 	and.w	r3, r3, #31
 8007df6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <HAL_RCC_ClockConfig+0x270>)
 8007dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <HAL_RCC_ClockConfig+0x274>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fb ff1e 	bl	8003c44 <HAL_InitTick>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40022000 	.word	0x40022000
 8007e18:	40021000 	.word	0x40021000
 8007e1c:	04c4b400 	.word	0x04c4b400
 8007e20:	0800cbd4 	.word	0x0800cbd4
 8007e24:	200000d8 	.word	0x200000d8
 8007e28:	200000dc 	.word	0x200000dc

08007e2c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08c      	sub	sp, #48	; 0x30
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	0c1b      	lsrs	r3, r3, #16
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007e58:	029b      	lsls	r3, r3, #10
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	0c1b      	lsrs	r3, r3, #16
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007e66:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <HAL_RCC_MCOConfig+0x88>)
 8007e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	4910      	ldr	r1, [pc, #64]	; (8007eb4 <HAL_RCC_MCOConfig+0x88>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	0d1b      	lsrs	r3, r3, #20
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007e86:	f107 0310 	add.w	r3, r7, #16
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f7ff f911 	bl	80070b4 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007e98:	4b06      	ldr	r3, [pc, #24]	; (8007eb4 <HAL_RCC_MCOConfig+0x88>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	4903      	ldr	r1, [pc, #12]	; (8007eb4 <HAL_RCC_MCOConfig+0x88>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	608b      	str	r3, [r1, #8]
  }
}
 8007eac:	bf00      	nop
 8007eae:	3730      	adds	r7, #48	; 0x30
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40021000 	.word	0x40021000

08007eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 030c 	and.w	r3, r3, #12
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	e047      	b.n	8007f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 030c 	and.w	r3, r3, #12
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d102      	bne.n	8007ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007ede:	613b      	str	r3, [r7, #16]
 8007ee0:	e03e      	b.n	8007f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ee2:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
 8007eea:	2b0c      	cmp	r3, #12
 8007eec:	d136      	bne.n	8007f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007eee:	4b20      	ldr	r3, [pc, #128]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	3301      	adds	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d10c      	bne.n	8007f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f0c:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f16:	68d2      	ldr	r2, [r2, #12]
 8007f18:	0a12      	lsrs	r2, r2, #8
 8007f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f1e:	fb02 f303 	mul.w	r3, r2, r3
 8007f22:	617b      	str	r3, [r7, #20]
      break;
 8007f24:	e00c      	b.n	8007f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f26:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	4a10      	ldr	r2, [pc, #64]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f30:	68d2      	ldr	r2, [r2, #12]
 8007f32:	0a12      	lsrs	r2, r2, #8
 8007f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f38:	fb02 f303 	mul.w	r3, r2, r3
 8007f3c:	617b      	str	r3, [r7, #20]
      break;
 8007f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	0e5b      	lsrs	r3, r3, #25
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	e001      	b.n	8007f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007f60:	693b      	ldr	r3, [r7, #16]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40021000 	.word	0x40021000
 8007f74:	00f42400 	.word	0x00f42400

08007f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f7c:	4b03      	ldr	r3, [pc, #12]	; (8007f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	200000d8 	.word	0x200000d8

08007f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007f94:	f7ff fff0 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b06      	ldr	r3, [pc, #24]	; (8007fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0a1b      	lsrs	r3, r3, #8
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4904      	ldr	r1, [pc, #16]	; (8007fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	f003 031f 	and.w	r3, r3, #31
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	0800cbe4 	.word	0x0800cbe4

08007fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007fc0:	f7ff ffda 	bl	8007f78 <HAL_RCC_GetHCLKFreq>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	0adb      	lsrs	r3, r3, #11
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	4904      	ldr	r1, [pc, #16]	; (8007fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007fd2:	5ccb      	ldrb	r3, [r1, r3]
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	0800cbe4 	.word	0x0800cbe4

08007fe8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007fee:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ff8:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d10c      	bne.n	8008026 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800800c:	4a17      	ldr	r2, [pc, #92]	; (800806c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	4a14      	ldr	r2, [pc, #80]	; (8008068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008016:	68d2      	ldr	r2, [r2, #12]
 8008018:	0a12      	lsrs	r2, r2, #8
 800801a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800801e:	fb02 f303 	mul.w	r3, r2, r3
 8008022:	617b      	str	r3, [r7, #20]
    break;
 8008024:	e00c      	b.n	8008040 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008026:	4a11      	ldr	r2, [pc, #68]	; (800806c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008030:	68d2      	ldr	r2, [r2, #12]
 8008032:	0a12      	lsrs	r2, r2, #8
 8008034:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008038:	fb02 f303 	mul.w	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]
    break;
 800803e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008040:	4b09      	ldr	r3, [pc, #36]	; (8008068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	0e5b      	lsrs	r3, r3, #25
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	3301      	adds	r3, #1
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800805a:	687b      	ldr	r3, [r7, #4]
}
 800805c:	4618      	mov	r0, r3
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	40021000 	.word	0x40021000
 800806c:	00f42400 	.word	0x00f42400

08008070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008078:	2300      	movs	r3, #0
 800807a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800807c:	2300      	movs	r3, #0
 800807e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8098 	beq.w	80081be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800808e:	2300      	movs	r3, #0
 8008090:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008092:	4b43      	ldr	r3, [pc, #268]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10d      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800809e:	4b40      	ldr	r3, [pc, #256]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	4a3f      	ldr	r2, [pc, #252]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a8:	6593      	str	r3, [r2, #88]	; 0x58
 80080aa:	4b3d      	ldr	r3, [pc, #244]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080b6:	2301      	movs	r3, #1
 80080b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080ba:	4b3a      	ldr	r3, [pc, #232]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a39      	ldr	r2, [pc, #228]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080c6:	f7fb fe09 	bl	8003cdc <HAL_GetTick>
 80080ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080cc:	e009      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ce:	f7fb fe05 	bl	8003cdc <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d902      	bls.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	74fb      	strb	r3, [r7, #19]
        break;
 80080e0:	e005      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080e2:	4b30      	ldr	r3, [pc, #192]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0ef      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80080ee:	7cfb      	ldrb	r3, [r7, #19]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d159      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080f4:	4b2a      	ldr	r3, [pc, #168]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01e      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	429a      	cmp	r2, r3
 800810e:	d019      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008110:	4b23      	ldr	r3, [pc, #140]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800811c:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008122:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800812c:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008132:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800813c:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d016      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814e:	f7fb fdc5 	bl	8003cdc <HAL_GetTick>
 8008152:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008154:	e00b      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008156:	f7fb fdc1 	bl	8003cdc <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	f241 3288 	movw	r2, #5000	; 0x1388
 8008164:	4293      	cmp	r3, r2
 8008166:	d902      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	74fb      	strb	r3, [r7, #19]
            break;
 800816c:	e006      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d0ec      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800817c:	7cfb      	ldrb	r3, [r7, #19]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008190:	4903      	ldr	r1, [pc, #12]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008198:	e008      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800819a:	7cfb      	ldrb	r3, [r7, #19]
 800819c:	74bb      	strb	r3, [r7, #18]
 800819e:	e005      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a8:	7cfb      	ldrb	r3, [r7, #19]
 80081aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081ac:	7c7b      	ldrb	r3, [r7, #17]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d105      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081b2:	4ba6      	ldr	r3, [pc, #664]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	4aa5      	ldr	r2, [pc, #660]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081ca:	4ba0      	ldr	r3, [pc, #640]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f023 0203 	bic.w	r2, r3, #3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	499c      	ldr	r1, [pc, #624]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081ec:	4b97      	ldr	r3, [pc, #604]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	f023 020c 	bic.w	r2, r3, #12
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	4994      	ldr	r1, [pc, #592]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800820e:	4b8f      	ldr	r3, [pc, #572]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	498b      	ldr	r1, [pc, #556]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821e:	4313      	orrs	r3, r2
 8008220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008230:	4b86      	ldr	r3, [pc, #536]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008236:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	4983      	ldr	r1, [pc, #524]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008252:	4b7e      	ldr	r3, [pc, #504]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	497a      	ldr	r1, [pc, #488]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008274:	4b75      	ldr	r3, [pc, #468]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	4972      	ldr	r1, [pc, #456]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008296:	4b6d      	ldr	r3, [pc, #436]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	4969      	ldr	r1, [pc, #420]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082b8:	4b64      	ldr	r3, [pc, #400]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	4961      	ldr	r1, [pc, #388]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082da:	4b5c      	ldr	r3, [pc, #368]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	4958      	ldr	r1, [pc, #352]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d015      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082fc:	4b53      	ldr	r3, [pc, #332]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	4950      	ldr	r1, [pc, #320]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800831a:	d105      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800831c:	4b4b      	ldr	r3, [pc, #300]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4a4a      	ldr	r2, [pc, #296]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008330:	2b00      	cmp	r3, #0
 8008332:	d015      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008334:	4b45      	ldr	r3, [pc, #276]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	4942      	ldr	r1, [pc, #264]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008352:	d105      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008354:	4b3d      	ldr	r3, [pc, #244]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a3c      	ldr	r2, [pc, #240]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800835a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800835e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d015      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800836c:	4b37      	ldr	r3, [pc, #220]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008372:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	4934      	ldr	r1, [pc, #208]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800837c:	4313      	orrs	r3, r2
 800837e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800838a:	d105      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800838c:	4b2f      	ldr	r3, [pc, #188]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	4a2e      	ldr	r2, [pc, #184]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008396:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d015      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083a4:	4b29      	ldr	r3, [pc, #164]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	4926      	ldr	r1, [pc, #152]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c2:	d105      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083c4:	4b21      	ldr	r3, [pc, #132]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d015      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083dc:	4b1b      	ldr	r3, [pc, #108]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	4918      	ldr	r1, [pc, #96]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083fa:	d105      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083fc:	4b13      	ldr	r3, [pc, #76]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	4a12      	ldr	r2, [pc, #72]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d015      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008414:	4b0d      	ldr	r3, [pc, #52]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	490a      	ldr	r1, [pc, #40]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008424:	4313      	orrs	r3, r2
 8008426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008432:	d105      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	4a04      	ldr	r2, [pc, #16]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008440:	7cbb      	ldrb	r3, [r7, #18]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40021000 	.word	0x40021000

08008450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e09d      	b.n	800859e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008472:	d009      	beq.n	8008488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	61da      	str	r2, [r3, #28]
 800847a:	e005      	b.n	8008488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fa fea2 	bl	80031ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084c8:	d902      	bls.n	80084d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e002      	b.n	80084d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80084d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80084de:	d007      	beq.n	80084f0 <HAL_SPI_Init+0xa0>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084e8:	d002      	beq.n	80084f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	ea42 0103 	orr.w	r1, r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	f003 0204 	and.w	r2, r3, #4
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	431a      	orrs	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800856c:	ea42 0103 	orr.w	r1, r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69da      	ldr	r2, [r3, #28]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800858c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e16c      	b.n	80088a2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085d6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80085de:	7dbb      	ldrb	r3, [r7, #22]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d00d      	beq.n	8008600 <HAL_SPI_TransmitReceive_DMA+0x58>
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ea:	d106      	bne.n	80085fa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <HAL_SPI_TransmitReceive_DMA+0x52>
 80085f4:	7dbb      	ldrb	r3, [r7, #22]
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d002      	beq.n	8008600 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80085fa:	2302      	movs	r3, #2
 80085fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085fe:	e14b      	b.n	8008898 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d005      	beq.n	8008612 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800860c:	887b      	ldrh	r3, [r7, #2]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008616:	e13f      	b.n	8008898 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b04      	cmp	r3, #4
 8008622:	d003      	beq.n	800862c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2205      	movs	r2, #5
 8008628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	887a      	ldrh	r2, [r7, #2]
 800863c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	887a      	ldrh	r2, [r7, #2]
 8008642:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	887a      	ldrh	r2, [r7, #2]
 800864e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	887a      	ldrh	r2, [r7, #2]
 8008656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008674:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800867e:	d908      	bls.n	8008692 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800868e:	605a      	str	r2, [r3, #4]
 8008690:	e06f      	b.n	8008772 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086a0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ac:	d126      	bne.n	80086fc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10f      	bne.n	80086da <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	085b      	lsrs	r3, r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086d8:	e010      	b.n	80086fc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3301      	adds	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008706:	d134      	bne.n	8008772 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008716:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800871e:	b29b      	uxth	r3, r3
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d111      	bne.n	800874c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008736:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800873e:	b29b      	uxth	r3, r3
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800874a:	e012      	b.n	8008772 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800875a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008762:	b29b      	uxth	r3, r3
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	b29b      	uxth	r3, r3
 8008768:	3301      	adds	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b04      	cmp	r3, #4
 800877c:	d108      	bne.n	8008790 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	4a4a      	ldr	r2, [pc, #296]	; (80088ac <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008784:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878a:	4a49      	ldr	r2, [pc, #292]	; (80088b0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800878c:	62da      	str	r2, [r3, #44]	; 0x2c
 800878e:	e007      	b.n	80087a0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008794:	4a47      	ldr	r2, [pc, #284]	; (80088b4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008796:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879c:	4a46      	ldr	r2, [pc, #280]	; (80088b8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a4:	4a45      	ldr	r2, [pc, #276]	; (80088bc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80087a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ac:	2200      	movs	r2, #0
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	4619      	mov	r1, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80087ca:	f7fd fb43 	bl	8005e54 <HAL_DMA_Start_IT>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00c      	beq.n	80087ee <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d8:	f043 0210 	orr.w	r2, r3, #16
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80087ec:	e054      	b.n	8008898 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0201 	orr.w	r2, r2, #1
 80087fc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	2200      	movs	r2, #0
 8008804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880a:	2200      	movs	r2, #0
 800880c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008812:	2200      	movs	r2, #0
 8008814:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	2200      	movs	r2, #0
 800881c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	4619      	mov	r1, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008834:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008836:	f7fd fb0d 	bl	8005e54 <HAL_DMA_Start_IT>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008844:	f043 0210 	orr.w	r2, r3, #16
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008858:	e01e      	b.n	8008898 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b40      	cmp	r3, #64	; 0x40
 8008866:	d007      	beq.n	8008878 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008876:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0220 	orr.w	r2, r2, #32
 8008886:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0202 	orr.w	r2, r2, #2
 8008896:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	08008c31 	.word	0x08008c31
 80088b0:	08008af9 	.word	0x08008af9
 80088b4:	08008c4d 	.word	0x08008c4d
 80088b8:	08008ba1 	.word	0x08008ba1
 80088bc:	08008c69 	.word	0x08008c69

080088c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10e      	bne.n	8008900 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
    return;
 80088fe:	e0ce      	b.n	8008a9e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <HAL_SPI_IRQHandler+0x5e>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008910:	2b00      	cmp	r3, #0
 8008912:	d004      	beq.n	800891e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
    return;
 800891c:	e0bf      	b.n	8008a9e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <HAL_SPI_IRQHandler+0x7e>
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d105      	bne.n	800893e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80b0 	beq.w	8008a9e <HAL_SPI_IRQHandler+0x1de>
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80aa 	beq.w	8008a9e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d023      	beq.n	800899c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b03      	cmp	r3, #3
 800895e:	d011      	beq.n	8008984 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008964:	f043 0204 	orr.w	r2, r3, #4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	e00b      	b.n	800899c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008984:	2300      	movs	r3, #0
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
        return;
 800899a:	e080      	b.n	8008a9e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d014      	beq.n	80089d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089aa:	f043 0201 	orr.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	f043 0208 	orr.w	r2, r3, #8
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d04f      	beq.n	8008a9c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_SPI_IRQHandler+0x168>
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d034      	beq.n	8008a92 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0203 	bic.w	r2, r2, #3
 8008a36:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d011      	beq.n	8008a64 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <HAL_SPI_IRQHandler+0x1e4>)
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fd fad5 	bl	8005ffc <HAL_DMA_Abort_IT>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d016      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a70:	4a0c      	ldr	r2, [pc, #48]	; (8008aa4 <HAL_SPI_IRQHandler+0x1e4>)
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd fabf 	bl	8005ffc <HAL_DMA_Abort_IT>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008a90:	e003      	b.n	8008a9a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f826 	bl	8008ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a98:	e000      	b.n	8008a9c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008a9a:	bf00      	nop
    return;
 8008a9c:	bf00      	nop
  }
}
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	08008ca9 	.word	0x08008ca9

08008aa8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b04:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b06:	f7fb f8e9 	bl	8003cdc <HAL_GetTick>
 8008b0a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d03c      	beq.n	8008b94 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0220 	bic.w	r2, r2, #32
 8008b28:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <SPI_DMAReceiveCplt+0x56>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b3a:	d108      	bne.n	8008b4e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0203 	bic.w	r2, r2, #3
 8008b4a:	605a      	str	r2, [r3, #4]
 8008b4c:	e007      	b.n	8008b5e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f022 0201 	bic.w	r2, r2, #1
 8008b5c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	2164      	movs	r1, #100	; 0x64
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f9d4 	bl	8008f10 <SPI_EndRxTransaction>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2220      	movs	r2, #32
 8008b72:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff ffa9 	bl	8008ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b92:	e002      	b.n	8008b9a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff ff87 	bl	8008aa8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bae:	f7fb f895 	bl	8003cdc <HAL_GetTick>
 8008bb2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d030      	beq.n	8008c24 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0220 	bic.w	r2, r2, #32
 8008bd0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	2164      	movs	r1, #100	; 0x64
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f9f2 	bl	8008fc0 <SPI_EndRxTxTransaction>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0203 	bic.w	r2, r2, #3
 8008bfc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff ff61 	bl	8008ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c22:	e002      	b.n	8008c2a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7f8 fd31 	bl	800168c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff ff3c 	bl	8008abc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c44:	bf00      	nop
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff ff38 	bl	8008ad0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c60:	bf00      	nop
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0203 	bic.w	r2, r2, #3
 8008c84:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8a:	f043 0210 	orr.w	r2, r3, #16
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff ff22 	bl	8008ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f7ff ff0d 	bl	8008ae4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cca:	bf00      	nop
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ce4:	f7fa fffa 	bl	8003cdc <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cf4:	f7fa fff2 	bl	8003cdc <HAL_GetTick>
 8008cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cfa:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	015b      	lsls	r3, r3, #5
 8008d00:	0d1b      	lsrs	r3, r3, #20
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	fb02 f303 	mul.w	r3, r2, r3
 8008d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d0a:	e054      	b.n	8008db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d050      	beq.n	8008db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d14:	f7fa ffe2 	bl	8003cdc <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d902      	bls.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d13d      	bne.n	8008da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d42:	d111      	bne.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4c:	d004      	beq.n	8008d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d56:	d107      	bne.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d70:	d10f      	bne.n	8008d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e017      	b.n	8008dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	bf0c      	ite	eq
 8008dc6:	2301      	moveq	r3, #1
 8008dc8:	2300      	movne	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d19b      	bne.n	8008d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200000d8 	.word	0x200000d8

08008de4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008df6:	f7fa ff71 	bl	8003cdc <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	4413      	add	r3, r2
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e06:	f7fa ff69 	bl	8003cdc <HAL_GetTick>
 8008e0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e14:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	00da      	lsls	r2, r3, #3
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	0d1b      	lsrs	r3, r3, #20
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
 8008e2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e2c:	e060      	b.n	8008ef0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008e34:	d107      	bne.n	8008e46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d050      	beq.n	8008ef0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e4e:	f7fa ff45 	bl	8003cdc <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d902      	bls.n	8008e64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d13d      	bne.n	8008ee0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e7c:	d111      	bne.n	8008ea2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e86:	d004      	beq.n	8008e92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e90:	d107      	bne.n	8008ea2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ea0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eaa:	d10f      	bne.n	8008ecc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e010      	b.n	8008f02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d196      	bne.n	8008e2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3728      	adds	r7, #40	; 0x28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200000d8 	.word	0x200000d8

08008f10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f24:	d111      	bne.n	8008f4a <SPI_EndRxTransaction+0x3a>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2e:	d004      	beq.n	8008f3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f38:	d107      	bne.n	8008f4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2200      	movs	r2, #0
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff febd 	bl	8008cd4 <SPI_WaitFlagStateUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f64:	f043 0220 	orr.w	r2, r3, #32
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e023      	b.n	8008fb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f78:	d11d      	bne.n	8008fb6 <SPI_EndRxTransaction+0xa6>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f82:	d004      	beq.n	8008f8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8c:	d113      	bne.n	8008fb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ff22 	bl	8008de4 <SPI_WaitFifoStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e000      	b.n	8008fb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff ff03 	bl	8008de4 <SPI_WaitFifoStateUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe8:	f043 0220 	orr.w	r2, r3, #32
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e027      	b.n	8009044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2180      	movs	r1, #128	; 0x80
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fe68 	bl	8008cd4 <SPI_WaitFlagStateUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d007      	beq.n	800901a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900e:	f043 0220 	orr.w	r2, r3, #32
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e014      	b.n	8009044 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fedc 	bl	8008de4 <SPI_WaitFifoStateUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009036:	f043 0220 	orr.w	r2, r3, #32
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e000      	b.n	8009044 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e049      	b.n	80090f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fa fc28 	bl	80038c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3304      	adds	r3, #4
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f000 fe74 	bl	8009d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6a1a      	ldr	r2, [r3, #32]
 8009108:	f241 1311 	movw	r3, #4369	; 0x1111
 800910c:	4013      	ands	r3, r2
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10f      	bne.n	8009132 <HAL_TIM_Base_Stop+0x38>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6a1a      	ldr	r2, [r3, #32]
 8009118:	f244 4344 	movw	r3, #17476	; 0x4444
 800911c:	4013      	ands	r3, r2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <HAL_TIM_Base_Stop+0x38>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0201 	bic.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b01      	cmp	r3, #1
 800915a:	d001      	beq.n	8009160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e04a      	b.n	80091f6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2202      	movs	r2, #2
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0201 	orr.w	r2, r2, #1
 8009176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a21      	ldr	r2, [pc, #132]	; (8009204 <HAL_TIM_Base_Start_IT+0xbc>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d018      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x6c>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918a:	d013      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x6c>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <HAL_TIM_Base_Start_IT+0xc0>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00e      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x6c>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1c      	ldr	r2, [pc, #112]	; (800920c <HAL_TIM_Base_Start_IT+0xc4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x6c>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1a      	ldr	r2, [pc, #104]	; (8009210 <HAL_TIM_Base_Start_IT+0xc8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x6c>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a19      	ldr	r2, [pc, #100]	; (8009214 <HAL_TIM_Base_Start_IT+0xcc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d115      	bne.n	80091e0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	4b17      	ldr	r3, [pc, #92]	; (8009218 <HAL_TIM_Base_Start_IT+0xd0>)
 80091bc:	4013      	ands	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b06      	cmp	r3, #6
 80091c4:	d015      	beq.n	80091f2 <HAL_TIM_Base_Start_IT+0xaa>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091cc:	d011      	beq.n	80091f2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0201 	orr.w	r2, r2, #1
 80091dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091de:	e008      	b.n	80091f2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e000      	b.n	80091f4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40012c00 	.word	0x40012c00
 8009208:	40000400 	.word	0x40000400
 800920c:	40000800 	.word	0x40000800
 8009210:	40013400 	.word	0x40013400
 8009214:	40014000 	.word	0x40014000
 8009218:	00010007 	.word	0x00010007

0800921c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e049      	b.n	80092c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f841 	bl	80092ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f000 fd8c 	bl	8009d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d109      	bne.n	8009304 <HAL_TIM_PWM_Start+0x24>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	bf14      	ite	ne
 80092fc:	2301      	movne	r3, #1
 80092fe:	2300      	moveq	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	e03c      	b.n	800937e <HAL_TIM_PWM_Start+0x9e>
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d109      	bne.n	800931e <HAL_TIM_PWM_Start+0x3e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b01      	cmp	r3, #1
 8009314:	bf14      	ite	ne
 8009316:	2301      	movne	r3, #1
 8009318:	2300      	moveq	r3, #0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	e02f      	b.n	800937e <HAL_TIM_PWM_Start+0x9e>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b08      	cmp	r3, #8
 8009322:	d109      	bne.n	8009338 <HAL_TIM_PWM_Start+0x58>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	bf14      	ite	ne
 8009330:	2301      	movne	r3, #1
 8009332:	2300      	moveq	r3, #0
 8009334:	b2db      	uxtb	r3, r3
 8009336:	e022      	b.n	800937e <HAL_TIM_PWM_Start+0x9e>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2b0c      	cmp	r3, #12
 800933c:	d109      	bne.n	8009352 <HAL_TIM_PWM_Start+0x72>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b01      	cmp	r3, #1
 8009348:	bf14      	ite	ne
 800934a:	2301      	movne	r3, #1
 800934c:	2300      	moveq	r3, #0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	e015      	b.n	800937e <HAL_TIM_PWM_Start+0x9e>
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	2b10      	cmp	r3, #16
 8009356:	d109      	bne.n	800936c <HAL_TIM_PWM_Start+0x8c>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b01      	cmp	r3, #1
 8009362:	bf14      	ite	ne
 8009364:	2301      	movne	r3, #1
 8009366:	2300      	moveq	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	e008      	b.n	800937e <HAL_TIM_PWM_Start+0x9e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e097      	b.n	80094b6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <HAL_TIM_PWM_Start+0xb6>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009394:	e023      	b.n	80093de <HAL_TIM_PWM_Start+0xfe>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b04      	cmp	r3, #4
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_PWM_Start+0xc6>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a4:	e01b      	b.n	80093de <HAL_TIM_PWM_Start+0xfe>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d104      	bne.n	80093b6 <HAL_TIM_PWM_Start+0xd6>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093b4:	e013      	b.n	80093de <HAL_TIM_PWM_Start+0xfe>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b0c      	cmp	r3, #12
 80093ba:	d104      	bne.n	80093c6 <HAL_TIM_PWM_Start+0xe6>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093c4:	e00b      	b.n	80093de <HAL_TIM_PWM_Start+0xfe>
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b10      	cmp	r3, #16
 80093ca:	d104      	bne.n	80093d6 <HAL_TIM_PWM_Start+0xf6>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2202      	movs	r2, #2
 80093d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093d4:	e003      	b.n	80093de <HAL_TIM_PWM_Start+0xfe>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2201      	movs	r2, #1
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 f8e8 	bl	800a5bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a33      	ldr	r2, [pc, #204]	; (80094c0 <HAL_TIM_PWM_Start+0x1e0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d013      	beq.n	800941e <HAL_TIM_PWM_Start+0x13e>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a32      	ldr	r2, [pc, #200]	; (80094c4 <HAL_TIM_PWM_Start+0x1e4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00e      	beq.n	800941e <HAL_TIM_PWM_Start+0x13e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a30      	ldr	r2, [pc, #192]	; (80094c8 <HAL_TIM_PWM_Start+0x1e8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d009      	beq.n	800941e <HAL_TIM_PWM_Start+0x13e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a2f      	ldr	r2, [pc, #188]	; (80094cc <HAL_TIM_PWM_Start+0x1ec>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d004      	beq.n	800941e <HAL_TIM_PWM_Start+0x13e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a2d      	ldr	r2, [pc, #180]	; (80094d0 <HAL_TIM_PWM_Start+0x1f0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d101      	bne.n	8009422 <HAL_TIM_PWM_Start+0x142>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <HAL_TIM_PWM_Start+0x144>
 8009422:	2300      	movs	r3, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d007      	beq.n	8009438 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009436:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a20      	ldr	r2, [pc, #128]	; (80094c0 <HAL_TIM_PWM_Start+0x1e0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d018      	beq.n	8009474 <HAL_TIM_PWM_Start+0x194>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800944a:	d013      	beq.n	8009474 <HAL_TIM_PWM_Start+0x194>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <HAL_TIM_PWM_Start+0x1f4>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00e      	beq.n	8009474 <HAL_TIM_PWM_Start+0x194>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a1f      	ldr	r2, [pc, #124]	; (80094d8 <HAL_TIM_PWM_Start+0x1f8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_TIM_PWM_Start+0x194>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a17      	ldr	r2, [pc, #92]	; (80094c4 <HAL_TIM_PWM_Start+0x1e4>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_TIM_PWM_Start+0x194>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a16      	ldr	r2, [pc, #88]	; (80094c8 <HAL_TIM_PWM_Start+0x1e8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d115      	bne.n	80094a0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	4b18      	ldr	r3, [pc, #96]	; (80094dc <HAL_TIM_PWM_Start+0x1fc>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b06      	cmp	r3, #6
 8009484:	d015      	beq.n	80094b2 <HAL_TIM_PWM_Start+0x1d2>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800948c:	d011      	beq.n	80094b2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f042 0201 	orr.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949e:	e008      	b.n	80094b2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e000      	b.n	80094b4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	40012c00 	.word	0x40012c00
 80094c4:	40013400 	.word	0x40013400
 80094c8:	40014000 	.word	0x40014000
 80094cc:	40014400 	.word	0x40014400
 80094d0:	40014800 	.word	0x40014800
 80094d4:	40000400 	.word	0x40000400
 80094d8:	40000800 	.word	0x40000800
 80094dc:	00010007 	.word	0x00010007

080094e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2200      	movs	r2, #0
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 f862 	bl	800a5bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a3e      	ldr	r2, [pc, #248]	; (80095f8 <HAL_TIM_PWM_Stop+0x118>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d013      	beq.n	800952a <HAL_TIM_PWM_Stop+0x4a>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a3d      	ldr	r2, [pc, #244]	; (80095fc <HAL_TIM_PWM_Stop+0x11c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d00e      	beq.n	800952a <HAL_TIM_PWM_Stop+0x4a>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a3b      	ldr	r2, [pc, #236]	; (8009600 <HAL_TIM_PWM_Stop+0x120>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d009      	beq.n	800952a <HAL_TIM_PWM_Stop+0x4a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a3a      	ldr	r2, [pc, #232]	; (8009604 <HAL_TIM_PWM_Stop+0x124>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d004      	beq.n	800952a <HAL_TIM_PWM_Stop+0x4a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a38      	ldr	r2, [pc, #224]	; (8009608 <HAL_TIM_PWM_Stop+0x128>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d101      	bne.n	800952e <HAL_TIM_PWM_Stop+0x4e>
 800952a:	2301      	movs	r3, #1
 800952c:	e000      	b.n	8009530 <HAL_TIM_PWM_Stop+0x50>
 800952e:	2300      	movs	r3, #0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d017      	beq.n	8009564 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	f241 1311 	movw	r3, #4369	; 0x1111
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10f      	bne.n	8009564 <HAL_TIM_PWM_Stop+0x84>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6a1a      	ldr	r2, [r3, #32]
 800954a:	f244 4344 	movw	r3, #17476	; 0x4444
 800954e:	4013      	ands	r3, r2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d107      	bne.n	8009564 <HAL_TIM_PWM_Stop+0x84>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009562:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a1a      	ldr	r2, [r3, #32]
 800956a:	f241 1311 	movw	r3, #4369	; 0x1111
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10f      	bne.n	8009594 <HAL_TIM_PWM_Stop+0xb4>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a1a      	ldr	r2, [r3, #32]
 800957a:	f244 4344 	movw	r3, #17476	; 0x4444
 800957e:	4013      	ands	r3, r2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d107      	bne.n	8009594 <HAL_TIM_PWM_Stop+0xb4>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0201 	bic.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d104      	bne.n	80095a4 <HAL_TIM_PWM_Stop+0xc4>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a2:	e023      	b.n	80095ec <HAL_TIM_PWM_Stop+0x10c>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d104      	bne.n	80095b4 <HAL_TIM_PWM_Stop+0xd4>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095b2:	e01b      	b.n	80095ec <HAL_TIM_PWM_Stop+0x10c>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d104      	bne.n	80095c4 <HAL_TIM_PWM_Stop+0xe4>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c2:	e013      	b.n	80095ec <HAL_TIM_PWM_Stop+0x10c>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b0c      	cmp	r3, #12
 80095c8:	d104      	bne.n	80095d4 <HAL_TIM_PWM_Stop+0xf4>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095d2:	e00b      	b.n	80095ec <HAL_TIM_PWM_Stop+0x10c>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b10      	cmp	r3, #16
 80095d8:	d104      	bne.n	80095e4 <HAL_TIM_PWM_Stop+0x104>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095e2:	e003      	b.n	80095ec <HAL_TIM_PWM_Stop+0x10c>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	40012c00 	.word	0x40012c00
 80095fc:	40013400 	.word	0x40013400
 8009600:	40014000 	.word	0x40014000
 8009604:	40014400 	.word	0x40014400
 8009608:	40014800 	.word	0x40014800

0800960c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b02      	cmp	r3, #2
 8009620:	d122      	bne.n	8009668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b02      	cmp	r3, #2
 800962e:	d11b      	bne.n	8009668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f06f 0202 	mvn.w	r2, #2
 8009638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	f003 0303 	and.w	r3, r3, #3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fb74 	bl	8009d3c <HAL_TIM_IC_CaptureCallback>
 8009654:	e005      	b.n	8009662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fb66 	bl	8009d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fb77 	bl	8009d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b04      	cmp	r3, #4
 8009674:	d122      	bne.n	80096bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b04      	cmp	r3, #4
 8009682:	d11b      	bne.n	80096bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f06f 0204 	mvn.w	r2, #4
 800968c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fb4a 	bl	8009d3c <HAL_TIM_IC_CaptureCallback>
 80096a8:	e005      	b.n	80096b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fb3c 	bl	8009d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb4d 	bl	8009d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	d122      	bne.n	8009710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f003 0308 	and.w	r3, r3, #8
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d11b      	bne.n	8009710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f06f 0208 	mvn.w	r2, #8
 80096e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2204      	movs	r2, #4
 80096e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fb20 	bl	8009d3c <HAL_TIM_IC_CaptureCallback>
 80096fc:	e005      	b.n	800970a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fb12 	bl	8009d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fb23 	bl	8009d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0310 	and.w	r3, r3, #16
 800971a:	2b10      	cmp	r3, #16
 800971c:	d122      	bne.n	8009764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b10      	cmp	r3, #16
 800972a:	d11b      	bne.n	8009764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f06f 0210 	mvn.w	r2, #16
 8009734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2208      	movs	r2, #8
 800973a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 faf6 	bl	8009d3c <HAL_TIM_IC_CaptureCallback>
 8009750:	e005      	b.n	800975e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fae8 	bl	8009d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 faf9 	bl	8009d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b01      	cmp	r3, #1
 8009770:	d10e      	bne.n	8009790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b01      	cmp	r3, #1
 800977e:	d107      	bne.n	8009790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f06f 0201 	mvn.w	r2, #1
 8009788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7f8 f878 	bl	8001880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	d10e      	bne.n	80097bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a8:	2b80      	cmp	r3, #128	; 0x80
 80097aa:	d107      	bne.n	80097bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 f964 	bl	800aa84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ca:	d10e      	bne.n	80097ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d6:	2b80      	cmp	r3, #128	; 0x80
 80097d8:	d107      	bne.n	80097ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f957 	bl	800aa98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d10e      	bne.n	8009816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	d107      	bne.n	8009816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800980e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 faa7 	bl	8009d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b20      	cmp	r3, #32
 8009822:	d10e      	bne.n	8009842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b20      	cmp	r3, #32
 8009830:	d107      	bne.n	8009842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f06f 0220 	mvn.w	r2, #32
 800983a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 f917 	bl	800aa70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009850:	d10f      	bne.n	8009872 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800985c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009860:	d107      	bne.n	8009872 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800986a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 f91d 	bl	800aaac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800987c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009880:	d10f      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009890:	d107      	bne.n	80098a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800989a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 f90f 	bl	800aac0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098b0:	d10f      	bne.n	80098d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098c0:	d107      	bne.n	80098d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80098ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 f901 	bl	800aad4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098e0:	d10f      	bne.n	8009902 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098f0:	d107      	bne.n	8009902 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80098fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 f8f3 	bl	800aae8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009926:	2302      	movs	r3, #2
 8009928:	e0ff      	b.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b14      	cmp	r3, #20
 8009936:	f200 80f0 	bhi.w	8009b1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800993a:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009995 	.word	0x08009995
 8009944:	08009b1b 	.word	0x08009b1b
 8009948:	08009b1b 	.word	0x08009b1b
 800994c:	08009b1b 	.word	0x08009b1b
 8009950:	080099d5 	.word	0x080099d5
 8009954:	08009b1b 	.word	0x08009b1b
 8009958:	08009b1b 	.word	0x08009b1b
 800995c:	08009b1b 	.word	0x08009b1b
 8009960:	08009a17 	.word	0x08009a17
 8009964:	08009b1b 	.word	0x08009b1b
 8009968:	08009b1b 	.word	0x08009b1b
 800996c:	08009b1b 	.word	0x08009b1b
 8009970:	08009a57 	.word	0x08009a57
 8009974:	08009b1b 	.word	0x08009b1b
 8009978:	08009b1b 	.word	0x08009b1b
 800997c:	08009b1b 	.word	0x08009b1b
 8009980:	08009a99 	.word	0x08009a99
 8009984:	08009b1b 	.word	0x08009b1b
 8009988:	08009b1b 	.word	0x08009b1b
 800998c:	08009b1b 	.word	0x08009b1b
 8009990:	08009ad9 	.word	0x08009ad9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 fa7c 	bl	8009e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0208 	orr.w	r2, r2, #8
 80099ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0204 	bic.w	r2, r2, #4
 80099be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6999      	ldr	r1, [r3, #24]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691a      	ldr	r2, [r3, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	619a      	str	r2, [r3, #24]
      break;
 80099d2:	e0a5      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 faec 	bl	8009fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	699a      	ldr	r2, [r3, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6999      	ldr	r1, [r3, #24]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	021a      	lsls	r2, r3, #8
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	619a      	str	r2, [r3, #24]
      break;
 8009a14:	e084      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fb55 	bl	800a0cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69da      	ldr	r2, [r3, #28]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f042 0208 	orr.w	r2, r2, #8
 8009a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69da      	ldr	r2, [r3, #28]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0204 	bic.w	r2, r2, #4
 8009a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69d9      	ldr	r1, [r3, #28]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	61da      	str	r2, [r3, #28]
      break;
 8009a54:	e064      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fbbd 	bl	800a1dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69d9      	ldr	r1, [r3, #28]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	021a      	lsls	r2, r3, #8
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	61da      	str	r2, [r3, #28]
      break;
 8009a96:	e043      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fc26 	bl	800a2f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0208 	orr.w	r2, r2, #8
 8009ab2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0204 	bic.w	r2, r2, #4
 8009ac2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	691a      	ldr	r2, [r3, #16]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009ad6:	e023      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68b9      	ldr	r1, [r7, #8]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fc6a 	bl	800a3b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009af2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b02:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	021a      	lsls	r2, r3, #8
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009b18:	e002      	b.n	8009b20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop

08009b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_TIM_ConfigClockSource+0x1c>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e0de      	b.n	8009d0e <HAL_TIM_ConfigClockSource+0x1da>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009b6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a63      	ldr	r2, [pc, #396]	; (8009d18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f000 80a9 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009b90:	4a61      	ldr	r2, [pc, #388]	; (8009d18 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	f200 80ae 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009b98:	4a60      	ldr	r2, [pc, #384]	; (8009d1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	f000 80a1 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009ba0:	4a5e      	ldr	r2, [pc, #376]	; (8009d1c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f200 80a6 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009ba8:	4a5d      	ldr	r2, [pc, #372]	; (8009d20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	f000 8099 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bb0:	4a5b      	ldr	r2, [pc, #364]	; (8009d20 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	f200 809e 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bb8:	4a5a      	ldr	r2, [pc, #360]	; (8009d24 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	f000 8091 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bc0:	4a58      	ldr	r2, [pc, #352]	; (8009d24 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	f200 8096 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bcc:	f000 8089 	beq.w	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009bd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009bd4:	f200 808e 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bdc:	d03e      	beq.n	8009c5c <HAL_TIM_ConfigClockSource+0x128>
 8009bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be2:	f200 8087 	bhi.w	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	f000 8086 	beq.w	8009cfa <HAL_TIM_ConfigClockSource+0x1c6>
 8009bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf2:	d87f      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bf4:	2b70      	cmp	r3, #112	; 0x70
 8009bf6:	d01a      	beq.n	8009c2e <HAL_TIM_ConfigClockSource+0xfa>
 8009bf8:	2b70      	cmp	r3, #112	; 0x70
 8009bfa:	d87b      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009bfc:	2b60      	cmp	r3, #96	; 0x60
 8009bfe:	d050      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0x16e>
 8009c00:	2b60      	cmp	r3, #96	; 0x60
 8009c02:	d877      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009c04:	2b50      	cmp	r3, #80	; 0x50
 8009c06:	d03c      	beq.n	8009c82 <HAL_TIM_ConfigClockSource+0x14e>
 8009c08:	2b50      	cmp	r3, #80	; 0x50
 8009c0a:	d873      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	d058      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x18e>
 8009c10:	2b40      	cmp	r3, #64	; 0x40
 8009c12:	d86f      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009c14:	2b30      	cmp	r3, #48	; 0x30
 8009c16:	d064      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009c18:	2b30      	cmp	r3, #48	; 0x30
 8009c1a:	d86b      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	d060      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d867      	bhi.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d05c      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	d05a      	beq.n	8009ce2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009c2c:	e062      	b.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6899      	ldr	r1, [r3, #8]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f000 fc9d 	bl	800a57c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	609a      	str	r2, [r3, #8]
      break;
 8009c5a:	e04f      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6818      	ldr	r0, [r3, #0]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	6899      	ldr	r1, [r3, #8]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f000 fc86 	bl	800a57c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c7e:	609a      	str	r2, [r3, #8]
      break;
 8009c80:	e03c      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	6859      	ldr	r1, [r3, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f000 fbf8 	bl	800a484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2150      	movs	r1, #80	; 0x50
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fc51 	bl	800a542 <TIM_ITRx_SetConfig>
      break;
 8009ca0:	e02c      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 fc17 	bl	800a4e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2160      	movs	r1, #96	; 0x60
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 fc41 	bl	800a542 <TIM_ITRx_SetConfig>
      break;
 8009cc0:	e01c      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6859      	ldr	r1, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f000 fbd8 	bl	800a484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2140      	movs	r1, #64	; 0x40
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fc31 	bl	800a542 <TIM_ITRx_SetConfig>
      break;
 8009ce0:	e00c      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f000 fc28 	bl	800a542 <TIM_ITRx_SetConfig>
      break;
 8009cf2:	e003      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cf8:	e000      	b.n	8009cfc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	00100070 	.word	0x00100070
 8009d1c:	00100040 	.word	0x00100040
 8009d20:	00100030 	.word	0x00100030
 8009d24:	00100020 	.word	0x00100020

08009d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a3c      	ldr	r2, [pc, #240]	; (8009e7c <TIM_Base_SetConfig+0x104>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00f      	beq.n	8009db0 <TIM_Base_SetConfig+0x38>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d96:	d00b      	beq.n	8009db0 <TIM_Base_SetConfig+0x38>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a39      	ldr	r2, [pc, #228]	; (8009e80 <TIM_Base_SetConfig+0x108>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d007      	beq.n	8009db0 <TIM_Base_SetConfig+0x38>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a38      	ldr	r2, [pc, #224]	; (8009e84 <TIM_Base_SetConfig+0x10c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_Base_SetConfig+0x38>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a37      	ldr	r2, [pc, #220]	; (8009e88 <TIM_Base_SetConfig+0x110>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d108      	bne.n	8009dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a2d      	ldr	r2, [pc, #180]	; (8009e7c <TIM_Base_SetConfig+0x104>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01b      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd0:	d017      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a2a      	ldr	r2, [pc, #168]	; (8009e80 <TIM_Base_SetConfig+0x108>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d013      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a29      	ldr	r2, [pc, #164]	; (8009e84 <TIM_Base_SetConfig+0x10c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00f      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a28      	ldr	r2, [pc, #160]	; (8009e88 <TIM_Base_SetConfig+0x110>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00b      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a27      	ldr	r2, [pc, #156]	; (8009e8c <TIM_Base_SetConfig+0x114>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d007      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a26      	ldr	r2, [pc, #152]	; (8009e90 <TIM_Base_SetConfig+0x118>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d003      	beq.n	8009e02 <TIM_Base_SetConfig+0x8a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a25      	ldr	r2, [pc, #148]	; (8009e94 <TIM_Base_SetConfig+0x11c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d108      	bne.n	8009e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a10      	ldr	r2, [pc, #64]	; (8009e7c <TIM_Base_SetConfig+0x104>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00f      	beq.n	8009e60 <TIM_Base_SetConfig+0xe8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <TIM_Base_SetConfig+0x110>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00b      	beq.n	8009e60 <TIM_Base_SetConfig+0xe8>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a10      	ldr	r2, [pc, #64]	; (8009e8c <TIM_Base_SetConfig+0x114>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d007      	beq.n	8009e60 <TIM_Base_SetConfig+0xe8>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a0f      	ldr	r2, [pc, #60]	; (8009e90 <TIM_Base_SetConfig+0x118>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d003      	beq.n	8009e60 <TIM_Base_SetConfig+0xe8>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a0e      	ldr	r2, [pc, #56]	; (8009e94 <TIM_Base_SetConfig+0x11c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d103      	bne.n	8009e68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	691a      	ldr	r2, [r3, #16]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	615a      	str	r2, [r3, #20]
}
 8009e6e:	bf00      	nop
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	40012c00 	.word	0x40012c00
 8009e80:	40000400 	.word	0x40000400
 8009e84:	40000800 	.word	0x40000800
 8009e88:	40013400 	.word	0x40013400
 8009e8c:	40014000 	.word	0x40014000
 8009e90:	40014400 	.word	0x40014400
 8009e94:	40014800 	.word	0x40014800

08009e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0302 	bic.w	r3, r3, #2
 8009ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a2c      	ldr	r2, [pc, #176]	; (8009fa4 <TIM_OC1_SetConfig+0x10c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00f      	beq.n	8009f18 <TIM_OC1_SetConfig+0x80>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a2b      	ldr	r2, [pc, #172]	; (8009fa8 <TIM_OC1_SetConfig+0x110>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <TIM_OC1_SetConfig+0x80>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a2a      	ldr	r2, [pc, #168]	; (8009fac <TIM_OC1_SetConfig+0x114>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d007      	beq.n	8009f18 <TIM_OC1_SetConfig+0x80>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a29      	ldr	r2, [pc, #164]	; (8009fb0 <TIM_OC1_SetConfig+0x118>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_OC1_SetConfig+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a28      	ldr	r2, [pc, #160]	; (8009fb4 <TIM_OC1_SetConfig+0x11c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d10c      	bne.n	8009f32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f023 0308 	bic.w	r3, r3, #8
 8009f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f023 0304 	bic.w	r3, r3, #4
 8009f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a1b      	ldr	r2, [pc, #108]	; (8009fa4 <TIM_OC1_SetConfig+0x10c>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00f      	beq.n	8009f5a <TIM_OC1_SetConfig+0xc2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a1a      	ldr	r2, [pc, #104]	; (8009fa8 <TIM_OC1_SetConfig+0x110>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00b      	beq.n	8009f5a <TIM_OC1_SetConfig+0xc2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a19      	ldr	r2, [pc, #100]	; (8009fac <TIM_OC1_SetConfig+0x114>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d007      	beq.n	8009f5a <TIM_OC1_SetConfig+0xc2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <TIM_OC1_SetConfig+0x118>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_OC1_SetConfig+0xc2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <TIM_OC1_SetConfig+0x11c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d111      	bne.n	8009f7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	621a      	str	r2, [r3, #32]
}
 8009f98:	bf00      	nop
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	40012c00 	.word	0x40012c00
 8009fa8:	40013400 	.word	0x40013400
 8009fac:	40014000 	.word	0x40014000
 8009fb0:	40014400 	.word	0x40014400
 8009fb4:	40014800 	.word	0x40014800

08009fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f023 0210 	bic.w	r2, r3, #16
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f023 0320 	bic.w	r3, r3, #32
 800a006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	011b      	lsls	r3, r3, #4
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a28      	ldr	r2, [pc, #160]	; (800a0b8 <TIM_OC2_SetConfig+0x100>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC2_SetConfig+0x6c>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a27      	ldr	r2, [pc, #156]	; (800a0bc <TIM_OC2_SetConfig+0x104>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d10d      	bne.n	800a040 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a02a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a03e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a1d      	ldr	r2, [pc, #116]	; (800a0b8 <TIM_OC2_SetConfig+0x100>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00f      	beq.n	800a068 <TIM_OC2_SetConfig+0xb0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1c      	ldr	r2, [pc, #112]	; (800a0bc <TIM_OC2_SetConfig+0x104>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00b      	beq.n	800a068 <TIM_OC2_SetConfig+0xb0>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a1b      	ldr	r2, [pc, #108]	; (800a0c0 <TIM_OC2_SetConfig+0x108>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d007      	beq.n	800a068 <TIM_OC2_SetConfig+0xb0>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <TIM_OC2_SetConfig+0x10c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_OC2_SetConfig+0xb0>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a19      	ldr	r2, [pc, #100]	; (800a0c8 <TIM_OC2_SetConfig+0x110>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d113      	bne.n	800a090 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a06e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40012c00 	.word	0x40012c00
 800a0bc:	40013400 	.word	0x40013400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	40014400 	.word	0x40014400
 800a0c8:	40014800 	.word	0x40014800

0800a0cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0303 	bic.w	r3, r3, #3
 800a106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	021b      	lsls	r3, r3, #8
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a27      	ldr	r2, [pc, #156]	; (800a1c8 <TIM_OC3_SetConfig+0xfc>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d003      	beq.n	800a136 <TIM_OC3_SetConfig+0x6a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a26      	ldr	r2, [pc, #152]	; (800a1cc <TIM_OC3_SetConfig+0x100>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d10d      	bne.n	800a152 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a13c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1c      	ldr	r2, [pc, #112]	; (800a1c8 <TIM_OC3_SetConfig+0xfc>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00f      	beq.n	800a17a <TIM_OC3_SetConfig+0xae>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a1b      	ldr	r2, [pc, #108]	; (800a1cc <TIM_OC3_SetConfig+0x100>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00b      	beq.n	800a17a <TIM_OC3_SetConfig+0xae>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a1a      	ldr	r2, [pc, #104]	; (800a1d0 <TIM_OC3_SetConfig+0x104>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d007      	beq.n	800a17a <TIM_OC3_SetConfig+0xae>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a19      	ldr	r2, [pc, #100]	; (800a1d4 <TIM_OC3_SetConfig+0x108>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d003      	beq.n	800a17a <TIM_OC3_SetConfig+0xae>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a18      	ldr	r2, [pc, #96]	; (800a1d8 <TIM_OC3_SetConfig+0x10c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d113      	bne.n	800a1a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	4313      	orrs	r3, r2
 800a194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	621a      	str	r2, [r3, #32]
}
 800a1bc:	bf00      	nop
 800a1be:	371c      	adds	r7, #28
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	40012c00 	.word	0x40012c00
 800a1cc:	40013400 	.word	0x40013400
 800a1d0:	40014000 	.word	0x40014000
 800a1d4:	40014400 	.word	0x40014400
 800a1d8:	40014800 	.word	0x40014800

0800a1dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a20a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	021b      	lsls	r3, r3, #8
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	4313      	orrs	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a22a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	031b      	lsls	r3, r3, #12
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	4313      	orrs	r3, r2
 800a236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a28      	ldr	r2, [pc, #160]	; (800a2dc <TIM_OC4_SetConfig+0x100>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d003      	beq.n	800a248 <TIM_OC4_SetConfig+0x6c>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a27      	ldr	r2, [pc, #156]	; (800a2e0 <TIM_OC4_SetConfig+0x104>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d10d      	bne.n	800a264 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	031b      	lsls	r3, r3, #12
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a1d      	ldr	r2, [pc, #116]	; (800a2dc <TIM_OC4_SetConfig+0x100>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00f      	beq.n	800a28c <TIM_OC4_SetConfig+0xb0>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <TIM_OC4_SetConfig+0x104>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00b      	beq.n	800a28c <TIM_OC4_SetConfig+0xb0>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <TIM_OC4_SetConfig+0x108>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_OC4_SetConfig+0xb0>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a1a      	ldr	r2, [pc, #104]	; (800a2e8 <TIM_OC4_SetConfig+0x10c>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_OC4_SetConfig+0xb0>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a19      	ldr	r2, [pc, #100]	; (800a2ec <TIM_OC4_SetConfig+0x110>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d113      	bne.n	800a2b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a292:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a29a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	019b      	lsls	r3, r3, #6
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	019b      	lsls	r3, r3, #6
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	621a      	str	r2, [r3, #32]
}
 800a2ce:	bf00      	nop
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	40012c00 	.word	0x40012c00
 800a2e0:	40013400 	.word	0x40013400
 800a2e4:	40014000 	.word	0x40014000
 800a2e8:	40014400 	.word	0x40014400
 800a2ec:	40014800 	.word	0x40014800

0800a2f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a17      	ldr	r2, [pc, #92]	; (800a3a4 <TIM_OC5_SetConfig+0xb4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d00f      	beq.n	800a36a <TIM_OC5_SetConfig+0x7a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <TIM_OC5_SetConfig+0xb8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d00b      	beq.n	800a36a <TIM_OC5_SetConfig+0x7a>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a15      	ldr	r2, [pc, #84]	; (800a3ac <TIM_OC5_SetConfig+0xbc>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d007      	beq.n	800a36a <TIM_OC5_SetConfig+0x7a>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a14      	ldr	r2, [pc, #80]	; (800a3b0 <TIM_OC5_SetConfig+0xc0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d003      	beq.n	800a36a <TIM_OC5_SetConfig+0x7a>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a13      	ldr	r2, [pc, #76]	; (800a3b4 <TIM_OC5_SetConfig+0xc4>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d109      	bne.n	800a37e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	621a      	str	r2, [r3, #32]
}
 800a398:	bf00      	nop
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	40012c00 	.word	0x40012c00
 800a3a8:	40013400 	.word	0x40013400
 800a3ac:	40014000 	.word	0x40014000
 800a3b0:	40014400 	.word	0x40014400
 800a3b4:	40014800 	.word	0x40014800

0800a3b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	021b      	lsls	r3, r3, #8
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	4313      	orrs	r3, r2
 800a40a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a18      	ldr	r2, [pc, #96]	; (800a470 <TIM_OC6_SetConfig+0xb8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d00f      	beq.n	800a434 <TIM_OC6_SetConfig+0x7c>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a17      	ldr	r2, [pc, #92]	; (800a474 <TIM_OC6_SetConfig+0xbc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d00b      	beq.n	800a434 <TIM_OC6_SetConfig+0x7c>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a16      	ldr	r2, [pc, #88]	; (800a478 <TIM_OC6_SetConfig+0xc0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d007      	beq.n	800a434 <TIM_OC6_SetConfig+0x7c>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a15      	ldr	r2, [pc, #84]	; (800a47c <TIM_OC6_SetConfig+0xc4>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d003      	beq.n	800a434 <TIM_OC6_SetConfig+0x7c>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a14      	ldr	r2, [pc, #80]	; (800a480 <TIM_OC6_SetConfig+0xc8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d109      	bne.n	800a448 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a43a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	029b      	lsls	r3, r3, #10
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	621a      	str	r2, [r3, #32]
}
 800a462:	bf00      	nop
 800a464:	371c      	adds	r7, #28
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	40012c00 	.word	0x40012c00
 800a474:	40013400 	.word	0x40013400
 800a478:	40014000 	.word	0x40014000
 800a47c:	40014400 	.word	0x40014400
 800a480:	40014800 	.word	0x40014800

0800a484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f023 0201 	bic.w	r2, r3, #1
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f023 030a 	bic.w	r3, r3, #10
 800a4c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	621a      	str	r2, [r3, #32]
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b087      	sub	sp, #28
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	f023 0210 	bic.w	r2, r3, #16
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a50c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	031b      	lsls	r3, r3, #12
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	4313      	orrs	r3, r2
 800a516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a51e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	621a      	str	r2, [r3, #32]
}
 800a536:	bf00      	nop
 800a538:	371c      	adds	r7, #28
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a542:	b480      	push	{r7}
 800a544:	b085      	sub	sp, #20
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a55c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	f043 0307 	orr.w	r3, r3, #7
 800a568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	609a      	str	r2, [r3, #8]
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	021a      	lsls	r2, r3, #8
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	609a      	str	r2, [r3, #8]
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a1a      	ldr	r2, [r3, #32]
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	43db      	mvns	r3, r3
 800a5de:	401a      	ands	r2, r3
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a1a      	ldr	r2, [r3, #32]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f003 031f 	and.w	r3, r3, #31
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	621a      	str	r2, [r3, #32]
}
 800a5fa:	bf00      	nop
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d109      	bne.n	800a62c <HAL_TIMEx_PWMN_Start+0x24>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b01      	cmp	r3, #1
 800a622:	bf14      	ite	ne
 800a624:	2301      	movne	r3, #1
 800a626:	2300      	moveq	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	e022      	b.n	800a672 <HAL_TIMEx_PWMN_Start+0x6a>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d109      	bne.n	800a646 <HAL_TIMEx_PWMN_Start+0x3e>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	bf14      	ite	ne
 800a63e:	2301      	movne	r3, #1
 800a640:	2300      	moveq	r3, #0
 800a642:	b2db      	uxtb	r3, r3
 800a644:	e015      	b.n	800a672 <HAL_TIMEx_PWMN_Start+0x6a>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d109      	bne.n	800a660 <HAL_TIMEx_PWMN_Start+0x58>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b01      	cmp	r3, #1
 800a656:	bf14      	ite	ne
 800a658:	2301      	movne	r3, #1
 800a65a:	2300      	moveq	r3, #0
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	e008      	b.n	800a672 <HAL_TIMEx_PWMN_Start+0x6a>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b01      	cmp	r3, #1
 800a66a:	bf14      	ite	ne
 800a66c:	2301      	movne	r3, #1
 800a66e:	2300      	moveq	r3, #0
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e069      	b.n	800a74e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <HAL_TIMEx_PWMN_Start+0x82>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a688:	e013      	b.n	800a6b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d104      	bne.n	800a69a <HAL_TIMEx_PWMN_Start+0x92>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a698:	e00b      	b.n	800a6b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d104      	bne.n	800a6aa <HAL_TIMEx_PWMN_Start+0xa2>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6a8:	e003      	b.n	800a6b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fa1e 	bl	800aafc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a20      	ldr	r2, [pc, #128]	; (800a758 <HAL_TIMEx_PWMN_Start+0x150>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d018      	beq.n	800a70c <HAL_TIMEx_PWMN_Start+0x104>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e2:	d013      	beq.n	800a70c <HAL_TIMEx_PWMN_Start+0x104>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1c      	ldr	r2, [pc, #112]	; (800a75c <HAL_TIMEx_PWMN_Start+0x154>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00e      	beq.n	800a70c <HAL_TIMEx_PWMN_Start+0x104>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <HAL_TIMEx_PWMN_Start+0x158>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_TIMEx_PWMN_Start+0x104>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a19      	ldr	r2, [pc, #100]	; (800a764 <HAL_TIMEx_PWMN_Start+0x15c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIMEx_PWMN_Start+0x104>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_TIMEx_PWMN_Start+0x160>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d115      	bne.n	800a738 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <HAL_TIMEx_PWMN_Start+0x164>)
 800a714:	4013      	ands	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b06      	cmp	r3, #6
 800a71c:	d015      	beq.n	800a74a <HAL_TIMEx_PWMN_Start+0x142>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a724:	d011      	beq.n	800a74a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0201 	orr.w	r2, r2, #1
 800a734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a736:	e008      	b.n	800a74a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f042 0201 	orr.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e000      	b.n	800a74c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40000400 	.word	0x40000400
 800a760:	40000800 	.word	0x40000800
 800a764:	40013400 	.word	0x40013400
 800a768:	40014000 	.word	0x40014000
 800a76c:	00010007 	.word	0x00010007

0800a770 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2200      	movs	r2, #0
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f9ba 	bl	800aafc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6a1a      	ldr	r2, [r3, #32]
 800a78e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a792:	4013      	ands	r3, r2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10f      	bne.n	800a7b8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6a1a      	ldr	r2, [r3, #32]
 800a79e:	f244 4344 	movw	r3, #17476	; 0x4444
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d107      	bne.n	800a7b8 <HAL_TIMEx_PWMN_Stop+0x48>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6a1a      	ldr	r2, [r3, #32]
 800a7be:	f241 1311 	movw	r3, #4369	; 0x1111
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10f      	bne.n	800a7e8 <HAL_TIMEx_PWMN_Stop+0x78>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6a1a      	ldr	r2, [r3, #32]
 800a7ce:	f244 4344 	movw	r3, #17476	; 0x4444
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d107      	bne.n	800a7e8 <HAL_TIMEx_PWMN_Stop+0x78>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0201 	bic.w	r2, r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d104      	bne.n	800a7f8 <HAL_TIMEx_PWMN_Stop+0x88>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f6:	e013      	b.n	800a820 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d104      	bne.n	800a808 <HAL_TIMEx_PWMN_Stop+0x98>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a806:	e00b      	b.n	800a820 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b08      	cmp	r3, #8
 800a80c:	d104      	bne.n	800a818 <HAL_TIMEx_PWMN_Stop+0xa8>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a816:	e003      	b.n	800a820 <HAL_TIMEx_PWMN_Stop+0xb0>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a840:	2302      	movs	r3, #2
 800a842:	e065      	b.n	800a910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2202      	movs	r2, #2
 800a850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a2c      	ldr	r2, [pc, #176]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d004      	beq.n	800a878 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a2b      	ldr	r2, [pc, #172]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d108      	bne.n	800a88a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a87e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4313      	orrs	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a1b      	ldr	r2, [pc, #108]	; (800a91c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d018      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	d013      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a18      	ldr	r2, [pc, #96]	; (800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	; (800a928 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a12      	ldr	r2, [pc, #72]	; (800a920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a13      	ldr	r2, [pc, #76]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d10c      	bne.n	800a8fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	40012c00 	.word	0x40012c00
 800a920:	40013400 	.word	0x40013400
 800a924:	40000400 	.word	0x40000400
 800a928:	40000800 	.word	0x40000800
 800a92c:	40014000 	.word	0x40014000

0800a930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d101      	bne.n	800a94c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a948:	2302      	movs	r3, #2
 800a94a:	e087      	b.n	800aa5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4313      	orrs	r3, r2
 800a98a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a27      	ldr	r2, [pc, #156]	; (800aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d004      	beq.n	800a9da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a25      	ldr	r2, [pc, #148]	; (800aa6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d106      	bne.n	800a9e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	69db      	ldr	r3, [r3, #28]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1e      	ldr	r2, [pc, #120]	; (800aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d004      	beq.n	800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d126      	bne.n	800aa4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa06:	051b      	lsls	r3, r3, #20
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a0e      	ldr	r2, [pc, #56]	; (800aa68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d004      	beq.n	800aa3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d106      	bne.n	800aa4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	40012c00 	.word	0x40012c00
 800aa6c:	40013400 	.word	0x40013400

0800aa70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	2204      	movs	r2, #4
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	43db      	mvns	r3, r3
 800ab1e:	401a      	ands	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a1a      	ldr	r2, [r3, #32]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	431a      	orrs	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	621a      	str	r2, [r3, #32]
}
 800ab3a:	bf00      	nop
 800ab3c:	371c      	adds	r7, #28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e042      	b.n	800abde <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f8 ff9a 	bl	8003aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2224      	movs	r2, #36	; 0x24
 800ab74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0201 	bic.w	r2, r2, #1
 800ab86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fc01 	bl	800b390 <UART_SetConfig>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d101      	bne.n	800ab98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e022      	b.n	800abde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fec1 	bl	800b928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f042 0201 	orr.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 ff48 	bl	800ba6c <UART_CheckIdleState>
 800abdc:	4603      	mov	r3, r0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	; 0x28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfc:	2b20      	cmp	r3, #32
 800abfe:	d17a      	bne.n	800acf6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <HAL_UART_Transmit_DMA+0x24>
 800ac06:	88fb      	ldrh	r3, [r7, #6]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e073      	b.n	800acf8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_UART_Transmit_DMA+0x36>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e06c      	b.n	800acf8 <HAL_UART_Transmit_DMA+0x110>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	88fa      	ldrh	r2, [r7, #6]
 800ac30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2221      	movs	r2, #33	; 0x21
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d02c      	beq.n	800acae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac58:	4a29      	ldr	r2, [pc, #164]	; (800ad00 <HAL_UART_Transmit_DMA+0x118>)
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac60:	4a28      	ldr	r2, [pc, #160]	; (800ad04 <HAL_UART_Transmit_DMA+0x11c>)
 800ac62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac68:	4a27      	ldr	r2, [pc, #156]	; (800ad08 <HAL_UART_Transmit_DMA+0x120>)
 800ac6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac70:	2200      	movs	r2, #0
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3328      	adds	r3, #40	; 0x28
 800ac84:	461a      	mov	r2, r3
 800ac86:	88fb      	ldrh	r3, [r7, #6]
 800ac88:	f7fb f8e4 	bl	8005e54 <HAL_DMA_Start_IT>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2210      	movs	r2, #16
 800ac96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2220      	movs	r2, #32
 800aca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e024      	b.n	800acf8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2240      	movs	r2, #64	; 0x40
 800acb4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	613b      	str	r3, [r7, #16]
   return(result);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acde:	623a      	str	r2, [r7, #32]
 800ace0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	69f9      	ldr	r1, [r7, #28]
 800ace4:	6a3a      	ldr	r2, [r7, #32]
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	61bb      	str	r3, [r7, #24]
   return(result);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	e000      	b.n	800acf8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800acf6:	2302      	movs	r3, #2
  }
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3728      	adds	r7, #40	; 0x28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	0800bde1 	.word	0x0800bde1
 800ad04:	0800be7b 	.word	0x0800be7b
 800ad08:	0800be97 	.word	0x0800be97

0800ad0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b0ba      	sub	sp, #232	; 0xe8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad36:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11b      	bne.n	800ad80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d015      	beq.n	800ad80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d105      	bne.n	800ad6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d009      	beq.n	800ad80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 82d6 	beq.w	800b322 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
      }
      return;
 800ad7e:	e2d0      	b.n	800b322 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 811f 	beq.w	800afc8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad8e:	4b8b      	ldr	r3, [pc, #556]	; (800afbc <HAL_UART_IRQHandler+0x2b0>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad9a:	4b89      	ldr	r3, [pc, #548]	; (800afc0 <HAL_UART_IRQHandler+0x2b4>)
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 8112 	beq.w	800afc8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ada4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d011      	beq.n	800add4 <HAL_UART_IRQHandler+0xc8>
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2201      	movs	r2, #1
 800adc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adca:	f043 0201 	orr.w	r2, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800add4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add8:	f003 0302 	and.w	r3, r3, #2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d011      	beq.n	800ae04 <HAL_UART_IRQHandler+0xf8>
 800ade0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2202      	movs	r2, #2
 800adf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adfa:	f043 0204 	orr.w	r2, r3, #4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d011      	beq.n	800ae34 <HAL_UART_IRQHandler+0x128>
 800ae10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2204      	movs	r2, #4
 800ae22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2a:	f043 0202 	orr.w	r2, r3, #2
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d017      	beq.n	800ae70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d105      	bne.n	800ae58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae50:	4b5a      	ldr	r3, [pc, #360]	; (800afbc <HAL_UART_IRQHandler+0x2b0>)
 800ae52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2208      	movs	r2, #8
 800ae5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae66:	f043 0208 	orr.w	r2, r3, #8
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d012      	beq.n	800aea2 <HAL_UART_IRQHandler+0x196>
 800ae7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00c      	beq.n	800aea2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae98:	f043 0220 	orr.w	r2, r3, #32
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 823c 	beq.w	800b326 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aeae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d013      	beq.n	800aee2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aeba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aebe:	f003 0320 	and.w	r3, r3, #32
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d105      	bne.n	800aed2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d007      	beq.n	800aee2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef6:	2b40      	cmp	r3, #64	; 0x40
 800aef8:	d005      	beq.n	800af06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aefa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aefe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af02:	2b00      	cmp	r3, #0
 800af04:	d04f      	beq.n	800afa6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 ff04 	bl	800bd14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af16:	2b40      	cmp	r3, #64	; 0x40
 800af18:	d141      	bne.n	800af9e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af28:	e853 3f00 	ldrex	r3, [r3]
 800af2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3308      	adds	r3, #8
 800af42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1d9      	bne.n	800af1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d013      	beq.n	800af96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af72:	4a14      	ldr	r2, [pc, #80]	; (800afc4 <HAL_UART_IRQHandler+0x2b8>)
 800af74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fb f83e 	bl	8005ffc <HAL_DMA_Abort_IT>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d017      	beq.n	800afb6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af94:	e00f      	b.n	800afb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f9e4 	bl	800b364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9c:	e00b      	b.n	800afb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f9e0 	bl	800b364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa4:	e007      	b.n	800afb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f9dc 	bl	800b364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800afb4:	e1b7      	b.n	800b326 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb6:	bf00      	nop
    return;
 800afb8:	e1b5      	b.n	800b326 <HAL_UART_IRQHandler+0x61a>
 800afba:	bf00      	nop
 800afbc:	10000001 	.word	0x10000001
 800afc0:	04000120 	.word	0x04000120
 800afc4:	0800bf17 	.word	0x0800bf17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afcc:	2b01      	cmp	r3, #1
 800afce:	f040 814a 	bne.w	800b266 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd6:	f003 0310 	and.w	r3, r3, #16
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f000 8143 	beq.w	800b266 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe4:	f003 0310 	and.w	r3, r3, #16
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 813c 	beq.w	800b266 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2210      	movs	r2, #16
 800aff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b000:	2b40      	cmp	r3, #64	; 0x40
 800b002:	f040 80b5 	bne.w	800b170 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b012:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 8187 	beq.w	800b32a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b026:	429a      	cmp	r2, r3
 800b028:	f080 817f 	bcs.w	800b32a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 8086 	bne.w	800b154 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b05c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	461a      	mov	r2, r3
 800b06e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b076:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b07e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b082:	e841 2300 	strex	r3, r2, [r1]
 800b086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b08a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1da      	bne.n	800b048 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3308      	adds	r3, #8
 800b098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e1      	bne.n	800b092 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e3      	bne.n	800b0ce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b124:	f023 0310 	bic.w	r3, r3, #16
 800b128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b136:	65bb      	str	r3, [r7, #88]	; 0x58
 800b138:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b13c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e4      	bne.n	800b114 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fa fefb 	bl	8005f4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b160:	b29b      	uxth	r3, r3
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	b29b      	uxth	r3, r3
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f905 	bl	800b378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b16e:	e0dc      	b.n	800b32a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80ce 	beq.w	800b32e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 80c9 	beq.w	800b32e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1be:	647b      	str	r3, [r7, #68]	; 0x44
 800b1c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e4      	bne.n	800b19c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	f023 0301 	bic.w	r3, r3, #1
 800b1ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1fa:	633a      	str	r2, [r7, #48]	; 0x30
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e1      	bne.n	800b1d2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 0310 	bic.w	r3, r3, #16
 800b236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	69b9      	ldr	r1, [r7, #24]
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	617b      	str	r3, [r7, #20]
   return(result);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e4      	bne.n	800b222 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f88a 	bl	800b378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b264:	e063      	b.n	800b32e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00e      	beq.n	800b290 <HAL_UART_IRQHandler+0x584>
 800b272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d008      	beq.n	800b290 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fe85 	bl	800bf98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b28e:	e051      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d014      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d105      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d03a      	beq.n	800b332 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
    }
    return;
 800b2c4:	e035      	b.n	800b332 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d009      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x5da>
 800b2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fe2f 	bl	800bf42 <UART_EndTransmit_IT>
    return;
 800b2e4:	e026      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <HAL_UART_IRQHandler+0x5fa>
 800b2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fe5e 	bl	800bfc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b304:	e016      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b30a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d010      	beq.n	800b334 <HAL_UART_IRQHandler+0x628>
 800b312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b316:	2b00      	cmp	r3, #0
 800b318:	da0c      	bge.n	800b334 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fe46 	bl	800bfac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b320:	e008      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
      return;
 800b322:	bf00      	nop
 800b324:	e006      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
    return;
 800b326:	bf00      	nop
 800b328:	e004      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
      return;
 800b32a:	bf00      	nop
 800b32c:	e002      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
      return;
 800b32e:	bf00      	nop
 800b330:	e000      	b.n	800b334 <HAL_UART_IRQHandler+0x628>
    return;
 800b332:	bf00      	nop
  }
}
 800b334:	37e8      	adds	r7, #232	; 0xe8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop

0800b33c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b394:	b08c      	sub	sp, #48	; 0x30
 800b396:	af00      	add	r7, sp, #0
 800b398:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	431a      	orrs	r2, r3
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	4bab      	ldr	r3, [pc, #684]	; (800b66c <UART_SetConfig+0x2dc>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4aa0      	ldr	r2, [pc, #640]	; (800b670 <UART_SetConfig+0x2e0>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d004      	beq.n	800b3fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b406:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b410:	430b      	orrs	r3, r1
 800b412:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	f023 010f 	bic.w	r1, r3, #15
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a91      	ldr	r2, [pc, #580]	; (800b674 <UART_SetConfig+0x2e4>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d125      	bne.n	800b480 <UART_SetConfig+0xf0>
 800b434:	4b90      	ldr	r3, [pc, #576]	; (800b678 <UART_SetConfig+0x2e8>)
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43a:	f003 0303 	and.w	r3, r3, #3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d81a      	bhi.n	800b478 <UART_SetConfig+0xe8>
 800b442:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <UART_SetConfig+0xb8>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b469 	.word	0x0800b469
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b471 	.word	0x0800b471
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b45e:	e0d6      	b.n	800b60e <UART_SetConfig+0x27e>
 800b460:	2302      	movs	r3, #2
 800b462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b466:	e0d2      	b.n	800b60e <UART_SetConfig+0x27e>
 800b468:	2304      	movs	r3, #4
 800b46a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b46e:	e0ce      	b.n	800b60e <UART_SetConfig+0x27e>
 800b470:	2308      	movs	r3, #8
 800b472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b476:	e0ca      	b.n	800b60e <UART_SetConfig+0x27e>
 800b478:	2310      	movs	r3, #16
 800b47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b47e:	e0c6      	b.n	800b60e <UART_SetConfig+0x27e>
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a7d      	ldr	r2, [pc, #500]	; (800b67c <UART_SetConfig+0x2ec>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d138      	bne.n	800b4fc <UART_SetConfig+0x16c>
 800b48a:	4b7b      	ldr	r3, [pc, #492]	; (800b678 <UART_SetConfig+0x2e8>)
 800b48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b490:	f003 030c 	and.w	r3, r3, #12
 800b494:	2b0c      	cmp	r3, #12
 800b496:	d82d      	bhi.n	800b4f4 <UART_SetConfig+0x164>
 800b498:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <UART_SetConfig+0x110>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b4d5 	.word	0x0800b4d5
 800b4a4:	0800b4f5 	.word	0x0800b4f5
 800b4a8:	0800b4f5 	.word	0x0800b4f5
 800b4ac:	0800b4f5 	.word	0x0800b4f5
 800b4b0:	0800b4e5 	.word	0x0800b4e5
 800b4b4:	0800b4f5 	.word	0x0800b4f5
 800b4b8:	0800b4f5 	.word	0x0800b4f5
 800b4bc:	0800b4f5 	.word	0x0800b4f5
 800b4c0:	0800b4dd 	.word	0x0800b4dd
 800b4c4:	0800b4f5 	.word	0x0800b4f5
 800b4c8:	0800b4f5 	.word	0x0800b4f5
 800b4cc:	0800b4f5 	.word	0x0800b4f5
 800b4d0:	0800b4ed 	.word	0x0800b4ed
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e098      	b.n	800b60e <UART_SetConfig+0x27e>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4e2:	e094      	b.n	800b60e <UART_SetConfig+0x27e>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ea:	e090      	b.n	800b60e <UART_SetConfig+0x27e>
 800b4ec:	2308      	movs	r3, #8
 800b4ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4f2:	e08c      	b.n	800b60e <UART_SetConfig+0x27e>
 800b4f4:	2310      	movs	r3, #16
 800b4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4fa:	e088      	b.n	800b60e <UART_SetConfig+0x27e>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a5f      	ldr	r2, [pc, #380]	; (800b680 <UART_SetConfig+0x2f0>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d125      	bne.n	800b552 <UART_SetConfig+0x1c2>
 800b506:	4b5c      	ldr	r3, [pc, #368]	; (800b678 <UART_SetConfig+0x2e8>)
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b50c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b510:	2b30      	cmp	r3, #48	; 0x30
 800b512:	d016      	beq.n	800b542 <UART_SetConfig+0x1b2>
 800b514:	2b30      	cmp	r3, #48	; 0x30
 800b516:	d818      	bhi.n	800b54a <UART_SetConfig+0x1ba>
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d00a      	beq.n	800b532 <UART_SetConfig+0x1a2>
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d814      	bhi.n	800b54a <UART_SetConfig+0x1ba>
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <UART_SetConfig+0x19a>
 800b524:	2b10      	cmp	r3, #16
 800b526:	d008      	beq.n	800b53a <UART_SetConfig+0x1aa>
 800b528:	e00f      	b.n	800b54a <UART_SetConfig+0x1ba>
 800b52a:	2300      	movs	r3, #0
 800b52c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b530:	e06d      	b.n	800b60e <UART_SetConfig+0x27e>
 800b532:	2302      	movs	r3, #2
 800b534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b538:	e069      	b.n	800b60e <UART_SetConfig+0x27e>
 800b53a:	2304      	movs	r3, #4
 800b53c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b540:	e065      	b.n	800b60e <UART_SetConfig+0x27e>
 800b542:	2308      	movs	r3, #8
 800b544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b548:	e061      	b.n	800b60e <UART_SetConfig+0x27e>
 800b54a:	2310      	movs	r3, #16
 800b54c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b550:	e05d      	b.n	800b60e <UART_SetConfig+0x27e>
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a4b      	ldr	r2, [pc, #300]	; (800b684 <UART_SetConfig+0x2f4>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d125      	bne.n	800b5a8 <UART_SetConfig+0x218>
 800b55c:	4b46      	ldr	r3, [pc, #280]	; (800b678 <UART_SetConfig+0x2e8>)
 800b55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b562:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b566:	2bc0      	cmp	r3, #192	; 0xc0
 800b568:	d016      	beq.n	800b598 <UART_SetConfig+0x208>
 800b56a:	2bc0      	cmp	r3, #192	; 0xc0
 800b56c:	d818      	bhi.n	800b5a0 <UART_SetConfig+0x210>
 800b56e:	2b80      	cmp	r3, #128	; 0x80
 800b570:	d00a      	beq.n	800b588 <UART_SetConfig+0x1f8>
 800b572:	2b80      	cmp	r3, #128	; 0x80
 800b574:	d814      	bhi.n	800b5a0 <UART_SetConfig+0x210>
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <UART_SetConfig+0x1f0>
 800b57a:	2b40      	cmp	r3, #64	; 0x40
 800b57c:	d008      	beq.n	800b590 <UART_SetConfig+0x200>
 800b57e:	e00f      	b.n	800b5a0 <UART_SetConfig+0x210>
 800b580:	2300      	movs	r3, #0
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b586:	e042      	b.n	800b60e <UART_SetConfig+0x27e>
 800b588:	2302      	movs	r3, #2
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b58e:	e03e      	b.n	800b60e <UART_SetConfig+0x27e>
 800b590:	2304      	movs	r3, #4
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b596:	e03a      	b.n	800b60e <UART_SetConfig+0x27e>
 800b598:	2308      	movs	r3, #8
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b59e:	e036      	b.n	800b60e <UART_SetConfig+0x27e>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a6:	e032      	b.n	800b60e <UART_SetConfig+0x27e>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a30      	ldr	r2, [pc, #192]	; (800b670 <UART_SetConfig+0x2e0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d12a      	bne.n	800b608 <UART_SetConfig+0x278>
 800b5b2:	4b31      	ldr	r3, [pc, #196]	; (800b678 <UART_SetConfig+0x2e8>)
 800b5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c0:	d01a      	beq.n	800b5f8 <UART_SetConfig+0x268>
 800b5c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5c6:	d81b      	bhi.n	800b600 <UART_SetConfig+0x270>
 800b5c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5cc:	d00c      	beq.n	800b5e8 <UART_SetConfig+0x258>
 800b5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d2:	d815      	bhi.n	800b600 <UART_SetConfig+0x270>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <UART_SetConfig+0x250>
 800b5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5dc:	d008      	beq.n	800b5f0 <UART_SetConfig+0x260>
 800b5de:	e00f      	b.n	800b600 <UART_SetConfig+0x270>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5e6:	e012      	b.n	800b60e <UART_SetConfig+0x27e>
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ee:	e00e      	b.n	800b60e <UART_SetConfig+0x27e>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5f6:	e00a      	b.n	800b60e <UART_SetConfig+0x27e>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5fe:	e006      	b.n	800b60e <UART_SetConfig+0x27e>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b606:	e002      	b.n	800b60e <UART_SetConfig+0x27e>
 800b608:	2310      	movs	r3, #16
 800b60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a17      	ldr	r2, [pc, #92]	; (800b670 <UART_SetConfig+0x2e0>)
 800b614:	4293      	cmp	r3, r2
 800b616:	f040 80a8 	bne.w	800b76a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b61a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b61e:	2b08      	cmp	r3, #8
 800b620:	d834      	bhi.n	800b68c <UART_SetConfig+0x2fc>
 800b622:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <UART_SetConfig+0x298>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b64d 	.word	0x0800b64d
 800b62c:	0800b68d 	.word	0x0800b68d
 800b630:	0800b655 	.word	0x0800b655
 800b634:	0800b68d 	.word	0x0800b68d
 800b638:	0800b65b 	.word	0x0800b65b
 800b63c:	0800b68d 	.word	0x0800b68d
 800b640:	0800b68d 	.word	0x0800b68d
 800b644:	0800b68d 	.word	0x0800b68d
 800b648:	0800b663 	.word	0x0800b663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64c:	f7fc fca0 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 800b650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b652:	e021      	b.n	800b698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <UART_SetConfig+0x2f8>)
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b658:	e01e      	b.n	800b698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b65a:	f7fc fc2d 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 800b65e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b660:	e01a      	b.n	800b698 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b668:	e016      	b.n	800b698 <UART_SetConfig+0x308>
 800b66a:	bf00      	nop
 800b66c:	cfff69f3 	.word	0xcfff69f3
 800b670:	40008000 	.word	0x40008000
 800b674:	40013800 	.word	0x40013800
 800b678:	40021000 	.word	0x40021000
 800b67c:	40004400 	.word	0x40004400
 800b680:	40004800 	.word	0x40004800
 800b684:	40004c00 	.word	0x40004c00
 800b688:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b696:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 812a 	beq.w	800b8f4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	4a9e      	ldr	r2, [pc, #632]	; (800b920 <UART_SetConfig+0x590>)
 800b6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	4413      	add	r3, r2
 800b6be:	69ba      	ldr	r2, [r7, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d305      	bcc.n	800b6d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d903      	bls.n	800b6d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b6d6:	e10d      	b.n	800b8f4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	2200      	movs	r2, #0
 800b6dc:	60bb      	str	r3, [r7, #8]
 800b6de:	60fa      	str	r2, [r7, #12]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	4a8e      	ldr	r2, [pc, #568]	; (800b920 <UART_SetConfig+0x590>)
 800b6e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	607a      	str	r2, [r7, #4]
 800b6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6fa:	f7f4 fde9 	bl	80002d0 <__aeabi_uldivmod>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	4610      	mov	r0, r2
 800b704:	4619      	mov	r1, r3
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	020b      	lsls	r3, r1, #8
 800b710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b714:	0202      	lsls	r2, r0, #8
 800b716:	6979      	ldr	r1, [r7, #20]
 800b718:	6849      	ldr	r1, [r1, #4]
 800b71a:	0849      	lsrs	r1, r1, #1
 800b71c:	2000      	movs	r0, #0
 800b71e:	460c      	mov	r4, r1
 800b720:	4605      	mov	r5, r0
 800b722:	eb12 0804 	adds.w	r8, r2, r4
 800b726:	eb43 0905 	adc.w	r9, r3, r5
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	469a      	mov	sl, r3
 800b732:	4693      	mov	fp, r2
 800b734:	4652      	mov	r2, sl
 800b736:	465b      	mov	r3, fp
 800b738:	4640      	mov	r0, r8
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f4 fdc8 	bl	80002d0 <__aeabi_uldivmod>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4613      	mov	r3, r2
 800b746:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b74e:	d308      	bcc.n	800b762 <UART_SetConfig+0x3d2>
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b756:	d204      	bcs.n	800b762 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6a3a      	ldr	r2, [r7, #32]
 800b75e:	60da      	str	r2, [r3, #12]
 800b760:	e0c8      	b.n	800b8f4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b768:	e0c4      	b.n	800b8f4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b772:	d167      	bne.n	800b844 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d828      	bhi.n	800b7ce <UART_SetConfig+0x43e>
 800b77c:	a201      	add	r2, pc, #4	; (adr r2, 800b784 <UART_SetConfig+0x3f4>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b7a9 	.word	0x0800b7a9
 800b788:	0800b7b1 	.word	0x0800b7b1
 800b78c:	0800b7b9 	.word	0x0800b7b9
 800b790:	0800b7cf 	.word	0x0800b7cf
 800b794:	0800b7bf 	.word	0x0800b7bf
 800b798:	0800b7cf 	.word	0x0800b7cf
 800b79c:	0800b7cf 	.word	0x0800b7cf
 800b7a0:	0800b7cf 	.word	0x0800b7cf
 800b7a4:	0800b7c7 	.word	0x0800b7c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7a8:	f7fc fbf2 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 800b7ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7ae:	e014      	b.n	800b7da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7b0:	f7fc fc04 	bl	8007fbc <HAL_RCC_GetPCLK2Freq>
 800b7b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7b6:	e010      	b.n	800b7da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7b8:	4b5a      	ldr	r3, [pc, #360]	; (800b924 <UART_SetConfig+0x594>)
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7bc:	e00d      	b.n	800b7da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7be:	f7fc fb7b 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 800b7c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7c4:	e009      	b.n	800b7da <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7cc:	e005      	b.n	800b7da <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b7d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8089 	beq.w	800b8f4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	4a4e      	ldr	r2, [pc, #312]	; (800b920 <UART_SetConfig+0x590>)
 800b7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f4:	005a      	lsls	r2, r3, #1
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	085b      	lsrs	r3, r3, #1
 800b7fc:	441a      	add	r2, r3
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	2b0f      	cmp	r3, #15
 800b80c:	d916      	bls.n	800b83c <UART_SetConfig+0x4ac>
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b814:	d212      	bcs.n	800b83c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f023 030f 	bic.w	r3, r3, #15
 800b81e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	085b      	lsrs	r3, r3, #1
 800b824:	b29b      	uxth	r3, r3
 800b826:	f003 0307 	and.w	r3, r3, #7
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	8bfb      	ldrh	r3, [r7, #30]
 800b82e:	4313      	orrs	r3, r2
 800b830:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	8bfa      	ldrh	r2, [r7, #30]
 800b838:	60da      	str	r2, [r3, #12]
 800b83a:	e05b      	b.n	800b8f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b842:	e057      	b.n	800b8f4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d828      	bhi.n	800b89e <UART_SetConfig+0x50e>
 800b84c:	a201      	add	r2, pc, #4	; (adr r2, 800b854 <UART_SetConfig+0x4c4>)
 800b84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b852:	bf00      	nop
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b881 	.word	0x0800b881
 800b85c:	0800b889 	.word	0x0800b889
 800b860:	0800b89f 	.word	0x0800b89f
 800b864:	0800b88f 	.word	0x0800b88f
 800b868:	0800b89f 	.word	0x0800b89f
 800b86c:	0800b89f 	.word	0x0800b89f
 800b870:	0800b89f 	.word	0x0800b89f
 800b874:	0800b897 	.word	0x0800b897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b878:	f7fc fb8a 	bl	8007f90 <HAL_RCC_GetPCLK1Freq>
 800b87c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b87e:	e014      	b.n	800b8aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b880:	f7fc fb9c 	bl	8007fbc <HAL_RCC_GetPCLK2Freq>
 800b884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b886:	e010      	b.n	800b8aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b888:	4b26      	ldr	r3, [pc, #152]	; (800b924 <UART_SetConfig+0x594>)
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b88c:	e00d      	b.n	800b8aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b88e:	f7fc fb13 	bl	8007eb8 <HAL_RCC_GetSysClockFreq>
 800b892:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b894:	e009      	b.n	800b8aa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b89a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b89c:	e005      	b.n	800b8aa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8a8:	bf00      	nop
    }

    if (pclk != 0U)
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d021      	beq.n	800b8f4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	4a1a      	ldr	r2, [pc, #104]	; (800b920 <UART_SetConfig+0x590>)
 800b8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	085b      	lsrs	r3, r3, #1
 800b8c8:	441a      	add	r2, r3
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	2b0f      	cmp	r3, #15
 800b8d8:	d909      	bls.n	800b8ee <UART_SetConfig+0x55e>
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e0:	d205      	bcs.n	800b8ee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60da      	str	r2, [r3, #12]
 800b8ec:	e002      	b.n	800b8f4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2200      	movs	r2, #0
 800b908:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2200      	movs	r2, #0
 800b90e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b910:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b914:	4618      	mov	r0, r3
 800b916:	3730      	adds	r7, #48	; 0x30
 800b918:	46bd      	mov	sp, r7
 800b91a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b91e:	bf00      	nop
 800b920:	0800cbfc 	.word	0x0800cbfc
 800b924:	00f42400 	.word	0x00f42400

0800b928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00a      	beq.n	800b952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99a:	f003 0308 	and.w	r3, r3, #8
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0310 	and.w	r3, r3, #16
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00a      	beq.n	800b9da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	f003 0320 	and.w	r3, r3, #32
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d01a      	beq.n	800ba3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba26:	d10a      	bne.n	800ba3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	605a      	str	r2, [r3, #4]
  }
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba7c:	f7f8 f92e 	bl	8003cdc <HAL_GetTick>
 800ba80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0308 	and.w	r3, r3, #8
 800ba8c:	2b08      	cmp	r3, #8
 800ba8e:	d10e      	bne.n	800baae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f82f 	bl	800bb02 <UART_WaitOnFlagUntilTimeout>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e025      	b.n	800bafa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	2b04      	cmp	r3, #4
 800baba:	d10e      	bne.n	800bada <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800babc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f819 	bl	800bb02 <UART_WaitOnFlagUntilTimeout>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bad6:	2303      	movs	r3, #3
 800bad8:	e00f      	b.n	800bafa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2220      	movs	r2, #32
 800bade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2220      	movs	r2, #32
 800bae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b09c      	sub	sp, #112	; 0x70
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	603b      	str	r3, [r7, #0]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb12:	e0a9      	b.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1a:	f000 80a5 	beq.w	800bc68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb1e:	f7f8 f8dd 	bl	8003cdc <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d302      	bcc.n	800bb34 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d140      	bne.n	800bbb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb3c:	e853 3f00 	ldrex	r3, [r3]
 800bb40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb48:	667b      	str	r3, [r7, #100]	; 0x64
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e6      	bne.n	800bb34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	f023 0301 	bic.w	r3, r3, #1
 800bb7c:	663b      	str	r3, [r7, #96]	; 0x60
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3308      	adds	r3, #8
 800bb84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb86:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb8e:	e841 2300 	strex	r3, r2, [r1]
 800bb92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1e5      	bne.n	800bb66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	e069      	b.n	800bc8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d051      	beq.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbd2:	d149      	bne.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	e853 3f00 	ldrex	r3, [r3]
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc04:	e841 2300 	strex	r3, r2, [r1]
 800bc08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e6      	bne.n	800bbde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3308      	adds	r3, #8
 800bc16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f023 0301 	bic.w	r3, r3, #1
 800bc26:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc30:	623a      	str	r2, [r7, #32]
 800bc32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc34:	69f9      	ldr	r1, [r7, #28]
 800bc36:	6a3a      	ldr	r2, [r7, #32]
 800bc38:	e841 2300 	strex	r3, r2, [r1]
 800bc3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e5      	bne.n	800bc10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e010      	b.n	800bc8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	69da      	ldr	r2, [r3, #28]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4013      	ands	r3, r2
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	bf0c      	ite	eq
 800bc78:	2301      	moveq	r3, #1
 800bc7a:	2300      	movne	r3, #0
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	461a      	mov	r2, r3
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	f43f af46 	beq.w	800bb14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3770      	adds	r7, #112	; 0x70
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b08f      	sub	sp, #60	; 0x3c
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	6a3b      	ldr	r3, [r7, #32]
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bcae:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc0:	e841 2300 	strex	r3, r2, [r1]
 800bcc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e6      	bne.n	800bc9a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	e853 3f00 	ldrex	r3, [r3]
 800bcda:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bce2:	633b      	str	r3, [r7, #48]	; 0x30
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3308      	adds	r3, #8
 800bcea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcec:	61ba      	str	r2, [r7, #24]
 800bcee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf0:	6979      	ldr	r1, [r7, #20]
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	e841 2300 	strex	r3, r2, [r1]
 800bcf8:	613b      	str	r3, [r7, #16]
   return(result);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1e5      	bne.n	800bccc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bd08:	bf00      	nop
 800bd0a:	373c      	adds	r7, #60	; 0x3c
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b095      	sub	sp, #84	; 0x54
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	461a      	mov	r2, r3
 800bd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd3a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e6      	bne.n	800bd1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3308      	adds	r3, #8
 800bd54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd64:	f023 0301 	bic.w	r3, r3, #1
 800bd68:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3308      	adds	r3, #8
 800bd70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7a:	e841 2300 	strex	r3, r2, [r1]
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1e3      	bne.n	800bd4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d118      	bne.n	800bdc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f023 0310 	bic.w	r3, r3, #16
 800bda2:	647b      	str	r3, [r7, #68]	; 0x44
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdac:	61bb      	str	r3, [r7, #24]
 800bdae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6979      	ldr	r1, [r7, #20]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e6      	bne.n	800bd8e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bdd4:	bf00      	nop
 800bdd6:	3754      	adds	r7, #84	; 0x54
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b090      	sub	sp, #64	; 0x40
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 0320 	and.w	r3, r3, #32
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d137      	bne.n	800be6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3308      	adds	r3, #8
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	623b      	str	r3, [r7, #32]
   return(result);
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800be1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	3308      	adds	r3, #8
 800be22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be24:	633a      	str	r2, [r7, #48]	; 0x30
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e5      	bne.n	800be04 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	e853 3f00 	ldrex	r3, [r3]
 800be44:	60fb      	str	r3, [r7, #12]
   return(result);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be4c:	637b      	str	r3, [r7, #52]	; 0x34
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	61fb      	str	r3, [r7, #28]
 800be58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	69b9      	ldr	r1, [r7, #24]
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	617b      	str	r3, [r7, #20]
   return(result);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e6      	bne.n	800be38 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be6a:	e002      	b.n	800be72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800be6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be6e:	f7ff fa65 	bl	800b33c <HAL_UART_TxCpltCallback>
}
 800be72:	bf00      	nop
 800be74:	3740      	adds	r7, #64	; 0x40
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b084      	sub	sp, #16
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f7ff fa61 	bl	800b350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b086      	sub	sp, #24
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800beaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bebe:	2b80      	cmp	r3, #128	; 0x80
 800bec0:	d109      	bne.n	800bed6 <UART_DMAError+0x40>
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2b21      	cmp	r3, #33	; 0x21
 800bec6:	d106      	bne.n	800bed6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bed0:	6978      	ldr	r0, [r7, #20]
 800bed2:	f7ff fede 	bl	800bc92 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	2b40      	cmp	r3, #64	; 0x40
 800bee2:	d109      	bne.n	800bef8 <UART_DMAError+0x62>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b22      	cmp	r3, #34	; 0x22
 800bee8:	d106      	bne.n	800bef8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2200      	movs	r2, #0
 800beee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bef2:	6978      	ldr	r0, [r7, #20]
 800bef4:	f7ff ff0e 	bl	800bd14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800befe:	f043 0210 	orr.w	r2, r3, #16
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf08:	6978      	ldr	r0, [r7, #20]
 800bf0a:	f7ff fa2b 	bl	800b364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf0e:	bf00      	nop
 800bf10:	3718      	adds	r7, #24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fa15 	bl	800b364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf3a:	bf00      	nop
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b088      	sub	sp, #32
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	e853 3f00 	ldrex	r3, [r3]
 800bf56:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	61bb      	str	r3, [r7, #24]
 800bf6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6c:	6979      	ldr	r1, [r7, #20]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	e841 2300 	strex	r3, r2, [r1]
 800bf74:	613b      	str	r3, [r7, #16]
   return(result);
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff f9d6 	bl	800b33c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf90:	bf00      	nop
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d101      	bne.n	800bfea <HAL_UARTEx_DisableFifoMode+0x16>
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	e027      	b.n	800c03a <HAL_UARTEx_DisableFifoMode+0x66>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2224      	movs	r2, #36	; 0x24
 800bff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f022 0201 	bic.w	r2, r2, #1
 800c010:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c056:	2b01      	cmp	r3, #1
 800c058:	d101      	bne.n	800c05e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e02d      	b.n	800c0ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2224      	movs	r2, #36	; 0x24
 800c06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 0201 	bic.w	r2, r2, #1
 800c084:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f850 	bl	800c140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d101      	bne.n	800c0da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e02d      	b.n	800c136 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2224      	movs	r2, #36	; 0x24
 800c0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 0201 	bic.w	r2, r2, #1
 800c100:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	430a      	orrs	r2, r1
 800c114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f812 	bl	800c140 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2220      	movs	r2, #32
 800c128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d108      	bne.n	800c162 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c160:	e031      	b.n	800c1c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c162:	2308      	movs	r3, #8
 800c164:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c166:	2308      	movs	r3, #8
 800c168:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	0e5b      	lsrs	r3, r3, #25
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 0307 	and.w	r3, r3, #7
 800c178:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	0f5b      	lsrs	r3, r3, #29
 800c182:	b2db      	uxtb	r3, r3
 800c184:	f003 0307 	and.w	r3, r3, #7
 800c188:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	7b3a      	ldrb	r2, [r7, #12]
 800c18e:	4911      	ldr	r1, [pc, #68]	; (800c1d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c190:	5c8a      	ldrb	r2, [r1, r2]
 800c192:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c196:	7b3a      	ldrb	r2, [r7, #12]
 800c198:	490f      	ldr	r1, [pc, #60]	; (800c1d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c19a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c19c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	7b7a      	ldrb	r2, [r7, #13]
 800c1ac:	4909      	ldr	r1, [pc, #36]	; (800c1d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c1ae:	5c8a      	ldrb	r2, [r1, r2]
 800c1b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1b4:	7b7a      	ldrb	r2, [r7, #13]
 800c1b6:	4908      	ldr	r1, [pc, #32]	; (800c1d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c1b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c1c6:	bf00      	nop
 800c1c8:	3714      	adds	r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	0800cc14 	.word	0x0800cc14
 800c1d8:	0800cc1c 	.word	0x0800cc1c

0800c1dc <_vsniprintf_r>:
 800c1dc:	b530      	push	{r4, r5, lr}
 800c1de:	4614      	mov	r4, r2
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	b09b      	sub	sp, #108	; 0x6c
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	da05      	bge.n	800c1f6 <_vsniprintf_r+0x1a>
 800c1ea:	238b      	movs	r3, #139	; 0x8b
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f2:	b01b      	add	sp, #108	; 0x6c
 800c1f4:	bd30      	pop	{r4, r5, pc}
 800c1f6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c1fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c1fe:	bf14      	ite	ne
 800c200:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c204:	4623      	moveq	r3, r4
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	9305      	str	r3, [sp, #20]
 800c20a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c20e:	9100      	str	r1, [sp, #0]
 800c210:	9104      	str	r1, [sp, #16]
 800c212:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c216:	4669      	mov	r1, sp
 800c218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c21a:	f000 f9ad 	bl	800c578 <_svfiprintf_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	bfbc      	itt	lt
 800c222:	238b      	movlt	r3, #139	; 0x8b
 800c224:	602b      	strlt	r3, [r5, #0]
 800c226:	2c00      	cmp	r4, #0
 800c228:	d0e3      	beq.n	800c1f2 <_vsniprintf_r+0x16>
 800c22a:	9b00      	ldr	r3, [sp, #0]
 800c22c:	2200      	movs	r2, #0
 800c22e:	701a      	strb	r2, [r3, #0]
 800c230:	e7df      	b.n	800c1f2 <_vsniprintf_r+0x16>
	...

0800c234 <vsniprintf>:
 800c234:	b507      	push	{r0, r1, r2, lr}
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	4613      	mov	r3, r2
 800c23a:	460a      	mov	r2, r1
 800c23c:	4601      	mov	r1, r0
 800c23e:	4803      	ldr	r0, [pc, #12]	; (800c24c <vsniprintf+0x18>)
 800c240:	6800      	ldr	r0, [r0, #0]
 800c242:	f7ff ffcb 	bl	800c1dc <_vsniprintf_r>
 800c246:	b003      	add	sp, #12
 800c248:	f85d fb04 	ldr.w	pc, [sp], #4
 800c24c:	20000130 	.word	0x20000130

0800c250 <memset>:
 800c250:	4402      	add	r2, r0
 800c252:	4603      	mov	r3, r0
 800c254:	4293      	cmp	r3, r2
 800c256:	d100      	bne.n	800c25a <memset+0xa>
 800c258:	4770      	bx	lr
 800c25a:	f803 1b01 	strb.w	r1, [r3], #1
 800c25e:	e7f9      	b.n	800c254 <memset+0x4>

0800c260 <__errno>:
 800c260:	4b01      	ldr	r3, [pc, #4]	; (800c268 <__errno+0x8>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000130 	.word	0x20000130

0800c26c <__libc_init_array>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4d0d      	ldr	r5, [pc, #52]	; (800c2a4 <__libc_init_array+0x38>)
 800c270:	4c0d      	ldr	r4, [pc, #52]	; (800c2a8 <__libc_init_array+0x3c>)
 800c272:	1b64      	subs	r4, r4, r5
 800c274:	10a4      	asrs	r4, r4, #2
 800c276:	2600      	movs	r6, #0
 800c278:	42a6      	cmp	r6, r4
 800c27a:	d109      	bne.n	800c290 <__libc_init_array+0x24>
 800c27c:	4d0b      	ldr	r5, [pc, #44]	; (800c2ac <__libc_init_array+0x40>)
 800c27e:	4c0c      	ldr	r4, [pc, #48]	; (800c2b0 <__libc_init_array+0x44>)
 800c280:	f000 fc6a 	bl	800cb58 <_init>
 800c284:	1b64      	subs	r4, r4, r5
 800c286:	10a4      	asrs	r4, r4, #2
 800c288:	2600      	movs	r6, #0
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	d105      	bne.n	800c29a <__libc_init_array+0x2e>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	f855 3b04 	ldr.w	r3, [r5], #4
 800c294:	4798      	blx	r3
 800c296:	3601      	adds	r6, #1
 800c298:	e7ee      	b.n	800c278 <__libc_init_array+0xc>
 800c29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29e:	4798      	blx	r3
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e7f2      	b.n	800c28a <__libc_init_array+0x1e>
 800c2a4:	0800cc60 	.word	0x0800cc60
 800c2a8:	0800cc60 	.word	0x0800cc60
 800c2ac:	0800cc60 	.word	0x0800cc60
 800c2b0:	0800cc64 	.word	0x0800cc64

0800c2b4 <__retarget_lock_acquire_recursive>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__retarget_lock_release_recursive>:
 800c2b6:	4770      	bx	lr

0800c2b8 <memcpy>:
 800c2b8:	440a      	add	r2, r1
 800c2ba:	4291      	cmp	r1, r2
 800c2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2c0:	d100      	bne.n	800c2c4 <memcpy+0xc>
 800c2c2:	4770      	bx	lr
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ce:	4291      	cmp	r1, r2
 800c2d0:	d1f9      	bne.n	800c2c6 <memcpy+0xe>
 800c2d2:	bd10      	pop	{r4, pc}

0800c2d4 <_free_r>:
 800c2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d044      	beq.n	800c364 <_free_r+0x90>
 800c2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2de:	9001      	str	r0, [sp, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2e6:	bfb8      	it	lt
 800c2e8:	18e4      	addlt	r4, r4, r3
 800c2ea:	f000 f8df 	bl	800c4ac <__malloc_lock>
 800c2ee:	4a1e      	ldr	r2, [pc, #120]	; (800c368 <_free_r+0x94>)
 800c2f0:	9801      	ldr	r0, [sp, #4]
 800c2f2:	6813      	ldr	r3, [r2, #0]
 800c2f4:	b933      	cbnz	r3, 800c304 <_free_r+0x30>
 800c2f6:	6063      	str	r3, [r4, #4]
 800c2f8:	6014      	str	r4, [r2, #0]
 800c2fa:	b003      	add	sp, #12
 800c2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c300:	f000 b8da 	b.w	800c4b8 <__malloc_unlock>
 800c304:	42a3      	cmp	r3, r4
 800c306:	d908      	bls.n	800c31a <_free_r+0x46>
 800c308:	6825      	ldr	r5, [r4, #0]
 800c30a:	1961      	adds	r1, r4, r5
 800c30c:	428b      	cmp	r3, r1
 800c30e:	bf01      	itttt	eq
 800c310:	6819      	ldreq	r1, [r3, #0]
 800c312:	685b      	ldreq	r3, [r3, #4]
 800c314:	1949      	addeq	r1, r1, r5
 800c316:	6021      	streq	r1, [r4, #0]
 800c318:	e7ed      	b.n	800c2f6 <_free_r+0x22>
 800c31a:	461a      	mov	r2, r3
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	b10b      	cbz	r3, 800c324 <_free_r+0x50>
 800c320:	42a3      	cmp	r3, r4
 800c322:	d9fa      	bls.n	800c31a <_free_r+0x46>
 800c324:	6811      	ldr	r1, [r2, #0]
 800c326:	1855      	adds	r5, r2, r1
 800c328:	42a5      	cmp	r5, r4
 800c32a:	d10b      	bne.n	800c344 <_free_r+0x70>
 800c32c:	6824      	ldr	r4, [r4, #0]
 800c32e:	4421      	add	r1, r4
 800c330:	1854      	adds	r4, r2, r1
 800c332:	42a3      	cmp	r3, r4
 800c334:	6011      	str	r1, [r2, #0]
 800c336:	d1e0      	bne.n	800c2fa <_free_r+0x26>
 800c338:	681c      	ldr	r4, [r3, #0]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	6053      	str	r3, [r2, #4]
 800c33e:	440c      	add	r4, r1
 800c340:	6014      	str	r4, [r2, #0]
 800c342:	e7da      	b.n	800c2fa <_free_r+0x26>
 800c344:	d902      	bls.n	800c34c <_free_r+0x78>
 800c346:	230c      	movs	r3, #12
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	e7d6      	b.n	800c2fa <_free_r+0x26>
 800c34c:	6825      	ldr	r5, [r4, #0]
 800c34e:	1961      	adds	r1, r4, r5
 800c350:	428b      	cmp	r3, r1
 800c352:	bf04      	itt	eq
 800c354:	6819      	ldreq	r1, [r3, #0]
 800c356:	685b      	ldreq	r3, [r3, #4]
 800c358:	6063      	str	r3, [r4, #4]
 800c35a:	bf04      	itt	eq
 800c35c:	1949      	addeq	r1, r1, r5
 800c35e:	6021      	streq	r1, [r4, #0]
 800c360:	6054      	str	r4, [r2, #4]
 800c362:	e7ca      	b.n	800c2fa <_free_r+0x26>
 800c364:	b003      	add	sp, #12
 800c366:	bd30      	pop	{r4, r5, pc}
 800c368:	20000ed0 	.word	0x20000ed0

0800c36c <sbrk_aligned>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	4e0e      	ldr	r6, [pc, #56]	; (800c3a8 <sbrk_aligned+0x3c>)
 800c370:	460c      	mov	r4, r1
 800c372:	6831      	ldr	r1, [r6, #0]
 800c374:	4605      	mov	r5, r0
 800c376:	b911      	cbnz	r1, 800c37e <sbrk_aligned+0x12>
 800c378:	f000 fba6 	bl	800cac8 <_sbrk_r>
 800c37c:	6030      	str	r0, [r6, #0]
 800c37e:	4621      	mov	r1, r4
 800c380:	4628      	mov	r0, r5
 800c382:	f000 fba1 	bl	800cac8 <_sbrk_r>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	d00a      	beq.n	800c3a0 <sbrk_aligned+0x34>
 800c38a:	1cc4      	adds	r4, r0, #3
 800c38c:	f024 0403 	bic.w	r4, r4, #3
 800c390:	42a0      	cmp	r0, r4
 800c392:	d007      	beq.n	800c3a4 <sbrk_aligned+0x38>
 800c394:	1a21      	subs	r1, r4, r0
 800c396:	4628      	mov	r0, r5
 800c398:	f000 fb96 	bl	800cac8 <_sbrk_r>
 800c39c:	3001      	adds	r0, #1
 800c39e:	d101      	bne.n	800c3a4 <sbrk_aligned+0x38>
 800c3a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	20000ed4 	.word	0x20000ed4

0800c3ac <_malloc_r>:
 800c3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b0:	1ccd      	adds	r5, r1, #3
 800c3b2:	f025 0503 	bic.w	r5, r5, #3
 800c3b6:	3508      	adds	r5, #8
 800c3b8:	2d0c      	cmp	r5, #12
 800c3ba:	bf38      	it	cc
 800c3bc:	250c      	movcc	r5, #12
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	4607      	mov	r7, r0
 800c3c2:	db01      	blt.n	800c3c8 <_malloc_r+0x1c>
 800c3c4:	42a9      	cmp	r1, r5
 800c3c6:	d905      	bls.n	800c3d4 <_malloc_r+0x28>
 800c3c8:	230c      	movs	r3, #12
 800c3ca:	603b      	str	r3, [r7, #0]
 800c3cc:	2600      	movs	r6, #0
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4a8 <_malloc_r+0xfc>
 800c3d8:	f000 f868 	bl	800c4ac <__malloc_lock>
 800c3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e0:	461c      	mov	r4, r3
 800c3e2:	bb5c      	cbnz	r4, 800c43c <_malloc_r+0x90>
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f7ff ffc0 	bl	800c36c <sbrk_aligned>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	d155      	bne.n	800c49e <_malloc_r+0xf2>
 800c3f2:	f8d8 4000 	ldr.w	r4, [r8]
 800c3f6:	4626      	mov	r6, r4
 800c3f8:	2e00      	cmp	r6, #0
 800c3fa:	d145      	bne.n	800c488 <_malloc_r+0xdc>
 800c3fc:	2c00      	cmp	r4, #0
 800c3fe:	d048      	beq.n	800c492 <_malloc_r+0xe6>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	4631      	mov	r1, r6
 800c404:	4638      	mov	r0, r7
 800c406:	eb04 0903 	add.w	r9, r4, r3
 800c40a:	f000 fb5d 	bl	800cac8 <_sbrk_r>
 800c40e:	4581      	cmp	r9, r0
 800c410:	d13f      	bne.n	800c492 <_malloc_r+0xe6>
 800c412:	6821      	ldr	r1, [r4, #0]
 800c414:	1a6d      	subs	r5, r5, r1
 800c416:	4629      	mov	r1, r5
 800c418:	4638      	mov	r0, r7
 800c41a:	f7ff ffa7 	bl	800c36c <sbrk_aligned>
 800c41e:	3001      	adds	r0, #1
 800c420:	d037      	beq.n	800c492 <_malloc_r+0xe6>
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	442b      	add	r3, r5
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	f8d8 3000 	ldr.w	r3, [r8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d038      	beq.n	800c4a2 <_malloc_r+0xf6>
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	42a2      	cmp	r2, r4
 800c434:	d12b      	bne.n	800c48e <_malloc_r+0xe2>
 800c436:	2200      	movs	r2, #0
 800c438:	605a      	str	r2, [r3, #4]
 800c43a:	e00f      	b.n	800c45c <_malloc_r+0xb0>
 800c43c:	6822      	ldr	r2, [r4, #0]
 800c43e:	1b52      	subs	r2, r2, r5
 800c440:	d41f      	bmi.n	800c482 <_malloc_r+0xd6>
 800c442:	2a0b      	cmp	r2, #11
 800c444:	d917      	bls.n	800c476 <_malloc_r+0xca>
 800c446:	1961      	adds	r1, r4, r5
 800c448:	42a3      	cmp	r3, r4
 800c44a:	6025      	str	r5, [r4, #0]
 800c44c:	bf18      	it	ne
 800c44e:	6059      	strne	r1, [r3, #4]
 800c450:	6863      	ldr	r3, [r4, #4]
 800c452:	bf08      	it	eq
 800c454:	f8c8 1000 	streq.w	r1, [r8]
 800c458:	5162      	str	r2, [r4, r5]
 800c45a:	604b      	str	r3, [r1, #4]
 800c45c:	4638      	mov	r0, r7
 800c45e:	f104 060b 	add.w	r6, r4, #11
 800c462:	f000 f829 	bl	800c4b8 <__malloc_unlock>
 800c466:	f026 0607 	bic.w	r6, r6, #7
 800c46a:	1d23      	adds	r3, r4, #4
 800c46c:	1af2      	subs	r2, r6, r3
 800c46e:	d0ae      	beq.n	800c3ce <_malloc_r+0x22>
 800c470:	1b9b      	subs	r3, r3, r6
 800c472:	50a3      	str	r3, [r4, r2]
 800c474:	e7ab      	b.n	800c3ce <_malloc_r+0x22>
 800c476:	42a3      	cmp	r3, r4
 800c478:	6862      	ldr	r2, [r4, #4]
 800c47a:	d1dd      	bne.n	800c438 <_malloc_r+0x8c>
 800c47c:	f8c8 2000 	str.w	r2, [r8]
 800c480:	e7ec      	b.n	800c45c <_malloc_r+0xb0>
 800c482:	4623      	mov	r3, r4
 800c484:	6864      	ldr	r4, [r4, #4]
 800c486:	e7ac      	b.n	800c3e2 <_malloc_r+0x36>
 800c488:	4634      	mov	r4, r6
 800c48a:	6876      	ldr	r6, [r6, #4]
 800c48c:	e7b4      	b.n	800c3f8 <_malloc_r+0x4c>
 800c48e:	4613      	mov	r3, r2
 800c490:	e7cc      	b.n	800c42c <_malloc_r+0x80>
 800c492:	230c      	movs	r3, #12
 800c494:	603b      	str	r3, [r7, #0]
 800c496:	4638      	mov	r0, r7
 800c498:	f000 f80e 	bl	800c4b8 <__malloc_unlock>
 800c49c:	e797      	b.n	800c3ce <_malloc_r+0x22>
 800c49e:	6025      	str	r5, [r4, #0]
 800c4a0:	e7dc      	b.n	800c45c <_malloc_r+0xb0>
 800c4a2:	605b      	str	r3, [r3, #4]
 800c4a4:	deff      	udf	#255	; 0xff
 800c4a6:	bf00      	nop
 800c4a8:	20000ed0 	.word	0x20000ed0

0800c4ac <__malloc_lock>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__malloc_lock+0x8>)
 800c4ae:	f7ff bf01 	b.w	800c2b4 <__retarget_lock_acquire_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20000ecc 	.word	0x20000ecc

0800c4b8 <__malloc_unlock>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__malloc_unlock+0x8>)
 800c4ba:	f7ff befc 	b.w	800c2b6 <__retarget_lock_release_recursive>
 800c4be:	bf00      	nop
 800c4c0:	20000ecc 	.word	0x20000ecc

0800c4c4 <__ssputs_r>:
 800c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c8:	688e      	ldr	r6, [r1, #8]
 800c4ca:	461f      	mov	r7, r3
 800c4cc:	42be      	cmp	r6, r7
 800c4ce:	680b      	ldr	r3, [r1, #0]
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	4690      	mov	r8, r2
 800c4d6:	d82c      	bhi.n	800c532 <__ssputs_r+0x6e>
 800c4d8:	898a      	ldrh	r2, [r1, #12]
 800c4da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4de:	d026      	beq.n	800c52e <__ssputs_r+0x6a>
 800c4e0:	6965      	ldr	r5, [r4, #20]
 800c4e2:	6909      	ldr	r1, [r1, #16]
 800c4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e8:	eba3 0901 	sub.w	r9, r3, r1
 800c4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f0:	1c7b      	adds	r3, r7, #1
 800c4f2:	444b      	add	r3, r9
 800c4f4:	106d      	asrs	r5, r5, #1
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf38      	it	cc
 800c4fa:	461d      	movcc	r5, r3
 800c4fc:	0553      	lsls	r3, r2, #21
 800c4fe:	d527      	bpl.n	800c550 <__ssputs_r+0x8c>
 800c500:	4629      	mov	r1, r5
 800c502:	f7ff ff53 	bl	800c3ac <_malloc_r>
 800c506:	4606      	mov	r6, r0
 800c508:	b360      	cbz	r0, 800c564 <__ssputs_r+0xa0>
 800c50a:	6921      	ldr	r1, [r4, #16]
 800c50c:	464a      	mov	r2, r9
 800c50e:	f7ff fed3 	bl	800c2b8 <memcpy>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6126      	str	r6, [r4, #16]
 800c520:	6165      	str	r5, [r4, #20]
 800c522:	444e      	add	r6, r9
 800c524:	eba5 0509 	sub.w	r5, r5, r9
 800c528:	6026      	str	r6, [r4, #0]
 800c52a:	60a5      	str	r5, [r4, #8]
 800c52c:	463e      	mov	r6, r7
 800c52e:	42be      	cmp	r6, r7
 800c530:	d900      	bls.n	800c534 <__ssputs_r+0x70>
 800c532:	463e      	mov	r6, r7
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	4632      	mov	r2, r6
 800c538:	4641      	mov	r1, r8
 800c53a:	f000 faab 	bl	800ca94 <memmove>
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	1b9b      	subs	r3, r3, r6
 800c542:	60a3      	str	r3, [r4, #8]
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	4433      	add	r3, r6
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2000      	movs	r0, #0
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	462a      	mov	r2, r5
 800c552:	f000 fac9 	bl	800cae8 <_realloc_r>
 800c556:	4606      	mov	r6, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d1e0      	bne.n	800c51e <__ssputs_r+0x5a>
 800c55c:	6921      	ldr	r1, [r4, #16]
 800c55e:	4650      	mov	r0, sl
 800c560:	f7ff feb8 	bl	800c2d4 <_free_r>
 800c564:	230c      	movs	r3, #12
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	e7e9      	b.n	800c54c <__ssputs_r+0x88>

0800c578 <_svfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	4698      	mov	r8, r3
 800c57e:	898b      	ldrh	r3, [r1, #12]
 800c580:	061b      	lsls	r3, r3, #24
 800c582:	b09d      	sub	sp, #116	; 0x74
 800c584:	4607      	mov	r7, r0
 800c586:	460d      	mov	r5, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	d50e      	bpl.n	800c5aa <_svfiprintf_r+0x32>
 800c58c:	690b      	ldr	r3, [r1, #16]
 800c58e:	b963      	cbnz	r3, 800c5aa <_svfiprintf_r+0x32>
 800c590:	2140      	movs	r1, #64	; 0x40
 800c592:	f7ff ff0b 	bl	800c3ac <_malloc_r>
 800c596:	6028      	str	r0, [r5, #0]
 800c598:	6128      	str	r0, [r5, #16]
 800c59a:	b920      	cbnz	r0, 800c5a6 <_svfiprintf_r+0x2e>
 800c59c:	230c      	movs	r3, #12
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a4:	e0d0      	b.n	800c748 <_svfiprintf_r+0x1d0>
 800c5a6:	2340      	movs	r3, #64	; 0x40
 800c5a8:	616b      	str	r3, [r5, #20]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ae:	2320      	movs	r3, #32
 800c5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b8:	2330      	movs	r3, #48	; 0x30
 800c5ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c760 <_svfiprintf_r+0x1e8>
 800c5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5c2:	f04f 0901 	mov.w	r9, #1
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ce:	b10a      	cbz	r2, 800c5d4 <_svfiprintf_r+0x5c>
 800c5d0:	2a25      	cmp	r2, #37	; 0x25
 800c5d2:	d1f9      	bne.n	800c5c8 <_svfiprintf_r+0x50>
 800c5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d8:	d00b      	beq.n	800c5f2 <_svfiprintf_r+0x7a>
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4622      	mov	r2, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ff6f 	bl	800c4c4 <__ssputs_r>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f000 80a9 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5ee:	445a      	add	r2, fp
 800c5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 80a1 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c606:	f10a 0a01 	add.w	sl, sl, #1
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9307      	str	r3, [sp, #28]
 800c60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c612:	931a      	str	r3, [sp, #104]	; 0x68
 800c614:	4654      	mov	r4, sl
 800c616:	2205      	movs	r2, #5
 800c618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61c:	4850      	ldr	r0, [pc, #320]	; (800c760 <_svfiprintf_r+0x1e8>)
 800c61e:	f7f3 fe07 	bl	8000230 <memchr>
 800c622:	9a04      	ldr	r2, [sp, #16]
 800c624:	b9d8      	cbnz	r0, 800c65e <_svfiprintf_r+0xe6>
 800c626:	06d0      	lsls	r0, r2, #27
 800c628:	bf44      	itt	mi
 800c62a:	2320      	movmi	r3, #32
 800c62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c630:	0711      	lsls	r1, r2, #28
 800c632:	bf44      	itt	mi
 800c634:	232b      	movmi	r3, #43	; 0x2b
 800c636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c63a:	f89a 3000 	ldrb.w	r3, [sl]
 800c63e:	2b2a      	cmp	r3, #42	; 0x2a
 800c640:	d015      	beq.n	800c66e <_svfiprintf_r+0xf6>
 800c642:	9a07      	ldr	r2, [sp, #28]
 800c644:	4654      	mov	r4, sl
 800c646:	2000      	movs	r0, #0
 800c648:	f04f 0c0a 	mov.w	ip, #10
 800c64c:	4621      	mov	r1, r4
 800c64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c652:	3b30      	subs	r3, #48	; 0x30
 800c654:	2b09      	cmp	r3, #9
 800c656:	d94d      	bls.n	800c6f4 <_svfiprintf_r+0x17c>
 800c658:	b1b0      	cbz	r0, 800c688 <_svfiprintf_r+0x110>
 800c65a:	9207      	str	r2, [sp, #28]
 800c65c:	e014      	b.n	800c688 <_svfiprintf_r+0x110>
 800c65e:	eba0 0308 	sub.w	r3, r0, r8
 800c662:	fa09 f303 	lsl.w	r3, r9, r3
 800c666:	4313      	orrs	r3, r2
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	46a2      	mov	sl, r4
 800c66c:	e7d2      	b.n	800c614 <_svfiprintf_r+0x9c>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	1d19      	adds	r1, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	9103      	str	r1, [sp, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	bfbb      	ittet	lt
 800c67a:	425b      	neglt	r3, r3
 800c67c:	f042 0202 	orrlt.w	r2, r2, #2
 800c680:	9307      	strge	r3, [sp, #28]
 800c682:	9307      	strlt	r3, [sp, #28]
 800c684:	bfb8      	it	lt
 800c686:	9204      	strlt	r2, [sp, #16]
 800c688:	7823      	ldrb	r3, [r4, #0]
 800c68a:	2b2e      	cmp	r3, #46	; 0x2e
 800c68c:	d10c      	bne.n	800c6a8 <_svfiprintf_r+0x130>
 800c68e:	7863      	ldrb	r3, [r4, #1]
 800c690:	2b2a      	cmp	r3, #42	; 0x2a
 800c692:	d134      	bne.n	800c6fe <_svfiprintf_r+0x186>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	9203      	str	r2, [sp, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bfb8      	it	lt
 800c6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6a4:	3402      	adds	r4, #2
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c770 <_svfiprintf_r+0x1f8>
 800c6ac:	7821      	ldrb	r1, [r4, #0]
 800c6ae:	2203      	movs	r2, #3
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	f7f3 fdbd 	bl	8000230 <memchr>
 800c6b6:	b138      	cbz	r0, 800c6c8 <_svfiprintf_r+0x150>
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	eba0 000a 	sub.w	r0, r0, sl
 800c6be:	2240      	movs	r2, #64	; 0x40
 800c6c0:	4082      	lsls	r2, r0
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6cc:	4825      	ldr	r0, [pc, #148]	; (800c764 <_svfiprintf_r+0x1ec>)
 800c6ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	f7f3 fdac 	bl	8000230 <memchr>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d038      	beq.n	800c74e <_svfiprintf_r+0x1d6>
 800c6dc:	4b22      	ldr	r3, [pc, #136]	; (800c768 <_svfiprintf_r+0x1f0>)
 800c6de:	bb1b      	cbnz	r3, 800c728 <_svfiprintf_r+0x1b0>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	f023 0307 	bic.w	r3, r3, #7
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ee:	4433      	add	r3, r6
 800c6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f2:	e768      	b.n	800c5c6 <_svfiprintf_r+0x4e>
 800c6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7a6      	b.n	800c64c <_svfiprintf_r+0xd4>
 800c6fe:	2300      	movs	r3, #0
 800c700:	3401      	adds	r4, #1
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	4619      	mov	r1, r3
 800c706:	f04f 0c0a 	mov.w	ip, #10
 800c70a:	4620      	mov	r0, r4
 800c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c710:	3a30      	subs	r2, #48	; 0x30
 800c712:	2a09      	cmp	r2, #9
 800c714:	d903      	bls.n	800c71e <_svfiprintf_r+0x1a6>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c6      	beq.n	800c6a8 <_svfiprintf_r+0x130>
 800c71a:	9105      	str	r1, [sp, #20]
 800c71c:	e7c4      	b.n	800c6a8 <_svfiprintf_r+0x130>
 800c71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c722:	4604      	mov	r4, r0
 800c724:	2301      	movs	r3, #1
 800c726:	e7f0      	b.n	800c70a <_svfiprintf_r+0x192>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <_svfiprintf_r+0x1f4>)
 800c730:	a904      	add	r1, sp, #16
 800c732:	4638      	mov	r0, r7
 800c734:	f3af 8000 	nop.w
 800c738:	1c42      	adds	r2, r0, #1
 800c73a:	4606      	mov	r6, r0
 800c73c:	d1d6      	bne.n	800c6ec <_svfiprintf_r+0x174>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	065b      	lsls	r3, r3, #25
 800c742:	f53f af2d 	bmi.w	800c5a0 <_svfiprintf_r+0x28>
 800c746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c748:	b01d      	add	sp, #116	; 0x74
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <_svfiprintf_r+0x1f4>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4638      	mov	r0, r7
 800c75a:	f000 f879 	bl	800c850 <_printf_i>
 800c75e:	e7eb      	b.n	800c738 <_svfiprintf_r+0x1c0>
 800c760:	0800cc24 	.word	0x0800cc24
 800c764:	0800cc2e 	.word	0x0800cc2e
 800c768:	00000000 	.word	0x00000000
 800c76c:	0800c4c5 	.word	0x0800c4c5
 800c770:	0800cc2a 	.word	0x0800cc2a

0800c774 <_printf_common>:
 800c774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c778:	4616      	mov	r6, r2
 800c77a:	4699      	mov	r9, r3
 800c77c:	688a      	ldr	r2, [r1, #8]
 800c77e:	690b      	ldr	r3, [r1, #16]
 800c780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c784:	4293      	cmp	r3, r2
 800c786:	bfb8      	it	lt
 800c788:	4613      	movlt	r3, r2
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c790:	4607      	mov	r7, r0
 800c792:	460c      	mov	r4, r1
 800c794:	b10a      	cbz	r2, 800c79a <_printf_common+0x26>
 800c796:	3301      	adds	r3, #1
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	0699      	lsls	r1, r3, #26
 800c79e:	bf42      	ittt	mi
 800c7a0:	6833      	ldrmi	r3, [r6, #0]
 800c7a2:	3302      	addmi	r3, #2
 800c7a4:	6033      	strmi	r3, [r6, #0]
 800c7a6:	6825      	ldr	r5, [r4, #0]
 800c7a8:	f015 0506 	ands.w	r5, r5, #6
 800c7ac:	d106      	bne.n	800c7bc <_printf_common+0x48>
 800c7ae:	f104 0a19 	add.w	sl, r4, #25
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	6832      	ldr	r2, [r6, #0]
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	dc26      	bgt.n	800c80a <_printf_common+0x96>
 800c7bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7c0:	1e13      	subs	r3, r2, #0
 800c7c2:	6822      	ldr	r2, [r4, #0]
 800c7c4:	bf18      	it	ne
 800c7c6:	2301      	movne	r3, #1
 800c7c8:	0692      	lsls	r2, r2, #26
 800c7ca:	d42b      	bmi.n	800c824 <_printf_common+0xb0>
 800c7cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c0      	blx	r8
 800c7d6:	3001      	adds	r0, #1
 800c7d8:	d01e      	beq.n	800c818 <_printf_common+0xa4>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	6922      	ldr	r2, [r4, #16]
 800c7de:	f003 0306 	and.w	r3, r3, #6
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	bf02      	ittt	eq
 800c7e6:	68e5      	ldreq	r5, [r4, #12]
 800c7e8:	6833      	ldreq	r3, [r6, #0]
 800c7ea:	1aed      	subeq	r5, r5, r3
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	bf0c      	ite	eq
 800c7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7f4:	2500      	movne	r5, #0
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	bfc4      	itt	gt
 800c7fa:	1a9b      	subgt	r3, r3, r2
 800c7fc:	18ed      	addgt	r5, r5, r3
 800c7fe:	2600      	movs	r6, #0
 800c800:	341a      	adds	r4, #26
 800c802:	42b5      	cmp	r5, r6
 800c804:	d11a      	bne.n	800c83c <_printf_common+0xc8>
 800c806:	2000      	movs	r0, #0
 800c808:	e008      	b.n	800c81c <_printf_common+0xa8>
 800c80a:	2301      	movs	r3, #1
 800c80c:	4652      	mov	r2, sl
 800c80e:	4649      	mov	r1, r9
 800c810:	4638      	mov	r0, r7
 800c812:	47c0      	blx	r8
 800c814:	3001      	adds	r0, #1
 800c816:	d103      	bne.n	800c820 <_printf_common+0xac>
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	3501      	adds	r5, #1
 800c822:	e7c6      	b.n	800c7b2 <_printf_common+0x3e>
 800c824:	18e1      	adds	r1, r4, r3
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	2030      	movs	r0, #48	; 0x30
 800c82a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c82e:	4422      	add	r2, r4
 800c830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c838:	3302      	adds	r3, #2
 800c83a:	e7c7      	b.n	800c7cc <_printf_common+0x58>
 800c83c:	2301      	movs	r3, #1
 800c83e:	4622      	mov	r2, r4
 800c840:	4649      	mov	r1, r9
 800c842:	4638      	mov	r0, r7
 800c844:	47c0      	blx	r8
 800c846:	3001      	adds	r0, #1
 800c848:	d0e6      	beq.n	800c818 <_printf_common+0xa4>
 800c84a:	3601      	adds	r6, #1
 800c84c:	e7d9      	b.n	800c802 <_printf_common+0x8e>
	...

0800c850 <_printf_i>:
 800c850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c854:	7e0f      	ldrb	r7, [r1, #24]
 800c856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c858:	2f78      	cmp	r7, #120	; 0x78
 800c85a:	4691      	mov	r9, r2
 800c85c:	4680      	mov	r8, r0
 800c85e:	460c      	mov	r4, r1
 800c860:	469a      	mov	sl, r3
 800c862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c866:	d807      	bhi.n	800c878 <_printf_i+0x28>
 800c868:	2f62      	cmp	r7, #98	; 0x62
 800c86a:	d80a      	bhi.n	800c882 <_printf_i+0x32>
 800c86c:	2f00      	cmp	r7, #0
 800c86e:	f000 80d4 	beq.w	800ca1a <_printf_i+0x1ca>
 800c872:	2f58      	cmp	r7, #88	; 0x58
 800c874:	f000 80c0 	beq.w	800c9f8 <_printf_i+0x1a8>
 800c878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c87c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c880:	e03a      	b.n	800c8f8 <_printf_i+0xa8>
 800c882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c886:	2b15      	cmp	r3, #21
 800c888:	d8f6      	bhi.n	800c878 <_printf_i+0x28>
 800c88a:	a101      	add	r1, pc, #4	; (adr r1, 800c890 <_printf_i+0x40>)
 800c88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c890:	0800c8e9 	.word	0x0800c8e9
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c879 	.word	0x0800c879
 800c89c:	0800c879 	.word	0x0800c879
 800c8a0:	0800c879 	.word	0x0800c879
 800c8a4:	0800c879 	.word	0x0800c879
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800c879 	.word	0x0800c879
 800c8b0:	0800c879 	.word	0x0800c879
 800c8b4:	0800c879 	.word	0x0800c879
 800c8b8:	0800c879 	.word	0x0800c879
 800c8bc:	0800ca01 	.word	0x0800ca01
 800c8c0:	0800c929 	.word	0x0800c929
 800c8c4:	0800c9bb 	.word	0x0800c9bb
 800c8c8:	0800c879 	.word	0x0800c879
 800c8cc:	0800c879 	.word	0x0800c879
 800c8d0:	0800ca23 	.word	0x0800ca23
 800c8d4:	0800c879 	.word	0x0800c879
 800c8d8:	0800c929 	.word	0x0800c929
 800c8dc:	0800c879 	.word	0x0800c879
 800c8e0:	0800c879 	.word	0x0800c879
 800c8e4:	0800c9c3 	.word	0x0800c9c3
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	1d1a      	adds	r2, r3, #4
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	602a      	str	r2, [r5, #0]
 800c8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e09f      	b.n	800ca3c <_printf_i+0x1ec>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	682b      	ldr	r3, [r5, #0]
 800c900:	0607      	lsls	r7, r0, #24
 800c902:	f103 0104 	add.w	r1, r3, #4
 800c906:	6029      	str	r1, [r5, #0]
 800c908:	d501      	bpl.n	800c90e <_printf_i+0xbe>
 800c90a:	681e      	ldr	r6, [r3, #0]
 800c90c:	e003      	b.n	800c916 <_printf_i+0xc6>
 800c90e:	0646      	lsls	r6, r0, #25
 800c910:	d5fb      	bpl.n	800c90a <_printf_i+0xba>
 800c912:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c916:	2e00      	cmp	r6, #0
 800c918:	da03      	bge.n	800c922 <_printf_i+0xd2>
 800c91a:	232d      	movs	r3, #45	; 0x2d
 800c91c:	4276      	negs	r6, r6
 800c91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c922:	485a      	ldr	r0, [pc, #360]	; (800ca8c <_printf_i+0x23c>)
 800c924:	230a      	movs	r3, #10
 800c926:	e012      	b.n	800c94e <_printf_i+0xfe>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	6820      	ldr	r0, [r4, #0]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	6029      	str	r1, [r5, #0]
 800c930:	0605      	lsls	r5, r0, #24
 800c932:	d501      	bpl.n	800c938 <_printf_i+0xe8>
 800c934:	681e      	ldr	r6, [r3, #0]
 800c936:	e002      	b.n	800c93e <_printf_i+0xee>
 800c938:	0641      	lsls	r1, r0, #25
 800c93a:	d5fb      	bpl.n	800c934 <_printf_i+0xe4>
 800c93c:	881e      	ldrh	r6, [r3, #0]
 800c93e:	4853      	ldr	r0, [pc, #332]	; (800ca8c <_printf_i+0x23c>)
 800c940:	2f6f      	cmp	r7, #111	; 0x6f
 800c942:	bf0c      	ite	eq
 800c944:	2308      	moveq	r3, #8
 800c946:	230a      	movne	r3, #10
 800c948:	2100      	movs	r1, #0
 800c94a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c94e:	6865      	ldr	r5, [r4, #4]
 800c950:	60a5      	str	r5, [r4, #8]
 800c952:	2d00      	cmp	r5, #0
 800c954:	bfa2      	ittt	ge
 800c956:	6821      	ldrge	r1, [r4, #0]
 800c958:	f021 0104 	bicge.w	r1, r1, #4
 800c95c:	6021      	strge	r1, [r4, #0]
 800c95e:	b90e      	cbnz	r6, 800c964 <_printf_i+0x114>
 800c960:	2d00      	cmp	r5, #0
 800c962:	d04b      	beq.n	800c9fc <_printf_i+0x1ac>
 800c964:	4615      	mov	r5, r2
 800c966:	fbb6 f1f3 	udiv	r1, r6, r3
 800c96a:	fb03 6711 	mls	r7, r3, r1, r6
 800c96e:	5dc7      	ldrb	r7, [r0, r7]
 800c970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c974:	4637      	mov	r7, r6
 800c976:	42bb      	cmp	r3, r7
 800c978:	460e      	mov	r6, r1
 800c97a:	d9f4      	bls.n	800c966 <_printf_i+0x116>
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d10b      	bne.n	800c998 <_printf_i+0x148>
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	07de      	lsls	r6, r3, #31
 800c984:	d508      	bpl.n	800c998 <_printf_i+0x148>
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	6861      	ldr	r1, [r4, #4]
 800c98a:	4299      	cmp	r1, r3
 800c98c:	bfde      	ittt	le
 800c98e:	2330      	movle	r3, #48	; 0x30
 800c990:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c994:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c998:	1b52      	subs	r2, r2, r5
 800c99a:	6122      	str	r2, [r4, #16]
 800c99c:	f8cd a000 	str.w	sl, [sp]
 800c9a0:	464b      	mov	r3, r9
 800c9a2:	aa03      	add	r2, sp, #12
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	4640      	mov	r0, r8
 800c9a8:	f7ff fee4 	bl	800c774 <_printf_common>
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d14a      	bne.n	800ca46 <_printf_i+0x1f6>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	b004      	add	sp, #16
 800c9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	f043 0320 	orr.w	r3, r3, #32
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	4833      	ldr	r0, [pc, #204]	; (800ca90 <_printf_i+0x240>)
 800c9c4:	2778      	movs	r7, #120	; 0x78
 800c9c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	6829      	ldr	r1, [r5, #0]
 800c9ce:	061f      	lsls	r7, r3, #24
 800c9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9d4:	d402      	bmi.n	800c9dc <_printf_i+0x18c>
 800c9d6:	065f      	lsls	r7, r3, #25
 800c9d8:	bf48      	it	mi
 800c9da:	b2b6      	uxthmi	r6, r6
 800c9dc:	07df      	lsls	r7, r3, #31
 800c9de:	bf48      	it	mi
 800c9e0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e4:	6029      	str	r1, [r5, #0]
 800c9e6:	bf48      	it	mi
 800c9e8:	6023      	strmi	r3, [r4, #0]
 800c9ea:	b91e      	cbnz	r6, 800c9f4 <_printf_i+0x1a4>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	f023 0320 	bic.w	r3, r3, #32
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	e7a7      	b.n	800c948 <_printf_i+0xf8>
 800c9f8:	4824      	ldr	r0, [pc, #144]	; (800ca8c <_printf_i+0x23c>)
 800c9fa:	e7e4      	b.n	800c9c6 <_printf_i+0x176>
 800c9fc:	4615      	mov	r5, r2
 800c9fe:	e7bd      	b.n	800c97c <_printf_i+0x12c>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	6826      	ldr	r6, [r4, #0]
 800ca04:	6961      	ldr	r1, [r4, #20]
 800ca06:	1d18      	adds	r0, r3, #4
 800ca08:	6028      	str	r0, [r5, #0]
 800ca0a:	0635      	lsls	r5, r6, #24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	d501      	bpl.n	800ca14 <_printf_i+0x1c4>
 800ca10:	6019      	str	r1, [r3, #0]
 800ca12:	e002      	b.n	800ca1a <_printf_i+0x1ca>
 800ca14:	0670      	lsls	r0, r6, #25
 800ca16:	d5fb      	bpl.n	800ca10 <_printf_i+0x1c0>
 800ca18:	8019      	strh	r1, [r3, #0]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	4615      	mov	r5, r2
 800ca20:	e7bc      	b.n	800c99c <_printf_i+0x14c>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	1d1a      	adds	r2, r3, #4
 800ca26:	602a      	str	r2, [r5, #0]
 800ca28:	681d      	ldr	r5, [r3, #0]
 800ca2a:	6862      	ldr	r2, [r4, #4]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f7f3 fbfe 	bl	8000230 <memchr>
 800ca34:	b108      	cbz	r0, 800ca3a <_printf_i+0x1ea>
 800ca36:	1b40      	subs	r0, r0, r5
 800ca38:	6060      	str	r0, [r4, #4]
 800ca3a:	6863      	ldr	r3, [r4, #4]
 800ca3c:	6123      	str	r3, [r4, #16]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca44:	e7aa      	b.n	800c99c <_printf_i+0x14c>
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	462a      	mov	r2, r5
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d0ad      	beq.n	800c9b0 <_printf_i+0x160>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	079b      	lsls	r3, r3, #30
 800ca58:	d413      	bmi.n	800ca82 <_printf_i+0x232>
 800ca5a:	68e0      	ldr	r0, [r4, #12]
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	4298      	cmp	r0, r3
 800ca60:	bfb8      	it	lt
 800ca62:	4618      	movlt	r0, r3
 800ca64:	e7a6      	b.n	800c9b4 <_printf_i+0x164>
 800ca66:	2301      	movs	r3, #1
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	47d0      	blx	sl
 800ca70:	3001      	adds	r0, #1
 800ca72:	d09d      	beq.n	800c9b0 <_printf_i+0x160>
 800ca74:	3501      	adds	r5, #1
 800ca76:	68e3      	ldr	r3, [r4, #12]
 800ca78:	9903      	ldr	r1, [sp, #12]
 800ca7a:	1a5b      	subs	r3, r3, r1
 800ca7c:	42ab      	cmp	r3, r5
 800ca7e:	dcf2      	bgt.n	800ca66 <_printf_i+0x216>
 800ca80:	e7eb      	b.n	800ca5a <_printf_i+0x20a>
 800ca82:	2500      	movs	r5, #0
 800ca84:	f104 0619 	add.w	r6, r4, #25
 800ca88:	e7f5      	b.n	800ca76 <_printf_i+0x226>
 800ca8a:	bf00      	nop
 800ca8c:	0800cc35 	.word	0x0800cc35
 800ca90:	0800cc46 	.word	0x0800cc46

0800ca94 <memmove>:
 800ca94:	4288      	cmp	r0, r1
 800ca96:	b510      	push	{r4, lr}
 800ca98:	eb01 0402 	add.w	r4, r1, r2
 800ca9c:	d902      	bls.n	800caa4 <memmove+0x10>
 800ca9e:	4284      	cmp	r4, r0
 800caa0:	4623      	mov	r3, r4
 800caa2:	d807      	bhi.n	800cab4 <memmove+0x20>
 800caa4:	1e43      	subs	r3, r0, #1
 800caa6:	42a1      	cmp	r1, r4
 800caa8:	d008      	beq.n	800cabc <memmove+0x28>
 800caaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cab2:	e7f8      	b.n	800caa6 <memmove+0x12>
 800cab4:	4402      	add	r2, r0
 800cab6:	4601      	mov	r1, r0
 800cab8:	428a      	cmp	r2, r1
 800caba:	d100      	bne.n	800cabe <memmove+0x2a>
 800cabc:	bd10      	pop	{r4, pc}
 800cabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cac6:	e7f7      	b.n	800cab8 <memmove+0x24>

0800cac8 <_sbrk_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	; (800cae4 <_sbrk_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f6 fd9a 	bl	800360c <_sbrk>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_sbrk_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_sbrk_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20000ec8 	.word	0x20000ec8

0800cae8 <_realloc_r>:
 800cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caec:	4680      	mov	r8, r0
 800caee:	4614      	mov	r4, r2
 800caf0:	460e      	mov	r6, r1
 800caf2:	b921      	cbnz	r1, 800cafe <_realloc_r+0x16>
 800caf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	4611      	mov	r1, r2
 800cafa:	f7ff bc57 	b.w	800c3ac <_malloc_r>
 800cafe:	b92a      	cbnz	r2, 800cb0c <_realloc_r+0x24>
 800cb00:	f7ff fbe8 	bl	800c2d4 <_free_r>
 800cb04:	4625      	mov	r5, r4
 800cb06:	4628      	mov	r0, r5
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0c:	f000 f81b 	bl	800cb46 <_malloc_usable_size_r>
 800cb10:	4284      	cmp	r4, r0
 800cb12:	4607      	mov	r7, r0
 800cb14:	d802      	bhi.n	800cb1c <_realloc_r+0x34>
 800cb16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb1a:	d812      	bhi.n	800cb42 <_realloc_r+0x5a>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4640      	mov	r0, r8
 800cb20:	f7ff fc44 	bl	800c3ac <_malloc_r>
 800cb24:	4605      	mov	r5, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d0ed      	beq.n	800cb06 <_realloc_r+0x1e>
 800cb2a:	42bc      	cmp	r4, r7
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4631      	mov	r1, r6
 800cb30:	bf28      	it	cs
 800cb32:	463a      	movcs	r2, r7
 800cb34:	f7ff fbc0 	bl	800c2b8 <memcpy>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f7ff fbca 	bl	800c2d4 <_free_r>
 800cb40:	e7e1      	b.n	800cb06 <_realloc_r+0x1e>
 800cb42:	4635      	mov	r5, r6
 800cb44:	e7df      	b.n	800cb06 <_realloc_r+0x1e>

0800cb46 <_malloc_usable_size_r>:
 800cb46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb4a:	1f18      	subs	r0, r3, #4
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bfbc      	itt	lt
 800cb50:	580b      	ldrlt	r3, [r1, r0]
 800cb52:	18c0      	addlt	r0, r0, r3
 800cb54:	4770      	bx	lr
	...

0800cb58 <_init>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	bf00      	nop
 800cb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5e:	bc08      	pop	{r3}
 800cb60:	469e      	mov	lr, r3
 800cb62:	4770      	bx	lr

0800cb64 <_fini>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr
