
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800eac8  0800eac8  0001eac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed38  0800ed38  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed38  0800ed38  0001ed38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed40  0800ed40  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed40  0800ed40  0001ed40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed44  0800ed44  0001ed44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800ed48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000da8  20000148  0800ee90  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  0800ee90  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002565c  00000000  00000000  000201bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f10  00000000  00000000  00045817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dd8  00000000  00000000  0004a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ed  00000000  00000000  0004c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255f0  00000000  00000000  0004dbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fee  00000000  00000000  000731dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8db8  00000000  00000000  0009d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008714  00000000  00000000  00185f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eab0 	.word	0x0800eab0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0800eab0 	.word	0x0800eab0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <Update_FIR_filter+0x88>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <Update_FIR_filter+0x8c>)
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]
	float temp = 0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	e016      	b.n	8000fe6 <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <Update_FIR_filter+0x90>)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	4a16      	ldr	r2, [pc, #88]	; (8001020 <Update_FIR_filter+0x8c>)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	dde5      	ble.n	8000fb8 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <Update_FIR_filter+0x88>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d806      	bhi.n	8001002 <Update_FIR_filter+0x6e>
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <Update_FIR_filter+0x88>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <Update_FIR_filter+0x88>)
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e002      	b.n	8001008 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <Update_FIR_filter+0x88>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	return temp;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	ee07 3a90 	vmov	s15, r3
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	200001a4 	.word	0x200001a4
 8001020:	200001a8 	.word	0x200001a8
 8001024:	20000000 	.word	0x20000000

08001028 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d008      	beq.n	8001048 <Current_IRQ+0x20>
 8001036:	2210      	movs	r2, #16
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <Current_IRQ+0x28>)
 800103c:	f00b ff4a 	bl	800ced4 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <Current_IRQ+0x2c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	e000      	b.n	800104a <Current_IRQ+0x22>
    else return;
 8001048:	bf00      	nop
}
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000178 	.word	0x20000178
 8001054:	20000168 	.word	0x20000168

08001058 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8001060:	2208      	movs	r2, #8
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <Voltage_Temp_IRQ+0x1c>)
 8001066:	f00b ff35 	bl	800ced4 <memcpy>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000188 	.word	0x20000188

08001078 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8001080:	2214      	movs	r2, #20
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <Encoders_IRQ+0x1c>)
 8001086:	f00b ff25 	bl	800ced4 <memcpy>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000190 	.word	0x20000190

08001098 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80010a0:	220c      	movs	r2, #12
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <Can_RX_Status_IRQ+0x1c>)
 80010a6:	f00b ff15 	bl	800ced4 <memcpy>

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001d0 	.word	0x200001d0

080010b8 <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ca:	ed97 7a00 	vldr	s14, [r7]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	da09      	bge.n	80010ec <check_value+0x34>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edd3 7a02 	vldr	s15, [r3, #8]
 80010de:	ed97 7a00 	vldr	s14, [r7]
 80010e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d801      	bhi.n	80010f0 <check_value+0x38>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e016      	b.n	800111e <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80010f6:	ed97 7a00 	vldr	s14, [r7]
 80010fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	da09      	bge.n	8001118 <check_value+0x60>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edd3 7a01 	vldr	s15, [r3, #4]
 800110a:	ed97 7a00 	vldr	s14, [r7]
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d801      	bhi.n	800111c <check_value+0x64>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <check_value+0x66>
	return LIMIT_OK;																	//OK
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 8001132:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f003 fbeb 	bl	8004910 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 800113a:	2128      	movs	r1, #40	; 0x28
 800113c:	48b0      	ldr	r0, [pc, #704]	; (8001400 <BLDC_main+0x2d4>)
 800113e:	f001 fa19 	bl	8002574 <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 10.0f, 0.0f, 1); //alva
 8001142:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001146:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8001404 <BLDC_main+0x2d8>
 800114a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800114e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8001408 <BLDC_main+0x2dc>
 8001152:	48ab      	ldr	r0, [pc, #684]	; (8001400 <BLDC_main+0x2d4>)
 8001154:	f001 f954 	bl	8002400 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 8001158:	eddf 0aac 	vldr	s1, [pc, #688]	; 800140c <BLDC_main+0x2e0>
 800115c:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8001404 <BLDC_main+0x2d8>
 8001160:	48a7      	ldr	r0, [pc, #668]	; (8001400 <BLDC_main+0x2d4>)
 8001162:	f001 fa3b 	bl	80025dc <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001166:	2100      	movs	r1, #0
 8001168:	48a5      	ldr	r0, [pc, #660]	; (8001400 <BLDC_main+0x2d4>)
 800116a:	f001 fae7 	bl	800273c <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800116e:	2101      	movs	r1, #1
 8001170:	48a3      	ldr	r0, [pc, #652]	; (8001400 <BLDC_main+0x2d4>)
 8001172:	f001 fa8f 	bl	8002694 <SetMode>
	Initialize(&Current_PID);
 8001176:	48a2      	ldr	r0, [pc, #648]	; (8001400 <BLDC_main+0x2d4>)
 8001178:	f001 faae 	bl	80026d8 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 800117c:	2164      	movs	r1, #100	; 0x64
 800117e:	48a4      	ldr	r0, [pc, #656]	; (8001410 <BLDC_main+0x2e4>)
 8001180:	f001 f9f8 	bl	8002574 <SetSampleTime>
	SetTunings(&Velocity_PID, 0.0005f, 0.03f, 0.0f, 1);
 8001184:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001188:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8001404 <BLDC_main+0x2d8>
 800118c:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8001414 <BLDC_main+0x2e8>
 8001190:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8001418 <BLDC_main+0x2ec>
 8001194:	489e      	ldr	r0, [pc, #632]	; (8001410 <BLDC_main+0x2e4>)
 8001196:	f001 f933 	bl	8002400 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 30000);
 800119a:	eddf 0aa0 	vldr	s1, [pc, #640]	; 800141c <BLDC_main+0x2f0>
 800119e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8001404 <BLDC_main+0x2d8>
 80011a2:	489b      	ldr	r0, [pc, #620]	; (8001410 <BLDC_main+0x2e4>)
 80011a4:	f001 fa1a 	bl	80025dc <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4899      	ldr	r0, [pc, #612]	; (8001410 <BLDC_main+0x2e4>)
 80011ac:	f001 fac6 	bl	800273c <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80011b0:	2101      	movs	r1, #1
 80011b2:	4897      	ldr	r0, [pc, #604]	; (8001410 <BLDC_main+0x2e4>)
 80011b4:	f001 fa6e 	bl	8002694 <SetMode>
	Initialize(&Velocity_PID);
 80011b8:	4895      	ldr	r0, [pc, #596]	; (8001410 <BLDC_main+0x2e4>)
 80011ba:	f001 fa8d 	bl	80026d8 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80011be:	2164      	movs	r1, #100	; 0x64
 80011c0:	4897      	ldr	r0, [pc, #604]	; (8001420 <BLDC_main+0x2f4>)
 80011c2:	f001 f9d7 	bl	8002574 <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 80011c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80011ca:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 8001404 <BLDC_main+0x2d8>
 80011ce:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8001404 <BLDC_main+0x2d8>
 80011d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011d6:	4892      	ldr	r0, [pc, #584]	; (8001420 <BLDC_main+0x2f4>)
 80011d8:	f001 f912 	bl	8002400 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 80011dc:	eddf 0a91 	vldr	s1, [pc, #580]	; 8001424 <BLDC_main+0x2f8>
 80011e0:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001428 <BLDC_main+0x2fc>
 80011e4:	488e      	ldr	r0, [pc, #568]	; (8001420 <BLDC_main+0x2f4>)
 80011e6:	f001 f9f9 	bl	80025dc <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 80011ea:	2100      	movs	r1, #0
 80011ec:	488c      	ldr	r0, [pc, #560]	; (8001420 <BLDC_main+0x2f4>)
 80011ee:	f001 faa5 	bl	800273c <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 80011f2:	2101      	movs	r1, #1
 80011f4:	488a      	ldr	r0, [pc, #552]	; (8001420 <BLDC_main+0x2f4>)
 80011f6:	f001 fa4d 	bl	8002694 <SetMode>
	Initialize(&Angle_PID);
 80011fa:	4889      	ldr	r0, [pc, #548]	; (8001420 <BLDC_main+0x2f4>)
 80011fc:	f001 fa6c 	bl	80026d8 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8001200:	488a      	ldr	r0, [pc, #552]	; (800142c <BLDC_main+0x300>)
 8001202:	f000 fedd 	bl	8001fc0 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8001206:	488a      	ldr	r0, [pc, #552]	; (8001430 <BLDC_main+0x304>)
 8001208:	f001 fcce 	bl	8002ba8 <current_init>

	//calibrate DC current offset
	//HAL_Delay(1000); //let thing settle before starting

	uint16_t current_offset_averaging = 100;
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	volatile int32_t current_offset = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
	while (current_offset_averaging){
 8001218:	e013      	b.n	8001242 <BLDC_main+0x116>
		while(!Current_Callback_flag);
 800121a:	bf00      	nop
 800121c:	4b85      	ldr	r3, [pc, #532]	; (8001434 <BLDC_main+0x308>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0fb      	beq.n	800121c <BLDC_main+0xf0>
		Current_Callback_flag = 0;
 8001224:	4b83      	ldr	r3, [pc, #524]	; (8001434 <BLDC_main+0x308>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 800122a:	4b83      	ldr	r3, [pc, #524]	; (8001438 <BLDC_main+0x30c>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001232:	4413      	add	r3, r2
 8001234:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
		current_offset_averaging--;
 8001238:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 800123c:	3b01      	subs	r3, #1
 800123e:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
	while (current_offset_averaging){
 8001242:	f8b7 3386 	ldrh.w	r3, [r7, #902]	; 0x386
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e7      	bne.n	800121a <BLDC_main+0xee>
	}
	current_offset = current_offset/100;
 800124a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800124e:	4a7b      	ldr	r2, [pc, #492]	; (800143c <BLDC_main+0x310>)
 8001250:	fb82 1203 	smull	r1, r2, r2, r3
 8001254:	1152      	asrs	r2, r2, #5
 8001256:	17db      	asrs	r3, r3, #31
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 800125e:	4878      	ldr	r0, [pc, #480]	; (8001440 <BLDC_main+0x314>)
 8001260:	f001 fcc8 	bl	8002bf4 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <BLDC_main+0x318>)
 8001266:	2136      	movs	r1, #54	; 0x36
 8001268:	4877      	ldr	r0, [pc, #476]	; (8001448 <BLDC_main+0x31c>)
 800126a:	f001 ff41 	bl	80030f0 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 800126e:	4876      	ldr	r0, [pc, #472]	; (8001448 <BLDC_main+0x31c>)
 8001270:	f001 ff22 	bl	80030b8 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 8001274:	f000 fcd2 	bl	8001c1c <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f003 fb49 	bl	8004910 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 800127e:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 800128c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 8001296:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80012a6:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

	float velocity_temp[200] = {0};
 80012b8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80012bc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80012c0:	4618      	mov	r0, r3
 80012c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80012c6:	461a      	mov	r2, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	f00b fdcf 	bl	800ce6c <memset>
	uint32_t last_pos = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
	uint8_t velocity_index = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
	float velocity = 0;
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

	int32_t position_overflow = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 80012e8:	bf00      	nop
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <BLDC_main+0x308>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0fb      	beq.n	80012ea <BLDC_main+0x1be>

		Current_Callback_flag = 0;
 80012f2:	4b50      	ldr	r3, [pc, #320]	; (8001434 <BLDC_main+0x308>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <BLDC_main+0x30c>)
 80012fa:	f507 7453 	add.w	r4, r7, #844	; 0x34c
 80012fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <BLDC_main+0x320>)
 8001306:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800130a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130e:	e883 0003 	stmia.w	r3, {r0, r1}
		#ifndef CALIBRATION
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
		#endif
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001312:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <BLDC_main+0x324>)
 8001314:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8001318:	ca07      	ldmia	r2, {r0, r1, r2}
 800131a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 800131e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001322:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358

		IRQ_Current_BUFF.Current_DC = calculate_vector_sum((float)IRQ_Current_BUFF.Current_M1, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3); //
 800132c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001338:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800133c:	ee07 3a10 	vmov	s14, r3
 8001340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001344:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001348:	ee06 3a90 	vmov	s13, r3
 800134c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001350:	eeb0 1a66 	vmov.f32	s2, s13
 8001354:	eef0 0a47 	vmov.f32	s1, s14
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f001 fae2 	bl	8002924 <calculate_vector_sum>
 8001360:	eef0 7a40 	vmov.f32	s15, s0
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001370:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <BLDC_main+0x25c>
 8001378:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 800137c:	2b04      	cmp	r3, #4
 800137e:	d103      	bne.n	8001388 <BLDC_main+0x25c>
 8001380:	2302      	movs	r3, #2
 8001382:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
 8001386:	e072      	b.n	800146e <BLDC_main+0x342>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001388:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <BLDC_main+0x274>
 8001390:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001394:	2b05      	cmp	r3, #5
 8001396:	d103      	bne.n	80013a0 <BLDC_main+0x274>
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <BLDC_main+0x328>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e066      	b.n	800146e <BLDC_main+0x342>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 80013a0:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d113      	bne.n	80013d0 <BLDC_main+0x2a4>
 80013a8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d10f      	bne.n	80013d0 <BLDC_main+0x2a4>
			Status = BLDC_RUNNING;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  AUTOMATIC);
 80013b6:	2101      	movs	r1, #1
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <BLDC_main+0x2d4>)
 80013ba:	f001 f96b 	bl	8002694 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80013be:	2101      	movs	r1, #1
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <BLDC_main+0x2e4>)
 80013c2:	f001 f967 	bl	8002694 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80013c6:	2101      	movs	r1, #1
 80013c8:	4815      	ldr	r0, [pc, #84]	; (8001420 <BLDC_main+0x2f4>)
 80013ca:	f001 f963 	bl	8002694 <SetMode>
 80013ce:	e04e      	b.n	800146e <BLDC_main+0x342>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80013d0:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d13f      	bne.n	8001458 <BLDC_main+0x32c>
 80013d8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d13b      	bne.n	8001458 <BLDC_main+0x32c>
			Status = BLDC_STOPPED_WITH_BREAK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			SetMode(&Current_PID,  MANUAL);
 80013e6:	2100      	movs	r1, #0
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <BLDC_main+0x2d4>)
 80013ea:	f001 f953 	bl	8002694 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80013ee:	2100      	movs	r1, #0
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <BLDC_main+0x2e4>)
 80013f2:	f001 f94f 	bl	8002694 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <BLDC_main+0x2f4>)
 80013fa:	f001 f94b 	bl	8002694 <SetMode>
 80013fe:	e036      	b.n	800146e <BLDC_main+0x342>
 8001400:	2000021c 	.word	0x2000021c
 8001404:	00000000 	.word	0x00000000
 8001408:	3ba3d70a 	.word	0x3ba3d70a
 800140c:	44bb6000 	.word	0x44bb6000
 8001410:	2000025c 	.word	0x2000025c
 8001414:	3cf5c28f 	.word	0x3cf5c28f
 8001418:	3a03126f 	.word	0x3a03126f
 800141c:	46ea6000 	.word	0x46ea6000
 8001420:	2000029c 	.word	0x2000029c
 8001424:	4a742400 	.word	0x4a742400
 8001428:	ca742400 	.word	0xca742400
 800142c:	08001079 	.word	0x08001079
 8001430:	08001029 	.word	0x08001029
 8001434:	20000168 	.word	0x20000168
 8001438:	20000178 	.word	0x20000178
 800143c:	51eb851f 	.word	0x51eb851f
 8001440:	08001059 	.word	0x08001059
 8001444:	08001099 	.word	0x08001099
 8001448:	20000934 	.word	0x20000934
 800144c:	20000188 	.word	0x20000188
 8001450:	200001d0 	.word	0x200001d0
 8001454:	20000174 	.word	0x20000174
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8001458:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 800145c:	2b03      	cmp	r3, #3
 800145e:	d106      	bne.n	800146e <BLDC_main+0x342>
 8001460:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <BLDC_main+0x342>
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385

		//time keepers
		timing_CAN_feedback++;
 800146e:	4bcf      	ldr	r3, [pc, #828]	; (80017ac <BLDC_main+0x680>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	4acd      	ldr	r2, [pc, #820]	; (80017ac <BLDC_main+0x680>)
 8001476:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8001478:	4bcd      	ldr	r3, [pc, #820]	; (80017b0 <BLDC_main+0x684>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4acc      	ldr	r2, [pc, #816]	; (80017b0 <BLDC_main+0x684>)
 8001480:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8001488:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	48c6      	ldr	r0, [pc, #792]	; (80017b4 <BLDC_main+0x688>)
 800149a:	f7ff fe0d 	bl	80010b8 <check_value>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 0; //warning
 80014a4:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 80014b0:	4313      	orrs	r3, r2
 80014b2:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 0; //error
 80014b6:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80014ba:	105b      	asrs	r3, r3, #1
 80014bc:	f003 0201 	and.w	r2, r3, #1
 80014c0:	4bbd      	ldr	r3, [pc, #756]	; (80017b8 <BLDC_main+0x68c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	4abc      	ldr	r2, [pc, #752]	; (80017b8 <BLDC_main+0x68c>)
 80014c8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 80014ca:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	48b8      	ldr	r0, [pc, #736]	; (80017bc <BLDC_main+0x690>)
 80014dc:	f7ff fdec 	bl	80010b8 <check_value>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 1; //warning
 80014e6:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 1; //error
 80014fa:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80014fe:	f003 0202 	and.w	r2, r3, #2
 8001502:	4bad      	ldr	r3, [pc, #692]	; (80017b8 <BLDC_main+0x68c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	4aab      	ldr	r2, [pc, #684]	; (80017b8 <BLDC_main+0x68c>)
 800150a:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 800150c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	48a8      	ldr	r0, [pc, #672]	; (80017c0 <BLDC_main+0x694>)
 800151e:	f7ff fdcb 	bl	80010b8 <check_value>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 2; //warning
 8001528:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8001536:	4313      	orrs	r3, r2
 8001538:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 2; //error
 800153c:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001540:	105b      	asrs	r3, r3, #1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	f003 0204 	and.w	r2, r3, #4
 8001548:	4b9b      	ldr	r3, [pc, #620]	; (80017b8 <BLDC_main+0x68c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	4a9a      	ldr	r2, [pc, #616]	; (80017b8 <BLDC_main+0x68c>)
 8001550:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8001552:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	4898      	ldr	r0, [pc, #608]	; (80017c4 <BLDC_main+0x698>)
 8001564:	f7ff fda8 	bl	80010b8 <check_value>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 3; //warning
 800156e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 800157c:	4313      	orrs	r3, r2
 800157e:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8001582:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001586:	105b      	asrs	r3, r3, #1
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	f003 0208 	and.w	r2, r3, #8
 800158e:	4b8a      	ldr	r3, [pc, #552]	; (80017b8 <BLDC_main+0x68c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	4a88      	ldr	r2, [pc, #544]	; (80017b8 <BLDC_main+0x68c>)
 8001596:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8001598:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	4887      	ldr	r0, [pc, #540]	; (80017c8 <BLDC_main+0x69c>)
 80015aa:	f7ff fd85 	bl	80010b8 <check_value>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 4; //warning
 80015b4:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 80015c2:	4313      	orrs	r3, r2
 80015c4:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 4; //error
 80015c8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80015cc:	105b      	asrs	r3, r3, #1
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	f003 0210 	and.w	r2, r3, #16
 80015d4:	4b78      	ldr	r3, [pc, #480]	; (80017b8 <BLDC_main+0x68c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4313      	orrs	r3, r2
 80015da:	4a77      	ldr	r2, [pc, #476]	; (80017b8 <BLDC_main+0x68c>)
 80015dc:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 80015de:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	4877      	ldr	r0, [pc, #476]	; (80017cc <BLDC_main+0x6a0>)
 80015f0:	f7ff fd62 	bl	80010b8 <check_value>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 5; //warning
 80015fa:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80015fe:	015b      	lsls	r3, r3, #5
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8001608:	4313      	orrs	r3, r2
 800160a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 5; //error
 800160e:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001612:	105b      	asrs	r3, r3, #1
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	f003 0220 	and.w	r2, r3, #32
 800161a:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <BLDC_main+0x68c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	4a65      	ldr	r2, [pc, #404]	; (80017b8 <BLDC_main+0x68c>)
 8001622:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8001624:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	4866      	ldr	r0, [pc, #408]	; (80017d0 <BLDC_main+0x6a4>)
 8001636:	f7ff fd3f 	bl	80010b8 <check_value>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 6; //warning
 8001640:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8001654:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 8001658:	105b      	asrs	r3, r3, #1
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001660:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <BLDC_main+0x68c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <BLDC_main+0x68c>)
 8001668:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 800166a:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	4855      	ldr	r0, [pc, #340]	; (80017d0 <BLDC_main+0x6a4>)
 800167c:	f7ff fd1c 	bl	80010b8 <check_value>
 8001680:	4603      	mov	r3, r0
 8001682:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
		warning |= (Limit_callback&1)      << 7; //warning
 8001686:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 800168a:	01db      	lsls	r3, r3, #7
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8001692:	4313      	orrs	r3, r2
 8001694:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8001698:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 800169c:	105b      	asrs	r3, r3, #1
 800169e:	01db      	lsls	r3, r3, #7
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <BLDC_main+0x68c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <BLDC_main+0x68c>)
 80016aa:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 80016ac:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <BLDC_main+0x6a8>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80016b6:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80016ba:	3b20      	subs	r3, #32
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d410      	bmi.n	80016f0 <BLDC_main+0x5c4>
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <BLDC_main+0x6a8>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80016d8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80016dc:	3320      	adds	r3, #32
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ee:	dd05      	ble.n	80016fc <BLDC_main+0x5d0>
 80016f0:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 80016fc:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	f7ff fc42 	bl	8000f94 <Update_FIR_filter>
 8001710:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001714:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <BLDC_main+0x6ac>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d90a      	bls.n	8001734 <BLDC_main+0x608>
 800171e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001722:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <BLDC_main+0x6b0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d805      	bhi.n	8001734 <BLDC_main+0x608>
 8001728:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800172c:	3301      	adds	r3, #1
 800172e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001732:	e00e      	b.n	8001752 <BLDC_main+0x626>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001734:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <BLDC_main+0x6b0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d809      	bhi.n	8001752 <BLDC_main+0x626>
 800173e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001742:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <BLDC_main+0x6ac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d904      	bls.n	8001752 <BLDC_main+0x626>
 8001748:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800174c:	3b01      	subs	r3, #1
 800174e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8001752:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8001756:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8001760:	ee07 2a90 	vmov	s15, r2
 8001764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001768:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800176c:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001778:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800177c:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
		velocity_index++;
 8001780:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 8001784:	3301      	adds	r3, #1
 8001786:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		velocity_index = velocity_index % 200;
 800178a:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <BLDC_main+0x6b4>)
 8001790:	fba2 1203 	umull	r1, r2, r2, r3
 8001794:	0992      	lsrs	r2, r2, #6
 8001796:	21c8      	movs	r1, #200	; 0xc8
 8001798:	fb01 f202 	mul.w	r2, r1, r2
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
		for(int i = 0; i > 200; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80017a8:	e031      	b.n	800180e <BLDC_main+0x6e2>
 80017aa:	bf00      	nop
 80017ac:	2000016c 	.word	0x2000016c
 80017b0:	20000170 	.word	0x20000170
 80017b4:	200000a0 	.word	0x200000a0
 80017b8:	20000174 	.word	0x20000174
 80017bc:	20000028 	.word	0x20000028
 80017c0:	20000040 	.word	0x20000040
 80017c4:	200000b8 	.word	0x200000b8
 80017c8:	20000070 	.word	0x20000070
 80017cc:	20000058 	.word	0x20000058
 80017d0:	20000088 	.word	0x20000088
 80017d4:	2000029c 	.word	0x2000029c
 80017d8:	00041eb0 	.word	0x00041eb0
 80017dc:	00015f8f 	.word	0x00015f8f
 80017e0:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 80017e4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80017e8:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 80017ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed97 7ade 	vldr	s14, [r7, #888]	; 0x378
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7ade 	vstr	s15, [r7, #888]	; 0x378
		for(int i = 0; i > 200; i++){
 8001804:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001808:	3301      	adds	r3, #1
 800180a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800180e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001812:	2bc8      	cmp	r3, #200	; 0xc8
 8001814:	dce6      	bgt.n	80017e4 <BLDC_main+0x6b8>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8001816:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001822:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8001826:	4aaf      	ldr	r2, [pc, #700]	; (8001ae4 <BLDC_main+0x9b8>)
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	4bab      	ldr	r3, [pc, #684]	; (8001ae8 <BLDC_main+0x9bc>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 800183e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001842:	2b00      	cmp	r3, #0
 8001844:	bfb8      	it	lt
 8001846:	425b      	neglt	r3, r3
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001850:	4ba6      	ldr	r3, [pc, #664]	; (8001aec <BLDC_main+0x9c0>)
 8001852:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8001856:	4aa6      	ldr	r2, [pc, #664]	; (8001af0 <BLDC_main+0x9c4>)
 8001858:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800185c:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 800185e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	4b9f      	ldr	r3, [pc, #636]	; (8001ae8 <BLDC_main+0x9bc>)
 800186c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8001870:	489d      	ldr	r0, [pc, #628]	; (8001ae8 <BLDC_main+0x9bc>)
 8001872:	f000 fd13 	bl	800229c <Compute>

//		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
		Velocity_PID.Setpoint = 300000.0f;
 8001876:	4b9d      	ldr	r3, [pc, #628]	; (8001aec <BLDC_main+0x9c0>)
 8001878:	4a9e      	ldr	r2, [pc, #632]	; (8001af4 <BLDC_main+0x9c8>)
 800187a:	609a      	str	r2, [r3, #8]

		Compute(&Velocity_PID);
 800187c:	489b      	ldr	r0, [pc, #620]	; (8001aec <BLDC_main+0x9c0>)
 800187e:	f000 fd0d 	bl	800229c <Compute>

		int8_t direction = -1;
 8001882:	23ff      	movs	r3, #255	; 0xff
 8001884:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 3000;
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <BLDC_main+0x9c4>)
 800188a:	4a9b      	ldr	r2, [pc, #620]	; (8001af8 <BLDC_main+0x9cc>)
 800188c:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 800188e:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <BLDC_main+0x9bc>)
 8001890:	edd3 7a01 	vldr	s15, [r3, #4]
 8001894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	dd03      	ble.n	80018a6 <BLDC_main+0x77a>
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
 80018a4:	e002      	b.n	80018ac <BLDC_main+0x780>
		else direction = -1;
 80018a6:	23ff      	movs	r3, #255	; 0xff
 80018a8:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
//		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
//		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
//		else direction = 1;
		#endif

		Compute(&Current_PID);
 80018ac:	4890      	ldr	r0, [pc, #576]	; (8001af0 <BLDC_main+0x9c4>)
 80018ae:	f000 fcf5 	bl	800229c <Compute>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		#ifdef CALIBRATION
		IRQ_Encoders_BUFF.Encoder1_pos += 30;
 80018b2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80018b6:	331e      	adds	r3, #30
 80018b8:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		if(IRQ_Encoders_BUFF.Encoder1_pos > 360000){
 80018bc:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80018c0:	4a88      	ldr	r2, [pc, #544]	; (8001ae4 <BLDC_main+0x9b8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d906      	bls.n	80018d4 <BLDC_main+0x7a8>
			IRQ_Encoders_BUFF.Encoder1_pos = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	488b      	ldr	r0, [pc, #556]	; (8001afc <BLDC_main+0x9d0>)
 80018d0:	f006 fb98 	bl	8008004 <HAL_GPIO_TogglePin>

		}
		IRQ_Encoders_BUFF.Encoder2_pos = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
		#endif
//		dac_value((IRQ_Encoders.Encoder1_pos - IRQ_Encoders_BUFF.Encoder1_pos - offset)/8 +1000);

//		dac_value(IRQ_Encoders.Encoder1_pos);

		uint16_t test2 = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
		if(error){
 80018e0:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <BLDC_main+0x9d4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <BLDC_main+0x7c8>
			Status = BLDC_ERROR;
 80018e8:	2304      	movs	r3, #4
 80018ea:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
			shutoff();
 80018ee:	f000 fb33 	bl	8001f58 <shutoff>
 80018f2:	e053      	b.n	800199c <BLDC_main+0x870>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 80018f4:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d104      	bne.n	8001906 <BLDC_main+0x7da>
			shutoff();
 80018fc:	f000 fb2c 	bl	8001f58 <shutoff>
			shutdown();
 8001900:	f000 fb3c 	bl	8001f7c <shutdown>
 8001904:	e04a      	b.n	800199c <BLDC_main+0x870>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001906:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <BLDC_main+0x814>

			if(Current_PID.Output != NAN)test2 = (uint16_t)Current_PID.Output;
 800190e:	4b78      	ldr	r3, [pc, #480]	; (8001af0 <BLDC_main+0x9c4>)
 8001910:	edd3 7a01 	vldr	s15, [r3, #4]
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	f8a7 3362 	strh.w	r3, [r7, #866]	; 0x362
//			shutoff();
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*140), test2);
			inverter((mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90)), 100);
 8001920:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f8fa 	bl	8001b20 <mech_to_el_deg>
 800192c:	4603      	mov	r3, r0
 800192e:	b29b      	uxth	r3, r3
 8001930:	335a      	adds	r3, #90	; 0x5a
 8001932:	b29b      	uxth	r3, r3
 8001934:	b21b      	sxth	r3, r3
 8001936:	2164      	movs	r1, #100	; 0x64
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f9bb 	bl	8001cb4 <inverter>
 800193e:	e02d      	b.n	800199c <BLDC_main+0x870>
//			inverter(0, 200);

			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8001940:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8001944:	2b03      	cmp	r3, #3
 8001946:	d122      	bne.n	800198e <BLDC_main+0x862>
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
 8001948:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f8e6 	bl	8001b20 <mech_to_el_deg>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	f997 336b 	ldrsb.w	r3, [r7, #875]	; 0x36b
 800195c:	b29b      	uxth	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	0049      	lsls	r1, r1, #1
 8001962:	440b      	add	r3, r1
 8001964:	4619      	mov	r1, r3
 8001966:	0109      	lsls	r1, r1, #4
 8001968:	1acb      	subs	r3, r1, r3
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	4413      	add	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <BLDC_main+0x9c4>)
 8001976:	edd2 7a01 	vldr	s15, [r2, #4]
 800197a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197e:	ee17 2a90 	vmov	r2, s15
 8001982:	b292      	uxth	r2, r2
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f994 	bl	8001cb4 <inverter>
 800198c:	e006      	b.n	800199c <BLDC_main+0x870>
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 800198e:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 8001992:	2b02      	cmp	r3, #2
 8001994:	d102      	bne.n	800199c <BLDC_main+0x870>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3385 	strb.w	r3, [r7, #901]	; 0x385
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <BLDC_main+0x9d8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b95      	cmp	r3, #149	; 0x95
 80019a2:	d950      	bls.n	8001a46 <BLDC_main+0x91a>
			timing_CAN_feedback = 0;
 80019a4:	4b57      	ldr	r3, [pc, #348]	; (8001b04 <BLDC_main+0x9d8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <BLDC_main+0x9dc>)
 80019ac:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80019b0:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <BLDC_main+0x9d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <BLDC_main+0x9dc>)
 80019b8:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 80019ba:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80019be:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <BLDC_main+0x9dc>)
 80019c0:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 80019c2:	f897 3385 	ldrb.w	r3, [r7, #901]	; 0x385
 80019c6:	4a50      	ldr	r2, [pc, #320]	; (8001b08 <BLDC_main+0x9dc>)
 80019c8:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 80019ca:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <BLDC_main+0x9dc>)
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 80019d4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80019d8:	4a4b      	ldr	r2, [pc, #300]	; (8001b08 <BLDC_main+0x9dc>)
 80019da:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 80019dc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <BLDC_main+0x9dc>)
 80019e2:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 80019e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80019e8:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <BLDC_main+0x9dc>)
 80019ea:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 80019ec:	f8b7 3348 	ldrh.w	r3, [r7, #840]	; 0x348
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <BLDC_main+0x9dc>)
 80019f4:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 80019f6:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80019fa:	4a43      	ldr	r2, [pc, #268]	; (8001b08 <BLDC_main+0x9dc>)
 80019fc:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 80019fe:	f997 334a 	ldrsb.w	r3, [r7, #842]	; 0x34a
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <BLDC_main+0x9dc>)
 8001a06:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8001a08:	f997 334b 	ldrsb.w	r3, [r7, #843]	; 0x34b
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <BLDC_main+0x9dc>)
 8001a10:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001a12:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001a16:	4a3c      	ldr	r2, [pc, #240]	; (8001b08 <BLDC_main+0x9dc>)
 8001a18:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = 0; //IRQ_Encoders_BUFF.Encoder2_pos;
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <BLDC_main+0x9dc>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001a20:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <BLDC_main+0x9bc>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 2a90 	vmov	r2, s15
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <BLDC_main+0x9dc>)
 8001a30:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001a32:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001a36:	4a34      	ldr	r2, [pc, #208]	; (8001b08 <BLDC_main+0x9dc>)
 8001a38:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001a3a:	4a33      	ldr	r2, [pc, #204]	; (8001b08 <BLDC_main+0x9dc>)
 8001a3c:	f240 4136 	movw	r1, #1078	; 0x436
 8001a40:	4832      	ldr	r0, [pc, #200]	; (8001b0c <BLDC_main+0x9e0>)
 8001a42:	f001 fb91 	bl	8003168 <FDCAN_sendData>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <BLDC_main+0x9d4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <BLDC_main+0x932>
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f006 fabc 	bl	8007fd4 <HAL_GPIO_WritePin>
 8001a5c:	e006      	b.n	8001a6c <BLDC_main+0x940>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f006 fab4 	bl	8007fd4 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001a6c:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <BLDC_main+0x954>
 8001a74:	2201      	movs	r2, #1
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	4820      	ldr	r0, [pc, #128]	; (8001afc <BLDC_main+0x9d0>)
 8001a7a:	f006 faab 	bl	8007fd4 <HAL_GPIO_WritePin>
 8001a7e:	e004      	b.n	8001a8a <BLDC_main+0x95e>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	481d      	ldr	r0, [pc, #116]	; (8001afc <BLDC_main+0x9d0>)
 8001a86:	f006 faa5 	bl	8007fd4 <HAL_GPIO_WritePin>

		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
//		dac_value(Velocity_PID.Output);
//		dac_value(IRQ_Current_BUFF.Current_DC/3);
		dac_value(IRQ_Current_BUFF.Current_M1/20+1500);
 8001a8a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001a8e:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <BLDC_main+0x9e4>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	10d2      	asrs	r2, r2, #3
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fe7e 	bl	80027a4 <dac_value>
//		dac_value(test/20+1500);
//		dac_value(abs(IRQ_Encoders.Velocity)/200);
		#ifdef CALIBRATION
		if (test_val == 0)test_val = IRQ_Encoders.Encoder1_pos - IRQ_Encoders_BUFF.Encoder1_pos;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <BLDC_main+0x9e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <BLDC_main+0x994>
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <BLDC_main+0x9ec>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <BLDC_main+0x9e8>)
 8001abe:	601a      	str	r2, [r3, #0]

		PrintServerPrintf("E %d M %d test %d\n", IRQ_Encoders.Encoder1_pos, IRQ_Encoders_BUFF.Encoder1_pos, IRQ_Encoders.Encoder1_pos - IRQ_Encoders_BUFF.Encoder1_pos + test_val);
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <BLDC_main+0x9ec>)
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	f8d7 0330 	ldr.w	r0, [r7, #816]	; 0x330
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <BLDC_main+0x9ec>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <BLDC_main+0x9e8>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4810      	ldr	r0, [pc, #64]	; (8001b1c <BLDC_main+0x9f0>)
 8001adc:	f000 fe3c 	bl	8002758 <PrintServerPrintf>
	while(1){
 8001ae0:	e402      	b.n	80012e8 <BLDC_main+0x1bc>
 8001ae2:	bf00      	nop
 8001ae4:	00057e40 	.word	0x00057e40
 8001ae8:	2000029c 	.word	0x2000029c
 8001aec:	2000025c 	.word	0x2000025c
 8001af0:	2000021c 	.word	0x2000021c
 8001af4:	48927c00 	.word	0x48927c00
 8001af8:	453b8000 	.word	0x453b8000
 8001afc:	48000800 	.word	0x48000800
 8001b00:	20000174 	.word	0x20000174
 8001b04:	2000016c 	.word	0x2000016c
 8001b08:	200001dc 	.word	0x200001dc
 8001b0c:	20000934 	.word	0x20000934
 8001b10:	66666667 	.word	0x66666667
 8001b14:	20000164 	.word	0x20000164
 8001b18:	20000190 	.word	0x20000190
 8001b1c:	0800eac8 	.word	0x0800eac8

08001b20 <mech_to_el_deg>:
		#endif
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001b34:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8001b44:	e007      	b.n	8001b56 <mech_to_el_deg+0x36>
 8001b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b4a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001c0c <mech_to_el_deg+0xec>
 8001b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b52:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b5a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c0c <mech_to_el_deg+0xec>
 8001b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	dcee      	bgt.n	8001b46 <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 8001b68:	e007      	b.n	8001b7a <mech_to_el_deg+0x5a>
 8001b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b6e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c10 <mech_to_el_deg+0xf0>
 8001b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b76:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001c10 <mech_to_el_deg+0xf0>
 8001b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8a:	dcee      	bgt.n	8001b6a <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 8001b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b90:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b98:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001c14 <mech_to_el_deg+0xf4>
 8001b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba0:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 8001ba4:	e007      	b.n	8001bb6 <mech_to_el_deg+0x96>
 8001ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001baa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001c18 <mech_to_el_deg+0xf8>
 8001bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb2:	edc7 7a03 	vstr	s15, [r7, #12]
 8001bb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001c18 <mech_to_el_deg+0xf8>
 8001bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc6:	dcee      	bgt.n	8001ba6 <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d501      	bpl.n	8001bda <mech_to_el_deg+0xba>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e012      	b.n	8001c00 <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 8001bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bde:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001c18 <mech_to_el_deg+0xf8>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	dd02      	ble.n	8001bf2 <mech_to_el_deg+0xd2>
 8001bec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001bf0:	e006      	b.n	8001c00 <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 8001bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	b21b      	sxth	r3, r3

//	return (int16_t)((((angle_deg)-offset_deg+360000*2)%deg_pr_pole)/(1000/17))%360;
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	48afc800 	.word	0x48afc800
 8001c10:	46a57000 	.word	0x46a57000
 8001c14:	447a0000 	.word	0x447a0000
 8001c18:	43b40000 	.word	0x43b40000

08001c1c <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001c20:	2100      	movs	r1, #0
 8001c22:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c24:	f008 f96a 	bl	8009efc <HAL_TIM_PWM_Start>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <CTRL_init_PWM+0x16>
 8001c2e:	f002 f869 	bl	8003d04 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001c32:	2100      	movs	r1, #0
 8001c34:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c36:	f009 faf5 	bl	800b224 <HAL_TIMEx_PWMN_Start>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <CTRL_init_PWM+0x28>
 8001c40:	f002 f860 	bl	8003d04 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001c44:	2104      	movs	r1, #4
 8001c46:	4818      	ldr	r0, [pc, #96]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c48:	f008 f958 	bl	8009efc <HAL_TIM_PWM_Start>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <CTRL_init_PWM+0x3a>
 8001c52:	f002 f857 	bl	8003d04 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001c56:	2104      	movs	r1, #4
 8001c58:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c5a:	f009 fae3 	bl	800b224 <HAL_TIMEx_PWMN_Start>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <CTRL_init_PWM+0x4c>
 8001c64:	f002 f84e 	bl	8003d04 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001c68:	2108      	movs	r1, #8
 8001c6a:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c6c:	f008 f946 	bl	8009efc <HAL_TIM_PWM_Start>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <CTRL_init_PWM+0x5e>
 8001c76:	f002 f845 	bl	8003d04 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <CTRL_init_PWM+0x8c>)
 8001c7e:	f009 fad1 	bl	800b224 <HAL_TIMEx_PWMN_Start>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <CTRL_init_PWM+0x70>
 8001c88:	f002 f83c 	bl	8003d04 <Error_Handler>

	TIM1->CCR1 = 0;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <CTRL_init_PWM+0x90>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <CTRL_init_PWM+0x90>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <CTRL_init_PWM+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <CTRL_init_PWM+0x94>)
 8001ca0:	f008 f860 	bl	8009d64 <HAL_TIM_Base_Start_IT>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000c1c 	.word	0x20000c1c
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	20000c68 	.word	0x20000c68

08001cb4 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	80fb      	strh	r3, [r7, #6]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001ccc:	4a9c      	ldr	r2, [pc, #624]	; (8001f40 <inverter+0x28c>)
 8001cce:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd2:	441a      	add	r2, r3
 8001cd4:	1211      	asrs	r1, r2, #8
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001cde:	fb01 f202 	mul.w	r2, r1, r2
 8001ce2:	1a9a      	subs	r2, r3, r2
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf6:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <inverter+0x28c>)
 8001cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfc:	441a      	add	r2, r3
 8001cfe:	1211      	asrs	r1, r2, #8
 8001d00:	17da      	asrs	r2, r3, #31
 8001d02:	1a8a      	subs	r2, r1, r2
 8001d04:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001d08:	fb01 f202 	mul.w	r2, r1, r2
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8001d1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d20:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <inverter+0x290>)
 8001d22:	fb83 1302 	smull	r1, r3, r3, r2
 8001d26:	4413      	add	r3, r2
 8001d28:	1159      	asrs	r1, r3, #5
 8001d2a:	17d3      	asrs	r3, r2, #31
 8001d2c:	1ac9      	subs	r1, r1, r3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d50:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8001f48 <inverter+0x294>
 8001d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d64:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8001f48 <inverter+0x294>
 8001d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d70:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8001f4c <inverter+0x298>
 8001d74:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d78:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001d7c:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001f48 <inverter+0x294>
 8001d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d88:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8001f48 <inverter+0x294>
 8001d8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d90:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d94:	eddf 5a6d 	vldr	s11, [pc, #436]	; 8001f4c <inverter+0x298>
 8001d98:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001f50 <inverter+0x29c>
 8001da4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001da8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001dcc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001dd0:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8001f4c <inverter+0x298>
 8001dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ddc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001de0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001f4c <inverter+0x298>
 8001de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001f50 <inverter+0x29c>
 8001df8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dfc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e08:	ee17 3a90 	vmov	r3, s15
 8001e0c:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001e14:	3303      	adds	r3, #3
 8001e16:	89ba      	ldrh	r2, [r7, #12]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	0fda      	lsrs	r2, r3, #31
 8001e1c:	4413      	add	r3, r2
 8001e1e:	105b      	asrs	r3, r3, #1
 8001e20:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8001e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db10      	blt.n	8001e4c <inverter+0x198>
 8001e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2e:	2b3b      	cmp	r3, #59	; 0x3b
 8001e30:	dc0c      	bgt.n	8001e4c <inverter+0x198>
		compare_M1 = T0;
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8001e36:	897a      	ldrh	r2, [r7, #10]
 8001e38:	89bb      	ldrh	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001e3e:	897a      	ldrh	r2, [r7, #10]
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	441a      	add	r2, r3
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e06a      	b.n	8001f22 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 8001e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e50:	2b3b      	cmp	r3, #59	; 0x3b
 8001e52:	dd10      	ble.n	8001e76 <inverter+0x1c2>
 8001e54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e58:	2b77      	cmp	r3, #119	; 0x77
 8001e5a:	dc0c      	bgt.n	8001e76 <inverter+0x1c2>
		compare_M1 = T0;
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	441a      	add	r2, r3
 8001e66:	89bb      	ldrh	r3, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 8001e6c:	897a      	ldrh	r2, [r7, #10]
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	4413      	add	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e055      	b.n	8001f22 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 8001e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7a:	2b77      	cmp	r3, #119	; 0x77
 8001e7c:	dd10      	ble.n	8001ea0 <inverter+0x1ec>
 8001e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e82:	2bb3      	cmp	r3, #179	; 0xb3
 8001e84:	dc0c      	bgt.n	8001ea0 <inverter+0x1ec>
		compare_M1 = T0+T2;
 8001e86:	897a      	ldrh	r2, [r7, #10]
 8001e88:	89bb      	ldrh	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001e8e:	897a      	ldrh	r2, [r7, #10]
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	441a      	add	r2, r3
 8001e94:	89bb      	ldrh	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001e9a:	897b      	ldrh	r3, [r7, #10]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	e040      	b.n	8001f22 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 8001ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea4:	2bb3      	cmp	r3, #179	; 0xb3
 8001ea6:	dd10      	ble.n	8001eca <inverter+0x216>
 8001ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eac:	2bef      	cmp	r3, #239	; 0xef
 8001eae:	dc0c      	bgt.n	8001eca <inverter+0x216>
		compare_M1 = T0+T1+T2;
 8001eb0:	897a      	ldrh	r2, [r7, #10]
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8001ebc:	897a      	ldrh	r2, [r7, #10]
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001ec4:	897b      	ldrh	r3, [r7, #10]
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	e02b      	b.n	8001f22 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	2bef      	cmp	r3, #239	; 0xef
 8001ed0:	dd11      	ble.n	8001ef6 <inverter+0x242>
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001eda:	da0c      	bge.n	8001ef6 <inverter+0x242>
		compare_M1 = T0+T1+T2;
 8001edc:	897a      	ldrh	r2, [r7, #10]
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	441a      	add	r2, r3
 8001ee2:	89bb      	ldrh	r3, [r7, #12]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8001eec:	897a      	ldrh	r2, [r7, #10]
 8001eee:	89bb      	ldrh	r3, [r7, #12]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e015      	b.n	8001f22 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 8001ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001efe:	db10      	blt.n	8001f22 <inverter+0x26e>
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001f08:	dc0b      	bgt.n	8001f22 <inverter+0x26e>
		compare_M1 = T0+T1;
 8001f0a:	897a      	ldrh	r2, [r7, #10]
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	4413      	add	r3, r2
 8001f10:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001f16:	897a      	ldrh	r2, [r7, #10]
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	441a      	add	r2, r3
 8001f1c:	89bb      	ldrh	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <inverter+0x2a0>)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <inverter+0x2a0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <inverter+0x2a0>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	63d3      	str	r3, [r2, #60]	; 0x3c

//	dac_value(angle*8+200);

}
 8001f34:	bf00      	nop
 8001f36:	3724      	adds	r7, #36	; 0x24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	b60b60b7 	.word	0xb60b60b7
 8001f44:	88888889 	.word	0x88888889
 8001f48:	42700000 	.word	0x42700000
 8001f4c:	43340000 	.word	0x43340000
 8001f50:	471e3400 	.word	0x471e3400
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <shutoff>:
void shutoff(void){
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <shutoff+0x20>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <shutoff+0x20>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <shutoff+0x20>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40012c00 	.word	0x40012c00

08001f7c <shutdown>:
void shutdown(void){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001f80:	2100      	movs	r1, #0
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <shutdown+0x40>)
 8001f84:	f008 f8ba 	bl	800a0fc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8001f88:	2100      	movs	r1, #0
 8001f8a:	480c      	ldr	r0, [pc, #48]	; (8001fbc <shutdown+0x40>)
 8001f8c:	f009 f9fe 	bl	800b38c <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001f90:	2104      	movs	r1, #4
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <shutdown+0x40>)
 8001f94:	f008 f8b2 	bl	800a0fc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <shutdown+0x40>)
 8001f9c:	f009 f9f6 	bl	800b38c <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <shutdown+0x40>)
 8001fa4:	f008 f8aa 	bl	800a0fc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001fa8:	2108      	movs	r1, #8
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <shutdown+0x40>)
 8001fac:	f009 f9ee 	bl	800b38c <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <shutdown+0x40>)
 8001fb2:	f007 feb0 	bl	8009d16 <HAL_TIM_Base_Stop>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000c1c 	.word	0x20000c1c

08001fc0 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <ORBIS_init+0x64>)
 8001fce:	f006 f801 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <ORBIS_init+0x68>)
 8001fd8:	f005 fffc 	bl	8007fd4 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <ORBIS_init+0x6c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <ORBIS_init+0x70>)
 8001fe4:	2274      	movs	r2, #116	; 0x74
 8001fe6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <ORBIS_init+0x64>)
 8001fee:	f005 fff1 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <ORBIS_init+0x68>)
 8001ff8:	f005 ffec 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <ORBIS_init+0x74>)
 8002000:	490b      	ldr	r1, [pc, #44]	; (8002030 <ORBIS_init+0x70>)
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <ORBIS_init+0x78>)
 8002004:	f007 f8de 	bl	80091c4 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8002008:	2305      	movs	r3, #5
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <ORBIS_init+0x7c>)
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <ORBIS_init+0x80>)
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <ORBIS_init+0x84>)
 8002010:	f007 f8d8 	bl	80091c4 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <ORBIS_init+0x88>)
 8002016:	f007 fea5 	bl	8009d64 <HAL_TIM_Base_Start_IT>

}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	48000400 	.word	0x48000400
 8002028:	48000c00 	.word	0x48000c00
 800202c:	200002fc 	.word	0x200002fc
 8002030:	200002dc 	.word	0x200002dc
 8002034:	200002e4 	.word	0x200002e4
 8002038:	200009d0 	.word	0x200009d0
 800203c:	200002f4 	.word	0x200002f4
 8002040:	200002ec 	.word	0x200002ec
 8002044:	20000a34 	.word	0x20000a34
 8002048:	20000c68 	.word	0x20000c68

0800204c <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 8002058:	4293      	cmp	r3, r2
 800205a:	f040 80a5 	bne.w	80021a8 <HAL_SPI_TxRxCpltCallback+0x15c>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800205e:	2201      	movs	r2, #1
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4866      	ldr	r0, [pc, #408]	; (80021fc <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8002064:	f005 ffb6 	bl	8007fd4 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 8002068:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b65      	ldr	r3, [pc, #404]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8002070:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	461a      	mov	r2, r3
 800207a:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 800207c:	785b      	ldrb	r3, [r3, #1]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8002090:	6013      	str	r3, [r2, #0]
//		data_encoders.Encoder1_pos += 90000;
//		data_encoders.Encoder1_pos = data_encoders.Encoder1_pos %360000;

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8002092:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_SPI_TxRxCpltCallback+0x1c0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	dd10      	ble.n	80020c6 <HAL_SPI_TxRxCpltCallback+0x7a>
 80020a4:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80020b4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c0:	edc7 7a03 	vstr	s15, [r7, #12]
 80020c4:	e025      	b.n	8002112 <HAL_SPI_TxRxCpltCallback+0xc6>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_SPI_TxRxCpltCallback+0x1c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	da10      	bge.n	80020fa <HAL_SPI_TxRxCpltCallback+0xae>
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 80020e8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f4:	edc7 7a03 	vstr	s15, [r7, #12]
 80020f8:	e00b      	b.n	8002112 <HAL_SPI_TxRxCpltCallback+0xc6>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210e:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_SPI_TxRxCpltCallback+0x1bc>)
 800211a:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	edd7 7a03 	vldr	s15, [r7, #12]
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4a38      	ldr	r2, [pc, #224]	; (800221c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800214a:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]
		velocity_index++;
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002166:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d102      	bne.n	8002176 <HAL_SPI_TxRxCpltCallback+0x12a>
 8002170:	4b29      	ldr	r3, [pc, #164]	; (8002218 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002220 <HAL_SPI_TxRxCpltCallback+0x1d4>
 8002180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002184:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002224 <HAL_SPI_TxRxCpltCallback+0x1d8>
 8002188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002228 <HAL_SPI_TxRxCpltCallback+0x1dc>
 8002190:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002194:	eddf 6a25 	vldr	s13, [pc, #148]	; 800222c <HAL_SPI_TxRxCpltCallback+0x1e0>
 8002198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a0:	ee17 2a90 	vmov	r2, s15
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80021a6:	60da      	str	r2, [r3, #12]
	}
	if (hspi == &hspi3) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d11a      	bne.n	80021e6 <HAL_SPI_TxRxCpltCallback+0x19a>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80021b0:	2201      	movs	r2, #1
 80021b2:	2104      	movs	r1, #4
 80021b4:	481f      	ldr	r0, [pc, #124]	; (8002234 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80021b6:	f005 ff0d 	bl	8007fd4 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 80021ba:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80021ce:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80021d8:	7852      	ldrb	r2, [r2, #1]
 80021da:	0892      	lsrs	r2, r2, #2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	4313      	orrs	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80021e4:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_SPI_TxRxCpltCallback+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80021ec:	4798      	blx	r3
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200009d0 	.word	0x200009d0
 80021fc:	48000400 	.word	0x48000400
 8002200:	200002e4 	.word	0x200002e4
 8002204:	20000300 	.word	0x20000300
 8002208:	20000318 	.word	0x20000318
 800220c:	0002bf20 	.word	0x0002bf20
 8002210:	fffd40e0 	.word	0xfffd40e0
 8002214:	20000314 	.word	0x20000314
 8002218:	2000031c 	.word	0x2000031c
 800221c:	20000320 	.word	0x20000320
 8002220:	461c4000 	.word	0x461c4000
 8002224:	42700000 	.word	0x42700000
 8002228:	43b40000 	.word	0x43b40000
 800222c:	42c80000 	.word	0x42c80000
 8002230:	20000a34 	.word	0x20000a34
 8002234:	48000c00 	.word	0x48000c00
 8002238:	200002f4 	.word	0x200002f4
 800223c:	200002fc 	.word	0x200002fc

08002240 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	480b      	ldr	r0, [pc, #44]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800224e:	f005 fec1 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2104      	movs	r1, #4
 8002256:	480a      	ldr	r0, [pc, #40]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002258:	f005 febc 	bl	8007fd4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800225c:	2305      	movs	r3, #5
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002260:	4909      	ldr	r1, [pc, #36]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002264:	f006 ffae 	bl	80091c4 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8002268:	2305      	movs	r3, #5
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002270:	f006 ffa8 	bl	80091c4 <HAL_SPI_TransmitReceive_DMA>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	48000400 	.word	0x48000400
 8002280:	48000c00 	.word	0x48000c00
 8002284:	200002e4 	.word	0x200002e4
 8002288:	200002dc 	.word	0x200002dc
 800228c:	200009d0 	.word	0x200009d0
 8002290:	200002f4 	.word	0x200002f4
 8002294:	200002ec 	.word	0x200002ec
 8002298:	20000a34 	.word	0x20000a34

0800229c <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80a2 	beq.w	80023f4 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c0:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	ed93 7a03 	vldr	s14, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	edd3 6a06 	vldr	s13, [r3, #24]
 80022e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <Compute+0x82>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	ed93 7a03 	vldr	s14, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800230c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	ed93 7a03 	vldr	s14, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800232a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	dd04      	ble.n	800233e <Compute+0xa2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	e00e      	b.n	800235c <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	ed93 7a03 	vldr	s14, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edd3 7a08 	vldr	s15, [r3, #32]
 800234a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	d503      	bpl.n	800235c <Compute+0xc0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <Compute+0xe0>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edc3 7a01 	vstr	s15, [r3, #4]
 800237a:	e003      	b.n	8002384 <Compute+0xe8>
	else val->Output = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	ed93 7a01 	vldr	s14, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	ed93 6a07 	vldr	s12, [r3, #28]
 8002396:	edd7 7a02 	vldr	s15, [r7, #8]
 800239a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80023b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dd04      	ble.n	80023cc <Compute+0x130>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	e00e      	b.n	80023ea <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80023d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	d503      	bpl.n	80023ea <Compute+0x14e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	e000      	b.n	80023f6 <Compute+0x15a>
	if(!val->inAuto) return;
 80023f4:	bf00      	nop
}
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6178      	str	r0, [r7, #20]
 8002408:	ed87 0a04 	vstr	s0, [r7, #16]
 800240c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002410:	ed87 1a02 	vstr	s2, [r7, #8]
 8002414:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8002418:	edd7 7a04 	vldr	s15, [r7, #16]
 800241c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	f100 809b 	bmi.w	800255e <SetTunings+0x15e>
 8002428:	edd7 7a03 	vldr	s15, [r7, #12]
 800242c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	f100 8093 	bmi.w	800255e <SetTunings+0x15e>
 8002438:	edd7 7a02 	vldr	s15, [r7, #8]
 800243c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002444:	f100 808b 	bmi.w	800255e <SetTunings+0x15e>
 8002448:	edd7 7a01 	vldr	s15, [r7, #4]
 800244c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	f100 8083 	bmi.w	800255e <SetTunings+0x15e>
 8002458:	edd7 7a01 	vldr	s15, [r7, #4]
 800245c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dc79      	bgt.n	800255e <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 800246a:	edd7 7a01 	vldr	s15, [r7, #4]
 800246e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	bfcc      	ite	gt
 8002478:	2301      	movgt	r3, #1
 800247a:	2300      	movle	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	461a      	mov	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8002486:	edd7 7a01 	vldr	s15, [r7, #4]
 800248a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800248e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	bf4c      	ite	mi
 8002498:	2301      	movmi	r3, #1
 800249a:	2300      	movpl	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800256c <SetTunings+0x16c>
 80024b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ba:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 80024c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 80024d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80024da:	ed97 7a07 	vldr	s14, [r7, #28]
 80024de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d11d      	bne.n	800252c <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80024f6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002570 <SetTunings+0x170>
 80024fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	edd3 7a06 	vldr	s15, [r3, #24]
 800250a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002570 <SetTunings+0x170>
 800250e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	edd3 7a07 	vldr	s15, [r3, #28]
 800251e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002570 <SetTunings+0x170>
 8002522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002532:	edd7 7a01 	vldr	s15, [r7, #4]
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8002540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002544:	edd7 7a01 	vldr	s15, [r7, #4]
 8002548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800255c:	e000      	b.n	8002560 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800255e:	bf00      	nop
}
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	49742400 	.word	0x49742400
 8002570:	00000000 	.word	0x00000000

08002574 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd25      	ble.n	80025d0 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 800259a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259e:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	edd3 6a07 	vldr	s13, [r3, #28]
 80025bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80025c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025e8:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 80025ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80025f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	dc44      	bgt.n	8002688 <SetOutputLimits+0xac>
   val->outMin = Min;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	dd04      	ble.n	800262a <SetOutputLimits+0x4e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	e00e      	b.n	8002648 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	edd3 7a08 	vldr	s15, [r3, #32]
 8002636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d503      	bpl.n	8002648 <SetOutputLimits+0x6c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	ed93 7a03 	vldr	s14, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	dd04      	ble.n	8002668 <SetOutputLimits+0x8c>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	e010      	b.n	800268a <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	ed93 7a03 	vldr	s14, [r3, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	edd3 7a08 	vldr	s15, [r3, #32]
 8002674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	d505      	bpl.n	800268a <SetOutputLimits+0xae>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e000      	b.n	800268a <SetOutputLimits+0xae>
   if(Min > Max) return;
 8002688:	bf00      	nop
}
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80026b4:	2a00      	cmp	r2, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2201      	moveq	r2, #1
 80026ba:	2200      	movne	r2, #0
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	4293      	cmp	r3, r2
 80026c0:	d102      	bne.n	80026c8 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f808 	bl	80026d8 <Initialize>
    }
    val->inAuto = newAuto;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <Initialize>:

void Initialize(PID_instance *val)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80026fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	dd04      	ble.n	8002710 <Initialize+0x38>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 800270e:	e00f      	b.n	8002730 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	ed93 7a03 	vldr	s14, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edd3 7a08 	vldr	s15, [r3, #32]
 800271c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d400      	bmi.n	8002728 <Initialize+0x50>
}
 8002726:	e003      	b.n	8002730 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8002758:	b40f      	push	{r0, r1, r2, r3}
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <PrintServerPrintf+0x44>)
 8002770:	f00a fb6e 	bl	800ce50 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <PrintServerPrintf+0x48>)
 8002776:	681c      	ldr	r4, [r3, #0]
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <PrintServerPrintf+0x44>)
 800277a:	f7fd fd51 	bl	8000220 <strlen>
 800277e:	4603      	mov	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	4905      	ldr	r1, [pc, #20]	; (800279c <PrintServerPrintf+0x44>)
 8002786:	4620      	mov	r0, r4
 8002788:	f009 f83c 	bl	800b804 <HAL_UART_Transmit_DMA>
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002796:	b004      	add	sp, #16
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200004b0 	.word	0x200004b0
 80027a0:	200000d0 	.word	0x200000d0

080027a4 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	4613      	mov	r3, r2
 80027b2:	031b      	lsls	r3, r3, #12
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <dac_value+0x34>)
 80027b8:	8812      	ldrh	r2, [r2, #0]
 80027ba:	b212      	sxth	r2, r2
 80027bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80027c0:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <dac_value+0x38>)
 80027ca:	f003 fed9 	bl	8006580 <HAL_DAC_SetValue>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200006fc 	.word	0x200006fc
 80027dc:	20000920 	.word	0x20000920

080027e0 <polar_to_rectangular>:
typedef struct {
    float real;
    float imag;
} Complex;

Complex polar_to_rectangular(float magnitude, float angle_deg) {
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80027ea:	edc7 0a02 	vstr	s1, [r7, #8]
    Complex result;
    float angle_rad = angle_deg * (3.14159264 / 180.0); // Convert angle to radians
 80027ee:	68b8      	ldr	r0, [r7, #8]
 80027f0:	f7fd fed2 	bl	8000598 <__aeabi_f2d>
 80027f4:	a32c      	add	r3, pc, #176	; (adr r3, 80028a8 <polar_to_rectangular+0xc8>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	f7fd ff25 	bl	8000648 <__aeabi_dmul>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe f9f7 	bl	8000bf8 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
    result.real = magnitude * cos(angle_rad);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7fd fec2 	bl	8000598 <__aeabi_f2d>
 8002814:	4604      	mov	r4, r0
 8002816:	460d      	mov	r5, r1
 8002818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800281a:	f7fd febd 	bl	8000598 <__aeabi_f2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b10 	vmov	d0, r2, r3
 8002826:	f00a ffd3 	bl	800d7d0 <cos>
 800282a:	ec53 2b10 	vmov	r2, r3, d0
 800282e:	4620      	mov	r0, r4
 8002830:	4629      	mov	r1, r5
 8002832:	f7fd ff09 	bl	8000648 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f9db 	bl	8000bf8 <__aeabi_d2f>
 8002842:	4603      	mov	r3, r0
 8002844:	617b      	str	r3, [r7, #20]
    result.imag = magnitude * sin(angle_rad);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7fd fea6 	bl	8000598 <__aeabi_f2d>
 800284c:	4604      	mov	r4, r0
 800284e:	460d      	mov	r5, r1
 8002850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002852:	f7fd fea1 	bl	8000598 <__aeabi_f2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	ec43 2b10 	vmov	d0, r2, r3
 800285e:	f00b f80b 	bl	800d878 <sin>
 8002862:	ec53 2b10 	vmov	r2, r3, d0
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7fd feed 	bl	8000648 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f7fe f9bf 	bl	8000bf8 <__aeabi_d2f>
 800287a:	4603      	mov	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]
    return result;
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	f107 0214 	add.w	r2, r7, #20
 8002886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800288a:	e883 0003 	stmia.w	r3, {r0, r1}
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	ee07 2a10 	vmov	s14, r2
 8002896:	ee07 3a90 	vmov	s15, r3
}
 800289a:	eeb0 0a47 	vmov.f32	s0, s14
 800289e:	eef0 0a67 	vmov.f32	s1, s15
 80028a2:	3728      	adds	r7, #40	; 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	a1069112 	.word	0xa1069112
 80028ac:	3f91df46 	.word	0x3f91df46

080028b0 <add_complex>:

// Function to add two complex numbers
Complex add_complex(Complex a, Complex b) {
 80028b0:	b480      	push	{r7}
 80028b2:	b08b      	sub	sp, #44	; 0x2c
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	eeb0 6a40 	vmov.f32	s12, s0
 80028ba:	eef0 6a60 	vmov.f32	s13, s1
 80028be:	eeb0 7a41 	vmov.f32	s14, s2
 80028c2:	eef0 7a61 	vmov.f32	s15, s3
 80028c6:	ed87 6a04 	vstr	s12, [r7, #16]
 80028ca:	edc7 6a05 	vstr	s13, [r7, #20]
 80028ce:	ed87 7a02 	vstr	s14, [r7, #8]
 80028d2:	edc7 7a03 	vstr	s15, [r7, #12]
    Complex result;
    result.real = a.real + b.real;
 80028d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80028da:	edd7 7a02 	vldr	s15, [r7, #8]
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	edc7 7a06 	vstr	s15, [r7, #24]
    result.imag = a.imag + b.imag;
 80028e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80028ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f2:	edc7 7a07 	vstr	s15, [r7, #28]
    return result;
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	f107 0218 	add.w	r2, r7, #24
 80028fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002902:	e883 0003 	stmia.w	r3, {r0, r1}
 8002906:	6a3a      	ldr	r2, [r7, #32]
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	ee07 2a10 	vmov	s14, r2
 800290e:	ee07 3a90 	vmov	s15, r3
}
 8002912:	eeb0 0a47 	vmov.f32	s0, s14
 8002916:	eef0 0a67 	vmov.f32	s1, s15
 800291a:	372c      	adds	r7, #44	; 0x2c
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <calculate_vector_sum>:

// Function to calculate vector sum
float calculate_vector_sum(float current_A, float current_B, float current_C) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b090      	sub	sp, #64	; 0x40
 8002928:	af00      	add	r7, sp, #0
 800292a:	ed87 0a03 	vstr	s0, [r7, #12]
 800292e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002932:	ed87 1a01 	vstr	s2, [r7, #4]
    // Convert each current to a phasor (complex number)
    Complex phasor_A = polar_to_rectangular(current_A, 0);       // Phase A - 0 degrees
 8002936:	eddf 0a43 	vldr	s1, [pc, #268]	; 8002a44 <calculate_vector_sum+0x120>
 800293a:	ed97 0a03 	vldr	s0, [r7, #12]
 800293e:	f7ff ff4f 	bl	80027e0 <polar_to_rectangular>
 8002942:	eeb0 7a40 	vmov.f32	s14, s0
 8002946:	eef0 7a60 	vmov.f32	s15, s1
 800294a:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800294e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    Complex phasor_B = polar_to_rectangular(current_B, -120);    // Phase B - 120 degrees
 8002952:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002a48 <calculate_vector_sum+0x124>
 8002956:	ed97 0a02 	vldr	s0, [r7, #8]
 800295a:	f7ff ff41 	bl	80027e0 <polar_to_rectangular>
 800295e:	eeb0 7a40 	vmov.f32	s14, s0
 8002962:	eef0 7a60 	vmov.f32	s15, s1
 8002966:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800296a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    Complex phasor_C = polar_to_rectangular(current_C, 120);     // Phase C - 240 degrees
 800296e:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002a4c <calculate_vector_sum+0x128>
 8002972:	ed97 0a01 	vldr	s0, [r7, #4]
 8002976:	f7ff ff33 	bl	80027e0 <polar_to_rectangular>
 800297a:	eeb0 7a40 	vmov.f32	s14, s0
 800297e:	eef0 7a60 	vmov.f32	s15, s1
 8002982:	ed87 7a07 	vstr	s14, [r7, #28]
 8002986:	edc7 7a08 	vstr	s15, [r7, #32]

    // Sum the phasors
    Complex sum = add_complex(add_complex(phasor_A, phasor_B), phasor_C);
 800298a:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800298e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002992:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002996:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800299a:	eeb0 1a46 	vmov.f32	s2, s12
 800299e:	eef0 1a66 	vmov.f32	s3, s13
 80029a2:	eeb0 0a47 	vmov.f32	s0, s14
 80029a6:	eef0 0a67 	vmov.f32	s1, s15
 80029aa:	f7ff ff81 	bl	80028b0 <add_complex>
 80029ae:	eeb0 7a40 	vmov.f32	s14, s0
 80029b2:	eef0 7a60 	vmov.f32	s15, s1
 80029b6:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 80029ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80029be:	ed97 6a07 	vldr	s12, [r7, #28]
 80029c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80029c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80029ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029ce:	eeb0 1a46 	vmov.f32	s2, s12
 80029d2:	eef0 1a66 	vmov.f32	s3, s13
 80029d6:	eeb0 0a47 	vmov.f32	s0, s14
 80029da:	eef0 0a67 	vmov.f32	s1, s15
 80029de:	f7ff ff67 	bl	80028b0 <add_complex>
 80029e2:	eeb0 7a40 	vmov.f32	s14, s0
 80029e6:	eef0 7a60 	vmov.f32	s15, s1
 80029ea:	ed87 7a05 	vstr	s14, [r7, #20]
 80029ee:	edc7 7a06 	vstr	s15, [r7, #24]

    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
 80029f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a02:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	ee17 0a90 	vmov	r0, s15
 8002a12:	f7fd fdc1 	bl	8000598 <__aeabi_f2d>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	ec43 2b10 	vmov	d0, r2, r3
 8002a1e:	f00a fea8 	bl	800d772 <sqrt>
 8002a22:	ec53 2b10 	vmov	r2, r3, d0
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7fe f8e5 	bl	8000bf8 <__aeabi_d2f>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    return magnitude;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	ee07 3a90 	vmov	s15, r3
}
 8002a38:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3c:	3740      	adds	r7, #64	; 0x40
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	00000000 	.word	0x00000000
 8002a48:	c2f00000 	.word	0xc2f00000
 8002a4c:	42f00000 	.word	0x42f00000

08002a50 <ADC_CAL>:

void ADC_CAL(){
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <ADC_CAL+0x134>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <ADC_CAL+0x138>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	b21a      	sxth	r2, r3
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <ADC_CAL+0x13c>)
 8002a74:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <ADC_CAL+0x138>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	4a43      	ldr	r2, [pc, #268]	; (8002b8c <ADC_CAL+0x13c>)
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	b212      	sxth	r2, r2
 8002a82:	fb03 f202 	mul.w	r2, r3, r2
 8002a86:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <ADC_CAL+0x140>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	0852      	lsrs	r2, r2, #1
 8002a90:	4413      	add	r3, r2
 8002a92:	0adb      	lsrs	r3, r3, #11
 8002a94:	461a      	mov	r2, r3
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <ADC_CAL+0x144>)
 8002aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa6:	1152      	asrs	r2, r2, #5
 8002aa8:	17db      	asrs	r3, r3, #31
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <ADC_CAL+0x148>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <ADC_CAL+0x148>)
 8002ab4:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <ADC_CAL+0x138>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	4a33      	ldr	r2, [pc, #204]	; (8002b8c <ADC_CAL+0x13c>)
 8002abe:	8812      	ldrh	r2, [r2, #0]
 8002ac0:	b212      	sxth	r2, r2
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <ADC_CAL+0x140>)
 8002ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8002acc:	1ad2      	subs	r2, r2, r3
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	011a      	lsls	r2, r3, #4
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <ADC_CAL+0x144>)
 8002ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae6:	1152      	asrs	r2, r2, #5
 8002ae8:	17db      	asrs	r3, r3, #31
 8002aea:	1ad2      	subs	r2, r2, r3
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <ADC_CAL+0x148>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <ADC_CAL+0x148>)
 8002af4:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <ADC_CAL+0x138>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <ADC_CAL+0x13c>)
 8002afe:	8812      	ldrh	r2, [r2, #0]
 8002b00:	b212      	sxth	r2, r2
 8002b02:	fb03 f202 	mul.w	r2, r3, r2
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <ADC_CAL+0x140>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	1ad2      	subs	r2, r2, r3
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	0adb      	lsrs	r3, r3, #11
 8002b14:	461a      	mov	r2, r3
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	011a      	lsls	r2, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <ADC_CAL+0x144>)
 8002b22:	fb82 1203 	smull	r1, r2, r2, r3
 8002b26:	1152      	asrs	r2, r2, #5
 8002b28:	17db      	asrs	r3, r3, #31
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <ADC_CAL+0x148>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <ADC_CAL+0x148>)
 8002b34:	6093      	str	r3, [r2, #8]
	calibrating--;
 8002b36:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <ADC_CAL+0x14c>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <ADC_CAL+0x14c>)
 8002b40:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <ADC_CAL+0x14c>)
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d117      	bne.n	8002b7a <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <ADC_CAL+0x148>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <ADC_CAL+0x150>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <ADC_CAL+0x154>)
 8002b58:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <ADC_CAL+0x148>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <ADC_CAL+0x150>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <ADC_CAL+0x154>)
 8002b68:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <ADC_CAL+0x148>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <ADC_CAL+0x150>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <ADC_CAL+0x154>)
 8002b78:	6093      	str	r3, [r2, #8]
	}
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	200000d4 	.word	0x200000d4
 8002b88:	200006b0 	.word	0x200006b0
 8002b8c:	200006fc 	.word	0x200006fc
 8002b90:	00100101 	.word	0x00100101
 8002b94:	51eb851f 	.word	0x51eb851f
 8002b98:	20000724 	.word	0x20000724
 8002b9c:	20000720 	.word	0x20000720
 8002ba0:	10624dd3 	.word	0x10624dd3
 8002ba4:	200006f0 	.word	0x200006f0

08002ba8 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <current_init+0x38>)
 8002bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bb6:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <current_init+0x3c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	4909      	ldr	r1, [pc, #36]	; (8002be8 <current_init+0x40>)
 8002bc2:	480a      	ldr	r0, [pc, #40]	; (8002bec <current_init+0x44>)
 8002bc4:	f002 fa94 	bl	80050f0 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8002bc8:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <current_init+0x48>)
 8002bca:	f003 fc64 	bl	8006496 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <current_init+0x48>)
 8002bd2:	f003 fc82 	bl	80064da <HAL_DAC_Start>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000720 	.word	0x20000720
 8002be4:	20000700 	.word	0x20000700
 8002be8:	200006b0 	.word	0x200006b0
 8002bec:	20000784 	.word	0x20000784
 8002bf0:	20000920 	.word	0x20000920

08002bf4 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <voltage_temperature_init+0x20>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8002c02:	2208      	movs	r2, #8
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <voltage_temperature_init+0x24>)
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <voltage_temperature_init+0x28>)
 8002c08:	f002 fa72 	bl	80050f0 <HAL_ADC_Start_DMA>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000714 	.word	0x20000714
 8002c18:	200006d0 	.word	0x200006d0
 8002c1c:	200007f0 	.word	0x200007f0

08002c20 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a8a      	ldr	r2, [pc, #552]	; (8002e54 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	f040 80b7 	bne.w	8002da0 <HAL_ADC_ConvHalfCpltCallback+0x180>
		if(calibrating)ADC_CAL();
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <HAL_ADC_ConvHalfCpltCallback+0x238>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_ADC_ConvHalfCpltCallback+0x20>
 8002c3a:	f7ff ff09 	bl	8002a50 <ADC_CAL>
 8002c3e:	e0af      	b.n	8002da0 <HAL_ADC_ConvHalfCpltCallback+0x180>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002c40:	4b86      	ldr	r3, [pc, #536]	; (8002e5c <HAL_ADC_ConvHalfCpltCallback+0x23c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002c60:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da00      	bge.n	8002c72 <HAL_ADC_ConvHalfCpltCallback+0x52>
 8002c70:	330f      	adds	r3, #15
 8002c72:	111b      	asrs	r3, r3, #4
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	4a7a      	ldr	r2, [pc, #488]	; (8002e6c <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002c82:	fb82 0203 	smull	r0, r2, r2, r3
 8002c86:	441a      	add	r2, r3
 8002c88:	12d2      	asrs	r2, r2, #11
 8002c8a:	17db      	asrs	r3, r3, #31
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	011a      	lsls	r2, r3, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_ADC_ConvHalfCpltCallback+0x250>)
 8002c9a:	fb82 0203 	smull	r0, r2, r2, r3
 8002c9e:	1152      	asrs	r2, r2, #5
 8002ca0:	17db      	asrs	r3, r3, #31
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	2232      	movs	r2, #50	; 0x32
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	4a71      	ldr	r2, [pc, #452]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002cae:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002cb0:	4b6d      	ldr	r3, [pc, #436]	; (8002e68 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da00      	bge.n	8002cc0 <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8002cbe:	330f      	adds	r3, #15
 8002cc0:	111b      	asrs	r3, r3, #4
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a67      	ldr	r2, [pc, #412]	; (8002e6c <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002cd0:	fb82 0203 	smull	r0, r2, r2, r3
 8002cd4:	441a      	add	r2, r3
 8002cd6:	12d2      	asrs	r2, r2, #11
 8002cd8:	17db      	asrs	r3, r3, #31
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	011a      	lsls	r2, r3, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a62      	ldr	r2, [pc, #392]	; (8002e70 <HAL_ADC_ConvHalfCpltCallback+0x250>)
 8002ce8:	fb82 0203 	smull	r0, r2, r2, r3
 8002cec:	1152      	asrs	r2, r2, #5
 8002cee:	17db      	asrs	r3, r3, #31
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	2232      	movs	r2, #50	; 0x32
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	4a5e      	ldr	r2, [pc, #376]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002cfc:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002cfe:	4b5a      	ldr	r3, [pc, #360]	; (8002e68 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da00      	bge.n	8002d0e <HAL_ADC_ConvHalfCpltCallback+0xee>
 8002d0c:	330f      	adds	r3, #15
 8002d0e:	111b      	asrs	r3, r3, #4
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b54      	ldr	r3, [pc, #336]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	4a53      	ldr	r2, [pc, #332]	; (8002e6c <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 8002d1e:	fb82 0203 	smull	r0, r2, r2, r3
 8002d22:	441a      	add	r2, r3
 8002d24:	12d2      	asrs	r2, r2, #11
 8002d26:	17db      	asrs	r3, r3, #31
 8002d28:	1ad2      	subs	r2, r2, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	011a      	lsls	r2, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <HAL_ADC_ConvHalfCpltCallback+0x250>)
 8002d36:	fb82 0203 	smull	r0, r2, r2, r3
 8002d3a:	1152      	asrs	r2, r2, #5
 8002d3c:	17db      	asrs	r3, r3, #31
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	2232      	movs	r2, #50	; 0x32
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d4a:	6093      	str	r3, [r2, #8]
			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002d4c:	4b49      	ldr	r3, [pc, #292]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a48      	ldr	r2, [pc, #288]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fb03 f202 	mul.w	r2, r3, r2
 8002d58:	4b46      	ldr	r3, [pc, #280]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4945      	ldr	r1, [pc, #276]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d5e:	6849      	ldr	r1, [r1, #4]
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	441a      	add	r2, r3
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4942      	ldr	r1, [pc, #264]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d6c:	6889      	ldr	r1, [r1, #8]
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fbfd 	bl	8000574 <__aeabi_i2d>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	ec43 2b10 	vmov	d0, r2, r3
 8002d82:	f00a fcf6 	bl	800d772 <sqrt>
 8002d86:	ec53 2b10 	vmov	r2, r3, d0
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7fd ff0b 	bl	8000ba8 <__aeabi_d2iz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d96:	60d3      	str	r3, [r2, #12]
			Curent_IRQ_callback(&data);
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_ADC_ConvHalfCpltCallback+0x258>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4835      	ldr	r0, [pc, #212]	; (8002e74 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8002d9e:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_ADC_ConvHalfCpltCallback+0x25c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d151      	bne.n	8002e4c <HAL_ADC_ConvHalfCpltCallback+0x22c>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_ADC_ConvHalfCpltCallback+0x260>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	b212      	sxth	r2, r2
 8002db4:	fb03 f202 	mul.w	r2, r3, r2
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 8002dba:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	0adb      	lsrs	r3, r3, #11
 8002dc6:	b25a      	sxtb	r2, r3
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8002dca:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_ADC_ConvHalfCpltCallback+0x260>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	b212      	sxth	r2, r2
 8002dd8:	fb03 f202 	mul.w	r2, r3, r2
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 8002dde:	fba3 1302 	umull	r1, r3, r3, r2
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	0852      	lsrs	r2, r2, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	0adb      	lsrs	r3, r3, #11
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8002dee:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002df0:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_ADC_ConvHalfCpltCallback+0x260>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002df8:	8812      	ldrh	r2, [r2, #0]
 8002dfa:	b212      	sxth	r2, r2
 8002dfc:	fb03 f202 	mul.w	r2, r3, r2
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	4413      	add	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	0adb      	lsrs	r3, r3, #11
 8002e18:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8002e1a:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_ADC_ConvHalfCpltCallback+0x260>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8002e24:	8812      	ldrh	r2, [r2, #0]
 8002e26:	b212      	sxth	r2, r2
 8002e28:	fb03 f202 	mul.w	r2, r3, r2
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_ADC_ConvHalfCpltCallback+0x26c>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0bdb      	lsrs	r3, r3, #15
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8002e42:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_ADC_ConvHalfCpltCallback+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	480f      	ldr	r0, [pc, #60]	; (8002e88 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8002e4a:	4798      	blx	r3
	}
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000784 	.word	0x20000784
 8002e58:	20000720 	.word	0x20000720
 8002e5c:	200000d4 	.word	0x200000d4
 8002e60:	200006b0 	.word	0x200006b0
 8002e64:	200006fc 	.word	0x200006fc
 8002e68:	200006f0 	.word	0x200006f0
 8002e6c:	80080081 	.word	0x80080081
 8002e70:	51eb851f 	.word	0x51eb851f
 8002e74:	20000704 	.word	0x20000704
 8002e78:	20000700 	.word	0x20000700
 8002e7c:	200007f0 	.word	0x200007f0
 8002e80:	200006d0 	.word	0x200006d0
 8002e84:	00100101 	.word	0x00100101
 8002e88:	20000718 	.word	0x20000718
 8002e8c:	ccd99a67 	.word	0xccd99a67
 8002e90:	20000714 	.word	0x20000714

08002e94 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a76      	ldr	r2, [pc, #472]	; (8003078 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	f040 808f 	bne.w	8002fc4 <HAL_ADC_ConvCpltCallback+0x130>
 8002ea6:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 808a 	bne.w	8002fc4 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002ed0:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002ed2:	4b6e      	ldr	r3, [pc, #440]	; (800308c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da00      	bge.n	8002ee2 <HAL_ADC_ConvCpltCallback+0x4e>
 8002ee0:	330f      	adds	r3, #15
 8002ee2:	111b      	asrs	r3, r3, #4
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	4a67      	ldr	r2, [pc, #412]	; (8003090 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002ef2:	fb82 0203 	smull	r0, r2, r2, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	12d2      	asrs	r2, r2, #11
 8002efa:	17db      	asrs	r3, r3, #31
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	011a      	lsls	r2, r3, #4
 8002f06:	4413      	add	r3, r2
 8002f08:	4a62      	ldr	r2, [pc, #392]	; (8003094 <HAL_ADC_ConvCpltCallback+0x200>)
 8002f0a:	fb82 0203 	smull	r0, r2, r2, r3
 8002f0e:	1152      	asrs	r2, r2, #5
 8002f10:	17db      	asrs	r3, r3, #31
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	2232      	movs	r2, #50	; 0x32
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_ADC_ConvCpltCallback+0x204>)
 8002f1e:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da00      	bge.n	8002f30 <HAL_ADC_ConvCpltCallback+0x9c>
 8002f2e:	330f      	adds	r3, #15
 8002f30:	111b      	asrs	r3, r3, #4
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b54      	ldr	r3, [pc, #336]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b21b      	sxth	r3, r3
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	4a54      	ldr	r2, [pc, #336]	; (8003090 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002f40:	fb82 0203 	smull	r0, r2, r2, r3
 8002f44:	441a      	add	r2, r3
 8002f46:	12d2      	asrs	r2, r2, #11
 8002f48:	17db      	asrs	r3, r3, #31
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	4413      	add	r3, r2
 8002f56:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_ADC_ConvCpltCallback+0x200>)
 8002f58:	fb82 0203 	smull	r0, r2, r2, r3
 8002f5c:	1152      	asrs	r2, r2, #5
 8002f5e:	17db      	asrs	r3, r3, #31
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	440b      	add	r3, r1
 8002f64:	2232      	movs	r2, #50	; 0x32
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	4a4b      	ldr	r2, [pc, #300]	; (8003098 <HAL_ADC_ConvCpltCallback+0x204>)
 8002f6c:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da00      	bge.n	8002f7e <HAL_ADC_ConvCpltCallback+0xea>
 8002f7c:	330f      	adds	r3, #15
 8002f7e:	111b      	asrs	r3, r3, #4
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b21b      	sxth	r3, r3
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	4a40      	ldr	r2, [pc, #256]	; (8003090 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002f8e:	fb82 0203 	smull	r0, r2, r2, r3
 8002f92:	441a      	add	r2, r3
 8002f94:	12d2      	asrs	r2, r2, #11
 8002f96:	17db      	asrs	r3, r3, #31
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	011a      	lsls	r2, r3, #4
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_ADC_ConvCpltCallback+0x200>)
 8002fa6:	fb82 0203 	smull	r0, r2, r2, r3
 8002faa:	1152      	asrs	r2, r2, #5
 8002fac:	17db      	asrs	r3, r3, #31
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	2232      	movs	r2, #50	; 0x32
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	4a37      	ldr	r2, [pc, #220]	; (8003098 <HAL_ADC_ConvCpltCallback+0x204>)
 8002fba:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_ADC_ConvCpltCallback+0x208>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4835      	ldr	r0, [pc, #212]	; (8003098 <HAL_ADC_ConvCpltCallback+0x204>)
 8002fc2:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a36      	ldr	r2, [pc, #216]	; (80030a0 <HAL_ADC_ConvCpltCallback+0x20c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d151      	bne.n	8003070 <HAL_ADC_ConvCpltCallback+0x1dc>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_ADC_ConvCpltCallback+0x210>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002fd4:	8812      	ldrh	r2, [r2, #0]
 8002fd6:	b212      	sxth	r2, r2
 8002fd8:	fb03 f202 	mul.w	r2, r3, r2
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_ADC_ConvCpltCallback+0x214>)
 8002fde:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	0852      	lsrs	r2, r2, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	0adb      	lsrs	r3, r3, #11
 8002fea:	b25a      	sxtb	r2, r3
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_ADC_ConvCpltCallback+0x218>)
 8002fee:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_ADC_ConvCpltCallback+0x210>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	4a24      	ldr	r2, [pc, #144]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002ff8:	8812      	ldrh	r2, [r2, #0]
 8002ffa:	b212      	sxth	r2, r2
 8002ffc:	fb03 f202 	mul.w	r2, r3, r2
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_ADC_ConvCpltCallback+0x214>)
 8003002:	fba3 1302 	umull	r1, r3, r3, r2
 8003006:	1ad2      	subs	r2, r2, r3
 8003008:	0852      	lsrs	r2, r2, #1
 800300a:	4413      	add	r3, r2
 800300c:	0adb      	lsrs	r3, r3, #11
 800300e:	b25a      	sxtb	r2, r3
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_ADC_ConvCpltCallback+0x218>)
 8003012:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_ADC_ConvCpltCallback+0x210>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	b212      	sxth	r2, r2
 8003020:	fb03 f202 	mul.w	r2, r3, r2
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	4413      	add	r3, r2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	461a      	mov	r2, r3
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_ADC_ConvCpltCallback+0x214>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	1ad2      	subs	r2, r2, r3
 8003036:	0852      	lsrs	r2, r2, #1
 8003038:	4413      	add	r3, r2
 800303a:	0adb      	lsrs	r3, r3, #11
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_ADC_ConvCpltCallback+0x218>)
 800303e:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_ADC_ConvCpltCallback+0x210>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	b212      	sxth	r2, r2
 800304c:	fb03 f202 	mul.w	r2, r3, r2
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4413      	add	r3, r2
 800305a:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <HAL_ADC_ConvCpltCallback+0x21c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0bdb      	lsrs	r3, r3, #15
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_ADC_ConvCpltCallback+0x218>)
 8003066:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_ADC_ConvCpltCallback+0x220>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	480f      	ldr	r0, [pc, #60]	; (80030ac <HAL_ADC_ConvCpltCallback+0x218>)
 800306e:	4798      	blx	r3
	}
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000784 	.word	0x20000784
 800307c:	20000720 	.word	0x20000720
 8003080:	200000d4 	.word	0x200000d4
 8003084:	200006b0 	.word	0x200006b0
 8003088:	200006fc 	.word	0x200006fc
 800308c:	200006f0 	.word	0x200006f0
 8003090:	80080081 	.word	0x80080081
 8003094:	51eb851f 	.word	0x51eb851f
 8003098:	20000704 	.word	0x20000704
 800309c:	20000700 	.word	0x20000700
 80030a0:	200007f0 	.word	0x200007f0
 80030a4:	200006d0 	.word	0x200006d0
 80030a8:	00100101 	.word	0x00100101
 80030ac:	20000718 	.word	0x20000718
 80030b0:	ccd99a67 	.word	0xccd99a67
 80030b4:	20000714 	.word	0x20000714

080030b8 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f004 f8b9 	bl	8007238 <HAL_FDCAN_Start>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e00a      	b.n	80030e6 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80030d0:	2200      	movs	r2, #0
 80030d2:	2101      	movs	r1, #1
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f004 f9f5 	bl	80074c4 <HAL_FDCAN_ActivateNotification>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <FDCAN_addCallback+0x70>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b09      	cmp	r3, #9
 8003102:	d901      	bls.n	8003108 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8003104:	2303      	movs	r3, #3
 8003106:	e025      	b.n	8003154 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e00c      	b.n	8003128 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 800310e:	4a15      	ldr	r2, [pc, #84]	; (8003164 <FDCAN_addCallback+0x74>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	429a      	cmp	r2, r3
 800311c:	d101      	bne.n	8003122 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e018      	b.n	8003154 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <FDCAN_addCallback+0x70>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3ed      	bcc.n	800310e <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <FDCAN_addCallback+0x70>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	490a      	ldr	r1, [pc, #40]	; (8003164 <FDCAN_addCallback+0x74>)
 800313a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <FDCAN_addCallback+0x74>)
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <FDCAN_addCallback+0x70>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a04      	ldr	r2, [pc, #16]	; (8003160 <FDCAN_addCallback+0x70>)
 8003150:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3724      	adds	r7, #36	; 0x24
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20000780 	.word	0x20000780
 8003164:	20000730 	.word	0x20000730

08003168 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08e      	sub	sp, #56	; 0x38
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8003178:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800317c:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800318a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8003190:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4619      	mov	r1, r3
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f004 f86e 	bl	8007288 <HAL_FDCAN_AddMessageToTxFifoQ>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b09e      	sub	sp, #120	; 0x78
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80031d2:	2140      	movs	r1, #64	; 0x40
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f004 f89b 	bl	8007310 <HAL_FDCAN_GetRxMessage>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80031e0:	f000 fd90 	bl	8003d04 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	677b      	str	r3, [r7, #116]	; 0x74
 80031e8:	e012      	b.n	8003210 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80031ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d107      	bne.n	800320a <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80031fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	4610      	mov	r0, r2
 8003208:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800320a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800320c:	3301      	adds	r3, #1
 800320e:	677b      	str	r3, [r7, #116]	; 0x74
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003216:	429a      	cmp	r2, r3
 8003218:	d3e7      	bcc.n	80031ea <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	3778      	adds	r7, #120	; 0x78
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000730 	.word	0x20000730
 8003228:	20000780 	.word	0x20000780

0800322c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	2220      	movs	r2, #32
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f009 fe11 	bl	800ce6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800324a:	4b4d      	ldr	r3, [pc, #308]	; (8003380 <MX_ADC1_Init+0x154>)
 800324c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003252:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <MX_ADC1_Init+0x154>)
 8003254:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800325a:	4b49      	ldr	r3, [pc, #292]	; (8003380 <MX_ADC1_Init+0x154>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003260:	4b47      	ldr	r3, [pc, #284]	; (8003380 <MX_ADC1_Init+0x154>)
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003266:	4b46      	ldr	r3, [pc, #280]	; (8003380 <MX_ADC1_Init+0x154>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <MX_ADC1_Init+0x154>)
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <MX_ADC1_Init+0x154>)
 8003274:	2208      	movs	r2, #8
 8003276:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003278:	4b41      	ldr	r3, [pc, #260]	; (8003380 <MX_ADC1_Init+0x154>)
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800327e:	4b40      	ldr	r3, [pc, #256]	; (8003380 <MX_ADC1_Init+0x154>)
 8003280:	2201      	movs	r2, #1
 8003282:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8003284:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <MX_ADC1_Init+0x154>)
 8003286:	2204      	movs	r2, #4
 8003288:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <MX_ADC1_Init+0x154>)
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <MX_ADC1_Init+0x154>)
 8003294:	2200      	movs	r2, #0
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003298:	4b39      	ldr	r3, [pc, #228]	; (8003380 <MX_ADC1_Init+0x154>)
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <MX_ADC1_Init+0x154>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <MX_ADC1_Init+0x154>)
 80032a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80032ae:	4b34      	ldr	r3, [pc, #208]	; (8003380 <MX_ADC1_Init+0x154>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80032b6:	4b32      	ldr	r3, [pc, #200]	; (8003380 <MX_ADC1_Init+0x154>)
 80032b8:	220c      	movs	r2, #12
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <MX_ADC1_Init+0x154>)
 80032be:	2200      	movs	r2, #0
 80032c0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80032c2:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <MX_ADC1_Init+0x154>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <MX_ADC1_Init+0x154>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032ce:	482c      	ldr	r0, [pc, #176]	; (8003380 <MX_ADC1_Init+0x154>)
 80032d0:	f001 fd84 	bl	8004ddc <HAL_ADC_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80032da:	f000 fd13 	bl	8003d04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80032e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	4825      	ldr	r0, [pc, #148]	; (8003380 <MX_ADC1_Init+0x154>)
 80032ea:	f002 ff21 	bl	8006130 <HAL_ADCEx_MultiModeConfigChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80032f4:	f000 fd06 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032f8:	4b22      	ldr	r3, [pc, #136]	; (8003384 <MX_ADC1_Init+0x158>)
 80032fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032fc:	2306      	movs	r3, #6
 80032fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8003300:	2303      	movs	r3, #3
 8003302:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003304:	237f      	movs	r3, #127	; 0x7f
 8003306:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003308:	2304      	movs	r3, #4
 800330a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	4619      	mov	r1, r3
 8003314:	481a      	ldr	r0, [pc, #104]	; (8003380 <MX_ADC1_Init+0x154>)
 8003316:	f002 f9cd 	bl	80056b4 <HAL_ADC_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8003320:	f000 fcf0 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <MX_ADC1_Init+0x15c>)
 8003326:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003328:	230c      	movs	r3, #12
 800332a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4619      	mov	r1, r3
 8003330:	4813      	ldr	r0, [pc, #76]	; (8003380 <MX_ADC1_Init+0x154>)
 8003332:	f002 f9bf 	bl	80056b4 <HAL_ADC_ConfigChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800333c:	f000 fce2 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <MX_ADC1_Init+0x160>)
 8003342:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003344:	2312      	movs	r3, #18
 8003346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	4619      	mov	r1, r3
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <MX_ADC1_Init+0x154>)
 800334e:	f002 f9b1 	bl	80056b4 <HAL_ADC_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8003358:	f000 fcd4 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_ADC1_Init+0x164>)
 800335e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003360:	2318      	movs	r3, #24
 8003362:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_ADC1_Init+0x154>)
 800336a:	f002 f9a3 	bl	80056b4 <HAL_ADC_ConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8003374:	f000 fcc6 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003378:	bf00      	nop
 800337a:	3730      	adds	r7, #48	; 0x30
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000784 	.word	0x20000784
 8003384:	04300002 	.word	0x04300002
 8003388:	08600004 	.word	0x08600004
 800338c:	0c900008 	.word	0x0c900008
 8003390:	cb840000 	.word	0xcb840000

08003394 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800339a:	463b      	mov	r3, r7
 800339c:	2220      	movs	r2, #32
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f009 fd63 	bl	800ce6c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033a6:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033a8:	4a47      	ldr	r2, [pc, #284]	; (80034c8 <MX_ADC2_Init+0x134>)
 80033aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033b4:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033ba:	4b42      	ldr	r3, [pc, #264]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033bc:	2200      	movs	r2, #0
 80033be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033c6:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80033d2:	4b3c      	ldr	r3, [pc, #240]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033da:	2201      	movs	r2, #1
 80033dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80033de:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033e4:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033f2:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80033f8:	4b32      	ldr	r3, [pc, #200]	; (80034c4 <MX_ADC2_Init+0x130>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003400:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <MX_ADC2_Init+0x130>)
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003412:	220c      	movs	r2, #12
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8003416:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003418:	2200      	movs	r2, #0
 800341a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <MX_ADC2_Init+0x130>)
 800341e:	2200      	movs	r2, #0
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003424:	2201      	movs	r2, #1
 8003426:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003428:	4826      	ldr	r0, [pc, #152]	; (80034c4 <MX_ADC2_Init+0x130>)
 800342a:	f001 fcd7 	bl	8004ddc <HAL_ADC_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8003434:	f000 fc66 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <MX_ADC2_Init+0x138>)
 800343a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800343c:	2306      	movs	r3, #6
 800343e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003440:	2307      	movs	r3, #7
 8003442:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003444:	237f      	movs	r3, #127	; 0x7f
 8003446:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003448:	2304      	movs	r3, #4
 800344a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003450:	463b      	mov	r3, r7
 8003452:	4619      	mov	r1, r3
 8003454:	481b      	ldr	r0, [pc, #108]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003456:	f002 f92d 	bl	80056b4 <HAL_ADC_ConfigChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8003460:	f000 fc50 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_ADC2_Init+0x13c>)
 8003466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003468:	230c      	movs	r3, #12
 800346a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003470:	463b      	mov	r3, r7
 8003472:	4619      	mov	r1, r3
 8003474:	4813      	ldr	r0, [pc, #76]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003476:	f002 f91d 	bl	80056b4 <HAL_ADC_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8003480:	f000 fc40 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <MX_ADC2_Init+0x140>)
 8003486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003488:	2312      	movs	r3, #18
 800348a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800348c:	463b      	mov	r3, r7
 800348e:	4619      	mov	r1, r3
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <MX_ADC2_Init+0x130>)
 8003492:	f002 f90f 	bl	80056b4 <HAL_ADC_ConfigChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 800349c:	f000 fc32 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <MX_ADC2_Init+0x144>)
 80034a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80034a4:	2318      	movs	r3, #24
 80034a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80034a8:	463b      	mov	r3, r7
 80034aa:	4619      	mov	r1, r3
 80034ac:	4805      	ldr	r0, [pc, #20]	; (80034c4 <MX_ADC2_Init+0x130>)
 80034ae:	f002 f901 	bl	80056b4 <HAL_ADC_ConfigChannel>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80034b8:	f000 fc24 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200007f0 	.word	0x200007f0
 80034c8:	50000100 	.word	0x50000100
 80034cc:	32601000 	.word	0x32601000
 80034d0:	3ac04000 	.word	0x3ac04000
 80034d4:	36902000 	.word	0x36902000
 80034d8:	0c900008 	.word	0x0c900008

080034dc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b09e      	sub	sp, #120	; 0x78
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f4:	f107 0320 	add.w	r3, r7, #32
 80034f8:	2244      	movs	r2, #68	; 0x44
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f009 fcb5 	bl	800ce6c <memset>
  if(adcHandle->Instance==ADC1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350a:	d171      	bne.n	80035f0 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800350c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003510:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003512:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003516:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003518:	f107 0320 	add.w	r3, r7, #32
 800351c:	4618      	mov	r0, r3
 800351e:	f005 fbb5 	bl	8008c8c <HAL_RCCEx_PeriphCLKConfig>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003528:	f000 fbec 	bl	8003d04 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800352c:	4b7a      	ldr	r3, [pc, #488]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a79      	ldr	r2, [pc, #484]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 8003534:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003536:	4b78      	ldr	r3, [pc, #480]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10b      	bne.n	8003556 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800353e:	4b77      	ldr	r3, [pc, #476]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4a76      	ldr	r2, [pc, #472]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800354a:	4b74      	ldr	r3, [pc, #464]	; (800371c <HAL_ADC_MspInit+0x240>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	4b71      	ldr	r3, [pc, #452]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	4a70      	ldr	r2, [pc, #448]	; (800371c <HAL_ADC_MspInit+0x240>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003562:	4b6e      	ldr	r3, [pc, #440]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800356e:	2307      	movs	r3, #7
 8003570:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003572:	2303      	movs	r3, #3
 8003574:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003584:	f004 fba4 	bl	8007cd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003588:	4b65      	ldr	r3, [pc, #404]	; (8003720 <HAL_ADC_MspInit+0x244>)
 800358a:	4a66      	ldr	r2, [pc, #408]	; (8003724 <HAL_ADC_MspInit+0x248>)
 800358c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800358e:	4b64      	ldr	r3, [pc, #400]	; (8003720 <HAL_ADC_MspInit+0x244>)
 8003590:	2205      	movs	r2, #5
 8003592:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_ADC_MspInit+0x244>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_ADC_MspInit+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035a0:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035a6:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035ae:	4b5c      	ldr	r3, [pc, #368]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80035b6:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035b8:	2220      	movs	r2, #32
 80035ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035bc:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035c2:	4857      	ldr	r0, [pc, #348]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035c4:	f003 f9ac 	bl	8006920 <HAL_DMA_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80035ce:	f000 fb99 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
 80035d8:	4a51      	ldr	r2, [pc, #324]	; (8003720 <HAL_ADC_MspInit+0x244>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2012      	movs	r0, #18
 80035e4:	f002 ff23 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80035e8:	2012      	movs	r0, #18
 80035ea:	f002 ff3a 	bl	8006462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80035ee:	e08f      	b.n	8003710 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a4c      	ldr	r2, [pc, #304]	; (8003728 <HAL_ADC_MspInit+0x24c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f040 808a 	bne.w	8003710 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80035fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003600:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003602:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003606:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003608:	f107 0320 	add.w	r3, r7, #32
 800360c:	4618      	mov	r0, r3
 800360e:	f005 fb3d 	bl	8008c8c <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8003618:	f000 fb74 	bl	8003d04 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800361c:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a3d      	ldr	r2, [pc, #244]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 8003624:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003626:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <HAL_ADC_MspInit+0x23c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10b      	bne.n	8003646 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	4a3a      	ldr	r2, [pc, #232]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_ADC_MspInit+0x240>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	4b35      	ldr	r3, [pc, #212]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	4a34      	ldr	r2, [pc, #208]	; (800371c <HAL_ADC_MspInit+0x240>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003652:	4b32      	ldr	r3, [pc, #200]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_ADC_MspInit+0x240>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_ADC_MspInit+0x240>)
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8003676:	2360      	movs	r3, #96	; 0x60
 8003678:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800367a:	2303      	movs	r3, #3
 800367c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003686:	4619      	mov	r1, r3
 8003688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800368c:	f004 fb20 	bl	8007cd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8003690:	f640 0304 	movw	r3, #2052	; 0x804
 8003694:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003696:	2303      	movs	r3, #3
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036a2:	4619      	mov	r1, r3
 80036a4:	4821      	ldr	r0, [pc, #132]	; (800372c <HAL_ADC_MspInit+0x250>)
 80036a6:	f004 fb13 	bl	8007cd0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036ac:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_ADC_MspInit+0x258>)
 80036ae:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80036b0:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ce:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036da:	2220      	movs	r2, #32
 80036dc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036e4:	4812      	ldr	r0, [pc, #72]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036e6:	f003 f91b 	bl	8006920 <HAL_DMA_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80036f0:	f000 fb08 	bl	8003d04 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
 80036fa:	4a0d      	ldr	r2, [pc, #52]	; (8003730 <HAL_ADC_MspInit+0x254>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2100      	movs	r1, #0
 8003704:	2012      	movs	r0, #18
 8003706:	f002 fe92 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800370a:	2012      	movs	r0, #18
 800370c:	f002 fea9 	bl	8006462 <HAL_NVIC_EnableIRQ>
}
 8003710:	bf00      	nop
 8003712:	3778      	adds	r7, #120	; 0x78
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	2000091c 	.word	0x2000091c
 800371c:	40021000 	.word	0x40021000
 8003720:	2000085c 	.word	0x2000085c
 8003724:	40020008 	.word	0x40020008
 8003728:	50000100 	.word	0x50000100
 800372c:	48000400 	.word	0x48000400
 8003730:	200008bc 	.word	0x200008bc
 8003734:	4002001c 	.word	0x4002001c

08003738 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800373e:	463b      	mov	r3, r7
 8003740:	2230      	movs	r2, #48	; 0x30
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f009 fb91 	bl	800ce6c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <MX_DAC1_Init+0x6c>)
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <MX_DAC1_Init+0x70>)
 800374e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003750:	4814      	ldr	r0, [pc, #80]	; (80037a4 <MX_DAC1_Init+0x6c>)
 8003752:	f002 fea0 	bl	8006496 <HAL_DAC_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800375c:	f000 fad2 	bl	8003d04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800377c:	2301      	movs	r3, #1
 800377e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003784:	463b      	mov	r3, r7
 8003786:	2200      	movs	r2, #0
 8003788:	4619      	mov	r1, r3
 800378a:	4806      	ldr	r0, [pc, #24]	; (80037a4 <MX_DAC1_Init+0x6c>)
 800378c:	f002 ff20 	bl	80065d0 <HAL_DAC_ConfigChannel>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003796:	f000 fab5 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800379a:	bf00      	nop
 800379c:	3730      	adds	r7, #48	; 0x30
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000920 	.word	0x20000920
 80037a8:	50000800 	.word	0x50000800

080037ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_DAC_MspInit+0x74>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d124      	bne.n	8003818 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_DAC_MspInit+0x78>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037fe:	2310      	movs	r3, #16
 8003800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003802:	2303      	movs	r3, #3
 8003804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003814:	f004 fa5c 	bl	8007cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003818:	bf00      	nop
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	50000800 	.word	0x50000800
 8003824:	40021000 	.word	0x40021000

08003828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800382e:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	6493      	str	r3, [r2, #72]	; 0x48
 800383a:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <MX_DMA_Init+0xc8>)
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <MX_DMA_Init+0xc8>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6493      	str	r3, [r2, #72]	; 0x48
 8003852:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <MX_DMA_Init+0xc8>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6493      	str	r3, [r2, #72]	; 0x48
 800386a:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <MX_DMA_Init+0xc8>)
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	200b      	movs	r0, #11
 800387c:	f002 fdd7 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003880:	200b      	movs	r0, #11
 8003882:	f002 fdee 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	200c      	movs	r0, #12
 800388c:	f002 fdcf 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003890:	200c      	movs	r0, #12
 8003892:	f002 fde6 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	200d      	movs	r0, #13
 800389c:	f002 fdc7 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80038a0:	200d      	movs	r0, #13
 80038a2:	f002 fdde 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	200e      	movs	r0, #14
 80038ac:	f002 fdbf 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80038b0:	200e      	movs	r0, #14
 80038b2:	f002 fdd6 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	2038      	movs	r0, #56	; 0x38
 80038bc:	f002 fdb7 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80038c0:	2038      	movs	r0, #56	; 0x38
 80038c2:	f002 fdce 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	2039      	movs	r0, #57	; 0x39
 80038cc:	f002 fdaf 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80038d0:	2039      	movs	r0, #57	; 0x39
 80038d2:	f002 fdc6 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	203a      	movs	r0, #58	; 0x3a
 80038dc:	f002 fda7 	bl	800642e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80038e0:	203a      	movs	r0, #58	; 0x3a
 80038e2:	f002 fdbe 	bl	8006462 <HAL_NVIC_EnableIRQ>

}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000

080038f4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <MX_FDCAN1_Init+0x88>)
 80038fa:	4a21      	ldr	r2, [pc, #132]	; (8003980 <MX_FDCAN1_Init+0x8c>)
 80038fc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80038fe:	4b1f      	ldr	r3, [pc, #124]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003906:	f44f 7240 	mov.w	r2, #768	; 0x300
 800390a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800390c:	4b1b      	ldr	r3, [pc, #108]	; (800397c <MX_FDCAN1_Init+0x88>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003914:	2200      	movs	r2, #0
 8003916:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <MX_FDCAN1_Init+0x88>)
 800391a:	2200      	movs	r2, #0
 800391c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003920:	2200      	movs	r2, #0
 8003922:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003924:	4b15      	ldr	r3, [pc, #84]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_FDCAN1_Init+0x88>)
 800392c:	2207      	movs	r2, #7
 800392e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003932:	222a      	movs	r2, #42	; 0x2a
 8003934:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003938:	2207      	movs	r2, #7
 800393a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_FDCAN1_Init+0x88>)
 800393e:	2201      	movs	r2, #1
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003944:	2209      	movs	r2, #9
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_FDCAN1_Init+0x88>)
 800394a:	220a      	movs	r2, #10
 800394c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003950:	2209      	movs	r2, #9
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_FDCAN1_Init+0x88>)
 800395c:	2200      	movs	r2, #0
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003962:	2200      	movs	r2, #0
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_FDCAN1_Init+0x88>)
 8003968:	f003 fb0c 	bl	8006f84 <HAL_FDCAN_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003972:	f000 f9c7 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000934 	.word	0x20000934
 8003980:	40006400 	.word	0x40006400

08003984 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b09a      	sub	sp, #104	; 0x68
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	2244      	movs	r2, #68	; 0x44
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f009 fa61 	bl	800ce6c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a24      	ldr	r2, [pc, #144]	; (8003a40 <HAL_FDCAN_MspInit+0xbc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d141      	bne.n	8003a38 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80039b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80039ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c0:	f107 0310 	add.w	r3, r7, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f005 f961 	bl	8008c8c <HAL_RCCEx_PeriphCLKConfig>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80039d0:	f000 f998 	bl	8003d04 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039de:	6593      	str	r3, [r2, #88]	; 0x58
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f0:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_FDCAN_MspInit+0xc0>)
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003a08:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003a16:	2309      	movs	r3, #9
 8003a18:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a24:	f004 f954 	bl	8007cd0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2015      	movs	r0, #21
 8003a2e:	f002 fcfe 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003a32:	2015      	movs	r0, #21
 8003a34:	f002 fd15 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003a38:	bf00      	nop
 8003a3a:	3768      	adds	r7, #104	; 0x68
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40006400 	.word	0x40006400
 8003a44:	40021000 	.word	0x40021000

08003a48 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <MX_FMAC_Init+0x20>)
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <MX_FMAC_Init+0x24>)
 8003a50:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_FMAC_Init+0x20>)
 8003a54:	f004 f890 	bl	8007b78 <HAL_FMAC_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8003a5e:	f000 f951 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000998 	.word	0x20000998
 8003a6c:	40021400 	.word	0x40021400

08003a70 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_FMAC_MspInit+0x38>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10b      	bne.n	8003a9a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_FMAC_MspInit+0x3c>)
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_FMAC_MspInit+0x3c>)
 8003a88:	f043 0310 	orr.w	r3, r3, #16
 8003a8c:	6493      	str	r3, [r2, #72]	; 0x48
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_FMAC_MspInit+0x3c>)
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021400 	.word	0x40021400
 8003aac:	40021000 	.word	0x40021000

08003ab0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003acc:	f043 0320 	orr.w	r3, r3, #32
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aea:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	4a44      	ldr	r2, [pc, #272]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b02:	4b42      	ldr	r3, [pc, #264]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b0e:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	4a3e      	ldr	r2, [pc, #248]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1a:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b32:	4b36      	ldr	r3, [pc, #216]	; (8003c0c <MX_GPIO_Init+0x15c>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	21c0      	movs	r1, #192	; 0xc0
 8003b42:	4833      	ldr	r0, [pc, #204]	; (8003c10 <MX_GPIO_Init+0x160>)
 8003b44:	f004 fa46 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b52:	f004 fa3f 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8003b56:	2200      	movs	r2, #0
 8003b58:	2104      	movs	r1, #4
 8003b5a:	482e      	ldr	r0, [pc, #184]	; (8003c14 <MX_GPIO_Init+0x164>)
 8003b5c:	f004 fa3a 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8003b60:	2200      	movs	r2, #0
 8003b62:	2140      	movs	r1, #64	; 0x40
 8003b64:	482c      	ldr	r0, [pc, #176]	; (8003c18 <MX_GPIO_Init+0x168>)
 8003b66:	f004 fa35 	bl	8007fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4823      	ldr	r0, [pc, #140]	; (8003c10 <MX_GPIO_Init+0x160>)
 8003b82:	f004 f8a5 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba6:	f004 f893 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8003baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc6:	f004 f883 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <MX_GPIO_Init+0x164>)
 8003be2:	f004 f875 	bl	8007cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8003be6:	2340      	movs	r3, #64	; 0x40
 8003be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4806      	ldr	r0, [pc, #24]	; (8003c18 <MX_GPIO_Init+0x168>)
 8003bfe:	f004 f867 	bl	8007cd0 <HAL_GPIO_Init>

}
 8003c02:	bf00      	nop
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	48000800 	.word	0x48000800
 8003c14:	48000c00 	.word	0x48000c00
 8003c18:	48000400 	.word	0x48000400

08003c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c20:	f000 fe05 	bl	800482e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c24:	f000 f81b 	bl	8003c5e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c28:	f7ff ff42 	bl	8003ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c2c:	f7ff fdfc 	bl	8003828 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003c30:	f7ff fe60 	bl	80038f4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8003c34:	f000 f86c 	bl	8003d10 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003c38:	f000 f8a8 	bl	8003d8c <MX_SPI3_Init>
  MX_TIM1_Init();
 8003c3c:	f000 fb3c 	bl	80042b8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003c40:	f7ff faf4 	bl	800322c <MX_ADC1_Init>
  MX_ADC2_Init();
 8003c44:	f7ff fba6 	bl	8003394 <MX_ADC2_Init>
  MX_DAC1_Init();
 8003c48:	f7ff fd76 	bl	8003738 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8003c4c:	f000 fcec 	bl	8004628 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003c50:	f000 fbfa 	bl	8004448 <MX_TIM3_Init>
  MX_FMAC_Init();
 8003c54:	f7ff fef8 	bl	8003a48 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8003c58:	f7fd fa68 	bl	800112c <BLDC_main>
 8003c5c:	e7fc      	b.n	8003c58 <main+0x3c>

08003c5e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b094      	sub	sp, #80	; 0x50
 8003c62:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c64:	f107 0318 	add.w	r3, r7, #24
 8003c68:	2238      	movs	r2, #56	; 0x38
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f009 f8fd 	bl	800ce6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f004 f9d9 	bl	8008038 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c86:	2302      	movs	r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c90:	2340      	movs	r3, #64	; 0x40
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c94:	2302      	movs	r3, #2
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003ca0:	2350      	movs	r3, #80	; 0x50
 8003ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003ca8:	2308      	movs	r3, #8
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003cac:	2302      	movs	r3, #2
 8003cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb0:	f107 0318 	add.w	r3, r7, #24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 fa73 	bl	80081a0 <HAL_RCC_OscConfig>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003cc0:	f000 f820 	bl	8003d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2104      	movs	r1, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 fd77 	bl	80087d0 <HAL_RCC_ClockConfig>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003ce8:	f000 f80c 	bl	8003d04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8003cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cf0:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8003cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cf8:	f004 fea6 	bl	8008a48 <HAL_RCC_MCOConfig>
}
 8003cfc:	bf00      	nop
 8003cfe:	3750      	adds	r7, #80	; 0x50
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d08:	b672      	cpsid	i
}
 8003d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <Error_Handler+0x8>
	...

08003d10 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <MX_SPI1_Init+0x78>)
 8003d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d30:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d46:	2228      	movs	r2, #40	; 0x28
 8003d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d5e:	2207      	movs	r2, #7
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_SPI1_Init+0x74>)
 8003d70:	f005 f97c 	bl	800906c <HAL_SPI_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003d7a:	f7ff ffc3 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200009d0 	.word	0x200009d0
 8003d88:	40013000 	.word	0x40013000

08003d8c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003d92:	4a1c      	ldr	r2, [pc, #112]	; (8003e04 <MX_SPI3_Init+0x78>)
 8003d94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003da6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003daa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dac:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dc2:	2228      	movs	r2, #40	; 0x28
 8003dc4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dda:	2207      	movs	r2, #7
 8003ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dea:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_SPI3_Init+0x74>)
 8003dec:	f005 f93e 	bl	800906c <HAL_SPI_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003df6:	f7ff ff85 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000a34 	.word	0x20000a34
 8003e04:	40003c00 	.word	0x40003c00

08003e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	; 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 031c 	add.w	r3, r7, #28
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a89      	ldr	r2, [pc, #548]	; (800404c <HAL_SPI_MspInit+0x244>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f040 8083 	bne.w	8003f32 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e2c:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	4a87      	ldr	r2, [pc, #540]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e36:	6613      	str	r3, [r2, #96]	; 0x60
 8003e38:	4b85      	ldr	r3, [pc, #532]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e44:	4b82      	ldr	r3, [pc, #520]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	4a81      	ldr	r2, [pc, #516]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e50:	4b7f      	ldr	r3, [pc, #508]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003e5c:	2338      	movs	r3, #56	; 0x38
 8003e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e60:	2302      	movs	r3, #2
 8003e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e70:	f107 031c 	add.w	r3, r7, #28
 8003e74:	4619      	mov	r1, r3
 8003e76:	4877      	ldr	r0, [pc, #476]	; (8004054 <HAL_SPI_MspInit+0x24c>)
 8003e78:	f003 ff2a 	bl	8007cd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003e7c:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e7e:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_SPI_MspInit+0x254>)
 8003e80:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003e82:	4b75      	ldr	r3, [pc, #468]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e84:	220a      	movs	r2, #10
 8003e86:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e88:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8e:	4b72      	ldr	r3, [pc, #456]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e94:	4b70      	ldr	r3, [pc, #448]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003ea6:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003eb2:	4869      	ldr	r0, [pc, #420]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003eb4:	f002 fd34 	bl	8006920 <HAL_DMA_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8003ebe:	f7ff ff21 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a64      	ldr	r2, [pc, #400]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003ec6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec8:	4a63      	ldr	r2, [pc, #396]	; (8004058 <HAL_SPI_MspInit+0x250>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003ece:	4b64      	ldr	r3, [pc, #400]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003ed0:	4a64      	ldr	r2, [pc, #400]	; (8004064 <HAL_SPI_MspInit+0x25c>)
 8003ed2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003ed6:	220b      	movs	r2, #11
 8003ed8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eda:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003edc:	2210      	movs	r2, #16
 8003ede:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee0:	4b5f      	ldr	r3, [pc, #380]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee6:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eec:	4b5c      	ldr	r3, [pc, #368]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003efe:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003f04:	4856      	ldr	r0, [pc, #344]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003f06:	f002 fd0b 	bl	8006920 <HAL_DMA_Init>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003f10:	f7ff fef8 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
 8003f1a:	4a51      	ldr	r2, [pc, #324]	; (8004060 <HAL_SPI_MspInit+0x258>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003f20:	2200      	movs	r2, #0
 8003f22:	2100      	movs	r1, #0
 8003f24:	2023      	movs	r0, #35	; 0x23
 8003f26:	f002 fa82 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003f2a:	2023      	movs	r0, #35	; 0x23
 8003f2c:	f002 fa99 	bl	8006462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003f30:	e088      	b.n	8004044 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4c      	ldr	r2, [pc, #304]	; (8004068 <HAL_SPI_MspInit+0x260>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f040 8083 	bne.w	8004044 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f3e:	4b44      	ldr	r3, [pc, #272]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	4a43      	ldr	r2, [pc, #268]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4a:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f56:	4b3e      	ldr	r3, [pc, #248]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_SPI_MspInit+0x248>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003f6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f80:	2306      	movs	r3, #6
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f84:	f107 031c 	add.w	r3, r7, #28
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4838      	ldr	r0, [pc, #224]	; (800406c <HAL_SPI_MspInit+0x264>)
 8003f8c:	f003 fea0 	bl	8007cd0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003f90:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003f92:	4a38      	ldr	r2, [pc, #224]	; (8004074 <HAL_SPI_MspInit+0x26c>)
 8003f94:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003f98:	220e      	movs	r2, #14
 8003f9a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f9c:	4b34      	ldr	r3, [pc, #208]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fae:	4b30      	ldr	r3, [pc, #192]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003fc6:	482a      	ldr	r0, [pc, #168]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fc8:	f002 fcaa 	bl	8006920 <HAL_DMA_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8003fd2:	f7ff fe97 	bl	8003d04 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58
 8003fdc:	4a24      	ldr	r2, [pc, #144]	; (8004070 <HAL_SPI_MspInit+0x268>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8003fe2:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <HAL_SPI_MspInit+0x274>)
 8003fe6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8003fea:	220f      	movs	r2, #15
 8003fec:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8004002:	2200      	movs	r2, #0
 8004004:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_SPI_MspInit+0x270>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004018:	4817      	ldr	r0, [pc, #92]	; (8004078 <HAL_SPI_MspInit+0x270>)
 800401a:	f002 fc81 	bl	8006920 <HAL_DMA_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8004024:	f7ff fe6e 	bl	8003d04 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_SPI_MspInit+0x270>)
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <HAL_SPI_MspInit+0x270>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	2033      	movs	r0, #51	; 0x33
 800403a:	f002 f9f8 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800403e:	2033      	movs	r0, #51	; 0x33
 8004040:	f002 fa0f 	bl	8006462 <HAL_NVIC_EnableIRQ>
}
 8004044:	bf00      	nop
 8004046:	3730      	adds	r7, #48	; 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40013000 	.word	0x40013000
 8004050:	40021000 	.word	0x40021000
 8004054:	48000400 	.word	0x48000400
 8004058:	20000a98 	.word	0x20000a98
 800405c:	40020030 	.word	0x40020030
 8004060:	20000af8 	.word	0x20000af8
 8004064:	40020044 	.word	0x40020044
 8004068:	40003c00 	.word	0x40003c00
 800406c:	48000800 	.word	0x48000800
 8004070:	20000b58 	.word	0x20000b58
 8004074:	40020408 	.word	0x40020408
 8004078:	20000bb8 	.word	0x20000bb8
 800407c:	4002041c 	.word	0x4002041c

08004080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <HAL_MspInit+0x44>)
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <HAL_MspInit+0x44>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6613      	str	r3, [r2, #96]	; 0x60
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <HAL_MspInit+0x44>)
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_MspInit+0x44>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <HAL_MspInit+0x44>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6593      	str	r3, [r2, #88]	; 0x58
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_MspInit+0x44>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80040b6:	f004 f863 	bl	8008180 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000

080040c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <NMI_Handler+0x4>

080040ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <HardFault_Handler+0x4>

080040d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d8:	e7fe      	b.n	80040d8 <MemManage_Handler+0x4>

080040da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040de:	e7fe      	b.n	80040de <BusFault_Handler+0x4>

080040e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e4:	e7fe      	b.n	80040e4 <UsageFault_Handler+0x4>

080040e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004114:	f000 fbde 	bl	80048d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}

0800411c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <DMA1_Channel1_IRQHandler+0x10>)
 8004122:	f002 fde0 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000085c 	.word	0x2000085c

08004130 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <DMA1_Channel2_IRQHandler+0x10>)
 8004136:	f002 fdd6 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200008bc 	.word	0x200008bc

08004144 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <DMA1_Channel3_IRQHandler+0x10>)
 800414a:	f002 fdcc 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000a98 	.word	0x20000a98

08004158 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <DMA1_Channel4_IRQHandler+0x10>)
 800415e:	f002 fdc2 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000af8 	.word	0x20000af8

0800416c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <ADC1_2_IRQHandler+0x14>)
 8004172:	f001 f871 	bl	8005258 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004176:	4803      	ldr	r0, [pc, #12]	; (8004184 <ADC1_2_IRQHandler+0x18>)
 8004178:	f001 f86e 	bl	8005258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000784 	.word	0x20000784
 8004184:	200007f0 	.word	0x200007f0

08004188 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <FDCAN1_IT0_IRQHandler+0x10>)
 800418e:	f003 fa7f 	bl	8007690 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000934 	.word	0x20000934

0800419c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <TIM3_IRQHandler+0x10>)
 80041a2:	f006 f841 	bl	800a228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000c68 	.word	0x20000c68

080041b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <SPI1_IRQHandler+0x10>)
 80041b6:	f005 f991 	bl	80094dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200009d0 	.word	0x200009d0

080041c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <USART1_IRQHandler+0x10>)
 80041ca:	f007 fbad 	bl	800b928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000cb4 	.word	0x20000cb4

080041d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <SPI3_IRQHandler+0x10>)
 80041de:	f005 f97d 	bl	80094dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000a34 	.word	0x20000a34

080041ec <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <DMA2_Channel1_IRQHandler+0x10>)
 80041f2:	f002 fd78 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000b58 	.word	0x20000b58

08004200 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004204:	4802      	ldr	r0, [pc, #8]	; (8004210 <DMA2_Channel2_IRQHandler+0x10>)
 8004206:	f002 fd6e 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000bb8 	.word	0x20000bb8

08004214 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <DMA2_Channel3_IRQHandler+0x10>)
 800421a:	f002 fd64 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000d44 	.word	0x20000d44

08004228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004230:	4a14      	ldr	r2, [pc, #80]	; (8004284 <_sbrk+0x5c>)
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <_sbrk+0x60>)
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <_sbrk+0x64>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <_sbrk+0x64>)
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <_sbrk+0x68>)
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <_sbrk+0x64>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d207      	bcs.n	8004268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004258:	f008 fe10 	bl	800ce7c <__errno>
 800425c:	4603      	mov	r3, r0
 800425e:	220c      	movs	r2, #12
 8004260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	e009      	b.n	800427c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <_sbrk+0x64>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <_sbrk+0x64>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	4a05      	ldr	r2, [pc, #20]	; (800428c <_sbrk+0x64>)
 8004278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20008000 	.word	0x20008000
 8004288:	00000400 	.word	0x00000400
 800428c:	20000c18 	.word	0x20000c18
 8004290:	20000ef0 	.word	0x20000ef0

08004294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <SystemInit+0x20>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <SystemInit+0x20>)
 80042a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b09c      	sub	sp, #112	; 0x70
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
 80042e8:	615a      	str	r2, [r3, #20]
 80042ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	2234      	movs	r2, #52	; 0x34
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f008 fdba 	bl	800ce6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042f8:	4b51      	ldr	r3, [pc, #324]	; (8004440 <MX_TIM1_Init+0x188>)
 80042fa:	4a52      	ldr	r2, [pc, #328]	; (8004444 <MX_TIM1_Init+0x18c>)
 80042fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042fe:	4b50      	ldr	r3, [pc, #320]	; (8004440 <MX_TIM1_Init+0x188>)
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004304:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <MX_TIM1_Init+0x188>)
 8004306:	2220      	movs	r2, #32
 8004308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 800430a:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <MX_TIM1_Init+0x188>)
 800430c:	f240 52db 	movw	r2, #1499	; 0x5db
 8004310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004312:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <MX_TIM1_Init+0x188>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <MX_TIM1_Init+0x188>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800431e:	4b48      	ldr	r3, [pc, #288]	; (8004440 <MX_TIM1_Init+0x188>)
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004324:	4846      	ldr	r0, [pc, #280]	; (8004440 <MX_TIM1_Init+0x188>)
 8004326:	f005 fc9f 	bl	8009c68 <HAL_TIM_Base_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004330:	f7ff fce8 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004338:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800433a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800433e:	4619      	mov	r1, r3
 8004340:	483f      	ldr	r0, [pc, #252]	; (8004440 <MX_TIM1_Init+0x188>)
 8004342:	f006 fa05 	bl	800a750 <HAL_TIM_ConfigClockSource>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800434c:	f7ff fcda 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004350:	483b      	ldr	r0, [pc, #236]	; (8004440 <MX_TIM1_Init+0x188>)
 8004352:	f005 fd71 	bl	8009e38 <HAL_TIM_PWM_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800435c:	f7ff fcd2 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004364:	2300      	movs	r3, #0
 8004366:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800436c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004370:	4619      	mov	r1, r3
 8004372:	4833      	ldr	r0, [pc, #204]	; (8004440 <MX_TIM1_Init+0x188>)
 8004374:	f007 f868 	bl	800b448 <HAL_TIMEx_MasterConfigSynchronization>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800437e:	f7ff fcc1 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004382:	2360      	movs	r3, #96	; 0x60
 8004384:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800438a:	2302      	movs	r3, #2
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800438e:	2308      	movs	r3, #8
 8004390:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800439a:	2300      	movs	r3, #0
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800439e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043a2:	2200      	movs	r2, #0
 80043a4:	4619      	mov	r1, r3
 80043a6:	4826      	ldr	r0, [pc, #152]	; (8004440 <MX_TIM1_Init+0x188>)
 80043a8:	f006 f8be 	bl	800a528 <HAL_TIM_PWM_ConfigChannel>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80043b2:	f7ff fca7 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043ba:	2204      	movs	r2, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4820      	ldr	r0, [pc, #128]	; (8004440 <MX_TIM1_Init+0x188>)
 80043c0:	f006 f8b2 	bl	800a528 <HAL_TIM_PWM_ConfigChannel>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80043ca:	f7ff fc9b 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043d2:	2208      	movs	r2, #8
 80043d4:	4619      	mov	r1, r3
 80043d6:	481a      	ldr	r0, [pc, #104]	; (8004440 <MX_TIM1_Init+0x188>)
 80043d8:	f006 f8a6 	bl	800a528 <HAL_TIM_PWM_ConfigChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80043e2:	f7ff fc8f 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800440c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004416:	2300      	movs	r3, #0
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4807      	ldr	r0, [pc, #28]	; (8004440 <MX_TIM1_Init+0x188>)
 8004424:	f007 f892 	bl	800b54c <HAL_TIMEx_ConfigBreakDeadTime>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800442e:	f7ff fc69 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004432:	4803      	ldr	r0, [pc, #12]	; (8004440 <MX_TIM1_Init+0x188>)
 8004434:	f000 f890 	bl	8004558 <HAL_TIM_MspPostInit>

}
 8004438:	bf00      	nop
 800443a:	3770      	adds	r7, #112	; 0x70
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000c1c 	.word	0x20000c1c
 8004444:	40012c00 	.word	0x40012c00

08004448 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <MX_TIM3_Init+0x94>)
 8004468:	4a1d      	ldr	r2, [pc, #116]	; (80044e0 <MX_TIM3_Init+0x98>)
 800446a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <MX_TIM3_Init+0x94>)
 800446e:	2203      	movs	r2, #3
 8004470:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <MX_TIM3_Init+0x94>)
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <MX_TIM3_Init+0x94>)
 800447a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800447e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004480:	4b16      	ldr	r3, [pc, #88]	; (80044dc <MX_TIM3_Init+0x94>)
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <MX_TIM3_Init+0x94>)
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800448c:	4813      	ldr	r0, [pc, #76]	; (80044dc <MX_TIM3_Init+0x94>)
 800448e:	f005 fbeb 	bl	8009c68 <HAL_TIM_Base_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004498:	f7ff fc34 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800449c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044a2:	f107 0310 	add.w	r3, r7, #16
 80044a6:	4619      	mov	r1, r3
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <MX_TIM3_Init+0x94>)
 80044aa:	f006 f951 	bl	800a750 <HAL_TIM_ConfigClockSource>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80044b4:	f7ff fc26 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044b8:	2300      	movs	r3, #0
 80044ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_TIM3_Init+0x94>)
 80044c6:	f006 ffbf 	bl	800b448 <HAL_TIMEx_MasterConfigSynchronization>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80044d0:	f7ff fc18 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80044d4:	bf00      	nop
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000c68 	.word	0x20000c68
 80044e0:	40000400 	.word	0x40000400

080044e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a16      	ldr	r2, [pc, #88]	; (800454c <HAL_TIM_Base_MspInit+0x68>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d10c      	bne.n	8004510 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 80044fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004500:	6613      	str	r3, [r2, #96]	; 0x60
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800450e:	e018      	b.n	8004542 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0f      	ldr	r2, [pc, #60]	; (8004554 <HAL_TIM_Base_MspInit+0x70>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d113      	bne.n	8004542 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6593      	str	r3, [r2, #88]	; 0x58
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_TIM_Base_MspInit+0x6c>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	201d      	movs	r0, #29
 8004538:	f001 ff79 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800453c:	201d      	movs	r0, #29
 800453e:	f001 ff90 	bl	8006462 <HAL_NVIC_EnableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40021000 	.word	0x40021000
 8004554:	40000400 	.word	0x40000400

08004558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	60da      	str	r2, [r3, #12]
 800456e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a28      	ldr	r2, [pc, #160]	; (8004618 <HAL_TIM_MspPostInit+0xc0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d149      	bne.n	800460e <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	4a27      	ldr	r2, [pc, #156]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 8004580:	f043 0304 	orr.w	r3, r3, #4
 8004584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 8004598:	f043 0302 	orr.w	r3, r3, #2
 800459c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_TIM_MspPostInit+0xc4>)
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80045aa:	2307      	movs	r3, #7
 80045ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ae:	2302      	movs	r3, #2
 80045b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80045ba:	2302      	movs	r3, #2
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4619      	mov	r1, r3
 80045c4:	4816      	ldr	r0, [pc, #88]	; (8004620 <HAL_TIM_MspPostInit+0xc8>)
 80045c6:	f003 fb83 	bl	8007cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80045ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80045ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d0:	2302      	movs	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d8:	2300      	movs	r3, #0
 80045da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80045dc:	2306      	movs	r3, #6
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	4619      	mov	r1, r3
 80045e6:	480f      	ldr	r0, [pc, #60]	; (8004624 <HAL_TIM_MspPostInit+0xcc>)
 80045e8:	f003 fb72 	bl	8007cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80045fe:	2304      	movs	r3, #4
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004602:	f107 0314 	add.w	r3, r7, #20
 8004606:	4619      	mov	r1, r3
 8004608:	4806      	ldr	r0, [pc, #24]	; (8004624 <HAL_TIM_MspPostInit+0xcc>)
 800460a:	f003 fb61 	bl	8007cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800460e:	bf00      	nop
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40021000 	.word	0x40021000
 8004620:	48000800 	.word	0x48000800
 8004624:	48000400 	.word	0x48000400

08004628 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 800462e:	4a23      	ldr	r2, [pc, #140]	; (80046bc <MX_USART1_UART_Init+0x94>)
 8004630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004634:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800463a:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 800463c:	2200      	movs	r2, #0
 800463e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004646:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004648:	2200      	movs	r2, #0
 800464a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 800464e:	220c      	movs	r2, #12
 8004650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004654:	2200      	movs	r2, #0
 8004656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 800465a:	2200      	movs	r2, #0
 800465c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004660:	2200      	movs	r2, #0
 8004662:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004664:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004666:	2200      	movs	r2, #0
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 800466c:	2200      	movs	r2, #0
 800466e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004670:	4811      	ldr	r0, [pc, #68]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004672:	f007 f876 	bl	800b762 <HAL_UART_Init>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800467c:	f7ff fb42 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004680:	2100      	movs	r1, #0
 8004682:	480d      	ldr	r0, [pc, #52]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004684:	f008 faed 	bl	800cc62 <HAL_UARTEx_SetTxFifoThreshold>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800468e:	f7ff fb39 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004692:	2100      	movs	r1, #0
 8004694:	4808      	ldr	r0, [pc, #32]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 8004696:	f008 fb22 	bl	800ccde <HAL_UARTEx_SetRxFifoThreshold>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80046a0:	f7ff fb30 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80046a4:	4804      	ldr	r0, [pc, #16]	; (80046b8 <MX_USART1_UART_Init+0x90>)
 80046a6:	f008 faa3 	bl	800cbf0 <HAL_UARTEx_DisableFifoMode>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80046b0:	f7ff fb28 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000cb4 	.word	0x20000cb4
 80046bc:	40013800 	.word	0x40013800

080046c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b09a      	sub	sp, #104	; 0x68
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046d8:	f107 0310 	add.w	r3, r7, #16
 80046dc:	2244      	movs	r2, #68	; 0x44
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f008 fbc3 	bl	800ce6c <memset>
  if(uartHandle->Instance==USART1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a37      	ldr	r2, [pc, #220]	; (80047c8 <HAL_UART_MspInit+0x108>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d166      	bne.n	80047be <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fac5 	bl	8008c8c <HAL_RCCEx_PeriphCLKConfig>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004708:	f7ff fafc 	bl	8003d04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800470c:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_UART_MspInit+0x10c>)
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <HAL_UART_MspInit+0x10c>)
 8004712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004716:	6613      	str	r3, [r2, #96]	; 0x60
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_UART_MspInit+0x10c>)
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_UART_MspInit+0x10c>)
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	4a28      	ldr	r2, [pc, #160]	; (80047cc <HAL_UART_MspInit+0x10c>)
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004730:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_UART_MspInit+0x10c>)
 8004732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800473c:	2330      	movs	r3, #48	; 0x30
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004748:	2300      	movs	r3, #0
 800474a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800474c:	2307      	movs	r3, #7
 800474e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004754:	4619      	mov	r1, r3
 8004756:	481e      	ldr	r0, [pc, #120]	; (80047d0 <HAL_UART_MspInit+0x110>)
 8004758:	f003 faba 	bl	8007cd0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 800475c:	4b1d      	ldr	r3, [pc, #116]	; (80047d4 <HAL_UART_MspInit+0x114>)
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_UART_MspInit+0x118>)
 8004760:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004764:	2219      	movs	r2, #25
 8004766:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_UART_MspInit+0x114>)
 800476a:	2210      	movs	r2, #16
 800476c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477a:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_UART_MspInit+0x114>)
 800477c:	2200      	movs	r2, #0
 800477e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004782:	2200      	movs	r2, #0
 8004784:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004788:	2200      	movs	r2, #0
 800478a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <HAL_UART_MspInit+0x114>)
 800478e:	2200      	movs	r2, #0
 8004790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004792:	4810      	ldr	r0, [pc, #64]	; (80047d4 <HAL_UART_MspInit+0x114>)
 8004794:	f002 f8c4 	bl	8006920 <HAL_DMA_Init>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800479e:	f7ff fab1 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_UART_MspInit+0x114>)
 80047a6:	679a      	str	r2, [r3, #120]	; 0x78
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <HAL_UART_MspInit+0x114>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2100      	movs	r1, #0
 80047b2:	2025      	movs	r0, #37	; 0x25
 80047b4:	f001 fe3b 	bl	800642e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047b8:	2025      	movs	r0, #37	; 0x25
 80047ba:	f001 fe52 	bl	8006462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80047be:	bf00      	nop
 80047c0:	3768      	adds	r7, #104	; 0x68
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40013800 	.word	0x40013800
 80047cc:	40021000 	.word	0x40021000
 80047d0:	48000800 	.word	0x48000800
 80047d4:	20000d44 	.word	0x20000d44
 80047d8:	40020430 	.word	0x40020430

080047dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80047dc:	480d      	ldr	r0, [pc, #52]	; (8004814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80047de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047e0:	480d      	ldr	r0, [pc, #52]	; (8004818 <LoopForever+0x6>)
  ldr r1, =_edata
 80047e2:	490e      	ldr	r1, [pc, #56]	; (800481c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <LoopForever+0xe>)
  movs r3, #0
 80047e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80047e8:	e002      	b.n	80047f0 <LoopCopyDataInit>

080047ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ee:	3304      	adds	r3, #4

080047f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047f4:	d3f9      	bcc.n	80047ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047f8:	4c0b      	ldr	r4, [pc, #44]	; (8004828 <LoopForever+0x16>)
  movs r3, #0
 80047fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047fc:	e001      	b.n	8004802 <LoopFillZerobss>

080047fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004800:	3204      	adds	r2, #4

08004802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004804:	d3fb      	bcc.n	80047fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004806:	f7ff fd45 	bl	8004294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800480a:	f008 fb3d 	bl	800ce88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800480e:	f7ff fa05 	bl	8003c1c <main>

08004812 <LoopForever>:

LoopForever:
    b LoopForever
 8004812:	e7fe      	b.n	8004812 <LoopForever>
  ldr   r0, =_estack
 8004814:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800481c:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8004820:	0800ed48 	.word	0x0800ed48
  ldr r2, =_sbss
 8004824:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8004828:	20000ef0 	.word	0x20000ef0

0800482c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800482c:	e7fe      	b.n	800482c <COMP1_2_3_IRQHandler>

0800482e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004838:	2003      	movs	r0, #3
 800483a:	f001 fded 	bl	8006418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800483e:	200f      	movs	r0, #15
 8004840:	f000 f80e 	bl	8004860 <HAL_InitTick>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	71fb      	strb	r3, [r7, #7]
 800484e:	e001      	b.n	8004854 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004850:	f7ff fc16 	bl	8004080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004854:	79fb      	ldrb	r3, [r7, #7]

}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800486c:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <HAL_InitTick+0x68>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d022      	beq.n	80048ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004874:	4b15      	ldr	r3, [pc, #84]	; (80048cc <HAL_InitTick+0x6c>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_InitTick+0x68>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004880:	fbb1 f3f3 	udiv	r3, r1, r3
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fdf8 	bl	800647e <HAL_SYSTICK_Config>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d809      	bhi.n	80048ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800489a:	2200      	movs	r2, #0
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	f04f 30ff 	mov.w	r0, #4294967295
 80048a2:	f001 fdc4 	bl	800642e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048a6:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_InitTick+0x70>)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e007      	b.n	80048be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e004      	b.n	80048be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e001      	b.n	80048be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	200000e0 	.word	0x200000e0
 80048cc:	200000d8 	.word	0x200000d8
 80048d0:	200000dc 	.word	0x200000dc

080048d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_IncTick+0x1c>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_IncTick+0x20>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4413      	add	r3, r2
 80048e2:	4a03      	ldr	r2, [pc, #12]	; (80048f0 <HAL_IncTick+0x1c>)
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000da4 	.word	0x20000da4
 80048f4:	200000e0 	.word	0x200000e0

080048f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return uwTick;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_GetTick+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000da4 	.word	0x20000da4

08004910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004918:	f7ff ffee 	bl	80048f8 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d004      	beq.n	8004934 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_Delay+0x40>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004934:	bf00      	nop
 8004936:	f7ff ffdf 	bl	80048f8 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d8f7      	bhi.n	8004936 <HAL_Delay+0x26>
  {
  }
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200000e0 	.word	0x200000e0

08004954 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3360      	adds	r3, #96	; 0x60
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <LL_ADC_SetOffset+0x44>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	03fff000 	.word	0x03fff000

08004a04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3360      	adds	r3, #96	; 0x60
 8004a12:	461a      	mov	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3360      	adds	r3, #96	; 0x60
 8004a40:	461a      	mov	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b087      	sub	sp, #28
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3360      	adds	r3, #96	; 0x60
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3360      	adds	r3, #96	; 0x60
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	615a      	str	r2, [r3, #20]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3330      	adds	r3, #48	; 0x30
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	4413      	add	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	211f      	movs	r1, #31
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	401a      	ands	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0e9b      	lsrs	r3, r3, #26
 8004b56:	f003 011f 	and.w	r1, r3, #31
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	431a      	orrs	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3314      	adds	r3, #20
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	0e5b      	lsrs	r3, r3, #25
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	0d1b      	lsrs	r3, r3, #20
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2107      	movs	r1, #7
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	401a      	ands	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0d1b      	lsrs	r3, r3, #20
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	431a      	orrs	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d10a      	bne.n	8004c1e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004c1c:	e00a      	b.n	8004c34 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	401a      	ands	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	407f0000 	.word	0x407f0000

08004c44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 031f 	and.w	r3, r3, #31
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6093      	str	r3, [r2, #8]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb4:	d101      	bne.n	8004cba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d04:	d101      	bne.n	8004d0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d2c:	f043 0201 	orr.w	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <LL_ADC_IsEnabled+0x18>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <LL_ADC_IsEnabled+0x1a>
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d7a:	f043 0204 	orr.w	r2, r3, #4
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d101      	bne.n	8004da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d101      	bne.n	8004dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b089      	sub	sp, #36	; 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e177      	b.n	80050e6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fe fb69 	bl	80034dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff ff3f 	bl	8004ca0 <LL_ADC_IsDeepPowerDownEnabled>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff25 	bl	8004c7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff ff5a 	bl	8004cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff ff3e 	bl	8004cc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e4c:	4b9c      	ldr	r3, [pc, #624]	; (80050c0 <HAL_ADC_Init+0x2e4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	4a9c      	ldr	r2, [pc, #624]	; (80050c4 <HAL_ADC_Init+0x2e8>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e60:	e002      	b.n	8004e68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f9      	bne.n	8004e62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff ff3c 	bl	8004cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f043 0210 	orr.w	r2, r3, #16
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ff75 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 8004ea4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 8110 	bne.w	80050d4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 810c 	bne.w	80050d4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ff35 	bl	8004d40 <LL_ADC_IsEnabled>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004edc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ee0:	f7ff ff2e 	bl	8004d40 <LL_ADC_IsEnabled>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4878      	ldr	r0, [pc, #480]	; (80050c8 <HAL_ADC_Init+0x2ec>)
 8004ee8:	f7ff ff2a 	bl	8004d40 <LL_ADC_IsEnabled>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4323      	orrs	r3, r4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4874      	ldr	r0, [pc, #464]	; (80050cc <HAL_ADC_Init+0x2f0>)
 8004efc:	f7ff fd2a 	bl	8004954 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7f5b      	ldrb	r3, [r3, #29]
 8004f04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004f10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004f16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d106      	bne.n	8004f3c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	045b      	lsls	r3, r3, #17
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	4b5c      	ldr	r3, [pc, #368]	; (80050d0 <HAL_ADC_Init+0x2f4>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	69b9      	ldr	r1, [r7, #24]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ff01 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 8004f8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff0e 	bl	8004db4 <LL_ADC_INJ_IsConversionOngoing>
 8004f98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d16d      	bne.n	800507c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d16a      	bne.n	800507c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004faa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	f023 0302 	bic.w	r3, r3, #2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	69b9      	ldr	r1, [r7, #24]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ff0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6911      	ldr	r1, [r2, #16]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005006:	e013      	b.n	8005030 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005016:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800502c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005036:	2b01      	cmp	r3, #1
 8005038:	d118      	bne.n	800506c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800505c:	430a      	orrs	r2, r1
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	611a      	str	r2, [r3, #16]
 800506a:	e007      	b.n	800507c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10c      	bne.n	800509e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f023 010f 	bic.w	r1, r3, #15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
 800509c:	e007      	b.n	80050ae <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 020f 	bic.w	r2, r2, #15
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80050be:	e011      	b.n	80050e4 <HAL_ADC_Init+0x308>
 80050c0:	200000d8 	.word	0x200000d8
 80050c4:	053e2d63 	.word	0x053e2d63
 80050c8:	50000100 	.word	0x50000100
 80050cc:	50000300 	.word	0x50000300
 80050d0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d8:	f043 0210 	orr.w	r2, r3, #16
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3724      	adds	r7, #36	; 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}
 80050ee:	bf00      	nop

080050f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050fc:	4851      	ldr	r0, [pc, #324]	; (8005244 <HAL_ADC_Start_DMA+0x154>)
 80050fe:	f7ff fda1 	bl	8004c44 <LL_ADC_GetMultimode>
 8005102:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fe40 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 808f 	bne.w	8005234 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_ADC_Start_DMA+0x34>
 8005120:	2302      	movs	r3, #2
 8005122:	e08a      	b.n	800523a <HAL_ADC_Start_DMA+0x14a>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b05      	cmp	r3, #5
 8005136:	d002      	beq.n	800513e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b09      	cmp	r3, #9
 800513c:	d173      	bne.n	8005226 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fea8 	bl	8005e94 <ADC_Enable>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005148:	7dfb      	ldrb	r3, [r7, #23]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d166      	bne.n	800521c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <HAL_ADC_Start_DMA+0x158>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d002      	beq.n	8005172 <HAL_ADC_Start_DMA+0x82>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	e001      	b.n	8005176 <HAL_ADC_Start_DMA+0x86>
 8005172:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	4293      	cmp	r3, r2
 800517c:	d002      	beq.n	8005184 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005188:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d006      	beq.n	80051aa <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a0:	f023 0206 	bic.w	r2, r3, #6
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
 80051a8:	e002      	b.n	80051b0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	4a25      	ldr	r2, [pc, #148]	; (800524c <HAL_ADC_Start_DMA+0x15c>)
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	4a24      	ldr	r2, [pc, #144]	; (8005250 <HAL_ADC_Start_DMA+0x160>)
 80051be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_ADC_Start_DMA+0x164>)
 80051c6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	221c      	movs	r2, #28
 80051ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0210 	orr.w	r2, r2, #16
 80051e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3340      	adds	r3, #64	; 0x40
 8005202:	4619      	mov	r1, r3
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f001 fc32 	bl	8006a70 <HAL_DMA_Start_IT>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fda6 	bl	8004d66 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800521a:	e00d      	b.n	8005238 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005224:	e008      	b.n	8005238 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005232:	e001      	b.n	8005238 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005234:	2302      	movs	r3, #2
 8005236:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	50000300 	.word	0x50000300
 8005248:	50000100 	.word	0x50000100
 800524c:	08005f59 	.word	0x08005f59
 8005250:	08006031 	.word	0x08006031
 8005254:	0800604d 	.word	0x0800604d

08005258 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005274:	4883      	ldr	r0, [pc, #524]	; (8005484 <HAL_ADC_IRQHandler+0x22c>)
 8005276:	f7ff fce5 	bl	8004c44 <LL_ADC_GetMultimode>
 800527a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <HAL_ADC_IRQHandler+0x5e>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d012      	beq.n	80052b6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 ff37 	bl	800611c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2202      	movs	r2, #2
 80052b4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_ADC_IRQHandler+0x72>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8085 	beq.w	80053e0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d07f      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fbfb 	bl	8004af8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d064      	beq.n	80053d2 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a5e      	ldr	r2, [pc, #376]	; (8005488 <HAL_ADC_IRQHandler+0x230>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d002      	beq.n	8005318 <HAL_ADC_IRQHandler+0xc0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	e001      	b.n	800531c <HAL_ADC_IRQHandler+0xc4>
 8005318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	4293      	cmp	r3, r2
 8005322:	d008      	beq.n	8005336 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d002      	beq.n	8005336 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b09      	cmp	r3, #9
 8005334:	d104      	bne.n	8005340 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	e00d      	b.n	800535c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a50      	ldr	r2, [pc, #320]	; (8005488 <HAL_ADC_IRQHandler+0x230>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d002      	beq.n	8005350 <HAL_ADC_IRQHandler+0xf8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	e001      	b.n	8005354 <HAL_ADC_IRQHandler+0xfc>
 8005350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005354:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d135      	bne.n	80053d2 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d12e      	bne.n	80053d2 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fd08 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11a      	bne.n	80053ba <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 020c 	bic.w	r2, r2, #12
 8005392:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d112      	bne.n	80053d2 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	f043 0201 	orr.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80053b8:	e00b      	b.n	80053d2 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	f043 0210 	orr.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd fd5e 	bl	8002e94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	220c      	movs	r2, #12
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_ADC_IRQHandler+0x19c>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 809e 	beq.w	800553c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8098 	beq.w	800553c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fba4 	bl	8004b76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800542e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fb5f 	bl	8004af8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800543a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a11      	ldr	r2, [pc, #68]	; (8005488 <HAL_ADC_IRQHandler+0x230>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d002      	beq.n	800544c <HAL_ADC_IRQHandler+0x1f4>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	e001      	b.n	8005450 <HAL_ADC_IRQHandler+0x1f8>
 800544c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	4293      	cmp	r3, r2
 8005456:	d008      	beq.n	800546a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b06      	cmp	r3, #6
 8005462:	d002      	beq.n	800546a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b07      	cmp	r3, #7
 8005468:	d104      	bne.n	8005474 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	e011      	b.n	8005498 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <HAL_ADC_IRQHandler+0x230>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d006      	beq.n	800548c <HAL_ADC_IRQHandler+0x234>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	e005      	b.n	8005490 <HAL_ADC_IRQHandler+0x238>
 8005484:	50000300 	.word	0x50000300
 8005488:	50000100 	.word	0x50000100
 800548c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005490:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d047      	beq.n	800552e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_ADC_IRQHandler+0x260>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d03f      	beq.n	800552e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d13a      	bne.n	800552e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d133      	bne.n	800552e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d12e      	bne.n	800552e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fc6d 	bl	8004db4 <LL_ADC_INJ_IsConversionOngoing>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11a      	bne.n	8005516 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054ee:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d112      	bne.n	800552e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	65da      	str	r2, [r3, #92]	; 0x5c
 8005514:	e00b      	b.n	800552e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fdcc 	bl	80060cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2260      	movs	r2, #96	; 0x60
 800553a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d011      	beq.n	800556a <HAL_ADC_IRQHandler+0x312>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f895 	bl	800568c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2280      	movs	r2, #128	; 0x80
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d012      	beq.n	800559a <HAL_ADC_IRQHandler+0x342>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00d      	beq.n	800559a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fdb2 	bl	80060f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d012      	beq.n	80055ca <HAL_ADC_IRQHandler+0x372>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fda4 	bl	8006108 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d036      	beq.n	8005642 <HAL_ADC_IRQHandler+0x3ea>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d031      	beq.n	8005642 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80055e6:	2301      	movs	r3, #1
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	e014      	b.n	8005616 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80055f2:	4825      	ldr	r0, [pc, #148]	; (8005688 <HAL_ADC_IRQHandler+0x430>)
 80055f4:	f7ff fb34 	bl	8004c60 <LL_ADC_GetMultiDMATransfer>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80055fe:	2301      	movs	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
 8005602:	e008      	b.n	8005616 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10e      	bne.n	800563a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562c:	f043 0202 	orr.w	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f833 	bl	80056a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2210      	movs	r2, #16
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d018      	beq.n	800567e <HAL_ADC_IRQHandler+0x426>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	2b00      	cmp	r3, #0
 8005654:	d013      	beq.n	800567e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005676:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fd31 	bl	80060e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800567e:	bf00      	nop
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	50000300 	.word	0x50000300

0800568c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b0b6      	sub	sp, #216	; 0xd8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x22>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e3c8      	b.n	8005e68 <HAL_ADC_ConfigChannel+0x7b4>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fb53 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 83ad 	bne.w	8005e4a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6859      	ldr	r1, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	f7ff fa0e 	bl	8004b1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fb41 	bl	8004d8e <LL_ADC_REG_IsConversionOngoing>
 800570c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fb4d 	bl	8004db4 <LL_ADC_INJ_IsConversionOngoing>
 800571a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800571e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 81d9 	bne.w	8005ada <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 81d4 	bne.w	8005ada <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573a:	d10f      	bne.n	800575c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2200      	movs	r2, #0
 8005746:	4619      	mov	r1, r3
 8005748:	f7ff fa28 	bl	8004b9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff f9bc 	bl	8004ad2 <LL_ADC_SetSamplingTimeCommonConfig>
 800575a:	e00e      	b.n	800577a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	461a      	mov	r2, r3
 800576a:	f7ff fa17 	bl	8004b9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f9ac 	bl	8004ad2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d022      	beq.n	80057e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6919      	ldr	r1, [r3, #16]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ac:	f7ff f906 	bl	80049bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	6919      	ldr	r1, [r3, #16]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	461a      	mov	r2, r3
 80057be:	f7ff f952 	bl	8004a66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6919      	ldr	r1, [r3, #16]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	7f1b      	ldrb	r3, [r3, #28]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x124>
 80057d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d6:	e000      	b.n	80057da <HAL_ADC_ConfigChannel+0x126>
 80057d8:	2300      	movs	r3, #0
 80057da:	461a      	mov	r2, r3
 80057dc:	f7ff f95e 	bl	8004a9c <LL_ADC_SetOffsetSaturation>
 80057e0:	e17b      	b.n	8005ada <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2100      	movs	r1, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff f90b 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <HAL_ADC_ConfigChannel+0x15a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff f900 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005804:	4603      	mov	r3, r0
 8005806:	0e9b      	lsrs	r3, r3, #26
 8005808:	f003 021f 	and.w	r2, r3, #31
 800580c:	e01e      	b.n	800584c <HAL_ADC_ConfigChannel+0x198>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff f8f5 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 800581a:	4603      	mov	r3, r0
 800581c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005824:	fa93 f3a3 	rbit	r3, r3
 8005828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800582c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005834:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800583c:	2320      	movs	r3, #32
 800583e:	e004      	b.n	800584a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005844:	fab3 f383 	clz	r3, r3
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x1b0>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	0e9b      	lsrs	r3, r3, #26
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	e018      	b.n	8005896 <HAL_ADC_ConfigChannel+0x1e2>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005870:	fa93 f3a3 	rbit	r3, r3
 8005874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e004      	b.n	8005896 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800588c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005890:	fab3 f383 	clz	r3, r3
 8005894:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005896:	429a      	cmp	r2, r3
 8005898:	d106      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2200      	movs	r2, #0
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f8c4 	bl	8004a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f8a8 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x220>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2101      	movs	r1, #1
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f89d 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80058ca:	4603      	mov	r3, r0
 80058cc:	0e9b      	lsrs	r3, r3, #26
 80058ce:	f003 021f 	and.w	r2, r3, #31
 80058d2:	e01e      	b.n	8005912 <HAL_ADC_ConfigChannel+0x25e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff f892 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058ea:	fa93 f3a3 	rbit	r3, r3
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80058f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80058fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005902:	2320      	movs	r3, #32
 8005904:	e004      	b.n	8005910 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_ADC_ConfigChannel+0x276>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	0e9b      	lsrs	r3, r3, #26
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	e018      	b.n	800595c <HAL_ADC_ConfigChannel+0x2a8>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005936:	fa93 f3a3 	rbit	r3, r3
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800593e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800594e:	2320      	movs	r3, #32
 8005950:	e004      	b.n	800595c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005956:	fab3 f383 	clz	r3, r3
 800595a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800595c:	429a      	cmp	r2, r3
 800595e:	d106      	bne.n	800596e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2200      	movs	r2, #0
 8005966:	2101      	movs	r1, #1
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff f861 	bl	8004a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff f845 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 800597a:	4603      	mov	r3, r0
 800597c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <HAL_ADC_ConfigChannel+0x2e6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2102      	movs	r1, #2
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff f83a 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005990:	4603      	mov	r3, r0
 8005992:	0e9b      	lsrs	r3, r3, #26
 8005994:	f003 021f 	and.w	r2, r3, #31
 8005998:	e01e      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x324>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff f82f 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059b0:	fa93 f3a3 	rbit	r3, r3
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80059b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80059c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80059c8:	2320      	movs	r3, #32
 80059ca:	e004      	b.n	80059d6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80059cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d0:	fab3 f383 	clz	r3, r3
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x33c>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	0e9b      	lsrs	r3, r3, #26
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	e016      	b.n	8005a1e <HAL_ADC_ConfigChannel+0x36a>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005a10:	2320      	movs	r3, #32
 8005a12:	e004      	b.n	8005a1e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d106      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff f800 	bl	8004a30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2103      	movs	r1, #3
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe ffe4 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x3a8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe ffd9 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005a52:	4603      	mov	r3, r0
 8005a54:	0e9b      	lsrs	r3, r3, #26
 8005a56:	f003 021f 	and.w	r2, r3, #31
 8005a5a:	e017      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x3d8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2103      	movs	r1, #3
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe ffce 	bl	8004a04 <LL_ADC_GetOffsetChannel>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a76:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8005a7e:	2320      	movs	r3, #32
 8005a80:	e003      	b.n	8005a8a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8005a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x3f0>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0e9b      	lsrs	r3, r3, #26
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	e011      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x414>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005abc:	2320      	movs	r3, #32
 8005abe:	e003      	b.n	8005ac8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	fab3 f383 	clz	r3, r3
 8005ac6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d106      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2103      	movs	r1, #3
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe ffab 	bl	8004a30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff f92e 	bl	8004d40 <LL_ADC_IsEnabled>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f040 8140 	bne.w	8005d6c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f7ff f87b 	bl	8004bf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4a8f      	ldr	r2, [pc, #572]	; (8005d40 <HAL_ADC_ConfigChannel+0x68c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	f040 8131 	bne.w	8005d6c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <HAL_ADC_ConfigChannel+0x47e>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	0e9b      	lsrs	r3, r3, #26
 8005b20:	3301      	adds	r3, #1
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	bf94      	ite	ls
 8005b2a:	2301      	movls	r3, #1
 8005b2c:	2300      	movhi	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e019      	b.n	8005b66 <HAL_ADC_ConfigChannel+0x4b2>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b42:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005b44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	e003      	b.n	8005b56 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b50:	fab3 f383 	clz	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	3301      	adds	r3, #1
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	bf94      	ite	ls
 8005b60:	2301      	movls	r3, #1
 8005b62:	2300      	movhi	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d079      	beq.n	8005c5e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_ADC_ConfigChannel+0x4d2>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0e9b      	lsrs	r3, r3, #26
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	069b      	lsls	r3, r3, #26
 8005b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b84:	e015      	b.n	8005bb2 <HAL_ADC_ConfigChannel+0x4fe>
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b96:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	e003      	b.n	8005baa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	3301      	adds	r3, #1
 8005bac:	069b      	lsls	r3, r3, #26
 8005bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x51e>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0e9b      	lsrs	r3, r3, #26
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd0:	e017      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x54e>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005bea:	2320      	movs	r3, #32
 8005bec:	e003      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	fab3 f383 	clz	r3, r3
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	ea42 0103 	orr.w	r1, r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_ADC_ConfigChannel+0x574>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	051b      	lsls	r3, r3, #20
 8005c26:	e018      	b.n	8005c5a <HAL_ADC_ConfigChannel+0x5a6>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	fa93 f3a3 	rbit	r3, r3
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005c40:	2320      	movs	r3, #32
 8005c42:	e003      	b.n	8005c4c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	fab3 f383 	clz	r3, r3
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f003 021f 	and.w	r2, r3, #31
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	e081      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_ADC_ConfigChannel+0x5c6>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	3301      	adds	r3, #1
 8005c72:	069b      	lsls	r3, r3, #26
 8005c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c78:	e015      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x5f2>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005c92:	2320      	movs	r3, #32
 8005c94:	e003      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	fab3 f383 	clz	r3, r3
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	069b      	lsls	r3, r3, #26
 8005ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x612>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0e9b      	lsrs	r3, r3, #26
 8005cb8:	3301      	adds	r3, #1
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	e017      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x642>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	fa93 f3a3 	rbit	r3, r3
 8005cd2:	61fb      	str	r3, [r7, #28]
  return result;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005cde:	2320      	movs	r3, #32
 8005ce0:	e003      	b.n	8005cea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	fab3 f383 	clz	r3, r3
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	ea42 0103 	orr.w	r1, r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x66e>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	0e9b      	lsrs	r3, r3, #26
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f003 021f 	and.w	r2, r3, #31
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	3b1e      	subs	r3, #30
 8005d1a:	051b      	lsls	r3, r3, #20
 8005d1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d20:	e01e      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x6ac>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	613b      	str	r3, [r7, #16]
  return result;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	e006      	b.n	8005d4c <HAL_ADC_ConfigChannel+0x698>
 8005d3e:	bf00      	nop
 8005d40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	fab3 f383 	clz	r3, r3
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f003 021f 	and.w	r2, r3, #31
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	3b1e      	subs	r3, #30
 8005d5a:	051b      	lsls	r3, r3, #20
 8005d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d60:	430b      	orrs	r3, r1
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	6892      	ldr	r2, [r2, #8]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f7fe ff18 	bl	8004b9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <HAL_ADC_ConfigChannel+0x7bc>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d071      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d78:	483e      	ldr	r0, [pc, #248]	; (8005e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d7a:	f7fe fe11 	bl	80049a0 <LL_ADC_GetCommonPathInternalCh>
 8005d7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3c      	ldr	r2, [pc, #240]	; (8005e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_ADC_ConfigChannel+0x6e2>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a3a      	ldr	r2, [pc, #232]	; (8005e7c <HAL_ADC_ConfigChannel+0x7c8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d127      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d121      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005daa:	d157      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005db0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005db4:	4619      	mov	r1, r3
 8005db6:	482f      	ldr	r0, [pc, #188]	; (8005e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8005db8:	f7fe fddf 	bl	800497a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dbc:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <HAL_ADC_ConfigChannel+0x7cc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <HAL_ADC_ConfigChannel+0x7d0>)
 8005dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005dd6:	e002      	b.n	8005dde <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f9      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005de4:	e03a      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_ADC_ConfigChannel+0x7d4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d113      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x764>
 8005df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <HAL_ADC_ConfigChannel+0x7d8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d02a      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4818      	ldr	r0, [pc, #96]	; (8005e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8005e12:	f7fe fdb2 	bl	800497a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e16:	e021      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d11c      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d116      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <HAL_ADC_ConfigChannel+0x7d8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d011      	beq.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e40:	4619      	mov	r1, r3
 8005e42:	480c      	ldr	r0, [pc, #48]	; (8005e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8005e44:	f7fe fd99 	bl	800497a <LL_ADC_SetCommonPathInternalCh>
 8005e48:	e008      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	f043 0220 	orr.w	r2, r3, #32
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e64:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	37d8      	adds	r7, #216	; 0xd8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	80080000 	.word	0x80080000
 8005e74:	50000300 	.word	0x50000300
 8005e78:	c3210000 	.word	0xc3210000
 8005e7c:	90c00010 	.word	0x90c00010
 8005e80:	200000d8 	.word	0x200000d8
 8005e84:	053e2d63 	.word	0x053e2d63
 8005e88:	c7520000 	.word	0xc7520000
 8005e8c:	50000100 	.word	0x50000100
 8005e90:	cb840000 	.word	0xcb840000

08005e94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe ff4d 	bl	8004d40 <LL_ADC_IsEnabled>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d14d      	bne.n	8005f48 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <ADC_Enable+0xc0>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	f043 0210 	orr.w	r2, r3, #16
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e039      	b.n	8005f4a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe ff1c 	bl	8004d18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ee0:	f7fe fd0a 	bl	80048f8 <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ee6:	e028      	b.n	8005f3a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe ff27 	bl	8004d40 <LL_ADC_IsEnabled>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d104      	bne.n	8005f02 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7fe ff0b 	bl	8004d18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f02:	f7fe fcf9 	bl	80048f8 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d914      	bls.n	8005f3a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d00d      	beq.n	8005f3a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f22:	f043 0210 	orr.w	r2, r3, #16
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e007      	b.n	8005f4a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d1cf      	bne.n	8005ee8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	8000003f 	.word	0x8000003f

08005f58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d14b      	bne.n	800600a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d021      	beq.n	8005fd0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fdb1 	bl	8004af8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d032      	beq.n	8006002 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d12b      	bne.n	8006002 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11f      	bne.n	8006002 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	f043 0201 	orr.w	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fce:	e018      	b.n	8006002 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d111      	bne.n	8006002 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f043 0201 	orr.w	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7fc ff46 	bl	8002e94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006008:	e00e      	b.n	8006028 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f7ff fb42 	bl	80056a0 <HAL_ADC_ErrorCallback>
}
 800601c:	e004      	b.n	8006028 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7fc fdee 	bl	8002c20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff fb14 	bl	80056a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <LL_ADC_IsEnabled>:
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <LL_ADC_IsEnabled+0x18>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <LL_ADC_IsEnabled+0x1a>
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d101      	bne.n	80060be <LL_ADC_REG_IsConversionOngoing+0x18>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b0a1      	sub	sp, #132	; 0x84
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800614a:	2302      	movs	r3, #2
 800614c:	e08b      	b.n	8006266 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006156:	2300      	movs	r3, #0
 8006158:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800615a:	2300      	movs	r3, #0
 800615c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006166:	d102      	bne.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006168:	4b41      	ldr	r3, [pc, #260]	; (8006270 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800616a:	60bb      	str	r3, [r7, #8]
 800616c:	e001      	b.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e06a      	b.n	8006266 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff ff87 	bl	80060a6 <LL_ADC_REG_IsConversionOngoing>
 8006198:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff ff81 	bl	80060a6 <LL_ADC_REG_IsConversionOngoing>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d14c      	bne.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80061aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d149      	bne.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80061b0:	4b30      	ldr	r3, [pc, #192]	; (8006274 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80061b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d028      	beq.n	800620e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ce:	035b      	lsls	r3, r3, #13
 80061d0:	430b      	orrs	r3, r1
 80061d2:	431a      	orrs	r2, r3
 80061d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80061dc:	f7ff ff50 	bl	8006080 <LL_ADC_IsEnabled>
 80061e0:	4604      	mov	r4, r0
 80061e2:	4823      	ldr	r0, [pc, #140]	; (8006270 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80061e4:	f7ff ff4c 	bl	8006080 <LL_ADC_IsEnabled>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4323      	orrs	r3, r4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d133      	bne.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80061f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80061f8:	f023 030f 	bic.w	r3, r3, #15
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	6811      	ldr	r1, [r2, #0]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	6892      	ldr	r2, [r2, #8]
 8006204:	430a      	orrs	r2, r1
 8006206:	431a      	orrs	r2, r3
 8006208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800620c:	e024      	b.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800620e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006218:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800621a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800621e:	f7ff ff2f 	bl	8006080 <LL_ADC_IsEnabled>
 8006222:	4604      	mov	r4, r0
 8006224:	4812      	ldr	r0, [pc, #72]	; (8006270 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006226:	f7ff ff2b 	bl	8006080 <LL_ADC_IsEnabled>
 800622a:	4603      	mov	r3, r0
 800622c:	4323      	orrs	r3, r4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d112      	bne.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800623a:	f023 030f 	bic.w	r3, r3, #15
 800623e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006240:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006242:	e009      	b.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006256:	e000      	b.n	800625a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006258:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006262:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006266:	4618      	mov	r0, r3
 8006268:	3784      	adds	r7, #132	; 0x84
 800626a:	46bd      	mov	sp, r7
 800626c:	bd90      	pop	{r4, r7, pc}
 800626e:	bf00      	nop
 8006270:	50000100 	.word	0x50000100
 8006274:	50000300 	.word	0x50000300

08006278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <__NVIC_SetPriorityGrouping+0x44>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006294:	4013      	ands	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062aa:	4a04      	ldr	r2, [pc, #16]	; (80062bc <__NVIC_SetPriorityGrouping+0x44>)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	60d3      	str	r3, [r2, #12]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	e000ed00 	.word	0xe000ed00

080062c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <__NVIC_GetPriorityGrouping+0x18>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	f003 0307 	and.w	r3, r3, #7
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	e000ed00 	.word	0xe000ed00

080062dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	db0b      	blt.n	8006306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	f003 021f 	and.w	r2, r3, #31
 80062f4:	4907      	ldr	r1, [pc, #28]	; (8006314 <__NVIC_EnableIRQ+0x38>)
 80062f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2001      	movs	r0, #1
 80062fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	e000e100 	.word	0xe000e100

08006318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	6039      	str	r1, [r7, #0]
 8006322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006328:	2b00      	cmp	r3, #0
 800632a:	db0a      	blt.n	8006342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	490c      	ldr	r1, [pc, #48]	; (8006364 <__NVIC_SetPriority+0x4c>)
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	440b      	add	r3, r1
 800633c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006340:	e00a      	b.n	8006358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	4908      	ldr	r1, [pc, #32]	; (8006368 <__NVIC_SetPriority+0x50>)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	3b04      	subs	r3, #4
 8006350:	0112      	lsls	r2, r2, #4
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	440b      	add	r3, r1
 8006356:	761a      	strb	r2, [r3, #24]
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	e000e100 	.word	0xe000e100
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800636c:	b480      	push	{r7}
 800636e:	b089      	sub	sp, #36	; 0x24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f1c3 0307 	rsb	r3, r3, #7
 8006386:	2b04      	cmp	r3, #4
 8006388:	bf28      	it	cs
 800638a:	2304      	movcs	r3, #4
 800638c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3304      	adds	r3, #4
 8006392:	2b06      	cmp	r3, #6
 8006394:	d902      	bls.n	800639c <NVIC_EncodePriority+0x30>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3b03      	subs	r3, #3
 800639a:	e000      	b.n	800639e <NVIC_EncodePriority+0x32>
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43da      	mvns	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	401a      	ands	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063b4:	f04f 31ff 	mov.w	r1, #4294967295
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	43d9      	mvns	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c4:	4313      	orrs	r3, r2
         );
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3724      	adds	r7, #36	; 0x24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063e4:	d301      	bcc.n	80063ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063e6:	2301      	movs	r3, #1
 80063e8:	e00f      	b.n	800640a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <SysTick_Config+0x40>)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063f2:	210f      	movs	r1, #15
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295
 80063f8:	f7ff ff8e 	bl	8006318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <SysTick_Config+0x40>)
 80063fe:	2200      	movs	r2, #0
 8006400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006402:	4b04      	ldr	r3, [pc, #16]	; (8006414 <SysTick_Config+0x40>)
 8006404:	2207      	movs	r2, #7
 8006406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	e000e010 	.word	0xe000e010

08006418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff ff29 	bl	8006278 <__NVIC_SetPriorityGrouping>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	4603      	mov	r3, r0
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800643c:	f7ff ff40 	bl	80062c0 <__NVIC_GetPriorityGrouping>
 8006440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	6978      	ldr	r0, [r7, #20]
 8006448:	f7ff ff90 	bl	800636c <NVIC_EncodePriority>
 800644c:	4602      	mov	r2, r0
 800644e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff ff5f 	bl	8006318 <__NVIC_SetPriority>
}
 800645a:	bf00      	nop
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800646c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff33 	bl	80062dc <__NVIC_EnableIRQ>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff ffa4 	bl	80063d4 <SysTick_Config>
 800648c:	4603      	mov	r3, r0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e014      	b.n	80064d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	791b      	ldrb	r3, [r3, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fd f977 	bl	80037ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	795b      	ldrb	r3, [r3, #5]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_DAC_Start+0x16>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e043      	b.n	8006578 <HAL_DAC_Start+0x9e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2201      	movs	r2, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006514:	2001      	movs	r0, #1
 8006516:	f7fe f9fb 	bl	8004910 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10f      	bne.n	8006540 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800652a:	2b02      	cmp	r3, #2
 800652c:	d11d      	bne.n	800656a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	e014      	b.n	800656a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2102      	movs	r1, #2
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	429a      	cmp	r2, r3
 8006558:	d107      	bne.n	800656a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0202 	orr.w	r2, r2, #2
 8006568:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	3308      	adds	r3, #8
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e004      	b.n	80065ba <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	3314      	adds	r3, #20
 80065b8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	461a      	mov	r2, r3
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	795b      	ldrb	r3, [r3, #5]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_DAC_ConfigChannel+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e192      	b.n	800690e <HAL_DAC_ConfigChannel+0x33e>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2202      	movs	r2, #2
 80065f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d174      	bne.n	80066e6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80065fc:	f7fe f97c 	bl	80048f8 <HAL_GetTick>
 8006600:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d134      	bne.n	8006672 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006608:	e011      	b.n	800662e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800660a:	f7fe f975 	bl	80048f8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d90a      	bls.n	800662e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f043 0208 	orr.w	r2, r3, #8
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2203      	movs	r2, #3
 8006628:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e16f      	b.n	800690e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800663c:	2001      	movs	r0, #1
 800663e:	f7fe f967 	bl	8004910 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800664a:	641a      	str	r2, [r3, #64]	; 0x40
 800664c:	e01e      	b.n	800668c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800664e:	f7fe f953 	bl	80048f8 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d90a      	bls.n	8006672 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f043 0208 	orr.w	r2, r3, #8
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2203      	movs	r2, #3
 800666c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e14d      	b.n	800690e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	dbe8      	blt.n	800664e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800667c:	2001      	movs	r0, #1
 800667e:	f7fe f947 	bl	8004910 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	43db      	mvns	r3, r3
 80066a2:	ea02 0103 	and.w	r1, r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	409a      	lsls	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	21ff      	movs	r1, #255	; 0xff
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	ea02 0103 	and.w	r1, r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	409a      	lsls	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d11d      	bne.n	800672a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	221f      	movs	r2, #31
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006706:	4013      	ands	r3, r2
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	4313      	orrs	r3, r2
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2207      	movs	r2, #7
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	4013      	ands	r3, r2
 8006744:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d102      	bne.n	8006754 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800674e:	2300      	movs	r3, #0
 8006750:	623b      	str	r3, [r7, #32]
 8006752:	e00f      	b.n	8006774 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d102      	bne.n	8006762 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	e008      	b.n	8006774 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800676a:	2301      	movs	r3, #1
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	e001      	b.n	8006774 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006770:	2300      	movs	r3, #0
 8006772:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	4313      	orrs	r3, r2
 800677e:	6a3a      	ldr	r2, [r7, #32]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006796:	4013      	ands	r3, r2
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	791b      	ldrb	r3, [r3, #4]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d102      	bne.n	80067a8 <HAL_DAC_ConfigChannel+0x1d8>
 80067a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067a6:	e000      	b.n	80067aa <HAL_DAC_ConfigChannel+0x1da>
 80067a8:	2300      	movs	r3, #0
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	4013      	ands	r3, r2
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	795b      	ldrb	r3, [r3, #5]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d102      	bne.n	80067d4 <HAL_DAC_ConfigChannel+0x204>
 80067ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d2:	e000      	b.n	80067d6 <HAL_DAC_ConfigChannel+0x206>
 80067d4:	2300      	movs	r3, #0
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d114      	bne.n	8006816 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80067ec:	f002 f9d2 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 80067f0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4a48      	ldr	r2, [pc, #288]	; (8006918 <HAL_DAC_ConfigChannel+0x348>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d904      	bls.n	8006804 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
 8006802:	e00f      	b.n	8006824 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4a45      	ldr	r2, [pc, #276]	; (800691c <HAL_DAC_ConfigChannel+0x34c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d90a      	bls.n	8006822 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	e006      	b.n	8006824 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	4313      	orrs	r3, r2
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	e000      	b.n	8006824 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006822:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	4313      	orrs	r3, r2
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0310 	and.w	r3, r3, #16
 800684a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	43da      	mvns	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	400a      	ands	r2, r1
 800685a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006876:	4013      	ands	r3, r2
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688e:	4313      	orrs	r3, r2
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	22c0      	movs	r2, #192	; 0xc0
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43da      	mvns	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	400a      	ands	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	43db      	mvns	r3, r3
 80068ea:	ea02 0103 	and.w	r1, r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	409a      	lsls	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	09896800 	.word	0x09896800
 800691c:	04c4b400 	.word	0x04c4b400

08006920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e08d      	b.n	8006a4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_DMA_Init+0x138>)
 800693a:	429a      	cmp	r2, r3
 800693c:	d80f      	bhi.n	800695e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	4b45      	ldr	r3, [pc, #276]	; (8006a5c <HAL_DMA_Init+0x13c>)
 8006946:	4413      	add	r3, r2
 8006948:	4a45      	ldr	r2, [pc, #276]	; (8006a60 <HAL_DMA_Init+0x140>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	009a      	lsls	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a42      	ldr	r2, [pc, #264]	; (8006a64 <HAL_DMA_Init+0x144>)
 800695a:	641a      	str	r2, [r3, #64]	; 0x40
 800695c:	e00e      	b.n	800697c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <HAL_DMA_Init+0x148>)
 8006966:	4413      	add	r3, r2
 8006968:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <HAL_DMA_Init+0x140>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	009a      	lsls	r2, r3, #2
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a3c      	ldr	r2, [pc, #240]	; (8006a6c <HAL_DMA_Init+0x14c>)
 800697a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80069a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa76 	bl	8006ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069dc:	d102      	bne.n	80069e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_DMA_Init+0x104>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b04      	cmp	r3, #4
 8006a08:	d80c      	bhi.n	8006a24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa96 	bl	8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	e008      	b.n	8006a36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40020407 	.word	0x40020407
 8006a5c:	bffdfff8 	.word	0xbffdfff8
 8006a60:	cccccccd 	.word	0xcccccccd
 8006a64:	40020000 	.word	0x40020000
 8006a68:	bffdfbf8 	.word	0xbffdfbf8
 8006a6c:	40020400 	.word	0x40020400

08006a70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_DMA_Start_IT+0x20>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e066      	b.n	8006b5e <HAL_DMA_Start_IT+0xee>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d155      	bne.n	8006b50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f9bb 	bl	8006e44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 020e 	orr.w	r2, r2, #14
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e00f      	b.n	8006b08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0204 	bic.w	r2, r2, #4
 8006af6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 020a 	orr.w	r2, r2, #10
 8006b06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d007      	beq.n	8006b3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0201 	orr.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e005      	b.n	8006b5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d005      	beq.n	8006b8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2204      	movs	r2, #4
 8006b82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	73fb      	strb	r3, [r7, #15]
 8006b88:	e037      	b.n	8006bfa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 020e 	bic.w	r2, r2, #14
 8006b98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	f003 021f 	and.w	r2, r3, #31
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bcc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00c      	beq.n	8006bfa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006bf8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d00d      	beq.n	8006c4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2204      	movs	r2, #4
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	e047      	b.n	8006cdc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 020e 	bic.w	r2, r2, #14
 8006c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c80:	f003 021f 	and.w	r2, r3, #31
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	2101      	movs	r1, #1
 8006c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006c98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00c      	beq.n	8006cbc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006cba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
    }
  }
  return status;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2204      	movs	r2, #4
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d026      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x7a>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d021      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0204 	bic.w	r2, r2, #4
 8006d38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d3e:	f003 021f 	and.w	r2, r3, #31
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2104      	movs	r1, #4
 8006d48:	fa01 f202 	lsl.w	r2, r1, r2
 8006d4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d071      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d5e:	e06c      	b.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2202      	movs	r2, #2
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02e      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d029      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 020a 	bic.w	r2, r2, #10
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da8:	f003 021f 	and.w	r2, r3, #31
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2102      	movs	r1, #2
 8006db2:	fa01 f202 	lsl.w	r2, r1, r2
 8006db6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d038      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006dd0:	e033      	b.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2208      	movs	r2, #8
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02a      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d025      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 020e 	bic.w	r2, r2, #14
 8006dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e04:	f003 021f 	and.w	r2, r3, #31
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
}
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f003 021f 	and.w	r2, r3, #31
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d108      	bne.n	8006ea4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ea2:	e007      	b.n	8006eb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d802      	bhi.n	8006eda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006ed4:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e001      	b.n	8006ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006edc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	3b08      	subs	r3, #8
 8006eea:	4a12      	ldr	r2, [pc, #72]	; (8006f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef8:	089b      	lsrs	r3, r3, #2
 8006efa:	009a      	lsls	r2, r3, #2
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2201      	movs	r2, #1
 8006f14:	409a      	lsls	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40020407 	.word	0x40020407
 8006f2c:	40020800 	.word	0x40020800
 8006f30:	40020820 	.word	0x40020820
 8006f34:	cccccccd 	.word	0xcccccccd
 8006f38:	40020880 	.word	0x40020880

08006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a08      	ldr	r2, [pc, #32]	; (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f5e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	1000823f 	.word	0x1000823f
 8006f80:	40020940 	.word	0x40020940

08006f84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e147      	b.n	8007226 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fc fcea 	bl	8003984 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0210 	bic.w	r2, r2, #16
 8006fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc0:	f7fd fc9a 	bl	80048f8 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006fc6:	e012      	b.n	8006fee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006fc8:	f7fd fc96 	bl	80048f8 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b0a      	cmp	r3, #10
 8006fd4:	d90b      	bls.n	8006fee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fda:	f043 0201 	orr.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e11b      	b.n	8007226 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d0e5      	beq.n	8006fc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800700c:	f7fd fc74 	bl	80048f8 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007012:	e012      	b.n	800703a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007014:	f7fd fc70 	bl	80048f8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b0a      	cmp	r3, #10
 8007020:	d90b      	bls.n	800703a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007026:	f043 0201 	orr.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2203      	movs	r2, #3
 8007032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e0f5      	b.n	8007226 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0e5      	beq.n	8007014 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0202 	orr.w	r2, r2, #2
 8007056:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a74      	ldr	r2, [pc, #464]	; (8007230 <HAL_FDCAN_Init+0x2ac>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d103      	bne.n	800706a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007062:	4a74      	ldr	r2, [pc, #464]	; (8007234 <HAL_FDCAN_Init+0x2b0>)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7c1b      	ldrb	r3, [r3, #16]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d108      	bne.n	8007084 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007080:	619a      	str	r2, [r3, #24]
 8007082:	e007      	b.n	8007094 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007092:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7c5b      	ldrb	r3, [r3, #17]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d108      	bne.n	80070ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070aa:	619a      	str	r2, [r3, #24]
 80070ac:	e007      	b.n	80070be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7c9b      	ldrb	r3, [r3, #18]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699a      	ldr	r2, [r3, #24]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070d4:	619a      	str	r2, [r3, #24]
 80070d6:	e007      	b.n	80070e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800710c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0210 	bic.w	r2, r2, #16
 800711c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d108      	bne.n	8007138 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0204 	orr.w	r2, r2, #4
 8007134:	619a      	str	r2, [r3, #24]
 8007136:	e02c      	b.n	8007192 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d028      	beq.n	8007192 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d01c      	beq.n	8007182 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699a      	ldr	r2, [r3, #24]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007156:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691a      	ldr	r2, [r3, #16]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0210 	orr.w	r2, r2, #16
 8007166:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	2b03      	cmp	r3, #3
 800716e:	d110      	bne.n	8007192 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0220 	orr.w	r2, r2, #32
 800717e:	619a      	str	r2, [r3, #24]
 8007180:	e007      	b.n	8007192 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699a      	ldr	r2, [r3, #24]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0220 	orr.w	r2, r2, #32
 8007190:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	3b01      	subs	r3, #1
 8007198:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	3b01      	subs	r3, #1
 80071a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80071aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80071ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80071bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c6:	d115      	bne.n	80071f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	3b01      	subs	r3, #1
 80071d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	3b01      	subs	r3, #1
 80071de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80071e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	3b01      	subs	r3, #1
 80071ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80071f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80071f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fbe2 	bl	80079d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40006400 	.word	0x40006400
 8007234:	40006500 	.word	0x40006500

08007238 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d110      	bne.n	800726e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e006      	b.n	800727c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007272:	f043 0204 	orr.w	r2, r3, #4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d12c      	bne.n	80072fa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80072a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e023      	b.n	8007308 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fbd2 	bl	8007a80 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2101      	movs	r1, #1
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	fa01 f202 	lsl.w	r2, r1, r2
 80072e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80072ec:	2201      	movs	r2, #1
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	409a      	lsls	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e006      	b.n	8007308 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	f043 0208 	orr.w	r2, r3, #8
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007310:	b480      	push	{r7}
 8007312:	b08b      	sub	sp, #44	; 0x2c
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007324:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007326:	7efb      	ldrb	r3, [r7, #27]
 8007328:	2b02      	cmp	r3, #2
 800732a:	f040 80bc 	bne.w	80074a6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d121      	bne.n	8007378 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2b00      	cmp	r3, #0
 8007342:	d107      	bne.n	8007354 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007348:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0af      	b.n	80074b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	440b      	add	r3, r1
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	e020      	b.n	80073ba <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	2b00      	cmp	r3, #0
 8007386:	d107      	bne.n	8007398 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e08d      	b.n	80074b4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	440b      	add	r3, r1
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d107      	bne.n	80073de <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	0c9b      	lsrs	r3, r3, #18
 80073d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e005      	b.n	80073ea <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	3304      	adds	r3, #4
 8007406:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	b29a      	uxth	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0e1b      	lsrs	r3, r3, #24
 800743c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	0fda      	lsrs	r2, r3, #31
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	3304      	adds	r3, #4
 8007452:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007458:	2300      	movs	r3, #0
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	e00a      	b.n	8007474 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	441a      	add	r2, r3
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	440b      	add	r3, r1
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	3301      	adds	r3, #1
 8007472:	623b      	str	r3, [r7, #32]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	4a11      	ldr	r2, [pc, #68]	; (80074c0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800747c:	5cd3      	ldrb	r3, [r2, r3]
 800747e:	461a      	mov	r2, r3
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	4293      	cmp	r3, r2
 8007484:	d3eb      	bcc.n	800745e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	d105      	bne.n	8007498 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007496:	e004      	b.n	80074a2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e006      	b.n	80074b4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074aa:	f043 0208 	orr.w	r2, r3, #8
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	372c      	adds	r7, #44	; 0x2c
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	0800eaf4 	.word	0x0800eaf4

080074c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074d6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d003      	beq.n	80074e6 <HAL_FDCAN_ActivateNotification+0x22>
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	f040 80c8 	bne.w	8007676 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d03b      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d031      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d027      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01d      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b00      	cmp	r3, #0
 8007550:	d013      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d13b      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d131      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d127      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11d      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d113      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0202 	orr.w	r2, r2, #2
 8007624:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	430a      	orrs	r2, r1
 8007640:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	430a      	orrs	r2, r1
 800765e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	430a      	orrs	r2, r1
 8007670:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e006      	b.n	8007684 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767a:	f043 0202 	orr.w	r2, r3, #2
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	4013      	ands	r3, r2
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	6a3a      	ldr	r2, [r7, #32]
 80076c4:	4013      	ands	r3, r2
 80076c6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076d2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	4013      	ands	r3, r2
 80076de:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80076ea:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007702:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4013      	ands	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2240      	movs	r2, #64	; 0x40
 8007732:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f92e 	bl	8007996 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01b      	beq.n	8007780 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d014      	beq.n	8007780 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800775e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4013      	ands	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007776:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007778:	6939      	ldr	r1, [r7, #16]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8ec 	bl	8007958 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800778e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8b6 	bl	8007902 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a3a      	ldr	r2, [r7, #32]
 80077a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80077a4:	6a39      	ldr	r1, [r7, #32]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fb fd0a 	bl	80031c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80077ba:	69f9      	ldr	r1, [r7, #28]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8ab 	bl	8007918 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00e      	beq.n	80077ee <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8a0 	bl	800792e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01a      	beq.n	8007832 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b00      	cmp	r3, #0
 8007808:	d013      	beq.n	8007832 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007812:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4013      	ands	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2280      	movs	r2, #128	; 0x80
 8007828:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f888 	bl	8007942 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007856:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f888 	bl	800796e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d007      	beq.n	800788a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007882:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f87c 	bl	8007982 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80078ca:	6979      	ldr	r1, [r7, #20]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f876 	bl	80079be <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f858 	bl	80079aa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80078fa:	bf00      	nop
 80078fc:	3728      	adds	r7, #40	; 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80079dc:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80079de:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ee:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	041a      	lsls	r2, r3, #16
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a14:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	061a      	lsls	r2, r3, #24
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e005      	b.n	8007a62 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d3f3      	bcc.n	8007a56 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007a6e:	bf00      	nop
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	4000a400 	.word	0x4000a400

08007a80 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007a9e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e00a      	b.n	8007ac2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007ab4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007aba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007acc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007ad2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007ad8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	4413      	add	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	440b      	add	r3, r1
 8007af2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3304      	adds	r3, #4
 8007afe:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e020      	b.n	8007b54 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	3303      	adds	r3, #3
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	4413      	add	r3, r2
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	3302      	adds	r3, #2
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	440b      	add	r3, r1
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007b2a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	440b      	add	r3, r1
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007b38:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	440a      	add	r2, r1
 8007b40:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007b42:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	3304      	adds	r3, #4
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	0c1b      	lsrs	r3, r3, #16
 8007b5a:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <FDCAN_CopyMessageToRAM+0xf4>)
 8007b5c:	5cd3      	ldrb	r3, [r2, r3]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d3d5      	bcc.n	8007b12 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	3724      	adds	r7, #36	; 0x24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	0800eaf4 	.word	0x0800eaf4

08007b78 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e033      	b.n	8007bf2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fb ff66 	bl	8003a70 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f854 	bl	8007c58 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f822 	bl	8007bfa <FMAC_Reset>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d10c      	bne.n	8007bd6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc0:	f043 0210 	orr.w	r2, r3, #16
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	22a0      	movs	r2, #160	; 0xa0
 8007bcc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	e008      	b.n	8007be8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c02:	f7fc fe79 	bl	80048f8 <HAL_GetTick>
 8007c06:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c16:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007c18:	e00f      	b.n	8007c3a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007c1a:	f7fc fe6d 	bl	80048f8 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c28:	d907      	bls.n	8007c3a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e00a      	b.n	8007c50 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e8      	bne.n	8007c1a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f807 	bl	8007c74 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f81b 	bl	8007ca2 <FMAC_ResetOutputStateAndDataPointers>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007cde:	e15a      	b.n	8007f96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cec:	4013      	ands	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 814c 	beq.w	8007f90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d005      	beq.n	8007d10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d130      	bne.n	8007d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	43db      	mvns	r3, r3
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4013      	ands	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d46:	2201      	movs	r2, #1
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4013      	ands	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	f003 0201 	and.w	r2, r3, #1
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d017      	beq.n	8007dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	2203      	movs	r2, #3
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4013      	ands	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d123      	bne.n	8007e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	08da      	lsrs	r2, r3, #3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3208      	adds	r2, #8
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	220f      	movs	r2, #15
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	08da      	lsrs	r2, r3, #3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3208      	adds	r2, #8
 8007dfc:	6939      	ldr	r1, [r7, #16]
 8007dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e12:	43db      	mvns	r3, r3
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4013      	ands	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 0203 	and.w	r2, r3, #3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80a6 	beq.w	8007f90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e44:	4b5b      	ldr	r3, [pc, #364]	; (8007fb4 <HAL_GPIO_Init+0x2e4>)
 8007e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e48:	4a5a      	ldr	r2, [pc, #360]	; (8007fb4 <HAL_GPIO_Init+0x2e4>)
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	6613      	str	r3, [r2, #96]	; 0x60
 8007e50:	4b58      	ldr	r3, [pc, #352]	; (8007fb4 <HAL_GPIO_Init+0x2e4>)
 8007e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e5c:	4a56      	ldr	r2, [pc, #344]	; (8007fb8 <HAL_GPIO_Init+0x2e8>)
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	089b      	lsrs	r3, r3, #2
 8007e62:	3302      	adds	r3, #2
 8007e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 0303 	and.w	r3, r3, #3
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	220f      	movs	r2, #15
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007e86:	d01f      	beq.n	8007ec8 <HAL_GPIO_Init+0x1f8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a4c      	ldr	r2, [pc, #304]	; (8007fbc <HAL_GPIO_Init+0x2ec>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d019      	beq.n	8007ec4 <HAL_GPIO_Init+0x1f4>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a4b      	ldr	r2, [pc, #300]	; (8007fc0 <HAL_GPIO_Init+0x2f0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_GPIO_Init+0x1f0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a4a      	ldr	r2, [pc, #296]	; (8007fc4 <HAL_GPIO_Init+0x2f4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00d      	beq.n	8007ebc <HAL_GPIO_Init+0x1ec>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a49      	ldr	r2, [pc, #292]	; (8007fc8 <HAL_GPIO_Init+0x2f8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d007      	beq.n	8007eb8 <HAL_GPIO_Init+0x1e8>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a48      	ldr	r2, [pc, #288]	; (8007fcc <HAL_GPIO_Init+0x2fc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d101      	bne.n	8007eb4 <HAL_GPIO_Init+0x1e4>
 8007eb0:	2305      	movs	r3, #5
 8007eb2:	e00a      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	e008      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	e006      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e004      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e002      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <HAL_GPIO_Init+0x1fa>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	f002 0203 	and.w	r2, r2, #3
 8007ed0:	0092      	lsls	r2, r2, #2
 8007ed2:	4093      	lsls	r3, r2
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eda:	4937      	ldr	r1, [pc, #220]	; (8007fb8 <HAL_GPIO_Init+0x2e8>)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ee8:	4b39      	ldr	r3, [pc, #228]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f0c:	4a30      	ldr	r2, [pc, #192]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f12:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	43db      	mvns	r3, r3
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f36:	4a26      	ldr	r2, [pc, #152]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007f3c:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	43db      	mvns	r3, r3
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f60:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	4013      	ands	r3, r2
 8007f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f8a:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <HAL_GPIO_Init+0x300>)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	3301      	adds	r3, #1
 8007f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f47f ae9d 	bne.w	8007ce0 <HAL_GPIO_Init+0x10>
  }
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	371c      	adds	r7, #28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	48000400 	.word	0x48000400
 8007fc0:	48000800 	.word	0x48000800
 8007fc4:	48000c00 	.word	0x48000c00
 8007fc8:	48001000 	.word	0x48001000
 8007fcc:	48001400 	.word	0x48001400
 8007fd0:	40010400 	.word	0x40010400

08007fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fe4:	787b      	ldrb	r3, [r7, #1]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007fea:	887a      	ldrh	r2, [r7, #2]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ff0:	e002      	b.n	8007ff8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ff2:	887a      	ldrh	r2, [r7, #2]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008016:	887a      	ldrh	r2, [r7, #2]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4013      	ands	r3, r2
 800801c:	041a      	lsls	r2, r3, #16
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	43d9      	mvns	r1, r3
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	400b      	ands	r3, r1
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	619a      	str	r2, [r3, #24]
}
 800802c:	bf00      	nop
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d141      	bne.n	80080ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008046:	4b4b      	ldr	r3, [pc, #300]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800804e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008052:	d131      	bne.n	80080b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008054:	4b47      	ldr	r3, [pc, #284]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805a:	4a46      	ldr	r2, [pc, #280]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800805c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008064:	4b43      	ldr	r3, [pc, #268]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800806c:	4a41      	ldr	r2, [pc, #260]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800806e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008074:	4b40      	ldr	r3, [pc, #256]	; (8008178 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2232      	movs	r2, #50	; 0x32
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	4a3f      	ldr	r2, [pc, #252]	; (800817c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	0c9b      	lsrs	r3, r3, #18
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800808a:	e002      	b.n	8008092 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3b01      	subs	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008092:	4b38      	ldr	r3, [pc, #224]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809e:	d102      	bne.n	80080a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f2      	bne.n	800808c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080a6:	4b33      	ldr	r3, [pc, #204]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b2:	d158      	bne.n	8008166 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e057      	b.n	8008168 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080b8:	4b2e      	ldr	r3, [pc, #184]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080be:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80080c8:	e04d      	b.n	8008166 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d0:	d141      	bne.n	8008156 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080d2:	4b28      	ldr	r3, [pc, #160]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080de:	d131      	bne.n	8008144 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080e0:	4b24      	ldr	r3, [pc, #144]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e6:	4a23      	ldr	r2, [pc, #140]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080f0:	4b20      	ldr	r3, [pc, #128]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080f8:	4a1e      	ldr	r2, [pc, #120]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008100:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2232      	movs	r2, #50	; 0x32
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	4a1c      	ldr	r2, [pc, #112]	; (800817c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	0c9b      	lsrs	r3, r3, #18
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008116:	e002      	b.n	800811e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3b01      	subs	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800811e:	4b15      	ldr	r3, [pc, #84]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812a:	d102      	bne.n	8008132 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f2      	bne.n	8008118 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008132:	4b10      	ldr	r3, [pc, #64]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800813a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813e:	d112      	bne.n	8008166 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e011      	b.n	8008168 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814a:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008154:	e007      	b.n	8008166 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008156:	4b07      	ldr	r3, [pc, #28]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800815e:	4a05      	ldr	r2, [pc, #20]	; (8008174 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008164:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	40007000 	.word	0x40007000
 8008178:	200000d8 	.word	0x200000d8
 800817c:	431bde83 	.word	0x431bde83

08008180 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a04      	ldr	r2, [pc, #16]	; (800819c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800818a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800818e:	6093      	str	r3, [r2, #8]
}
 8008190:	bf00      	nop
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40007000 	.word	0x40007000

080081a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e306      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d075      	beq.n	80082aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081be:	4b97      	ldr	r3, [pc, #604]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 030c 	and.w	r3, r3, #12
 80081c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081c8:	4b94      	ldr	r3, [pc, #592]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b0c      	cmp	r3, #12
 80081d6:	d102      	bne.n	80081de <HAL_RCC_OscConfig+0x3e>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d002      	beq.n	80081e4 <HAL_RCC_OscConfig+0x44>
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d10b      	bne.n	80081fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081e4:	4b8d      	ldr	r3, [pc, #564]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d05b      	beq.n	80082a8 <HAL_RCC_OscConfig+0x108>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d157      	bne.n	80082a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e2e1      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d106      	bne.n	8008214 <HAL_RCC_OscConfig+0x74>
 8008206:	4b85      	ldr	r3, [pc, #532]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a84      	ldr	r2, [pc, #528]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800820c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e01d      	b.n	8008250 <HAL_RCC_OscConfig+0xb0>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800821c:	d10c      	bne.n	8008238 <HAL_RCC_OscConfig+0x98>
 800821e:	4b7f      	ldr	r3, [pc, #508]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a7e      	ldr	r2, [pc, #504]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4b7c      	ldr	r3, [pc, #496]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a7b      	ldr	r2, [pc, #492]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	e00b      	b.n	8008250 <HAL_RCC_OscConfig+0xb0>
 8008238:	4b78      	ldr	r3, [pc, #480]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a77      	ldr	r2, [pc, #476]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800823e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4b75      	ldr	r3, [pc, #468]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a74      	ldr	r2, [pc, #464]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800824a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800824e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d013      	beq.n	8008280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008258:	f7fc fb4e 	bl	80048f8 <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008260:	f7fc fb4a 	bl	80048f8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b64      	cmp	r3, #100	; 0x64
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e2a6      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008272:	4b6a      	ldr	r3, [pc, #424]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d0f0      	beq.n	8008260 <HAL_RCC_OscConfig+0xc0>
 800827e:	e014      	b.n	80082aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fc fb3a 	bl	80048f8 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008288:	f7fc fb36 	bl	80048f8 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b64      	cmp	r3, #100	; 0x64
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e292      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800829a:	4b60      	ldr	r3, [pc, #384]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1f0      	bne.n	8008288 <HAL_RCC_OscConfig+0xe8>
 80082a6:	e000      	b.n	80082aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d075      	beq.n	80083a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082b6:	4b59      	ldr	r3, [pc, #356]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 030c 	and.w	r3, r3, #12
 80082be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082c0:	4b56      	ldr	r3, [pc, #344]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0303 	and.w	r3, r3, #3
 80082c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b0c      	cmp	r3, #12
 80082ce:	d102      	bne.n	80082d6 <HAL_RCC_OscConfig+0x136>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d002      	beq.n	80082dc <HAL_RCC_OscConfig+0x13c>
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d11f      	bne.n	800831c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082dc:	4b4f      	ldr	r3, [pc, #316]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_RCC_OscConfig+0x154>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e265      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f4:	4b49      	ldr	r3, [pc, #292]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	061b      	lsls	r3, r3, #24
 8008302:	4946      	ldr	r1, [pc, #280]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008308:	4b45      	ldr	r3, [pc, #276]	; (8008420 <HAL_RCC_OscConfig+0x280>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7fc faa7 	bl	8004860 <HAL_InitTick>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d043      	beq.n	80083a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e251      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d023      	beq.n	800836c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008324:	4b3d      	ldr	r3, [pc, #244]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a3c      	ldr	r2, [pc, #240]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800832a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800832e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008330:	f7fc fae2 	bl	80048f8 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008338:	f7fc fade 	bl	80048f8 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e23a      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800834a:	4b34      	ldr	r3, [pc, #208]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f0      	beq.n	8008338 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008356:	4b31      	ldr	r3, [pc, #196]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	061b      	lsls	r3, r3, #24
 8008364:	492d      	ldr	r1, [pc, #180]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	604b      	str	r3, [r1, #4]
 800836a:	e01a      	b.n	80083a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800836c:	4b2b      	ldr	r3, [pc, #172]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2a      	ldr	r2, [pc, #168]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008378:	f7fc fabe 	bl	80048f8 <HAL_GetTick>
 800837c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800837e:	e008      	b.n	8008392 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008380:	f7fc faba 	bl	80048f8 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	2b02      	cmp	r3, #2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e216      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008392:	4b22      	ldr	r3, [pc, #136]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f0      	bne.n	8008380 <HAL_RCC_OscConfig+0x1e0>
 800839e:	e000      	b.n	80083a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d041      	beq.n	8008432 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083b6:	4b19      	ldr	r3, [pc, #100]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80083b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083bc:	4a17      	ldr	r2, [pc, #92]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80083be:	f043 0301 	orr.w	r3, r3, #1
 80083c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fc fa97 	bl	80048f8 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ce:	f7fc fa93 	bl	80048f8 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e1ef      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083e0:	4b0e      	ldr	r3, [pc, #56]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80083e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0ef      	beq.n	80083ce <HAL_RCC_OscConfig+0x22e>
 80083ee:	e020      	b.n	8008432 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80083f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <HAL_RCC_OscConfig+0x27c>)
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008400:	f7fc fa7a 	bl	80048f8 <HAL_GetTick>
 8008404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008406:	e00d      	b.n	8008424 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008408:	f7fc fa76 	bl	80048f8 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d906      	bls.n	8008424 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e1d2      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
 800841a:	bf00      	nop
 800841c:	40021000 	.word	0x40021000
 8008420:	200000dc 	.word	0x200000dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008424:	4b8c      	ldr	r3, [pc, #560]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1ea      	bne.n	8008408 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80a6 	beq.w	800858c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008440:	2300      	movs	r3, #0
 8008442:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008444:	4b84      	ldr	r3, [pc, #528]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_RCC_OscConfig+0x2b4>
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <HAL_RCC_OscConfig+0x2b6>
 8008454:	2300      	movs	r3, #0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00d      	beq.n	8008476 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800845a:	4b7f      	ldr	r3, [pc, #508]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 800845c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845e:	4a7e      	ldr	r2, [pc, #504]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008464:	6593      	str	r3, [r2, #88]	; 0x58
 8008466:	4b7c      	ldr	r3, [pc, #496]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008472:	2301      	movs	r3, #1
 8008474:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008476:	4b79      	ldr	r3, [pc, #484]	; (800865c <HAL_RCC_OscConfig+0x4bc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847e:	2b00      	cmp	r3, #0
 8008480:	d118      	bne.n	80084b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008482:	4b76      	ldr	r3, [pc, #472]	; (800865c <HAL_RCC_OscConfig+0x4bc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a75      	ldr	r2, [pc, #468]	; (800865c <HAL_RCC_OscConfig+0x4bc>)
 8008488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800848e:	f7fc fa33 	bl	80048f8 <HAL_GetTick>
 8008492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008494:	e008      	b.n	80084a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008496:	f7fc fa2f 	bl	80048f8 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e18b      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a8:	4b6c      	ldr	r3, [pc, #432]	; (800865c <HAL_RCC_OscConfig+0x4bc>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f0      	beq.n	8008496 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d108      	bne.n	80084ce <HAL_RCC_OscConfig+0x32e>
 80084bc:	4b66      	ldr	r3, [pc, #408]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c2:	4a65      	ldr	r2, [pc, #404]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084c4:	f043 0301 	orr.w	r3, r3, #1
 80084c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084cc:	e024      	b.n	8008518 <HAL_RCC_OscConfig+0x378>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d110      	bne.n	80084f8 <HAL_RCC_OscConfig+0x358>
 80084d6:	4b60      	ldr	r3, [pc, #384]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084dc:	4a5e      	ldr	r2, [pc, #376]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084de:	f043 0304 	orr.w	r3, r3, #4
 80084e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084e6:	4b5c      	ldr	r3, [pc, #368]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ec:	4a5a      	ldr	r2, [pc, #360]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80084f6:	e00f      	b.n	8008518 <HAL_RCC_OscConfig+0x378>
 80084f8:	4b57      	ldr	r3, [pc, #348]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	4a56      	ldr	r2, [pc, #344]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008500:	f023 0301 	bic.w	r3, r3, #1
 8008504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008508:	4b53      	ldr	r3, [pc, #332]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850e:	4a52      	ldr	r2, [pc, #328]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008510:	f023 0304 	bic.w	r3, r3, #4
 8008514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d016      	beq.n	800854e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008520:	f7fc f9ea 	bl	80048f8 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008526:	e00a      	b.n	800853e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008528:	f7fc f9e6 	bl	80048f8 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f241 3288 	movw	r2, #5000	; 0x1388
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e140      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800853e:	4b46      	ldr	r3, [pc, #280]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0ed      	beq.n	8008528 <HAL_RCC_OscConfig+0x388>
 800854c:	e015      	b.n	800857a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854e:	f7fc f9d3 	bl	80048f8 <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008554:	e00a      	b.n	800856c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008556:	f7fc f9cf 	bl	80048f8 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	f241 3288 	movw	r2, #5000	; 0x1388
 8008564:	4293      	cmp	r3, r2
 8008566:	d901      	bls.n	800856c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e129      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800856c:	4b3a      	ldr	r3, [pc, #232]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1ed      	bne.n	8008556 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800857a:	7ffb      	ldrb	r3, [r7, #31]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d105      	bne.n	800858c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008580:	4b35      	ldr	r3, [pc, #212]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	4a34      	ldr	r2, [pc, #208]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800858a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	d03c      	beq.n	8008612 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01c      	beq.n	80085da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085a0:	4b2d      	ldr	r3, [pc, #180]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80085a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085a6:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b0:	f7fc f9a2 	bl	80048f8 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085b8:	f7fc f99e 	bl	80048f8 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e0fa      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085ca:	4b23      	ldr	r3, [pc, #140]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80085cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0ef      	beq.n	80085b8 <HAL_RCC_OscConfig+0x418>
 80085d8:	e01b      	b.n	8008612 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085da:	4b1f      	ldr	r3, [pc, #124]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80085dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085e0:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 80085e2:	f023 0301 	bic.w	r3, r3, #1
 80085e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ea:	f7fc f985 	bl	80048f8 <HAL_GetTick>
 80085ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085f0:	e008      	b.n	8008604 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085f2:	f7fc f981 	bl	80048f8 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e0dd      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008604:	4b14      	ldr	r3, [pc, #80]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1ef      	bne.n	80085f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 80d1 	beq.w	80087be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800861c:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f003 030c 	and.w	r3, r3, #12
 8008624:	2b0c      	cmp	r3, #12
 8008626:	f000 808b 	beq.w	8008740 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d15e      	bne.n	80086f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008632:	4b09      	ldr	r3, [pc, #36]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a08      	ldr	r2, [pc, #32]	; (8008658 <HAL_RCC_OscConfig+0x4b8>)
 8008638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800863c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863e:	f7fc f95b 	bl	80048f8 <HAL_GetTick>
 8008642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008644:	e00c      	b.n	8008660 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008646:	f7fc f957 	bl	80048f8 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d905      	bls.n	8008660 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e0b3      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
 8008658:	40021000 	.word	0x40021000
 800865c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008660:	4b59      	ldr	r3, [pc, #356]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1ec      	bne.n	8008646 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800866c:	4b56      	ldr	r3, [pc, #344]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	4b56      	ldr	r3, [pc, #344]	; (80087cc <HAL_RCC_OscConfig+0x62c>)
 8008672:	4013      	ands	r3, r2
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6a11      	ldr	r1, [r2, #32]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800867c:	3a01      	subs	r2, #1
 800867e:	0112      	lsls	r2, r2, #4
 8008680:	4311      	orrs	r1, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008686:	0212      	lsls	r2, r2, #8
 8008688:	4311      	orrs	r1, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800868e:	0852      	lsrs	r2, r2, #1
 8008690:	3a01      	subs	r2, #1
 8008692:	0552      	lsls	r2, r2, #21
 8008694:	4311      	orrs	r1, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800869a:	0852      	lsrs	r2, r2, #1
 800869c:	3a01      	subs	r2, #1
 800869e:	0652      	lsls	r2, r2, #25
 80086a0:	4311      	orrs	r1, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086a6:	06d2      	lsls	r2, r2, #27
 80086a8:	430a      	orrs	r2, r1
 80086aa:	4947      	ldr	r1, [pc, #284]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086b0:	4b45      	ldr	r3, [pc, #276]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a44      	ldr	r2, [pc, #272]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086bc:	4b42      	ldr	r3, [pc, #264]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4a41      	ldr	r2, [pc, #260]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fc f916 	bl	80048f8 <HAL_GetTick>
 80086cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fc f912 	bl	80048f8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e06e      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086e2:	4b39      	ldr	r3, [pc, #228]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0f0      	beq.n	80086d0 <HAL_RCC_OscConfig+0x530>
 80086ee:	e066      	b.n	80087be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086f0:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a34      	ldr	r2, [pc, #208]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80086fc:	4b32      	ldr	r3, [pc, #200]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	4a31      	ldr	r2, [pc, #196]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 8008702:	f023 0303 	bic.w	r3, r3, #3
 8008706:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008708:	4b2f      	ldr	r3, [pc, #188]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 800870e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008716:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fc f8ee 	bl	80048f8 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008720:	f7fc f8ea 	bl	80048f8 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e046      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008732:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x580>
 800873e:	e03e      	b.n	80087be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d101      	bne.n	800874c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e039      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800874c:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <HAL_RCC_OscConfig+0x628>)
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f003 0203 	and.w	r2, r3, #3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	429a      	cmp	r2, r3
 800875e:	d12c      	bne.n	80087ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	3b01      	subs	r3, #1
 800876c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800876e:	429a      	cmp	r2, r3
 8008770:	d123      	bne.n	80087ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800877e:	429a      	cmp	r2, r3
 8008780:	d11b      	bne.n	80087ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800878e:	429a      	cmp	r2, r3
 8008790:	d113      	bne.n	80087ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	085b      	lsrs	r3, r3, #1
 800879e:	3b01      	subs	r3, #1
 80087a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d109      	bne.n	80087ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	085b      	lsrs	r3, r3, #1
 80087b2:	3b01      	subs	r3, #1
 80087b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d001      	beq.n	80087be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3720      	adds	r7, #32
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40021000 	.word	0x40021000
 80087cc:	019f800c 	.word	0x019f800c

080087d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e11e      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087e8:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d910      	bls.n	8008818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f6:	4b8e      	ldr	r3, [pc, #568]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 020f 	bic.w	r2, r3, #15
 80087fe:	498c      	ldr	r1, [pc, #560]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	4313      	orrs	r3, r2
 8008804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008806:	4b8a      	ldr	r3, [pc, #552]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d001      	beq.n	8008818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e106      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d073      	beq.n	800890c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d129      	bne.n	8008880 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800882c:	4b81      	ldr	r3, [pc, #516]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e0f4      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800883c:	f000 f9e2 	bl	8008c04 <RCC_GetSysClockFreqFromPLLSource>
 8008840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4a7c      	ldr	r2, [pc, #496]	; (8008a38 <HAL_RCC_ClockConfig+0x268>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d93f      	bls.n	80088ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800884a:	4b7a      	ldr	r3, [pc, #488]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d009      	beq.n	800886a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800885e:	2b00      	cmp	r3, #0
 8008860:	d033      	beq.n	80088ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008866:	2b00      	cmp	r3, #0
 8008868:	d12f      	bne.n	80088ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800886a:	4b72      	ldr	r3, [pc, #456]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008872:	4a70      	ldr	r2, [pc, #448]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800887a:	2380      	movs	r3, #128	; 0x80
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e024      	b.n	80088ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d107      	bne.n	8008898 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008888:	4b6a      	ldr	r3, [pc, #424]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e0c6      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008898:	4b66      	ldr	r3, [pc, #408]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e0be      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80088a8:	f000 f914 	bl	8008ad4 <HAL_RCC_GetSysClockFreq>
 80088ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4a61      	ldr	r2, [pc, #388]	; (8008a38 <HAL_RCC_ClockConfig+0x268>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d909      	bls.n	80088ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80088b6:	4b5f      	ldr	r3, [pc, #380]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088be:	4a5d      	ldr	r2, [pc, #372]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80088c6:	2380      	movs	r3, #128	; 0x80
 80088c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088ca:	4b5a      	ldr	r3, [pc, #360]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f023 0203 	bic.w	r2, r3, #3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	4957      	ldr	r1, [pc, #348]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088dc:	f7fc f80c 	bl	80048f8 <HAL_GetTick>
 80088e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088e4:	f7fc f808 	bl	80048f8 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e095      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fa:	4b4e      	ldr	r3, [pc, #312]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f003 020c 	and.w	r2, r3, #12
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	429a      	cmp	r2, r3
 800890a:	d1eb      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d023      	beq.n	8008960 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008924:	4b43      	ldr	r3, [pc, #268]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4a42      	ldr	r2, [pc, #264]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800892a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800892e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d007      	beq.n	800894c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800893c:	4b3d      	ldr	r3, [pc, #244]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008944:	4a3b      	ldr	r2, [pc, #236]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 8008946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800894a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800894c:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	4936      	ldr	r1, [pc, #216]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800895a:	4313      	orrs	r3, r2
 800895c:	608b      	str	r3, [r1, #8]
 800895e:	e008      	b.n	8008972 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b80      	cmp	r3, #128	; 0x80
 8008964:	d105      	bne.n	8008972 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	4a32      	ldr	r2, [pc, #200]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 800896c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008970:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008972:	4b2f      	ldr	r3, [pc, #188]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d21d      	bcs.n	80089bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008980:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f023 020f 	bic.w	r2, r3, #15
 8008988:	4929      	ldr	r1, [pc, #164]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	4313      	orrs	r3, r2
 800898e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008990:	f7fb ffb2 	bl	80048f8 <HAL_GetTick>
 8008994:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008996:	e00a      	b.n	80089ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008998:	f7fb ffae 	bl	80048f8 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e03b      	b.n	8008a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ae:	4b20      	ldr	r3, [pc, #128]	; (8008a30 <HAL_RCC_ClockConfig+0x260>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d1ed      	bne.n	8008998 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d008      	beq.n	80089da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089c8:	4b1a      	ldr	r3, [pc, #104]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	4917      	ldr	r1, [pc, #92]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d009      	beq.n	80089fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	490f      	ldr	r1, [pc, #60]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80089fa:	f000 f86b 	bl	8008ad4 <HAL_RCC_GetSysClockFreq>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <HAL_RCC_ClockConfig+0x264>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	091b      	lsrs	r3, r3, #4
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	490c      	ldr	r1, [pc, #48]	; (8008a3c <HAL_RCC_ClockConfig+0x26c>)
 8008a0c:	5ccb      	ldrb	r3, [r1, r3]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	fa22 f303 	lsr.w	r3, r2, r3
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_RCC_ClockConfig+0x270>)
 8008a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <HAL_RCC_ClockConfig+0x274>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fb ff1e 	bl	8004860 <HAL_InitTick>
 8008a24:	4603      	mov	r3, r0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	40022000 	.word	0x40022000
 8008a34:	40021000 	.word	0x40021000
 8008a38:	04c4b400 	.word	0x04c4b400
 8008a3c:	0800eadc 	.word	0x0800eadc
 8008a40:	200000d8 	.word	0x200000d8
 8008a44:	200000dc 	.word	0x200000dc

08008a48 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	; 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008a54:	2302      	movs	r3, #2
 8008a56:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8008a74:	029b      	lsls	r3, r3, #10
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <HAL_RCC_MCOConfig+0x88>)
 8008a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a86:	2101      	movs	r1, #1
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8e:	4910      	ldr	r1, [pc, #64]	; (8008ad0 <HAL_RCC_MCOConfig+0x88>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	0d1b      	lsrs	r3, r3, #20
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008aa2:	f107 0310 	add.w	r3, r7, #16
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aaa:	f7ff f911 	bl	8007cd0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <HAL_RCC_MCOConfig+0x88>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	4903      	ldr	r1, [pc, #12]	; (8008ad0 <HAL_RCC_MCOConfig+0x88>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	608b      	str	r3, [r1, #8]
  }
}
 8008ac8:	bf00      	nop
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	40021000 	.word	0x40021000

08008ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008ada:	4b2c      	ldr	r3, [pc, #176]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 030c 	and.w	r3, r3, #12
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d102      	bne.n	8008aec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ae6:	4b2a      	ldr	r3, [pc, #168]	; (8008b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	e047      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008aec:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f003 030c 	and.w	r3, r3, #12
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d102      	bne.n	8008afe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008af8:	4b25      	ldr	r3, [pc, #148]	; (8008b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	e03e      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008afe:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f003 030c 	and.w	r3, r3, #12
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d136      	bne.n	8008b78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b0a:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	091b      	lsrs	r3, r3, #4
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d10c      	bne.n	8008b42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b28:	4a19      	ldr	r2, [pc, #100]	; (8008b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b30:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b32:	68d2      	ldr	r2, [r2, #12]
 8008b34:	0a12      	lsrs	r2, r2, #8
 8008b36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b3a:	fb02 f303 	mul.w	r3, r2, r3
 8008b3e:	617b      	str	r3, [r7, #20]
      break;
 8008b40:	e00c      	b.n	8008b5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b42:	4a13      	ldr	r2, [pc, #76]	; (8008b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b4c:	68d2      	ldr	r2, [r2, #12]
 8008b4e:	0a12      	lsrs	r2, r2, #8
 8008b50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008b54:	fb02 f303 	mul.w	r3, r2, r3
 8008b58:	617b      	str	r3, [r7, #20]
      break;
 8008b5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	0e5b      	lsrs	r3, r3, #25
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	3301      	adds	r3, #1
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	e001      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008b7c:	693b      	ldr	r3, [r7, #16]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40021000 	.word	0x40021000
 8008b90:	00f42400 	.word	0x00f42400

08008b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b98:	4b03      	ldr	r3, [pc, #12]	; (8008ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	200000d8 	.word	0x200000d8

08008bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008bb0:	f7ff fff0 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bc2:	5ccb      	ldrb	r3, [r1, r3]
 8008bc4:	f003 031f 	and.w	r3, r3, #31
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	0800eaec 	.word	0x0800eaec

08008bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bdc:	f7ff ffda 	bl	8008b94 <HAL_RCC_GetHCLKFreq>
 8008be0:	4602      	mov	r2, r0
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	0adb      	lsrs	r3, r3, #11
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	4904      	ldr	r1, [pc, #16]	; (8008c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bee:	5ccb      	ldrb	r3, [r1, r3]
 8008bf0:	f003 031f 	and.w	r3, r3, #31
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	0800eaec 	.word	0x0800eaec

08008c04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c0a:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c14:	4b1b      	ldr	r3, [pc, #108]	; (8008c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d10c      	bne.n	8008c42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c28:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c32:	68d2      	ldr	r2, [r2, #12]
 8008c34:	0a12      	lsrs	r2, r2, #8
 8008c36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c3a:	fb02 f303 	mul.w	r3, r2, r3
 8008c3e:	617b      	str	r3, [r7, #20]
    break;
 8008c40:	e00c      	b.n	8008c5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c42:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	4a0e      	ldr	r2, [pc, #56]	; (8008c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c4c:	68d2      	ldr	r2, [r2, #12]
 8008c4e:	0a12      	lsrs	r2, r2, #8
 8008c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
 8008c58:	617b      	str	r3, [r7, #20]
    break;
 8008c5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	0e5b      	lsrs	r3, r3, #25
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	3301      	adds	r3, #1
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008c76:	687b      	ldr	r3, [r7, #4]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	40021000 	.word	0x40021000
 8008c88:	00f42400 	.word	0x00f42400

08008c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c94:	2300      	movs	r3, #0
 8008c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c98:	2300      	movs	r3, #0
 8008c9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8098 	beq.w	8008dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008caa:	2300      	movs	r3, #0
 8008cac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cae:	4b43      	ldr	r3, [pc, #268]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cba:	4b40      	ldr	r3, [pc, #256]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	4a3f      	ldr	r2, [pc, #252]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008cc6:	4b3d      	ldr	r3, [pc, #244]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cce:	60bb      	str	r3, [r7, #8]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cd6:	4b3a      	ldr	r3, [pc, #232]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a39      	ldr	r2, [pc, #228]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ce2:	f7fb fe09 	bl	80048f8 <HAL_GetTick>
 8008ce6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce8:	e009      	b.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cea:	f7fb fe05 	bl	80048f8 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d902      	bls.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	74fb      	strb	r3, [r7, #19]
        break;
 8008cfc:	e005      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cfe:	4b30      	ldr	r3, [pc, #192]	; (8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0ef      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008d0a:	7cfb      	ldrb	r3, [r7, #19]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d159      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d10:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01e      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d019      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d2c:	4b23      	ldr	r3, [pc, #140]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d38:	4b20      	ldr	r3, [pc, #128]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3e:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d48:	4b1c      	ldr	r3, [pc, #112]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4e:	4a1b      	ldr	r2, [pc, #108]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d58:	4a18      	ldr	r2, [pc, #96]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6a:	f7fb fdc5 	bl	80048f8 <HAL_GetTick>
 8008d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d70:	e00b      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d72:	f7fb fdc1 	bl	80048f8 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d902      	bls.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	74fb      	strb	r3, [r7, #19]
            break;
 8008d88:	e006      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d8a:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0ec      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008d98:	7cfb      	ldrb	r3, [r7, #19]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10b      	bne.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dac:	4903      	ldr	r1, [pc, #12]	; (8008dbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008db4:	e008      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008db6:	7cfb      	ldrb	r3, [r7, #19]
 8008db8:	74bb      	strb	r3, [r7, #18]
 8008dba:	e005      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008dbc:	40021000 	.word	0x40021000
 8008dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc4:	7cfb      	ldrb	r3, [r7, #19]
 8008dc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008dc8:	7c7b      	ldrb	r3, [r7, #17]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d105      	bne.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008dce:	4ba6      	ldr	r3, [pc, #664]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd2:	4aa5      	ldr	r2, [pc, #660]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008de6:	4ba0      	ldr	r3, [pc, #640]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dec:	f023 0203 	bic.w	r2, r3, #3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	499c      	ldr	r1, [pc, #624]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e08:	4b97      	ldr	r3, [pc, #604]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	f023 020c 	bic.w	r2, r3, #12
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	4994      	ldr	r1, [pc, #592]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e2a:	4b8f      	ldr	r3, [pc, #572]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	498b      	ldr	r1, [pc, #556]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0308 	and.w	r3, r3, #8
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e4c:	4b86      	ldr	r3, [pc, #536]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	4983      	ldr	r1, [pc, #524]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e6e:	4b7e      	ldr	r3, [pc, #504]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	497a      	ldr	r1, [pc, #488]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e90:	4b75      	ldr	r3, [pc, #468]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	4972      	ldr	r1, [pc, #456]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eb2:	4b6d      	ldr	r3, [pc, #436]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	4969      	ldr	r1, [pc, #420]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ed4:	4b64      	ldr	r3, [pc, #400]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	4961      	ldr	r1, [pc, #388]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ef6:	4b5c      	ldr	r3, [pc, #368]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	4958      	ldr	r1, [pc, #352]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d015      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f18:	4b53      	ldr	r3, [pc, #332]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	4950      	ldr	r1, [pc, #320]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f36:	d105      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f38:	4b4b      	ldr	r3, [pc, #300]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4a4a      	ldr	r2, [pc, #296]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d015      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f50:	4b45      	ldr	r3, [pc, #276]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	4942      	ldr	r1, [pc, #264]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f6e:	d105      	bne.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f70:	4b3d      	ldr	r3, [pc, #244]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	4a3c      	ldr	r2, [pc, #240]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d015      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f88:	4b37      	ldr	r3, [pc, #220]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	4934      	ldr	r1, [pc, #208]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fa6:	d105      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fa8:	4b2f      	ldr	r3, [pc, #188]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4a2e      	ldr	r2, [pc, #184]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d015      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fc0:	4b29      	ldr	r3, [pc, #164]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fce:	4926      	ldr	r1, [pc, #152]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fde:	d105      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fe0:	4b21      	ldr	r3, [pc, #132]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	4a20      	ldr	r2, [pc, #128]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d015      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008ff8:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	4918      	ldr	r1, [pc, #96]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009016:	d105      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009018:	4b13      	ldr	r3, [pc, #76]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	4a12      	ldr	r2, [pc, #72]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800901e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d015      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009030:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	490a      	ldr	r1, [pc, #40]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800904e:	d105      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4a04      	ldr	r2, [pc, #16]	; (8009068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800905c:	7cbb      	ldrb	r3, [r7, #18]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	40021000 	.word	0x40021000

0800906c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e09d      	b.n	80091ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800908e:	d009      	beq.n	80090a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	61da      	str	r2, [r3, #28]
 8009096:	e005      	b.n	80090a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7fa fea2 	bl	8003e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090e4:	d902      	bls.n	80090ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	e002      	b.n	80090f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80090fa:	d007      	beq.n	800910c <HAL_SPI_Init+0xa0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009104:	d002      	beq.n	800910c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800911c:	431a      	orrs	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009144:	431a      	orrs	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914e:	ea42 0103 	orr.w	r1, r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009156:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	0c1b      	lsrs	r3, r3, #16
 8009168:	f003 0204 	and.w	r2, r3, #4
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009188:	ea42 0103 	orr.w	r1, r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69da      	ldr	r2, [r3, #28]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e16c      	b.n	80094be <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80091fa:	7dbb      	ldrb	r3, [r7, #22]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d00d      	beq.n	800921c <HAL_SPI_TransmitReceive_DMA+0x58>
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009206:	d106      	bne.n	8009216 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009210:	7dbb      	ldrb	r3, [r7, #22]
 8009212:	2b04      	cmp	r3, #4
 8009214:	d002      	beq.n	800921c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009216:	2302      	movs	r3, #2
 8009218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800921a:	e14b      	b.n	80094b4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d005      	beq.n	800922e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009228:	887b      	ldrh	r3, [r7, #2]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d102      	bne.n	8009234 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009232:	e13f      	b.n	80094b4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b04      	cmp	r3, #4
 800923e:	d003      	beq.n	8009248 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2205      	movs	r2, #5
 8009244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	887a      	ldrh	r2, [r7, #2]
 8009258:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	887a      	ldrh	r2, [r7, #2]
 800925e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	887a      	ldrh	r2, [r7, #2]
 800926a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	887a      	ldrh	r2, [r7, #2]
 8009272:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8009290:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800929a:	d908      	bls.n	80092ae <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092aa:	605a      	str	r2, [r3, #4]
 80092ac:	e06f      	b.n	800938e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092bc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c8:	d126      	bne.n	8009318 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10f      	bne.n	80092f6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092e4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	085b      	lsrs	r3, r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092f4:	e010      	b.n	8009318 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009304:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800930a:	b29b      	uxth	r3, r3
 800930c:	085b      	lsrs	r3, r3, #1
 800930e:	b29b      	uxth	r3, r3
 8009310:	3301      	adds	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009322:	d134      	bne.n	800938e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009332:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800933a:	b29b      	uxth	r3, r3
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d111      	bne.n	8009368 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009352:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800935a:	b29b      	uxth	r3, r3
 800935c:	085b      	lsrs	r3, r3, #1
 800935e:	b29a      	uxth	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009366:	e012      	b.n	800938e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009376:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800937e:	b29b      	uxth	r3, r3
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	b29b      	uxth	r3, r3
 8009384:	3301      	adds	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b04      	cmp	r3, #4
 8009398:	d108      	bne.n	80093ac <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939e:	4a4a      	ldr	r2, [pc, #296]	; (80094c8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a6:	4a49      	ldr	r2, [pc, #292]	; (80094cc <HAL_SPI_TransmitReceive_DMA+0x308>)
 80093a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80093aa:	e007      	b.n	80093bc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b0:	4a47      	ldr	r2, [pc, #284]	; (80094d0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	4a46      	ldr	r2, [pc, #280]	; (80094d4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c0:	4a45      	ldr	r2, [pc, #276]	; (80094d8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80093c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c8:	2200      	movs	r2, #0
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	4619      	mov	r1, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80093e6:	f7fd fb43 	bl	8006a70 <HAL_DMA_Start_IT>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f4:	f043 0210 	orr.w	r2, r3, #16
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009408:	e054      	b.n	80094b4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0201 	orr.w	r2, r2, #1
 8009418:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941e:	2200      	movs	r2, #0
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009426:	2200      	movs	r2, #0
 8009428:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	2200      	movs	r2, #0
 8009430:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009436:	2200      	movs	r2, #0
 8009438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	4619      	mov	r1, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009450:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009452:	f7fd fb0d 	bl	8006a70 <HAL_DMA_Start_IT>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009460:	f043 0210 	orr.w	r2, r3, #16
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009474:	e01e      	b.n	80094b4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b40      	cmp	r3, #64	; 0x40
 8009482:	d007      	beq.n	8009494 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009492:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0220 	orr.w	r2, r2, #32
 80094a2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0202 	orr.w	r2, r2, #2
 80094b2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	0800984d 	.word	0x0800984d
 80094cc:	08009715 	.word	0x08009715
 80094d0:	08009869 	.word	0x08009869
 80094d4:	080097bd 	.word	0x080097bd
 80094d8:	08009885 	.word	0x08009885

080094dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10e      	bne.n	800951c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
    return;
 800951a:	e0ce      	b.n	80096ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <HAL_SPI_IRQHandler+0x5e>
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
    return;
 8009538:	e0bf      	b.n	80096ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10a      	bne.n	800955a <HAL_SPI_IRQHandler+0x7e>
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d105      	bne.n	800955a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80b0 	beq.w	80096ba <HAL_SPI_IRQHandler+0x1de>
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 80aa 	beq.w	80096ba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d023      	beq.n	80095b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b03      	cmp	r3, #3
 800957a:	d011      	beq.n	80095a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009580:	f043 0204 	orr.w	r2, r3, #4
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	e00b      	b.n	80095b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095a0:	2300      	movs	r3, #0
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	693b      	ldr	r3, [r7, #16]
        return;
 80095b6:	e080      	b.n	80096ba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	f003 0320 	and.w	r3, r3, #32
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d014      	beq.n	80095ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c6:	f043 0201 	orr.w	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00c      	beq.n	8009610 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fa:	f043 0208 	orr.w	r2, r3, #8
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	60bb      	str	r3, [r7, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009614:	2b00      	cmp	r3, #0
 8009616:	d04f      	beq.n	80096b8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009626:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <HAL_SPI_IRQHandler+0x168>
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d034      	beq.n	80096ae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 0203 	bic.w	r2, r2, #3
 8009652:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009658:	2b00      	cmp	r3, #0
 800965a:	d011      	beq.n	8009680 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009660:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <HAL_SPI_IRQHandler+0x1e4>)
 8009662:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009668:	4618      	mov	r0, r3
 800966a:	f7fd fad5 	bl	8006c18 <HAL_DMA_Abort_IT>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009684:	2b00      	cmp	r3, #0
 8009686:	d016      	beq.n	80096b6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968c:	4a0c      	ldr	r2, [pc, #48]	; (80096c0 <HAL_SPI_IRQHandler+0x1e4>)
 800968e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	4618      	mov	r0, r3
 8009696:	f7fd fabf 	bl	8006c18 <HAL_DMA_Abort_IT>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80096ac:	e003      	b.n	80096b6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f826 	bl	8009700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80096b4:	e000      	b.n	80096b8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80096b6:	bf00      	nop
    return;
 80096b8:	bf00      	nop
  }
}
 80096ba:	3720      	adds	r7, #32
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	080098c5 	.word	0x080098c5

080096c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009722:	f7fb f8e9 	bl	80048f8 <HAL_GetTick>
 8009726:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b20      	cmp	r3, #32
 8009734:	d03c      	beq.n	80097b0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685a      	ldr	r2, [r3, #4]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0220 	bic.w	r2, r2, #32
 8009744:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10d      	bne.n	800976a <SPI_DMAReceiveCplt+0x56>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009756:	d108      	bne.n	800976a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0203 	bic.w	r2, r2, #3
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	e007      	b.n	800977a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	2164      	movs	r1, #100	; 0x64
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 f9d4 	bl	8009b2c <SPI_EndRxTransaction>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2220      	movs	r2, #32
 800978e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff ffa9 	bl	8009700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097ae:	e002      	b.n	80097b6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff ff87 	bl	80096c4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097ca:	f7fb f895 	bl	80048f8 <HAL_GetTick>
 80097ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d030      	beq.n	8009840 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f022 0220 	bic.w	r2, r2, #32
 80097ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	2164      	movs	r1, #100	; 0x64
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f9f2 	bl	8009bdc <SPI_EndRxTxTransaction>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009802:	f043 0220 	orr.w	r2, r3, #32
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0203 	bic.w	r2, r2, #3
 8009818:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff ff61 	bl	8009700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800983e:	e002      	b.n	8009846 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7f8 fc03 	bl	800204c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff ff3c 	bl	80096d8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff ff38 	bl	80096ec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0203 	bic.w	r2, r2, #3
 80098a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a6:	f043 0210 	orr.w	r2, r3, #16
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f7ff ff22 	bl	8009700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7ff ff0d 	bl	8009700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	4613      	mov	r3, r2
 80098fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009900:	f7fa fffa 	bl	80048f8 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4413      	add	r3, r2
 800990e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009910:	f7fa fff2 	bl	80048f8 <HAL_GetTick>
 8009914:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009916:	4b39      	ldr	r3, [pc, #228]	; (80099fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	015b      	lsls	r3, r3, #5
 800991c:	0d1b      	lsrs	r3, r3, #20
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009926:	e054      	b.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d050      	beq.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009930:	f7fa ffe2 	bl	80048f8 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	429a      	cmp	r2, r3
 800993e:	d902      	bls.n	8009946 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d13d      	bne.n	80099c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800995e:	d111      	bne.n	8009984 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009968:	d004      	beq.n	8009974 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009972:	d107      	bne.n	8009984 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800998c:	d10f      	bne.n	80099ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e017      	b.n	80099f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4013      	ands	r3, r2
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	429a      	cmp	r2, r3
 80099e0:	bf0c      	ite	eq
 80099e2:	2301      	moveq	r3, #1
 80099e4:	2300      	movne	r3, #0
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d19b      	bne.n	8009928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3720      	adds	r7, #32
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200000d8 	.word	0x200000d8

08009a00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a12:	f7fa ff71 	bl	80048f8 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	4413      	add	r3, r2
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009a22:	f7fa ff69 	bl	80048f8 <HAL_GetTick>
 8009a26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	330c      	adds	r3, #12
 8009a2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a30:	4b3d      	ldr	r3, [pc, #244]	; (8009b28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	00da      	lsls	r2, r3, #3
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	0d1b      	lsrs	r3, r3, #20
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
 8009a46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a48:	e060      	b.n	8009b0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a50:	d107      	bne.n	8009a62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a68:	d050      	beq.n	8009b0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a6a:	f7fa ff45 	bl	80048f8 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d902      	bls.n	8009a80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d13d      	bne.n	8009afc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a98:	d111      	bne.n	8009abe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa2:	d004      	beq.n	8009aae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aac:	d107      	bne.n	8009abe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac6:	d10f      	bne.n	8009ae8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ae6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e010      	b.n	8009b1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4013      	ands	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d196      	bne.n	8009a4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3728      	adds	r7, #40	; 0x28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200000d8 	.word	0x200000d8

08009b2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b40:	d111      	bne.n	8009b66 <SPI_EndRxTransaction+0x3a>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4a:	d004      	beq.n	8009b56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b54:	d107      	bne.n	8009b66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f7ff febd 	bl	80098f0 <SPI_WaitFlagStateUntilTimeout>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d007      	beq.n	8009b8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b80:	f043 0220 	orr.w	r2, r3, #32
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e023      	b.n	8009bd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b94:	d11d      	bne.n	8009bd2 <SPI_EndRxTransaction+0xa6>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9e:	d004      	beq.n	8009baa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba8:	d113      	bne.n	8009bd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff ff22 	bl	8009a00 <SPI_WaitFifoStateUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc6:	f043 0220 	orr.w	r2, r3, #32
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e000      	b.n	8009bd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7ff ff03 	bl	8009a00 <SPI_WaitFifoStateUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d007      	beq.n	8009c10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c04:	f043 0220 	orr.w	r2, r3, #32
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e027      	b.n	8009c60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff fe68 	bl	80098f0 <SPI_WaitFlagStateUntilTimeout>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d007      	beq.n	8009c36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c2a:	f043 0220 	orr.w	r2, r3, #32
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e014      	b.n	8009c60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fedc 	bl	8009a00 <SPI_WaitFifoStateUntilTimeout>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e000      	b.n	8009c60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e049      	b.n	8009d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fa fc28 	bl	80044e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f000 fe74 	bl	800a994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6a1a      	ldr	r2, [r3, #32]
 8009d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d28:	4013      	ands	r3, r2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10f      	bne.n	8009d4e <HAL_TIM_Base_Stop+0x38>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	f244 4344 	movw	r3, #17476	; 0x4444
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d107      	bne.n	8009d4e <HAL_TIM_Base_Stop+0x38>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0201 	bic.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d001      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e04a      	b.n	8009e12 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a21      	ldr	r2, [pc, #132]	; (8009e20 <HAL_TIM_Base_Start_IT+0xbc>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d018      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da6:	d013      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <HAL_TIM_Base_Start_IT+0xc0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00e      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1c      	ldr	r2, [pc, #112]	; (8009e28 <HAL_TIM_Base_Start_IT+0xc4>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1a      	ldr	r2, [pc, #104]	; (8009e2c <HAL_TIM_Base_Start_IT+0xc8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d004      	beq.n	8009dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <HAL_TIM_Base_Start_IT+0xcc>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d115      	bne.n	8009dfc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	4b17      	ldr	r3, [pc, #92]	; (8009e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	d015      	beq.n	8009e0e <HAL_TIM_Base_Start_IT+0xaa>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de8:	d011      	beq.n	8009e0e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0201 	orr.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfa:	e008      	b.n	8009e0e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e000      	b.n	8009e10 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40000400 	.word	0x40000400
 8009e28:	40000800 	.word	0x40000800
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	00010007 	.word	0x00010007

08009e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e049      	b.n	8009ede <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f841 	bl	8009ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f000 fd8c 	bl	800a994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b083      	sub	sp, #12
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <HAL_TIM_PWM_Start+0x24>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	bf14      	ite	ne
 8009f18:	2301      	movne	r3, #1
 8009f1a:	2300      	moveq	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	e03c      	b.n	8009f9a <HAL_TIM_PWM_Start+0x9e>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d109      	bne.n	8009f3a <HAL_TIM_PWM_Start+0x3e>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	bf14      	ite	ne
 8009f32:	2301      	movne	r3, #1
 8009f34:	2300      	moveq	r3, #0
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	e02f      	b.n	8009f9a <HAL_TIM_PWM_Start+0x9e>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d109      	bne.n	8009f54 <HAL_TIM_PWM_Start+0x58>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	bf14      	ite	ne
 8009f4c:	2301      	movne	r3, #1
 8009f4e:	2300      	moveq	r3, #0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	e022      	b.n	8009f9a <HAL_TIM_PWM_Start+0x9e>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b0c      	cmp	r3, #12
 8009f58:	d109      	bne.n	8009f6e <HAL_TIM_PWM_Start+0x72>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	bf14      	ite	ne
 8009f66:	2301      	movne	r3, #1
 8009f68:	2300      	moveq	r3, #0
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	e015      	b.n	8009f9a <HAL_TIM_PWM_Start+0x9e>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b10      	cmp	r3, #16
 8009f72:	d109      	bne.n	8009f88 <HAL_TIM_PWM_Start+0x8c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	bf14      	ite	ne
 8009f80:	2301      	movne	r3, #1
 8009f82:	2300      	moveq	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	e008      	b.n	8009f9a <HAL_TIM_PWM_Start+0x9e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	bf14      	ite	ne
 8009f94:	2301      	movne	r3, #1
 8009f96:	2300      	moveq	r3, #0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e097      	b.n	800a0d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d104      	bne.n	8009fb2 <HAL_TIM_PWM_Start+0xb6>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fb0:	e023      	b.n	8009ffa <HAL_TIM_PWM_Start+0xfe>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d104      	bne.n	8009fc2 <HAL_TIM_PWM_Start+0xc6>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fc0:	e01b      	b.n	8009ffa <HAL_TIM_PWM_Start+0xfe>
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d104      	bne.n	8009fd2 <HAL_TIM_PWM_Start+0xd6>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd0:	e013      	b.n	8009ffa <HAL_TIM_PWM_Start+0xfe>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b0c      	cmp	r3, #12
 8009fd6:	d104      	bne.n	8009fe2 <HAL_TIM_PWM_Start+0xe6>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fe0:	e00b      	b.n	8009ffa <HAL_TIM_PWM_Start+0xfe>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b10      	cmp	r3, #16
 8009fe6:	d104      	bne.n	8009ff2 <HAL_TIM_PWM_Start+0xf6>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ff0:	e003      	b.n	8009ffa <HAL_TIM_PWM_Start+0xfe>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2201      	movs	r2, #1
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	4618      	mov	r0, r3
 800a004:	f001 f8e8 	bl	800b1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a33      	ldr	r2, [pc, #204]	; (800a0dc <HAL_TIM_PWM_Start+0x1e0>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d013      	beq.n	800a03a <HAL_TIM_PWM_Start+0x13e>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a32      	ldr	r2, [pc, #200]	; (800a0e0 <HAL_TIM_PWM_Start+0x1e4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00e      	beq.n	800a03a <HAL_TIM_PWM_Start+0x13e>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a30      	ldr	r2, [pc, #192]	; (800a0e4 <HAL_TIM_PWM_Start+0x1e8>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d009      	beq.n	800a03a <HAL_TIM_PWM_Start+0x13e>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a2f      	ldr	r2, [pc, #188]	; (800a0e8 <HAL_TIM_PWM_Start+0x1ec>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d004      	beq.n	800a03a <HAL_TIM_PWM_Start+0x13e>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a2d      	ldr	r2, [pc, #180]	; (800a0ec <HAL_TIM_PWM_Start+0x1f0>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d101      	bne.n	800a03e <HAL_TIM_PWM_Start+0x142>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <HAL_TIM_PWM_Start+0x144>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a052:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a20      	ldr	r2, [pc, #128]	; (800a0dc <HAL_TIM_PWM_Start+0x1e0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d018      	beq.n	800a090 <HAL_TIM_PWM_Start+0x194>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a066:	d013      	beq.n	800a090 <HAL_TIM_PWM_Start+0x194>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a20      	ldr	r2, [pc, #128]	; (800a0f0 <HAL_TIM_PWM_Start+0x1f4>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00e      	beq.n	800a090 <HAL_TIM_PWM_Start+0x194>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1f      	ldr	r2, [pc, #124]	; (800a0f4 <HAL_TIM_PWM_Start+0x1f8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d009      	beq.n	800a090 <HAL_TIM_PWM_Start+0x194>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a17      	ldr	r2, [pc, #92]	; (800a0e0 <HAL_TIM_PWM_Start+0x1e4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d004      	beq.n	800a090 <HAL_TIM_PWM_Start+0x194>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a16      	ldr	r2, [pc, #88]	; (800a0e4 <HAL_TIM_PWM_Start+0x1e8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d115      	bne.n	800a0bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <HAL_TIM_PWM_Start+0x1fc>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d015      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x1d2>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a8:	d011      	beq.n	800a0ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e008      	b.n	800a0ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	40012c00 	.word	0x40012c00
 800a0e0:	40013400 	.word	0x40013400
 800a0e4:	40014000 	.word	0x40014000
 800a0e8:	40014400 	.word	0x40014400
 800a0ec:	40014800 	.word	0x40014800
 800a0f0:	40000400 	.word	0x40000400
 800a0f4:	40000800 	.word	0x40000800
 800a0f8:	00010007 	.word	0x00010007

0800a0fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f862 	bl	800b1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a3e      	ldr	r2, [pc, #248]	; (800a214 <HAL_TIM_PWM_Stop+0x118>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d013      	beq.n	800a146 <HAL_TIM_PWM_Stop+0x4a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a3d      	ldr	r2, [pc, #244]	; (800a218 <HAL_TIM_PWM_Stop+0x11c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d00e      	beq.n	800a146 <HAL_TIM_PWM_Stop+0x4a>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a3b      	ldr	r2, [pc, #236]	; (800a21c <HAL_TIM_PWM_Stop+0x120>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d009      	beq.n	800a146 <HAL_TIM_PWM_Stop+0x4a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a3a      	ldr	r2, [pc, #232]	; (800a220 <HAL_TIM_PWM_Stop+0x124>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d004      	beq.n	800a146 <HAL_TIM_PWM_Stop+0x4a>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a38      	ldr	r2, [pc, #224]	; (800a224 <HAL_TIM_PWM_Stop+0x128>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d101      	bne.n	800a14a <HAL_TIM_PWM_Stop+0x4e>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <HAL_TIM_PWM_Stop+0x50>
 800a14a:	2300      	movs	r3, #0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d017      	beq.n	800a180 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6a1a      	ldr	r2, [r3, #32]
 800a156:	f241 1311 	movw	r3, #4369	; 0x1111
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10f      	bne.n	800a180 <HAL_TIM_PWM_Stop+0x84>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	f244 4344 	movw	r3, #17476	; 0x4444
 800a16a:	4013      	ands	r3, r2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d107      	bne.n	800a180 <HAL_TIM_PWM_Stop+0x84>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a17e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a1a      	ldr	r2, [r3, #32]
 800a186:	f241 1311 	movw	r3, #4369	; 0x1111
 800a18a:	4013      	ands	r3, r2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10f      	bne.n	800a1b0 <HAL_TIM_PWM_Stop+0xb4>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6a1a      	ldr	r2, [r3, #32]
 800a196:	f244 4344 	movw	r3, #17476	; 0x4444
 800a19a:	4013      	ands	r3, r2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d107      	bne.n	800a1b0 <HAL_TIM_PWM_Stop+0xb4>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f022 0201 	bic.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <HAL_TIM_PWM_Stop+0xc4>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1be:	e023      	b.n	800a208 <HAL_TIM_PWM_Stop+0x10c>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	d104      	bne.n	800a1d0 <HAL_TIM_PWM_Stop+0xd4>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1ce:	e01b      	b.n	800a208 <HAL_TIM_PWM_Stop+0x10c>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b08      	cmp	r3, #8
 800a1d4:	d104      	bne.n	800a1e0 <HAL_TIM_PWM_Stop+0xe4>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1de:	e013      	b.n	800a208 <HAL_TIM_PWM_Stop+0x10c>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b0c      	cmp	r3, #12
 800a1e4:	d104      	bne.n	800a1f0 <HAL_TIM_PWM_Stop+0xf4>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1ee:	e00b      	b.n	800a208 <HAL_TIM_PWM_Stop+0x10c>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d104      	bne.n	800a200 <HAL_TIM_PWM_Stop+0x104>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1fe:	e003      	b.n	800a208 <HAL_TIM_PWM_Stop+0x10c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	40012c00 	.word	0x40012c00
 800a218:	40013400 	.word	0x40013400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800

0800a228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d122      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d11b      	bne.n	800a284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0202 	mvn.w	r2, #2
 800a254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f003 0303 	and.w	r3, r3, #3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fb74 	bl	800a958 <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fb66 	bl	800a944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fb77 	bl	800a96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f003 0304 	and.w	r3, r3, #4
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d122      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d11b      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f06f 0204 	mvn.w	r2, #4
 800a2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fb4a 	bl	800a958 <HAL_TIM_IC_CaptureCallback>
 800a2c4:	e005      	b.n	800a2d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fb3c 	bl	800a944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fb4d 	bl	800a96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d122      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d11b      	bne.n	800a32c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0208 	mvn.w	r2, #8
 800a2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2204      	movs	r2, #4
 800a302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f003 0303 	and.w	r3, r3, #3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fb20 	bl	800a958 <HAL_TIM_IC_CaptureCallback>
 800a318:	e005      	b.n	800a326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fb12 	bl	800a944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fb23 	bl	800a96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f003 0310 	and.w	r3, r3, #16
 800a336:	2b10      	cmp	r3, #16
 800a338:	d122      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b10      	cmp	r3, #16
 800a346:	d11b      	bne.n	800a380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f06f 0210 	mvn.w	r2, #16
 800a350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2208      	movs	r2, #8
 800a356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 faf6 	bl	800a958 <HAL_TIM_IC_CaptureCallback>
 800a36c:	e005      	b.n	800a37a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fae8 	bl	800a944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 faf9 	bl	800a96c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d10e      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d107      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f06f 0201 	mvn.w	r2, #1
 800a3a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7f7 ff4a 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b6:	2b80      	cmp	r3, #128	; 0x80
 800a3b8:	d10e      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d107      	bne.n	800a3d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 f964 	bl	800b6a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3e6:	d10e      	bne.n	800a406 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d107      	bne.n	800a406 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 f957 	bl	800b6b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d10e      	bne.n	800a432 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d107      	bne.n	800a432 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 faa7 	bl	800a980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	f003 0320 	and.w	r3, r3, #32
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d10e      	bne.n	800a45e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d107      	bne.n	800a45e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f06f 0220 	mvn.w	r2, #32
 800a456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f917 	bl	800b68c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a46c:	d10f      	bne.n	800a48e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a47c:	d107      	bne.n	800a48e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f91d 	bl	800b6c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a49c:	d10f      	bne.n	800a4be <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4ac:	d107      	bne.n	800a4be <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 f90f 	bl	800b6dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4cc:	d10f      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4dc:	d107      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f901 	bl	800b6f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4fc:	d10f      	bne.n	800a51e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a50c:	d107      	bne.n	800a51e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f8f3 	bl	800b704 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
	...

0800a528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a542:	2302      	movs	r3, #2
 800a544:	e0ff      	b.n	800a746 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b14      	cmp	r3, #20
 800a552:	f200 80f0 	bhi.w	800a736 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a737 	.word	0x0800a737
 800a564:	0800a737 	.word	0x0800a737
 800a568:	0800a737 	.word	0x0800a737
 800a56c:	0800a5f1 	.word	0x0800a5f1
 800a570:	0800a737 	.word	0x0800a737
 800a574:	0800a737 	.word	0x0800a737
 800a578:	0800a737 	.word	0x0800a737
 800a57c:	0800a633 	.word	0x0800a633
 800a580:	0800a737 	.word	0x0800a737
 800a584:	0800a737 	.word	0x0800a737
 800a588:	0800a737 	.word	0x0800a737
 800a58c:	0800a673 	.word	0x0800a673
 800a590:	0800a737 	.word	0x0800a737
 800a594:	0800a737 	.word	0x0800a737
 800a598:	0800a737 	.word	0x0800a737
 800a59c:	0800a6b5 	.word	0x0800a6b5
 800a5a0:	0800a737 	.word	0x0800a737
 800a5a4:	0800a737 	.word	0x0800a737
 800a5a8:	0800a737 	.word	0x0800a737
 800a5ac:	0800a6f5 	.word	0x0800a6f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fa7c 	bl	800aab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0208 	orr.w	r2, r2, #8
 800a5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0204 	bic.w	r2, r2, #4
 800a5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6999      	ldr	r1, [r3, #24]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	619a      	str	r2, [r3, #24]
      break;
 800a5ee:	e0a5      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 faec 	bl	800abd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6999      	ldr	r1, [r3, #24]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	021a      	lsls	r2, r3, #8
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	619a      	str	r2, [r3, #24]
      break;
 800a630:	e084      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fb55 	bl	800ace8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69da      	ldr	r2, [r3, #28]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0208 	orr.w	r2, r2, #8
 800a64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69da      	ldr	r2, [r3, #28]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0204 	bic.w	r2, r2, #4
 800a65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69d9      	ldr	r1, [r3, #28]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	61da      	str	r2, [r3, #28]
      break;
 800a670:	e064      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68b9      	ldr	r1, [r7, #8]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fbbd 	bl	800adf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69d9      	ldr	r1, [r3, #28]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	021a      	lsls	r2, r3, #8
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	61da      	str	r2, [r3, #28]
      break;
 800a6b2:	e043      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68b9      	ldr	r1, [r7, #8]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fc26 	bl	800af0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0208 	orr.w	r2, r2, #8
 800a6ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f022 0204 	bic.w	r2, r2, #4
 800a6de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	691a      	ldr	r2, [r3, #16]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a6f2:	e023      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fc6a 	bl	800afd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a70e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a71e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	021a      	lsls	r2, r3, #8
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a734:	e002      	b.n	800a73c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	75fb      	strb	r3, [r7, #23]
      break;
 800a73a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a744:	7dfb      	ldrb	r3, [r7, #23]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop

0800a750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a764:	2b01      	cmp	r3, #1
 800a766:	d101      	bne.n	800a76c <HAL_TIM_ConfigClockSource+0x1c>
 800a768:	2302      	movs	r3, #2
 800a76a:	e0de      	b.n	800a92a <HAL_TIM_ConfigClockSource+0x1da>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a78a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a78e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a63      	ldr	r2, [pc, #396]	; (800a934 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	f000 80a9 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a7ac:	4a61      	ldr	r2, [pc, #388]	; (800a934 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	f200 80ae 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7b4:	4a60      	ldr	r2, [pc, #384]	; (800a938 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	f000 80a1 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a7bc:	4a5e      	ldr	r2, [pc, #376]	; (800a938 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	f200 80a6 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7c4:	4a5d      	ldr	r2, [pc, #372]	; (800a93c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	f000 8099 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a7cc:	4a5b      	ldr	r2, [pc, #364]	; (800a93c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	f200 809e 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7d4:	4a5a      	ldr	r2, [pc, #360]	; (800a940 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	f000 8091 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a7dc:	4a58      	ldr	r2, [pc, #352]	; (800a940 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	f200 8096 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a7e8:	f000 8089 	beq.w	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a7ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a7f0:	f200 808e 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a7f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7f8:	d03e      	beq.n	800a878 <HAL_TIM_ConfigClockSource+0x128>
 800a7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7fe:	f200 8087 	bhi.w	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a806:	f000 8086 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1c6>
 800a80a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a80e:	d87f      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a810:	2b70      	cmp	r3, #112	; 0x70
 800a812:	d01a      	beq.n	800a84a <HAL_TIM_ConfigClockSource+0xfa>
 800a814:	2b70      	cmp	r3, #112	; 0x70
 800a816:	d87b      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a818:	2b60      	cmp	r3, #96	; 0x60
 800a81a:	d050      	beq.n	800a8be <HAL_TIM_ConfigClockSource+0x16e>
 800a81c:	2b60      	cmp	r3, #96	; 0x60
 800a81e:	d877      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a820:	2b50      	cmp	r3, #80	; 0x50
 800a822:	d03c      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x14e>
 800a824:	2b50      	cmp	r3, #80	; 0x50
 800a826:	d873      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a828:	2b40      	cmp	r3, #64	; 0x40
 800a82a:	d058      	beq.n	800a8de <HAL_TIM_ConfigClockSource+0x18e>
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	d86f      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a830:	2b30      	cmp	r3, #48	; 0x30
 800a832:	d064      	beq.n	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a834:	2b30      	cmp	r3, #48	; 0x30
 800a836:	d86b      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a838:	2b20      	cmp	r3, #32
 800a83a:	d060      	beq.n	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a83c:	2b20      	cmp	r3, #32
 800a83e:	d867      	bhi.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
 800a840:	2b00      	cmp	r3, #0
 800a842:	d05c      	beq.n	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a844:	2b10      	cmp	r3, #16
 800a846:	d05a      	beq.n	800a8fe <HAL_TIM_ConfigClockSource+0x1ae>
 800a848:	e062      	b.n	800a910 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6818      	ldr	r0, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	6899      	ldr	r1, [r3, #8]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f000 fc9d 	bl	800b198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a86c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	609a      	str	r2, [r3, #8]
      break;
 800a876:	e04f      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6818      	ldr	r0, [r3, #0]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	6899      	ldr	r1, [r3, #8]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f000 fc86 	bl	800b198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689a      	ldr	r2, [r3, #8]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a89a:	609a      	str	r2, [r3, #8]
      break;
 800a89c:	e03c      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	6859      	ldr	r1, [r3, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f000 fbf8 	bl	800b0a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2150      	movs	r1, #80	; 0x50
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fc51 	bl	800b15e <TIM_ITRx_SetConfig>
      break;
 800a8bc:	e02c      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6859      	ldr	r1, [r3, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f000 fc17 	bl	800b0fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2160      	movs	r1, #96	; 0x60
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fc41 	bl	800b15e <TIM_ITRx_SetConfig>
      break;
 800a8dc:	e01c      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6818      	ldr	r0, [r3, #0]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	6859      	ldr	r1, [r3, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f000 fbd8 	bl	800b0a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2140      	movs	r1, #64	; 0x40
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fc31 	bl	800b15e <TIM_ITRx_SetConfig>
      break;
 800a8fc:	e00c      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f000 fc28 	bl	800b15e <TIM_ITRx_SetConfig>
      break;
 800a90e:	e003      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	73fb      	strb	r3, [r7, #15]
      break;
 800a914:	e000      	b.n	800a918 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	00100070 	.word	0x00100070
 800a938:	00100040 	.word	0x00100040
 800a93c:	00100030 	.word	0x00100030
 800a940:	00100020 	.word	0x00100020

0800a944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a3c      	ldr	r2, [pc, #240]	; (800aa98 <TIM_Base_SetConfig+0x104>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00f      	beq.n	800a9cc <TIM_Base_SetConfig+0x38>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b2:	d00b      	beq.n	800a9cc <TIM_Base_SetConfig+0x38>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a39      	ldr	r2, [pc, #228]	; (800aa9c <TIM_Base_SetConfig+0x108>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d007      	beq.n	800a9cc <TIM_Base_SetConfig+0x38>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a38      	ldr	r2, [pc, #224]	; (800aaa0 <TIM_Base_SetConfig+0x10c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0x38>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a37      	ldr	r2, [pc, #220]	; (800aaa4 <TIM_Base_SetConfig+0x110>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d108      	bne.n	800a9de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a2d      	ldr	r2, [pc, #180]	; (800aa98 <TIM_Base_SetConfig+0x104>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d01b      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ec:	d017      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a2a      	ldr	r2, [pc, #168]	; (800aa9c <TIM_Base_SetConfig+0x108>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a29      	ldr	r2, [pc, #164]	; (800aaa0 <TIM_Base_SetConfig+0x10c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a28      	ldr	r2, [pc, #160]	; (800aaa4 <TIM_Base_SetConfig+0x110>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a27      	ldr	r2, [pc, #156]	; (800aaa8 <TIM_Base_SetConfig+0x114>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a26      	ldr	r2, [pc, #152]	; (800aaac <TIM_Base_SetConfig+0x118>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_Base_SetConfig+0x8a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a25      	ldr	r2, [pc, #148]	; (800aab0 <TIM_Base_SetConfig+0x11c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d108      	bne.n	800aa30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a10      	ldr	r2, [pc, #64]	; (800aa98 <TIM_Base_SetConfig+0x104>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00f      	beq.n	800aa7c <TIM_Base_SetConfig+0xe8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a11      	ldr	r2, [pc, #68]	; (800aaa4 <TIM_Base_SetConfig+0x110>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00b      	beq.n	800aa7c <TIM_Base_SetConfig+0xe8>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a10      	ldr	r2, [pc, #64]	; (800aaa8 <TIM_Base_SetConfig+0x114>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <TIM_Base_SetConfig+0xe8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a0f      	ldr	r2, [pc, #60]	; (800aaac <TIM_Base_SetConfig+0x118>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d003      	beq.n	800aa7c <TIM_Base_SetConfig+0xe8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a0e      	ldr	r2, [pc, #56]	; (800aab0 <TIM_Base_SetConfig+0x11c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d103      	bne.n	800aa84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	691a      	ldr	r2, [r3, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	615a      	str	r2, [r3, #20]
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40012c00 	.word	0x40012c00
 800aa9c:	40000400 	.word	0x40000400
 800aaa0:	40000800 	.word	0x40000800
 800aaa4:	40013400 	.word	0x40013400
 800aaa8:	40014000 	.word	0x40014000
 800aaac:	40014400 	.word	0x40014400
 800aab0:	40014800 	.word	0x40014800

0800aab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	f023 0201 	bic.w	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f023 0302 	bic.w	r3, r3, #2
 800ab00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a2c      	ldr	r2, [pc, #176]	; (800abc0 <TIM_OC1_SetConfig+0x10c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d00f      	beq.n	800ab34 <TIM_OC1_SetConfig+0x80>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a2b      	ldr	r2, [pc, #172]	; (800abc4 <TIM_OC1_SetConfig+0x110>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00b      	beq.n	800ab34 <TIM_OC1_SetConfig+0x80>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a2a      	ldr	r2, [pc, #168]	; (800abc8 <TIM_OC1_SetConfig+0x114>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d007      	beq.n	800ab34 <TIM_OC1_SetConfig+0x80>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a29      	ldr	r2, [pc, #164]	; (800abcc <TIM_OC1_SetConfig+0x118>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d003      	beq.n	800ab34 <TIM_OC1_SetConfig+0x80>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a28      	ldr	r2, [pc, #160]	; (800abd0 <TIM_OC1_SetConfig+0x11c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d10c      	bne.n	800ab4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f023 0308 	bic.w	r3, r3, #8
 800ab3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f023 0304 	bic.w	r3, r3, #4
 800ab4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a1b      	ldr	r2, [pc, #108]	; (800abc0 <TIM_OC1_SetConfig+0x10c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d00f      	beq.n	800ab76 <TIM_OC1_SetConfig+0xc2>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a1a      	ldr	r2, [pc, #104]	; (800abc4 <TIM_OC1_SetConfig+0x110>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d00b      	beq.n	800ab76 <TIM_OC1_SetConfig+0xc2>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a19      	ldr	r2, [pc, #100]	; (800abc8 <TIM_OC1_SetConfig+0x114>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d007      	beq.n	800ab76 <TIM_OC1_SetConfig+0xc2>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <TIM_OC1_SetConfig+0x118>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d003      	beq.n	800ab76 <TIM_OC1_SetConfig+0xc2>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <TIM_OC1_SetConfig+0x11c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d111      	bne.n	800ab9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	621a      	str	r2, [r3, #32]
}
 800abb4:	bf00      	nop
 800abb6:	371c      	adds	r7, #28
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr
 800abc0:	40012c00 	.word	0x40012c00
 800abc4:	40013400 	.word	0x40013400
 800abc8:	40014000 	.word	0x40014000
 800abcc:	40014400 	.word	0x40014400
 800abd0:	40014800 	.word	0x40014800

0800abd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	f023 0210 	bic.w	r2, r3, #16
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f023 0320 	bic.w	r3, r3, #32
 800ac22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	011b      	lsls	r3, r3, #4
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a28      	ldr	r2, [pc, #160]	; (800acd4 <TIM_OC2_SetConfig+0x100>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_OC2_SetConfig+0x6c>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a27      	ldr	r2, [pc, #156]	; (800acd8 <TIM_OC2_SetConfig+0x104>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d10d      	bne.n	800ac5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	011b      	lsls	r3, r3, #4
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a1d      	ldr	r2, [pc, #116]	; (800acd4 <TIM_OC2_SetConfig+0x100>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00f      	beq.n	800ac84 <TIM_OC2_SetConfig+0xb0>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1c      	ldr	r2, [pc, #112]	; (800acd8 <TIM_OC2_SetConfig+0x104>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00b      	beq.n	800ac84 <TIM_OC2_SetConfig+0xb0>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1b      	ldr	r2, [pc, #108]	; (800acdc <TIM_OC2_SetConfig+0x108>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <TIM_OC2_SetConfig+0xb0>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a1a      	ldr	r2, [pc, #104]	; (800ace0 <TIM_OC2_SetConfig+0x10c>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_OC2_SetConfig+0xb0>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a19      	ldr	r2, [pc, #100]	; (800ace4 <TIM_OC2_SetConfig+0x110>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d113      	bne.n	800acac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40012c00 	.word	0x40012c00
 800acd8:	40013400 	.word	0x40013400
 800acdc:	40014000 	.word	0x40014000
 800ace0:	40014400 	.word	0x40014400
 800ace4:	40014800 	.word	0x40014800

0800ace8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a27      	ldr	r2, [pc, #156]	; (800ade4 <TIM_OC3_SetConfig+0xfc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d003      	beq.n	800ad52 <TIM_OC3_SetConfig+0x6a>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a26      	ldr	r2, [pc, #152]	; (800ade8 <TIM_OC3_SetConfig+0x100>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d10d      	bne.n	800ad6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a1c      	ldr	r2, [pc, #112]	; (800ade4 <TIM_OC3_SetConfig+0xfc>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00f      	beq.n	800ad96 <TIM_OC3_SetConfig+0xae>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a1b      	ldr	r2, [pc, #108]	; (800ade8 <TIM_OC3_SetConfig+0x100>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00b      	beq.n	800ad96 <TIM_OC3_SetConfig+0xae>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a1a      	ldr	r2, [pc, #104]	; (800adec <TIM_OC3_SetConfig+0x104>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d007      	beq.n	800ad96 <TIM_OC3_SetConfig+0xae>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a19      	ldr	r2, [pc, #100]	; (800adf0 <TIM_OC3_SetConfig+0x108>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d003      	beq.n	800ad96 <TIM_OC3_SetConfig+0xae>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a18      	ldr	r2, [pc, #96]	; (800adf4 <TIM_OC3_SetConfig+0x10c>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d113      	bne.n	800adbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ada4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	621a      	str	r2, [r3, #32]
}
 800add8:	bf00      	nop
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	40012c00 	.word	0x40012c00
 800ade8:	40013400 	.word	0x40013400
 800adec:	40014000 	.word	0x40014000
 800adf0:	40014400 	.word	0x40014400
 800adf4:	40014800 	.word	0x40014800

0800adf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	031b      	lsls	r3, r3, #12
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a28      	ldr	r2, [pc, #160]	; (800aef8 <TIM_OC4_SetConfig+0x100>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d003      	beq.n	800ae64 <TIM_OC4_SetConfig+0x6c>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a27      	ldr	r2, [pc, #156]	; (800aefc <TIM_OC4_SetConfig+0x104>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d10d      	bne.n	800ae80 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	031b      	lsls	r3, r3, #12
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1d      	ldr	r2, [pc, #116]	; (800aef8 <TIM_OC4_SetConfig+0x100>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d00f      	beq.n	800aea8 <TIM_OC4_SetConfig+0xb0>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a1c      	ldr	r2, [pc, #112]	; (800aefc <TIM_OC4_SetConfig+0x104>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00b      	beq.n	800aea8 <TIM_OC4_SetConfig+0xb0>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a1b      	ldr	r2, [pc, #108]	; (800af00 <TIM_OC4_SetConfig+0x108>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d007      	beq.n	800aea8 <TIM_OC4_SetConfig+0xb0>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a1a      	ldr	r2, [pc, #104]	; (800af04 <TIM_OC4_SetConfig+0x10c>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d003      	beq.n	800aea8 <TIM_OC4_SetConfig+0xb0>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a19      	ldr	r2, [pc, #100]	; (800af08 <TIM_OC4_SetConfig+0x110>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d113      	bne.n	800aed0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aeb6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	019b      	lsls	r3, r3, #6
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	019b      	lsls	r3, r3, #6
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	621a      	str	r2, [r3, #32]
}
 800aeea:	bf00      	nop
 800aeec:	371c      	adds	r7, #28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40012c00 	.word	0x40012c00
 800aefc:	40013400 	.word	0x40013400
 800af00:	40014000 	.word	0x40014000
 800af04:	40014400 	.word	0x40014400
 800af08:	40014800 	.word	0x40014800

0800af0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800af50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	041b      	lsls	r3, r3, #16
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a17      	ldr	r2, [pc, #92]	; (800afc0 <TIM_OC5_SetConfig+0xb4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d00f      	beq.n	800af86 <TIM_OC5_SetConfig+0x7a>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a16      	ldr	r2, [pc, #88]	; (800afc4 <TIM_OC5_SetConfig+0xb8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00b      	beq.n	800af86 <TIM_OC5_SetConfig+0x7a>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a15      	ldr	r2, [pc, #84]	; (800afc8 <TIM_OC5_SetConfig+0xbc>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d007      	beq.n	800af86 <TIM_OC5_SetConfig+0x7a>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a14      	ldr	r2, [pc, #80]	; (800afcc <TIM_OC5_SetConfig+0xc0>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d003      	beq.n	800af86 <TIM_OC5_SetConfig+0x7a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <TIM_OC5_SetConfig+0xc4>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d109      	bne.n	800af9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	621a      	str	r2, [r3, #32]
}
 800afb4:	bf00      	nop
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	40012c00 	.word	0x40012c00
 800afc4:	40013400 	.word	0x40013400
 800afc8:	40014000 	.word	0x40014000
 800afcc:	40014400 	.word	0x40014400
 800afd0:	40014800 	.word	0x40014800

0800afd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	4313      	orrs	r3, r2
 800b012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b01a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	051b      	lsls	r3, r3, #20
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	4313      	orrs	r3, r2
 800b026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a18      	ldr	r2, [pc, #96]	; (800b08c <TIM_OC6_SetConfig+0xb8>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00f      	beq.n	800b050 <TIM_OC6_SetConfig+0x7c>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a17      	ldr	r2, [pc, #92]	; (800b090 <TIM_OC6_SetConfig+0xbc>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00b      	beq.n	800b050 <TIM_OC6_SetConfig+0x7c>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a16      	ldr	r2, [pc, #88]	; (800b094 <TIM_OC6_SetConfig+0xc0>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d007      	beq.n	800b050 <TIM_OC6_SetConfig+0x7c>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a15      	ldr	r2, [pc, #84]	; (800b098 <TIM_OC6_SetConfig+0xc4>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d003      	beq.n	800b050 <TIM_OC6_SetConfig+0x7c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a14      	ldr	r2, [pc, #80]	; (800b09c <TIM_OC6_SetConfig+0xc8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d109      	bne.n	800b064 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b056:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	029b      	lsls	r3, r3, #10
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	4313      	orrs	r3, r2
 800b062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	621a      	str	r2, [r3, #32]
}
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40013400 	.word	0x40013400
 800b094:	40014000 	.word	0x40014000
 800b098:	40014400 	.word	0x40014400
 800b09c:	40014800 	.word	0x40014800

0800b0a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	f023 0201 	bic.w	r2, r3, #1
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	011b      	lsls	r3, r3, #4
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f023 030a 	bic.w	r3, r3, #10
 800b0dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	621a      	str	r2, [r3, #32]
}
 800b0f2:	bf00      	nop
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b087      	sub	sp, #28
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	f023 0210 	bic.w	r2, r3, #16
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	031b      	lsls	r3, r3, #12
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4313      	orrs	r3, r2
 800b132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b13a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b15e:	b480      	push	{r7}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4313      	orrs	r3, r2
 800b180:	f043 0307 	orr.w	r3, r3, #7
 800b184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	609a      	str	r2, [r3, #8]
}
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	021a      	lsls	r2, r3, #8
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	609a      	str	r2, [r3, #8]
}
 800b1cc:	bf00      	nop
 800b1ce:	371c      	adds	r7, #28
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 031f 	and.w	r3, r3, #31
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a1a      	ldr	r2, [r3, #32]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	43db      	mvns	r3, r3
 800b1fa:	401a      	ands	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6a1a      	ldr	r2, [r3, #32]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f003 031f 	and.w	r3, r3, #31
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	fa01 f303 	lsl.w	r3, r1, r3
 800b210:	431a      	orrs	r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	621a      	str	r2, [r3, #32]
}
 800b216:	bf00      	nop
 800b218:	371c      	adds	r7, #28
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
	...

0800b224 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d109      	bne.n	800b248 <HAL_TIMEx_PWMN_Start+0x24>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	bf14      	ite	ne
 800b240:	2301      	movne	r3, #1
 800b242:	2300      	moveq	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	e022      	b.n	800b28e <HAL_TIMEx_PWMN_Start+0x6a>
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d109      	bne.n	800b262 <HAL_TIMEx_PWMN_Start+0x3e>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b01      	cmp	r3, #1
 800b258:	bf14      	ite	ne
 800b25a:	2301      	movne	r3, #1
 800b25c:	2300      	moveq	r3, #0
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	e015      	b.n	800b28e <HAL_TIMEx_PWMN_Start+0x6a>
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b08      	cmp	r3, #8
 800b266:	d109      	bne.n	800b27c <HAL_TIMEx_PWMN_Start+0x58>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b01      	cmp	r3, #1
 800b272:	bf14      	ite	ne
 800b274:	2301      	movne	r3, #1
 800b276:	2300      	moveq	r3, #0
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	e008      	b.n	800b28e <HAL_TIMEx_PWMN_Start+0x6a>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b01      	cmp	r3, #1
 800b286:	bf14      	ite	ne
 800b288:	2301      	movne	r3, #1
 800b28a:	2300      	moveq	r3, #0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e069      	b.n	800b36a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d104      	bne.n	800b2a6 <HAL_TIMEx_PWMN_Start+0x82>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2a4:	e013      	b.n	800b2ce <HAL_TIMEx_PWMN_Start+0xaa>
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b04      	cmp	r3, #4
 800b2aa:	d104      	bne.n	800b2b6 <HAL_TIMEx_PWMN_Start+0x92>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b4:	e00b      	b.n	800b2ce <HAL_TIMEx_PWMN_Start+0xaa>
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d104      	bne.n	800b2c6 <HAL_TIMEx_PWMN_Start+0xa2>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2c4:	e003      	b.n	800b2ce <HAL_TIMEx_PWMN_Start+0xaa>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2204      	movs	r2, #4
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fa1e 	bl	800b718 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a20      	ldr	r2, [pc, #128]	; (800b374 <HAL_TIMEx_PWMN_Start+0x150>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d018      	beq.n	800b328 <HAL_TIMEx_PWMN_Start+0x104>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fe:	d013      	beq.n	800b328 <HAL_TIMEx_PWMN_Start+0x104>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a1c      	ldr	r2, [pc, #112]	; (800b378 <HAL_TIMEx_PWMN_Start+0x154>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00e      	beq.n	800b328 <HAL_TIMEx_PWMN_Start+0x104>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a1b      	ldr	r2, [pc, #108]	; (800b37c <HAL_TIMEx_PWMN_Start+0x158>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d009      	beq.n	800b328 <HAL_TIMEx_PWMN_Start+0x104>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a19      	ldr	r2, [pc, #100]	; (800b380 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d004      	beq.n	800b328 <HAL_TIMEx_PWMN_Start+0x104>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a18      	ldr	r2, [pc, #96]	; (800b384 <HAL_TIMEx_PWMN_Start+0x160>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d115      	bne.n	800b354 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	4b16      	ldr	r3, [pc, #88]	; (800b388 <HAL_TIMEx_PWMN_Start+0x164>)
 800b330:	4013      	ands	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2b06      	cmp	r3, #6
 800b338:	d015      	beq.n	800b366 <HAL_TIMEx_PWMN_Start+0x142>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b340:	d011      	beq.n	800b366 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f042 0201 	orr.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b352:	e008      	b.n	800b366 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f042 0201 	orr.w	r2, r2, #1
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	e000      	b.n	800b368 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	40012c00 	.word	0x40012c00
 800b378:	40000400 	.word	0x40000400
 800b37c:	40000800 	.word	0x40000800
 800b380:	40013400 	.word	0x40013400
 800b384:	40014000 	.word	0x40014000
 800b388:	00010007 	.word	0x00010007

0800b38c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2200      	movs	r2, #0
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f9ba 	bl	800b718 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6a1a      	ldr	r2, [r3, #32]
 800b3aa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10f      	bne.n	800b3d4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6a1a      	ldr	r2, [r3, #32]
 800b3ba:	f244 4344 	movw	r3, #17476	; 0x4444
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d107      	bne.n	800b3d4 <HAL_TIMEx_PWMN_Stop+0x48>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6a1a      	ldr	r2, [r3, #32]
 800b3da:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10f      	bne.n	800b404 <HAL_TIMEx_PWMN_Stop+0x78>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a1a      	ldr	r2, [r3, #32]
 800b3ea:	f244 4344 	movw	r3, #17476	; 0x4444
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d107      	bne.n	800b404 <HAL_TIMEx_PWMN_Stop+0x78>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0201 	bic.w	r2, r2, #1
 800b402:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d104      	bne.n	800b414 <HAL_TIMEx_PWMN_Stop+0x88>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b412:	e013      	b.n	800b43c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b04      	cmp	r3, #4
 800b418:	d104      	bne.n	800b424 <HAL_TIMEx_PWMN_Stop+0x98>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b422:	e00b      	b.n	800b43c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b08      	cmp	r3, #8
 800b428:	d104      	bne.n	800b434 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b432:	e003      	b.n	800b43c <HAL_TIMEx_PWMN_Stop+0xb0>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d101      	bne.n	800b460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b45c:	2302      	movs	r3, #2
 800b45e:	e065      	b.n	800b52c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a2c      	ldr	r2, [pc, #176]	; (800b538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a2b      	ldr	r2, [pc, #172]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d108      	bne.n	800b4a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b49a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b4ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d018      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d6:	d013      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a18      	ldr	r2, [pc, #96]	; (800b540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00e      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a17      	ldr	r2, [pc, #92]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d009      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a12      	ldr	r2, [pc, #72]	; (800b53c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d004      	beq.n	800b500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a13      	ldr	r2, [pc, #76]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10c      	bne.n	800b51a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	4313      	orrs	r3, r2
 800b510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3714      	adds	r7, #20
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	40012c00 	.word	0x40012c00
 800b53c:	40013400 	.word	0x40013400
 800b540:	40000400 	.word	0x40000400
 800b544:	40000800 	.word	0x40000800
 800b548:	40014000 	.word	0x40014000

0800b54c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b560:	2b01      	cmp	r3, #1
 800b562:	d101      	bne.n	800b568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b564:	2302      	movs	r3, #2
 800b566:	e087      	b.n	800b678 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	699b      	ldr	r3, [r3, #24]
 800b5dc:	041b      	lsls	r3, r3, #16
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a27      	ldr	r2, [pc, #156]	; (800b684 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d004      	beq.n	800b5f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a25      	ldr	r2, [pc, #148]	; (800b688 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d106      	bne.n	800b604 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a1e      	ldr	r2, [pc, #120]	; (800b684 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d004      	beq.n	800b618 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a1d      	ldr	r2, [pc, #116]	; (800b688 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d126      	bne.n	800b666 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	051b      	lsls	r3, r3, #20
 800b624:	4313      	orrs	r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a0e      	ldr	r2, [pc, #56]	; (800b684 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d004      	beq.n	800b658 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a0d      	ldr	r2, [pc, #52]	; (800b688 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d106      	bne.n	800b666 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	4313      	orrs	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	40012c00 	.word	0x40012c00
 800b688:	40013400 	.word	0x40013400

0800b68c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b718:	b480      	push	{r7}
 800b71a:	b087      	sub	sp, #28
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	f003 031f 	and.w	r3, r3, #31
 800b72a:	2204      	movs	r2, #4
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1a      	ldr	r2, [r3, #32]
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	43db      	mvns	r3, r3
 800b73a:	401a      	ands	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1a      	ldr	r2, [r3, #32]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f003 031f 	and.w	r3, r3, #31
 800b74a:	6879      	ldr	r1, [r7, #4]
 800b74c:	fa01 f303 	lsl.w	r3, r1, r3
 800b750:	431a      	orrs	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	621a      	str	r2, [r3, #32]
}
 800b756:	bf00      	nop
 800b758:	371c      	adds	r7, #28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e042      	b.n	800b7fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7f8 ff9a 	bl	80046c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2224      	movs	r2, #36	; 0x24
 800b790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fc01 	bl	800bfac <UART_SetConfig>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d101      	bne.n	800b7b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e022      	b.n	800b7fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fec1 	bl	800c544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0201 	orr.w	r2, r2, #1
 800b7f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 ff48 	bl	800c688 <UART_CheckIdleState>
 800b7f8:	4603      	mov	r3, r0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08a      	sub	sp, #40	; 0x28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b818:	2b20      	cmp	r3, #32
 800b81a:	d17a      	bne.n	800b912 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <HAL_UART_Transmit_DMA+0x24>
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e073      	b.n	800b914 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_UART_Transmit_DMA+0x36>
 800b836:	2302      	movs	r3, #2
 800b838:	e06c      	b.n	800b914 <HAL_UART_Transmit_DMA+0x110>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	88fa      	ldrh	r2, [r7, #6]
 800b84c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	88fa      	ldrh	r2, [r7, #6]
 800b854:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2221      	movs	r2, #33	; 0x21
 800b864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02c      	beq.n	800b8ca <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b874:	4a29      	ldr	r2, [pc, #164]	; (800b91c <HAL_UART_Transmit_DMA+0x118>)
 800b876:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b87c:	4a28      	ldr	r2, [pc, #160]	; (800b920 <HAL_UART_Transmit_DMA+0x11c>)
 800b87e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b884:	4a27      	ldr	r2, [pc, #156]	; (800b924 <HAL_UART_Transmit_DMA+0x120>)
 800b886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b88c:	2200      	movs	r2, #0
 800b88e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b898:	4619      	mov	r1, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3328      	adds	r3, #40	; 0x28
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	88fb      	ldrh	r3, [r7, #6]
 800b8a4:	f7fb f8e4 	bl	8006a70 <HAL_DMA_Start_IT>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00d      	beq.n	800b8ca <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2210      	movs	r2, #16
 800b8b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e024      	b.n	800b914 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2240      	movs	r2, #64	; 0x40
 800b8d0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	623a      	str	r2, [r7, #32]
 800b8fc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	69f9      	ldr	r1, [r7, #28]
 800b900:	6a3a      	ldr	r2, [r7, #32]
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	61bb      	str	r3, [r7, #24]
   return(result);
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e5      	bne.n	800b8da <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	e000      	b.n	800b914 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b912:	2302      	movs	r3, #2
  }
}
 800b914:	4618      	mov	r0, r3
 800b916:	3728      	adds	r7, #40	; 0x28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0800c9fd 	.word	0x0800c9fd
 800b920:	0800ca97 	.word	0x0800ca97
 800b924:	0800cab3 	.word	0x0800cab3

0800b928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b0ba      	sub	sp, #232	; 0xe8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b94e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b952:	f640 030f 	movw	r3, #2063	; 0x80f
 800b956:	4013      	ands	r3, r2
 800b958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b95c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d11b      	bne.n	800b99c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b968:	f003 0320 	and.w	r3, r3, #32
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d015      	beq.n	800b99c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b974:	f003 0320 	and.w	r3, r3, #32
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d105      	bne.n	800b988 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b97c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d009      	beq.n	800b99c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f000 82d6 	beq.w	800bf3e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
      }
      return;
 800b99a:	e2d0      	b.n	800bf3e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b99c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 811f 	beq.w	800bbe4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b9a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b9aa:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <HAL_UART_IRQHandler+0x2b0>)
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b9b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b9b6:	4b89      	ldr	r3, [pc, #548]	; (800bbdc <HAL_UART_IRQHandler+0x2b4>)
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8112 	beq.w	800bbe4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d011      	beq.n	800b9f0 <HAL_UART_IRQHandler+0xc8>
 800b9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00b      	beq.n	800b9f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9e6:	f043 0201 	orr.w	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d011      	beq.n	800ba20 <HAL_UART_IRQHandler+0xf8>
 800b9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba16:	f043 0204 	orr.w	r2, r3, #4
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d011      	beq.n	800ba50 <HAL_UART_IRQHandler+0x128>
 800ba2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00b      	beq.n	800ba50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2204      	movs	r2, #4
 800ba3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba46:	f043 0202 	orr.w	r2, r3, #2
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d017      	beq.n	800ba8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d105      	bne.n	800ba74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba6c:	4b5a      	ldr	r3, [pc, #360]	; (800bbd8 <HAL_UART_IRQHandler+0x2b0>)
 800ba6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2208      	movs	r2, #8
 800ba7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba82:	f043 0208 	orr.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d012      	beq.n	800babe <HAL_UART_IRQHandler+0x196>
 800ba98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00c      	beq.n	800babe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bab4:	f043 0220 	orr.w	r2, r3, #32
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 823c 	beq.w	800bf42 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bace:	f003 0320 	and.w	r3, r3, #32
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d013      	beq.n	800bafe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d105      	bne.n	800baee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baea:	2b00      	cmp	r3, #0
 800baec:	d007      	beq.n	800bafe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb12:	2b40      	cmp	r3, #64	; 0x40
 800bb14:	d005      	beq.n	800bb22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d04f      	beq.n	800bbc2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 ff04 	bl	800c930 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb32:	2b40      	cmp	r3, #64	; 0x40
 800bb34:	d141      	bne.n	800bbba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb44:	e853 3f00 	ldrex	r3, [r3]
 800bb48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1d9      	bne.n	800bb36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d013      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8e:	4a14      	ldr	r2, [pc, #80]	; (800bbe0 <HAL_UART_IRQHandler+0x2b8>)
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fb f83e 	bl	8006c18 <HAL_DMA_Abort_IT>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d017      	beq.n	800bbd2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb0:	e00f      	b.n	800bbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9e4 	bl	800bf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb8:	e00b      	b.n	800bbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f9e0 	bl	800bf80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc0:	e007      	b.n	800bbd2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f9dc 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bbd0:	e1b7      	b.n	800bf42 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd2:	bf00      	nop
    return;
 800bbd4:	e1b5      	b.n	800bf42 <HAL_UART_IRQHandler+0x61a>
 800bbd6:	bf00      	nop
 800bbd8:	10000001 	.word	0x10000001
 800bbdc:	04000120 	.word	0x04000120
 800bbe0:	0800cb33 	.word	0x0800cb33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	f040 814a 	bne.w	800be82 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf2:	f003 0310 	and.w	r3, r3, #16
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f000 8143 	beq.w	800be82 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc00:	f003 0310 	and.w	r3, r3, #16
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 813c 	beq.w	800be82 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2210      	movs	r2, #16
 800bc10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1c:	2b40      	cmp	r3, #64	; 0x40
 800bc1e:	f040 80b5 	bne.w	800bd8c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8187 	beq.w	800bf46 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc42:	429a      	cmp	r2, r3
 800bc44:	f080 817f 	bcs.w	800bf46 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f040 8086 	bne.w	800bd70 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1da      	bne.n	800bc64 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcc0:	f023 0301 	bic.w	r3, r3, #1
 800bcc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3308      	adds	r3, #8
 800bcce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e1      	bne.n	800bcae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3308      	adds	r3, #8
 800bcf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcf4:	e853 3f00 	ldrex	r3, [r3]
 800bcf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3308      	adds	r3, #8
 800bd0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd16:	e841 2300 	strex	r3, r2, [r1]
 800bd1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1e3      	bne.n	800bcea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd38:	e853 3f00 	ldrex	r3, [r3]
 800bd3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd40:	f023 0310 	bic.w	r3, r3, #16
 800bd44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd52:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd5a:	e841 2300 	strex	r3, r2, [r1]
 800bd5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1e4      	bne.n	800bd30 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fa fefb 	bl	8006b66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f905 	bl	800bf94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd8a:	e0dc      	b.n	800bf46 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 80ce 	beq.w	800bf4a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bdae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 80c9 	beq.w	800bf4a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdda:	647b      	str	r3, [r7, #68]	; 0x44
 800bddc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bde0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bde2:	e841 2300 	strex	r3, r2, [r1]
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bde8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1e4      	bne.n	800bdb8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	e853 3f00 	ldrex	r3, [r3]
 800bdfc:	623b      	str	r3, [r7, #32]
   return(result);
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be04:	f023 0301 	bic.w	r3, r3, #1
 800be08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be16:	633a      	str	r2, [r7, #48]	; 0x30
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e1      	bne.n	800bdee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	e853 3f00 	ldrex	r3, [r3]
 800be4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f023 0310 	bic.w	r3, r3, #16
 800be52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be60:	61fb      	str	r3, [r7, #28]
 800be62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	69b9      	ldr	r1, [r7, #24]
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	617b      	str	r3, [r7, #20]
   return(result);
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e4      	bne.n	800be3e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be78:	4619      	mov	r1, r3
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f88a 	bl	800bf94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be80:	e063      	b.n	800bf4a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <HAL_UART_IRQHandler+0x584>
 800be8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d008      	beq.n	800beac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fe85 	bl	800cbb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beaa:	e051      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800beac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d014      	beq.n	800bee2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800beb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d105      	bne.n	800bed0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d008      	beq.n	800bee2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d03a      	beq.n	800bf4e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	4798      	blx	r3
    }
    return;
 800bee0:	e035      	b.n	800bf4e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <HAL_UART_IRQHandler+0x5da>
 800beee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fe2f 	bl	800cb5e <UART_EndTransmit_IT>
    return;
 800bf00:	e026      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <HAL_UART_IRQHandler+0x5fa>
 800bf0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fe5e 	bl	800cbdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf20:	e016      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d010      	beq.n	800bf50 <HAL_UART_IRQHandler+0x628>
 800bf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	da0c      	bge.n	800bf50 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fe46 	bl	800cbc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf3c:	e008      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
      return;
 800bf3e:	bf00      	nop
 800bf40:	e006      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
    return;
 800bf42:	bf00      	nop
 800bf44:	e004      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
      return;
 800bf46:	bf00      	nop
 800bf48:	e002      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
      return;
 800bf4a:	bf00      	nop
 800bf4c:	e000      	b.n	800bf50 <HAL_UART_IRQHandler+0x628>
    return;
 800bf4e:	bf00      	nop
  }
}
 800bf50:	37e8      	adds	r7, #232	; 0xe8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop

0800bf58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfb0:	b08c      	sub	sp, #48	; 0x30
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	689a      	ldr	r2, [r3, #8]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4bab      	ldr	r3, [pc, #684]	; (800c288 <UART_SetConfig+0x2dc>)
 800bfdc:	4013      	ands	r3, r2
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	6812      	ldr	r2, [r2, #0]
 800bfe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4aa0      	ldr	r2, [pc, #640]	; (800c28c <UART_SetConfig+0x2e0>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d004      	beq.n	800c018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c014:	4313      	orrs	r3, r2
 800c016:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c022:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	6812      	ldr	r2, [r2, #0]
 800c02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c02c:	430b      	orrs	r3, r1
 800c02e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	f023 010f 	bic.w	r1, r3, #15
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	430a      	orrs	r2, r1
 800c044:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a91      	ldr	r2, [pc, #580]	; (800c290 <UART_SetConfig+0x2e4>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d125      	bne.n	800c09c <UART_SetConfig+0xf0>
 800c050:	4b90      	ldr	r3, [pc, #576]	; (800c294 <UART_SetConfig+0x2e8>)
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c056:	f003 0303 	and.w	r3, r3, #3
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d81a      	bhi.n	800c094 <UART_SetConfig+0xe8>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <UART_SetConfig+0xb8>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c075 	.word	0x0800c075
 800c068:	0800c085 	.word	0x0800c085
 800c06c:	0800c07d 	.word	0x0800c07d
 800c070:	0800c08d 	.word	0x0800c08d
 800c074:	2301      	movs	r3, #1
 800c076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c07a:	e0d6      	b.n	800c22a <UART_SetConfig+0x27e>
 800c07c:	2302      	movs	r3, #2
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c082:	e0d2      	b.n	800c22a <UART_SetConfig+0x27e>
 800c084:	2304      	movs	r3, #4
 800c086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c08a:	e0ce      	b.n	800c22a <UART_SetConfig+0x27e>
 800c08c:	2308      	movs	r3, #8
 800c08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c092:	e0ca      	b.n	800c22a <UART_SetConfig+0x27e>
 800c094:	2310      	movs	r3, #16
 800c096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c09a:	e0c6      	b.n	800c22a <UART_SetConfig+0x27e>
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a7d      	ldr	r2, [pc, #500]	; (800c298 <UART_SetConfig+0x2ec>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d138      	bne.n	800c118 <UART_SetConfig+0x16c>
 800c0a6:	4b7b      	ldr	r3, [pc, #492]	; (800c294 <UART_SetConfig+0x2e8>)
 800c0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ac:	f003 030c 	and.w	r3, r3, #12
 800c0b0:	2b0c      	cmp	r3, #12
 800c0b2:	d82d      	bhi.n	800c110 <UART_SetConfig+0x164>
 800c0b4:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <UART_SetConfig+0x110>)
 800c0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ba:	bf00      	nop
 800c0bc:	0800c0f1 	.word	0x0800c0f1
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c101 	.word	0x0800c101
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c0f9 	.word	0x0800c0f9
 800c0e0:	0800c111 	.word	0x0800c111
 800c0e4:	0800c111 	.word	0x0800c111
 800c0e8:	0800c111 	.word	0x0800c111
 800c0ec:	0800c109 	.word	0x0800c109
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0f6:	e098      	b.n	800c22a <UART_SetConfig+0x27e>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0fe:	e094      	b.n	800c22a <UART_SetConfig+0x27e>
 800c100:	2304      	movs	r3, #4
 800c102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c106:	e090      	b.n	800c22a <UART_SetConfig+0x27e>
 800c108:	2308      	movs	r3, #8
 800c10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c10e:	e08c      	b.n	800c22a <UART_SetConfig+0x27e>
 800c110:	2310      	movs	r3, #16
 800c112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c116:	e088      	b.n	800c22a <UART_SetConfig+0x27e>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a5f      	ldr	r2, [pc, #380]	; (800c29c <UART_SetConfig+0x2f0>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d125      	bne.n	800c16e <UART_SetConfig+0x1c2>
 800c122:	4b5c      	ldr	r3, [pc, #368]	; (800c294 <UART_SetConfig+0x2e8>)
 800c124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c128:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c12c:	2b30      	cmp	r3, #48	; 0x30
 800c12e:	d016      	beq.n	800c15e <UART_SetConfig+0x1b2>
 800c130:	2b30      	cmp	r3, #48	; 0x30
 800c132:	d818      	bhi.n	800c166 <UART_SetConfig+0x1ba>
 800c134:	2b20      	cmp	r3, #32
 800c136:	d00a      	beq.n	800c14e <UART_SetConfig+0x1a2>
 800c138:	2b20      	cmp	r3, #32
 800c13a:	d814      	bhi.n	800c166 <UART_SetConfig+0x1ba>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <UART_SetConfig+0x19a>
 800c140:	2b10      	cmp	r3, #16
 800c142:	d008      	beq.n	800c156 <UART_SetConfig+0x1aa>
 800c144:	e00f      	b.n	800c166 <UART_SetConfig+0x1ba>
 800c146:	2300      	movs	r3, #0
 800c148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c14c:	e06d      	b.n	800c22a <UART_SetConfig+0x27e>
 800c14e:	2302      	movs	r3, #2
 800c150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c154:	e069      	b.n	800c22a <UART_SetConfig+0x27e>
 800c156:	2304      	movs	r3, #4
 800c158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c15c:	e065      	b.n	800c22a <UART_SetConfig+0x27e>
 800c15e:	2308      	movs	r3, #8
 800c160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c164:	e061      	b.n	800c22a <UART_SetConfig+0x27e>
 800c166:	2310      	movs	r3, #16
 800c168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c16c:	e05d      	b.n	800c22a <UART_SetConfig+0x27e>
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a4b      	ldr	r2, [pc, #300]	; (800c2a0 <UART_SetConfig+0x2f4>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d125      	bne.n	800c1c4 <UART_SetConfig+0x218>
 800c178:	4b46      	ldr	r3, [pc, #280]	; (800c294 <UART_SetConfig+0x2e8>)
 800c17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c182:	2bc0      	cmp	r3, #192	; 0xc0
 800c184:	d016      	beq.n	800c1b4 <UART_SetConfig+0x208>
 800c186:	2bc0      	cmp	r3, #192	; 0xc0
 800c188:	d818      	bhi.n	800c1bc <UART_SetConfig+0x210>
 800c18a:	2b80      	cmp	r3, #128	; 0x80
 800c18c:	d00a      	beq.n	800c1a4 <UART_SetConfig+0x1f8>
 800c18e:	2b80      	cmp	r3, #128	; 0x80
 800c190:	d814      	bhi.n	800c1bc <UART_SetConfig+0x210>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <UART_SetConfig+0x1f0>
 800c196:	2b40      	cmp	r3, #64	; 0x40
 800c198:	d008      	beq.n	800c1ac <UART_SetConfig+0x200>
 800c19a:	e00f      	b.n	800c1bc <UART_SetConfig+0x210>
 800c19c:	2300      	movs	r3, #0
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1a2:	e042      	b.n	800c22a <UART_SetConfig+0x27e>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1aa:	e03e      	b.n	800c22a <UART_SetConfig+0x27e>
 800c1ac:	2304      	movs	r3, #4
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b2:	e03a      	b.n	800c22a <UART_SetConfig+0x27e>
 800c1b4:	2308      	movs	r3, #8
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ba:	e036      	b.n	800c22a <UART_SetConfig+0x27e>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c2:	e032      	b.n	800c22a <UART_SetConfig+0x27e>
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a30      	ldr	r2, [pc, #192]	; (800c28c <UART_SetConfig+0x2e0>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d12a      	bne.n	800c224 <UART_SetConfig+0x278>
 800c1ce:	4b31      	ldr	r3, [pc, #196]	; (800c294 <UART_SetConfig+0x2e8>)
 800c1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c1d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1dc:	d01a      	beq.n	800c214 <UART_SetConfig+0x268>
 800c1de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1e2:	d81b      	bhi.n	800c21c <UART_SetConfig+0x270>
 800c1e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1e8:	d00c      	beq.n	800c204 <UART_SetConfig+0x258>
 800c1ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1ee:	d815      	bhi.n	800c21c <UART_SetConfig+0x270>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d003      	beq.n	800c1fc <UART_SetConfig+0x250>
 800c1f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1f8:	d008      	beq.n	800c20c <UART_SetConfig+0x260>
 800c1fa:	e00f      	b.n	800c21c <UART_SetConfig+0x270>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c202:	e012      	b.n	800c22a <UART_SetConfig+0x27e>
 800c204:	2302      	movs	r3, #2
 800c206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c20a:	e00e      	b.n	800c22a <UART_SetConfig+0x27e>
 800c20c:	2304      	movs	r3, #4
 800c20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c212:	e00a      	b.n	800c22a <UART_SetConfig+0x27e>
 800c214:	2308      	movs	r3, #8
 800c216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c21a:	e006      	b.n	800c22a <UART_SetConfig+0x27e>
 800c21c:	2310      	movs	r3, #16
 800c21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c222:	e002      	b.n	800c22a <UART_SetConfig+0x27e>
 800c224:	2310      	movs	r3, #16
 800c226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a17      	ldr	r2, [pc, #92]	; (800c28c <UART_SetConfig+0x2e0>)
 800c230:	4293      	cmp	r3, r2
 800c232:	f040 80a8 	bne.w	800c386 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c23a:	2b08      	cmp	r3, #8
 800c23c:	d834      	bhi.n	800c2a8 <UART_SetConfig+0x2fc>
 800c23e:	a201      	add	r2, pc, #4	; (adr r2, 800c244 <UART_SetConfig+0x298>)
 800c240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c244:	0800c269 	.word	0x0800c269
 800c248:	0800c2a9 	.word	0x0800c2a9
 800c24c:	0800c271 	.word	0x0800c271
 800c250:	0800c2a9 	.word	0x0800c2a9
 800c254:	0800c277 	.word	0x0800c277
 800c258:	0800c2a9 	.word	0x0800c2a9
 800c25c:	0800c2a9 	.word	0x0800c2a9
 800c260:	0800c2a9 	.word	0x0800c2a9
 800c264:	0800c27f 	.word	0x0800c27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c268:	f7fc fca0 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800c26c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c26e:	e021      	b.n	800c2b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c270:	4b0c      	ldr	r3, [pc, #48]	; (800c2a4 <UART_SetConfig+0x2f8>)
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c274:	e01e      	b.n	800c2b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c276:	f7fc fc2d 	bl	8008ad4 <HAL_RCC_GetSysClockFreq>
 800c27a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c27c:	e01a      	b.n	800c2b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c284:	e016      	b.n	800c2b4 <UART_SetConfig+0x308>
 800c286:	bf00      	nop
 800c288:	cfff69f3 	.word	0xcfff69f3
 800c28c:	40008000 	.word	0x40008000
 800c290:	40013800 	.word	0x40013800
 800c294:	40021000 	.word	0x40021000
 800c298:	40004400 	.word	0x40004400
 800c29c:	40004800 	.word	0x40004800
 800c2a0:	40004c00 	.word	0x40004c00
 800c2a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c2b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 812a 	beq.w	800c510 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c0:	4a9e      	ldr	r2, [pc, #632]	; (800c53c <UART_SetConfig+0x590>)
 800c2c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d305      	bcc.n	800c2ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2e6:	69ba      	ldr	r2, [r7, #24]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d903      	bls.n	800c2f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c2f2:	e10d      	b.n	800c510 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	60bb      	str	r3, [r7, #8]
 800c2fa:	60fa      	str	r2, [r7, #12]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c300:	4a8e      	ldr	r2, [pc, #568]	; (800c53c <UART_SetConfig+0x590>)
 800c302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c306:	b29b      	uxth	r3, r3
 800c308:	2200      	movs	r2, #0
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c312:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c316:	f7f4 fcbf 	bl	8000c98 <__aeabi_uldivmod>
 800c31a:	4602      	mov	r2, r0
 800c31c:	460b      	mov	r3, r1
 800c31e:	4610      	mov	r0, r2
 800c320:	4619      	mov	r1, r3
 800c322:	f04f 0200 	mov.w	r2, #0
 800c326:	f04f 0300 	mov.w	r3, #0
 800c32a:	020b      	lsls	r3, r1, #8
 800c32c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c330:	0202      	lsls	r2, r0, #8
 800c332:	6979      	ldr	r1, [r7, #20]
 800c334:	6849      	ldr	r1, [r1, #4]
 800c336:	0849      	lsrs	r1, r1, #1
 800c338:	2000      	movs	r0, #0
 800c33a:	460c      	mov	r4, r1
 800c33c:	4605      	mov	r5, r0
 800c33e:	eb12 0804 	adds.w	r8, r2, r4
 800c342:	eb43 0905 	adc.w	r9, r3, r5
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	469a      	mov	sl, r3
 800c34e:	4693      	mov	fp, r2
 800c350:	4652      	mov	r2, sl
 800c352:	465b      	mov	r3, fp
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 fc9e 	bl	8000c98 <__aeabi_uldivmod>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4613      	mov	r3, r2
 800c362:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c36a:	d308      	bcc.n	800c37e <UART_SetConfig+0x3d2>
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c372:	d204      	bcs.n	800c37e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6a3a      	ldr	r2, [r7, #32]
 800c37a:	60da      	str	r2, [r3, #12]
 800c37c:	e0c8      	b.n	800c510 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c384:	e0c4      	b.n	800c510 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c38e:	d167      	bne.n	800c460 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c394:	2b08      	cmp	r3, #8
 800c396:	d828      	bhi.n	800c3ea <UART_SetConfig+0x43e>
 800c398:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <UART_SetConfig+0x3f4>)
 800c39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39e:	bf00      	nop
 800c3a0:	0800c3c5 	.word	0x0800c3c5
 800c3a4:	0800c3cd 	.word	0x0800c3cd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	0800c3eb 	.word	0x0800c3eb
 800c3b0:	0800c3db 	.word	0x0800c3db
 800c3b4:	0800c3eb 	.word	0x0800c3eb
 800c3b8:	0800c3eb 	.word	0x0800c3eb
 800c3bc:	0800c3eb 	.word	0x0800c3eb
 800c3c0:	0800c3e3 	.word	0x0800c3e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3c4:	f7fc fbf2 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800c3c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c3ca:	e014      	b.n	800c3f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3cc:	f7fc fc04 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 800c3d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c3d2:	e010      	b.n	800c3f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c3d4:	4b5a      	ldr	r3, [pc, #360]	; (800c540 <UART_SetConfig+0x594>)
 800c3d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c3d8:	e00d      	b.n	800c3f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c3da:	f7fc fb7b 	bl	8008ad4 <HAL_RCC_GetSysClockFreq>
 800c3de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c3e0:	e009      	b.n	800c3f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c3e8:	e005      	b.n	800c3f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c3f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 8089 	beq.w	800c510 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c402:	4a4e      	ldr	r2, [pc, #312]	; (800c53c <UART_SetConfig+0x590>)
 800c404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c408:	461a      	mov	r2, r3
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c410:	005a      	lsls	r2, r3, #1
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	085b      	lsrs	r3, r3, #1
 800c418:	441a      	add	r2, r3
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c422:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	2b0f      	cmp	r3, #15
 800c428:	d916      	bls.n	800c458 <UART_SetConfig+0x4ac>
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c430:	d212      	bcs.n	800c458 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	b29b      	uxth	r3, r3
 800c436:	f023 030f 	bic.w	r3, r3, #15
 800c43a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	085b      	lsrs	r3, r3, #1
 800c440:	b29b      	uxth	r3, r3
 800c442:	f003 0307 	and.w	r3, r3, #7
 800c446:	b29a      	uxth	r2, r3
 800c448:	8bfb      	ldrh	r3, [r7, #30]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	8bfa      	ldrh	r2, [r7, #30]
 800c454:	60da      	str	r2, [r3, #12]
 800c456:	e05b      	b.n	800c510 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c45e:	e057      	b.n	800c510 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c464:	2b08      	cmp	r3, #8
 800c466:	d828      	bhi.n	800c4ba <UART_SetConfig+0x50e>
 800c468:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <UART_SetConfig+0x4c4>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c495 	.word	0x0800c495
 800c474:	0800c49d 	.word	0x0800c49d
 800c478:	0800c4a5 	.word	0x0800c4a5
 800c47c:	0800c4bb 	.word	0x0800c4bb
 800c480:	0800c4ab 	.word	0x0800c4ab
 800c484:	0800c4bb 	.word	0x0800c4bb
 800c488:	0800c4bb 	.word	0x0800c4bb
 800c48c:	0800c4bb 	.word	0x0800c4bb
 800c490:	0800c4b3 	.word	0x0800c4b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c494:	f7fc fb8a 	bl	8008bac <HAL_RCC_GetPCLK1Freq>
 800c498:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c49a:	e014      	b.n	800c4c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c49c:	f7fc fb9c 	bl	8008bd8 <HAL_RCC_GetPCLK2Freq>
 800c4a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4a2:	e010      	b.n	800c4c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4a4:	4b26      	ldr	r3, [pc, #152]	; (800c540 <UART_SetConfig+0x594>)
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4a8:	e00d      	b.n	800c4c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4aa:	f7fc fb13 	bl	8008ad4 <HAL_RCC_GetSysClockFreq>
 800c4ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4b0:	e009      	b.n	800c4c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4b8:	e005      	b.n	800c4c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c4c4:	bf00      	nop
    }

    if (pclk != 0U)
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d021      	beq.n	800c510 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d0:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <UART_SetConfig+0x590>)
 800c4d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	085b      	lsrs	r3, r3, #1
 800c4e4:	441a      	add	r2, r3
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	2b0f      	cmp	r3, #15
 800c4f4:	d909      	bls.n	800c50a <UART_SetConfig+0x55e>
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fc:	d205      	bcs.n	800c50a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	b29a      	uxth	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	60da      	str	r2, [r3, #12]
 800c508:	e002      	b.n	800c510 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2201      	movs	r2, #1
 800c514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	2200      	movs	r2, #0
 800c524:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2200      	movs	r2, #0
 800c52a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c52c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c530:	4618      	mov	r0, r3
 800c532:	3730      	adds	r7, #48	; 0x30
 800c534:	46bd      	mov	sp, r7
 800c536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c53a:	bf00      	nop
 800c53c:	0800eb04 	.word	0x0800eb04
 800c540:	00f42400 	.word	0x00f42400

0800c544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	f003 0302 	and.w	r3, r3, #2
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0308 	and.w	r3, r3, #8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0310 	and.w	r3, r3, #16
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	f003 0320 	and.w	r3, r3, #32
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00a      	beq.n	800c618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01a      	beq.n	800c65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	430a      	orrs	r2, r1
 800c638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c642:	d10a      	bne.n	800c65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	430a      	orrs	r2, r1
 800c658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00a      	beq.n	800c67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	430a      	orrs	r2, r1
 800c67a:	605a      	str	r2, [r3, #4]
  }
}
 800c67c:	bf00      	nop
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c698:	f7f8 f92e 	bl	80048f8 <HAL_GetTick>
 800c69c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	d10e      	bne.n	800c6ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f82f 	bl	800c71e <UART_WaitOnFlagUntilTimeout>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d001      	beq.n	800c6ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e025      	b.n	800c716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b04      	cmp	r3, #4
 800c6d6:	d10e      	bne.n	800c6f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6dc:	9300      	str	r3, [sp, #0]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f819 	bl	800c71e <UART_WaitOnFlagUntilTimeout>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	e00f      	b.n	800c716 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2220      	movs	r2, #32
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b09c      	sub	sp, #112	; 0x70
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	603b      	str	r3, [r7, #0]
 800c72a:	4613      	mov	r3, r2
 800c72c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c72e:	e0a9      	b.n	800c884 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	f000 80a5 	beq.w	800c884 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c73a:	f7f8 f8dd 	bl	80048f8 <HAL_GetTick>
 800c73e:	4602      	mov	r2, r0
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c746:	429a      	cmp	r2, r3
 800c748:	d302      	bcc.n	800c750 <UART_WaitOnFlagUntilTimeout+0x32>
 800c74a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d140      	bne.n	800c7d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c760:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c764:	667b      	str	r3, [r7, #100]	; 0x64
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c76e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c770:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c772:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c776:	e841 2300 	strex	r3, r2, [r1]
 800c77a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1e6      	bne.n	800c750 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3308      	adds	r3, #8
 800c788:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c78c:	e853 3f00 	ldrex	r3, [r3]
 800c790:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	f023 0301 	bic.w	r3, r3, #1
 800c798:	663b      	str	r3, [r7, #96]	; 0x60
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	3308      	adds	r3, #8
 800c7a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c7a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7aa:	e841 2300 	strex	r3, r2, [r1]
 800c7ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1e5      	bne.n	800c782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e069      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 0304 	and.w	r3, r3, #4
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d051      	beq.n	800c884 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7ee:	d149      	bne.n	800c884 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	e853 3f00 	ldrex	r3, [r3]
 800c806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c80e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c818:	637b      	str	r3, [r7, #52]	; 0x34
 800c81a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c820:	e841 2300 	strex	r3, r2, [r1]
 800c824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1e6      	bne.n	800c7fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3308      	adds	r3, #8
 800c832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	e853 3f00 	ldrex	r3, [r3]
 800c83a:	613b      	str	r3, [r7, #16]
   return(result);
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f023 0301 	bic.w	r3, r3, #1
 800c842:	66bb      	str	r3, [r7, #104]	; 0x68
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3308      	adds	r3, #8
 800c84a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c84c:	623a      	str	r2, [r7, #32]
 800c84e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c850:	69f9      	ldr	r1, [r7, #28]
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	61bb      	str	r3, [r7, #24]
   return(result);
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e5      	bne.n	800c82c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2220      	movs	r2, #32
 800c86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e010      	b.n	800c8a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	69da      	ldr	r2, [r3, #28]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	4013      	ands	r3, r2
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	429a      	cmp	r2, r3
 800c892:	bf0c      	ite	eq
 800c894:	2301      	moveq	r3, #1
 800c896:	2300      	movne	r3, #0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	79fb      	ldrb	r3, [r7, #7]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	f43f af46 	beq.w	800c730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3770      	adds	r7, #112	; 0x70
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b08f      	sub	sp, #60	; 0x3c
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	e853 3f00 	ldrex	r3, [r3]
 800c8c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8dc:	e841 2300 	strex	r3, r2, [r1]
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e6      	bne.n	800c8b6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c908:	61ba      	str	r2, [r7, #24]
 800c90a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	69ba      	ldr	r2, [r7, #24]
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	613b      	str	r3, [r7, #16]
   return(result);
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e5      	bne.n	800c8e8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2220      	movs	r2, #32
 800c920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c924:	bf00      	nop
 800c926:	373c      	adds	r7, #60	; 0x3c
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c930:	b480      	push	{r7}
 800c932:	b095      	sub	sp, #84	; 0x54
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c94c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c956:	643b      	str	r3, [r7, #64]	; 0x40
 800c958:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c95c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c95e:	e841 2300 	strex	r3, r2, [r1]
 800c962:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1e6      	bne.n	800c938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3308      	adds	r3, #8
 800c970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	e853 3f00 	ldrex	r3, [r3]
 800c978:	61fb      	str	r3, [r7, #28]
   return(result);
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c980:	f023 0301 	bic.w	r3, r3, #1
 800c984:	64bb      	str	r3, [r7, #72]	; 0x48
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3308      	adds	r3, #8
 800c98c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c98e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e3      	bne.n	800c96a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d118      	bne.n	800c9dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	e853 3f00 	ldrex	r3, [r3]
 800c9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f023 0310 	bic.w	r3, r3, #16
 800c9be:	647b      	str	r3, [r7, #68]	; 0x44
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c8:	61bb      	str	r3, [r7, #24]
 800c9ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	69ba      	ldr	r2, [r7, #24]
 800c9d0:	e841 2300 	strex	r3, r2, [r1]
 800c9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e6      	bne.n	800c9aa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2220      	movs	r2, #32
 800c9e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c9f0:	bf00      	nop
 800c9f2:	3754      	adds	r7, #84	; 0x54
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b090      	sub	sp, #64	; 0x40
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d137      	bne.n	800ca88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ca18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3308      	adds	r3, #8
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	e853 3f00 	ldrex	r3, [r3]
 800ca2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca40:	633a      	str	r2, [r7, #48]	; 0x30
 800ca42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca48:	e841 2300 	strex	r3, r2, [r1]
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e5      	bne.n	800ca20 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca68:	637b      	str	r3, [r7, #52]	; 0x34
 800ca6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca72:	61fb      	str	r3, [r7, #28]
 800ca74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca76:	69b9      	ldr	r1, [r7, #24]
 800ca78:	69fa      	ldr	r2, [r7, #28]
 800ca7a:	e841 2300 	strex	r3, r2, [r1]
 800ca7e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1e6      	bne.n	800ca54 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca86:	e002      	b.n	800ca8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ca88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca8a:	f7ff fa65 	bl	800bf58 <HAL_UART_TxCpltCallback>
}
 800ca8e:	bf00      	nop
 800ca90:	3740      	adds	r7, #64	; 0x40
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f7ff fa61 	bl	800bf6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800caaa:	bf00      	nop
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b086      	sub	sp, #24
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cac6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cace:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cada:	2b80      	cmp	r3, #128	; 0x80
 800cadc:	d109      	bne.n	800caf2 <UART_DMAError+0x40>
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	2b21      	cmp	r3, #33	; 0x21
 800cae2:	d106      	bne.n	800caf2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800caec:	6978      	ldr	r0, [r7, #20]
 800caee:	f7ff fede 	bl	800c8ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	d109      	bne.n	800cb14 <UART_DMAError+0x62>
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b22      	cmp	r3, #34	; 0x22
 800cb04:	d106      	bne.n	800cb14 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f7ff ff0e 	bl	800c930 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb1a:	f043 0210 	orr.w	r2, r3, #16
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb24:	6978      	ldr	r0, [r7, #20]
 800cb26:	f7ff fa2b 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb2a:	bf00      	nop
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff fa15 	bl	800bf80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b088      	sub	sp, #32
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	61bb      	str	r3, [r7, #24]
 800cb86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6979      	ldr	r1, [r7, #20]
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	613b      	str	r3, [r7, #16]
   return(result);
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e6      	bne.n	800cb66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7ff f9d6 	bl	800bf58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbac:	bf00      	nop
 800cbae:	3720      	adds	r7, #32
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbbc:	bf00      	nop
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d101      	bne.n	800cc06 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc02:	2302      	movs	r3, #2
 800cc04:	e027      	b.n	800cc56 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2224      	movs	r2, #36	; 0x24
 800cc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0201 	bic.w	r2, r2, #1
 800cc2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2220      	movs	r2, #32
 800cc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr

0800cc62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d101      	bne.n	800cc7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc76:	2302      	movs	r3, #2
 800cc78:	e02d      	b.n	800ccd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2224      	movs	r2, #36	; 0x24
 800cc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 0201 	bic.w	r2, r2, #1
 800cca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f850 	bl	800cd5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e02d      	b.n	800cd52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2224      	movs	r2, #36	; 0x24
 800cd02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f022 0201 	bic.w	r2, r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	683a      	ldr	r2, [r7, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f812 	bl	800cd5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2220      	movs	r2, #32
 800cd44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d108      	bne.n	800cd7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd7c:	e031      	b.n	800cde2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd7e:	2308      	movs	r3, #8
 800cd80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd82:	2308      	movs	r3, #8
 800cd84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	0e5b      	lsrs	r3, r3, #25
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	0f5b      	lsrs	r3, r3, #29
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	f003 0307 	and.w	r3, r3, #7
 800cda4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
 800cda8:	7b3a      	ldrb	r2, [r7, #12]
 800cdaa:	4911      	ldr	r1, [pc, #68]	; (800cdf0 <UARTEx_SetNbDataToProcess+0x94>)
 800cdac:	5c8a      	ldrb	r2, [r1, r2]
 800cdae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdb2:	7b3a      	ldrb	r2, [r7, #12]
 800cdb4:	490f      	ldr	r1, [pc, #60]	; (800cdf4 <UARTEx_SetNbDataToProcess+0x98>)
 800cdb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	7b7a      	ldrb	r2, [r7, #13]
 800cdc8:	4909      	ldr	r1, [pc, #36]	; (800cdf0 <UARTEx_SetNbDataToProcess+0x94>)
 800cdca:	5c8a      	ldrb	r2, [r1, r2]
 800cdcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdd0:	7b7a      	ldrb	r2, [r7, #13]
 800cdd2:	4908      	ldr	r1, [pc, #32]	; (800cdf4 <UARTEx_SetNbDataToProcess+0x98>)
 800cdd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cde2:	bf00      	nop
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	0800eb1c 	.word	0x0800eb1c
 800cdf4:	0800eb24 	.word	0x0800eb24

0800cdf8 <_vsniprintf_r>:
 800cdf8:	b530      	push	{r4, r5, lr}
 800cdfa:	4614      	mov	r4, r2
 800cdfc:	2c00      	cmp	r4, #0
 800cdfe:	b09b      	sub	sp, #108	; 0x6c
 800ce00:	4605      	mov	r5, r0
 800ce02:	461a      	mov	r2, r3
 800ce04:	da05      	bge.n	800ce12 <_vsniprintf_r+0x1a>
 800ce06:	238b      	movs	r3, #139	; 0x8b
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0e:	b01b      	add	sp, #108	; 0x6c
 800ce10:	bd30      	pop	{r4, r5, pc}
 800ce12:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ce16:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce1a:	bf14      	ite	ne
 800ce1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce20:	4623      	moveq	r3, r4
 800ce22:	9302      	str	r3, [sp, #8]
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce2a:	9100      	str	r1, [sp, #0]
 800ce2c:	9104      	str	r1, [sp, #16]
 800ce2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce32:	4669      	mov	r1, sp
 800ce34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce36:	f000 f9ad 	bl	800d194 <_svfiprintf_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	bfbc      	itt	lt
 800ce3e:	238b      	movlt	r3, #139	; 0x8b
 800ce40:	602b      	strlt	r3, [r5, #0]
 800ce42:	2c00      	cmp	r4, #0
 800ce44:	d0e3      	beq.n	800ce0e <_vsniprintf_r+0x16>
 800ce46:	9b00      	ldr	r3, [sp, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	701a      	strb	r2, [r3, #0]
 800ce4c:	e7df      	b.n	800ce0e <_vsniprintf_r+0x16>
	...

0800ce50 <vsniprintf>:
 800ce50:	b507      	push	{r0, r1, r2, lr}
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4613      	mov	r3, r2
 800ce56:	460a      	mov	r2, r1
 800ce58:	4601      	mov	r1, r0
 800ce5a:	4803      	ldr	r0, [pc, #12]	; (800ce68 <vsniprintf+0x18>)
 800ce5c:	6800      	ldr	r0, [r0, #0]
 800ce5e:	f7ff ffcb 	bl	800cdf8 <_vsniprintf_r>
 800ce62:	b003      	add	sp, #12
 800ce64:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce68:	20000130 	.word	0x20000130

0800ce6c <memset>:
 800ce6c:	4402      	add	r2, r0
 800ce6e:	4603      	mov	r3, r0
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d100      	bne.n	800ce76 <memset+0xa>
 800ce74:	4770      	bx	lr
 800ce76:	f803 1b01 	strb.w	r1, [r3], #1
 800ce7a:	e7f9      	b.n	800ce70 <memset+0x4>

0800ce7c <__errno>:
 800ce7c:	4b01      	ldr	r3, [pc, #4]	; (800ce84 <__errno+0x8>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000130 	.word	0x20000130

0800ce88 <__libc_init_array>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	4d0d      	ldr	r5, [pc, #52]	; (800cec0 <__libc_init_array+0x38>)
 800ce8c:	4c0d      	ldr	r4, [pc, #52]	; (800cec4 <__libc_init_array+0x3c>)
 800ce8e:	1b64      	subs	r4, r4, r5
 800ce90:	10a4      	asrs	r4, r4, #2
 800ce92:	2600      	movs	r6, #0
 800ce94:	42a6      	cmp	r6, r4
 800ce96:	d109      	bne.n	800ceac <__libc_init_array+0x24>
 800ce98:	4d0b      	ldr	r5, [pc, #44]	; (800cec8 <__libc_init_array+0x40>)
 800ce9a:	4c0c      	ldr	r4, [pc, #48]	; (800cecc <__libc_init_array+0x44>)
 800ce9c:	f001 fe08 	bl	800eab0 <_init>
 800cea0:	1b64      	subs	r4, r4, r5
 800cea2:	10a4      	asrs	r4, r4, #2
 800cea4:	2600      	movs	r6, #0
 800cea6:	42a6      	cmp	r6, r4
 800cea8:	d105      	bne.n	800ceb6 <__libc_init_array+0x2e>
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceb0:	4798      	blx	r3
 800ceb2:	3601      	adds	r6, #1
 800ceb4:	e7ee      	b.n	800ce94 <__libc_init_array+0xc>
 800ceb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceba:	4798      	blx	r3
 800cebc:	3601      	adds	r6, #1
 800cebe:	e7f2      	b.n	800cea6 <__libc_init_array+0x1e>
 800cec0:	0800ed40 	.word	0x0800ed40
 800cec4:	0800ed40 	.word	0x0800ed40
 800cec8:	0800ed40 	.word	0x0800ed40
 800cecc:	0800ed44 	.word	0x0800ed44

0800ced0 <__retarget_lock_acquire_recursive>:
 800ced0:	4770      	bx	lr

0800ced2 <__retarget_lock_release_recursive>:
 800ced2:	4770      	bx	lr

0800ced4 <memcpy>:
 800ced4:	440a      	add	r2, r1
 800ced6:	4291      	cmp	r1, r2
 800ced8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cedc:	d100      	bne.n	800cee0 <memcpy+0xc>
 800cede:	4770      	bx	lr
 800cee0:	b510      	push	{r4, lr}
 800cee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceea:	4291      	cmp	r1, r2
 800ceec:	d1f9      	bne.n	800cee2 <memcpy+0xe>
 800ceee:	bd10      	pop	{r4, pc}

0800cef0 <_free_r>:
 800cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef2:	2900      	cmp	r1, #0
 800cef4:	d044      	beq.n	800cf80 <_free_r+0x90>
 800cef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cefa:	9001      	str	r0, [sp, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f1a1 0404 	sub.w	r4, r1, #4
 800cf02:	bfb8      	it	lt
 800cf04:	18e4      	addlt	r4, r4, r3
 800cf06:	f000 f8df 	bl	800d0c8 <__malloc_lock>
 800cf0a:	4a1e      	ldr	r2, [pc, #120]	; (800cf84 <_free_r+0x94>)
 800cf0c:	9801      	ldr	r0, [sp, #4]
 800cf0e:	6813      	ldr	r3, [r2, #0]
 800cf10:	b933      	cbnz	r3, 800cf20 <_free_r+0x30>
 800cf12:	6063      	str	r3, [r4, #4]
 800cf14:	6014      	str	r4, [r2, #0]
 800cf16:	b003      	add	sp, #12
 800cf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf1c:	f000 b8da 	b.w	800d0d4 <__malloc_unlock>
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d908      	bls.n	800cf36 <_free_r+0x46>
 800cf24:	6825      	ldr	r5, [r4, #0]
 800cf26:	1961      	adds	r1, r4, r5
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf01      	itttt	eq
 800cf2c:	6819      	ldreq	r1, [r3, #0]
 800cf2e:	685b      	ldreq	r3, [r3, #4]
 800cf30:	1949      	addeq	r1, r1, r5
 800cf32:	6021      	streq	r1, [r4, #0]
 800cf34:	e7ed      	b.n	800cf12 <_free_r+0x22>
 800cf36:	461a      	mov	r2, r3
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	b10b      	cbz	r3, 800cf40 <_free_r+0x50>
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d9fa      	bls.n	800cf36 <_free_r+0x46>
 800cf40:	6811      	ldr	r1, [r2, #0]
 800cf42:	1855      	adds	r5, r2, r1
 800cf44:	42a5      	cmp	r5, r4
 800cf46:	d10b      	bne.n	800cf60 <_free_r+0x70>
 800cf48:	6824      	ldr	r4, [r4, #0]
 800cf4a:	4421      	add	r1, r4
 800cf4c:	1854      	adds	r4, r2, r1
 800cf4e:	42a3      	cmp	r3, r4
 800cf50:	6011      	str	r1, [r2, #0]
 800cf52:	d1e0      	bne.n	800cf16 <_free_r+0x26>
 800cf54:	681c      	ldr	r4, [r3, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	6053      	str	r3, [r2, #4]
 800cf5a:	440c      	add	r4, r1
 800cf5c:	6014      	str	r4, [r2, #0]
 800cf5e:	e7da      	b.n	800cf16 <_free_r+0x26>
 800cf60:	d902      	bls.n	800cf68 <_free_r+0x78>
 800cf62:	230c      	movs	r3, #12
 800cf64:	6003      	str	r3, [r0, #0]
 800cf66:	e7d6      	b.n	800cf16 <_free_r+0x26>
 800cf68:	6825      	ldr	r5, [r4, #0]
 800cf6a:	1961      	adds	r1, r4, r5
 800cf6c:	428b      	cmp	r3, r1
 800cf6e:	bf04      	itt	eq
 800cf70:	6819      	ldreq	r1, [r3, #0]
 800cf72:	685b      	ldreq	r3, [r3, #4]
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	bf04      	itt	eq
 800cf78:	1949      	addeq	r1, r1, r5
 800cf7a:	6021      	streq	r1, [r4, #0]
 800cf7c:	6054      	str	r4, [r2, #4]
 800cf7e:	e7ca      	b.n	800cf16 <_free_r+0x26>
 800cf80:	b003      	add	sp, #12
 800cf82:	bd30      	pop	{r4, r5, pc}
 800cf84:	20000ee8 	.word	0x20000ee8

0800cf88 <sbrk_aligned>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	4e0e      	ldr	r6, [pc, #56]	; (800cfc4 <sbrk_aligned+0x3c>)
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	6831      	ldr	r1, [r6, #0]
 800cf90:	4605      	mov	r5, r0
 800cf92:	b911      	cbnz	r1, 800cf9a <sbrk_aligned+0x12>
 800cf94:	f000 fba6 	bl	800d6e4 <_sbrk_r>
 800cf98:	6030      	str	r0, [r6, #0]
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 fba1 	bl	800d6e4 <_sbrk_r>
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	d00a      	beq.n	800cfbc <sbrk_aligned+0x34>
 800cfa6:	1cc4      	adds	r4, r0, #3
 800cfa8:	f024 0403 	bic.w	r4, r4, #3
 800cfac:	42a0      	cmp	r0, r4
 800cfae:	d007      	beq.n	800cfc0 <sbrk_aligned+0x38>
 800cfb0:	1a21      	subs	r1, r4, r0
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f000 fb96 	bl	800d6e4 <_sbrk_r>
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d101      	bne.n	800cfc0 <sbrk_aligned+0x38>
 800cfbc:	f04f 34ff 	mov.w	r4, #4294967295
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	20000eec 	.word	0x20000eec

0800cfc8 <_malloc_r>:
 800cfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfcc:	1ccd      	adds	r5, r1, #3
 800cfce:	f025 0503 	bic.w	r5, r5, #3
 800cfd2:	3508      	adds	r5, #8
 800cfd4:	2d0c      	cmp	r5, #12
 800cfd6:	bf38      	it	cc
 800cfd8:	250c      	movcc	r5, #12
 800cfda:	2d00      	cmp	r5, #0
 800cfdc:	4607      	mov	r7, r0
 800cfde:	db01      	blt.n	800cfe4 <_malloc_r+0x1c>
 800cfe0:	42a9      	cmp	r1, r5
 800cfe2:	d905      	bls.n	800cff0 <_malloc_r+0x28>
 800cfe4:	230c      	movs	r3, #12
 800cfe6:	603b      	str	r3, [r7, #0]
 800cfe8:	2600      	movs	r6, #0
 800cfea:	4630      	mov	r0, r6
 800cfec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0c4 <_malloc_r+0xfc>
 800cff4:	f000 f868 	bl	800d0c8 <__malloc_lock>
 800cff8:	f8d8 3000 	ldr.w	r3, [r8]
 800cffc:	461c      	mov	r4, r3
 800cffe:	bb5c      	cbnz	r4, 800d058 <_malloc_r+0x90>
 800d000:	4629      	mov	r1, r5
 800d002:	4638      	mov	r0, r7
 800d004:	f7ff ffc0 	bl	800cf88 <sbrk_aligned>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	4604      	mov	r4, r0
 800d00c:	d155      	bne.n	800d0ba <_malloc_r+0xf2>
 800d00e:	f8d8 4000 	ldr.w	r4, [r8]
 800d012:	4626      	mov	r6, r4
 800d014:	2e00      	cmp	r6, #0
 800d016:	d145      	bne.n	800d0a4 <_malloc_r+0xdc>
 800d018:	2c00      	cmp	r4, #0
 800d01a:	d048      	beq.n	800d0ae <_malloc_r+0xe6>
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	4631      	mov	r1, r6
 800d020:	4638      	mov	r0, r7
 800d022:	eb04 0903 	add.w	r9, r4, r3
 800d026:	f000 fb5d 	bl	800d6e4 <_sbrk_r>
 800d02a:	4581      	cmp	r9, r0
 800d02c:	d13f      	bne.n	800d0ae <_malloc_r+0xe6>
 800d02e:	6821      	ldr	r1, [r4, #0]
 800d030:	1a6d      	subs	r5, r5, r1
 800d032:	4629      	mov	r1, r5
 800d034:	4638      	mov	r0, r7
 800d036:	f7ff ffa7 	bl	800cf88 <sbrk_aligned>
 800d03a:	3001      	adds	r0, #1
 800d03c:	d037      	beq.n	800d0ae <_malloc_r+0xe6>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	442b      	add	r3, r5
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	f8d8 3000 	ldr.w	r3, [r8]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d038      	beq.n	800d0be <_malloc_r+0xf6>
 800d04c:	685a      	ldr	r2, [r3, #4]
 800d04e:	42a2      	cmp	r2, r4
 800d050:	d12b      	bne.n	800d0aa <_malloc_r+0xe2>
 800d052:	2200      	movs	r2, #0
 800d054:	605a      	str	r2, [r3, #4]
 800d056:	e00f      	b.n	800d078 <_malloc_r+0xb0>
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	1b52      	subs	r2, r2, r5
 800d05c:	d41f      	bmi.n	800d09e <_malloc_r+0xd6>
 800d05e:	2a0b      	cmp	r2, #11
 800d060:	d917      	bls.n	800d092 <_malloc_r+0xca>
 800d062:	1961      	adds	r1, r4, r5
 800d064:	42a3      	cmp	r3, r4
 800d066:	6025      	str	r5, [r4, #0]
 800d068:	bf18      	it	ne
 800d06a:	6059      	strne	r1, [r3, #4]
 800d06c:	6863      	ldr	r3, [r4, #4]
 800d06e:	bf08      	it	eq
 800d070:	f8c8 1000 	streq.w	r1, [r8]
 800d074:	5162      	str	r2, [r4, r5]
 800d076:	604b      	str	r3, [r1, #4]
 800d078:	4638      	mov	r0, r7
 800d07a:	f104 060b 	add.w	r6, r4, #11
 800d07e:	f000 f829 	bl	800d0d4 <__malloc_unlock>
 800d082:	f026 0607 	bic.w	r6, r6, #7
 800d086:	1d23      	adds	r3, r4, #4
 800d088:	1af2      	subs	r2, r6, r3
 800d08a:	d0ae      	beq.n	800cfea <_malloc_r+0x22>
 800d08c:	1b9b      	subs	r3, r3, r6
 800d08e:	50a3      	str	r3, [r4, r2]
 800d090:	e7ab      	b.n	800cfea <_malloc_r+0x22>
 800d092:	42a3      	cmp	r3, r4
 800d094:	6862      	ldr	r2, [r4, #4]
 800d096:	d1dd      	bne.n	800d054 <_malloc_r+0x8c>
 800d098:	f8c8 2000 	str.w	r2, [r8]
 800d09c:	e7ec      	b.n	800d078 <_malloc_r+0xb0>
 800d09e:	4623      	mov	r3, r4
 800d0a0:	6864      	ldr	r4, [r4, #4]
 800d0a2:	e7ac      	b.n	800cffe <_malloc_r+0x36>
 800d0a4:	4634      	mov	r4, r6
 800d0a6:	6876      	ldr	r6, [r6, #4]
 800d0a8:	e7b4      	b.n	800d014 <_malloc_r+0x4c>
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	e7cc      	b.n	800d048 <_malloc_r+0x80>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	603b      	str	r3, [r7, #0]
 800d0b2:	4638      	mov	r0, r7
 800d0b4:	f000 f80e 	bl	800d0d4 <__malloc_unlock>
 800d0b8:	e797      	b.n	800cfea <_malloc_r+0x22>
 800d0ba:	6025      	str	r5, [r4, #0]
 800d0bc:	e7dc      	b.n	800d078 <_malloc_r+0xb0>
 800d0be:	605b      	str	r3, [r3, #4]
 800d0c0:	deff      	udf	#255	; 0xff
 800d0c2:	bf00      	nop
 800d0c4:	20000ee8 	.word	0x20000ee8

0800d0c8 <__malloc_lock>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	; (800d0d0 <__malloc_lock+0x8>)
 800d0ca:	f7ff bf01 	b.w	800ced0 <__retarget_lock_acquire_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20000ee4 	.word	0x20000ee4

0800d0d4 <__malloc_unlock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	; (800d0dc <__malloc_unlock+0x8>)
 800d0d6:	f7ff befc 	b.w	800ced2 <__retarget_lock_release_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20000ee4 	.word	0x20000ee4

0800d0e0 <__ssputs_r>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	688e      	ldr	r6, [r1, #8]
 800d0e6:	461f      	mov	r7, r3
 800d0e8:	42be      	cmp	r6, r7
 800d0ea:	680b      	ldr	r3, [r1, #0]
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4690      	mov	r8, r2
 800d0f2:	d82c      	bhi.n	800d14e <__ssputs_r+0x6e>
 800d0f4:	898a      	ldrh	r2, [r1, #12]
 800d0f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0fa:	d026      	beq.n	800d14a <__ssputs_r+0x6a>
 800d0fc:	6965      	ldr	r5, [r4, #20]
 800d0fe:	6909      	ldr	r1, [r1, #16]
 800d100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d104:	eba3 0901 	sub.w	r9, r3, r1
 800d108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d10c:	1c7b      	adds	r3, r7, #1
 800d10e:	444b      	add	r3, r9
 800d110:	106d      	asrs	r5, r5, #1
 800d112:	429d      	cmp	r5, r3
 800d114:	bf38      	it	cc
 800d116:	461d      	movcc	r5, r3
 800d118:	0553      	lsls	r3, r2, #21
 800d11a:	d527      	bpl.n	800d16c <__ssputs_r+0x8c>
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7ff ff53 	bl	800cfc8 <_malloc_r>
 800d122:	4606      	mov	r6, r0
 800d124:	b360      	cbz	r0, 800d180 <__ssputs_r+0xa0>
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	464a      	mov	r2, r9
 800d12a:	f7ff fed3 	bl	800ced4 <memcpy>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	6126      	str	r6, [r4, #16]
 800d13c:	6165      	str	r5, [r4, #20]
 800d13e:	444e      	add	r6, r9
 800d140:	eba5 0509 	sub.w	r5, r5, r9
 800d144:	6026      	str	r6, [r4, #0]
 800d146:	60a5      	str	r5, [r4, #8]
 800d148:	463e      	mov	r6, r7
 800d14a:	42be      	cmp	r6, r7
 800d14c:	d900      	bls.n	800d150 <__ssputs_r+0x70>
 800d14e:	463e      	mov	r6, r7
 800d150:	6820      	ldr	r0, [r4, #0]
 800d152:	4632      	mov	r2, r6
 800d154:	4641      	mov	r1, r8
 800d156:	f000 faab 	bl	800d6b0 <memmove>
 800d15a:	68a3      	ldr	r3, [r4, #8]
 800d15c:	1b9b      	subs	r3, r3, r6
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	4433      	add	r3, r6
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	2000      	movs	r0, #0
 800d168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d16c:	462a      	mov	r2, r5
 800d16e:	f000 fac9 	bl	800d704 <_realloc_r>
 800d172:	4606      	mov	r6, r0
 800d174:	2800      	cmp	r0, #0
 800d176:	d1e0      	bne.n	800d13a <__ssputs_r+0x5a>
 800d178:	6921      	ldr	r1, [r4, #16]
 800d17a:	4650      	mov	r0, sl
 800d17c:	f7ff feb8 	bl	800cef0 <_free_r>
 800d180:	230c      	movs	r3, #12
 800d182:	f8ca 3000 	str.w	r3, [sl]
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18c:	81a3      	strh	r3, [r4, #12]
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295
 800d192:	e7e9      	b.n	800d168 <__ssputs_r+0x88>

0800d194 <_svfiprintf_r>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4698      	mov	r8, r3
 800d19a:	898b      	ldrh	r3, [r1, #12]
 800d19c:	061b      	lsls	r3, r3, #24
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	d50e      	bpl.n	800d1c6 <_svfiprintf_r+0x32>
 800d1a8:	690b      	ldr	r3, [r1, #16]
 800d1aa:	b963      	cbnz	r3, 800d1c6 <_svfiprintf_r+0x32>
 800d1ac:	2140      	movs	r1, #64	; 0x40
 800d1ae:	f7ff ff0b 	bl	800cfc8 <_malloc_r>
 800d1b2:	6028      	str	r0, [r5, #0]
 800d1b4:	6128      	str	r0, [r5, #16]
 800d1b6:	b920      	cbnz	r0, 800d1c2 <_svfiprintf_r+0x2e>
 800d1b8:	230c      	movs	r3, #12
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e0d0      	b.n	800d364 <_svfiprintf_r+0x1d0>
 800d1c2:	2340      	movs	r3, #64	; 0x40
 800d1c4:	616b      	str	r3, [r5, #20]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ca:	2320      	movs	r3, #32
 800d1cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d4:	2330      	movs	r3, #48	; 0x30
 800d1d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d37c <_svfiprintf_r+0x1e8>
 800d1da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1de:	f04f 0901 	mov.w	r9, #1
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	469a      	mov	sl, r3
 800d1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ea:	b10a      	cbz	r2, 800d1f0 <_svfiprintf_r+0x5c>
 800d1ec:	2a25      	cmp	r2, #37	; 0x25
 800d1ee:	d1f9      	bne.n	800d1e4 <_svfiprintf_r+0x50>
 800d1f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f4:	d00b      	beq.n	800d20e <_svfiprintf_r+0x7a>
 800d1f6:	465b      	mov	r3, fp
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7ff ff6f 	bl	800d0e0 <__ssputs_r>
 800d202:	3001      	adds	r0, #1
 800d204:	f000 80a9 	beq.w	800d35a <_svfiprintf_r+0x1c6>
 800d208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20a:	445a      	add	r2, fp
 800d20c:	9209      	str	r2, [sp, #36]	; 0x24
 800d20e:	f89a 3000 	ldrb.w	r3, [sl]
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 80a1 	beq.w	800d35a <_svfiprintf_r+0x1c6>
 800d218:	2300      	movs	r3, #0
 800d21a:	f04f 32ff 	mov.w	r2, #4294967295
 800d21e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d222:	f10a 0a01 	add.w	sl, sl, #1
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	9307      	str	r3, [sp, #28]
 800d22a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d22e:	931a      	str	r3, [sp, #104]	; 0x68
 800d230:	4654      	mov	r4, sl
 800d232:	2205      	movs	r2, #5
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	4850      	ldr	r0, [pc, #320]	; (800d37c <_svfiprintf_r+0x1e8>)
 800d23a:	f7f2 fff9 	bl	8000230 <memchr>
 800d23e:	9a04      	ldr	r2, [sp, #16]
 800d240:	b9d8      	cbnz	r0, 800d27a <_svfiprintf_r+0xe6>
 800d242:	06d0      	lsls	r0, r2, #27
 800d244:	bf44      	itt	mi
 800d246:	2320      	movmi	r3, #32
 800d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24c:	0711      	lsls	r1, r2, #28
 800d24e:	bf44      	itt	mi
 800d250:	232b      	movmi	r3, #43	; 0x2b
 800d252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d256:	f89a 3000 	ldrb.w	r3, [sl]
 800d25a:	2b2a      	cmp	r3, #42	; 0x2a
 800d25c:	d015      	beq.n	800d28a <_svfiprintf_r+0xf6>
 800d25e:	9a07      	ldr	r2, [sp, #28]
 800d260:	4654      	mov	r4, sl
 800d262:	2000      	movs	r0, #0
 800d264:	f04f 0c0a 	mov.w	ip, #10
 800d268:	4621      	mov	r1, r4
 800d26a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d26e:	3b30      	subs	r3, #48	; 0x30
 800d270:	2b09      	cmp	r3, #9
 800d272:	d94d      	bls.n	800d310 <_svfiprintf_r+0x17c>
 800d274:	b1b0      	cbz	r0, 800d2a4 <_svfiprintf_r+0x110>
 800d276:	9207      	str	r2, [sp, #28]
 800d278:	e014      	b.n	800d2a4 <_svfiprintf_r+0x110>
 800d27a:	eba0 0308 	sub.w	r3, r0, r8
 800d27e:	fa09 f303 	lsl.w	r3, r9, r3
 800d282:	4313      	orrs	r3, r2
 800d284:	9304      	str	r3, [sp, #16]
 800d286:	46a2      	mov	sl, r4
 800d288:	e7d2      	b.n	800d230 <_svfiprintf_r+0x9c>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9103      	str	r1, [sp, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	bfbb      	ittet	lt
 800d296:	425b      	neglt	r3, r3
 800d298:	f042 0202 	orrlt.w	r2, r2, #2
 800d29c:	9307      	strge	r3, [sp, #28]
 800d29e:	9307      	strlt	r3, [sp, #28]
 800d2a0:	bfb8      	it	lt
 800d2a2:	9204      	strlt	r2, [sp, #16]
 800d2a4:	7823      	ldrb	r3, [r4, #0]
 800d2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a8:	d10c      	bne.n	800d2c4 <_svfiprintf_r+0x130>
 800d2aa:	7863      	ldrb	r3, [r4, #1]
 800d2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ae:	d134      	bne.n	800d31a <_svfiprintf_r+0x186>
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	1d1a      	adds	r2, r3, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	9203      	str	r2, [sp, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bfb8      	it	lt
 800d2bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2c0:	3402      	adds	r4, #2
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d38c <_svfiprintf_r+0x1f8>
 800d2c8:	7821      	ldrb	r1, [r4, #0]
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	4650      	mov	r0, sl
 800d2ce:	f7f2 ffaf 	bl	8000230 <memchr>
 800d2d2:	b138      	cbz	r0, 800d2e4 <_svfiprintf_r+0x150>
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	eba0 000a 	sub.w	r0, r0, sl
 800d2da:	2240      	movs	r2, #64	; 0x40
 800d2dc:	4082      	lsls	r2, r0
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	3401      	adds	r4, #1
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e8:	4825      	ldr	r0, [pc, #148]	; (800d380 <_svfiprintf_r+0x1ec>)
 800d2ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ee:	2206      	movs	r2, #6
 800d2f0:	f7f2 ff9e 	bl	8000230 <memchr>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d038      	beq.n	800d36a <_svfiprintf_r+0x1d6>
 800d2f8:	4b22      	ldr	r3, [pc, #136]	; (800d384 <_svfiprintf_r+0x1f0>)
 800d2fa:	bb1b      	cbnz	r3, 800d344 <_svfiprintf_r+0x1b0>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	3307      	adds	r3, #7
 800d300:	f023 0307 	bic.w	r3, r3, #7
 800d304:	3308      	adds	r3, #8
 800d306:	9303      	str	r3, [sp, #12]
 800d308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30a:	4433      	add	r3, r6
 800d30c:	9309      	str	r3, [sp, #36]	; 0x24
 800d30e:	e768      	b.n	800d1e2 <_svfiprintf_r+0x4e>
 800d310:	fb0c 3202 	mla	r2, ip, r2, r3
 800d314:	460c      	mov	r4, r1
 800d316:	2001      	movs	r0, #1
 800d318:	e7a6      	b.n	800d268 <_svfiprintf_r+0xd4>
 800d31a:	2300      	movs	r3, #0
 800d31c:	3401      	adds	r4, #1
 800d31e:	9305      	str	r3, [sp, #20]
 800d320:	4619      	mov	r1, r3
 800d322:	f04f 0c0a 	mov.w	ip, #10
 800d326:	4620      	mov	r0, r4
 800d328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32c:	3a30      	subs	r2, #48	; 0x30
 800d32e:	2a09      	cmp	r2, #9
 800d330:	d903      	bls.n	800d33a <_svfiprintf_r+0x1a6>
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0c6      	beq.n	800d2c4 <_svfiprintf_r+0x130>
 800d336:	9105      	str	r1, [sp, #20]
 800d338:	e7c4      	b.n	800d2c4 <_svfiprintf_r+0x130>
 800d33a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d33e:	4604      	mov	r4, r0
 800d340:	2301      	movs	r3, #1
 800d342:	e7f0      	b.n	800d326 <_svfiprintf_r+0x192>
 800d344:	ab03      	add	r3, sp, #12
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	462a      	mov	r2, r5
 800d34a:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <_svfiprintf_r+0x1f4>)
 800d34c:	a904      	add	r1, sp, #16
 800d34e:	4638      	mov	r0, r7
 800d350:	f3af 8000 	nop.w
 800d354:	1c42      	adds	r2, r0, #1
 800d356:	4606      	mov	r6, r0
 800d358:	d1d6      	bne.n	800d308 <_svfiprintf_r+0x174>
 800d35a:	89ab      	ldrh	r3, [r5, #12]
 800d35c:	065b      	lsls	r3, r3, #25
 800d35e:	f53f af2d 	bmi.w	800d1bc <_svfiprintf_r+0x28>
 800d362:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d364:	b01d      	add	sp, #116	; 0x74
 800d366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36a:	ab03      	add	r3, sp, #12
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	462a      	mov	r2, r5
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <_svfiprintf_r+0x1f4>)
 800d372:	a904      	add	r1, sp, #16
 800d374:	4638      	mov	r0, r7
 800d376:	f000 f879 	bl	800d46c <_printf_i>
 800d37a:	e7eb      	b.n	800d354 <_svfiprintf_r+0x1c0>
 800d37c:	0800eb2c 	.word	0x0800eb2c
 800d380:	0800eb36 	.word	0x0800eb36
 800d384:	00000000 	.word	0x00000000
 800d388:	0800d0e1 	.word	0x0800d0e1
 800d38c:	0800eb32 	.word	0x0800eb32

0800d390 <_printf_common>:
 800d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d394:	4616      	mov	r6, r2
 800d396:	4699      	mov	r9, r3
 800d398:	688a      	ldr	r2, [r1, #8]
 800d39a:	690b      	ldr	r3, [r1, #16]
 800d39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	bfb8      	it	lt
 800d3a4:	4613      	movlt	r3, r2
 800d3a6:	6033      	str	r3, [r6, #0]
 800d3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3ac:	4607      	mov	r7, r0
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	b10a      	cbz	r2, 800d3b6 <_printf_common+0x26>
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	6033      	str	r3, [r6, #0]
 800d3b6:	6823      	ldr	r3, [r4, #0]
 800d3b8:	0699      	lsls	r1, r3, #26
 800d3ba:	bf42      	ittt	mi
 800d3bc:	6833      	ldrmi	r3, [r6, #0]
 800d3be:	3302      	addmi	r3, #2
 800d3c0:	6033      	strmi	r3, [r6, #0]
 800d3c2:	6825      	ldr	r5, [r4, #0]
 800d3c4:	f015 0506 	ands.w	r5, r5, #6
 800d3c8:	d106      	bne.n	800d3d8 <_printf_common+0x48>
 800d3ca:	f104 0a19 	add.w	sl, r4, #25
 800d3ce:	68e3      	ldr	r3, [r4, #12]
 800d3d0:	6832      	ldr	r2, [r6, #0]
 800d3d2:	1a9b      	subs	r3, r3, r2
 800d3d4:	42ab      	cmp	r3, r5
 800d3d6:	dc26      	bgt.n	800d426 <_printf_common+0x96>
 800d3d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3dc:	1e13      	subs	r3, r2, #0
 800d3de:	6822      	ldr	r2, [r4, #0]
 800d3e0:	bf18      	it	ne
 800d3e2:	2301      	movne	r3, #1
 800d3e4:	0692      	lsls	r2, r2, #26
 800d3e6:	d42b      	bmi.n	800d440 <_printf_common+0xb0>
 800d3e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	47c0      	blx	r8
 800d3f2:	3001      	adds	r0, #1
 800d3f4:	d01e      	beq.n	800d434 <_printf_common+0xa4>
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	6922      	ldr	r2, [r4, #16]
 800d3fa:	f003 0306 	and.w	r3, r3, #6
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	bf02      	ittt	eq
 800d402:	68e5      	ldreq	r5, [r4, #12]
 800d404:	6833      	ldreq	r3, [r6, #0]
 800d406:	1aed      	subeq	r5, r5, r3
 800d408:	68a3      	ldr	r3, [r4, #8]
 800d40a:	bf0c      	ite	eq
 800d40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d410:	2500      	movne	r5, #0
 800d412:	4293      	cmp	r3, r2
 800d414:	bfc4      	itt	gt
 800d416:	1a9b      	subgt	r3, r3, r2
 800d418:	18ed      	addgt	r5, r5, r3
 800d41a:	2600      	movs	r6, #0
 800d41c:	341a      	adds	r4, #26
 800d41e:	42b5      	cmp	r5, r6
 800d420:	d11a      	bne.n	800d458 <_printf_common+0xc8>
 800d422:	2000      	movs	r0, #0
 800d424:	e008      	b.n	800d438 <_printf_common+0xa8>
 800d426:	2301      	movs	r3, #1
 800d428:	4652      	mov	r2, sl
 800d42a:	4649      	mov	r1, r9
 800d42c:	4638      	mov	r0, r7
 800d42e:	47c0      	blx	r8
 800d430:	3001      	adds	r0, #1
 800d432:	d103      	bne.n	800d43c <_printf_common+0xac>
 800d434:	f04f 30ff 	mov.w	r0, #4294967295
 800d438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43c:	3501      	adds	r5, #1
 800d43e:	e7c6      	b.n	800d3ce <_printf_common+0x3e>
 800d440:	18e1      	adds	r1, r4, r3
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	2030      	movs	r0, #48	; 0x30
 800d446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d44a:	4422      	add	r2, r4
 800d44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d454:	3302      	adds	r3, #2
 800d456:	e7c7      	b.n	800d3e8 <_printf_common+0x58>
 800d458:	2301      	movs	r3, #1
 800d45a:	4622      	mov	r2, r4
 800d45c:	4649      	mov	r1, r9
 800d45e:	4638      	mov	r0, r7
 800d460:	47c0      	blx	r8
 800d462:	3001      	adds	r0, #1
 800d464:	d0e6      	beq.n	800d434 <_printf_common+0xa4>
 800d466:	3601      	adds	r6, #1
 800d468:	e7d9      	b.n	800d41e <_printf_common+0x8e>
	...

0800d46c <_printf_i>:
 800d46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	7e0f      	ldrb	r7, [r1, #24]
 800d472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d474:	2f78      	cmp	r7, #120	; 0x78
 800d476:	4691      	mov	r9, r2
 800d478:	4680      	mov	r8, r0
 800d47a:	460c      	mov	r4, r1
 800d47c:	469a      	mov	sl, r3
 800d47e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d482:	d807      	bhi.n	800d494 <_printf_i+0x28>
 800d484:	2f62      	cmp	r7, #98	; 0x62
 800d486:	d80a      	bhi.n	800d49e <_printf_i+0x32>
 800d488:	2f00      	cmp	r7, #0
 800d48a:	f000 80d4 	beq.w	800d636 <_printf_i+0x1ca>
 800d48e:	2f58      	cmp	r7, #88	; 0x58
 800d490:	f000 80c0 	beq.w	800d614 <_printf_i+0x1a8>
 800d494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d49c:	e03a      	b.n	800d514 <_printf_i+0xa8>
 800d49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4a2:	2b15      	cmp	r3, #21
 800d4a4:	d8f6      	bhi.n	800d494 <_printf_i+0x28>
 800d4a6:	a101      	add	r1, pc, #4	; (adr r1, 800d4ac <_printf_i+0x40>)
 800d4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4ac:	0800d505 	.word	0x0800d505
 800d4b0:	0800d519 	.word	0x0800d519
 800d4b4:	0800d495 	.word	0x0800d495
 800d4b8:	0800d495 	.word	0x0800d495
 800d4bc:	0800d495 	.word	0x0800d495
 800d4c0:	0800d495 	.word	0x0800d495
 800d4c4:	0800d519 	.word	0x0800d519
 800d4c8:	0800d495 	.word	0x0800d495
 800d4cc:	0800d495 	.word	0x0800d495
 800d4d0:	0800d495 	.word	0x0800d495
 800d4d4:	0800d495 	.word	0x0800d495
 800d4d8:	0800d61d 	.word	0x0800d61d
 800d4dc:	0800d545 	.word	0x0800d545
 800d4e0:	0800d5d7 	.word	0x0800d5d7
 800d4e4:	0800d495 	.word	0x0800d495
 800d4e8:	0800d495 	.word	0x0800d495
 800d4ec:	0800d63f 	.word	0x0800d63f
 800d4f0:	0800d495 	.word	0x0800d495
 800d4f4:	0800d545 	.word	0x0800d545
 800d4f8:	0800d495 	.word	0x0800d495
 800d4fc:	0800d495 	.word	0x0800d495
 800d500:	0800d5df 	.word	0x0800d5df
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	1d1a      	adds	r2, r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	602a      	str	r2, [r5, #0]
 800d50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d514:	2301      	movs	r3, #1
 800d516:	e09f      	b.n	800d658 <_printf_i+0x1ec>
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	682b      	ldr	r3, [r5, #0]
 800d51c:	0607      	lsls	r7, r0, #24
 800d51e:	f103 0104 	add.w	r1, r3, #4
 800d522:	6029      	str	r1, [r5, #0]
 800d524:	d501      	bpl.n	800d52a <_printf_i+0xbe>
 800d526:	681e      	ldr	r6, [r3, #0]
 800d528:	e003      	b.n	800d532 <_printf_i+0xc6>
 800d52a:	0646      	lsls	r6, r0, #25
 800d52c:	d5fb      	bpl.n	800d526 <_printf_i+0xba>
 800d52e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d532:	2e00      	cmp	r6, #0
 800d534:	da03      	bge.n	800d53e <_printf_i+0xd2>
 800d536:	232d      	movs	r3, #45	; 0x2d
 800d538:	4276      	negs	r6, r6
 800d53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d53e:	485a      	ldr	r0, [pc, #360]	; (800d6a8 <_printf_i+0x23c>)
 800d540:	230a      	movs	r3, #10
 800d542:	e012      	b.n	800d56a <_printf_i+0xfe>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	6820      	ldr	r0, [r4, #0]
 800d548:	1d19      	adds	r1, r3, #4
 800d54a:	6029      	str	r1, [r5, #0]
 800d54c:	0605      	lsls	r5, r0, #24
 800d54e:	d501      	bpl.n	800d554 <_printf_i+0xe8>
 800d550:	681e      	ldr	r6, [r3, #0]
 800d552:	e002      	b.n	800d55a <_printf_i+0xee>
 800d554:	0641      	lsls	r1, r0, #25
 800d556:	d5fb      	bpl.n	800d550 <_printf_i+0xe4>
 800d558:	881e      	ldrh	r6, [r3, #0]
 800d55a:	4853      	ldr	r0, [pc, #332]	; (800d6a8 <_printf_i+0x23c>)
 800d55c:	2f6f      	cmp	r7, #111	; 0x6f
 800d55e:	bf0c      	ite	eq
 800d560:	2308      	moveq	r3, #8
 800d562:	230a      	movne	r3, #10
 800d564:	2100      	movs	r1, #0
 800d566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d56a:	6865      	ldr	r5, [r4, #4]
 800d56c:	60a5      	str	r5, [r4, #8]
 800d56e:	2d00      	cmp	r5, #0
 800d570:	bfa2      	ittt	ge
 800d572:	6821      	ldrge	r1, [r4, #0]
 800d574:	f021 0104 	bicge.w	r1, r1, #4
 800d578:	6021      	strge	r1, [r4, #0]
 800d57a:	b90e      	cbnz	r6, 800d580 <_printf_i+0x114>
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	d04b      	beq.n	800d618 <_printf_i+0x1ac>
 800d580:	4615      	mov	r5, r2
 800d582:	fbb6 f1f3 	udiv	r1, r6, r3
 800d586:	fb03 6711 	mls	r7, r3, r1, r6
 800d58a:	5dc7      	ldrb	r7, [r0, r7]
 800d58c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d590:	4637      	mov	r7, r6
 800d592:	42bb      	cmp	r3, r7
 800d594:	460e      	mov	r6, r1
 800d596:	d9f4      	bls.n	800d582 <_printf_i+0x116>
 800d598:	2b08      	cmp	r3, #8
 800d59a:	d10b      	bne.n	800d5b4 <_printf_i+0x148>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	07de      	lsls	r6, r3, #31
 800d5a0:	d508      	bpl.n	800d5b4 <_printf_i+0x148>
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	6861      	ldr	r1, [r4, #4]
 800d5a6:	4299      	cmp	r1, r3
 800d5a8:	bfde      	ittt	le
 800d5aa:	2330      	movle	r3, #48	; 0x30
 800d5ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d5b4:	1b52      	subs	r2, r2, r5
 800d5b6:	6122      	str	r2, [r4, #16]
 800d5b8:	f8cd a000 	str.w	sl, [sp]
 800d5bc:	464b      	mov	r3, r9
 800d5be:	aa03      	add	r2, sp, #12
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	f7ff fee4 	bl	800d390 <_printf_common>
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d14a      	bne.n	800d662 <_printf_i+0x1f6>
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	b004      	add	sp, #16
 800d5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	f043 0320 	orr.w	r3, r3, #32
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	4833      	ldr	r0, [pc, #204]	; (800d6ac <_printf_i+0x240>)
 800d5e0:	2778      	movs	r7, #120	; 0x78
 800d5e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	6829      	ldr	r1, [r5, #0]
 800d5ea:	061f      	lsls	r7, r3, #24
 800d5ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5f0:	d402      	bmi.n	800d5f8 <_printf_i+0x18c>
 800d5f2:	065f      	lsls	r7, r3, #25
 800d5f4:	bf48      	it	mi
 800d5f6:	b2b6      	uxthmi	r6, r6
 800d5f8:	07df      	lsls	r7, r3, #31
 800d5fa:	bf48      	it	mi
 800d5fc:	f043 0320 	orrmi.w	r3, r3, #32
 800d600:	6029      	str	r1, [r5, #0]
 800d602:	bf48      	it	mi
 800d604:	6023      	strmi	r3, [r4, #0]
 800d606:	b91e      	cbnz	r6, 800d610 <_printf_i+0x1a4>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	f023 0320 	bic.w	r3, r3, #32
 800d60e:	6023      	str	r3, [r4, #0]
 800d610:	2310      	movs	r3, #16
 800d612:	e7a7      	b.n	800d564 <_printf_i+0xf8>
 800d614:	4824      	ldr	r0, [pc, #144]	; (800d6a8 <_printf_i+0x23c>)
 800d616:	e7e4      	b.n	800d5e2 <_printf_i+0x176>
 800d618:	4615      	mov	r5, r2
 800d61a:	e7bd      	b.n	800d598 <_printf_i+0x12c>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	6826      	ldr	r6, [r4, #0]
 800d620:	6961      	ldr	r1, [r4, #20]
 800d622:	1d18      	adds	r0, r3, #4
 800d624:	6028      	str	r0, [r5, #0]
 800d626:	0635      	lsls	r5, r6, #24
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	d501      	bpl.n	800d630 <_printf_i+0x1c4>
 800d62c:	6019      	str	r1, [r3, #0]
 800d62e:	e002      	b.n	800d636 <_printf_i+0x1ca>
 800d630:	0670      	lsls	r0, r6, #25
 800d632:	d5fb      	bpl.n	800d62c <_printf_i+0x1c0>
 800d634:	8019      	strh	r1, [r3, #0]
 800d636:	2300      	movs	r3, #0
 800d638:	6123      	str	r3, [r4, #16]
 800d63a:	4615      	mov	r5, r2
 800d63c:	e7bc      	b.n	800d5b8 <_printf_i+0x14c>
 800d63e:	682b      	ldr	r3, [r5, #0]
 800d640:	1d1a      	adds	r2, r3, #4
 800d642:	602a      	str	r2, [r5, #0]
 800d644:	681d      	ldr	r5, [r3, #0]
 800d646:	6862      	ldr	r2, [r4, #4]
 800d648:	2100      	movs	r1, #0
 800d64a:	4628      	mov	r0, r5
 800d64c:	f7f2 fdf0 	bl	8000230 <memchr>
 800d650:	b108      	cbz	r0, 800d656 <_printf_i+0x1ea>
 800d652:	1b40      	subs	r0, r0, r5
 800d654:	6060      	str	r0, [r4, #4]
 800d656:	6863      	ldr	r3, [r4, #4]
 800d658:	6123      	str	r3, [r4, #16]
 800d65a:	2300      	movs	r3, #0
 800d65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d660:	e7aa      	b.n	800d5b8 <_printf_i+0x14c>
 800d662:	6923      	ldr	r3, [r4, #16]
 800d664:	462a      	mov	r2, r5
 800d666:	4649      	mov	r1, r9
 800d668:	4640      	mov	r0, r8
 800d66a:	47d0      	blx	sl
 800d66c:	3001      	adds	r0, #1
 800d66e:	d0ad      	beq.n	800d5cc <_printf_i+0x160>
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	079b      	lsls	r3, r3, #30
 800d674:	d413      	bmi.n	800d69e <_printf_i+0x232>
 800d676:	68e0      	ldr	r0, [r4, #12]
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	4298      	cmp	r0, r3
 800d67c:	bfb8      	it	lt
 800d67e:	4618      	movlt	r0, r3
 800d680:	e7a6      	b.n	800d5d0 <_printf_i+0x164>
 800d682:	2301      	movs	r3, #1
 800d684:	4632      	mov	r2, r6
 800d686:	4649      	mov	r1, r9
 800d688:	4640      	mov	r0, r8
 800d68a:	47d0      	blx	sl
 800d68c:	3001      	adds	r0, #1
 800d68e:	d09d      	beq.n	800d5cc <_printf_i+0x160>
 800d690:	3501      	adds	r5, #1
 800d692:	68e3      	ldr	r3, [r4, #12]
 800d694:	9903      	ldr	r1, [sp, #12]
 800d696:	1a5b      	subs	r3, r3, r1
 800d698:	42ab      	cmp	r3, r5
 800d69a:	dcf2      	bgt.n	800d682 <_printf_i+0x216>
 800d69c:	e7eb      	b.n	800d676 <_printf_i+0x20a>
 800d69e:	2500      	movs	r5, #0
 800d6a0:	f104 0619 	add.w	r6, r4, #25
 800d6a4:	e7f5      	b.n	800d692 <_printf_i+0x226>
 800d6a6:	bf00      	nop
 800d6a8:	0800eb3d 	.word	0x0800eb3d
 800d6ac:	0800eb4e 	.word	0x0800eb4e

0800d6b0 <memmove>:
 800d6b0:	4288      	cmp	r0, r1
 800d6b2:	b510      	push	{r4, lr}
 800d6b4:	eb01 0402 	add.w	r4, r1, r2
 800d6b8:	d902      	bls.n	800d6c0 <memmove+0x10>
 800d6ba:	4284      	cmp	r4, r0
 800d6bc:	4623      	mov	r3, r4
 800d6be:	d807      	bhi.n	800d6d0 <memmove+0x20>
 800d6c0:	1e43      	subs	r3, r0, #1
 800d6c2:	42a1      	cmp	r1, r4
 800d6c4:	d008      	beq.n	800d6d8 <memmove+0x28>
 800d6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6ce:	e7f8      	b.n	800d6c2 <memmove+0x12>
 800d6d0:	4402      	add	r2, r0
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	428a      	cmp	r2, r1
 800d6d6:	d100      	bne.n	800d6da <memmove+0x2a>
 800d6d8:	bd10      	pop	{r4, pc}
 800d6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6e2:	e7f7      	b.n	800d6d4 <memmove+0x24>

0800d6e4 <_sbrk_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d06      	ldr	r5, [pc, #24]	; (800d700 <_sbrk_r+0x1c>)
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	f7f6 fd9a 	bl	8004228 <_sbrk>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d102      	bne.n	800d6fe <_sbrk_r+0x1a>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	b103      	cbz	r3, 800d6fe <_sbrk_r+0x1a>
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	20000ee0 	.word	0x20000ee0

0800d704 <_realloc_r>:
 800d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d708:	4680      	mov	r8, r0
 800d70a:	4614      	mov	r4, r2
 800d70c:	460e      	mov	r6, r1
 800d70e:	b921      	cbnz	r1, 800d71a <_realloc_r+0x16>
 800d710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d714:	4611      	mov	r1, r2
 800d716:	f7ff bc57 	b.w	800cfc8 <_malloc_r>
 800d71a:	b92a      	cbnz	r2, 800d728 <_realloc_r+0x24>
 800d71c:	f7ff fbe8 	bl	800cef0 <_free_r>
 800d720:	4625      	mov	r5, r4
 800d722:	4628      	mov	r0, r5
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	f000 f81b 	bl	800d762 <_malloc_usable_size_r>
 800d72c:	4284      	cmp	r4, r0
 800d72e:	4607      	mov	r7, r0
 800d730:	d802      	bhi.n	800d738 <_realloc_r+0x34>
 800d732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d736:	d812      	bhi.n	800d75e <_realloc_r+0x5a>
 800d738:	4621      	mov	r1, r4
 800d73a:	4640      	mov	r0, r8
 800d73c:	f7ff fc44 	bl	800cfc8 <_malloc_r>
 800d740:	4605      	mov	r5, r0
 800d742:	2800      	cmp	r0, #0
 800d744:	d0ed      	beq.n	800d722 <_realloc_r+0x1e>
 800d746:	42bc      	cmp	r4, r7
 800d748:	4622      	mov	r2, r4
 800d74a:	4631      	mov	r1, r6
 800d74c:	bf28      	it	cs
 800d74e:	463a      	movcs	r2, r7
 800d750:	f7ff fbc0 	bl	800ced4 <memcpy>
 800d754:	4631      	mov	r1, r6
 800d756:	4640      	mov	r0, r8
 800d758:	f7ff fbca 	bl	800cef0 <_free_r>
 800d75c:	e7e1      	b.n	800d722 <_realloc_r+0x1e>
 800d75e:	4635      	mov	r5, r6
 800d760:	e7df      	b.n	800d722 <_realloc_r+0x1e>

0800d762 <_malloc_usable_size_r>:
 800d762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d766:	1f18      	subs	r0, r3, #4
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bfbc      	itt	lt
 800d76c:	580b      	ldrlt	r3, [r1, r0]
 800d76e:	18c0      	addlt	r0, r0, r3
 800d770:	4770      	bx	lr

0800d772 <sqrt>:
 800d772:	b538      	push	{r3, r4, r5, lr}
 800d774:	ed2d 8b02 	vpush	{d8}
 800d778:	ec55 4b10 	vmov	r4, r5, d0
 800d77c:	f000 f8d4 	bl	800d928 <__ieee754_sqrt>
 800d780:	4622      	mov	r2, r4
 800d782:	462b      	mov	r3, r5
 800d784:	4620      	mov	r0, r4
 800d786:	4629      	mov	r1, r5
 800d788:	eeb0 8a40 	vmov.f32	s16, s0
 800d78c:	eef0 8a60 	vmov.f32	s17, s1
 800d790:	f7f3 f9f4 	bl	8000b7c <__aeabi_dcmpun>
 800d794:	b990      	cbnz	r0, 800d7bc <sqrt+0x4a>
 800d796:	2200      	movs	r2, #0
 800d798:	2300      	movs	r3, #0
 800d79a:	4620      	mov	r0, r4
 800d79c:	4629      	mov	r1, r5
 800d79e:	f7f3 f9c5 	bl	8000b2c <__aeabi_dcmplt>
 800d7a2:	b158      	cbz	r0, 800d7bc <sqrt+0x4a>
 800d7a4:	f7ff fb6a 	bl	800ce7c <__errno>
 800d7a8:	2321      	movs	r3, #33	; 0x21
 800d7aa:	6003      	str	r3, [r0, #0]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f7f3 f872 	bl	800089c <__aeabi_ddiv>
 800d7b8:	ec41 0b18 	vmov	d8, r0, r1
 800d7bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d7c0:	eef0 0a68 	vmov.f32	s1, s17
 800d7c4:	ecbd 8b02 	vpop	{d8}
 800d7c8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ca:	0000      	movs	r0, r0
 800d7cc:	0000      	movs	r0, r0
	...

0800d7d0 <cos>:
 800d7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7d2:	ec53 2b10 	vmov	r2, r3, d0
 800d7d6:	4826      	ldr	r0, [pc, #152]	; (800d870 <cos+0xa0>)
 800d7d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7dc:	4281      	cmp	r1, r0
 800d7de:	dc06      	bgt.n	800d7ee <cos+0x1e>
 800d7e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d868 <cos+0x98>
 800d7e4:	b005      	add	sp, #20
 800d7e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7ea:	f000 b979 	b.w	800dae0 <__kernel_cos>
 800d7ee:	4821      	ldr	r0, [pc, #132]	; (800d874 <cos+0xa4>)
 800d7f0:	4281      	cmp	r1, r0
 800d7f2:	dd09      	ble.n	800d808 <cos+0x38>
 800d7f4:	ee10 0a10 	vmov	r0, s0
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f7f2 fd6d 	bl	80002d8 <__aeabi_dsub>
 800d7fe:	ec41 0b10 	vmov	d0, r0, r1
 800d802:	b005      	add	sp, #20
 800d804:	f85d fb04 	ldr.w	pc, [sp], #4
 800d808:	4668      	mov	r0, sp
 800d80a:	f000 faf1 	bl	800ddf0 <__ieee754_rem_pio2>
 800d80e:	f000 0003 	and.w	r0, r0, #3
 800d812:	2801      	cmp	r0, #1
 800d814:	d00b      	beq.n	800d82e <cos+0x5e>
 800d816:	2802      	cmp	r0, #2
 800d818:	d016      	beq.n	800d848 <cos+0x78>
 800d81a:	b9e0      	cbnz	r0, 800d856 <cos+0x86>
 800d81c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d820:	ed9d 0b00 	vldr	d0, [sp]
 800d824:	f000 f95c 	bl	800dae0 <__kernel_cos>
 800d828:	ec51 0b10 	vmov	r0, r1, d0
 800d82c:	e7e7      	b.n	800d7fe <cos+0x2e>
 800d82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d832:	ed9d 0b00 	vldr	d0, [sp]
 800d836:	f000 fa1b 	bl	800dc70 <__kernel_sin>
 800d83a:	ec53 2b10 	vmov	r2, r3, d0
 800d83e:	ee10 0a10 	vmov	r0, s0
 800d842:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d846:	e7da      	b.n	800d7fe <cos+0x2e>
 800d848:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d84c:	ed9d 0b00 	vldr	d0, [sp]
 800d850:	f000 f946 	bl	800dae0 <__kernel_cos>
 800d854:	e7f1      	b.n	800d83a <cos+0x6a>
 800d856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d85a:	ed9d 0b00 	vldr	d0, [sp]
 800d85e:	2001      	movs	r0, #1
 800d860:	f000 fa06 	bl	800dc70 <__kernel_sin>
 800d864:	e7e0      	b.n	800d828 <cos+0x58>
 800d866:	bf00      	nop
	...
 800d870:	3fe921fb 	.word	0x3fe921fb
 800d874:	7fefffff 	.word	0x7fefffff

0800d878 <sin>:
 800d878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d87a:	ec53 2b10 	vmov	r2, r3, d0
 800d87e:	4828      	ldr	r0, [pc, #160]	; (800d920 <sin+0xa8>)
 800d880:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d884:	4281      	cmp	r1, r0
 800d886:	dc07      	bgt.n	800d898 <sin+0x20>
 800d888:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d918 <sin+0xa0>
 800d88c:	2000      	movs	r0, #0
 800d88e:	b005      	add	sp, #20
 800d890:	f85d eb04 	ldr.w	lr, [sp], #4
 800d894:	f000 b9ec 	b.w	800dc70 <__kernel_sin>
 800d898:	4822      	ldr	r0, [pc, #136]	; (800d924 <sin+0xac>)
 800d89a:	4281      	cmp	r1, r0
 800d89c:	dd09      	ble.n	800d8b2 <sin+0x3a>
 800d89e:	ee10 0a10 	vmov	r0, s0
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	f7f2 fd18 	bl	80002d8 <__aeabi_dsub>
 800d8a8:	ec41 0b10 	vmov	d0, r0, r1
 800d8ac:	b005      	add	sp, #20
 800d8ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8b2:	4668      	mov	r0, sp
 800d8b4:	f000 fa9c 	bl	800ddf0 <__ieee754_rem_pio2>
 800d8b8:	f000 0003 	and.w	r0, r0, #3
 800d8bc:	2801      	cmp	r0, #1
 800d8be:	d00c      	beq.n	800d8da <sin+0x62>
 800d8c0:	2802      	cmp	r0, #2
 800d8c2:	d011      	beq.n	800d8e8 <sin+0x70>
 800d8c4:	b9f0      	cbnz	r0, 800d904 <sin+0x8c>
 800d8c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ca:	ed9d 0b00 	vldr	d0, [sp]
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	f000 f9ce 	bl	800dc70 <__kernel_sin>
 800d8d4:	ec51 0b10 	vmov	r0, r1, d0
 800d8d8:	e7e6      	b.n	800d8a8 <sin+0x30>
 800d8da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8de:	ed9d 0b00 	vldr	d0, [sp]
 800d8e2:	f000 f8fd 	bl	800dae0 <__kernel_cos>
 800d8e6:	e7f5      	b.n	800d8d4 <sin+0x5c>
 800d8e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ec:	ed9d 0b00 	vldr	d0, [sp]
 800d8f0:	2001      	movs	r0, #1
 800d8f2:	f000 f9bd 	bl	800dc70 <__kernel_sin>
 800d8f6:	ec53 2b10 	vmov	r2, r3, d0
 800d8fa:	ee10 0a10 	vmov	r0, s0
 800d8fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d902:	e7d1      	b.n	800d8a8 <sin+0x30>
 800d904:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d908:	ed9d 0b00 	vldr	d0, [sp]
 800d90c:	f000 f8e8 	bl	800dae0 <__kernel_cos>
 800d910:	e7f1      	b.n	800d8f6 <sin+0x7e>
 800d912:	bf00      	nop
 800d914:	f3af 8000 	nop.w
	...
 800d920:	3fe921fb 	.word	0x3fe921fb
 800d924:	7fefffff 	.word	0x7fefffff

0800d928 <__ieee754_sqrt>:
 800d928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	ec55 4b10 	vmov	r4, r5, d0
 800d930:	4e67      	ldr	r6, [pc, #412]	; (800dad0 <__ieee754_sqrt+0x1a8>)
 800d932:	43ae      	bics	r6, r5
 800d934:	ee10 0a10 	vmov	r0, s0
 800d938:	ee10 2a10 	vmov	r2, s0
 800d93c:	4629      	mov	r1, r5
 800d93e:	462b      	mov	r3, r5
 800d940:	d10d      	bne.n	800d95e <__ieee754_sqrt+0x36>
 800d942:	f7f2 fe81 	bl	8000648 <__aeabi_dmul>
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7f2 fcc5 	bl	80002dc <__adddf3>
 800d952:	4604      	mov	r4, r0
 800d954:	460d      	mov	r5, r1
 800d956:	ec45 4b10 	vmov	d0, r4, r5
 800d95a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95e:	2d00      	cmp	r5, #0
 800d960:	dc0b      	bgt.n	800d97a <__ieee754_sqrt+0x52>
 800d962:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d966:	4326      	orrs	r6, r4
 800d968:	d0f5      	beq.n	800d956 <__ieee754_sqrt+0x2e>
 800d96a:	b135      	cbz	r5, 800d97a <__ieee754_sqrt+0x52>
 800d96c:	f7f2 fcb4 	bl	80002d8 <__aeabi_dsub>
 800d970:	4602      	mov	r2, r0
 800d972:	460b      	mov	r3, r1
 800d974:	f7f2 ff92 	bl	800089c <__aeabi_ddiv>
 800d978:	e7eb      	b.n	800d952 <__ieee754_sqrt+0x2a>
 800d97a:	1509      	asrs	r1, r1, #20
 800d97c:	f000 808d 	beq.w	800da9a <__ieee754_sqrt+0x172>
 800d980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d984:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d98c:	07c9      	lsls	r1, r1, #31
 800d98e:	bf5c      	itt	pl
 800d990:	005b      	lslpl	r3, r3, #1
 800d992:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d996:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d99a:	bf58      	it	pl
 800d99c:	0052      	lslpl	r2, r2, #1
 800d99e:	2500      	movs	r5, #0
 800d9a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d9a4:	1076      	asrs	r6, r6, #1
 800d9a6:	0052      	lsls	r2, r2, #1
 800d9a8:	f04f 0e16 	mov.w	lr, #22
 800d9ac:	46ac      	mov	ip, r5
 800d9ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d9b2:	eb0c 0001 	add.w	r0, ip, r1
 800d9b6:	4298      	cmp	r0, r3
 800d9b8:	bfde      	ittt	le
 800d9ba:	1a1b      	suble	r3, r3, r0
 800d9bc:	eb00 0c01 	addle.w	ip, r0, r1
 800d9c0:	186d      	addle	r5, r5, r1
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	f1be 0e01 	subs.w	lr, lr, #1
 800d9c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d9cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d9d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d9d4:	d1ed      	bne.n	800d9b2 <__ieee754_sqrt+0x8a>
 800d9d6:	4674      	mov	r4, lr
 800d9d8:	2720      	movs	r7, #32
 800d9da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d9de:	4563      	cmp	r3, ip
 800d9e0:	eb01 000e 	add.w	r0, r1, lr
 800d9e4:	dc02      	bgt.n	800d9ec <__ieee754_sqrt+0xc4>
 800d9e6:	d113      	bne.n	800da10 <__ieee754_sqrt+0xe8>
 800d9e8:	4290      	cmp	r0, r2
 800d9ea:	d811      	bhi.n	800da10 <__ieee754_sqrt+0xe8>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	eb00 0e01 	add.w	lr, r0, r1
 800d9f2:	da57      	bge.n	800daa4 <__ieee754_sqrt+0x17c>
 800d9f4:	f1be 0f00 	cmp.w	lr, #0
 800d9f8:	db54      	blt.n	800daa4 <__ieee754_sqrt+0x17c>
 800d9fa:	f10c 0801 	add.w	r8, ip, #1
 800d9fe:	eba3 030c 	sub.w	r3, r3, ip
 800da02:	4290      	cmp	r0, r2
 800da04:	bf88      	it	hi
 800da06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800da0a:	1a12      	subs	r2, r2, r0
 800da0c:	440c      	add	r4, r1
 800da0e:	46c4      	mov	ip, r8
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	3f01      	subs	r7, #1
 800da14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800da18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800da1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800da20:	d1dd      	bne.n	800d9de <__ieee754_sqrt+0xb6>
 800da22:	4313      	orrs	r3, r2
 800da24:	d01b      	beq.n	800da5e <__ieee754_sqrt+0x136>
 800da26:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dad4 <__ieee754_sqrt+0x1ac>
 800da2a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dad8 <__ieee754_sqrt+0x1b0>
 800da2e:	e9da 0100 	ldrd	r0, r1, [sl]
 800da32:	e9db 2300 	ldrd	r2, r3, [fp]
 800da36:	f7f2 fc4f 	bl	80002d8 <__aeabi_dsub>
 800da3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800da3e:	4602      	mov	r2, r0
 800da40:	460b      	mov	r3, r1
 800da42:	4640      	mov	r0, r8
 800da44:	4649      	mov	r1, r9
 800da46:	f7f3 f87b 	bl	8000b40 <__aeabi_dcmple>
 800da4a:	b140      	cbz	r0, 800da5e <__ieee754_sqrt+0x136>
 800da4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800da50:	e9da 0100 	ldrd	r0, r1, [sl]
 800da54:	e9db 2300 	ldrd	r2, r3, [fp]
 800da58:	d126      	bne.n	800daa8 <__ieee754_sqrt+0x180>
 800da5a:	3501      	adds	r5, #1
 800da5c:	463c      	mov	r4, r7
 800da5e:	106a      	asrs	r2, r5, #1
 800da60:	0863      	lsrs	r3, r4, #1
 800da62:	07e9      	lsls	r1, r5, #31
 800da64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800da68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800da6c:	bf48      	it	mi
 800da6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800da72:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800da76:	461c      	mov	r4, r3
 800da78:	e76d      	b.n	800d956 <__ieee754_sqrt+0x2e>
 800da7a:	0ad3      	lsrs	r3, r2, #11
 800da7c:	3815      	subs	r0, #21
 800da7e:	0552      	lsls	r2, r2, #21
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0fa      	beq.n	800da7a <__ieee754_sqrt+0x152>
 800da84:	02dc      	lsls	r4, r3, #11
 800da86:	d50a      	bpl.n	800da9e <__ieee754_sqrt+0x176>
 800da88:	f1c1 0420 	rsb	r4, r1, #32
 800da8c:	fa22 f404 	lsr.w	r4, r2, r4
 800da90:	1e4d      	subs	r5, r1, #1
 800da92:	408a      	lsls	r2, r1
 800da94:	4323      	orrs	r3, r4
 800da96:	1b41      	subs	r1, r0, r5
 800da98:	e772      	b.n	800d980 <__ieee754_sqrt+0x58>
 800da9a:	4608      	mov	r0, r1
 800da9c:	e7f0      	b.n	800da80 <__ieee754_sqrt+0x158>
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	3101      	adds	r1, #1
 800daa2:	e7ef      	b.n	800da84 <__ieee754_sqrt+0x15c>
 800daa4:	46e0      	mov	r8, ip
 800daa6:	e7aa      	b.n	800d9fe <__ieee754_sqrt+0xd6>
 800daa8:	f7f2 fc18 	bl	80002dc <__adddf3>
 800daac:	e9da 8900 	ldrd	r8, r9, [sl]
 800dab0:	4602      	mov	r2, r0
 800dab2:	460b      	mov	r3, r1
 800dab4:	4640      	mov	r0, r8
 800dab6:	4649      	mov	r1, r9
 800dab8:	f7f3 f838 	bl	8000b2c <__aeabi_dcmplt>
 800dabc:	b120      	cbz	r0, 800dac8 <__ieee754_sqrt+0x1a0>
 800dabe:	1ca0      	adds	r0, r4, #2
 800dac0:	bf08      	it	eq
 800dac2:	3501      	addeq	r5, #1
 800dac4:	3402      	adds	r4, #2
 800dac6:	e7ca      	b.n	800da5e <__ieee754_sqrt+0x136>
 800dac8:	3401      	adds	r4, #1
 800daca:	f024 0401 	bic.w	r4, r4, #1
 800dace:	e7c6      	b.n	800da5e <__ieee754_sqrt+0x136>
 800dad0:	7ff00000 	.word	0x7ff00000
 800dad4:	20000138 	.word	0x20000138
 800dad8:	20000140 	.word	0x20000140
 800dadc:	00000000 	.word	0x00000000

0800dae0 <__kernel_cos>:
 800dae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae4:	ec57 6b10 	vmov	r6, r7, d0
 800dae8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800daec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800daf0:	ed8d 1b00 	vstr	d1, [sp]
 800daf4:	da07      	bge.n	800db06 <__kernel_cos+0x26>
 800daf6:	ee10 0a10 	vmov	r0, s0
 800dafa:	4639      	mov	r1, r7
 800dafc:	f7f3 f854 	bl	8000ba8 <__aeabi_d2iz>
 800db00:	2800      	cmp	r0, #0
 800db02:	f000 8088 	beq.w	800dc16 <__kernel_cos+0x136>
 800db06:	4632      	mov	r2, r6
 800db08:	463b      	mov	r3, r7
 800db0a:	4630      	mov	r0, r6
 800db0c:	4639      	mov	r1, r7
 800db0e:	f7f2 fd9b 	bl	8000648 <__aeabi_dmul>
 800db12:	4b51      	ldr	r3, [pc, #324]	; (800dc58 <__kernel_cos+0x178>)
 800db14:	2200      	movs	r2, #0
 800db16:	4604      	mov	r4, r0
 800db18:	460d      	mov	r5, r1
 800db1a:	f7f2 fd95 	bl	8000648 <__aeabi_dmul>
 800db1e:	a340      	add	r3, pc, #256	; (adr r3, 800dc20 <__kernel_cos+0x140>)
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	4682      	mov	sl, r0
 800db26:	468b      	mov	fp, r1
 800db28:	4620      	mov	r0, r4
 800db2a:	4629      	mov	r1, r5
 800db2c:	f7f2 fd8c 	bl	8000648 <__aeabi_dmul>
 800db30:	a33d      	add	r3, pc, #244	; (adr r3, 800dc28 <__kernel_cos+0x148>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fbd1 	bl	80002dc <__adddf3>
 800db3a:	4622      	mov	r2, r4
 800db3c:	462b      	mov	r3, r5
 800db3e:	f7f2 fd83 	bl	8000648 <__aeabi_dmul>
 800db42:	a33b      	add	r3, pc, #236	; (adr r3, 800dc30 <__kernel_cos+0x150>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	f7f2 fbc6 	bl	80002d8 <__aeabi_dsub>
 800db4c:	4622      	mov	r2, r4
 800db4e:	462b      	mov	r3, r5
 800db50:	f7f2 fd7a 	bl	8000648 <__aeabi_dmul>
 800db54:	a338      	add	r3, pc, #224	; (adr r3, 800dc38 <__kernel_cos+0x158>)
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f7f2 fbbf 	bl	80002dc <__adddf3>
 800db5e:	4622      	mov	r2, r4
 800db60:	462b      	mov	r3, r5
 800db62:	f7f2 fd71 	bl	8000648 <__aeabi_dmul>
 800db66:	a336      	add	r3, pc, #216	; (adr r3, 800dc40 <__kernel_cos+0x160>)
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	f7f2 fbb4 	bl	80002d8 <__aeabi_dsub>
 800db70:	4622      	mov	r2, r4
 800db72:	462b      	mov	r3, r5
 800db74:	f7f2 fd68 	bl	8000648 <__aeabi_dmul>
 800db78:	a333      	add	r3, pc, #204	; (adr r3, 800dc48 <__kernel_cos+0x168>)
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f7f2 fbad 	bl	80002dc <__adddf3>
 800db82:	4622      	mov	r2, r4
 800db84:	462b      	mov	r3, r5
 800db86:	f7f2 fd5f 	bl	8000648 <__aeabi_dmul>
 800db8a:	4622      	mov	r2, r4
 800db8c:	462b      	mov	r3, r5
 800db8e:	f7f2 fd5b 	bl	8000648 <__aeabi_dmul>
 800db92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	4630      	mov	r0, r6
 800db9c:	4639      	mov	r1, r7
 800db9e:	f7f2 fd53 	bl	8000648 <__aeabi_dmul>
 800dba2:	460b      	mov	r3, r1
 800dba4:	4602      	mov	r2, r0
 800dba6:	4629      	mov	r1, r5
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7f2 fb95 	bl	80002d8 <__aeabi_dsub>
 800dbae:	4b2b      	ldr	r3, [pc, #172]	; (800dc5c <__kernel_cos+0x17c>)
 800dbb0:	4598      	cmp	r8, r3
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	dc10      	bgt.n	800dbda <__kernel_cos+0xfa>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4650      	mov	r0, sl
 800dbbe:	4659      	mov	r1, fp
 800dbc0:	f7f2 fb8a 	bl	80002d8 <__aeabi_dsub>
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4926      	ldr	r1, [pc, #152]	; (800dc60 <__kernel_cos+0x180>)
 800dbc8:	4602      	mov	r2, r0
 800dbca:	2000      	movs	r0, #0
 800dbcc:	f7f2 fb84 	bl	80002d8 <__aeabi_dsub>
 800dbd0:	ec41 0b10 	vmov	d0, r0, r1
 800dbd4:	b003      	add	sp, #12
 800dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbda:	4b22      	ldr	r3, [pc, #136]	; (800dc64 <__kernel_cos+0x184>)
 800dbdc:	4920      	ldr	r1, [pc, #128]	; (800dc60 <__kernel_cos+0x180>)
 800dbde:	4598      	cmp	r8, r3
 800dbe0:	bfcc      	ite	gt
 800dbe2:	4d21      	ldrgt	r5, [pc, #132]	; (800dc68 <__kernel_cos+0x188>)
 800dbe4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dbe8:	2400      	movs	r4, #0
 800dbea:	4622      	mov	r2, r4
 800dbec:	462b      	mov	r3, r5
 800dbee:	2000      	movs	r0, #0
 800dbf0:	f7f2 fb72 	bl	80002d8 <__aeabi_dsub>
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	4689      	mov	r9, r1
 800dbfa:	462b      	mov	r3, r5
 800dbfc:	4650      	mov	r0, sl
 800dbfe:	4659      	mov	r1, fp
 800dc00:	f7f2 fb6a 	bl	80002d8 <__aeabi_dsub>
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	f7f2 fb66 	bl	80002d8 <__aeabi_dsub>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	e7da      	b.n	800dbcc <__kernel_cos+0xec>
 800dc16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dc50 <__kernel_cos+0x170>
 800dc1a:	e7db      	b.n	800dbd4 <__kernel_cos+0xf4>
 800dc1c:	f3af 8000 	nop.w
 800dc20:	be8838d4 	.word	0xbe8838d4
 800dc24:	bda8fae9 	.word	0xbda8fae9
 800dc28:	bdb4b1c4 	.word	0xbdb4b1c4
 800dc2c:	3e21ee9e 	.word	0x3e21ee9e
 800dc30:	809c52ad 	.word	0x809c52ad
 800dc34:	3e927e4f 	.word	0x3e927e4f
 800dc38:	19cb1590 	.word	0x19cb1590
 800dc3c:	3efa01a0 	.word	0x3efa01a0
 800dc40:	16c15177 	.word	0x16c15177
 800dc44:	3f56c16c 	.word	0x3f56c16c
 800dc48:	5555554c 	.word	0x5555554c
 800dc4c:	3fa55555 	.word	0x3fa55555
 800dc50:	00000000 	.word	0x00000000
 800dc54:	3ff00000 	.word	0x3ff00000
 800dc58:	3fe00000 	.word	0x3fe00000
 800dc5c:	3fd33332 	.word	0x3fd33332
 800dc60:	3ff00000 	.word	0x3ff00000
 800dc64:	3fe90000 	.word	0x3fe90000
 800dc68:	3fd20000 	.word	0x3fd20000
 800dc6c:	00000000 	.word	0x00000000

0800dc70 <__kernel_sin>:
 800dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	ed2d 8b04 	vpush	{d8-d9}
 800dc78:	eeb0 8a41 	vmov.f32	s16, s2
 800dc7c:	eef0 8a61 	vmov.f32	s17, s3
 800dc80:	ec55 4b10 	vmov	r4, r5, d0
 800dc84:	b083      	sub	sp, #12
 800dc86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dc8e:	9001      	str	r0, [sp, #4]
 800dc90:	da06      	bge.n	800dca0 <__kernel_sin+0x30>
 800dc92:	ee10 0a10 	vmov	r0, s0
 800dc96:	4629      	mov	r1, r5
 800dc98:	f7f2 ff86 	bl	8000ba8 <__aeabi_d2iz>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d051      	beq.n	800dd44 <__kernel_sin+0xd4>
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	4620      	mov	r0, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	f7f2 fcce 	bl	8000648 <__aeabi_dmul>
 800dcac:	4682      	mov	sl, r0
 800dcae:	468b      	mov	fp, r1
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	f7f2 fcc6 	bl	8000648 <__aeabi_dmul>
 800dcbc:	a341      	add	r3, pc, #260	; (adr r3, 800ddc4 <__kernel_sin+0x154>)
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	4680      	mov	r8, r0
 800dcc4:	4689      	mov	r9, r1
 800dcc6:	4650      	mov	r0, sl
 800dcc8:	4659      	mov	r1, fp
 800dcca:	f7f2 fcbd 	bl	8000648 <__aeabi_dmul>
 800dcce:	a33f      	add	r3, pc, #252	; (adr r3, 800ddcc <__kernel_sin+0x15c>)
 800dcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd4:	f7f2 fb00 	bl	80002d8 <__aeabi_dsub>
 800dcd8:	4652      	mov	r2, sl
 800dcda:	465b      	mov	r3, fp
 800dcdc:	f7f2 fcb4 	bl	8000648 <__aeabi_dmul>
 800dce0:	a33c      	add	r3, pc, #240	; (adr r3, 800ddd4 <__kernel_sin+0x164>)
 800dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce6:	f7f2 faf9 	bl	80002dc <__adddf3>
 800dcea:	4652      	mov	r2, sl
 800dcec:	465b      	mov	r3, fp
 800dcee:	f7f2 fcab 	bl	8000648 <__aeabi_dmul>
 800dcf2:	a33a      	add	r3, pc, #232	; (adr r3, 800dddc <__kernel_sin+0x16c>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	f7f2 faee 	bl	80002d8 <__aeabi_dsub>
 800dcfc:	4652      	mov	r2, sl
 800dcfe:	465b      	mov	r3, fp
 800dd00:	f7f2 fca2 	bl	8000648 <__aeabi_dmul>
 800dd04:	a337      	add	r3, pc, #220	; (adr r3, 800dde4 <__kernel_sin+0x174>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	f7f2 fae7 	bl	80002dc <__adddf3>
 800dd0e:	9b01      	ldr	r3, [sp, #4]
 800dd10:	4606      	mov	r6, r0
 800dd12:	460f      	mov	r7, r1
 800dd14:	b9eb      	cbnz	r3, 800dd52 <__kernel_sin+0xe2>
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4650      	mov	r0, sl
 800dd1c:	4659      	mov	r1, fp
 800dd1e:	f7f2 fc93 	bl	8000648 <__aeabi_dmul>
 800dd22:	a325      	add	r3, pc, #148	; (adr r3, 800ddb8 <__kernel_sin+0x148>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f7f2 fad6 	bl	80002d8 <__aeabi_dsub>
 800dd2c:	4642      	mov	r2, r8
 800dd2e:	464b      	mov	r3, r9
 800dd30:	f7f2 fc8a 	bl	8000648 <__aeabi_dmul>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4620      	mov	r0, r4
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	f7f2 face 	bl	80002dc <__adddf3>
 800dd40:	4604      	mov	r4, r0
 800dd42:	460d      	mov	r5, r1
 800dd44:	ec45 4b10 	vmov	d0, r4, r5
 800dd48:	b003      	add	sp, #12
 800dd4a:	ecbd 8b04 	vpop	{d8-d9}
 800dd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd52:	4b1b      	ldr	r3, [pc, #108]	; (800ddc0 <__kernel_sin+0x150>)
 800dd54:	ec51 0b18 	vmov	r0, r1, d8
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f7f2 fc75 	bl	8000648 <__aeabi_dmul>
 800dd5e:	4632      	mov	r2, r6
 800dd60:	ec41 0b19 	vmov	d9, r0, r1
 800dd64:	463b      	mov	r3, r7
 800dd66:	4640      	mov	r0, r8
 800dd68:	4649      	mov	r1, r9
 800dd6a:	f7f2 fc6d 	bl	8000648 <__aeabi_dmul>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	ec51 0b19 	vmov	r0, r1, d9
 800dd76:	f7f2 faaf 	bl	80002d8 <__aeabi_dsub>
 800dd7a:	4652      	mov	r2, sl
 800dd7c:	465b      	mov	r3, fp
 800dd7e:	f7f2 fc63 	bl	8000648 <__aeabi_dmul>
 800dd82:	ec53 2b18 	vmov	r2, r3, d8
 800dd86:	f7f2 faa7 	bl	80002d8 <__aeabi_dsub>
 800dd8a:	a30b      	add	r3, pc, #44	; (adr r3, 800ddb8 <__kernel_sin+0x148>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	4606      	mov	r6, r0
 800dd92:	460f      	mov	r7, r1
 800dd94:	4640      	mov	r0, r8
 800dd96:	4649      	mov	r1, r9
 800dd98:	f7f2 fc56 	bl	8000648 <__aeabi_dmul>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 fa9a 	bl	80002dc <__adddf3>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4620      	mov	r0, r4
 800ddae:	4629      	mov	r1, r5
 800ddb0:	f7f2 fa92 	bl	80002d8 <__aeabi_dsub>
 800ddb4:	e7c4      	b.n	800dd40 <__kernel_sin+0xd0>
 800ddb6:	bf00      	nop
 800ddb8:	55555549 	.word	0x55555549
 800ddbc:	3fc55555 	.word	0x3fc55555
 800ddc0:	3fe00000 	.word	0x3fe00000
 800ddc4:	5acfd57c 	.word	0x5acfd57c
 800ddc8:	3de5d93a 	.word	0x3de5d93a
 800ddcc:	8a2b9ceb 	.word	0x8a2b9ceb
 800ddd0:	3e5ae5e6 	.word	0x3e5ae5e6
 800ddd4:	57b1fe7d 	.word	0x57b1fe7d
 800ddd8:	3ec71de3 	.word	0x3ec71de3
 800dddc:	19c161d5 	.word	0x19c161d5
 800dde0:	3f2a01a0 	.word	0x3f2a01a0
 800dde4:	1110f8a6 	.word	0x1110f8a6
 800dde8:	3f811111 	.word	0x3f811111
 800ddec:	00000000 	.word	0x00000000

0800ddf0 <__ieee754_rem_pio2>:
 800ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	ed2d 8b02 	vpush	{d8}
 800ddf8:	ec55 4b10 	vmov	r4, r5, d0
 800ddfc:	4bca      	ldr	r3, [pc, #808]	; (800e128 <__ieee754_rem_pio2+0x338>)
 800ddfe:	b08b      	sub	sp, #44	; 0x2c
 800de00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800de04:	4598      	cmp	r8, r3
 800de06:	4682      	mov	sl, r0
 800de08:	9502      	str	r5, [sp, #8]
 800de0a:	dc08      	bgt.n	800de1e <__ieee754_rem_pio2+0x2e>
 800de0c:	2200      	movs	r2, #0
 800de0e:	2300      	movs	r3, #0
 800de10:	ed80 0b00 	vstr	d0, [r0]
 800de14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de18:	f04f 0b00 	mov.w	fp, #0
 800de1c:	e028      	b.n	800de70 <__ieee754_rem_pio2+0x80>
 800de1e:	4bc3      	ldr	r3, [pc, #780]	; (800e12c <__ieee754_rem_pio2+0x33c>)
 800de20:	4598      	cmp	r8, r3
 800de22:	dc78      	bgt.n	800df16 <__ieee754_rem_pio2+0x126>
 800de24:	9b02      	ldr	r3, [sp, #8]
 800de26:	4ec2      	ldr	r6, [pc, #776]	; (800e130 <__ieee754_rem_pio2+0x340>)
 800de28:	2b00      	cmp	r3, #0
 800de2a:	ee10 0a10 	vmov	r0, s0
 800de2e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	4629      	mov	r1, r5
 800de36:	dd39      	ble.n	800deac <__ieee754_rem_pio2+0xbc>
 800de38:	f7f2 fa4e 	bl	80002d8 <__aeabi_dsub>
 800de3c:	45b0      	cmp	r8, r6
 800de3e:	4604      	mov	r4, r0
 800de40:	460d      	mov	r5, r1
 800de42:	d01b      	beq.n	800de7c <__ieee754_rem_pio2+0x8c>
 800de44:	a3ac      	add	r3, pc, #688	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa45 	bl	80002d8 <__aeabi_dsub>
 800de4e:	4602      	mov	r2, r0
 800de50:	460b      	mov	r3, r1
 800de52:	e9ca 2300 	strd	r2, r3, [sl]
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fa3d 	bl	80002d8 <__aeabi_dsub>
 800de5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800de60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de64:	f7f2 fa38 	bl	80002d8 <__aeabi_dsub>
 800de68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de6c:	f04f 0b01 	mov.w	fp, #1
 800de70:	4658      	mov	r0, fp
 800de72:	b00b      	add	sp, #44	; 0x2c
 800de74:	ecbd 8b02 	vpop	{d8}
 800de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e100 <__ieee754_rem_pio2+0x310>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	f7f2 fa29 	bl	80002d8 <__aeabi_dsub>
 800de86:	a3a0      	add	r3, pc, #640	; (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	4604      	mov	r4, r0
 800de8e:	460d      	mov	r5, r1
 800de90:	f7f2 fa22 	bl	80002d8 <__aeabi_dsub>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	e9ca 2300 	strd	r2, r3, [sl]
 800de9c:	4620      	mov	r0, r4
 800de9e:	4629      	mov	r1, r5
 800dea0:	f7f2 fa1a 	bl	80002d8 <__aeabi_dsub>
 800dea4:	a398      	add	r3, pc, #608	; (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	e7db      	b.n	800de64 <__ieee754_rem_pio2+0x74>
 800deac:	f7f2 fa16 	bl	80002dc <__adddf3>
 800deb0:	45b0      	cmp	r8, r6
 800deb2:	4604      	mov	r4, r0
 800deb4:	460d      	mov	r5, r1
 800deb6:	d016      	beq.n	800dee6 <__ieee754_rem_pio2+0xf6>
 800deb8:	a38f      	add	r3, pc, #572	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	f7f2 fa0d 	bl	80002dc <__adddf3>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	e9ca 2300 	strd	r2, r3, [sl]
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	f7f2 fa03 	bl	80002d8 <__aeabi_dsub>
 800ded2:	a389      	add	r3, pc, #548	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 fa00 	bl	80002dc <__adddf3>
 800dedc:	f04f 3bff 	mov.w	fp, #4294967295
 800dee0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dee4:	e7c4      	b.n	800de70 <__ieee754_rem_pio2+0x80>
 800dee6:	a386      	add	r3, pc, #536	; (adr r3, 800e100 <__ieee754_rem_pio2+0x310>)
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f7f2 f9f6 	bl	80002dc <__adddf3>
 800def0:	a385      	add	r3, pc, #532	; (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	4604      	mov	r4, r0
 800def8:	460d      	mov	r5, r1
 800defa:	f7f2 f9ef 	bl	80002dc <__adddf3>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	e9ca 2300 	strd	r2, r3, [sl]
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	f7f2 f9e5 	bl	80002d8 <__aeabi_dsub>
 800df0e:	a37e      	add	r3, pc, #504	; (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	e7e0      	b.n	800ded8 <__ieee754_rem_pio2+0xe8>
 800df16:	4b87      	ldr	r3, [pc, #540]	; (800e134 <__ieee754_rem_pio2+0x344>)
 800df18:	4598      	cmp	r8, r3
 800df1a:	f300 80d8 	bgt.w	800e0ce <__ieee754_rem_pio2+0x2de>
 800df1e:	f000 f96d 	bl	800e1fc <fabs>
 800df22:	ec55 4b10 	vmov	r4, r5, d0
 800df26:	ee10 0a10 	vmov	r0, s0
 800df2a:	a379      	add	r3, pc, #484	; (adr r3, 800e110 <__ieee754_rem_pio2+0x320>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 fb89 	bl	8000648 <__aeabi_dmul>
 800df36:	4b80      	ldr	r3, [pc, #512]	; (800e138 <__ieee754_rem_pio2+0x348>)
 800df38:	2200      	movs	r2, #0
 800df3a:	f7f2 f9cf 	bl	80002dc <__adddf3>
 800df3e:	f7f2 fe33 	bl	8000ba8 <__aeabi_d2iz>
 800df42:	4683      	mov	fp, r0
 800df44:	f7f2 fb16 	bl	8000574 <__aeabi_i2d>
 800df48:	4602      	mov	r2, r0
 800df4a:	460b      	mov	r3, r1
 800df4c:	ec43 2b18 	vmov	d8, r2, r3
 800df50:	a367      	add	r3, pc, #412	; (adr r3, 800e0f0 <__ieee754_rem_pio2+0x300>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 fb77 	bl	8000648 <__aeabi_dmul>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4620      	mov	r0, r4
 800df60:	4629      	mov	r1, r5
 800df62:	f7f2 f9b9 	bl	80002d8 <__aeabi_dsub>
 800df66:	a364      	add	r3, pc, #400	; (adr r3, 800e0f8 <__ieee754_rem_pio2+0x308>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	4606      	mov	r6, r0
 800df6e:	460f      	mov	r7, r1
 800df70:	ec51 0b18 	vmov	r0, r1, d8
 800df74:	f7f2 fb68 	bl	8000648 <__aeabi_dmul>
 800df78:	f1bb 0f1f 	cmp.w	fp, #31
 800df7c:	4604      	mov	r4, r0
 800df7e:	460d      	mov	r5, r1
 800df80:	dc0d      	bgt.n	800df9e <__ieee754_rem_pio2+0x1ae>
 800df82:	4b6e      	ldr	r3, [pc, #440]	; (800e13c <__ieee754_rem_pio2+0x34c>)
 800df84:	f10b 32ff 	add.w	r2, fp, #4294967295
 800df88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8c:	4543      	cmp	r3, r8
 800df8e:	d006      	beq.n	800df9e <__ieee754_rem_pio2+0x1ae>
 800df90:	4622      	mov	r2, r4
 800df92:	462b      	mov	r3, r5
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 f99e 	bl	80002d8 <__aeabi_dsub>
 800df9c:	e00e      	b.n	800dfbc <__ieee754_rem_pio2+0x1cc>
 800df9e:	462b      	mov	r3, r5
 800dfa0:	4622      	mov	r2, r4
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 f997 	bl	80002d8 <__aeabi_dsub>
 800dfaa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dfb4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dfb8:	2b10      	cmp	r3, #16
 800dfba:	dc02      	bgt.n	800dfc2 <__ieee754_rem_pio2+0x1d2>
 800dfbc:	e9ca 0100 	strd	r0, r1, [sl]
 800dfc0:	e039      	b.n	800e036 <__ieee754_rem_pio2+0x246>
 800dfc2:	a34f      	add	r3, pc, #316	; (adr r3, 800e100 <__ieee754_rem_pio2+0x310>)
 800dfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc8:	ec51 0b18 	vmov	r0, r1, d8
 800dfcc:	f7f2 fb3c 	bl	8000648 <__aeabi_dmul>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 f97c 	bl	80002d8 <__aeabi_dsub>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	4680      	mov	r8, r0
 800dfe6:	4689      	mov	r9, r1
 800dfe8:	4630      	mov	r0, r6
 800dfea:	4639      	mov	r1, r7
 800dfec:	f7f2 f974 	bl	80002d8 <__aeabi_dsub>
 800dff0:	4622      	mov	r2, r4
 800dff2:	462b      	mov	r3, r5
 800dff4:	f7f2 f970 	bl	80002d8 <__aeabi_dsub>
 800dff8:	a343      	add	r3, pc, #268	; (adr r3, 800e108 <__ieee754_rem_pio2+0x318>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	4604      	mov	r4, r0
 800e000:	460d      	mov	r5, r1
 800e002:	ec51 0b18 	vmov	r0, r1, d8
 800e006:	f7f2 fb1f 	bl	8000648 <__aeabi_dmul>
 800e00a:	4622      	mov	r2, r4
 800e00c:	462b      	mov	r3, r5
 800e00e:	f7f2 f963 	bl	80002d8 <__aeabi_dsub>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4604      	mov	r4, r0
 800e018:	460d      	mov	r5, r1
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 f95b 	bl	80002d8 <__aeabi_dsub>
 800e022:	9a03      	ldr	r2, [sp, #12]
 800e024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	2b31      	cmp	r3, #49	; 0x31
 800e02c:	dc24      	bgt.n	800e078 <__ieee754_rem_pio2+0x288>
 800e02e:	e9ca 0100 	strd	r0, r1, [sl]
 800e032:	4646      	mov	r6, r8
 800e034:	464f      	mov	r7, r9
 800e036:	e9da 8900 	ldrd	r8, r9, [sl]
 800e03a:	4630      	mov	r0, r6
 800e03c:	4642      	mov	r2, r8
 800e03e:	464b      	mov	r3, r9
 800e040:	4639      	mov	r1, r7
 800e042:	f7f2 f949 	bl	80002d8 <__aeabi_dsub>
 800e046:	462b      	mov	r3, r5
 800e048:	4622      	mov	r2, r4
 800e04a:	f7f2 f945 	bl	80002d8 <__aeabi_dsub>
 800e04e:	9b02      	ldr	r3, [sp, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e056:	f6bf af0b 	bge.w	800de70 <__ieee754_rem_pio2+0x80>
 800e05a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e05e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e066:	f8ca 8000 	str.w	r8, [sl]
 800e06a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e06e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e072:	f1cb 0b00 	rsb	fp, fp, #0
 800e076:	e6fb      	b.n	800de70 <__ieee754_rem_pio2+0x80>
 800e078:	a327      	add	r3, pc, #156	; (adr r3, 800e118 <__ieee754_rem_pio2+0x328>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	ec51 0b18 	vmov	r0, r1, d8
 800e082:	f7f2 fae1 	bl	8000648 <__aeabi_dmul>
 800e086:	4604      	mov	r4, r0
 800e088:	460d      	mov	r5, r1
 800e08a:	4602      	mov	r2, r0
 800e08c:	460b      	mov	r3, r1
 800e08e:	4640      	mov	r0, r8
 800e090:	4649      	mov	r1, r9
 800e092:	f7f2 f921 	bl	80002d8 <__aeabi_dsub>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4606      	mov	r6, r0
 800e09c:	460f      	mov	r7, r1
 800e09e:	4640      	mov	r0, r8
 800e0a0:	4649      	mov	r1, r9
 800e0a2:	f7f2 f919 	bl	80002d8 <__aeabi_dsub>
 800e0a6:	4622      	mov	r2, r4
 800e0a8:	462b      	mov	r3, r5
 800e0aa:	f7f2 f915 	bl	80002d8 <__aeabi_dsub>
 800e0ae:	a31c      	add	r3, pc, #112	; (adr r3, 800e120 <__ieee754_rem_pio2+0x330>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	ec51 0b18 	vmov	r0, r1, d8
 800e0bc:	f7f2 fac4 	bl	8000648 <__aeabi_dmul>
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	462b      	mov	r3, r5
 800e0c4:	f7f2 f908 	bl	80002d8 <__aeabi_dsub>
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	e760      	b.n	800df90 <__ieee754_rem_pio2+0x1a0>
 800e0ce:	4b1c      	ldr	r3, [pc, #112]	; (800e140 <__ieee754_rem_pio2+0x350>)
 800e0d0:	4598      	cmp	r8, r3
 800e0d2:	dd37      	ble.n	800e144 <__ieee754_rem_pio2+0x354>
 800e0d4:	ee10 2a10 	vmov	r2, s0
 800e0d8:	462b      	mov	r3, r5
 800e0da:	4620      	mov	r0, r4
 800e0dc:	4629      	mov	r1, r5
 800e0de:	f7f2 f8fb 	bl	80002d8 <__aeabi_dsub>
 800e0e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e0e6:	e9ca 0100 	strd	r0, r1, [sl]
 800e0ea:	e695      	b.n	800de18 <__ieee754_rem_pio2+0x28>
 800e0ec:	f3af 8000 	nop.w
 800e0f0:	54400000 	.word	0x54400000
 800e0f4:	3ff921fb 	.word	0x3ff921fb
 800e0f8:	1a626331 	.word	0x1a626331
 800e0fc:	3dd0b461 	.word	0x3dd0b461
 800e100:	1a600000 	.word	0x1a600000
 800e104:	3dd0b461 	.word	0x3dd0b461
 800e108:	2e037073 	.word	0x2e037073
 800e10c:	3ba3198a 	.word	0x3ba3198a
 800e110:	6dc9c883 	.word	0x6dc9c883
 800e114:	3fe45f30 	.word	0x3fe45f30
 800e118:	2e000000 	.word	0x2e000000
 800e11c:	3ba3198a 	.word	0x3ba3198a
 800e120:	252049c1 	.word	0x252049c1
 800e124:	397b839a 	.word	0x397b839a
 800e128:	3fe921fb 	.word	0x3fe921fb
 800e12c:	4002d97b 	.word	0x4002d97b
 800e130:	3ff921fb 	.word	0x3ff921fb
 800e134:	413921fb 	.word	0x413921fb
 800e138:	3fe00000 	.word	0x3fe00000
 800e13c:	0800eb60 	.word	0x0800eb60
 800e140:	7fefffff 	.word	0x7fefffff
 800e144:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e148:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e14c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e150:	4620      	mov	r0, r4
 800e152:	460d      	mov	r5, r1
 800e154:	f7f2 fd28 	bl	8000ba8 <__aeabi_d2iz>
 800e158:	f7f2 fa0c 	bl	8000574 <__aeabi_i2d>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	4620      	mov	r0, r4
 800e162:	4629      	mov	r1, r5
 800e164:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e168:	f7f2 f8b6 	bl	80002d8 <__aeabi_dsub>
 800e16c:	4b21      	ldr	r3, [pc, #132]	; (800e1f4 <__ieee754_rem_pio2+0x404>)
 800e16e:	2200      	movs	r2, #0
 800e170:	f7f2 fa6a 	bl	8000648 <__aeabi_dmul>
 800e174:	460d      	mov	r5, r1
 800e176:	4604      	mov	r4, r0
 800e178:	f7f2 fd16 	bl	8000ba8 <__aeabi_d2iz>
 800e17c:	f7f2 f9fa 	bl	8000574 <__aeabi_i2d>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4620      	mov	r0, r4
 800e186:	4629      	mov	r1, r5
 800e188:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e18c:	f7f2 f8a4 	bl	80002d8 <__aeabi_dsub>
 800e190:	4b18      	ldr	r3, [pc, #96]	; (800e1f4 <__ieee754_rem_pio2+0x404>)
 800e192:	2200      	movs	r2, #0
 800e194:	f7f2 fa58 	bl	8000648 <__aeabi_dmul>
 800e198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e19c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e1a0:	2703      	movs	r7, #3
 800e1a2:	2400      	movs	r4, #0
 800e1a4:	2500      	movs	r5, #0
 800e1a6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	46b9      	mov	r9, r7
 800e1b0:	3f01      	subs	r7, #1
 800e1b2:	f7f2 fcb1 	bl	8000b18 <__aeabi_dcmpeq>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d1f5      	bne.n	800e1a6 <__ieee754_rem_pio2+0x3b6>
 800e1ba:	4b0f      	ldr	r3, [pc, #60]	; (800e1f8 <__ieee754_rem_pio2+0x408>)
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	2302      	movs	r3, #2
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	464b      	mov	r3, r9
 800e1c6:	4651      	mov	r1, sl
 800e1c8:	a804      	add	r0, sp, #16
 800e1ca:	f000 f821 	bl	800e210 <__kernel_rem_pio2>
 800e1ce:	9b02      	ldr	r3, [sp, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	4683      	mov	fp, r0
 800e1d4:	f6bf ae4c 	bge.w	800de70 <__ieee754_rem_pio2+0x80>
 800e1d8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e1dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1e0:	e9ca 2300 	strd	r2, r3, [sl]
 800e1e4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1ec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e1f0:	e73f      	b.n	800e072 <__ieee754_rem_pio2+0x282>
 800e1f2:	bf00      	nop
 800e1f4:	41700000 	.word	0x41700000
 800e1f8:	0800ebe0 	.word	0x0800ebe0

0800e1fc <fabs>:
 800e1fc:	ec51 0b10 	vmov	r0, r1, d0
 800e200:	ee10 2a10 	vmov	r2, s0
 800e204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e208:	ec43 2b10 	vmov	d0, r2, r3
 800e20c:	4770      	bx	lr
	...

0800e210 <__kernel_rem_pio2>:
 800e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e214:	ed2d 8b02 	vpush	{d8}
 800e218:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e21c:	f112 0f14 	cmn.w	r2, #20
 800e220:	9306      	str	r3, [sp, #24]
 800e222:	9104      	str	r1, [sp, #16]
 800e224:	4bc2      	ldr	r3, [pc, #776]	; (800e530 <__kernel_rem_pio2+0x320>)
 800e226:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e228:	9009      	str	r0, [sp, #36]	; 0x24
 800e22a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	9b06      	ldr	r3, [sp, #24]
 800e232:	f103 33ff 	add.w	r3, r3, #4294967295
 800e236:	bfa8      	it	ge
 800e238:	1ed4      	subge	r4, r2, #3
 800e23a:	9305      	str	r3, [sp, #20]
 800e23c:	bfb2      	itee	lt
 800e23e:	2400      	movlt	r4, #0
 800e240:	2318      	movge	r3, #24
 800e242:	fb94 f4f3 	sdivge	r4, r4, r3
 800e246:	f06f 0317 	mvn.w	r3, #23
 800e24a:	fb04 3303 	mla	r3, r4, r3, r3
 800e24e:	eb03 0a02 	add.w	sl, r3, r2
 800e252:	9b00      	ldr	r3, [sp, #0]
 800e254:	9a05      	ldr	r2, [sp, #20]
 800e256:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e520 <__kernel_rem_pio2+0x310>
 800e25a:	eb03 0802 	add.w	r8, r3, r2
 800e25e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e260:	1aa7      	subs	r7, r4, r2
 800e262:	ae20      	add	r6, sp, #128	; 0x80
 800e264:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e268:	2500      	movs	r5, #0
 800e26a:	4545      	cmp	r5, r8
 800e26c:	dd13      	ble.n	800e296 <__kernel_rem_pio2+0x86>
 800e26e:	9b06      	ldr	r3, [sp, #24]
 800e270:	aa20      	add	r2, sp, #128	; 0x80
 800e272:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e276:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e27a:	f04f 0800 	mov.w	r8, #0
 800e27e:	9b00      	ldr	r3, [sp, #0]
 800e280:	4598      	cmp	r8, r3
 800e282:	dc31      	bgt.n	800e2e8 <__kernel_rem_pio2+0xd8>
 800e284:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e520 <__kernel_rem_pio2+0x310>
 800e288:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e28c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e290:	462f      	mov	r7, r5
 800e292:	2600      	movs	r6, #0
 800e294:	e01b      	b.n	800e2ce <__kernel_rem_pio2+0xbe>
 800e296:	42ef      	cmn	r7, r5
 800e298:	d407      	bmi.n	800e2aa <__kernel_rem_pio2+0x9a>
 800e29a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e29e:	f7f2 f969 	bl	8000574 <__aeabi_i2d>
 800e2a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e2a6:	3501      	adds	r5, #1
 800e2a8:	e7df      	b.n	800e26a <__kernel_rem_pio2+0x5a>
 800e2aa:	ec51 0b18 	vmov	r0, r1, d8
 800e2ae:	e7f8      	b.n	800e2a2 <__kernel_rem_pio2+0x92>
 800e2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e2b8:	f7f2 f9c6 	bl	8000648 <__aeabi_dmul>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2c4:	f7f2 f80a 	bl	80002dc <__adddf3>
 800e2c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2cc:	3601      	adds	r6, #1
 800e2ce:	9b05      	ldr	r3, [sp, #20]
 800e2d0:	429e      	cmp	r6, r3
 800e2d2:	f1a7 0708 	sub.w	r7, r7, #8
 800e2d6:	ddeb      	ble.n	800e2b0 <__kernel_rem_pio2+0xa0>
 800e2d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2dc:	f108 0801 	add.w	r8, r8, #1
 800e2e0:	ecab 7b02 	vstmia	fp!, {d7}
 800e2e4:	3508      	adds	r5, #8
 800e2e6:	e7ca      	b.n	800e27e <__kernel_rem_pio2+0x6e>
 800e2e8:	9b00      	ldr	r3, [sp, #0]
 800e2ea:	aa0c      	add	r2, sp, #48	; 0x30
 800e2ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e2f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2f8:	9c00      	ldr	r4, [sp, #0]
 800e2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e2fc:	00e3      	lsls	r3, r4, #3
 800e2fe:	9308      	str	r3, [sp, #32]
 800e300:	ab98      	add	r3, sp, #608	; 0x260
 800e302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e306:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e30a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e30e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e310:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e314:	46c3      	mov	fp, r8
 800e316:	46a1      	mov	r9, r4
 800e318:	f1b9 0f00 	cmp.w	r9, #0
 800e31c:	f1a5 0508 	sub.w	r5, r5, #8
 800e320:	dc77      	bgt.n	800e412 <__kernel_rem_pio2+0x202>
 800e322:	ec47 6b10 	vmov	d0, r6, r7
 800e326:	4650      	mov	r0, sl
 800e328:	f000 fac2 	bl	800e8b0 <scalbn>
 800e32c:	ec57 6b10 	vmov	r6, r7, d0
 800e330:	2200      	movs	r2, #0
 800e332:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e336:	ee10 0a10 	vmov	r0, s0
 800e33a:	4639      	mov	r1, r7
 800e33c:	f7f2 f984 	bl	8000648 <__aeabi_dmul>
 800e340:	ec41 0b10 	vmov	d0, r0, r1
 800e344:	f000 fb34 	bl	800e9b0 <floor>
 800e348:	4b7a      	ldr	r3, [pc, #488]	; (800e534 <__kernel_rem_pio2+0x324>)
 800e34a:	ec51 0b10 	vmov	r0, r1, d0
 800e34e:	2200      	movs	r2, #0
 800e350:	f7f2 f97a 	bl	8000648 <__aeabi_dmul>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4630      	mov	r0, r6
 800e35a:	4639      	mov	r1, r7
 800e35c:	f7f1 ffbc 	bl	80002d8 <__aeabi_dsub>
 800e360:	460f      	mov	r7, r1
 800e362:	4606      	mov	r6, r0
 800e364:	f7f2 fc20 	bl	8000ba8 <__aeabi_d2iz>
 800e368:	9002      	str	r0, [sp, #8]
 800e36a:	f7f2 f903 	bl	8000574 <__aeabi_i2d>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	4630      	mov	r0, r6
 800e374:	4639      	mov	r1, r7
 800e376:	f7f1 ffaf 	bl	80002d8 <__aeabi_dsub>
 800e37a:	f1ba 0f00 	cmp.w	sl, #0
 800e37e:	4606      	mov	r6, r0
 800e380:	460f      	mov	r7, r1
 800e382:	dd6d      	ble.n	800e460 <__kernel_rem_pio2+0x250>
 800e384:	1e61      	subs	r1, r4, #1
 800e386:	ab0c      	add	r3, sp, #48	; 0x30
 800e388:	9d02      	ldr	r5, [sp, #8]
 800e38a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e38e:	f1ca 0018 	rsb	r0, sl, #24
 800e392:	fa43 f200 	asr.w	r2, r3, r0
 800e396:	4415      	add	r5, r2
 800e398:	4082      	lsls	r2, r0
 800e39a:	1a9b      	subs	r3, r3, r2
 800e39c:	aa0c      	add	r2, sp, #48	; 0x30
 800e39e:	9502      	str	r5, [sp, #8]
 800e3a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e3a4:	f1ca 0217 	rsb	r2, sl, #23
 800e3a8:	fa43 fb02 	asr.w	fp, r3, r2
 800e3ac:	f1bb 0f00 	cmp.w	fp, #0
 800e3b0:	dd65      	ble.n	800e47e <__kernel_rem_pio2+0x26e>
 800e3b2:	9b02      	ldr	r3, [sp, #8]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	9302      	str	r3, [sp, #8]
 800e3ba:	4615      	mov	r5, r2
 800e3bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e3c0:	4294      	cmp	r4, r2
 800e3c2:	f300 809f 	bgt.w	800e504 <__kernel_rem_pio2+0x2f4>
 800e3c6:	f1ba 0f00 	cmp.w	sl, #0
 800e3ca:	dd07      	ble.n	800e3dc <__kernel_rem_pio2+0x1cc>
 800e3cc:	f1ba 0f01 	cmp.w	sl, #1
 800e3d0:	f000 80c1 	beq.w	800e556 <__kernel_rem_pio2+0x346>
 800e3d4:	f1ba 0f02 	cmp.w	sl, #2
 800e3d8:	f000 80c7 	beq.w	800e56a <__kernel_rem_pio2+0x35a>
 800e3dc:	f1bb 0f02 	cmp.w	fp, #2
 800e3e0:	d14d      	bne.n	800e47e <__kernel_rem_pio2+0x26e>
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	463b      	mov	r3, r7
 800e3e6:	4954      	ldr	r1, [pc, #336]	; (800e538 <__kernel_rem_pio2+0x328>)
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	f7f1 ff75 	bl	80002d8 <__aeabi_dsub>
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	460f      	mov	r7, r1
 800e3f2:	2d00      	cmp	r5, #0
 800e3f4:	d043      	beq.n	800e47e <__kernel_rem_pio2+0x26e>
 800e3f6:	4650      	mov	r0, sl
 800e3f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e528 <__kernel_rem_pio2+0x318>
 800e3fc:	f000 fa58 	bl	800e8b0 <scalbn>
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	ec53 2b10 	vmov	r2, r3, d0
 800e408:	f7f1 ff66 	bl	80002d8 <__aeabi_dsub>
 800e40c:	4606      	mov	r6, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	e035      	b.n	800e47e <__kernel_rem_pio2+0x26e>
 800e412:	4b4a      	ldr	r3, [pc, #296]	; (800e53c <__kernel_rem_pio2+0x32c>)
 800e414:	2200      	movs	r2, #0
 800e416:	4630      	mov	r0, r6
 800e418:	4639      	mov	r1, r7
 800e41a:	f7f2 f915 	bl	8000648 <__aeabi_dmul>
 800e41e:	f7f2 fbc3 	bl	8000ba8 <__aeabi_d2iz>
 800e422:	f7f2 f8a7 	bl	8000574 <__aeabi_i2d>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	ec43 2b18 	vmov	d8, r2, r3
 800e42e:	4b44      	ldr	r3, [pc, #272]	; (800e540 <__kernel_rem_pio2+0x330>)
 800e430:	2200      	movs	r2, #0
 800e432:	f7f2 f909 	bl	8000648 <__aeabi_dmul>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f1 ff4b 	bl	80002d8 <__aeabi_dsub>
 800e442:	f7f2 fbb1 	bl	8000ba8 <__aeabi_d2iz>
 800e446:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e44a:	f84b 0b04 	str.w	r0, [fp], #4
 800e44e:	ec51 0b18 	vmov	r0, r1, d8
 800e452:	f7f1 ff43 	bl	80002dc <__adddf3>
 800e456:	f109 39ff 	add.w	r9, r9, #4294967295
 800e45a:	4606      	mov	r6, r0
 800e45c:	460f      	mov	r7, r1
 800e45e:	e75b      	b.n	800e318 <__kernel_rem_pio2+0x108>
 800e460:	d106      	bne.n	800e470 <__kernel_rem_pio2+0x260>
 800e462:	1e63      	subs	r3, r4, #1
 800e464:	aa0c      	add	r2, sp, #48	; 0x30
 800e466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e46a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e46e:	e79d      	b.n	800e3ac <__kernel_rem_pio2+0x19c>
 800e470:	4b34      	ldr	r3, [pc, #208]	; (800e544 <__kernel_rem_pio2+0x334>)
 800e472:	2200      	movs	r2, #0
 800e474:	f7f2 fb6e 	bl	8000b54 <__aeabi_dcmpge>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d140      	bne.n	800e4fe <__kernel_rem_pio2+0x2ee>
 800e47c:	4683      	mov	fp, r0
 800e47e:	2200      	movs	r2, #0
 800e480:	2300      	movs	r3, #0
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f2 fb47 	bl	8000b18 <__aeabi_dcmpeq>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	f000 80c1 	beq.w	800e612 <__kernel_rem_pio2+0x402>
 800e490:	1e65      	subs	r5, r4, #1
 800e492:	462b      	mov	r3, r5
 800e494:	2200      	movs	r2, #0
 800e496:	9900      	ldr	r1, [sp, #0]
 800e498:	428b      	cmp	r3, r1
 800e49a:	da6d      	bge.n	800e578 <__kernel_rem_pio2+0x368>
 800e49c:	2a00      	cmp	r2, #0
 800e49e:	f000 808a 	beq.w	800e5b6 <__kernel_rem_pio2+0x3a6>
 800e4a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e4a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 80ae 	beq.w	800e60e <__kernel_rem_pio2+0x3fe>
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e528 <__kernel_rem_pio2+0x318>
 800e4b8:	f000 f9fa 	bl	800e8b0 <scalbn>
 800e4bc:	1c6b      	adds	r3, r5, #1
 800e4be:	00da      	lsls	r2, r3, #3
 800e4c0:	9205      	str	r2, [sp, #20]
 800e4c2:	ec57 6b10 	vmov	r6, r7, d0
 800e4c6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e4c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e53c <__kernel_rem_pio2+0x32c>
 800e4cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e4d0:	462c      	mov	r4, r5
 800e4d2:	f04f 0800 	mov.w	r8, #0
 800e4d6:	2c00      	cmp	r4, #0
 800e4d8:	f280 80d4 	bge.w	800e684 <__kernel_rem_pio2+0x474>
 800e4dc:	462c      	mov	r4, r5
 800e4de:	2c00      	cmp	r4, #0
 800e4e0:	f2c0 8102 	blt.w	800e6e8 <__kernel_rem_pio2+0x4d8>
 800e4e4:	4b18      	ldr	r3, [pc, #96]	; (800e548 <__kernel_rem_pio2+0x338>)
 800e4e6:	461e      	mov	r6, r3
 800e4e8:	ab70      	add	r3, sp, #448	; 0x1c0
 800e4ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e4ee:	1b2b      	subs	r3, r5, r4
 800e4f0:	f04f 0900 	mov.w	r9, #0
 800e4f4:	f04f 0a00 	mov.w	sl, #0
 800e4f8:	2700      	movs	r7, #0
 800e4fa:	9306      	str	r3, [sp, #24]
 800e4fc:	e0e6      	b.n	800e6cc <__kernel_rem_pio2+0x4bc>
 800e4fe:	f04f 0b02 	mov.w	fp, #2
 800e502:	e756      	b.n	800e3b2 <__kernel_rem_pio2+0x1a2>
 800e504:	f8d8 3000 	ldr.w	r3, [r8]
 800e508:	bb05      	cbnz	r5, 800e54c <__kernel_rem_pio2+0x33c>
 800e50a:	b123      	cbz	r3, 800e516 <__kernel_rem_pio2+0x306>
 800e50c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e510:	f8c8 3000 	str.w	r3, [r8]
 800e514:	2301      	movs	r3, #1
 800e516:	3201      	adds	r2, #1
 800e518:	f108 0804 	add.w	r8, r8, #4
 800e51c:	461d      	mov	r5, r3
 800e51e:	e74f      	b.n	800e3c0 <__kernel_rem_pio2+0x1b0>
	...
 800e52c:	3ff00000 	.word	0x3ff00000
 800e530:	0800ed28 	.word	0x0800ed28
 800e534:	40200000 	.word	0x40200000
 800e538:	3ff00000 	.word	0x3ff00000
 800e53c:	3e700000 	.word	0x3e700000
 800e540:	41700000 	.word	0x41700000
 800e544:	3fe00000 	.word	0x3fe00000
 800e548:	0800ece8 	.word	0x0800ece8
 800e54c:	1acb      	subs	r3, r1, r3
 800e54e:	f8c8 3000 	str.w	r3, [r8]
 800e552:	462b      	mov	r3, r5
 800e554:	e7df      	b.n	800e516 <__kernel_rem_pio2+0x306>
 800e556:	1e62      	subs	r2, r4, #1
 800e558:	ab0c      	add	r3, sp, #48	; 0x30
 800e55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e562:	a90c      	add	r1, sp, #48	; 0x30
 800e564:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e568:	e738      	b.n	800e3dc <__kernel_rem_pio2+0x1cc>
 800e56a:	1e62      	subs	r2, r4, #1
 800e56c:	ab0c      	add	r3, sp, #48	; 0x30
 800e56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e572:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e576:	e7f4      	b.n	800e562 <__kernel_rem_pio2+0x352>
 800e578:	a90c      	add	r1, sp, #48	; 0x30
 800e57a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e57e:	3b01      	subs	r3, #1
 800e580:	430a      	orrs	r2, r1
 800e582:	e788      	b.n	800e496 <__kernel_rem_pio2+0x286>
 800e584:	3301      	adds	r3, #1
 800e586:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e58a:	2900      	cmp	r1, #0
 800e58c:	d0fa      	beq.n	800e584 <__kernel_rem_pio2+0x374>
 800e58e:	9a08      	ldr	r2, [sp, #32]
 800e590:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e594:	446a      	add	r2, sp
 800e596:	3a98      	subs	r2, #152	; 0x98
 800e598:	9208      	str	r2, [sp, #32]
 800e59a:	9a06      	ldr	r2, [sp, #24]
 800e59c:	a920      	add	r1, sp, #128	; 0x80
 800e59e:	18a2      	adds	r2, r4, r2
 800e5a0:	18e3      	adds	r3, r4, r3
 800e5a2:	f104 0801 	add.w	r8, r4, #1
 800e5a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e5aa:	9302      	str	r3, [sp, #8]
 800e5ac:	9b02      	ldr	r3, [sp, #8]
 800e5ae:	4543      	cmp	r3, r8
 800e5b0:	da04      	bge.n	800e5bc <__kernel_rem_pio2+0x3ac>
 800e5b2:	461c      	mov	r4, r3
 800e5b4:	e6a2      	b.n	800e2fc <__kernel_rem_pio2+0xec>
 800e5b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e7e4      	b.n	800e586 <__kernel_rem_pio2+0x376>
 800e5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e5c2:	f7f1 ffd7 	bl	8000574 <__aeabi_i2d>
 800e5c6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5cc:	46ab      	mov	fp, r5
 800e5ce:	461c      	mov	r4, r3
 800e5d0:	f04f 0900 	mov.w	r9, #0
 800e5d4:	2600      	movs	r6, #0
 800e5d6:	2700      	movs	r7, #0
 800e5d8:	9b05      	ldr	r3, [sp, #20]
 800e5da:	4599      	cmp	r9, r3
 800e5dc:	dd06      	ble.n	800e5ec <__kernel_rem_pio2+0x3dc>
 800e5de:	9b08      	ldr	r3, [sp, #32]
 800e5e0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e5e4:	f108 0801 	add.w	r8, r8, #1
 800e5e8:	9308      	str	r3, [sp, #32]
 800e5ea:	e7df      	b.n	800e5ac <__kernel_rem_pio2+0x39c>
 800e5ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e5f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e5f4:	f7f2 f828 	bl	8000648 <__aeabi_dmul>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	4639      	mov	r1, r7
 800e600:	f7f1 fe6c 	bl	80002dc <__adddf3>
 800e604:	f109 0901 	add.w	r9, r9, #1
 800e608:	4606      	mov	r6, r0
 800e60a:	460f      	mov	r7, r1
 800e60c:	e7e4      	b.n	800e5d8 <__kernel_rem_pio2+0x3c8>
 800e60e:	3d01      	subs	r5, #1
 800e610:	e747      	b.n	800e4a2 <__kernel_rem_pio2+0x292>
 800e612:	ec47 6b10 	vmov	d0, r6, r7
 800e616:	f1ca 0000 	rsb	r0, sl, #0
 800e61a:	f000 f949 	bl	800e8b0 <scalbn>
 800e61e:	ec57 6b10 	vmov	r6, r7, d0
 800e622:	4ba0      	ldr	r3, [pc, #640]	; (800e8a4 <__kernel_rem_pio2+0x694>)
 800e624:	ee10 0a10 	vmov	r0, s0
 800e628:	2200      	movs	r2, #0
 800e62a:	4639      	mov	r1, r7
 800e62c:	f7f2 fa92 	bl	8000b54 <__aeabi_dcmpge>
 800e630:	b1f8      	cbz	r0, 800e672 <__kernel_rem_pio2+0x462>
 800e632:	4b9d      	ldr	r3, [pc, #628]	; (800e8a8 <__kernel_rem_pio2+0x698>)
 800e634:	2200      	movs	r2, #0
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f2 f805 	bl	8000648 <__aeabi_dmul>
 800e63e:	f7f2 fab3 	bl	8000ba8 <__aeabi_d2iz>
 800e642:	4680      	mov	r8, r0
 800e644:	f7f1 ff96 	bl	8000574 <__aeabi_i2d>
 800e648:	4b96      	ldr	r3, [pc, #600]	; (800e8a4 <__kernel_rem_pio2+0x694>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	f7f1 fffc 	bl	8000648 <__aeabi_dmul>
 800e650:	460b      	mov	r3, r1
 800e652:	4602      	mov	r2, r0
 800e654:	4639      	mov	r1, r7
 800e656:	4630      	mov	r0, r6
 800e658:	f7f1 fe3e 	bl	80002d8 <__aeabi_dsub>
 800e65c:	f7f2 faa4 	bl	8000ba8 <__aeabi_d2iz>
 800e660:	1c65      	adds	r5, r4, #1
 800e662:	ab0c      	add	r3, sp, #48	; 0x30
 800e664:	f10a 0a18 	add.w	sl, sl, #24
 800e668:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e66c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e670:	e71f      	b.n	800e4b2 <__kernel_rem_pio2+0x2a2>
 800e672:	4630      	mov	r0, r6
 800e674:	4639      	mov	r1, r7
 800e676:	f7f2 fa97 	bl	8000ba8 <__aeabi_d2iz>
 800e67a:	ab0c      	add	r3, sp, #48	; 0x30
 800e67c:	4625      	mov	r5, r4
 800e67e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e682:	e716      	b.n	800e4b2 <__kernel_rem_pio2+0x2a2>
 800e684:	ab0c      	add	r3, sp, #48	; 0x30
 800e686:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e68a:	f7f1 ff73 	bl	8000574 <__aeabi_i2d>
 800e68e:	4632      	mov	r2, r6
 800e690:	463b      	mov	r3, r7
 800e692:	f7f1 ffd9 	bl	8000648 <__aeabi_dmul>
 800e696:	4642      	mov	r2, r8
 800e698:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e69c:	464b      	mov	r3, r9
 800e69e:	4630      	mov	r0, r6
 800e6a0:	4639      	mov	r1, r7
 800e6a2:	f7f1 ffd1 	bl	8000648 <__aeabi_dmul>
 800e6a6:	3c01      	subs	r4, #1
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	e713      	b.n	800e4d6 <__kernel_rem_pio2+0x2c6>
 800e6ae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e6b2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e6b6:	f7f1 ffc7 	bl	8000648 <__aeabi_dmul>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4648      	mov	r0, r9
 800e6c0:	4651      	mov	r1, sl
 800e6c2:	f7f1 fe0b 	bl	80002dc <__adddf3>
 800e6c6:	3701      	adds	r7, #1
 800e6c8:	4681      	mov	r9, r0
 800e6ca:	468a      	mov	sl, r1
 800e6cc:	9b00      	ldr	r3, [sp, #0]
 800e6ce:	429f      	cmp	r7, r3
 800e6d0:	dc02      	bgt.n	800e6d8 <__kernel_rem_pio2+0x4c8>
 800e6d2:	9b06      	ldr	r3, [sp, #24]
 800e6d4:	429f      	cmp	r7, r3
 800e6d6:	ddea      	ble.n	800e6ae <__kernel_rem_pio2+0x49e>
 800e6d8:	9a06      	ldr	r2, [sp, #24]
 800e6da:	ab48      	add	r3, sp, #288	; 0x120
 800e6dc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e6e0:	e9c6 9a00 	strd	r9, sl, [r6]
 800e6e4:	3c01      	subs	r4, #1
 800e6e6:	e6fa      	b.n	800e4de <__kernel_rem_pio2+0x2ce>
 800e6e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	dc0b      	bgt.n	800e706 <__kernel_rem_pio2+0x4f6>
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dc39      	bgt.n	800e766 <__kernel_rem_pio2+0x556>
 800e6f2:	d05d      	beq.n	800e7b0 <__kernel_rem_pio2+0x5a0>
 800e6f4:	9b02      	ldr	r3, [sp, #8]
 800e6f6:	f003 0007 	and.w	r0, r3, #7
 800e6fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e6fe:	ecbd 8b02 	vpop	{d8}
 800e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e706:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e708:	2b03      	cmp	r3, #3
 800e70a:	d1f3      	bne.n	800e6f4 <__kernel_rem_pio2+0x4e4>
 800e70c:	9b05      	ldr	r3, [sp, #20]
 800e70e:	9500      	str	r5, [sp, #0]
 800e710:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e714:	eb0d 0403 	add.w	r4, sp, r3
 800e718:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e71c:	46a2      	mov	sl, r4
 800e71e:	9b00      	ldr	r3, [sp, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	f1aa 0a08 	sub.w	sl, sl, #8
 800e726:	dc69      	bgt.n	800e7fc <__kernel_rem_pio2+0x5ec>
 800e728:	46aa      	mov	sl, r5
 800e72a:	f1ba 0f01 	cmp.w	sl, #1
 800e72e:	f1a4 0408 	sub.w	r4, r4, #8
 800e732:	f300 8083 	bgt.w	800e83c <__kernel_rem_pio2+0x62c>
 800e736:	9c05      	ldr	r4, [sp, #20]
 800e738:	ab48      	add	r3, sp, #288	; 0x120
 800e73a:	441c      	add	r4, r3
 800e73c:	2000      	movs	r0, #0
 800e73e:	2100      	movs	r1, #0
 800e740:	2d01      	cmp	r5, #1
 800e742:	f300 809a 	bgt.w	800e87a <__kernel_rem_pio2+0x66a>
 800e746:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e74a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e74e:	f1bb 0f00 	cmp.w	fp, #0
 800e752:	f040 8098 	bne.w	800e886 <__kernel_rem_pio2+0x676>
 800e756:	9b04      	ldr	r3, [sp, #16]
 800e758:	e9c3 7800 	strd	r7, r8, [r3]
 800e75c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e760:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e764:	e7c6      	b.n	800e6f4 <__kernel_rem_pio2+0x4e4>
 800e766:	9e05      	ldr	r6, [sp, #20]
 800e768:	ab48      	add	r3, sp, #288	; 0x120
 800e76a:	441e      	add	r6, r3
 800e76c:	462c      	mov	r4, r5
 800e76e:	2000      	movs	r0, #0
 800e770:	2100      	movs	r1, #0
 800e772:	2c00      	cmp	r4, #0
 800e774:	da33      	bge.n	800e7de <__kernel_rem_pio2+0x5ce>
 800e776:	f1bb 0f00 	cmp.w	fp, #0
 800e77a:	d036      	beq.n	800e7ea <__kernel_rem_pio2+0x5da>
 800e77c:	4602      	mov	r2, r0
 800e77e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e782:	9c04      	ldr	r4, [sp, #16]
 800e784:	e9c4 2300 	strd	r2, r3, [r4]
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e790:	f7f1 fda2 	bl	80002d8 <__aeabi_dsub>
 800e794:	ae4a      	add	r6, sp, #296	; 0x128
 800e796:	2401      	movs	r4, #1
 800e798:	42a5      	cmp	r5, r4
 800e79a:	da29      	bge.n	800e7f0 <__kernel_rem_pio2+0x5e0>
 800e79c:	f1bb 0f00 	cmp.w	fp, #0
 800e7a0:	d002      	beq.n	800e7a8 <__kernel_rem_pio2+0x598>
 800e7a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e7ae:	e7a1      	b.n	800e6f4 <__kernel_rem_pio2+0x4e4>
 800e7b0:	9c05      	ldr	r4, [sp, #20]
 800e7b2:	ab48      	add	r3, sp, #288	; 0x120
 800e7b4:	441c      	add	r4, r3
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	2d00      	cmp	r5, #0
 800e7bc:	da09      	bge.n	800e7d2 <__kernel_rem_pio2+0x5c2>
 800e7be:	f1bb 0f00 	cmp.w	fp, #0
 800e7c2:	d002      	beq.n	800e7ca <__kernel_rem_pio2+0x5ba>
 800e7c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	9b04      	ldr	r3, [sp, #16]
 800e7cc:	e9c3 0100 	strd	r0, r1, [r3]
 800e7d0:	e790      	b.n	800e6f4 <__kernel_rem_pio2+0x4e4>
 800e7d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7d6:	f7f1 fd81 	bl	80002dc <__adddf3>
 800e7da:	3d01      	subs	r5, #1
 800e7dc:	e7ed      	b.n	800e7ba <__kernel_rem_pio2+0x5aa>
 800e7de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e7e2:	f7f1 fd7b 	bl	80002dc <__adddf3>
 800e7e6:	3c01      	subs	r4, #1
 800e7e8:	e7c3      	b.n	800e772 <__kernel_rem_pio2+0x562>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e7c8      	b.n	800e782 <__kernel_rem_pio2+0x572>
 800e7f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e7f4:	f7f1 fd72 	bl	80002dc <__adddf3>
 800e7f8:	3401      	adds	r4, #1
 800e7fa:	e7cd      	b.n	800e798 <__kernel_rem_pio2+0x588>
 800e7fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e800:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e804:	9b00      	ldr	r3, [sp, #0]
 800e806:	3b01      	subs	r3, #1
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	4632      	mov	r2, r6
 800e80c:	463b      	mov	r3, r7
 800e80e:	4640      	mov	r0, r8
 800e810:	4649      	mov	r1, r9
 800e812:	f7f1 fd63 	bl	80002dc <__adddf3>
 800e816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e81a:	4602      	mov	r2, r0
 800e81c:	460b      	mov	r3, r1
 800e81e:	4640      	mov	r0, r8
 800e820:	4649      	mov	r1, r9
 800e822:	f7f1 fd59 	bl	80002d8 <__aeabi_dsub>
 800e826:	4632      	mov	r2, r6
 800e828:	463b      	mov	r3, r7
 800e82a:	f7f1 fd57 	bl	80002dc <__adddf3>
 800e82e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e836:	ed8a 7b00 	vstr	d7, [sl]
 800e83a:	e770      	b.n	800e71e <__kernel_rem_pio2+0x50e>
 800e83c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e840:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e844:	4640      	mov	r0, r8
 800e846:	4632      	mov	r2, r6
 800e848:	463b      	mov	r3, r7
 800e84a:	4649      	mov	r1, r9
 800e84c:	f7f1 fd46 	bl	80002dc <__adddf3>
 800e850:	e9cd 0100 	strd	r0, r1, [sp]
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	f7f1 fd3c 	bl	80002d8 <__aeabi_dsub>
 800e860:	4632      	mov	r2, r6
 800e862:	463b      	mov	r3, r7
 800e864:	f7f1 fd3a 	bl	80002dc <__adddf3>
 800e868:	ed9d 7b00 	vldr	d7, [sp]
 800e86c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e870:	ed84 7b00 	vstr	d7, [r4]
 800e874:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e878:	e757      	b.n	800e72a <__kernel_rem_pio2+0x51a>
 800e87a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e87e:	f7f1 fd2d 	bl	80002dc <__adddf3>
 800e882:	3d01      	subs	r5, #1
 800e884:	e75c      	b.n	800e740 <__kernel_rem_pio2+0x530>
 800e886:	9b04      	ldr	r3, [sp, #16]
 800e888:	9a04      	ldr	r2, [sp, #16]
 800e88a:	601f      	str	r7, [r3, #0]
 800e88c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e890:	605c      	str	r4, [r3, #4]
 800e892:	609d      	str	r5, [r3, #8]
 800e894:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e898:	60d3      	str	r3, [r2, #12]
 800e89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e89e:	6110      	str	r0, [r2, #16]
 800e8a0:	6153      	str	r3, [r2, #20]
 800e8a2:	e727      	b.n	800e6f4 <__kernel_rem_pio2+0x4e4>
 800e8a4:	41700000 	.word	0x41700000
 800e8a8:	3e700000 	.word	0x3e700000
 800e8ac:	00000000 	.word	0x00000000

0800e8b0 <scalbn>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	ec55 4b10 	vmov	r4, r5, d0
 800e8b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	462b      	mov	r3, r5
 800e8be:	b999      	cbnz	r1, 800e8e8 <scalbn+0x38>
 800e8c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8c4:	4323      	orrs	r3, r4
 800e8c6:	d03f      	beq.n	800e948 <scalbn+0x98>
 800e8c8:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <scalbn+0xf0>)
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	ee10 0a10 	vmov	r0, s0
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f7f1 feb9 	bl	8000648 <__aeabi_dmul>
 800e8d6:	4b33      	ldr	r3, [pc, #204]	; (800e9a4 <scalbn+0xf4>)
 800e8d8:	429e      	cmp	r6, r3
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
 800e8de:	da10      	bge.n	800e902 <scalbn+0x52>
 800e8e0:	a327      	add	r3, pc, #156	; (adr r3, 800e980 <scalbn+0xd0>)
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	e01f      	b.n	800e928 <scalbn+0x78>
 800e8e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e8ec:	4291      	cmp	r1, r2
 800e8ee:	d10c      	bne.n	800e90a <scalbn+0x5a>
 800e8f0:	ee10 2a10 	vmov	r2, s0
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	f7f1 fcf0 	bl	80002dc <__adddf3>
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	460d      	mov	r5, r1
 800e900:	e022      	b.n	800e948 <scalbn+0x98>
 800e902:	460b      	mov	r3, r1
 800e904:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e908:	3936      	subs	r1, #54	; 0x36
 800e90a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e90e:	4296      	cmp	r6, r2
 800e910:	dd0d      	ble.n	800e92e <scalbn+0x7e>
 800e912:	2d00      	cmp	r5, #0
 800e914:	a11c      	add	r1, pc, #112	; (adr r1, 800e988 <scalbn+0xd8>)
 800e916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e91a:	da02      	bge.n	800e922 <scalbn+0x72>
 800e91c:	a11c      	add	r1, pc, #112	; (adr r1, 800e990 <scalbn+0xe0>)
 800e91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e922:	a319      	add	r3, pc, #100	; (adr r3, 800e988 <scalbn+0xd8>)
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	f7f1 fe8e 	bl	8000648 <__aeabi_dmul>
 800e92c:	e7e6      	b.n	800e8fc <scalbn+0x4c>
 800e92e:	1872      	adds	r2, r6, r1
 800e930:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e934:	428a      	cmp	r2, r1
 800e936:	dcec      	bgt.n	800e912 <scalbn+0x62>
 800e938:	2a00      	cmp	r2, #0
 800e93a:	dd08      	ble.n	800e94e <scalbn+0x9e>
 800e93c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e940:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e944:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e948:	ec45 4b10 	vmov	d0, r4, r5
 800e94c:	bd70      	pop	{r4, r5, r6, pc}
 800e94e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e952:	da08      	bge.n	800e966 <scalbn+0xb6>
 800e954:	2d00      	cmp	r5, #0
 800e956:	a10a      	add	r1, pc, #40	; (adr r1, 800e980 <scalbn+0xd0>)
 800e958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95c:	dac0      	bge.n	800e8e0 <scalbn+0x30>
 800e95e:	a10e      	add	r1, pc, #56	; (adr r1, 800e998 <scalbn+0xe8>)
 800e960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e964:	e7bc      	b.n	800e8e0 <scalbn+0x30>
 800e966:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e96a:	3236      	adds	r2, #54	; 0x36
 800e96c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e970:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e974:	4620      	mov	r0, r4
 800e976:	4b0c      	ldr	r3, [pc, #48]	; (800e9a8 <scalbn+0xf8>)
 800e978:	2200      	movs	r2, #0
 800e97a:	e7d5      	b.n	800e928 <scalbn+0x78>
 800e97c:	f3af 8000 	nop.w
 800e980:	c2f8f359 	.word	0xc2f8f359
 800e984:	01a56e1f 	.word	0x01a56e1f
 800e988:	8800759c 	.word	0x8800759c
 800e98c:	7e37e43c 	.word	0x7e37e43c
 800e990:	8800759c 	.word	0x8800759c
 800e994:	fe37e43c 	.word	0xfe37e43c
 800e998:	c2f8f359 	.word	0xc2f8f359
 800e99c:	81a56e1f 	.word	0x81a56e1f
 800e9a0:	43500000 	.word	0x43500000
 800e9a4:	ffff3cb0 	.word	0xffff3cb0
 800e9a8:	3c900000 	.word	0x3c900000
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <floor>:
 800e9b0:	ec51 0b10 	vmov	r0, r1, d0
 800e9b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e9c0:	2e13      	cmp	r6, #19
 800e9c2:	ee10 5a10 	vmov	r5, s0
 800e9c6:	ee10 8a10 	vmov	r8, s0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	dc31      	bgt.n	800ea32 <floor+0x82>
 800e9ce:	2e00      	cmp	r6, #0
 800e9d0:	da14      	bge.n	800e9fc <floor+0x4c>
 800e9d2:	a333      	add	r3, pc, #204	; (adr r3, 800eaa0 <floor+0xf0>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fc80 	bl	80002dc <__adddf3>
 800e9dc:	2200      	movs	r2, #0
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f7f2 f8c2 	bl	8000b68 <__aeabi_dcmpgt>
 800e9e4:	b138      	cbz	r0, 800e9f6 <floor+0x46>
 800e9e6:	2c00      	cmp	r4, #0
 800e9e8:	da53      	bge.n	800ea92 <floor+0xe2>
 800e9ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e9ee:	4325      	orrs	r5, r4
 800e9f0:	d052      	beq.n	800ea98 <floor+0xe8>
 800e9f2:	4c2d      	ldr	r4, [pc, #180]	; (800eaa8 <floor+0xf8>)
 800e9f4:	2500      	movs	r5, #0
 800e9f6:	4621      	mov	r1, r4
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	e024      	b.n	800ea46 <floor+0x96>
 800e9fc:	4f2b      	ldr	r7, [pc, #172]	; (800eaac <floor+0xfc>)
 800e9fe:	4137      	asrs	r7, r6
 800ea00:	ea01 0307 	and.w	r3, r1, r7
 800ea04:	4303      	orrs	r3, r0
 800ea06:	d01e      	beq.n	800ea46 <floor+0x96>
 800ea08:	a325      	add	r3, pc, #148	; (adr r3, 800eaa0 <floor+0xf0>)
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	f7f1 fc65 	bl	80002dc <__adddf3>
 800ea12:	2200      	movs	r2, #0
 800ea14:	2300      	movs	r3, #0
 800ea16:	f7f2 f8a7 	bl	8000b68 <__aeabi_dcmpgt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d0eb      	beq.n	800e9f6 <floor+0x46>
 800ea1e:	2c00      	cmp	r4, #0
 800ea20:	bfbe      	ittt	lt
 800ea22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ea26:	4133      	asrlt	r3, r6
 800ea28:	18e4      	addlt	r4, r4, r3
 800ea2a:	ea24 0407 	bic.w	r4, r4, r7
 800ea2e:	2500      	movs	r5, #0
 800ea30:	e7e1      	b.n	800e9f6 <floor+0x46>
 800ea32:	2e33      	cmp	r6, #51	; 0x33
 800ea34:	dd0b      	ble.n	800ea4e <floor+0x9e>
 800ea36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ea3a:	d104      	bne.n	800ea46 <floor+0x96>
 800ea3c:	ee10 2a10 	vmov	r2, s0
 800ea40:	460b      	mov	r3, r1
 800ea42:	f7f1 fc4b 	bl	80002dc <__adddf3>
 800ea46:	ec41 0b10 	vmov	d0, r0, r1
 800ea4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea4e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ea52:	f04f 37ff 	mov.w	r7, #4294967295
 800ea56:	40df      	lsrs	r7, r3
 800ea58:	4238      	tst	r0, r7
 800ea5a:	d0f4      	beq.n	800ea46 <floor+0x96>
 800ea5c:	a310      	add	r3, pc, #64	; (adr r3, 800eaa0 <floor+0xf0>)
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f7f1 fc3b 	bl	80002dc <__adddf3>
 800ea66:	2200      	movs	r2, #0
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f7f2 f87d 	bl	8000b68 <__aeabi_dcmpgt>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d0c1      	beq.n	800e9f6 <floor+0x46>
 800ea72:	2c00      	cmp	r4, #0
 800ea74:	da0a      	bge.n	800ea8c <floor+0xdc>
 800ea76:	2e14      	cmp	r6, #20
 800ea78:	d101      	bne.n	800ea7e <floor+0xce>
 800ea7a:	3401      	adds	r4, #1
 800ea7c:	e006      	b.n	800ea8c <floor+0xdc>
 800ea7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ea82:	2301      	movs	r3, #1
 800ea84:	40b3      	lsls	r3, r6
 800ea86:	441d      	add	r5, r3
 800ea88:	45a8      	cmp	r8, r5
 800ea8a:	d8f6      	bhi.n	800ea7a <floor+0xca>
 800ea8c:	ea25 0507 	bic.w	r5, r5, r7
 800ea90:	e7b1      	b.n	800e9f6 <floor+0x46>
 800ea92:	2500      	movs	r5, #0
 800ea94:	462c      	mov	r4, r5
 800ea96:	e7ae      	b.n	800e9f6 <floor+0x46>
 800ea98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ea9c:	e7ab      	b.n	800e9f6 <floor+0x46>
 800ea9e:	bf00      	nop
 800eaa0:	8800759c 	.word	0x8800759c
 800eaa4:	7e37e43c 	.word	0x7e37e43c
 800eaa8:	bff00000 	.word	0xbff00000
 800eaac:	000fffff 	.word	0x000fffff

0800eab0 <_init>:
 800eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab2:	bf00      	nop
 800eab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab6:	bc08      	pop	{r3}
 800eab8:	469e      	mov	lr, r3
 800eaba:	4770      	bx	lr

0800eabc <_fini>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	bf00      	nop
 800eac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac2:	bc08      	pop	{r3}
 800eac4:	469e      	mov	lr, r3
 800eac6:	4770      	bx	lr
