
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800c790  0800c790  0001c790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccf0  0800ccf0  00020738  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccf0  0800ccf0  0001ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccf8  0800ccf8  00020738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccf8  0800ccf8  0001ccf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccfc  0800ccfc  0001ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000738  20000000  0800cd00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  20000738  0800d438  00020738  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200020ac  0800d438  000220ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020738  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020768  2**0
                  CONTENTS, READONLY
 13 .debug_info   000386e5  00000000  00000000  000207ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076bb  00000000  00000000  00058e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00018ac9  00000000  00000000  0006054b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019d0  00000000  00000000  00079018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002cc2  00000000  00000000  0007a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027b4f  00000000  00000000  0007d6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000407aa  00000000  00000000  000a51f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed4ee  00000000  00000000  000e59a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064e8  00000000  00000000  001d2e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001d937c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000738 	.word	0x20000738
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c778 	.word	0x0800c778

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000073c 	.word	0x2000073c
 800021c:	0800c778 	.word	0x0800c778

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <Voltage_Temp_IRQ>:
void Current_IRQ(Current* ptr){
    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
    else return;
    Current_Callback_flag = 1;
}
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000f94:	4602      	mov	r2, r0
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000f96:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <Voltage_Temp_IRQ+0x10>)
 8000f98:	6851      	ldr	r1, [r2, #4]
 8000f9a:	6800      	ldr	r0, [r0, #0]
 8000f9c:	6892      	ldr	r2, [r2, #8]
 8000f9e:	c307      	stmia	r3!, {r0, r1, r2}
}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000a8c 	.word	0x20000a8c

08000fa8 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8000fa8:	b410      	push	{r4}
 8000faa:	4684      	mov	ip, r0
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8000fac:	4c09      	ldr	r4, [pc, #36]	; (8000fd4 <Encoders_IRQ+0x2c>)
 8000fae:	6800      	ldr	r0, [r0, #0]
 8000fb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8000fb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8000fb8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8000fc2:	f8dc 1014 	ldr.w	r1, [ip, #20]
 8000fc6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000fca:	c407      	stmia	r4!, {r0, r1, r2}
}
 8000fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000a3c 	.word	0x20000a3c

08000fd8 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8000fd8:	4602      	mov	r2, r0
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <Can_RX_Status_IRQ+0x10>)
 8000fdc:	6851      	ldr	r1, [r2, #4]
 8000fde:	6800      	ldr	r0, [r0, #0]
 8000fe0:	6892      	ldr	r2, [r2, #8]
 8000fe2:	c307      	stmia	r3!, {r0, r1, r2}
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000a80 	.word	0x20000a80

08000fec <Current_IRQ>:
    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000fec:	b168      	cbz	r0, 800100a <Current_IRQ+0x1e>
void Current_IRQ(Current* ptr){
 8000fee:	b410      	push	{r4}
 8000ff0:	4603      	mov	r3, r0
    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000ff2:	4c06      	ldr	r4, [pc, #24]	; (800100c <Current_IRQ+0x20>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	6800      	ldr	r0, [r0, #0]
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    Current_Callback_flag = 1;
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <Current_IRQ+0x24>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
}
 8001004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	4770      	bx	lr
 800100c:	20000a1c 	.word	0x20000a1c
 8001010:	20000794 	.word	0x20000794

08001014 <BLDC_main>:

volatile float theta;
volatile float mag;


void BLDC_main(void){
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	ed2d 8b02 	vpush	{d8}
 800101c:	b087      	sub	sp, #28
	Flash_init();
 800101e:	f001 fc7b 	bl	8002918 <Flash_init>
	storage = Flash_get_values();
 8001022:	f001 fce9 	bl	80029f8 <Flash_get_values>
 8001026:	4ca8      	ldr	r4, [pc, #672]	; (80012c8 <BLDC_main+0x2b4>)
	SetMode(&Current_PID,  AUTOMATIC);
	Initialize(&Current_PID);

	SetSampleTime(&Velocity_PID, 50); //50us = 20kHz
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 8001028:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 80012cc <BLDC_main+0x2b8>
	storage = Flash_get_values();
 800102c:	4603      	mov	r3, r0
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
	storage = Flash_get_values();
 8001030:	6023      	str	r3, [r4, #0]
	HAL_Delay(100);
 8001032:	f003 fb75 	bl	8004720 <HAL_Delay>
	SetSampleTime(&Current_PID, 50); //50us = 20kHz
 8001036:	2132      	movs	r1, #50	; 0x32
 8001038:	48a5      	ldr	r0, [pc, #660]	; (80012d0 <BLDC_main+0x2bc>)
 800103a:	f001 fda3 	bl	8002b84 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1);
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	48a3      	ldr	r0, [pc, #652]	; (80012d0 <BLDC_main+0x2bc>)
 8001042:	ed93 1a10 	vldr	s2, [r3, #64]	; 0x40
 8001046:	edd3 0a0f 	vldr	s1, [r3, #60]	; 0x3c
 800104a:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 800104e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001052:	f001 fd37 	bl	8002ac4 <SetTunings>
	SetOutputLimits(&Current_PID, -1500, 1500);
 8001056:	eddf 0a9f 	vldr	s1, [pc, #636]	; 80012d4 <BLDC_main+0x2c0>
 800105a:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 80012d8 <BLDC_main+0x2c4>
 800105e:	489c      	ldr	r0, [pc, #624]	; (80012d0 <BLDC_main+0x2bc>)
 8001060:	f001 fdaa 	bl	8002bb8 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001064:	489a      	ldr	r0, [pc, #616]	; (80012d0 <BLDC_main+0x2bc>)
 8001066:	2100      	movs	r1, #0
 8001068:	f001 fe14 	bl	8002c94 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800106c:	2101      	movs	r1, #1
 800106e:	4898      	ldr	r0, [pc, #608]	; (80012d0 <BLDC_main+0x2bc>)
 8001070:	f001 fdce 	bl	8002c10 <SetMode>
	Initialize(&Current_PID);
 8001074:	4896      	ldr	r0, [pc, #600]	; (80012d0 <BLDC_main+0x2bc>)
 8001076:	f001 fdf5 	bl	8002c64 <Initialize>
	SetSampleTime(&Velocity_PID, 50); //50us = 20kHz
 800107a:	2132      	movs	r1, #50	; 0x32
 800107c:	4897      	ldr	r0, [pc, #604]	; (80012dc <BLDC_main+0x2c8>)
 800107e:	f001 fd81 	bl	8002b84 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	4895      	ldr	r0, [pc, #596]	; (80012dc <BLDC_main+0x2c8>)
 8001086:	ed93 1a0d 	vldr	s2, [r3, #52]	; 0x34
 800108a:	edd3 0a0c 	vldr	s1, [r3, #48]	; 0x30
 800108e:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
 8001092:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001096:	f001 fd15 	bl	8002ac4 <SetTunings>
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	488f      	ldr	r0, [pc, #572]	; (80012dc <BLDC_main+0x2c8>)
 800109e:	edd3 0a14 	vldr	s1, [r3, #80]	; 0x50
 80010a2:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80010a6:	ee60 0a88 	vmul.f32	s1, s1, s16
 80010aa:	eeb1 0a60 	vneg.f32	s0, s1
 80010ae:	f001 fd83 	bl	8002bb8 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80010b2:	488a      	ldr	r0, [pc, #552]	; (80012dc <BLDC_main+0x2c8>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	f001 fded 	bl	8002c94 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80010ba:	2101      	movs	r1, #1
 80010bc:	4887      	ldr	r0, [pc, #540]	; (80012dc <BLDC_main+0x2c8>)
 80010be:	f001 fda7 	bl	8002c10 <SetMode>
	Initialize(&Velocity_PID);
 80010c2:	4886      	ldr	r0, [pc, #536]	; (80012dc <BLDC_main+0x2c8>)
 80010c4:	f001 fdce 	bl	8002c64 <Initialize>

	SetSampleTime(&Angle_PID, 50); //50us = 20kHz
 80010c8:	2132      	movs	r1, #50	; 0x32
 80010ca:	4885      	ldr	r0, [pc, #532]	; (80012e0 <BLDC_main+0x2cc>)
 80010cc:	f001 fd5a 	bl	8002b84 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	4883      	ldr	r0, [pc, #524]	; (80012e0 <BLDC_main+0x2cc>)
 80010d4:	ed93 1a0a 	vldr	s2, [r3, #40]	; 0x28
 80010d8:	edd3 0a09 	vldr	s1, [r3, #36]	; 0x24
 80010dc:	ed93 0a08 	vldr	s0, [r3, #32]
 80010e0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80010e4:	f001 fcee 	bl	8002ac4 <SetTunings>
	SetOutputLimits(&Angle_PID, -(storage->Velocity_limit*1000.0f), (storage->Velocity_limit*1000.0f));
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	487d      	ldr	r0, [pc, #500]	; (80012e0 <BLDC_main+0x2cc>)
 80010ec:	edd3 0a15 	vldr	s1, [r3, #84]	; 0x54
 80010f0:	eef8 0a60 	vcvt.f32.u32	s1, s1
 80010f4:	ee60 0a88 	vmul.f32	s1, s1, s16
 80010f8:	eeb1 0a60 	vneg.f32	s0, s1
 80010fc:	f001 fd5c 	bl	8002bb8 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8001100:	4877      	ldr	r0, [pc, #476]	; (80012e0 <BLDC_main+0x2cc>)
 8001102:	2100      	movs	r1, #0
 8001104:	f001 fdc6 	bl	8002c94 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001108:	2101      	movs	r1, #1
 800110a:	4875      	ldr	r0, [pc, #468]	; (80012e0 <BLDC_main+0x2cc>)
 800110c:	f001 fd80 	bl	8002c10 <SetMode>
	Initialize(&Angle_PID);
 8001110:	4873      	ldr	r0, [pc, #460]	; (80012e0 <BLDC_main+0x2cc>)
 8001112:	f001 fda7 	bl	8002c64 <Initialize>

	SetSampleTime(&Current_PID_offset, 50); //50us = 20kHz
 8001116:	2132      	movs	r1, #50	; 0x32
 8001118:	4872      	ldr	r0, [pc, #456]	; (80012e4 <BLDC_main+0x2d0>)
 800111a:	f001 fd33 	bl	8002b84 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	4870      	ldr	r0, [pc, #448]	; (80012e4 <BLDC_main+0x2d0>)
 8001122:	edd3 0a12 	vldr	s1, [r3, #72]	; 0x48
 8001126:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 800112a:	ed93 1a13 	vldr	s2, [r3, #76]	; 0x4c
 800112e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001132:	f001 fcc7 	bl	8002ac4 <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 8001136:	eddf 0a67 	vldr	s1, [pc, #412]	; 80012d4 <BLDC_main+0x2c0>
 800113a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80012d8 <BLDC_main+0x2c4>
 800113e:	4869      	ldr	r0, [pc, #420]	; (80012e4 <BLDC_main+0x2d0>)
 8001140:	f001 fd3a 	bl	8002bb8 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 8001144:	4867      	ldr	r0, [pc, #412]	; (80012e4 <BLDC_main+0x2d0>)
 8001146:	2100      	movs	r1, #0
 8001148:	f001 fda4 	bl	8002c94 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 800114c:	2101      	movs	r1, #1
 800114e:	4865      	ldr	r0, [pc, #404]	; (80012e4 <BLDC_main+0x2d0>)
 8001150:	f001 fd5e 	bl	8002c10 <SetMode>
	Initialize(&Current_PID_offset);
 8001154:	4863      	ldr	r0, [pc, #396]	; (80012e4 <BLDC_main+0x2d0>)
 8001156:	f001 fd85 	bl	8002c64 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 800115a:	4863      	ldr	r0, [pc, #396]	; (80012e8 <BLDC_main+0x2d4>)
 800115c:	f001 fade 	bl	800271c <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8001160:	4862      	ldr	r0, [pc, #392]	; (80012ec <BLDC_main+0x2d8>)
 8001162:	f001 fe4d 	bl	8002e00 <current_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8001166:	4862      	ldr	r0, [pc, #392]	; (80012f0 <BLDC_main+0x2dc>)
 8001168:	f001 fe6c 	bl	8002e44 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 800116c:	4a61      	ldr	r2, [pc, #388]	; (80012f4 <BLDC_main+0x2e0>)
 800116e:	4862      	ldr	r0, [pc, #392]	; (80012f8 <BLDC_main+0x2e4>)
 8001170:	2136      	movs	r1, #54	; 0x36
 8001172:	f002 f893 	bl	800329c <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_IRQ);

	FDCAN_Start(&hfdcan1);
 8001176:	4860      	ldr	r0, [pc, #384]	; (80012f8 <BLDC_main+0x2e4>)
 8001178:	f002 f880 	bl	800327c <FDCAN_Start>

	//--------------setup PWM------------------
	electrical_offset = storage->electrical_offset;
 800117c:	6821      	ldr	r1, [r4, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 800117e:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <BLDC_main+0x2e8>)
 8001180:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
 8001184:	701a      	strb	r2, [r3, #0]
	mech_offset = storage->mech_offset;//storage->mech_offset;
 8001186:	f8b1 34a8 	ldrh.w	r3, [r1, #1192]	; 0x4a8
	electrical_offset = storage->electrical_offset;
 800118a:	485d      	ldr	r0, [pc, #372]	; (8001300 <BLDC_main+0x2ec>)
 800118c:	6e4c      	ldr	r4, [r1, #100]	; 0x64
 800118e:	6004      	str	r4, [r0, #0]
	if(mech_offset > 400)mech_offset = 0;
 8001190:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001194:	f200 8093 	bhi.w	80012be <BLDC_main+0x2aa>
	mech_offset = storage->mech_offset;//storage->mech_offset;
 8001198:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <BLDC_main+0x2f0>)
 800119a:	8013      	strh	r3, [r2, #0]
	uint8_t flash_nan = 0;
	for(int i = 0; i < SIZE*NPP; i++){
		if (isnan(storage->error_filt[i]))flash_nan = 1;
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 800119c:	f44f 6288 	mov.w	r2, #1088	; 0x440
 80011a0:	3168      	adds	r1, #104	; 0x68
 80011a2:	4859      	ldr	r0, [pc, #356]	; (8001308 <BLDC_main+0x2f4>)
 80011a4:	4f59      	ldr	r7, [pc, #356]	; (800130c <BLDC_main+0x2f8>)
 80011a6:	4c5a      	ldr	r4, [pc, #360]	; (8001310 <BLDC_main+0x2fc>)
 80011a8:	4e5a      	ldr	r6, [pc, #360]	; (8001314 <BLDC_main+0x300>)
 80011aa:	4d5b      	ldr	r5, [pc, #364]	; (8001318 <BLDC_main+0x304>)
 80011ac:	f8df b184 	ldr.w	fp, [pc, #388]	; 8001334 <BLDC_main+0x320>
 80011b0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001338 <BLDC_main+0x324>
 80011b4:	f8df a184 	ldr.w	sl, [pc, #388]	; 800133c <BLDC_main+0x328>
 80011b8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001340 <BLDC_main+0x32c>
 80011bc:	f009 f81f 	bl	800a1fe <memcpy>

	uint32_t test = 1499;
 80011c0:	f240 53db 	movw	r3, #1499	; 0x5db
	CTRL_init_PWM(&test);
 80011c4:	a805      	add	r0, sp, #20
	uint32_t test = 1499;
 80011c6:	9305      	str	r3, [sp, #20]
	CTRL_init_PWM(&test);
 80011c8:	f000 fda4 	bl	8001d14 <CTRL_init_PWM>

	#ifdef CALIBRATE_ON_STARTUP
	Status = BLDC_CALIBRATING_ENCODER;
	#endif

	HAL_TIM_Base_Start_IT(&htim2); //20khz update rate for PID loops
 80011cc:	4853      	ldr	r0, [pc, #332]	; (800131c <BLDC_main+0x308>)
 80011ce:	f006 fd95 	bl	8007cfc <HAL_TIM_Base_Start_IT>
 80011d2:	e00d      	b.n	80011f0 <BLDC_main+0x1dc>
					#endif
			); // \r only goes back not to next line!
			#endif
		}

		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011de:	f005 fa75 	bl	80066cc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 80011e2:	6833      	ldr	r3, [r6, #0]
 80011e4:	484e      	ldr	r0, [pc, #312]	; (8001320 <BLDC_main+0x30c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	b19b      	cbz	r3, 8001212 <BLDC_main+0x1fe>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	f005 fa6e 	bl	80066cc <HAL_GPIO_WritePin>
		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b63      	cmp	r3, #99	; 0x63
 80011f4:	d810      	bhi.n	8001218 <BLDC_main+0x204>
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 80011f6:	682a      	ldr	r2, [r5, #0]
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d1eb      	bne.n	80011d4 <BLDC_main+0x1c0>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001204:	f005 fa62 	bl	80066cc <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	4845      	ldr	r0, [pc, #276]	; (8001320 <BLDC_main+0x30c>)
 800120c:	2201      	movs	r2, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1eb      	bne.n	80011ea <BLDC_main+0x1d6>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8001212:	4843      	ldr	r0, [pc, #268]	; (8001320 <BLDC_main+0x30c>)
 8001214:	461a      	mov	r2, r3
 8001216:	e7e8      	b.n	80011ea <BLDC_main+0x1d6>
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <BLDC_main+0x2cc>)
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 800121a:	4837      	ldr	r0, [pc, #220]	; (80012f8 <BLDC_main+0x2e4>)
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 800121c:	edd3 7a00 	vldr	s15, [r3]
			Feedback.Status_warning = warning;
 8001220:	6833      	ldr	r3, [r6, #0]
 8001222:	6063      	str	r3, [r4, #4]
			Feedback.Status_faults = error;
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	60a3      	str	r3, [r4, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8001228:	f8db 3008 	ldr.w	r3, [fp, #8]
 800122c:	60e3      	str	r3, [r4, #12]
			Feedback.Status_mode = Status;
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <BLDC_main+0x310>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	6023      	str	r3, [r4, #0]
			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8001234:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001238:	62e3      	str	r3, [r4, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 800123a:	f8d9 3000 	ldr.w	r3, [r9]
 800123e:	6223      	str	r3, [r4, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8001240:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001244:	6263      	str	r3, [r4, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8001246:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800124a:	62a3      	str	r3, [r4, #40]	; 0x28
			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 800124c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8001250:	63e3      	str	r3, [r4, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8001252:	f8da 3000 	ldr.w	r3, [sl]
 8001256:	63a3      	str	r3, [r4, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001258:	f8da 3006 	ldr.w	r3, [sl, #6]
 800125c:	6323      	str	r3, [r4, #48]	; 0x30
			Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10;
 800125e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001262:	6363      	str	r3, [r4, #52]	; 0x34
			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001264:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001268:	6163      	str	r3, [r4, #20]
 800126a:	f8d8 3000 	ldr.w	r3, [r8]
 800126e:	6123      	str	r3, [r4, #16]
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			timing_CAN_feedback = 0;
 8001274:	2300      	movs	r3, #0
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001276:	4622      	mov	r2, r4
			timing_CAN_feedback = 0;
 8001278:	603b      	str	r3, [r7, #0]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 800127a:	f240 4136 	movw	r1, #1078	; 0x436
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 800127e:	f8d8 3014 	ldr.w	r3, [r8, #20]
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8001282:	edc4 7a06 	vstr	s15, [r4, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001286:	61e3      	str	r3, [r4, #28]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001288:	f002 f84e 	bl	8003328 <FDCAN_sendData>
			PrintServerPrintf(
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <BLDC_main+0x314>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <BLDC_main+0x318>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	f7ff f97f 	bl	8000598 <__aeabi_f2d>
 800129a:	9b02      	ldr	r3, [sp, #8]
 800129c:	460a      	mov	r2, r1
 800129e:	4601      	mov	r1, r0
 80012a0:	4618      	mov	r0, r3
 80012a2:	4613      	mov	r3, r2
 80012a4:	460a      	mov	r2, r1
 80012a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012aa:	f7ff f975 	bl	8000598 <__aeabi_f2d>
 80012ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012b2:	e9cd 0100 	strd	r0, r1, [sp]
 80012b6:	481e      	ldr	r0, [pc, #120]	; (8001330 <BLDC_main+0x31c>)
 80012b8:	f001 fcee 	bl	8002c98 <PrintServerPrintf>
 80012bc:	e79b      	b.n	80011f6 <BLDC_main+0x1e2>
	if(mech_offset > 400)mech_offset = 0;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <BLDC_main+0x2f0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	e76a      	b.n	800119c <BLDC_main+0x188>
 80012c6:	bf00      	nop
 80012c8:	20000b00 	.word	0x20000b00
 80012cc:	447a0000 	.word	0x447a0000
 80012d0:	20000798 	.word	0x20000798
 80012d4:	44bb8000 	.word	0x44bb8000
 80012d8:	c4bb8000 	.word	0xc4bb8000
 80012dc:	20000aa8 	.word	0x20000aa8
 80012e0:	20000754 	.word	0x20000754
 80012e4:	200007d8 	.word	0x200007d8
 80012e8:	08000fa9 	.word	0x08000fa9
 80012ec:	08000fed 	.word	0x08000fed
 80012f0:	08000f95 	.word	0x08000f95
 80012f4:	08000fd9 	.word	0x08000fd9
 80012f8:	20001aa0 	.word	0x20001aa0
 80012fc:	20000b14 	.word	0x20000b14
 8001300:	20000b18 	.word	0x20000b18
 8001304:	20000af4 	.word	0x20000af4
 8001308:	20000b1c 	.word	0x20000b1c
 800130c:	20000b08 	.word	0x20000b08
 8001310:	200009dc 	.word	0x200009dc
 8001314:	20000b0c 	.word	0x20000b0c
 8001318:	20000ae8 	.word	0x20000ae8
 800131c:	20001dd4 	.word	0x20001dd4
 8001320:	48000800 	.word	0x48000800
 8001324:	20000aa4 	.word	0x20000aa4
 8001328:	20000b04 	.word	0x20000b04
 800132c:	20000af0 	.word	0x20000af0
 8001330:	0800c790 	.word	0x0800c790
 8001334:	20000a74 	.word	0x20000a74
 8001338:	20000a2c 	.word	0x20000a2c
 800133c:	20000a98 	.word	0x20000a98
 8001340:	20000a58 	.word	0x20000a58

08001344 <calculate>:
		}
		#endif
		#endif
	}
}
void calculate(){
 8001344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001348:	ed2d 8b02 	vpush	{d8}
	/**-----------------MEMCPY---------------------- 1.84us*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif

	memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800134c:	4bd9      	ldr	r3, [pc, #868]	; (80016b4 <calculate+0x370>)
 800134e:	4cda      	ldr	r4, [pc, #872]	; (80016b8 <calculate+0x374>)
	memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001350:	f8df a3ec 	ldr.w	sl, [pc, #1004]	; 8001740 <calculate+0x3fc>
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8001354:	4ed9      	ldr	r6, [pc, #868]	; (80016bc <calculate+0x378>)
 8001356:	4fda      	ldr	r7, [pc, #872]	; (80016c0 <calculate+0x37c>)
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001358:	f8df c3e8 	ldr.w	ip, [pc, #1000]	; 8001744 <calculate+0x400>
 800135c:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8001748 <calculate+0x404>
	memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 8001360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001366:	4bd7      	ldr	r3, [pc, #860]	; (80016c4 <calculate+0x380>)
 8001368:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800136c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8001370:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001372:	463d      	mov	r5, r7
 8001374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001376:	e896 0007 	ldmia.w	r6, {r0, r1, r2}

	//FSM
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800137a:	4bd3      	ldr	r3, [pc, #844]	; (80016c8 <calculate+0x384>)
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 800137c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001380:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001384:	781b      	ldrb	r3, [r3, #0]
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001386:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
void calculate(){
 800138a:	b083      	sub	sp, #12
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8363 	beq.w	8001a58 <calculate+0x714>
		Status = BLDC_RUNNING;
		SetMode(&Current_PID,  AUTOMATIC);
		SetMode(&Velocity_PID,  AUTOMATIC);
		SetMode(&Angle_PID,  AUTOMATIC);
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 8001392:	2b03      	cmp	r3, #3
 8001394:	d107      	bne.n	80013a6 <calculate+0x62>
 8001396:	4605      	mov	r5, r0
 8001398:	2800      	cmp	r0, #0
 800139a:	f000 8395 	beq.w	8001ac8 <calculate+0x784>
		Status = BLDC_STOPPED_WITH_BREAK;
		SetMode(&Current_PID,  MANUAL);
		SetMode(&Velocity_PID,  MANUAL);
		SetMode(&Angle_PID,  MANUAL);
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 800139e:	2801      	cmp	r0, #1
 80013a0:	bf04      	itt	eq
 80013a2:	4bc9      	ldreq	r3, [pc, #804]	; (80016c8 <calculate+0x384>)
 80013a4:	7018      	strbeq	r0, [r3, #0]
 80013a6:	4ec9      	ldr	r6, [pc, #804]	; (80016cc <calculate+0x388>)

	if (last_pos_encoder > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 80013a8:	4ac9      	ldr	r2, [pc, #804]	; (80016d0 <calculate+0x38c>)
 80013aa:	48ca      	ldr	r0, [pc, #808]	; (80016d4 <calculate+0x390>)
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	4283      	cmp	r3, r0
 80013b0:	f240 8342 	bls.w	8001a38 <calculate+0x6f4>
 80013b4:	4bc8      	ldr	r3, [pc, #800]	; (80016d8 <calculate+0x394>)
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	f8df 8390 	ldr.w	r8, [pc, #912]	; 800174c <calculate+0x408>
 80013bc:	4299      	cmp	r1, r3
 80013be:	bf9e      	ittt	ls
 80013c0:	f8d8 3000 	ldrls.w	r3, [r8]
 80013c4:	3301      	addls	r3, #1
 80013c6:	f8c8 3000 	strls.w	r3, [r8]
	else if (last_pos_encoder < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
	last_pos_encoder = IRQ_Encoders_BUFF.Encoder1_pos;
 80013ca:	6011      	str	r1, [r2, #0]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

	float d;
	float q;
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 80013cc:	4ac3      	ldr	r2, [pc, #780]	; (80016dc <calculate+0x398>)
 80013ce:	48c4      	ldr	r0, [pc, #784]	; (80016e0 <calculate+0x39c>)
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);

	int16_t angle_temp_1 = mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0);
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;

	dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 80013d0:	eddf 6ac4 	vldr	s13, [pc, #784]	; 80016e4 <calculate+0x3a0>
 80013d4:	edd4 0a01 	vldr	s1, [r4, #4]
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 80013d8:	fba2 3501 	umull	r3, r5, r2, r1
 80013dc:	f345 158f 	sbfx	r5, r5, #6, #16
 80013e0:	fb80 c305 	smull	ip, r3, r0, r5
 80013e4:	442b      	add	r3, r5
 80013e6:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80013ea:	ebce 2e23 	rsb	lr, lr, r3, asr #8
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 80013ee:	4bbe      	ldr	r3, [pc, #760]	; (80016e8 <calculate+0x3a4>)
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 80013f0:	f44f 7cb4 	mov.w	ip, #360	; 0x168
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 80013f4:	f8b3 9000 	ldrh.w	r9, [r3]
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 80013f8:	fb0c 531e 	mls	r3, ip, lr, r5
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	eba3 0309 	sub.w	r3, r3, r9
 8001402:	4463      	add	r3, ip
 8001404:	fb80 5e03 	smull	r5, lr, r0, r3
 8001408:	449e      	add	lr, r3
 800140a:	17dd      	asrs	r5, r3, #31
 800140c:	ebc5 252e 	rsb	r5, r5, lr, asr #8
 8001410:	fb0c 3315 	mls	r3, ip, r5, r3
 8001414:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8001418:	011b      	lsls	r3, r3, #4
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 800141a:	4db4      	ldr	r5, [pc, #720]	; (80016ec <calculate+0x3a8>)
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 800141c:	fb80 9e03 	smull	r9, lr, r0, r3
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001420:	ed95 7a00 	vldr	s14, [r5]
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001424:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8001750 <calculate+0x40c>
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001428:	449e      	add	lr, r3
 800142a:	17db      	asrs	r3, r3, #31
 800142c:	ebc3 232e 	rsb	r3, r3, lr, asr #8
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001430:	b29b      	uxth	r3, r3
 8001432:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001436:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800143a:	edd5 7a00 	vldr	s15, [r5]
	#endif

}
int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
	uint32_t temp = angle_deg-offset_deg+360000*2;
	temp = temp % (360000/17);
 800143e:	4bac      	ldr	r3, [pc, #688]	; (80016f0 <calculate+0x3ac>)
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	uint32_t temp = angle_deg-offset_deg+360000*2;
 8001444:	f501 212f 	add.w	r1, r1, #716800	; 0xaf000
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001448:	ee77 7ac7 	vsub.f32	s15, s15, s14
	uint32_t temp = angle_deg-offset_deg+360000*2;
 800144c:	f501 6148 	add.w	r1, r1, #3200	; 0xc80
	temp = temp % (360000/17);
 8001450:	fba3 5301 	umull	r5, r3, r3, r1
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001454:	ed99 7a00 	vldr	s14, [r9]
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	temp = temp % (360000/17);
 800145c:	0b9b      	lsrs	r3, r3, #14
 800145e:	f245 25b8 	movw	r5, #21176	; 0x52b8
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001462:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	temp = temp % (360000/17);
 8001466:	fb05 1113 	mls	r1, r5, r3, r1
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 800146a:	ee17 5a90 	vmov	r5, s15
	temp = temp*17/1000;
 800146e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001472:	ee17 3a10 	vmov	r3, s14
	temp = temp*17/1000;
 8001476:	fba2 1201 	umull	r1, r2, r2, r1
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 800147a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 800147e:	eb05 1292 	add.w	r2, r5, r2, lsr #6
 8001482:	441a      	add	r2, r3
 8001484:	f502 7234 	add.w	r2, r2, #720	; 0x2d0
 8001488:	fb80 3002 	smull	r3, r0, r0, r2
 800148c:	4410      	add	r0, r2
 800148e:	17d3      	asrs	r3, r2, #31
 8001490:	ebc3 2320 	rsb	r3, r3, r0, asr #8
 8001494:	fb0c 2213 	mls	r2, ip, r3, r2
	dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 8001498:	b212      	sxth	r2, r2
 800149a:	ee07 2a90 	vmov	s15, r2
 800149e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80014a2:	edd4 7a00 	vldr	s15, [r4]
 80014a6:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 80014aa:	edd4 7a02 	vldr	s15, [r4, #8]
 80014ae:	a901      	add	r1, sp, #4
 80014b0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 80014b4:	4668      	mov	r0, sp
 80014b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80014ba:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80014be:	f001 fe97 	bl	80031f0 <dq0>
	FIR_value -= FIR_Values[FIR_index];
 80014c2:	498c      	ldr	r1, [pc, #560]	; (80016f4 <calculate+0x3b0>)
	FIR_Values[FIR_index] = input/FIR_FILTER_LENGTH;
 80014c4:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80016f8 <calculate+0x3b4>
	FIR_value -= FIR_Values[FIR_index];
 80014c8:	488c      	ldr	r0, [pc, #560]	; (80016fc <calculate+0x3b8>)
	FIR_Values[FIR_index] = input/FIR_FILTER_LENGTH;
 80014ca:	eddd 7a01 	vldr	s15, [sp, #4]
	FIR_value -= FIR_Values[FIR_index];
 80014ce:	780b      	ldrb	r3, [r1, #0]
 80014d0:	4a8b      	ldr	r2, [pc, #556]	; (8001700 <calculate+0x3bc>)
 80014d2:	edd0 8a00 	vldr	s17, [r0]
	FIR_Values[FIR_index] = input/FIR_FILTER_LENGTH;
 80014d6:	ee67 7a87 	vmul.f32	s15, s15, s14
	FIR_value -= FIR_Values[FIR_index];
 80014da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80014de:	ed92 7a00 	vldr	s14, [r2]
	FIR_Values[FIR_index] = input/FIR_FILTER_LENGTH;
 80014e2:	edc2 7a00 	vstr	s15, [r2]
	FIR_value += FIR_Values[FIR_index];
 80014e6:	ee77 8aa8 	vadd.f32	s17, s15, s17
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 80014ea:	2b08      	cmp	r3, #8
	FIR_value += FIR_Values[FIR_index];
 80014ec:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80014f0:	edc0 8a00 	vstr	s17, [r0]
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 80014f4:	f200 829d 	bhi.w	8001a32 <calculate+0x6ee>
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
	FIR2_value -= FIR_Values2[FIR_index];
 80014fc:	4618      	mov	r0, r3
 80014fe:	4a81      	ldr	r2, [pc, #516]	; (8001704 <calculate+0x3c0>)
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 8001500:	eddd 7a00 	vldr	s15, [sp]
 8001504:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001708 <calculate+0x3c4>
 8001508:	700b      	strb	r3, [r1, #0]
	FIR2_value -= FIR_Values2[FIR_index];
 800150a:	4b80      	ldr	r3, [pc, #512]	; (800170c <calculate+0x3c8>)
 800150c:	ed92 8a00 	vldr	s16, [r2]
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001510:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8001710 <calculate+0x3cc>
 8001514:	ed98 6a00 	vldr	s12, [r8]
 8001518:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8001714 <calculate+0x3d0>
	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 800151c:	eddb 6a02 	vldr	s13, [fp, #8]
	Current_PID.Input = q_lpf;
 8001520:	4c7d      	ldr	r4, [pc, #500]	; (8001718 <calculate+0x3d4>)
	Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001522:	f8df b230 	ldr.w	fp, [pc, #560]	; 8001754 <calculate+0x410>
	Current_PID_offset.Input = d_lpf;
 8001526:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001758 <calculate+0x414>
	Current_PID.Input = q_lpf;
 800152a:	edc4 8a00 	vstr	s17, [r4]
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 800152e:	ee67 7a87 	vmul.f32	s15, s15, s14
	FIR2_value -= FIR_Values2[FIR_index];
 8001532:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001536:	ed93 7a00 	vldr	s14, [r3]
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 800153a:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index] ;
 800153e:	ee37 8a88 	vadd.f32	s16, s15, s16
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001542:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	FIR2_value += FIR_Values2[FIR_index] ;
 8001546:	ee38 8a47 	vsub.f32	s16, s16, s14
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 800154a:	edd7 7a00 	vldr	s15, [r7]
	FIR2_value += FIR_Values2[FIR_index] ;
 800154e:	ed82 8a00 	vstr	s16, [r2]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 8001552:	4a72      	ldr	r2, [pc, #456]	; (800171c <calculate+0x3d8>)
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001554:	4872      	ldr	r0, [pc, #456]	; (8001720 <calculate+0x3dc>)
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 8001556:	7813      	ldrb	r3, [r2, #0]
	Current_PID_offset.Input = d_lpf;
 8001558:	ed88 8a00 	vstr	s16, [r8]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 800155c:	2b62      	cmp	r3, #98	; 0x62
 800155e:	bf9a      	itte	ls
 8001560:	3301      	addls	r3, #1
 8001562:	b2db      	uxtbls	r3, r3
	else FIR_index2 = 0;
 8001564:	2300      	movhi	r3, #0
 8001566:	7013      	strb	r3, [r2, #0]
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001568:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <calculate+0x3e0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001570:	ee27 7a05 	vmul.f32	s14, s14, s10
 8001574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001578:	eea6 7a25 	vfma.f32	s14, s12, s11
	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 800157c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001580:	ee77 7a87 	vadd.f32	s15, s15, s14
	Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001584:	ed97 7a05 	vldr	s14, [r7, #20]
	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8001588:	edc0 6a02 	vstr	s13, [r0, #8]
	Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 800158c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001590:	edc0 7a00 	vstr	s15, [r0]
	Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001594:	ed8b 7a00 	vstr	s14, [fp]
	Compute(&Angle_PID);
 8001598:	f001 fa32 	bl	8002a00 <Compute>
	Velocity_PID.Setpoint = Angle_PID.Output;
 800159c:	4860      	ldr	r0, [pc, #384]	; (8001720 <calculate+0x3dc>)
 800159e:	6843      	ldr	r3, [r0, #4]
 80015a0:	f8cb 3008 	str.w	r3, [fp, #8]
	Compute(&Velocity_PID);
 80015a4:	4658      	mov	r0, fp
 80015a6:	f001 fa2b 	bl	8002a00 <Compute>
	Current_PID.Setpoint = Velocity_PID.Output;
 80015aa:	f8db 3004 	ldr.w	r3, [fp, #4]
 80015ae:	60a3      	str	r3, [r4, #8]
	Compute(&Current_PID);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f001 fa25 	bl	8002a00 <Compute>
	Current_PID_offset.Setpoint = 0;
 80015b6:	2300      	movs	r3, #0
	Compute(&Current_PID_offset);
 80015b8:	4640      	mov	r0, r8
	Current_PID_offset.Setpoint = 0;
 80015ba:	f8c8 3008 	str.w	r3, [r8, #8]
	RunCordic_inverse(V_d, V_q, &theta, &mag);
 80015be:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800175c <calculate+0x418>
	Compute(&Current_PID_offset);
 80015c2:	f001 fa1d 	bl	8002a00 <Compute>
	V_q= V_q/1500.0f*0.7f;
 80015c6:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001728 <calculate+0x3e4>
	float V_d = Current_PID_offset.Output;
 80015ca:	ed98 0a01 	vldr	s0, [r8, #4]
	float V_q = Current_PID.Output;
 80015ce:	edd4 0a01 	vldr	s1, [r4, #4]
	RunCordic_inverse(V_d, V_q, &theta, &mag);
 80015d2:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001760 <calculate+0x41c>
 80015d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80015da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80015de:	4641      	mov	r1, r8
 80015e0:	4658      	mov	r0, fp
 80015e2:	f000 fb6b 	bl	8001cbc <RunCordic_inverse>
	mag = mag*1500.0f/0.7f;
 80015e6:	edd8 7a00 	vldr	s15, [r8]
 80015ea:	eddf 6a50 	vldr	s13, [pc, #320]	; 800172c <calculate+0x3e8>
	theta = theta*180.0f;
 80015ee:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001730 <calculate+0x3ec>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <calculate+0x3f0>)
	warning = 0;
 80015f4:	4a50      	ldr	r2, [pc, #320]	; (8001738 <calculate+0x3f4>)
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80015f6:	6834      	ldr	r4, [r6, #0]
	mag = mag*1500.0f/0.7f;
 80015f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	check_value(&LIMIT_Current, (int32_t)q_lpf, &warning, &error, 0);
 80015fc:	eefd 8ae8 	vcvt.s32.f32	s17, s17
	mag = mag*1500.0f/0.7f;
 8001600:	edc8 7a00 	vstr	s15, [r8]
	theta = theta*180.0f;
 8001604:	eddb 7a00 	vldr	s15, [fp]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001608:	eef8 8ae8 	vcvt.f32.s32	s17, s17
	theta = theta*180.0f;
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001610:	ed93 7a03 	vldr	s14, [r3, #12]
	theta = theta*180.0f;
 8001614:	edcb 7a00 	vstr	s15, [fp]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001618:	eef4 8ac7 	vcmpe.f32	s17, s14
	warning = 0;
 800161c:	2100      	movs	r1, #0
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	warning = 0;
 8001622:	6011      	str	r1, [r2, #0]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001624:	f280 8201 	bge.w	8001a2a <calculate+0x6e6>
 8001628:	edd3 7a01 	vldr	s15, [r3, #4]
 800162c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	f240 81f9 	bls.w	8001a2a <calculate+0x6e6>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001638:	edd3 7a02 	vldr	s15, [r3, #8]
 800163c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	f280 81ee 	bge.w	8001a24 <calculate+0x6e0>
 8001648:	edd3 6a00 	vldr	s13, [r3]
 800164c:	eef4 8ae6 	vcmpe.f32	s17, s13
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	f240 81e6 	bls.w	8001a24 <calculate+0x6e0>
	check_value(&LIMIT_Current, (int32_t)d_lpf, &warning, &error, 0);
 8001658:	eebd 8ac8 	vcvt.s32.f32	s16, s16
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 800165c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8001660:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	f280 81d8 	bge.w	8001a1c <calculate+0x6d8>
 800166c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001670:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	f240 81d0 	bls.w	8001a1c <calculate+0x6d8>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800167c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	f280 81c7 	bge.w	8001a16 <calculate+0x6d2>
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	f240 81bf 	bls.w	8001a16 <calculate+0x6d2>
	check_value(&LIMIT_Encoder_1, IRQ_Encoders_BUFF.Encoder1_pos, &warning, &error, 1);
 8001698:	6838      	ldr	r0, [r7, #0]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <calculate+0x3f8>)
 800169c:	ee07 0a90 	vmov	s15, r0
 80016a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	e058      	b.n	8001764 <calculate+0x420>
 80016b2:	bf00      	nop
 80016b4:	20000a1c 	.word	0x20000a1c
 80016b8:	20000a2c 	.word	0x20000a2c
 80016bc:	20000a3c 	.word	0x20000a3c
 80016c0:	20000a58 	.word	0x20000a58
 80016c4:	20000a8c 	.word	0x20000a8c
 80016c8:	20000aa4 	.word	0x20000aa4
 80016cc:	20000ae8 	.word	0x20000ae8
 80016d0:	20000aec 	.word	0x20000aec
 80016d4:	00041eb0 	.word	0x00041eb0
 80016d8:	00015f8f 	.word	0x00015f8f
 80016dc:	10624dd3 	.word	0x10624dd3
 80016e0:	b60b60b7 	.word	0xb60b60b7
 80016e4:	3c8efa36 	.word	0x3c8efa36
 80016e8:	20000af4 	.word	0x20000af4
 80016ec:	20000b1c 	.word	0x20000b1c
 80016f0:	c6119a11 	.word	0xc6119a11
 80016f4:	200009d4 	.word	0x200009d4
 80016f8:	3dcccccd 	.word	0x3dcccccd
 80016fc:	200009d8 	.word	0x200009d8
 8001700:	2000081c 	.word	0x2000081c
 8001704:	20000818 	.word	0x20000818
 8001708:	3c23d70a 	.word	0x3c23d70a
 800170c:	20000844 	.word	0x20000844
 8001710:	447a0000 	.word	0x447a0000
 8001714:	48afc800 	.word	0x48afc800
 8001718:	20000798 	.word	0x20000798
 800171c:	200009d5 	.word	0x200009d5
 8001720:	20000754 	.word	0x20000754
 8001724:	20000b00 	.word	0x20000b00
 8001728:	39f4aaf0 	.word	0x39f4aaf0
 800172c:	4505edb7 	.word	0x4505edb7
 8001730:	43340000 	.word	0x43340000
 8001734:	20000000 	.word	0x20000000
 8001738:	20000b0c 	.word	0x20000b0c
 800173c:	20000010 	.word	0x20000010
 8001740:	20000a98 	.word	0x20000a98
 8001744:	20000a80 	.word	0x20000a80
 8001748:	20000a74 	.word	0x20000a74
 800174c:	20000af8 	.word	0x20000af8
 8001750:	20000b18 	.word	0x20000b18
 8001754:	20000aa8 	.word	0x20000aa8
 8001758:	200007d8 	.word	0x200007d8
 800175c:	20000b04 	.word	0x20000b04
 8001760:	20000af0 	.word	0x20000af0
 8001764:	f280 8153 	bge.w	8001a0e <calculate+0x6ca>
 8001768:	ed93 7a01 	vldr	s14, [r3, #4]
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	f240 814b 	bls.w	8001a0e <calculate+0x6ca>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001778:	ed93 7a02 	vldr	s14, [r3, #8]
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	f280 813e 	bge.w	8001a04 <calculate+0x6c0>
 8001788:	ed93 7a00 	vldr	s14, [r3]
 800178c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	f240 8136 	bls.w	8001a04 <calculate+0x6c0>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001798:	edd7 7a01 	vldr	s15, [r7, #4]
 800179c:	4bbc      	ldr	r3, [pc, #752]	; (8001a90 <calculate+0x74c>)
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	f280 8125 	bge.w	80019fc <calculate+0x6b8>
 80017b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	f240 811d 	bls.w	80019fc <calculate+0x6b8>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80017c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	f280 8110 	bge.w	80019f2 <calculate+0x6ae>
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	f240 8108 	bls.w	80019f2 <calculate+0x6ae>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80017e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e6:	4bab      	ldr	r3, [pc, #684]	; (8001a94 <calculate+0x750>)
 80017e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80017f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	f280 80f7 	bge.w	80019ea <calculate+0x6a6>
 80017fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	f240 80ef 	bls.w	80019ea <calculate+0x6a6>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800180c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	f280 80e2 	bge.w	80019e0 <calculate+0x69c>
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	f240 80da 	bls.w	80019e0 <calculate+0x69c>
	check_value(&LIMIT_V_AUX, IRQ_Voltage_Temp_BUFF.V_aux, &warning, &error, 4);
 800182c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8001830:	ee07 3a90 	vmov	s15, r3
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001834:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <calculate+0x754>)
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	ed93 7a03 	vldr	s14, [r3, #12]
 800183e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	f280 80c7 	bge.w	80019d8 <calculate+0x694>
 800184a:	ed93 7a01 	vldr	s14, [r3, #4]
 800184e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001856:	f240 80bf 	bls.w	80019d8 <calculate+0x694>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800185a:	ed93 7a02 	vldr	s14, [r3, #8]
 800185e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	f280 80b2 	bge.w	80019ce <calculate+0x68a>
 800186a:	ed93 7a00 	vldr	s14, [r3]
 800186e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	f240 80aa 	bls.w	80019ce <calculate+0x68a>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 800187a:	edda 7a00 	vldr	s15, [sl]
 800187e:	4b87      	ldr	r3, [pc, #540]	; (8001a9c <calculate+0x758>)
 8001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001884:	ed93 7a03 	vldr	s14, [r3, #12]
 8001888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	f280 8099 	bge.w	80019c6 <calculate+0x682>
 8001894:	ed93 7a01 	vldr	s14, [r3, #4]
 8001898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	f240 8091 	bls.w	80019c6 <calculate+0x682>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80018a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	f280 8084 	bge.w	80019bc <calculate+0x678>
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d97c      	bls.n	80019bc <calculate+0x678>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80018c2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 80018c6:	4976      	ldr	r1, [pc, #472]	; (8001aa0 <calculate+0x75c>)
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	edd1 6a03 	vldr	s13, [r1, #12]
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	da6a      	bge.n	80019b4 <calculate+0x670>
 80018de:	ed91 7a01 	vldr	s14, [r1, #4]
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d963      	bls.n	80019b4 <calculate+0x670>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80018ec:	ed91 7a02 	vldr	s14, [r1, #8]
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	da57      	bge.n	80019aa <calculate+0x666>
 80018fa:	ed91 6a00 	vldr	s12, [r1]
 80018fe:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d950      	bls.n	80019aa <calculate+0x666>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001908:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001914:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	da41      	bge.n	80019a2 <calculate+0x65e>
 800191e:	edd1 6a01 	vldr	s13, [r1, #4]
 8001922:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d93a      	bls.n	80019a2 <calculate+0x65e>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800192c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	da29      	bge.n	800198a <calculate+0x646>
 8001936:	ed91 7a00 	vldr	s14, [r1]
 800193a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	d922      	bls.n	800198a <calculate+0x646>
	if(error){
 8001944:	bb3c      	cbnz	r4, 8001996 <calculate+0x652>
	else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <calculate+0x760>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	f000 80d4 	beq.w	8001af8 <calculate+0x7b4>
	else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8099 	beq.w	8001a88 <calculate+0x744>
	else if (Status == BLDC_RUNNING){
 8001956:	2b03      	cmp	r3, #3
 8001958:	f000 80d3 	beq.w	8001b02 <calculate+0x7be>
	else if (Status == BLDC_CALIBRATING_ENCODER){
 800195c:	2b02      	cmp	r3, #2
 800195e:	f000 8100 	beq.w	8001b62 <calculate+0x81e>
	dac_value(q/10 +1500);
 8001962:	eddd 6a01 	vldr	s13, [sp, #4]
 8001966:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001aa8 <calculate+0x764>
 800196a:	eddf 7a50 	vldr	s15, [pc, #320]	; 8001aac <calculate+0x768>
 800196e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	b298      	uxth	r0, r3
 800197c:	f001 f9ac 	bl	8002cd8 <dac_value>
}
 8001980:	b003      	add	sp, #12
 8001982:	ecbd 8b02 	vpop	{d8}
 8001986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	6013      	str	r3, [r2, #0]
	if(error){
 8001992:	2c00      	cmp	r4, #0
 8001994:	d0d7      	beq.n	8001946 <calculate+0x602>
		Status = BLDC_ERROR;
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <calculate+0x760>)
 8001998:	2304      	movs	r3, #4
 800199a:	7013      	strb	r3, [r2, #0]
		shutoff();
 800199c:	f000 fad4 	bl	8001f48 <shutoff>
 80019a0:	e7df      	b.n	8001962 <calculate+0x61e>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019a2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80019a6:	6034      	str	r4, [r6, #0]
 80019a8:	e7c0      	b.n	800192c <calculate+0x5e8>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e7a9      	b.n	8001908 <calculate+0x5c4>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019b4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80019b8:	6034      	str	r4, [r6, #0]
 80019ba:	e797      	b.n	80018ec <calculate+0x5a8>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	f043 0320 	orr.w	r3, r3, #32
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e77d      	b.n	80018c2 <calculate+0x57e>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019c6:	f044 0420 	orr.w	r4, r4, #32
 80019ca:	6034      	str	r4, [r6, #0]
 80019cc:	e76a      	b.n	80018a4 <calculate+0x560>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e750      	b.n	800187a <calculate+0x536>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019d8:	f044 0410 	orr.w	r4, r4, #16
 80019dc:	6034      	str	r4, [r6, #0]
 80019de:	e73c      	b.n	800185a <calculate+0x516>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e720      	b.n	800182c <calculate+0x4e8>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019ea:	f044 0408 	orr.w	r4, r4, #8
 80019ee:	6034      	str	r4, [r6, #0]
 80019f0:	e70c      	b.n	800180c <calculate+0x4c8>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80019f2:	6813      	ldr	r3, [r2, #0]
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e6f2      	b.n	80017e2 <calculate+0x49e>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 80019fc:	f044 0404 	orr.w	r4, r4, #4
 8001a00:	6034      	str	r4, [r6, #0]
 8001a02:	e6de      	b.n	80017c2 <calculate+0x47e>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e6c4      	b.n	8001798 <calculate+0x454>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001a0e:	f044 0402 	orr.w	r4, r4, #2
 8001a12:	6034      	str	r4, [r6, #0]
 8001a14:	e6b0      	b.n	8001778 <calculate+0x434>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001a16:	2301      	movs	r3, #1
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e63d      	b.n	8001698 <calculate+0x354>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001a1c:	f044 0401 	orr.w	r4, r4, #1
 8001a20:	6034      	str	r4, [r6, #0]
 8001a22:	e62b      	b.n	800167c <calculate+0x338>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001a24:	2101      	movs	r1, #1
 8001a26:	6011      	str	r1, [r2, #0]
 8001a28:	e616      	b.n	8001658 <calculate+0x314>
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001a2a:	f044 0401 	orr.w	r4, r4, #1
 8001a2e:	6034      	str	r4, [r6, #0]
 8001a30:	e602      	b.n	8001638 <calculate+0x2f4>
 8001a32:	2000      	movs	r0, #0
	else FIR_index = 0;
 8001a34:	4603      	mov	r3, r0
 8001a36:	e562      	b.n	80014fe <calculate+0x1ba>
	else if (last_pos_encoder < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001a38:	491d      	ldr	r1, [pc, #116]	; (8001ab0 <calculate+0x76c>)
 8001a3a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001ac4 <calculate+0x780>
 8001a3e:	428b      	cmp	r3, r1
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	f63f acc2 	bhi.w	80013ca <calculate+0x86>
 8001a46:	4281      	cmp	r1, r0
 8001a48:	bf82      	ittt	hi
 8001a4a:	f8d8 3000 	ldrhi.w	r3, [r8]
 8001a4e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8001a52:	f8c8 3000 	strhi.w	r3, [r8]
 8001a56:	e4b8      	b.n	80013ca <calculate+0x86>
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001a58:	2804      	cmp	r0, #4
 8001a5a:	d045      	beq.n	8001ae8 <calculate+0x7a4>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001a5c:	2805      	cmp	r0, #5
 8001a5e:	d048      	beq.n	8001af2 <calculate+0x7ae>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001a60:	2802      	cmp	r0, #2
 8001a62:	f47f aca0 	bne.w	80013a6 <calculate+0x62>
		Status = BLDC_RUNNING;
 8001a66:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <calculate+0x760>)
		SetMode(&Current_PID,  AUTOMATIC);
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <calculate+0x770>)
 8001a6a:	4e13      	ldr	r6, [pc, #76]	; (8001ab8 <calculate+0x774>)
		Status = BLDC_RUNNING;
 8001a6c:	2303      	movs	r3, #3
		SetMode(&Current_PID,  AUTOMATIC);
 8001a6e:	2101      	movs	r1, #1
		Status = BLDC_RUNNING;
 8001a70:	7013      	strb	r3, [r2, #0]
		SetMode(&Current_PID,  AUTOMATIC);
 8001a72:	f001 f8cd 	bl	8002c10 <SetMode>
		SetMode(&Velocity_PID,  AUTOMATIC);
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <calculate+0x778>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	f001 f8c9 	bl	8002c10 <SetMode>
		SetMode(&Angle_PID,  AUTOMATIC);
 8001a7e:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <calculate+0x77c>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	f001 f8c5 	bl	8002c10 <SetMode>
 8001a86:	e48f      	b.n	80013a8 <calculate+0x64>
		shutoff();
 8001a88:	f000 fa5e 	bl	8001f48 <shutoff>
 8001a8c:	e769      	b.n	8001962 <calculate+0x61e>
 8001a8e:	bf00      	nop
 8001a90:	20000020 	.word	0x20000020
 8001a94:	20000050 	.word	0x20000050
 8001a98:	20000030 	.word	0x20000030
 8001a9c:	20000040 	.word	0x20000040
 8001aa0:	20000060 	.word	0x20000060
 8001aa4:	20000aa4 	.word	0x20000aa4
 8001aa8:	3dcccccd 	.word	0x3dcccccd
 8001aac:	44bb8000 	.word	0x44bb8000
 8001ab0:	00015f8f 	.word	0x00015f8f
 8001ab4:	20000798 	.word	0x20000798
 8001ab8:	20000ae8 	.word	0x20000ae8
 8001abc:	20000aa8 	.word	0x20000aa8
 8001ac0:	20000754 	.word	0x20000754
 8001ac4:	20000af8 	.word	0x20000af8
		Status = BLDC_STOPPED_WITH_BREAK;
 8001ac8:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <calculate+0x888>)
 8001aca:	4e41      	ldr	r6, [pc, #260]	; (8001bd0 <calculate+0x88c>)
 8001acc:	7018      	strb	r0, [r3, #0]
		SetMode(&Current_PID,  MANUAL);
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4840      	ldr	r0, [pc, #256]	; (8001bd4 <calculate+0x890>)
 8001ad2:	f001 f89d 	bl	8002c10 <SetMode>
		SetMode(&Velocity_PID,  MANUAL);
 8001ad6:	4840      	ldr	r0, [pc, #256]	; (8001bd8 <calculate+0x894>)
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f001 f899 	bl	8002c10 <SetMode>
		SetMode(&Angle_PID,  MANUAL);
 8001ade:	483f      	ldr	r0, [pc, #252]	; (8001bdc <calculate+0x898>)
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f001 f895 	bl	8002c10 <SetMode>
 8001ae6:	e45f      	b.n	80013a8 <calculate+0x64>
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001ae8:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <calculate+0x888>)
 8001aea:	4e39      	ldr	r6, [pc, #228]	; (8001bd0 <calculate+0x88c>)
 8001aec:	2302      	movs	r3, #2
 8001aee:	7013      	strb	r3, [r2, #0]
 8001af0:	e45a      	b.n	80013a8 <calculate+0x64>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001af2:	4e37      	ldr	r6, [pc, #220]	; (8001bd0 <calculate+0x88c>)
 8001af4:	6033      	str	r3, [r6, #0]
 8001af6:	e457      	b.n	80013a8 <calculate+0x64>
		shutoff();
 8001af8:	f000 fa26 	bl	8001f48 <shutoff>
		shutdown();
 8001afc:	f000 fa2c 	bl	8001f58 <shutdown>
 8001b00:	e72f      	b.n	8001962 <calculate+0x61e>
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b02:	ed9b 7a00 	vldr	s14, [fp]
 8001b06:	edd9 7a00 	vldr	s15, [r9]
	temp = temp % (360000/17);
 8001b0a:	4c35      	ldr	r4, [pc, #212]	; (8001be0 <calculate+0x89c>)
	temp = temp*17/1000;
 8001b0c:	4e35      	ldr	r6, [pc, #212]	; (8001be4 <calculate+0x8a0>)
	uint32_t temp = angle_deg-offset_deg+360000*2;
 8001b0e:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b12:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint32_t temp = angle_deg-offset_deg+360000*2;
 8001b1a:	f500 6048 	add.w	r0, r0, #3200	; 0xc80
	temp = temp % (360000/17);
 8001b1e:	fba4 7400 	umull	r7, r4, r4, r0
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b22:	ee17 2a10 	vmov	r2, s14
 8001b26:	ee17 3a90 	vmov	r3, s15
	temp = temp % (360000/17);
 8001b2a:	0ba4      	lsrs	r4, r4, #14
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b2c:	edd8 7a00 	vldr	s15, [r8]
	temp = temp % (360000/17);
 8001b30:	f245 27b8 	movw	r7, #21176	; 0x52b8
 8001b34:	fb07 0014 	mls	r0, r7, r4, r0
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3c:	4413      	add	r3, r2
	temp = temp*17/1000;
 8001b3e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b42:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
	temp = temp*17/1000;
 8001b46:	fba6 6000 	umull	r6, r0, r6, r0
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001b4a:	ee17 1a90 	vmov	r1, s15
 8001b4e:	eb03 1090 	add.w	r0, r3, r0, lsr #6
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <calculate+0x8a4>)
 8001b54:	4428      	add	r0, r5
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	b289      	uxth	r1, r1
 8001b5a:	b200      	sxth	r0, r0
 8001b5c:	f000 f93c 	bl	8001dd8 <inverter>
 8001b60:	e6ff      	b.n	8001962 <calculate+0x61e>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	4821      	ldr	r0, [pc, #132]	; (8001bec <calculate+0x8a8>)
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	f004 fdb0 	bl	80066cc <HAL_GPIO_WritePin>
		order_phases(&IRQ_Encoders, &IRQ_Current);
 8001b6c:	4920      	ldr	r1, [pc, #128]	; (8001bf0 <calculate+0x8ac>)
 8001b6e:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <calculate+0x8b0>)
 8001b70:	f000 fa14 	bl	8001f9c <order_phases>
		calibrate(&IRQ_Encoders, &IRQ_Current);
 8001b74:	491e      	ldr	r1, [pc, #120]	; (8001bf0 <calculate+0x8ac>)
 8001b76:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <calculate+0x8b0>)
 8001b78:	f000 fb52 	bl	8002220 <calibrate>
		storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <calculate+0x8b0>)
 8001b7e:	4919      	ldr	r1, [pc, #100]	; (8001be4 <calculate+0x8a0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1d      	ldr	r2, [pc, #116]	; (8001bf8 <calculate+0x8b4>)
 8001b84:	fba1 1303 	umull	r1, r3, r1, r3
 8001b88:	491c      	ldr	r1, [pc, #112]	; (8001bfc <calculate+0x8b8>)
 8001b8a:	6810      	ldr	r0, [r2, #0]
		storage->electrical_offset = electrical_offset;
 8001b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b90:	6642      	str	r2, [r0, #100]	; 0x64
		storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001b92:	f343 138f 	sbfx	r3, r3, #6, #16
 8001b96:	fb81 5103 	smull	r5, r1, r1, r3
 8001b9a:	4419      	add	r1, r3
 8001b9c:	17dd      	asrs	r5, r3, #31
		storage->PHASE_ORDER = PHASE_ORDER;
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <calculate+0x8a4>)
		storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001ba0:	ebc5 2121 	rsb	r1, r5, r1, asr #8
 8001ba4:	f44f 75b4 	mov.w	r5, #360	; 0x168
 8001ba8:	fb05 3311 	mls	r3, r5, r1, r3
		storage->PHASE_ORDER = PHASE_ORDER;
 8001bac:	7812      	ldrb	r2, [r2, #0]
		storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001bae:	f8a0 34a8 	strh.w	r3, [r0, #1192]	; 0x4a8
		storage->PHASE_ORDER = PHASE_ORDER;
 8001bb2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001bb6:	4912      	ldr	r1, [pc, #72]	; (8001c00 <calculate+0x8bc>)
 8001bb8:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001bbc:	3068      	adds	r0, #104	; 0x68
 8001bbe:	f008 fb1e 	bl	800a1fe <memcpy>
		Flash_save();
 8001bc2:	f000 fef1 	bl	80029a8 <Flash_save>
		Status = BLDC_STOPPED_WITH_BREAK;
 8001bc6:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <calculate+0x888>)
 8001bc8:	701c      	strb	r4, [r3, #0]
 8001bca:	e6ca      	b.n	8001962 <calculate+0x61e>
 8001bcc:	20000aa4 	.word	0x20000aa4
 8001bd0:	20000ae8 	.word	0x20000ae8
 8001bd4:	20000798 	.word	0x20000798
 8001bd8:	20000aa8 	.word	0x20000aa8
 8001bdc:	20000754 	.word	0x20000754
 8001be0:	c6119a11 	.word	0xc6119a11
 8001be4:	10624dd3 	.word	0x10624dd3
 8001be8:	20000b14 	.word	0x20000b14
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	20000a1c 	.word	0x20000a1c
 8001bf4:	20000a3c 	.word	0x20000a3c
 8001bf8:	20000b00 	.word	0x20000b00
 8001bfc:	b60b60b7 	.word	0xb60b60b7
 8001c00:	20000b1c 	.word	0x20000b1c

08001c04 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c06:	4298      	cmp	r0, r3
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001c08:	b510      	push	{r4, lr}
 8001c0a:	4604      	mov	r4, r0
	if(htim == &htim2){
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x12>
	if(htim == &htim3)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c10:	429c      	cmp	r4, r3
 8001c12:	d017      	beq.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0x40>
}
 8001c14:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001c16:	480f      	ldr	r0, [pc, #60]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	f004 fd56 	bl	80066cc <HAL_GPIO_WritePin>
		calculate();
 8001c20:	f7ff fb90 	bl	8001344 <calculate>
		timing_CAN_feedback++;
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x54>)
		running_LED_timing++;
 8001c26:	490d      	ldr	r1, [pc, #52]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x58>)
		timing_CAN_feedback++;
 8001c28:	6802      	ldr	r2, [r0, #0]
		running_LED_timing++;
 8001c2a:	680b      	ldr	r3, [r1, #0]
		timing_CAN_feedback++;
 8001c2c:	3201      	adds	r2, #1
		running_LED_timing++;
 8001c2e:	3301      	adds	r3, #1
		timing_CAN_feedback++;
 8001c30:	6002      	str	r2, [r0, #0]
		running_LED_timing++;
 8001c32:	600b      	str	r3, [r1, #0]
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	f004 fd47 	bl	80066cc <HAL_GPIO_WritePin>
	if(htim == &htim3)
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c40:	429c      	cmp	r4, r3
 8001c42:	d1e7      	bne.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0x10>
}
 8001c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ENCODER_TIM_PeriodElapsedCallback();
 8001c48:	f000 be3c 	b.w	80028c4 <ENCODER_TIM_PeriodElapsedCallback>
 8001c4c:	20001dd4 	.word	0x20001dd4
 8001c50:	20001e20 	.word	0x20001e20
 8001c54:	48000800 	.word	0x48000800
 8001c58:	20000b08 	.word	0x20000b08
 8001c5c:	20000afc 	.word	0x20000afc

08001c60 <RunCordic2>:
void RunCordic2(float theta, float *cos_out, float *sin_out) {
	WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
	/* CORDIC FUNCTION: COSINE q1.15 */

	unsigned int cordicin = 0x7fff0000;  //  mag = 1
	short thetashort = theta*10430;       // wrap it
 8001c60:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001cac <RunCordic2+0x4c>
	WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <RunCordic2+0x50>)
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <RunCordic2+0x54>)
 8001c68:	6013      	str	r3, [r2, #0]
	short thetashort = theta*10430;       // wrap it
 8001c6a:	ee20 0a27 	vmul.f32	s0, s0, s15
	LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) cordicin);
	int16_t out0 = LL_CORDIC_ReadData(CORDIC);

	short out2 = (out0&0xffff0000)>>16;
	short out1 = out0&0xffff;  //
	*cos_out = (float)out1/32768.0f;
 8001c6e:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001cb8 <RunCordic2+0x58>
	short thetashort = theta*10430;       // wrap it
 8001c72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	cordicin += thetashort;
 8001c76:	ee10 3a10 	vmov	r3, s0
 8001c7a:	b21b      	sxth	r3, r3
	LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) cordicin);
 8001c7c:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001c80:	6053      	str	r3, [r2, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001c82:	6893      	ldr	r3, [r2, #8]
	int16_t out0 = LL_CORDIC_ReadData(CORDIC);
 8001c84:	b21b      	sxth	r3, r3
	*sin_out = (float)out2/32768.0f;
 8001c86:	17da      	asrs	r2, r3, #31
 8001c88:	ee07 2a10 	vmov	s14, r2
	*cos_out = (float)out1/32768.0f;
 8001c8c:	ee07 3a90 	vmov	s15, r3
	*sin_out = (float)out2/32768.0f;
 8001c90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	*cos_out = (float)out1/32768.0f;
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*sin_out = (float)out2/32768.0f;
 8001c98:	ee27 7a26 	vmul.f32	s14, s14, s13
	*cos_out = (float)out1/32768.0f;
 8001c9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ca0:	edc0 7a00 	vstr	s15, [r0]
	*sin_out = (float)out2/32768.0f;
 8001ca4:	ed81 7a00 	vstr	s14, [r1]
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	4622f800 	.word	0x4622f800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	00600040 	.word	0x00600040
 8001cb8:	38000000 	.word	0x38000000

08001cbc <RunCordic_inverse>:

void RunCordic_inverse(float x, float y, volatile float *theta, volatile float *mag) {
	CORDIC->CSR = CORDIC_CONFIG_MODULUS;
 8001cbc:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <RunCordic_inverse+0x4c>)
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <RunCordic_inverse+0x50>)
 8001cc0:	6013      	str	r3, [r2, #0]

	CORDIC->WDATA = (uint32_t)((int16_t)(x * 32768.0f)) | ((uint32_t)((int16_t)(y * 32768.0f ))<<16);
 8001cc2:	eebe 0ae8 	vcvt.s32.f32	s0, s0, #15
 8001cc6:	eefe 0ae8 	vcvt.s32.f32	s1, s1, #15
 8001cca:	ee10 3a10 	vmov	r3, s0
 8001cce:	ee10 ca90 	vmov	ip, s1
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8001cd8:	6053      	str	r3, [r2, #4]
	uint32_t out1 =  CORDIC->RDATA;
 8001cda:	6893      	ldr	r3, [r2, #8]

	*theta = (float)(int16_t)(out1>>16)/32768.0f;
 8001cdc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001d10 <RunCordic_inverse+0x54>
 8001ce0:	141a      	asrs	r2, r3, #16
	*mag  = (float)(out1&0xFFFF)/32768.0f;
 8001ce2:	b29b      	uxth	r3, r3
	*theta = (float)(int16_t)(out1>>16)/32768.0f;
 8001ce4:	ee07 2a10 	vmov	s14, r2
	*mag  = (float)(out1&0xFFFF)/32768.0f;
 8001ce8:	ee07 3a90 	vmov	s15, r3
	*theta = (float)(int16_t)(out1>>16)/32768.0f;
 8001cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	*mag  = (float)(out1&0xFFFF)/32768.0f;
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*theta = (float)(int16_t)(out1>>16)/32768.0f;
 8001cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
	*mag  = (float)(out1&0xFFFF)/32768.0f;
 8001cf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	*theta = (float)(int16_t)(out1>>16)/32768.0f;
 8001cfc:	ed80 7a00 	vstr	s14, [r0]
	*mag  = (float)(out1&0xFFFF)/32768.0f;
 8001d00:	edc1 7a00 	vstr	s15, [r1]
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	00600083 	.word	0x00600083
 8001d10:	38000000 	.word	0x38000000

08001d14 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8001d14:	b508      	push	{r3, lr}
	V_bat = V_bat_ptr;
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <CTRL_init_PWM+0xb4>)
void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8001d18:	4602      	mov	r2, r0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	482b      	ldr	r0, [pc, #172]	; (8001dcc <CTRL_init_PWM+0xb8>)
	V_bat = V_bat_ptr;
 8001d1e:	601a      	str	r2, [r3, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001d20:	f006 f8b0 	bl	8007e84 <HAL_TIM_PWM_Start>
 8001d24:	bb28      	cbnz	r0, 8001d72 <CTRL_init_PWM+0x5e>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001d26:	4829      	ldr	r0, [pc, #164]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d28:	2100      	movs	r1, #0
 8001d2a:	f006 fce1 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001d2e:	bb40      	cbnz	r0, 8001d82 <CTRL_init_PWM+0x6e>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	f006 f8a6 	bl	8007e84 <HAL_TIM_PWM_Start>
 8001d38:	bb58      	cbnz	r0, 8001d92 <CTRL_init_PWM+0x7e>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001d3a:	4824      	ldr	r0, [pc, #144]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	f006 fcd7 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d12d      	bne.n	8001da2 <CTRL_init_PWM+0x8e>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001d46:	4821      	ldr	r0, [pc, #132]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d48:	2108      	movs	r1, #8
 8001d4a:	f006 f89b 	bl	8007e84 <HAL_TIM_PWM_Start>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d12f      	bne.n	8001db2 <CTRL_init_PWM+0x9e>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d54:	2108      	movs	r1, #8
 8001d56:	f006 fccb 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d131      	bne.n	8001dc2 <CTRL_init_PWM+0xae>

	TIM1->CCR1 = 0;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <CTRL_init_PWM+0xbc>)
	TIM1->CCR2 = 0;
	TIM1->CCR3 = 0;

	HAL_TIM_Base_Start_IT(&htim3);
 8001d60:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <CTRL_init_PWM+0xc0>)
	TIM1->CCR1 = 0;
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8001d6e:	f005 bfc5 	b.w	8007cfc <HAL_TIM_Base_Start_IT>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001d72:	f001 ffe9 	bl	8003d48 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	f006 fcb9 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d0d6      	beq.n	8001d30 <CTRL_init_PWM+0x1c>
 8001d82:	f001 ffe1 	bl	8003d48 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d88:	2104      	movs	r1, #4
 8001d8a:	f006 f87b 	bl	8007e84 <HAL_TIM_PWM_Start>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0d3      	beq.n	8001d3a <CTRL_init_PWM+0x26>
 8001d92:	f001 ffd9 	bl	8003d48 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001d98:	2104      	movs	r1, #4
 8001d9a:	f006 fca9 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0d1      	beq.n	8001d46 <CTRL_init_PWM+0x32>
 8001da2:	f001 ffd1 	bl	8003d48 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001da8:	2108      	movs	r1, #8
 8001daa:	f006 f86b 	bl	8007e84 <HAL_TIM_PWM_Start>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d0cf      	beq.n	8001d52 <CTRL_init_PWM+0x3e>
 8001db2:	f001 ffc9 	bl	8003d48 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <CTRL_init_PWM+0xb8>)
 8001db8:	2108      	movs	r1, #8
 8001dba:	f006 fc99 	bl	80086f0 <HAL_TIMEx_PWMN_Start>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d0cd      	beq.n	8001d5e <CTRL_init_PWM+0x4a>
 8001dc2:	f001 ffc1 	bl	8003d48 <Error_Handler>
 8001dc6:	e7ca      	b.n	8001d5e <CTRL_init_PWM+0x4a>
 8001dc8:	20000b10 	.word	0x20000b10
 8001dcc:	20001d88 	.word	0x20001d88
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	20001e20 	.word	0x20001e20

08001dd8 <inverter>:
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
	angle = (angle+360*2)%360;
 8001dd8:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <inverter+0x154>)
	uint32_t compare_M2 = 0;
	uint32_t compare_M3 = 0;

	float deg = (float)(angle%60);
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001dda:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001f30 <inverter+0x158>
 8001dde:	ed9f 5a55 	vldr	s10, [pc, #340]	; 8001f34 <inverter+0x15c>
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001de2:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001f38 <inverter+0x160>
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001de6:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8001f3c <inverter+0x164>
	angle = (angle+360*2)%360;
 8001dea:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 8001dee:	b510      	push	{r4, lr}
	angle = (angle+360*2)%360;
 8001df0:	fb83 4300 	smull	r4, r3, r3, r0
 8001df4:	4403      	add	r3, r0
 8001df6:	ea4f 7ce0 	mov.w	ip, r0, asr #31
 8001dfa:	ebcc 2c23 	rsb	ip, ip, r3, asr #8
 8001dfe:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001e02:	fb03 0c1c 	mls	ip, r3, ip, r0
	float deg = (float)(angle%60);
 8001e06:	484e      	ldr	r0, [pc, #312]	; (8001f40 <inverter+0x168>)
 8001e08:	fa0f f38c 	sxth.w	r3, ip
 8001e0c:	fb80 0e03 	smull	r0, lr, r0, r3
 8001e10:	449e      	add	lr, r3
	uint16_t T0 = (duty_max-T1-T2)/2;

	if(angle >= 0 && angle < 60){
 8001e12:	fa1f f08c 	uxth.w	r0, ip
	float deg = (float)(angle%60);
 8001e16:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 8001e1a:	ebcc 1c6e 	rsb	ip, ip, lr, asr #5
 8001e1e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8001e22:	eba3 038c 	sub.w	r3, r3, ip, lsl #2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e30:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 8001e34:	ee37 5a85 	vadd.f32	s10, s15, s10
 8001e38:	ee37 7a67 	vsub.f32	s14, s14, s15
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e3c:	ee76 6ae7 	vsub.f32	s13, s13, s15
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e40:	ee27 7a05 	vmul.f32	s14, s14, s10
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e48:	ee27 5a25 	vmul.f32	s10, s14, s11
 8001e4c:	ee36 7a47 	vsub.f32	s14, s12, s14
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e50:	ee67 5aa5 	vmul.f32	s11, s15, s11
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e54:	eec5 6a07 	vdiv.f32	s13, s10, s14
 8001e58:	f240 53db 	movw	r3, #1499	; 0x5db
 8001e5c:	4299      	cmp	r1, r3
 8001e5e:	bf28      	it	cs
 8001e60:	4619      	movcs	r1, r3
	if(angle >= 0 && angle < 60){
 8001e62:	283b      	cmp	r0, #59	; 0x3b
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e64:	ee36 6a67 	vsub.f32	s12, s12, s15
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e68:	ee07 1a90 	vmov	s15, r1
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e6c:	ee85 7a86 	vdiv.f32	s14, s11, s12
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ee66 6aa7 	vmul.f32	s13, s13, s15
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8001e7c:	eebc 7ae6 	vcvt.u32.f32	s14, s13
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8001e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	uint16_t T0 = (duty_max-T1-T2)/2;
 8001e84:	ee17 1a10 	vmov	r1, s14
 8001e88:	fa1f fc81 	uxth.w	ip, r1
 8001e8c:	ee17 1a90 	vmov	r1, s15
 8001e90:	eba3 030c 	sub.w	r3, r3, ip
 8001e94:	b289      	uxth	r1, r1
 8001e96:	eba3 0301 	sub.w	r3, r3, r1
 8001e9a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001e9e:	ea4f 0363 	mov.w	r3, r3, asr #1
	if(angle >= 0 && angle < 60){
 8001ea2:	d80d      	bhi.n	8001ec0 <inverter+0xe8>
		compare_M1 = T0;
 8001ea4:	b29b      	uxth	r3, r3
		compare_M2 = T0+T2;
		compare_M3 = T0+T1+T2;
 8001ea6:	eb0c 0003 	add.w	r0, ip, r3
		compare_M2 = T0+T2;
 8001eaa:	18cc      	adds	r4, r1, r3
		compare_M3 = T0+T1+T2;
 8001eac:	4401      	add	r1, r0
		compare_M1 = T0+T1;
		compare_M2 = T0;
		compare_M3 = T0+T1+T2;
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001eae:	4825      	ldr	r0, [pc, #148]	; (8001f44 <inverter+0x16c>)
 8001eb0:	6343      	str	r3, [r0, #52]	; 0x34
	if(direction){
 8001eb2:	b112      	cbz	r2, 8001eba <inverter+0xe2>
		TIM1->CCR2 = compare_M3;
 8001eb4:	6381      	str	r1, [r0, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 8001eb6:	63c4      	str	r4, [r0, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 8001eb8:	bd10      	pop	{r4, pc}
		TIM1->CCR2 = compare_M2;
 8001eba:	6384      	str	r4, [r0, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 8001ebc:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001ebe:	bd10      	pop	{r4, pc}
	else if(angle >= 60 && angle < 120){
 8001ec0:	f1a0 043c 	sub.w	r4, r0, #60	; 0x3c
 8001ec4:	2c3b      	cmp	r4, #59	; 0x3b
 8001ec6:	d805      	bhi.n	8001ed4 <inverter+0xfc>
		compare_M1 = T0;
 8001ec8:	b29b      	uxth	r3, r3
		compare_M2 = T0+T1+T2;
 8001eca:	eb0c 0003 	add.w	r0, ip, r3
 8001ece:	180c      	adds	r4, r1, r0
		compare_M3 = T0+T1;
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	e7ec      	b.n	8001eae <inverter+0xd6>
	else if(angle >= 120 && angle < 180){
 8001ed4:	f1a0 0478 	sub.w	r4, r0, #120	; 0x78
 8001ed8:	2c3b      	cmp	r4, #59	; 0x3b
 8001eda:	d909      	bls.n	8001ef0 <inverter+0x118>
	else if(angle >= 180 && angle < 240){
 8001edc:	f1a0 04b4 	sub.w	r4, r0, #180	; 0xb4
 8001ee0:	2c3b      	cmp	r4, #59	; 0x3b
 8001ee2:	d80c      	bhi.n	8001efe <inverter+0x126>
		compare_M1 = T0+T1+T2;
 8001ee4:	b298      	uxth	r0, r3
 8001ee6:	eb0c 0400 	add.w	r4, ip, r0
 8001eea:	190b      	adds	r3, r1, r4
		compare_M3 = T0;
 8001eec:	4601      	mov	r1, r0
 8001eee:	e7de      	b.n	8001eae <inverter+0xd6>
		compare_M1 = T0+T2;
 8001ef0:	b298      	uxth	r0, r3
		compare_M2 = T0+T1+T2;
 8001ef2:	eb0c 0400 	add.w	r4, ip, r0
		compare_M1 = T0+T2;
 8001ef6:	180b      	adds	r3, r1, r0
		compare_M2 = T0+T1+T2;
 8001ef8:	440c      	add	r4, r1
		compare_M3 = T0;
 8001efa:	4601      	mov	r1, r0
 8001efc:	e7d7      	b.n	8001eae <inverter+0xd6>
	else if(angle >= 240 && angle < 300){
 8001efe:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
 8001f02:	2c3b      	cmp	r4, #59	; 0x3b
 8001f04:	d908      	bls.n	8001f18 <inverter+0x140>
	else if(angle >= 300 && angle <= 360){
 8001f06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8001f0a:	283c      	cmp	r0, #60	; 0x3c
 8001f0c:	d80a      	bhi.n	8001f24 <inverter+0x14c>
		compare_M1 = T0+T1;
 8001f0e:	b29c      	uxth	r4, r3
 8001f10:	eb0c 0304 	add.w	r3, ip, r4
		compare_M3 = T0+T1+T2;
 8001f14:	4419      	add	r1, r3
 8001f16:	e7ca      	b.n	8001eae <inverter+0xd6>
		compare_M1 = T0+T1+T2;
 8001f18:	b29c      	uxth	r4, r3
 8001f1a:	eb0c 0304 	add.w	r3, ip, r4
 8001f1e:	440b      	add	r3, r1
		compare_M3 = T0+T2;
 8001f20:	4421      	add	r1, r4
 8001f22:	e7c4      	b.n	8001eae <inverter+0xd6>
	uint32_t compare_M3 = 0;
 8001f24:	2100      	movs	r1, #0
	uint32_t compare_M2 = 0;
 8001f26:	460c      	mov	r4, r1
	uint32_t compare_M1 = 0;
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e7c0      	b.n	8001eae <inverter+0xd6>
 8001f2c:	b60b60b7 	.word	0xb60b60b7
 8001f30:	42700000 	.word	0x42700000
 8001f34:	42f00000 	.word	0x42f00000
 8001f38:	43340000 	.word	0x43340000
 8001f3c:	471e3400 	.word	0x471e3400
 8001f40:	88888889 	.word	0x88888889
 8001f44:	40012c00 	.word	0x40012c00

08001f48 <shutoff>:
void shutoff(void){
	TIM1->CCR1 = 0;
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <shutoff+0xc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f52:	4770      	bx	lr
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <shutdown>:
void shutdown(void){
 8001f58:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001f5a:	4c0f      	ldr	r4, [pc, #60]	; (8001f98 <shutdown+0x40>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f006 f836 	bl	8007fd0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8001f64:	2100      	movs	r1, #0
 8001f66:	4620      	mov	r0, r4
 8001f68:	f006 fc24 	bl	80087b4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f006 f82e 	bl	8007fd0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001f74:	2104      	movs	r1, #4
 8001f76:	4620      	mov	r0, r4
 8001f78:	f006 fc1c 	bl	80087b4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f006 f826 	bl	8007fd0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001f84:	4620      	mov	r0, r4
 8001f86:	2108      	movs	r1, #8
 8001f88:	f006 fc14 	bl	80087b4 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001f8c:	4620      	mov	r0, r4
}
 8001f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_Base_Stop(&htim1);
 8001f92:	f005 be9f 	b.w	8007cd4 <HAL_TIM_Base_Stop>
 8001f96:	bf00      	nop
 8001f98:	20001d88 	.word	0x20001d88

08001f9c <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8001f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fa0:	ed2d 8b06 	vpush	{d8-d10}
    int sample_counter = 0;

    float d;
    float q;

    PHASE_ORDER = 0;
 8001fa4:	2400      	movs	r4, #0
void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8001fa6:	b089      	sub	sp, #36	; 0x24
    PHASE_ORDER = 0;
 8001fa8:	4e8f      	ldr	r6, [pc, #572]	; (80021e8 <order_phases+0x24c>)
    HAL_Delay(1000);
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8001faa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80021ec <order_phases+0x250>
    float theta_ref = 0;
 8001fae:	eddf 8a90 	vldr	s17, [pc, #576]	; 80021f0 <order_phases+0x254>
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
    PrintServerPrintf("\n\rCurrent\n\r");
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8001fb2:	eddf 9a90 	vldr	s19, [pc, #576]	; 80021f4 <order_phases+0x258>
void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8001fb6:	4605      	mov	r5, r0
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 8001fb8:	488f      	ldr	r0, [pc, #572]	; (80021f8 <order_phases+0x25c>)
void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8001fba:	460f      	mov	r7, r1
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 8001fbc:	f000 fe6c 	bl	8002c98 <PrintServerPrintf>
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	2164      	movs	r1, #100	; 0x64
 8001fc4:	4620      	mov	r0, r4
    PHASE_ORDER = 0;
 8001fc6:	7034      	strb	r4, [r6, #0]
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8001fc8:	f7ff ff06 	bl	8001dd8 <inverter>
    HAL_Delay(1000);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd0:	f002 fba6 	bl	8004720 <HAL_Delay>
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8001fd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fd8:	ed97 1a01 	vldr	s2, [r7, #4]
 8001fdc:	edd7 0a00 	vldr	s1, [r7]
    	HAL_Delay(1);
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
       if(theta_ref==0){theta_start = theta_actual;}
       if(sample_counter >= 1){
           sample_counter = 0 ;
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 8001fe0:	4f86      	ldr	r7, [pc, #536]	; (80021fc <order_phases+0x260>)
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8001fe2:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 8001fe6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001fea:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8001fee:	ee61 1a89 	vmul.f32	s3, s3, s18
 8001ff2:	ee21 1a09 	vmul.f32	s2, s2, s18
 8001ff6:	ee60 0a89 	vmul.f32	s1, s1, s18
 8001ffa:	eeb0 0a68 	vmov.f32	s0, s17
 8001ffe:	a907      	add	r1, sp, #28
 8002000:	a806      	add	r0, sp, #24
 8002002:	f001 f8f5 	bl	80031f0 <dq0>
    float current = sqrt((d*d + q*q));
 8002006:	eddd 7a07 	vldr	s15, [sp, #28]
 800200a:	ed9d 7a06 	vldr	s14, [sp, #24]
 800200e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002012:	eee7 7a07 	vfma.f32	s15, s14, s14
 8002016:	ee17 0a90 	vmov	r0, s15
 800201a:	f7fe fabd 	bl	8000598 <__aeabi_f2d>
 800201e:	ec41 0b10 	vmov	d0, r0, r1
 8002022:	f00a f995 	bl	800c350 <sqrt>
    PrintServerPrintf("\n\rCurrent\n\r");
 8002026:	4876      	ldr	r0, [pc, #472]	; (8002200 <order_phases+0x264>)
    float current = sqrt((d*d + q*q));
 8002028:	ec59 8b10 	vmov	r8, r9, d0
    PrintServerPrintf("\n\rCurrent\n\r");
 800202c:	f000 fe34 	bl	8002c98 <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002030:	9806      	ldr	r0, [sp, #24]
 8002032:	f7fe fab1 	bl	8000598 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
    float current = sqrt((d*d + q*q));
 800203a:	4640      	mov	r0, r8
 800203c:	4649      	mov	r1, r9
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 800203e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    float current = sqrt((d*d + q*q));
 8002042:	f7fe fdd9 	bl	8000bf8 <__aeabi_d2f>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002046:	f7fe faa7 	bl	8000598 <__aeabi_f2d>
 800204a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800204e:	9807      	ldr	r0, [sp, #28]
 8002050:	f7fe faa2 	bl	8000598 <__aeabi_f2d>
 8002054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002058:	e9cd 0100 	strd	r0, r1, [sp]
 800205c:	4869      	ldr	r0, [pc, #420]	; (8002204 <order_phases+0x268>)
 800205e:	f000 fe1b 	bl	8002c98 <PrintServerPrintf>
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002062:	e00c      	b.n	800207e <order_phases+0xe2>
       if(sample_counter >= 1){
 8002064:	bb6c      	cbnz	r4, 80020c2 <order_phases+0x126>
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002066:	eef4 8ae9 	vcmpe.f32	s17, s19
        }
        sample_counter++;
       theta_ref += 1;
 800206a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       theta_ref += 1;
 8002072:	ee78 7aa7 	vadd.f32	s15, s17, s15
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002076:	d538      	bpl.n	80020ea <order_phases+0x14e>
        sample_counter++;
 8002078:	2401      	movs	r4, #1
void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 800207a:	eef0 8a67 	vmov.f32	s17, s15
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 800207e:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8002082:	7832      	ldrb	r2, [r6, #0]
 8002084:	edcd 7a04 	vstr	s15, [sp, #16]
 8002088:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800208c:	2164      	movs	r1, #100	; 0x64
 800208e:	f7ff fea3 	bl	8001dd8 <inverter>
    	HAL_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f002 fb44 	bl	8004720 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 8002098:	edd5 7a00 	vldr	s15, [r5]
       if(theta_ref==0){theta_start = theta_actual;}
 800209c:	eef5 8a40 	vcmp.f32	s17, #0.0
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 80020a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
       if(theta_ref==0){theta_start = theta_actual;}
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 80020a8:	ee27 8a89 	vmul.f32	s16, s15, s18
       if(theta_ref==0){theta_start = theta_actual;}
 80020ac:	d1da      	bne.n	8002064 <order_phases+0xc8>
       theta_ref += 1;
 80020ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
       if(sample_counter >= 1){
 80020b2:	b924      	cbnz	r4, 80020be <order_phases+0x122>
       theta_ref += 1;
 80020b4:	ee78 7aa7 	vadd.f32	s15, s17, s15
       if(theta_ref==0){theta_start = theta_actual;}
 80020b8:	eeb0 aa48 	vmov.f32	s20, s16
 80020bc:	e7dc      	b.n	8002078 <order_phases+0xdc>
 80020be:	eeb0 aa48 	vmov.f32	s20, s16
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 80020c2:	ee18 0a90 	vmov	r0, s17
 80020c6:	f7fe fa67 	bl	8000598 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	ee18 0a10 	vmov	r0, s16
 80020d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020d6:	f7fe fa5f 	bl	8000598 <__aeabi_f2d>
 80020da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020de:	e9cd 0100 	strd	r0, r1, [sp]
 80020e2:	4638      	mov	r0, r7
 80020e4:	f000 fdd8 	bl	8002c98 <PrintServerPrintf>
 80020e8:	e7bd      	b.n	8002066 <order_phases+0xca>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 80020ea:	ed95 8a00 	vldr	s16, [r5]
 80020ee:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80021ec <order_phases+0x250>
    int direction = (theta_end - theta_start)>0;
    if ((theta_end - theta_start) > 180) direction = 0;
 80020f2:	eddf 7a45 	vldr	s15, [pc, #276]	; 8002208 <order_phases+0x26c>
    float theta_end = (float)ps->Encoder1_pos/1000;
 80020f6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80020fa:	ee28 8a07 	vmul.f32	s16, s16, s14
    int direction = (theta_end - theta_start)>0;
 80020fe:	ee78 8a4a 	vsub.f32	s17, s16, s20
    if ((theta_end - theta_start) > 180) direction = 0;
 8002102:	eef4 8ae7 	vcmpe.f32	s17, s15
    if ((theta_end - theta_start) < -180) direction = 1;
 8002106:	eddf 7a41 	vldr	s15, [pc, #260]	; 800220c <order_phases+0x270>
    if ((theta_end - theta_start) > 180) direction = 0;
 800210a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if ((theta_end - theta_start) < -180) direction = 1;
 800210e:	eef4 8ae7 	vcmpe.f32	s17, s15
    if ((theta_end - theta_start) > 180) direction = 0;
 8002112:	dc26      	bgt.n	8002162 <order_phases+0x1c6>
    if ((theta_end - theta_start) < -180) direction = 1;
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d542      	bpl.n	80021a0 <order_phases+0x204>
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 800211a:	ee1a 0a10 	vmov	r0, s20
 800211e:	f7fe fa3b 	bl	8000598 <__aeabi_f2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	ee18 0a10 	vmov	r0, s16
 800212a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800212e:	f7fe fa33 	bl	8000598 <__aeabi_f2d>
 8002132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002136:	e9cd 0100 	strd	r0, r1, [sp]
 800213a:	4835      	ldr	r0, [pc, #212]	; (8002210 <order_phases+0x274>)
 800213c:	f000 fdac 	bl	8002c98 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 8002140:	4834      	ldr	r0, [pc, #208]	; (8002214 <order_phases+0x278>)
 8002142:	2101      	movs	r1, #1
 8002144:	f000 fda8 	bl	8002c98 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 8002148:	4833      	ldr	r0, [pc, #204]	; (8002218 <order_phases+0x27c>)
 800214a:	f000 fda5 	bl	8002c98 <PrintServerPrintf>
 800214e:	2300      	movs	r3, #0
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
    PHASE_ORDER = !direction;
    HAL_Delay(10);
 8002150:	200a      	movs	r0, #10
    PHASE_ORDER = !direction;
 8002152:	7033      	strb	r3, [r6, #0]
    HAL_Delay(10);
 8002154:	f002 fae4 	bl	8004720 <HAL_Delay>
    }
 8002158:	b009      	add	sp, #36	; 0x24
 800215a:	ecbd 8b06 	vpop	{d8-d10}
 800215e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((theta_end - theta_start) < -180) direction = 1;
 8002162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002166:	d4d8      	bmi.n	800211a <order_phases+0x17e>
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8002168:	ee1a 0a10 	vmov	r0, s20
 800216c:	f7fe fa14 	bl	8000598 <__aeabi_f2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	ee18 0a10 	vmov	r0, s16
 8002178:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800217c:	f7fe fa0c 	bl	8000598 <__aeabi_f2d>
 8002180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002184:	e9cd 0100 	strd	r0, r1, [sp]
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <order_phases+0x274>)
 800218a:	f000 fd85 	bl	8002c98 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 800218e:	4821      	ldr	r0, [pc, #132]	; (8002214 <order_phases+0x278>)
 8002190:	2100      	movs	r1, #0
 8002192:	f000 fd81 	bl	8002c98 <PrintServerPrintf>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 8002196:	4821      	ldr	r0, [pc, #132]	; (800221c <order_phases+0x280>)
 8002198:	f000 fd7e 	bl	8002c98 <PrintServerPrintf>
 800219c:	2301      	movs	r3, #1
 800219e:	e7d7      	b.n	8002150 <order_phases+0x1b4>
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 80021a0:	ee1a 0a10 	vmov	r0, s20
 80021a4:	f7fe f9f8 	bl	8000598 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	ee18 0a10 	vmov	r0, s16
 80021b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021b4:	f7fe f9f0 	bl	8000598 <__aeabi_f2d>
 80021b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021bc:	e9cd 0100 	strd	r0, r1, [sp]
 80021c0:	4813      	ldr	r0, [pc, #76]	; (8002210 <order_phases+0x274>)
 80021c2:	f000 fd69 	bl	8002c98 <PrintServerPrintf>
    int direction = (theta_end - theta_start)>0;
 80021c6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80021ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    PrintServerPrintf("Direction:  %d\n\r", direction);
 80021ce:	bfcc      	ite	gt
 80021d0:	2101      	movgt	r1, #1
 80021d2:	2100      	movle	r1, #0
 80021d4:	480f      	ldr	r0, [pc, #60]	; (8002214 <order_phases+0x278>)
 80021d6:	f000 fd5f 	bl	8002c98 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 80021da:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	ddd8      	ble.n	8002196 <order_phases+0x1fa>
 80021e4:	e7b0      	b.n	8002148 <order_phases+0x1ac>
 80021e6:	bf00      	nop
 80021e8:	20000b14 	.word	0x20000b14
 80021ec:	3a83126f 	.word	0x3a83126f
 80021f0:	00000000 	.word	0x00000000
 80021f4:	4433c000 	.word	0x4433c000
 80021f8:	0800c7a4 	.word	0x0800c7a4
 80021fc:	0800c7e0 	.word	0x0800c7e0
 8002200:	0800c7c4 	.word	0x0800c7c4
 8002204:	0800c7d0 	.word	0x0800c7d0
 8002208:	43340000 	.word	0x43340000
 800220c:	c3340000 	.word	0xc3340000
 8002210:	0800c7ec 	.word	0x0800c7ec
 8002214:	0800c814 	.word	0x0800c814
 8002218:	0800c828 	.word	0x0800c828
 800221c:	0800c83c 	.word	0x0800c83c

08002220 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	ed2d 8b06 	vpush	{d8-d10}
 8002228:	b08f      	sub	sp, #60	; 0x3c
 800222a:	4604      	mov	r4, r0
 800222c:	af04      	add	r7, sp, #16
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 800222e:	48a4      	ldr	r0, [pc, #656]	; (80024c0 <calibrate+0x2a0>)




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002230:	4ea4      	ldr	r6, [pc, #656]	; (80024c4 <calibrate+0x2a4>)
    HAL_Delay(1000);

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002232:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 80024c8 <calibrate+0x2a8>
   float theta_ref = 0;
 8002236:	ed9f 8aa5 	vldr	s16, [pc, #660]	; 80024cc <calibrate+0x2ac>
       for(int j = 0; j<n2; j++){
        theta_ref += delta;
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
        HAL_Delay(1);
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
       error_f[i] = theta_ref/NPP - theta_actual;
 800223a:	eddf aaa5 	vldr	s21, [pc, #660]	; 80024d0 <calibrate+0x2b0>
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 800223e:	ed9f aaa5 	vldr	s20, [pc, #660]	; 80024d4 <calibrate+0x2b4>
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002242:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 80024ec <calibrate+0x2cc>
void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002246:	460d      	mov	r5, r1
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002248:	f000 fd26 	bl	8002c98 <PrintServerPrintf>
    float error_f[n];
 800224c:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002250:	ab04      	add	r3, sp, #16
    float error_b[n];
 8002252:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002256:	aa04      	add	r2, sp, #16
    int raw_f[n];
 8002258:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800225c:	f10d 0910 	add.w	r9, sp, #16
    int raw_b[n];
 8002260:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
    float error_b[n];
 8002264:	613a      	str	r2, [r7, #16]
    int raw_b[n];
 8002266:	aa04      	add	r2, sp, #16
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002268:	2164      	movs	r1, #100	; 0x64
    float error[n];
 800226a:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
    int raw_b[n];
 800226e:	603a      	str	r2, [r7, #0]
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002270:	2000      	movs	r0, #0
 8002272:	7832      	ldrb	r2, [r6, #0]
    float error_f[n];
 8002274:	60bb      	str	r3, [r7, #8]
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002276:	f7ff fdaf 	bl	8001dd8 <inverter>
    HAL_Delay(1000);
 800227a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227e:	f002 fa4f 	bl	8004720 <HAL_Delay>
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002282:	edd5 7a02 	vldr	s15, [r5, #8]
 8002286:	edd5 0a00 	vldr	s1, [r5]
 800228a:	eef8 1ae7 	vcvt.f32.s32	s3, s15
 800228e:	edd5 7a01 	vldr	s15, [r5, #4]
 8002292:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8002296:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 800229a:	ee61 1a89 	vmul.f32	s3, s3, s18
 800229e:	ee21 1a09 	vmul.f32	s2, s2, s18
 80022a2:	ee60 0a89 	vmul.f32	s1, s1, s18
 80022a6:	eeb0 0a48 	vmov.f32	s0, s16
 80022aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80022ae:	f107 0020 	add.w	r0, r7, #32
 80022b2:	f000 ff9d 	bl	80031f0 <dq0>
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 80022b6:	4888      	ldr	r0, [pc, #544]	; (80024d8 <calibrate+0x2b8>)
 80022b8:	f000 fcee 	bl	8002c98 <PrintServerPrintf>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	607b      	str	r3, [r7, #4]
    float error[n];
 80022c0:	aa04      	add	r2, sp, #16
 80022c2:	60fa      	str	r2, [r7, #12]
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 80022c4:	f503 6288 	add.w	r2, r3, #1088	; 0x440
        theta_ref += delta;
 80022c8:	eef6 9a02 	vmov.f32	s19, #98	; 0x3f100000  0.5625000
 80022cc:	617a      	str	r2, [r7, #20]
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 80022ce:	4698      	mov	r8, r3
void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80022d0:	2528      	movs	r5, #40	; 0x28
        theta_ref += delta;
 80022d2:	ee38 8a29 	vadd.f32	s16, s16, s19
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80022d6:	7832      	ldrb	r2, [r6, #0]
 80022d8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80022dc:	2164      	movs	r1, #100	; 0x64
 80022de:	ee17 3a90 	vmov	r3, s15
 80022e2:	b218      	sxth	r0, r3
 80022e4:	f7ff fd78 	bl	8001dd8 <inverter>
        HAL_Delay(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f002 fa19 	bl	8004720 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 80022ee:	edd4 7a00 	vldr	s15, [r4]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 80022f2:	f8d4 b008 	ldr.w	fp, [r4, #8]
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 80022f6:	eef8 8a67 	vcvt.f32.u32	s17, s15
       error_f[i] = theta_ref/NPP - theta_actual;
 80022fa:	ee28 7a2a 	vmul.f32	s14, s16, s21
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 80022fe:	ee68 8a89 	vmul.f32	s17, s17, s18
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002302:	ee17 0a10 	vmov	r0, s14
       error_f[i] = theta_ref/NPP - theta_actual;
 8002306:	ee77 7a68 	vsub.f32	s15, s14, s17
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 800230a:	ee77 6a8a 	vadd.f32	s13, s15, s20
 800230e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       error_f[i] = theta_ref/NPP - theta_actual;
 8002316:	bf52      	itee	pl
 8002318:	edc8 7a00 	vstrpl	s15, [r8]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 800231c:	edc8 6a00 	vstrmi	s13, [r8]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002320:	ee17 0a10 	vmovmi	r0, s14
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8002324:	f8c9 b000 	str.w	fp, [r9]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002328:	f7fe f936 	bl	8000598 <__aeabi_f2d>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	ee18 0a90 	vmov	r0, s17
 8002334:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002338:	f8cd b008 	str.w	fp, [sp, #8]
 800233c:	f7fe f92c 	bl	8000598 <__aeabi_f2d>
 8002340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002344:	e9cd 0100 	strd	r0, r1, [sp]
 8002348:	4650      	mov	r0, sl
 800234a:	f000 fca5 	bl	8002c98 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 800234e:	3d01      	subs	r5, #1
 8002350:	d1bf      	bne.n	80022d2 <calibrate+0xb2>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f108 0804 	add.w	r8, r8, #4
 8002358:	4543      	cmp	r3, r8
 800235a:	f109 0904 	add.w	r9, r9, #4
 800235e:	d1b7      	bne.n	80022d0 <calibrate+0xb0>
 8002360:	f8d7 8010 	ldr.w	r8, [r7, #16]
    for(int i = 0; i<n; i++){                                                   // rotate backwards
       for(int j = 0; j<n2; j++){
       theta_ref -= delta;
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
       HAL_Delay(1);                                                         // sample position sensor
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8002364:	eddf aa58 	vldr	s21, [pc, #352]	; 80024c8 <calibrate+0x2a8>
       error_b[i] = theta_ref/NPP - theta_actual;
 8002368:	ed9f aa59 	vldr	s20, [pc, #356]	; 80024d0 <calibrate+0x2b0>
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 800236c:	eddf 9a59 	vldr	s19, [pc, #356]	; 80024d4 <calibrate+0x2b4>
 8002370:	f8d7 9000 	ldr.w	r9, [r7]
       raw_b[i] =  ps->Encoder1_pos_raw;
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8002374:	f8df a178 	ldr.w	sl, [pc, #376]	; 80024f0 <calibrate+0x2d0>
 8002378:	f508 6388 	add.w	r3, r8, #1088	; 0x440
       theta_ref -= delta;
 800237c:	eeb6 9a02 	vmov.f32	s18, #98	; 0x3f100000  0.5625000
 8002380:	613b      	str	r3, [r7, #16]
   float theta_ref = 0;
 8002382:	2528      	movs	r5, #40	; 0x28
       theta_ref -= delta;
 8002384:	ee38 8a49 	vsub.f32	s16, s16, s18
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002388:	7832      	ldrb	r2, [r6, #0]
 800238a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800238e:	2164      	movs	r1, #100	; 0x64
 8002390:	ee17 3a90 	vmov	r3, s15
 8002394:	b218      	sxth	r0, r3
 8002396:	f7ff fd1f 	bl	8001dd8 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 800239a:	2001      	movs	r0, #1
 800239c:	f002 f9c0 	bl	8004720 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 80023a0:	edd4 7a00 	vldr	s15, [r4]
       raw_b[i] =  ps->Encoder1_pos_raw;
 80023a4:	f8d4 b008 	ldr.w	fp, [r4, #8]
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 80023a8:	eef8 8a67 	vcvt.f32.u32	s17, s15
       error_b[i] = theta_ref/NPP - theta_actual;
 80023ac:	ee28 7a0a 	vmul.f32	s14, s16, s20
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 80023b0:	ee68 8aaa 	vmul.f32	s17, s17, s21
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 80023b4:	ee17 0a10 	vmov	r0, s14
       error_b[i] = theta_ref/NPP - theta_actual;
 80023b8:	ee77 7a68 	vsub.f32	s15, s14, s17
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 80023bc:	ee77 6aa9 	vadd.f32	s13, s15, s19
 80023c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       error_b[i] = theta_ref/NPP - theta_actual;
 80023c8:	bf52      	itee	pl
 80023ca:	edc8 7a00 	vstrpl	s15, [r8]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 80023ce:	edc8 6a00 	vstrmi	s13, [r8]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 80023d2:	ee17 0a10 	vmovmi	r0, s14
       raw_b[i] =  ps->Encoder1_pos_raw;
 80023d6:	f8c9 b000 	str.w	fp, [r9]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 80023da:	f7fe f8dd 	bl	8000598 <__aeabi_f2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	ee18 0a90 	vmov	r0, s17
 80023e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80023ea:	f8cd b008 	str.w	fp, [sp, #8]
 80023ee:	f7fe f8d3 	bl	8000598 <__aeabi_f2d>
 80023f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f6:	e9cd 0100 	strd	r0, r1, [sp]
 80023fa:	4650      	mov	r0, sl
 80023fc:	f000 fc4c 	bl	8002c98 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002400:	3d01      	subs	r5, #1
 8002402:	d1bf      	bne.n	8002384 <calibrate+0x164>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f108 0804 	add.w	r8, r8, #4
 800240a:	4543      	cmp	r3, r8
 800240c:	f109 0904 	add.w	r9, r9, #4
 8002410:	d1b7      	bne.n	8002382 <calibrate+0x162>
 8002412:	461c      	mov	r4, r3
 8002414:	461a      	mov	r2, r3
 8002416:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80024cc <calibrate+0x2ac>
        }
    }

        electrical_offset = 0;
        for(int i = 0; i<n; i++){
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 800241a:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80024dc <calibrate+0x2bc>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6979      	ldr	r1, [r7, #20]
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8002422:	ecf3 7a01 	vldmia	r3!, {s15}
 8002426:	ed72 6a01 	vldmdb	r2!, {s13}
 800242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        for(int i = 0; i<n; i++){
 800242e:	428b      	cmp	r3, r1
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8002430:	eea7 7a86 	vfma.f32	s14, s15, s12
        for(int i = 0; i<n; i++){
 8002434:	d1f5      	bne.n	8002422 <calibrate+0x202>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8002436:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	ee17 0a90 	vmov	r0, s15
 8002442:	f7fe f8a9 	bl	8000598 <__aeabi_f2d>
 8002446:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80024b8 <calibrate+0x298>
 800244a:	ec41 0b10 	vmov	d0, r0, r1
 800244e:	f009 ff51 	bl	800c2f4 <fmod>
 8002452:	ec51 0b10 	vmov	r0, r1, d0
 8002456:	f7fe fbcf 	bl	8000bf8 <__aeabi_d2f>
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <calibrate+0x2c0>)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6018      	str	r0, [r3, #0]
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002460:	68fb      	ldr	r3, [r7, #12]
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8002462:	6979      	ldr	r1, [r7, #20]
 8002464:	6138      	str	r0, [r7, #16]
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 8002466:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800246a:	469e      	mov	lr, r3
 800246c:	ecf2 7a01 	vldmia	r2!, {s15}
 8002470:	ed34 7a01 	vldmdb	r4!, {s14}
 8002474:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002478:	4291      	cmp	r1, r2
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 800247a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800247e:	ece3 7a01 	vstmia	r3!, {s15}
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002482:	d1f3      	bne.n	800246c <calibrate+0x24c>
                if(ind<0){
                    ind += n;}                                                  // Moving average wraps around
                else if(ind > n-1) {
                    ind -= n;}
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4917      	ldr	r1, [pc, #92]	; (80024e4 <calibrate+0x2c4>)
 8002488:	eddf 6a17 	vldr	s13, [pc, #92]	; 80024e8 <calibrate+0x2c8>
 800248c:	f203 4b3c 	addw	fp, r3, #1084	; 0x43c
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002490:	f04f 0901 	mov.w	r9, #1
 8002494:	2007      	movs	r0, #7
 8002496:	4698      	mov	r8, r3
 8002498:	f04f 0c03 	mov.w	ip, #3
 800249c:	2604      	movs	r6, #4
 800249e:	2505      	movs	r5, #5
 80024a0:	2406      	movs	r4, #6
 80024a2:	f06f 0207 	mvn.w	r2, #7
 80024a6:	f240 1a11 	movw	sl, #273	; 0x111
 80024aa:	61b8      	str	r0, [r7, #24]
 80024ac:	464b      	mov	r3, r9
 80024ae:	f8c7 b014 	str.w	fp, [r7, #20]
 80024b2:	e08a      	b.n	80025ca <calibrate+0x3aa>
 80024b4:	f3af 8000 	nop.w
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40768000 	.word	0x40768000
 80024c0:	0800c86c 	.word	0x0800c86c
 80024c4:	20000b14 	.word	0x20000b14
 80024c8:	3a83126f 	.word	0x3a83126f
 80024cc:	00000000 	.word	0x00000000
 80024d0:	3d70f0f1 	.word	0x3d70f0f1
 80024d4:	43b40000 	.word	0x43b40000
 80024d8:	0800c890 	.word	0x0800c890
 80024dc:	3af0f0f1 	.word	0x3af0f0f1
 80024e0:	20000b18 	.word	0x20000b18
 80024e4:	20000b1c 	.word	0x20000b1c
 80024e8:	3d800000 	.word	0x3d800000
 80024ec:	0800c8c0 	.word	0x0800c8c0
 80024f0:	0800c8d0 	.word	0x0800c8d0
                error_filt[i] += error[ind]/(float)window;
 80024f4:	6978      	ldr	r0, [r7, #20]
 80024f6:	edde 7a00 	vldr	s15, [lr]
 80024fa:	ed90 6a00 	vldr	s12, [r0]
 80024fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002502:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002506:	eb08 0983 	add.w	r9, r8, r3, lsl #2
 800250a:	f103 0b01 	add.w	fp, r3, #1
 800250e:	edd9 7a00 	vldr	s15, [r9]
 8002512:	eea7 7aa6 	vfma.f32	s14, s15, s13
                else if(ind > n-1) {
 8002516:	f5bb 7f88 	cmp.w	fp, #272	; 0x110
 800251a:	46d9      	mov	r9, fp
                error_filt[i] += error[ind]/(float)window;
 800251c:	ed81 7a00 	vstr	s14, [r1]
                else if(ind > n-1) {
 8002520:	f080 80b9 	bcs.w	8002696 <calibrate+0x476>
                error_filt[i] += error[ind]/(float)window;
 8002524:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 8002528:	f5bc 7f88 	cmp.w	ip, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 800252c:	ed99 6a00 	vldr	s12, [r9]
                else if(ind > n-1) {
 8002530:	f080 80bd 	bcs.w	80026ae <calibrate+0x48e>
 8002534:	46e1      	mov	r9, ip
                error_filt[i] += error[ind]/(float)window;
 8002536:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 800253a:	f5b6 7f88 	cmp.w	r6, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 800253e:	edd9 7a00 	vldr	s15, [r9]
                else if(ind > n-1) {
 8002542:	f080 80be 	bcs.w	80026c2 <calibrate+0x4a2>
 8002546:	46b1      	mov	r9, r6
                error_filt[i] += error[ind]/(float)window;
 8002548:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 800254c:	f5b5 7f88 	cmp.w	r5, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 8002550:	edd9 5a00 	vldr	s11, [r9]
                else if(ind > n-1) {
 8002554:	f080 80c0 	bcs.w	80026d8 <calibrate+0x4b8>
 8002558:	46a9      	mov	r9, r5
                error_filt[i] += error[ind]/(float)window;
 800255a:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 800255e:	f5b4 7f88 	cmp.w	r4, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 8002562:	ed99 5a00 	vldr	s10, [r9]
                else if(ind > n-1) {
 8002566:	f080 80c1 	bcs.w	80026ec <calibrate+0x4cc>
 800256a:	46a1      	mov	r9, r4
 800256c:	69b8      	ldr	r0, [r7, #24]
                error_filt[i] += error[ind]/(float)window;
 800256e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 8002572:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 8002576:	edd9 4a00 	vldr	s9, [r9]
                else if(ind > n-1) {
 800257a:	f080 80bc 	bcs.w	80026f6 <calibrate+0x4d6>
 800257e:	4603      	mov	r3, r0
                error_filt[i] += error[ind]/(float)window;
 8002580:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002584:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8002588:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800258c:	ed93 6a00 	vldr	s12, [r3]
        for (int i = 0; i<n; i++){
 8002590:	69bb      	ldr	r3, [r7, #24]
                error_filt[i] += error[ind]/(float)window;
 8002592:	ee77 7a85 	vadd.f32	s15, s15, s10
        for (int i = 0; i<n; i++){
 8002596:	3301      	adds	r3, #1
                error_filt[i] += error[ind]/(float)window;
 8002598:	ee77 7aa4 	vadd.f32	s15, s15, s9
        for (int i = 0; i<n; i++){
 800259c:	45d3      	cmp	fp, sl
                error_filt[i] += error[ind]/(float)window;
 800259e:	ee77 7a86 	vadd.f32	s15, s15, s12
        for (int i = 0; i<n; i++){
 80025a2:	61bb      	str	r3, [r7, #24]
                error_filt[i] += error[ind]/(float)window;
 80025a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
        for (int i = 0; i<n; i++){
 80025a8:	f102 0201 	add.w	r2, r2, #1
 80025ac:	f104 0401 	add.w	r4, r4, #1
 80025b0:	f105 0501 	add.w	r5, r5, #1
 80025b4:	f106 0601 	add.w	r6, r6, #1
 80025b8:	f10c 0c01 	add.w	ip, ip, #1
                error_filt[i] += error[ind]/(float)window;
 80025bc:	eca1 7a01 	vstmia	r1!, {s14}
        for (int i = 0; i<n; i++){
 80025c0:	465b      	mov	r3, fp
 80025c2:	f10e 0e04 	add.w	lr, lr, #4
 80025c6:	f000 8099 	beq.w	80026fc <calibrate+0x4dc>
                if(ind<0){
 80025ca:	2a00      	cmp	r2, #0
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 80025cc:	4691      	mov	r9, r2
                if(ind<0){
 80025ce:	da01      	bge.n	80025d4 <calibrate+0x3b4>
                    ind += n;}                                                  // Moving average wraps around
 80025d0:	f203 1907 	addw	r9, r3, #263	; 0x107
                error_filt[i] += error[ind]/(float)window;
 80025d4:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 80025d8:	ed99 6a00 	vldr	s12, [r9]
 80025dc:	ed91 7a00 	vldr	s14, [r1]
                if(ind<0){
 80025e0:	f1b3 0908 	subs.w	r9, r3, #8
 80025e4:	d501      	bpl.n	80025ea <calibrate+0x3ca>
                    ind += n;}                                                  // Moving average wraps around
 80025e6:	f503 7984 	add.w	r9, r3, #264	; 0x108
                error_filt[i] += error[ind]/(float)window;
 80025ea:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 80025ee:	edd9 7a00 	vldr	s15, [r9]
                if(ind<0){
 80025f2:	f1b3 0907 	subs.w	r9, r3, #7
 80025f6:	d501      	bpl.n	80025fc <calibrate+0x3dc>
                    ind += n;}                                                  // Moving average wraps around
 80025f8:	f203 1909 	addw	r9, r3, #265	; 0x109
                error_filt[i] += error[ind]/(float)window;
 80025fc:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8002600:	edd9 5a00 	vldr	s11, [r9]
                if(ind<0){
 8002604:	f1b3 0906 	subs.w	r9, r3, #6
 8002608:	d501      	bpl.n	800260e <calibrate+0x3ee>
                    ind += n;}                                                  // Moving average wraps around
 800260a:	f503 7985 	add.w	r9, r3, #266	; 0x10a
                error_filt[i] += error[ind]/(float)window;
 800260e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8002612:	ed99 5a00 	vldr	s10, [r9]
                if(ind<0){
 8002616:	f1b3 0905 	subs.w	r9, r3, #5
 800261a:	d501      	bpl.n	8002620 <calibrate+0x400>
                    ind += n;}                                                  // Moving average wraps around
 800261c:	f203 190b 	addw	r9, r3, #267	; 0x10b
                error_filt[i] += error[ind]/(float)window;
 8002620:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8002624:	edd9 4a00 	vldr	s9, [r9]
                if(ind<0){
 8002628:	f1b3 0904 	subs.w	r9, r3, #4
 800262c:	d501      	bpl.n	8002632 <calibrate+0x412>
                    ind += n;}                                                  // Moving average wraps around
 800262e:	f503 7986 	add.w	r9, r3, #268	; 0x10c
                error_filt[i] += error[ind]/(float)window;
 8002632:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 8002636:	ed99 4a00 	vldr	s8, [r9]
                if(ind<0){
 800263a:	f1b3 0903 	subs.w	r9, r3, #3
 800263e:	d501      	bpl.n	8002644 <calibrate+0x424>
                    ind += n;}                                                  // Moving average wraps around
 8002640:	f203 190d 	addw	r9, r3, #269	; 0x10d
                error_filt[i] += error[ind]/(float)window;
 8002644:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002648:	eb08 0989 	add.w	r9, r8, r9, lsl #2
 800264c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002650:	ed99 6a00 	vldr	s12, [r9]
 8002654:	ee77 7a85 	vadd.f32	s15, s15, s10
                if(ind<0){
 8002658:	2b01      	cmp	r3, #1
                error_filt[i] += error[ind]/(float)window;
 800265a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800265e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8002662:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002666:	eea7 7aa6 	vfma.f32	s14, s15, s13
                if(ind<0){
 800266a:	f43f af43 	beq.w	80024f4 <calibrate+0x2d4>
                error_filt[i] += error[ind]/(float)window;
 800266e:	edde 7a00 	vldr	s15, [lr]
 8002672:	ed1e 6a01 	vldr	s12, [lr, #-4]
 8002676:	ee77 7a86 	vadd.f32	s15, s15, s12
                else if(ind > n-1) {
 800267a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 800267e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002682:	ed81 7a00 	vstr	s14, [r1]
                else if(ind > n-1) {
 8002686:	f47f af3e 	bne.w	8002506 <calibrate+0x2e6>
                error_filt[i] += error[ind]/(float)window;
 800268a:	edd8 7a00 	vldr	s15, [r8]
 800268e:	eea7 7aa6 	vfma.f32	s14, s15, s13
                else if(ind > n-1) {
 8002692:	f240 1b11 	movw	fp, #273	; 0x111
                    ind -= n;}
 8002696:	f46f 7087 	mvn.w	r0, #270	; 0x10e
 800269a:	eb03 0900 	add.w	r9, r3, r0
                error_filt[i] += error[ind]/(float)window;
 800269e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 80026a2:	f5bc 7f88 	cmp.w	ip, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 80026a6:	ed99 6a00 	vldr	s12, [r9]
                else if(ind > n-1) {
 80026aa:	f4ff af43 	bcc.w	8002534 <calibrate+0x314>
                    ind -= n;}
 80026ae:	f5a3 7987 	sub.w	r9, r3, #270	; 0x10e
                error_filt[i] += error[ind]/(float)window;
 80026b2:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 80026b6:	f5b6 7f88 	cmp.w	r6, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 80026ba:	edd9 7a00 	vldr	s15, [r9]
                else if(ind > n-1) {
 80026be:	f4ff af42 	bcc.w	8002546 <calibrate+0x326>
                    ind -= n;}
 80026c2:	f46f 7986 	mvn.w	r9, #268	; 0x10c
 80026c6:	4499      	add	r9, r3
                error_filt[i] += error[ind]/(float)window;
 80026c8:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 80026cc:	f5b5 7f88 	cmp.w	r5, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 80026d0:	edd9 5a00 	vldr	s11, [r9]
                else if(ind > n-1) {
 80026d4:	f4ff af40 	bcc.w	8002558 <calibrate+0x338>
                    ind -= n;}
 80026d8:	f5a3 7986 	sub.w	r9, r3, #268	; 0x10c
                error_filt[i] += error[ind]/(float)window;
 80026dc:	eb08 0989 	add.w	r9, r8, r9, lsl #2
                else if(ind > n-1) {
 80026e0:	f5b4 7f88 	cmp.w	r4, #272	; 0x110
                error_filt[i] += error[ind]/(float)window;
 80026e4:	ed99 5a00 	vldr	s10, [r9]
                else if(ind > n-1) {
 80026e8:	f4ff af3f 	bcc.w	800256a <calibrate+0x34a>
                    ind -= n;}
 80026ec:	f46f 7085 	mvn.w	r0, #266	; 0x10a
 80026f0:	eb03 0900 	add.w	r9, r3, r0
 80026f4:	e73a      	b.n	800256c <calibrate+0x34c>
 80026f6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80026fa:	e741      	b.n	8002580 <calibrate+0x360>

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 80026fc:	6938      	ldr	r0, [r7, #16]
 80026fe:	f7fd ff4b 	bl	8000598 <__aeabi_f2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4804      	ldr	r0, [pc, #16]	; (8002718 <calibrate+0x4f8>)
 8002708:	f000 fac6 	bl	8002c98 <PrintServerPrintf>
//        for (int i = 0; i<LUT_SIZE; i++){
//        	float wanted_pos = i *360.0f / LUT_SIZE;
//        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
//        	PrintServerPrintf("%d\n\r", motor_lut[i]);
//        }
    }
 800270c:	372c      	adds	r7, #44	; 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	ecbd 8b06 	vpop	{d8-d10}
 8002714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002718:	0800c8e0 	.word	0x0800c8e0

0800271c <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800271e:	4f16      	ldr	r7, [pc, #88]	; (8002778 <ORBIS_init+0x5c>)
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8002720:	4e16      	ldr	r6, [pc, #88]	; (800277c <ORBIS_init+0x60>)
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8002722:	4d17      	ldr	r5, [pc, #92]	; (8002780 <ORBIS_init+0x64>)
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8002724:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8002726:	2201      	movs	r2, #1
 8002728:	4638      	mov	r0, r7
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	f003 ffce 	bl	80066cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8002730:	4630      	mov	r0, r6
 8002732:	2201      	movs	r2, #1
 8002734:	2104      	movs	r1, #4
 8002736:	f003 ffc9 	bl	80066cc <HAL_GPIO_WritePin>
	Encoders_IRQ_callback = __IRQ_callback;
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <ORBIS_init+0x68>)
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800273c:	4638      	mov	r0, r7
	Encoders_IRQ_callback = __IRQ_callback;
 800273e:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002740:	2200      	movs	r2, #0
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8002742:	2374      	movs	r3, #116	; 0x74
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002744:	2140      	movs	r1, #64	; 0x40
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8002746:	702b      	strb	r3, [r5, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002748:	f003 ffc0 	bl	80066cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800274c:	4630      	mov	r0, r6
 800274e:	2200      	movs	r2, #0
 8002750:	2104      	movs	r1, #4
 8002752:	f003 ffbb 	bl	80066cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8002756:	4629      	mov	r1, r5
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <ORBIS_init+0x6c>)
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <ORBIS_init+0x70>)
 800275c:	2305      	movs	r3, #5
 800275e:	f004 ff0b 	bl	8007578 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8002762:	2305      	movs	r3, #5
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <ORBIS_init+0x74>)
 8002766:	490b      	ldr	r1, [pc, #44]	; (8002794 <ORBIS_init+0x78>)
 8002768:	480b      	ldr	r0, [pc, #44]	; (8002798 <ORBIS_init+0x7c>)
 800276a:	f004 ff05 	bl	8007578 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);

}
 800276e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8002772:	480a      	ldr	r0, [pc, #40]	; (800279c <ORBIS_init+0x80>)
 8002774:	f005 bac2 	b.w	8007cfc <HAL_TIM_Base_Start_IT>
 8002778:	48000400 	.word	0x48000400
 800277c:	48000c00 	.word	0x48000c00
 8002780:	20000f68 	.word	0x20000f68
 8002784:	20000f5c 	.word	0x20000f5c
 8002788:	20000f60 	.word	0x20000f60
 800278c:	20001cbc 	.word	0x20001cbc
 8002790:	20000f70 	.word	0x20000f70
 8002794:	20000f78 	.word	0x20000f78
 8002798:	20001d20 	.word	0x20001d20
 800279c:	20001e20 	.word	0x20001e20

080027a0 <HAL_SPI_TxRxCpltCallback>:
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
	if (hspi == &hspi1) {
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_SPI_TxRxCpltCallback+0xe8>)
 80027a2:	4298      	cmp	r0, r3
{
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4604      	mov	r4, r0
	if (hspi == &hspi1) {
 80027a8:	d008      	beq.n	80027bc <HAL_SPI_TxRxCpltCallback+0x1c>
		if (velocity_index == velocity_lpf_size)velocity_index = 0;

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
	}
	if (hspi == &hspi3) {
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_SPI_TxRxCpltCallback+0xec>)
 80027ac:	429c      	cmp	r4, r3
 80027ae:	d04e      	beq.n	800284e <HAL_SPI_TxRxCpltCallback+0xae>
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 80027b0:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_SPI_TxRxCpltCallback+0xf0>)
 80027b2:	4838      	ldr	r0, [pc, #224]	; (8002894 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
}
 80027b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Encoders_IRQ_callback(&data_encoders);
 80027ba:	4718      	bx	r3
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80027bc:	4836      	ldr	r0, [pc, #216]	; (8002898 <HAL_SPI_TxRxCpltCallback+0xf8>)
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80027be:	4d37      	ldr	r5, [pc, #220]	; (800289c <HAL_SPI_TxRxCpltCallback+0xfc>)
 80027c0:	4e37      	ldr	r6, [pc, #220]	; (80028a0 <HAL_SPI_TxRxCpltCallback+0x100>)
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80027c2:	2201      	movs	r2, #1
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	f003 ff81 	bl	80066cc <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80027ca:	4836      	ldr	r0, [pc, #216]	; (80028a4 <HAL_SPI_TxRxCpltCallback+0x104>)
 80027cc:	4931      	ldr	r1, [pc, #196]	; (8002894 <HAL_SPI_TxRxCpltCallback+0xf4>)
 80027ce:	7803      	ldrb	r3, [r0, #0]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80027d0:	7842      	ldrb	r2, [r0, #1]
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80027d2:	610b      	str	r3, [r1, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 80027da:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80027de:	fb03 f202 	mul.w	r2, r3, r2
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 80027e2:	608b      	str	r3, [r1, #8]
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80027e4:	682b      	ldr	r3, [r5, #0]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80027e6:	0a12      	lsrs	r2, r2, #8
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	42b3      	cmp	r3, r6
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80027ec:	600a      	str	r2, [r1, #0]
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80027ee:	dd3e      	ble.n	800286e <HAL_SPI_TxRxCpltCallback+0xce>
 80027f0:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80027f4:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 8002800:	602a      	str	r2, [r5, #0]
		velocity_accumulate -= velocity_array[velocity_index];
 8002802:	4d29      	ldr	r5, [pc, #164]	; (80028a8 <HAL_SPI_TxRxCpltCallback+0x108>)
 8002804:	4a29      	ldr	r2, [pc, #164]	; (80028ac <HAL_SPI_TxRxCpltCallback+0x10c>)
 8002806:	782b      	ldrb	r3, [r5, #0]
 8002808:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800280c:	edd2 6a00 	vldr	s13, [r2]
		velocity_array[velocity_index] = velocity_temp;
 8002810:	edc2 7a00 	vstr	s15, [r2]
		velocity_accumulate += velocity_temp;
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <HAL_SPI_TxRxCpltCallback+0x110>)
		velocity_index++;
 8002816:	3301      	adds	r3, #1
		velocity_accumulate -= velocity_array[velocity_index];
 8002818:	ed92 7a00 	vldr	s14, [r2]
		velocity_index++;
 800281c:	b2db      	uxtb	r3, r3
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 800281e:	2b64      	cmp	r3, #100	; 0x64
		velocity_accumulate -= velocity_array[velocity_index];
 8002820:	ee37 7a66 	vsub.f32	s14, s14, s13
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8002824:	bf08      	it	eq
 8002826:	2300      	moveq	r3, #0
		velocity_accumulate -= velocity_array[velocity_index];
 8002828:	ee77 7a27 	vadd.f32	s15, s14, s15
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 800282c:	702b      	strb	r3, [r5, #0]
		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 800282e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028b4 <HAL_SPI_TxRxCpltCallback+0x114>
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 8002832:	8843      	ldrh	r3, [r0, #2]
		velocity_accumulate -= velocity_array[velocity_index];
 8002834:	edc2 7a00 	vstr	s15, [r2]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 8002838:	ba5b      	rev16	r3, r3
		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 800283a:	ee67 7a87 	vmul.f32	s15, s15, s14
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 800283e:	830b      	strh	r3, [r1, #24]
	if (hspi == &hspi3) {
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_SPI_TxRxCpltCallback+0xec>)
		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8002842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	if (hspi == &hspi3) {
 8002846:	429c      	cmp	r4, r3
		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8002848:	edc1 7a05 	vstr	s15, [r1, #20]
	if (hspi == &hspi3) {
 800284c:	d1b0      	bne.n	80027b0 <HAL_SPI_TxRxCpltCallback+0x10>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800284e:	481a      	ldr	r0, [pc, #104]	; (80028b8 <HAL_SPI_TxRxCpltCallback+0x118>)
 8002850:	2201      	movs	r2, #1
 8002852:	2104      	movs	r1, #4
 8002854:	f003 ff3a 	bl	80066cc <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_SPI_TxRxCpltCallback+0x11c>)
 800285a:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_SPI_TxRxCpltCallback+0xf4>)
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 800285c:	7853      	ldrb	r3, [r2, #1]
 800285e:	7810      	ldrb	r0, [r2, #0]
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8002860:	8852      	ldrh	r2, [r2, #2]
 8002862:	834a      	strh	r2, [r1, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e7a0      	b.n	80027b0 <HAL_SPI_TxRxCpltCallback+0x10>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 800286e:	4e14      	ldr	r6, [pc, #80]	; (80028c0 <HAL_SPI_TxRxCpltCallback+0x120>)
 8002870:	42b3      	cmp	r3, r6
 8002872:	bfbc      	itt	lt
 8002874:	f503 23af 	addlt.w	r3, r3, #358400	; 0x57800
 8002878:	f503 63c8 	addlt.w	r3, r3, #1600	; 0x640
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002884:	e7bc      	b.n	8002800 <HAL_SPI_TxRxCpltCallback+0x60>
 8002886:	bf00      	nop
 8002888:	20001cbc 	.word	0x20001cbc
 800288c:	20001d20 	.word	0x20001d20
 8002890:	20000f5c 	.word	0x20000f5c
 8002894:	20000f80 	.word	0x20000f80
 8002898:	48000400 	.word	0x48000400
 800289c:	20000f9c 	.word	0x20000f9c
 80028a0:	0002bf20 	.word	0x0002bf20
 80028a4:	20000f60 	.word	0x20000f60
 80028a8:	20001134 	.word	0x20001134
 80028ac:	20000fa4 	.word	0x20000fa4
 80028b0:	20000fa0 	.word	0x20000fa0
 80028b4:	41855556 	.word	0x41855556
 80028b8:	48000c00 	.word	0x48000c00
 80028bc:	20000f70 	.word	0x20000f70
 80028c0:	fffd40e0 	.word	0xfffd40e0

080028c4 <ENCODER_TIM_PeriodElapsedCallback>:
void ENCODER_TIM_PeriodElapsedCallback(){
 80028c4:	b510      	push	{r4, lr}

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80028c6:	480c      	ldr	r0, [pc, #48]	; (80028f8 <ENCODER_TIM_PeriodElapsedCallback+0x34>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	f003 fefe 	bl	80066cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <ENCODER_TIM_PeriodElapsedCallback+0x38>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	2104      	movs	r1, #4
 80028d6:	f003 fef9 	bl	80066cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <ENCODER_TIM_PeriodElapsedCallback+0x3c>)
 80028dc:	4909      	ldr	r1, [pc, #36]	; (8002904 <ENCODER_TIM_PeriodElapsedCallback+0x40>)
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <ENCODER_TIM_PeriodElapsedCallback+0x44>)
 80028e0:	2305      	movs	r3, #5
 80028e2:	f004 fe49 	bl	8007578 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
}
 80028e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80028ea:	4a08      	ldr	r2, [pc, #32]	; (800290c <ENCODER_TIM_PeriodElapsedCallback+0x48>)
 80028ec:	4908      	ldr	r1, [pc, #32]	; (8002910 <ENCODER_TIM_PeriodElapsedCallback+0x4c>)
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <ENCODER_TIM_PeriodElapsedCallback+0x50>)
 80028f0:	2305      	movs	r3, #5
 80028f2:	f004 be41 	b.w	8007578 <HAL_SPI_TransmitReceive_DMA>
 80028f6:	bf00      	nop
 80028f8:	48000400 	.word	0x48000400
 80028fc:	48000c00 	.word	0x48000c00
 8002900:	20000f60 	.word	0x20000f60
 8002904:	20000f68 	.word	0x20000f68
 8002908:	20001cbc 	.word	0x20001cbc
 800290c:	20000f70 	.word	0x20000f70
 8002910:	20000f78 	.word	0x20000f78
 8002914:	20001d20 	.word	0x20001d20

08002918 <Flash_init>:
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
    }
    HAL_FLASH_Lock();
}

void Flash_init(){
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <Flash_init+0x80>)
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <Flash_init+0x84>)
 800291e:	681c      	ldr	r4, [r3, #0]
void Flash_init(){
 8002920:	b087      	sub	sp, #28
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8002922:	225e      	movs	r2, #94	; 0x5e
 8002924:	4620      	mov	r0, r4
 8002926:	f007 fbdb 	bl	800a0e0 <memcmp>
 800292a:	b358      	cbz	r0, 8002984 <Flash_init+0x6c>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 800292c:	4f1c      	ldr	r7, [pc, #112]	; (80029a0 <Flash_init+0x88>)
 800292e:	4d1d      	ldr	r5, [pc, #116]	; (80029a4 <Flash_init+0x8c>)
 8002930:	4621      	mov	r1, r4
 8002932:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8002936:	4638      	mov	r0, r7
 8002938:	f007 fc61 	bl	800a1fe <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 800293c:	4917      	ldr	r1, [pc, #92]	; (800299c <Flash_init+0x84>)
 800293e:	225e      	movs	r2, #94	; 0x5e
 8002940:	4638      	mov	r0, r7
 8002942:	f007 fc5c 	bl	800a1fe <memcpy>
	FLASH_EraseInitTypeDef pEraseInit = {
 8002946:	2101      	movs	r1, #1
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	2301      	movs	r3, #1
 800294c:	2000      	movs	r0, #0
 800294e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002952:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_FLASH_Unlock();
 8002956:	f003 fc7b 	bl	8006250 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800295a:	a901      	add	r1, sp, #4
 800295c:	a802      	add	r0, sp, #8
 800295e:	f003 fcc1 	bl	80062e4 <HAL_FLASHEx_Erase>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8002962:	f1a7 0408 	sub.w	r4, r7, #8
 8002966:	f507 6696 	add.w	r6, r7, #1200	; 0x4b0
 800296a:	1bed      	subs	r5, r5, r7
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 800296c:	1929      	adds	r1, r5, r4
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 800296e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8002972:	2000      	movs	r0, #0
 8002974:	f003 fbbe 	bl	80060f4 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8002978:	42b4      	cmp	r4, r6
 800297a:	d1f7      	bne.n	800296c <Flash_init+0x54>
    HAL_FLASH_Lock();
 800297c:	f003 fc7c 	bl	8006278 <HAL_FLASH_Lock>
		Flash_save();
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 8002980:	b007      	add	sp, #28
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <Flash_init+0x88>)
 8002986:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 800298a:	4621      	mov	r1, r4
}
 800298c:	b007      	add	sp, #28
 800298e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8002992:	f007 bc34 	b.w	800a1fe <memcpy>
 8002996:	bf00      	nop
 8002998:	20000528 	.word	0x20000528
 800299c:	20000070 	.word	0x20000070
 80029a0:	20001138 	.word	0x20001138
 80029a4:	0801f808 	.word	0x0801f808

080029a8 <Flash_save>:

void Flash_save(){
 80029a8:	b570      	push	{r4, r5, r6, lr}
	FLASH_EraseInitTypeDef pEraseInit = {
 80029aa:	2301      	movs	r3, #1
void Flash_save(){
 80029ac:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef pEraseInit = {
 80029ae:	2101      	movs	r1, #1
 80029b0:	223f      	movs	r2, #63	; 0x3f
 80029b2:	2000      	movs	r0, #0
 80029b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	HAL_FLASH_Unlock();
 80029bc:	f003 fc48 	bl	8006250 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80029c0:	a901      	add	r1, sp, #4
 80029c2:	a802      	add	r0, sp, #8
 80029c4:	f003 fc8e 	bl	80062e4 <HAL_FLASHEx_Erase>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 80029c8:	4d09      	ldr	r5, [pc, #36]	; (80029f0 <Flash_save+0x48>)
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <Flash_save+0x4c>)
 80029cc:	f1a3 0408 	sub.w	r4, r3, #8
 80029d0:	f503 6696 	add.w	r6, r3, #1200	; 0x4b0
 80029d4:	1aed      	subs	r5, r5, r3
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 80029d6:	1929      	adds	r1, r5, r4
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 80029d8:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80029dc:	2000      	movs	r0, #0
 80029de:	f003 fb89 	bl	80060f4 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 80029e2:	42b4      	cmp	r4, r6
 80029e4:	d1f7      	bne.n	80029d6 <Flash_save+0x2e>
    HAL_FLASH_Lock();
 80029e6:	f003 fc47 	bl	8006278 <HAL_FLASH_Lock>
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
}
 80029ea:	b006      	add	sp, #24
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	bf00      	nop
 80029f0:	0801f808 	.word	0x0801f808
 80029f4:	20001138 	.word	0x20001138

080029f8 <Flash_get_values>:

Flash *Flash_get_values(){
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
}
 80029f8:	4800      	ldr	r0, [pc, #0]	; (80029fc <Flash_get_values+0x4>)
 80029fa:	4770      	bx	lr
 80029fc:	20001138 	.word	0x20001138

08002a00 <Compute>:

#include <stdio.h>

void Compute(PID_instance *val)
{
	if(!val->inAuto) return;
 8002a00:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d044      	beq.n	8002a92 <Compute+0x92>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8002a08:	edd0 5a00 	vldr	s11, [r0]
 8002a0c:	ed90 7a02 	vldr	s14, [r0, #8]
	float dInput = (val->Input - val->lastInput);
	val->outputSum+= (val->ki * error);
 8002a10:	edd0 7a03 	vldr	s15, [r0, #12]
 8002a14:	edd0 6a06 	vldr	s13, [r0, #24]
	float dInput = (val->Input - val->lastInput);
 8002a18:	ed90 6a04 	vldr	s12, [r0, #16]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8002a1c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
	float error = val->Setpoint - val->Input;
 8002a20:	ee37 7a65 	vsub.f32	s14, s14, s11
	float dInput = (val->Input - val->lastInput);
 8002a24:	ee35 6ac6 	vsub.f32	s12, s11, s12
	val->outputSum+= (val->ki * error);
 8002a28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002a2c:	edc0 7a03 	vstr	s15, [r0, #12]
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8002a30:	b12b      	cbz	r3, 8002a3e <Compute+0x3e>
 8002a32:	edd0 6a0f 	vldr	s13, [r0, #60]	; 0x3c
 8002a36:	eee6 7ac6 	vfms.f32	s15, s13, s12
 8002a3a:	edc0 7a03 	vstr	s15, [r0, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002a3e:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
 8002a42:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	d423      	bmi.n	8002a94 <Compute+0x94>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002a4c:	ed90 5a08 	vldr	s10, [r0, #32]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8002a50:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002a54:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	bfc4      	itt	gt
 8002a5e:	eef0 7a45 	vmovgt.f32	s15, s10
 8002a62:	ed80 5a03 	vstrgt	s10, [r0, #12]
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8002a66:	b1eb      	cbz	r3, 8002aa4 <Compute+0xa4>
 8002a68:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8002a6c:	ee27 7a05 	vmul.f32	s14, s14, s10
	else val->Output = 0;

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8002a70:	ed90 5a07 	vldr	s10, [r0, #28]
 8002a74:	eee5 7a46 	vfms.f32	s15, s10, s12
 8002a78:	ee77 7a87 	vadd.f32	s15, s15, s14

	if(val->Output > val->outMax) val->Output = val->outMax;
 8002a7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	val->Output += val->outputSum - val->kd * dInput;
 8002a84:	edc0 7a01 	vstr	s15, [r0, #4]
	if(val->Output > val->outMax) val->Output = val->outMax;
 8002a88:	d50f      	bpl.n	8002aaa <Compute+0xaa>
 8002a8a:	edc0 6a01 	vstr	s13, [r0, #4]
	else if(val->Output < val->outMin) val->Output = val->outMin;

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8002a8e:	edc0 5a04 	vstr	s11, [r0, #16]
}
 8002a92:	4770      	bx	lr
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8002a94:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002a98:	edc0 6a03 	vstr	s13, [r0, #12]
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8002a9c:	eef0 7a66 	vmov.f32	s15, s13
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e1      	bne.n	8002a68 <Compute+0x68>
	else val->Output = 0;
 8002aa4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002ac0 <Compute+0xc0>
 8002aa8:	e7e2      	b.n	8002a70 <Compute+0x70>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8002aaa:	ed90 7a08 	vldr	s14, [r0, #32]
 8002aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	bf48      	it	mi
 8002ab8:	ed80 7a01 	vstrmi	s14, [r0, #4]
 8002abc:	e7e7      	b.n	8002a8e <Compute+0x8e>
 8002abe:	bf00      	nop
 8002ac0:	00000000 	.word	0x00000000

08002ac4 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8002ac4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	d457      	bmi.n	8002b7e <SetTunings+0xba>
 8002ace:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	d452      	bmi.n	8002b7e <SetTunings+0xba>
 8002ad8:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	d44d      	bmi.n	8002b7e <SetTunings+0xba>
 8002ae2:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	d448      	bmi.n	8002b7e <SetTunings+0xba>
 8002aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002af0:	eef4 1ac7 	vcmpe.f32	s3, s14
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	dc41      	bgt.n	8002b7e <SetTunings+0xba>

   val->pOnE = pOn>0; //some p on error is desired;
   val->pOnM = pOn<1; //some p on measurement is desired;

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8002afa:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002afe:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002b80 <SetTunings+0xbc>
   val->kp = Kp;
 8002b02:	ed80 0a05 	vstr	s0, [r0, #20]
   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8002b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
   val->pOnE = pOn>0; //some p on error is desired;
 8002b0a:	eef5 1ac0 	vcmpe.f32	s3, #0.0
   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8002b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   val->pOnE = pOn>0; //some p on error is desired;
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   val->ki = Ki * SampleTimeInSec;
   val->kd = Kd / SampleTimeInSec;
 8002b16:	eec1 6a27 	vdiv.f32	s13, s2, s15
   val->pOnE = pOn>0; //some p on error is desired;
 8002b1a:	bfcc      	ite	gt
 8002b1c:	2201      	movgt	r2, #1
 8002b1e:	2200      	movle	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f362 0307 	bfi	r3, r2, #0, #8

  if(val->controllerDirection ==REVERSE)
 8002b28:	6b02      	ldr	r2, [r0, #48]	; 0x30
   val->pOnM = pOn<1; //some p on measurement is desired;
 8002b2a:	eef4 1ac7 	vcmpe.f32	s3, s14
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	bf4c      	ite	mi
 8002b34:	2101      	movmi	r1, #1
 8002b36:	2100      	movpl	r1, #0
   val->ki = Ki * SampleTimeInSec;
 8002b38:	ee60 0aa7 	vmul.f32	s1, s1, s15
   val->pOnE = pOn>0; //some p on error is desired;
 8002b3c:	f361 230f 	bfi	r3, r1, #8, #8
  if(val->controllerDirection ==REVERSE)
 8002b40:	2a01      	cmp	r2, #1
   val->pOnE = pOn>0; //some p on error is desired;
 8002b42:	8683      	strh	r3, [r0, #52]	; 0x34
   val->ki = Ki * SampleTimeInSec;
 8002b44:	edc0 0a06 	vstr	s1, [r0, #24]
   val->kd = Kd / SampleTimeInSec;
 8002b48:	edc0 6a07 	vstr	s13, [r0, #28]
  if(val->controllerDirection ==REVERSE)
 8002b4c:	d10b      	bne.n	8002b66 <SetTunings+0xa2>
   {
	  val->kp = (0 - val->kp);
 8002b4e:	eeb1 0a40 	vneg.f32	s0, s0
	  val->ki = (0 - val->ki);
 8002b52:	eef1 0a60 	vneg.f32	s1, s1
	  val->kd = (0 - val->kd);
 8002b56:	eef1 6a66 	vneg.f32	s13, s13
	  val->kp = (0 - val->kp);
 8002b5a:	ed80 0a05 	vstr	s0, [r0, #20]
	  val->ki = (0 - val->ki);
 8002b5e:	edc0 0a06 	vstr	s1, [r0, #24]
	  val->kd = (0 - val->kd);
 8002b62:	edc0 6a07 	vstr	s13, [r0, #28]
   }

  val->pOnEKp = pOn * val->kp;
  val->pOnMKp = (1 - pOn) * val->kp;
 8002b66:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b6a:	ee77 7ae1 	vsub.f32	s15, s15, s3
  val->pOnEKp = pOn * val->kp;
 8002b6e:	ee61 1a80 	vmul.f32	s3, s3, s0
  val->pOnMKp = (1 - pOn) * val->kp;
 8002b72:	ee67 7a80 	vmul.f32	s15, s15, s0
  val->pOnEKp = pOn * val->kp;
 8002b76:	edc0 1a0e 	vstr	s3, [r0, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8002b7a:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
}
 8002b7e:	4770      	bx	lr
 8002b80:	358637bd 	.word	0x358637bd

08002b84 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
   if (NewSampleTime > 0)
 8002b84:	2900      	cmp	r1, #0
 8002b86:	dd16      	ble.n	8002bb6 <SetSampleTime+0x32>
   {
      float ratio  = (float)NewSampleTime
 8002b88:	ee07 1a90 	vmov	s15, r1
 8002b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8002b90:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
      val->ki *= ratio;
      val->kd /= ratio;
 8002b94:	ed90 6a07 	vldr	s12, [r0, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8002b98:	6281      	str	r1, [r0, #40]	; 0x28
                      / (float)val->SampleTime;
 8002b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
      float ratio  = (float)NewSampleTime
 8002b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      val->ki *= ratio;
 8002ba2:	edd0 7a06 	vldr	s15, [r0, #24]
      val->kd /= ratio;
 8002ba6:	eec6 6a07 	vdiv.f32	s13, s12, s14
      val->ki *= ratio;
 8002baa:	ee67 7a87 	vmul.f32	s15, s15, s14
      val->kd /= ratio;
 8002bae:	edc0 6a07 	vstr	s13, [r0, #28]
      val->ki *= ratio;
 8002bb2:	edc0 7a06 	vstr	s15, [r0, #24]
   }
}
 8002bb6:	4770      	bx	lr

08002bb8 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
   if(Min > Max) return;
 8002bb8:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	dc22      	bgt.n	8002c08 <SetOutputLimits+0x50>
   val->outMin = Min;
   val->outMax = Max;

   if(val->Output > val->outMax) val->Output = val->outMax;
 8002bc2:	edd0 7a01 	vldr	s15, [r0, #4]
   val->outMin = Min;
 8002bc6:	ed80 0a08 	vstr	s0, [r0, #32]
   if(val->Output > val->outMax) val->Output = val->outMax;
 8002bca:	eef4 7ae0 	vcmpe.f32	s15, s1
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   val->outMax = Max;
 8002bd2:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
   if(val->Output > val->outMax) val->Output = val->outMax;
 8002bd6:	dc18      	bgt.n	8002c0a <SetOutputLimits+0x52>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8002bd8:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	bf48      	it	mi
 8002be2:	ed80 0a01 	vstrmi	s0, [r0, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002be6:	edd0 7a03 	vldr	s15, [r0, #12]
 8002bea:	eef4 7ae0 	vcmpe.f32	s15, s1
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	dd02      	ble.n	8002bfa <SetOutputLimits+0x42>
 8002bf4:	edc0 0a03 	vstr	s1, [r0, #12]
 8002bf8:	4770      	bx	lr
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002bfa:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	bf48      	it	mi
 8002c04:	ed80 0a03 	vstrmi	s0, [r0, #12]
}
 8002c08:	4770      	bx	lr
   if(val->Output > val->outMax) val->Output = val->outMax;
 8002c0a:	edc0 0a01 	vstr	s1, [r0, #4]
 8002c0e:	e7ea      	b.n	8002be6 <SetOutputLimits+0x2e>

08002c10 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
    uint8_t newAuto = (Mode == AUTOMATIC);
    if(newAuto == !val->inAuto)
 8002c10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    uint8_t newAuto = (Mode == AUTOMATIC);
 8002c14:	f1a1 0101 	sub.w	r1, r1, #1
 8002c18:	fab1 f181 	clz	r1, r1
    if(newAuto == !val->inAuto)
 8002c1c:	fab3 f383 	clz	r3, r3
    uint8_t newAuto = (Mode == AUTOMATIC);
 8002c20:	0949      	lsrs	r1, r1, #5
    if(newAuto == !val->inAuto)
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d002      	beq.n	8002c2e <SetMode+0x1e>
    {  /*we just went from manual to auto*/
        Initialize(val);
    }
    val->inAuto = newAuto;
 8002c28:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002c2c:	4770      	bx	lr

void Initialize(PID_instance *val)
{
	val->lastInput = val->Input;
	val->outputSum = val->Output;
 8002c2e:	edd0 7a01 	vldr	s15, [r0, #4]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c32:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
	val->lastInput = val->Input;
 8002c36:	6803      	ldr	r3, [r0, #0]
 8002c38:	6103      	str	r3, [r0, #16]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	val->outputSum = val->Output;
 8002c42:	edc0 7a03 	vstr	s15, [r0, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c46:	dd04      	ble.n	8002c52 <SetMode+0x42>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002c48:	ed80 7a03 	vstr	s14, [r0, #12]
    val->inAuto = newAuto;
 8002c4c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002c50:	4770      	bx	lr
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002c52:	ed90 7a08 	vldr	s14, [r0, #32]
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d5e3      	bpl.n	8002c28 <SetMode+0x18>
 8002c60:	e7f2      	b.n	8002c48 <SetMode+0x38>
 8002c62:	bf00      	nop

08002c64 <Initialize>:
	val->outputSum = val->Output;
 8002c64:	edd0 7a01 	vldr	s15, [r0, #4]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c68:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
	val->lastInput = val->Input;
 8002c6c:	6803      	ldr	r3, [r0, #0]
 8002c6e:	6103      	str	r3, [r0, #16]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	val->outputSum = val->Output;
 8002c78:	edc0 7a03 	vstr	s15, [r0, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002c7c:	dc06      	bgt.n	8002c8c <Initialize+0x28>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002c7e:	ed90 7a08 	vldr	s14, [r0, #32]
 8002c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d501      	bpl.n	8002c90 <Initialize+0x2c>
 8002c8c:	ed80 7a03 	vstr	s14, [r0, #12]
}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop

08002c94 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
	val->controllerDirection = Direction;
 8002c94:	6301      	str	r1, [r0, #48]	; 0x30
}
 8002c96:	4770      	bx	lr

08002c98 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8002c98:	b40f      	push	{r0, r1, r2, r3}
 8002c9a:	b510      	push	{r4, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	ab04      	add	r3, sp, #16
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8002ca0:	4c0b      	ldr	r4, [pc, #44]	; (8002cd0 <PrintServerPrintf+0x38>)
{
 8002ca2:	f853 2b04 	ldr.w	r2, [r3], #4
va_start(args, fmt);
 8002ca6:	9301      	str	r3, [sp, #4]
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8002ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cac:	4620      	mov	r0, r4
 8002cae:	f007 fa09 	bl	800a0c4 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7fd fb04 	bl	80002c0 <strlen>
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <PrintServerPrintf+0x3c>)
 8002cba:	b282      	uxth	r2, r0
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f005 fe64 	bl	800898c <HAL_UART_Transmit_DMA>
}
 8002cc4:	b002      	add	sp, #8
 8002cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cca:	b004      	add	sp, #16
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	200015f0 	.word	0x200015f0
 8002cd4:	2000052c 	.word	0x2000052c

08002cd8 <dac_value>:

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <dac_value+0x1c>)
 8002cda:	8819      	ldrh	r1, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8002cdc:	2200      	movs	r2, #0
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8002cde:	b209      	sxth	r1, r1
 8002ce0:	ebc0 3300 	rsb	r3, r0, r0, lsl #12
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <dac_value+0x20>)
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8002ce6:	fb93 f3f1 	sdiv	r3, r3, r1
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8002cea:	4611      	mov	r1, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f002 bc0b 	b.w	8005508 <HAL_DAC_SetValue>
 8002cf2:	bf00      	nop
 8002cf4:	200017f4 	.word	0x200017f4
 8002cf8:	20001a8c 	.word	0x20001a8c

08002cfc <ADC_CAL>:
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002cfc:	4b37      	ldr	r3, [pc, #220]	; (8002ddc <ADC_CAL+0xe0>)
void ADC_CAL(){
 8002cfe:	b470      	push	{r4, r5, r6}
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4d37      	ldr	r5, [pc, #220]	; (8002de0 <ADC_CAL+0xe4>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	68ea      	ldr	r2, [r5, #12]
 8002d08:	4c36      	ldr	r4, [pc, #216]	; (8002de4 <ADC_CAL+0xe8>)
 8002d0a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	0912      	lsrs	r2, r2, #4
 8002d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	8023      	strh	r3, [r4, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8002d1c:	68a8      	ldr	r0, [r5, #8]
 8002d1e:	8823      	ldrh	r3, [r4, #0]
 8002d20:	4931      	ldr	r1, [pc, #196]	; (8002de8 <ADC_CAL+0xec>)
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	0900      	lsrs	r0, r0, #4
 8002d26:	fb03 f000 	mul.w	r0, r3, r0
 8002d2a:	4b30      	ldr	r3, [pc, #192]	; (8002dec <ADC_CAL+0xf0>)
 8002d2c:	fba3 6200 	umull	r6, r2, r3, r0
 8002d30:	1a80      	subs	r0, r0, r2
 8002d32:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002d36:	0ad2      	lsrs	r2, r2, #11
 8002d38:	482d      	ldr	r0, [pc, #180]	; (8002df0 <ADC_CAL+0xf4>)
 8002d3a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002d3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8002d42:	fba0 6202 	umull	r6, r2, r0, r2
 8002d46:	680e      	ldr	r6, [r1, #0]
 8002d48:	eb06 1252 	add.w	r2, r6, r2, lsr #5
 8002d4c:	600a      	str	r2, [r1, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8002d4e:	686a      	ldr	r2, [r5, #4]
 8002d50:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8002d54:	8822      	ldrh	r2, [r4, #0]
 8002d56:	b212      	sxth	r2, r2
 8002d58:	fb02 fc0c 	mul.w	ip, r2, ip
 8002d5c:	fba3 620c 	umull	r6, r2, r3, ip
 8002d60:	ebac 0c02 	sub.w	ip, ip, r2
 8002d64:	eb02 025c 	add.w	r2, r2, ip, lsr #1
 8002d68:	0ad2      	lsrs	r2, r2, #11
 8002d6a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8002d6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8002d72:	fba0 6202 	umull	r6, r2, r0, r2
 8002d76:	684e      	ldr	r6, [r1, #4]
 8002d78:	eb06 1252 	add.w	r2, r6, r2, lsr #5
 8002d7c:	604a      	str	r2, [r1, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002d7e:	682a      	ldr	r2, [r5, #0]
 8002d80:	8824      	ldrh	r4, [r4, #0]
 8002d82:	0912      	lsrs	r2, r2, #4
 8002d84:	b224      	sxth	r4, r4
 8002d86:	fb04 f202 	mul.w	r2, r4, r2
 8002d8a:	fba3 4302 	umull	r4, r3, r3, r2
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	calibrating--;
 8002d94:	4c17      	ldr	r4, [pc, #92]	; (8002df4 <ADC_CAL+0xf8>)
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002d96:	0adb      	lsrs	r3, r3, #11
 8002d98:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	calibrating--;
 8002d9c:	8822      	ldrh	r2, [r4, #0]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002d9e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8002da2:	fba0 0303 	umull	r0, r3, r0, r3
 8002da6:	6888      	ldr	r0, [r1, #8]
	calibrating--;
 8002da8:	3a01      	subs	r2, #1
 8002daa:	b292      	uxth	r2, r2
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002dac:	eb00 1353 	add.w	r3, r0, r3, lsr #5
	calibrating--;
 8002db0:	8022      	strh	r2, [r4, #0]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002db2:	608b      	str	r3, [r1, #8]

	if(!calibrating){
 8002db4:	b982      	cbnz	r2, 8002dd8 <ADC_CAL+0xdc>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8002db6:	680b      	ldr	r3, [r1, #0]
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <ADC_CAL+0xfc>)
 8002dba:	4810      	ldr	r0, [pc, #64]	; (8002dfc <ADC_CAL+0x100>)
 8002dbc:	fba2 4303 	umull	r4, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	6003      	str	r3, [r0, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8002dc4:	684b      	ldr	r3, [r1, #4]
 8002dc6:	fba2 4303 	umull	r4, r3, r2, r3
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	6043      	str	r3, [r0, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8002dce:	688b      	ldr	r3, [r1, #8]
 8002dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	6083      	str	r3, [r0, #8]
	}
}
 8002dd8:	bc70      	pop	{r4, r5, r6}
 8002dda:	4770      	bx	lr
 8002ddc:	20000530 	.word	0x20000530
 8002de0:	20001840 	.word	0x20001840
 8002de4:	200017f4 	.word	0x200017f4
 8002de8:	20001834 	.word	0x20001834
 8002dec:	00100101 	.word	0x00100101
 8002df0:	51eb851f 	.word	0x51eb851f
 8002df4:	20001860 	.word	0x20001860
 8002df8:	10624dd3 	.word	0x10624dd3
 8002dfc:	20001828 	.word	0x20001828

08002e00 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8002e00:	b538      	push	{r3, r4, r5, lr}
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;

	Curent_IRQ_callback = __IRQ_callback;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <current_init+0x30>)

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);


	HAL_DAC_Init(&hdac1);
 8002e04:	4c0b      	ldr	r4, [pc, #44]	; (8002e34 <current_init+0x34>)
	calibrating = number_of_calibration_points;
 8002e06:	4d0c      	ldr	r5, [pc, #48]	; (8002e38 <current_init+0x38>)
	Curent_IRQ_callback = __IRQ_callback;
 8002e08:	6018      	str	r0, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8002e0a:	490c      	ldr	r1, [pc, #48]	; (8002e3c <current_init+0x3c>)
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <current_init+0x40>)
	calibrating = number_of_calibration_points;
 8002e0e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8002e12:	2208      	movs	r2, #8
	calibrating = number_of_calibration_points;
 8002e14:	f8a5 c000 	strh.w	ip, [r5]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8002e18:	f002 f9aa 	bl	8005170 <HAL_ADC_Start_DMA>
	HAL_DAC_Init(&hdac1);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f002 fb27 	bl	8005470 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8002e22:	4620      	mov	r0, r4
 8002e24:	2100      	movs	r1, #0
}
 8002e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8002e2a:	f002 bb37 	b.w	800549c <HAL_DAC_Start>
 8002e2e:	bf00      	nop
 8002e30:	200017f0 	.word	0x200017f0
 8002e34:	20001a8c 	.word	0x20001a8c
 8002e38:	20001860 	.word	0x20001860
 8002e3c:	20001840 	.word	0x20001840
 8002e40:	200018cc 	.word	0x200018cc

08002e44 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
	VT_IRQ_callback = __IRQ_callback;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <voltage_temperature_init+0x18>)

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8002e46:	4906      	ldr	r1, [pc, #24]	; (8002e60 <voltage_temperature_init+0x1c>)
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8002e48:	b410      	push	{r4}
 8002e4a:	4604      	mov	r4, r0
	VT_IRQ_callback = __IRQ_callback;
 8002e4c:	601c      	str	r4, [r3, #0]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <voltage_temperature_init+0x20>)
}
 8002e50:	f85d 4b04 	ldr.w	r4, [sp], #4
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8002e54:	2208      	movs	r2, #8
 8002e56:	f002 b98b 	b.w	8005170 <HAL_ADC_Start_DMA>
 8002e5a:	bf00      	nop
 8002e5c:	200017f8 	.word	0x200017f8
 8002e60:	200017fc 	.word	0x200017fc
 8002e64:	20001938 	.word	0x20001938

08002e68 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
	if (hadc == &hadc1){
 8002e68:	4b61      	ldr	r3, [pc, #388]	; (8002ff0 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8002e6a:	4298      	cmp	r0, r3
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e70:	4604      	mov	r4, r0
	if (hadc == &hadc1){
 8002e72:	d005      	beq.n	8002e80 <HAL_ADC_ConvHalfCpltCallback+0x18>
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
//			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
			Curent_IRQ_callback(&data);
		}
	}
	if (hadc == &hadc2){
 8002e74:	4b5f      	ldr	r3, [pc, #380]	; (8002ff4 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8002e76:	429c      	cmp	r4, r3
 8002e78:	f000 8081 	beq.w	8002f7e <HAL_ADC_ConvHalfCpltCallback+0x116>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
		VT_IRQ_callback(&VT_data);
	}
}
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(calibrating)ADC_CAL();
 8002e80:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 80af 	bne.w	8002fe8 <HAL_ADC_ConvHalfCpltCallback+0x180>
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8002e8c:	4e5c      	ldr	r6, [pc, #368]	; (8003000 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68f2      	ldr	r2, [r6, #12]
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	4d5b      	ldr	r5, [pc, #364]	; (8003004 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002e96:	485c      	ldr	r0, [pc, #368]	; (8003008 <HAL_ADC_ConvHalfCpltCallback+0x1a0>)
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002e98:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	0912      	lsrs	r2, r2, #4
 8002ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	802b      	strh	r3, [r5, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002eaa:	6801      	ldr	r1, [r0, #0]
 8002eac:	68b3      	ldr	r3, [r6, #8]
 8002eae:	882f      	ldrh	r7, [r5, #0]
 8002eb0:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bfb8      	it	lt
 8002eb6:	330f      	addlt	r3, #15
 8002eb8:	b23f      	sxth	r7, r7
 8002eba:	111b      	asrs	r3, r3, #4
 8002ebc:	fb07 f303 	mul.w	r3, r7, r3
 8002ec0:	4f53      	ldr	r7, [pc, #332]	; (8003010 <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
 8002ec2:	fb87 c703 	smull	ip, r7, r7, r3
 8002ec6:	441f      	add	r7, r3
 8002ec8:	17db      	asrs	r3, r3, #31
 8002eca:	ebc3 23e7 	rsb	r3, r3, r7, asr #11
 8002ece:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002ed2:	4f50      	ldr	r7, [pc, #320]	; (8003014 <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8002ed4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8002ed8:	fb87 c703 	smull	ip, r7, r7, r3
 8002edc:	17db      	asrs	r3, r3, #31
 8002ede:	eba3 1367 	sub.w	r3, r3, r7, asr #5
 8002ee2:	440b      	add	r3, r1
 8002ee4:	2132      	movs	r1, #50	; 0x32
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002ee6:	6847      	ldr	r7, [r0, #4]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002eec:	6871      	ldr	r1, [r6, #4]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8002eee:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	882b      	ldrh	r3, [r5, #0]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002ef4:	6880      	ldr	r0, [r0, #8]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002ef6:	bfb8      	it	lt
 8002ef8:	310f      	addlt	r1, #15
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	1109      	asrs	r1, r1, #4
 8002efe:	fb03 f101 	mul.w	r1, r3, r1
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f02:	6833      	ldr	r3, [r6, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f04:	4e42      	ldr	r6, [pc, #264]	; (8003010 <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f06:	882d      	ldrh	r5, [r5, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f08:	fb86 c601 	smull	ip, r6, r6, r1
 8002f0c:	440e      	add	r6, r1
 8002f0e:	17c9      	asrs	r1, r1, #31
 8002f10:	ebc1 21e6 	rsb	r1, r1, r6, asr #11
 8002f14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002f18:	4e3e      	ldr	r6, [pc, #248]	; (8003014 <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8002f1a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8002f1e:	fb86 c601 	smull	ip, r6, r6, r1
 8002f22:	17c9      	asrs	r1, r1, #31
 8002f24:	eba1 1166 	sub.w	r1, r1, r6, asr #5
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f28:	2b00      	cmp	r3, #0
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f2a:	4439      	add	r1, r7
 8002f2c:	f04f 0632 	mov.w	r6, #50	; 0x32
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f30:	bfb8      	it	lt
 8002f32:	330f      	addlt	r3, #15
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f34:	fb06 f101 	mul.w	r1, r6, r1
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f38:	b22d      	sxth	r5, r5
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8002f3a:	6051      	str	r1, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f3c:	111b      	asrs	r3, r3, #4
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <HAL_ADC_ConvHalfCpltCallback+0x1a8>)
 8002f40:	fb05 f303 	mul.w	r3, r5, r3
 8002f44:	fb81 5103 	smull	r5, r1, r1, r3
 8002f48:	4419      	add	r1, r3
 8002f4a:	17db      	asrs	r3, r3, #31
 8002f4c:	ebc3 23e1 	rsb	r3, r3, r1, asr #11
 8002f50:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002f54:	492f      	ldr	r1, [pc, #188]	; (8003014 <HAL_ADC_ConvHalfCpltCallback+0x1ac>)
 8002f56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8002f5a:	fb81 5103 	smull	r5, r1, r1, r3
 8002f5e:	17db      	asrs	r3, r3, #31
 8002f60:	eba3 1361 	sub.w	r3, r3, r1, asr #5
 8002f64:	4403      	add	r3, r0
			Curent_IRQ_callback(&data);
 8002f66:	492c      	ldr	r1, [pc, #176]	; (8003018 <HAL_ADC_ConvHalfCpltCallback+0x1b0>)
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8002f68:	2032      	movs	r0, #50	; 0x32
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	6093      	str	r3, [r2, #8]
			Curent_IRQ_callback(&data);
 8002f70:	6809      	ldr	r1, [r1, #0]
 8002f72:	4826      	ldr	r0, [pc, #152]	; (800300c <HAL_ADC_ConvHalfCpltCallback+0x1a4>)
 8002f74:	4788      	blx	r1
	if (hadc == &hadc2){
 8002f76:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8002f78:	429c      	cmp	r4, r3
 8002f7a:	f47f af7f 	bne.w	8002e7c <HAL_ADC_ConvHalfCpltCallback+0x14>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002f7e:	4e27      	ldr	r6, [pc, #156]	; (800301c <HAL_ADC_ConvHalfCpltCallback+0x1b4>)
 8002f80:	4c20      	ldr	r4, [pc, #128]	; (8003004 <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8002f82:	6873      	ldr	r3, [r6, #4]
 8002f84:	8822      	ldrh	r2, [r4, #0]
 8002f86:	4926      	ldr	r1, [pc, #152]	; (8003020 <HAL_ADC_ConvHalfCpltCallback+0x1b8>)
 8002f88:	4826      	ldr	r0, [pc, #152]	; (8003024 <HAL_ADC_ConvHalfCpltCallback+0x1bc>)
 8002f8a:	b212      	sxth	r2, r2
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	fba1 5203 	umull	r5, r2, r1, r3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8002f9c:	0ad2      	lsrs	r2, r2, #11
 8002f9e:	8102      	strh	r2, [r0, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fa0:	68b2      	ldr	r2, [r6, #8]
 8002fa2:	8825      	ldrh	r5, [r4, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fa4:	68f3      	ldr	r3, [r6, #12]
 8002fa6:	8824      	ldrh	r4, [r4, #0]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fa8:	b22d      	sxth	r5, r5
 8002faa:	0912      	lsrs	r2, r2, #4
 8002fac:	fb05 f202 	mul.w	r2, r5, r2
 8002fb0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fb4:	b224      	sxth	r4, r4
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fb6:	0052      	lsls	r2, r2, #1
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	fb04 f303 	mul.w	r3, r4, r3
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fbe:	fba1 4102 	umull	r4, r1, r1, r2
 8002fc2:	1a52      	subs	r2, r2, r1
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fc4:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fc8:	eb01 0152 	add.w	r1, r1, r2, lsr #1
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fcc:	4a16      	ldr	r2, [pc, #88]	; (8003028 <HAL_ADC_ConvHalfCpltCallback+0x1c0>)
 8002fce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
		VT_IRQ_callback(&VT_data);
 8002fd6:	4c15      	ldr	r4, [pc, #84]	; (800302c <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fd8:	0ac9      	lsrs	r1, r1, #11
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fda:	0bdb      	lsrs	r3, r3, #15
		VT_IRQ_callback(&VT_data);
 8002fdc:	6822      	ldr	r2, [r4, #0]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002fde:	6001      	str	r1, [r0, #0]
}
 8002fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002fe4:	8083      	strh	r3, [r0, #4]
		VT_IRQ_callback(&VT_data);
 8002fe6:	4710      	bx	r2
		if(calibrating)ADC_CAL();
 8002fe8:	f7ff fe88 	bl	8002cfc <ADC_CAL>
 8002fec:	e742      	b.n	8002e74 <HAL_ADC_ConvHalfCpltCallback+0xc>
 8002fee:	bf00      	nop
 8002ff0:	200018cc 	.word	0x200018cc
 8002ff4:	20001938 	.word	0x20001938
 8002ff8:	20001860 	.word	0x20001860
 8002ffc:	20000530 	.word	0x20000530
 8003000:	20001840 	.word	0x20001840
 8003004:	200017f4 	.word	0x200017f4
 8003008:	20001828 	.word	0x20001828
 800300c:	20001864 	.word	0x20001864
 8003010:	80080081 	.word	0x80080081
 8003014:	51eb851f 	.word	0x51eb851f
 8003018:	200017f0 	.word	0x200017f0
 800301c:	200017fc 	.word	0x200017fc
 8003020:	00100101 	.word	0x00100101
 8003024:	2000181c 	.word	0x2000181c
 8003028:	ccd99a67 	.word	0xccd99a67
 800302c:	200017f8 	.word	0x200017f8

08003030 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
	if (hadc == &hadc1 && !calibrating){
 8003030:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <HAL_ADC_ConvCpltCallback+0x180>)
 8003032:	4298      	cmp	r0, r3
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003038:	4604      	mov	r4, r0
	if (hadc == &hadc1 && !calibrating){
 800303a:	d004      	beq.n	8003046 <HAL_ADC_ConvCpltCallback+0x16>
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
	}
	if (hadc == &hadc2){
 800303c:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800303e:	429c      	cmp	r4, r3
 8003040:	d07e      	beq.n	8003140 <HAL_ADC_ConvCpltCallback+0x110>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
		VT_IRQ_callback(&VT_data);
	}
}
 8003042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (hadc == &hadc1 && !calibrating){
 8003046:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_ADC_ConvCpltCallback+0x188>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f6      	bne.n	800303c <HAL_ADC_ConvCpltCallback+0xc>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_ADC_ConvCpltCallback+0x18c>)
 8003050:	4e5b      	ldr	r6, [pc, #364]	; (80031c0 <HAL_ADC_ConvCpltCallback+0x190>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69f2      	ldr	r2, [r6, #28]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	4d5a      	ldr	r5, [pc, #360]	; (80031c4 <HAL_ADC_ConvCpltCallback+0x194>)
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800305a:	485b      	ldr	r0, [pc, #364]	; (80031c8 <HAL_ADC_ConvCpltCallback+0x198>)
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800305c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	0912      	lsrs	r2, r2, #4
 8003066:	fbb3 f3f2 	udiv	r3, r3, r2
 800306a:	b21b      	sxth	r3, r3
 800306c:	802b      	strh	r3, [r5, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800306e:	6801      	ldr	r1, [r0, #0]
 8003070:	69b3      	ldr	r3, [r6, #24]
 8003072:	882f      	ldrh	r7, [r5, #0]
 8003074:	4a55      	ldr	r2, [pc, #340]	; (80031cc <HAL_ADC_ConvCpltCallback+0x19c>)
 8003076:	2b00      	cmp	r3, #0
 8003078:	bfb8      	it	lt
 800307a:	330f      	addlt	r3, #15
 800307c:	b23f      	sxth	r7, r7
 800307e:	111b      	asrs	r3, r3, #4
 8003080:	fb07 f303 	mul.w	r3, r7, r3
 8003084:	4f52      	ldr	r7, [pc, #328]	; (80031d0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8003086:	fb87 c703 	smull	ip, r7, r7, r3
 800308a:	441f      	add	r7, r3
 800308c:	17db      	asrs	r3, r3, #31
 800308e:	ebc3 23e7 	rsb	r3, r3, r7, asr #11
 8003092:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003096:	4f4f      	ldr	r7, [pc, #316]	; (80031d4 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8003098:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800309c:	fb87 c703 	smull	ip, r7, r7, r3
 80030a0:	17db      	asrs	r3, r3, #31
 80030a2:	eba3 1367 	sub.w	r3, r3, r7, asr #5
 80030a6:	440b      	add	r3, r1
 80030a8:	2132      	movs	r1, #50	; 0x32
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030aa:	6847      	ldr	r7, [r0, #4]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030b0:	6971      	ldr	r1, [r6, #20]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 80030b2:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030b4:	2900      	cmp	r1, #0
 80030b6:	882b      	ldrh	r3, [r5, #0]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030b8:	6880      	ldr	r0, [r0, #8]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030ba:	bfb8      	it	lt
 80030bc:	310f      	addlt	r1, #15
 80030be:	b21b      	sxth	r3, r3
 80030c0:	1109      	asrs	r1, r1, #4
 80030c2:	fb03 f101 	mul.w	r1, r3, r1
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030c6:	6933      	ldr	r3, [r6, #16]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030c8:	4e41      	ldr	r6, [pc, #260]	; (80031d0 <HAL_ADC_ConvCpltCallback+0x1a0>)
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030ca:	882d      	ldrh	r5, [r5, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030cc:	fb86 c601 	smull	ip, r6, r6, r1
 80030d0:	440e      	add	r6, r1
 80030d2:	17c9      	asrs	r1, r1, #31
 80030d4:	ebc1 21e6 	rsb	r1, r1, r6, asr #11
 80030d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80030dc:	4e3d      	ldr	r6, [pc, #244]	; (80031d4 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80030de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80030e2:	fb86 c601 	smull	ip, r6, r6, r1
 80030e6:	17c9      	asrs	r1, r1, #31
 80030e8:	eba1 1166 	sub.w	r1, r1, r6, asr #5
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030ec:	2b00      	cmp	r3, #0
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030ee:	4439      	add	r1, r7
 80030f0:	f04f 0632 	mov.w	r6, #50	; 0x32
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030f4:	bfb8      	it	lt
 80030f6:	330f      	addlt	r3, #15
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030f8:	fb06 f101 	mul.w	r1, r6, r1
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80030fc:	b22d      	sxth	r5, r5
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80030fe:	6051      	str	r1, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003100:	111b      	asrs	r3, r3, #4
 8003102:	4933      	ldr	r1, [pc, #204]	; (80031d0 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8003104:	fb05 f303 	mul.w	r3, r5, r3
 8003108:	fb81 5103 	smull	r5, r1, r1, r3
 800310c:	4419      	add	r1, r3
 800310e:	17db      	asrs	r3, r3, #31
 8003110:	ebc3 23e1 	rsb	r3, r3, r1, asr #11
 8003114:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003118:	492e      	ldr	r1, [pc, #184]	; (80031d4 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800311a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800311e:	fb81 5103 	smull	r5, r1, r1, r3
 8003122:	17db      	asrs	r3, r3, #31
 8003124:	eba3 1361 	sub.w	r3, r3, r1, asr #5
 8003128:	4403      	add	r3, r0
		Curent_IRQ_callback(&data);
 800312a:	492b      	ldr	r1, [pc, #172]	; (80031d8 <HAL_ADC_ConvCpltCallback+0x1a8>)
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 800312c:	2032      	movs	r0, #50	; 0x32
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	6093      	str	r3, [r2, #8]
		Curent_IRQ_callback(&data);
 8003134:	6809      	ldr	r1, [r1, #0]
 8003136:	4825      	ldr	r0, [pc, #148]	; (80031cc <HAL_ADC_ConvCpltCallback+0x19c>)
 8003138:	4788      	blx	r1
	if (hadc == &hadc2){
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_ADC_ConvCpltCallback+0x184>)
 800313c:	429c      	cmp	r4, r3
 800313e:	d180      	bne.n	8003042 <HAL_ADC_ConvCpltCallback+0x12>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003140:	4926      	ldr	r1, [pc, #152]	; (80031dc <HAL_ADC_ConvCpltCallback+0x1ac>)
 8003142:	4d20      	ldr	r5, [pc, #128]	; (80031c4 <HAL_ADC_ConvCpltCallback+0x194>)
 8003144:	694c      	ldr	r4, [r1, #20]
 8003146:	882b      	ldrh	r3, [r5, #0]
 8003148:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_ADC_ConvCpltCallback+0x1b0>)
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 800314a:	4826      	ldr	r0, [pc, #152]	; (80031e4 <HAL_ADC_ConvCpltCallback+0x1b4>)
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 800314c:	b21b      	sxth	r3, r3
 800314e:	0924      	lsrs	r4, r4, #4
 8003150:	fb03 f404 	mul.w	r4, r3, r4
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003154:	698b      	ldr	r3, [r1, #24]
 8003156:	882e      	ldrh	r6, [r5, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003158:	69c9      	ldr	r1, [r1, #28]
 800315a:	882d      	ldrh	r5, [r5, #0]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 800315c:	b236      	sxth	r6, r6
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	fb06 f303 	mul.w	r3, r6, r3
 8003164:	eb03 1303 	add.w	r3, r3, r3, lsl #4
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003168:	0909      	lsrs	r1, r1, #4
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 800316a:	005b      	lsls	r3, r3, #1
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 800316c:	b22d      	sxth	r5, r5
 800316e:	fb01 f505 	mul.w	r5, r1, r5
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003172:	fba2 6104 	umull	r6, r1, r2, r4
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003176:	fba2 6203 	umull	r6, r2, r2, r3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8003180:	0ad2      	lsrs	r2, r2, #11
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003182:	1a64      	subs	r4, r4, r1
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003184:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003188:	6002      	str	r2, [r0, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_ADC_ConvCpltCallback+0x1b8>)
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 800318c:	eb01 0154 	add.w	r1, r1, r4, lsr #1
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003190:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003194:	0ac9      	lsrs	r1, r1, #11
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0bdb      	lsrs	r3, r3, #15
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 800319c:	8101      	strh	r1, [r0, #8]
		VT_IRQ_callback(&VT_data);
 800319e:	4913      	ldr	r1, [pc, #76]	; (80031ec <HAL_ADC_ConvCpltCallback+0x1bc>)
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80031a0:	8083      	strh	r3, [r0, #4]
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		VT_IRQ_callback(&VT_data);
 80031a8:	680a      	ldr	r2, [r1, #0]
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 80031aa:	80c3      	strh	r3, [r0, #6]
		VT_IRQ_callback(&VT_data);
 80031ac:	4710      	bx	r2
 80031ae:	bf00      	nop
 80031b0:	200018cc 	.word	0x200018cc
 80031b4:	20001938 	.word	0x20001938
 80031b8:	20001860 	.word	0x20001860
 80031bc:	20000530 	.word	0x20000530
 80031c0:	20001840 	.word	0x20001840
 80031c4:	200017f4 	.word	0x200017f4
 80031c8:	20001828 	.word	0x20001828
 80031cc:	20001864 	.word	0x20001864
 80031d0:	80080081 	.word	0x80080081
 80031d4:	51eb851f 	.word	0x51eb851f
 80031d8:	200017f0 	.word	0x200017f0
 80031dc:	200017fc 	.word	0x200017fc
 80031e0:	00100101 	.word	0x00100101
 80031e4:	2000181c 	.word	0x2000181c
 80031e8:	ccd99a67 	.word	0xccd99a67
 80031ec:	200017f8 	.word	0x200017f8

080031f0 <dq0>:

void dq0(float theta, float a, float b, float c, float *d, float *q){
 80031f0:	b530      	push	{r4, r5, lr}
 80031f2:	ed2d 8b04 	vpush	{d8-d9}
 80031f6:	b083      	sub	sp, #12
 80031f8:	4605      	mov	r5, r0
 80031fa:	460c      	mov	r4, r1
//	float cf = cos(theta);
//	float sf = sin(theta);

	float cf;
	float sf;
	RunCordic2(theta, &cf, &sf);
 80031fc:	4668      	mov	r0, sp
 80031fe:	a901      	add	r1, sp, #4
void dq0(float theta, float a, float b, float c, float *d, float *q){
 8003200:	eeb0 8a60 	vmov.f32	s16, s1
 8003204:	eef0 8a41 	vmov.f32	s17, s2
 8003208:	eeb0 9a61 	vmov.f32	s18, s3
	RunCordic2(theta, &cf, &sf);
 800320c:	f7fe fd28 	bl	8001c60 <RunCordic2>

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8003210:	ed9d 5a00 	vldr	s10, [sp]
 8003214:	ed9f 4a17 	vldr	s8, [pc, #92]	; 8003274 <dq0+0x84>
 8003218:	eddd 6a01 	vldr	s13, [sp, #4]
 800321c:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8003220:	ee65 5a24 	vmul.f32	s11, s10, s9
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8003224:	ee25 6a04 	vmul.f32	s12, s10, s8
 8003228:	eeb0 7a65 	vmov.f32	s14, s11
 800322c:	eef0 7a46 	vmov.f32	s15, s12
 8003230:	eea6 7a84 	vfma.f32	s14, s13, s8
 8003234:	eed6 7aa4 	vfnms.f32	s15, s13, s9
 8003238:	eea6 6aa4 	vfma.f32	s12, s13, s9
    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800323c:	eed6 5a84 	vfnms.f32	s11, s13, s8
 8003240:	ee27 7a49 	vnmul.f32	s14, s14, s18
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8003244:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003248:	eea5 7aa8 	vfma.f32	s14, s11, s17
 800324c:	eee6 7a28 	vfma.f32	s15, s12, s17
    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8003250:	eea5 7a08 	vfma.f32	s14, s10, s16
 8003254:	eee6 7ac8 	vfms.f32	s15, s13, s16
 8003258:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8003278 <dq0+0x88>
 800325c:	ee27 7a06 	vmul.f32	s14, s14, s12
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8003260:	ee67 7a86 	vmul.f32	s15, s15, s12
    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8003264:	ed85 7a00 	vstr	s14, [r5]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8003268:	edc4 7a00 	vstr	s15, [r4]
    }
 800326c:	b003      	add	sp, #12
 800326e:	ecbd 8b04 	vpop	{d8-d9}
 8003272:	bd30      	pop	{r4, r5, pc}
 8003274:	3f5db3d7 	.word	0x3f5db3d7
 8003278:	3f2aaaab 	.word	0x3f2aaaab

0800327c <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800327c:	b510      	push	{r4, lr}
 800327e:	4604      	mov	r4, r0
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8003280:	f002 fcea 	bl	8005c58 <HAL_FDCAN_Start>
 8003284:	b108      	cbz	r0, 800328a <FDCAN_Start+0xe>
  {
    return FDCAN_STATUS_ERROR;
 8003286:	2001      	movs	r0, #1
  {
    return FDCAN_STATUS_ERROR;
  }

  return FDCAN_STATUS_OK;
}
 8003288:	bd10      	pop	{r4, pc}
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800328a:	4602      	mov	r2, r0
 800328c:	2101      	movs	r1, #1
 800328e:	4620      	mov	r0, r4
 8003290:	f002 fde4 	bl	8005e5c <HAL_FDCAN_ActivateNotification>
 8003294:	3800      	subs	r0, #0
 8003296:	bf18      	it	ne
 8003298:	2001      	movne	r0, #1
}
 800329a:	bd10      	pop	{r4, pc}

0800329c <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 800329c:	b430      	push	{r4, r5}
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 800329e:	4c20      	ldr	r4, [pc, #128]	; (8003320 <FDCAN_addCallback+0x84>)
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	2b09      	cmp	r3, #9
 80032a4:	d839      	bhi.n	800331a <FDCAN_addCallback+0x7e>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032a6:	481f      	ldr	r0, [pc, #124]	; (8003324 <FDCAN_addCallback+0x88>)
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032a8:	b353      	cbz	r3, 8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032aa:	6845      	ldr	r5, [r0, #4]
 80032ac:	42a9      	cmp	r1, r5
 80032ae:	d031      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d025      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032b4:	68c5      	ldr	r5, [r0, #12]
 80032b6:	42a9      	cmp	r1, r5
 80032b8:	d02c      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d020      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032be:	6945      	ldr	r5, [r0, #20]
 80032c0:	42a9      	cmp	r1, r5
 80032c2:	d027      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d01b      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032c8:	69c5      	ldr	r5, [r0, #28]
 80032ca:	42a9      	cmp	r1, r5
 80032cc:	d022      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d016      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80032d4:	42a9      	cmp	r1, r5
 80032d6:	d01d      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d011      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032dc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80032de:	42a9      	cmp	r1, r5
 80032e0:	d018      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d00c      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032e6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80032e8:	42a9      	cmp	r1, r5
 80032ea:	d013      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	d007      	beq.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032f0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80032f2:	42a9      	cmp	r1, r5
 80032f4:	d00e      	beq.n	8003314 <FDCAN_addCallback+0x78>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	d102      	bne.n	8003300 <FDCAN_addCallback+0x64>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 80032fa:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80032fc:	428d      	cmp	r5, r1
 80032fe:	d009      	beq.n	8003314 <FDCAN_addCallback+0x78>
          return FDCAN_STATUS_ERROR;
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8003300:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
 8003304:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8003308:	3301      	adds	r3, #1
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 800330a:	6041      	str	r1, [r0, #4]
  FDCAN_listCallbacksCount++;
 800330c:	6023      	str	r3, [r4, #0]

  return FDCAN_STATUS_OK;
 800330e:	2000      	movs	r0, #0
}
 8003310:	bc30      	pop	{r4, r5}
 8003312:	4770      	bx	lr
          return FDCAN_STATUS_ERROR;
 8003314:	2001      	movs	r0, #1
}
 8003316:	bc30      	pop	{r4, r5}
 8003318:	4770      	bx	lr
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 800331a:	2003      	movs	r0, #3
}
 800331c:	bc30      	pop	{r4, r5}
 800331e:	4770      	bx	lr
 8003320:	200018c4 	.word	0x200018c4
 8003324:	20001874 	.word	0x20001874

08003328 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8003328:	b510      	push	{r4, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800332c:	2300      	movs	r3, #0
  TxHeader.Identifier = identifier;
 800332e:	9101      	str	r1, [sp, #4]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8003330:	f44f 2470 	mov.w	r4, #983040	; 0xf0000

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8003334:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003338:	e9cd 3105 	strd	r3, r1, [sp, #20]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800333c:	9404      	str	r4, [sp, #16]

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 800333e:	a901      	add	r1, sp, #4
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8003340:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003344:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003348:	e9cd 4307 	strd	r4, r3, [sp, #28]
  TxHeader.MessageMarker = 0;
 800334c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 800334e:	f002 fc9b 	bl	8005c88 <HAL_FDCAN_AddMessageToTxFifoQ>
  {
    return FDCAN_STATUS_ERROR;
  }

  return FDCAN_STATUS_OK;
}
 8003352:	3800      	subs	r0, #0
 8003354:	bf18      	it	ne
 8003356:	2001      	movne	r0, #1
 8003358:	b00a      	add	sp, #40	; 0x28
 800335a:	bd10      	pop	{r4, pc}

0800335c <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800335c:	b530      	push	{r4, r5, lr}
 800335e:	b09b      	sub	sp, #108	; 0x6c
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003360:	ab0a      	add	r3, sp, #40	; 0x28
 8003362:	466a      	mov	r2, sp
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	f002 fcf5 	bl	8005d54 <HAL_FDCAN_GetRxMessage>
 800336a:	2800      	cmp	r0, #0
 800336c:	d162      	bne.n	8003434 <HAL_FDCAN_RxFifo0Callback+0xd8>
  {
    Error_Handler();
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800336e:	4d39      	ldr	r5, [pc, #228]	; (8003454 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d052      	beq.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8003376:	4c38      	ldr	r4, [pc, #224]	; (8003458 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 8003378:	9a00      	ldr	r2, [sp, #0]
 800337a:	6861      	ldr	r1, [r4, #4]
 800337c:	4291      	cmp	r1, r2
 800337e:	d103      	bne.n	8003388 <HAL_FDCAN_RxFifo0Callback+0x2c>
          FDCAN_listCallbacks[i].fp(RxData);
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	a80a      	add	r0, sp, #40	; 0x28
 8003384:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003386:	682b      	ldr	r3, [r5, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d947      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 800338c:	68e1      	ldr	r1, [r4, #12]
 800338e:	9a00      	ldr	r2, [sp, #0]
 8003390:	4291      	cmp	r1, r2
 8003392:	d103      	bne.n	800339c <HAL_FDCAN_RxFifo0Callback+0x40>
          FDCAN_listCallbacks[i].fp(RxData);
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	a80a      	add	r0, sp, #40	; 0x28
 8003398:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d93d      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033a0:	6961      	ldr	r1, [r4, #20]
 80033a2:	9a00      	ldr	r2, [sp, #0]
 80033a4:	4291      	cmp	r1, r2
 80033a6:	d03b      	beq.n	8003420 <HAL_FDCAN_RxFifo0Callback+0xc4>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d937      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033ac:	69e1      	ldr	r1, [r4, #28]
 80033ae:	9a00      	ldr	r2, [sp, #0]
 80033b0:	4291      	cmp	r1, r2
 80033b2:	d03a      	beq.n	800342a <HAL_FDCAN_RxFifo0Callback+0xce>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d931      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033ba:	9a00      	ldr	r2, [sp, #0]
 80033bc:	4291      	cmp	r1, r2
 80033be:	d03c      	beq.n	800343a <HAL_FDCAN_RxFifo0Callback+0xde>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d92b      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80033c6:	9a00      	ldr	r2, [sp, #0]
 80033c8:	4291      	cmp	r1, r2
 80033ca:	d103      	bne.n	80033d4 <HAL_FDCAN_RxFifo0Callback+0x78>
          FDCAN_listCallbacks[i].fp(RxData);
 80033cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033ce:	a80a      	add	r0, sp, #40	; 0x28
 80033d0:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033d2:	682b      	ldr	r3, [r5, #0]
 80033d4:	2b06      	cmp	r3, #6
 80033d6:	d921      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033da:	9a00      	ldr	r2, [sp, #0]
 80033dc:	4291      	cmp	r1, r2
 80033de:	d103      	bne.n	80033e8 <HAL_FDCAN_RxFifo0Callback+0x8c>
          FDCAN_listCallbacks[i].fp(RxData);
 80033e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e2:	a80a      	add	r0, sp, #40	; 0x28
 80033e4:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d917      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80033ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033ee:	9a00      	ldr	r2, [sp, #0]
 80033f0:	4291      	cmp	r1, r2
 80033f2:	d103      	bne.n	80033fc <HAL_FDCAN_RxFifo0Callback+0xa0>
          FDCAN_listCallbacks[i].fp(RxData);
 80033f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033f6:	a80a      	add	r0, sp, #40	; 0x28
 80033f8:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80033fa:	682b      	ldr	r3, [r5, #0]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d90d      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8003400:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003402:	9a00      	ldr	r2, [sp, #0]
 8003404:	4291      	cmp	r1, r2
 8003406:	d103      	bne.n	8003410 <HAL_FDCAN_RxFifo0Callback+0xb4>
          FDCAN_listCallbacks[i].fp(RxData);
 8003408:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800340a:	a80a      	add	r0, sp, #40	; 0x28
 800340c:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	2b09      	cmp	r3, #9
 8003412:	d903      	bls.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8003414:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003416:	9b00      	ldr	r3, [sp, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d015      	beq.n	8003448 <HAL_FDCAN_RxFifo0Callback+0xec>
      }
  }
}
 800341c:	b01b      	add	sp, #108	; 0x6c
 800341e:	bd30      	pop	{r4, r5, pc}
          FDCAN_listCallbacks[i].fp(RxData);
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	a80a      	add	r0, sp, #40	; 0x28
 8003424:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	e7be      	b.n	80033a8 <HAL_FDCAN_RxFifo0Callback+0x4c>
          FDCAN_listCallbacks[i].fp(RxData);
 800342a:	69a3      	ldr	r3, [r4, #24]
 800342c:	a80a      	add	r0, sp, #40	; 0x28
 800342e:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	e7bf      	b.n	80033b4 <HAL_FDCAN_RxFifo0Callback+0x58>
    Error_Handler();
 8003434:	f000 fc88 	bl	8003d48 <Error_Handler>
 8003438:	e799      	b.n	800336e <HAL_FDCAN_RxFifo0Callback+0x12>
          FDCAN_listCallbacks[i].fp(RxData);
 800343a:	6a23      	ldr	r3, [r4, #32]
 800343c:	a80a      	add	r0, sp, #40	; 0x28
 800343e:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d8be      	bhi.n	80033c4 <HAL_FDCAN_RxFifo0Callback+0x68>
 8003446:	e7e9      	b.n	800341c <HAL_FDCAN_RxFifo0Callback+0xc0>
          FDCAN_listCallbacks[i].fp(RxData);
 8003448:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800344a:	a80a      	add	r0, sp, #40	; 0x28
 800344c:	4798      	blx	r3
}
 800344e:	b01b      	add	sp, #108	; 0x6c
 8003450:	bd30      	pop	{r4, r5, pc}
 8003452:	bf00      	nop
 8003454:	200018c4 	.word	0x200018c4
 8003458:	20001874 	.word	0x20001874

0800345c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800345c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800345e:	2400      	movs	r4, #0
{
 8003460:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8003462:	2220      	movs	r2, #32
 8003464:	4621      	mov	r1, r4
 8003466:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8003468:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800346c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800346e:	f006 fe47 	bl	800a100 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003472:	4838      	ldr	r0, [pc, #224]	; (8003554 <MX_ADC1_Init+0xf8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003478:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800347c:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003480:	2208      	movs	r2, #8
 8003482:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	8382      	strh	r2, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 4;
 800348a:	2204      	movs	r2, #4
 800348c:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800348e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003492:	2301      	movs	r3, #1
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003494:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8003496:	220c      	movs	r2, #12
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003498:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800349c:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034a0:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80034a4:	e9c0 2411 	strd	r2, r4, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80034a8:	e9c0 4313 	strd	r4, r3, [r0, #76]	; 0x4c
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ac:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80034b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034b8:	f001 f944 	bl	8004744 <HAL_ADC_Init>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d135      	bne.n	800352c <MX_ADC1_Init+0xd0>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034c0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034c2:	4824      	ldr	r0, [pc, #144]	; (8003554 <MX_ADC1_Init+0xf8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034c4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80034c6:	a901      	add	r1, sp, #4
 80034c8:	f001 fed4 	bl	8005274 <HAL_ADCEx_MultiModeConfigChannel>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d13d      	bne.n	800354c <MX_ADC1_Init+0xf0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <MX_ADC1_Init+0xfc>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034d2:	4820      	ldr	r0, [pc, #128]	; (8003554 <MX_ADC1_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80034d4:	2306      	movs	r3, #6
 80034d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80034da:	2103      	movs	r1, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80034dc:	237f      	movs	r3, #127	; 0x7f
 80034de:	e9cd 1306 	strd	r1, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80034e2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80034e4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034e6:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80034e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034ec:	f001 fb9e 	bl	8004c2c <HAL_ADC_ConfigChannel>
 80034f0:	bb48      	cbnz	r0, 8003546 <MX_ADC1_Init+0xea>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80034f2:	4a1a      	ldr	r2, [pc, #104]	; (800355c <MX_ADC1_Init+0x100>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034f4:	4817      	ldr	r0, [pc, #92]	; (8003554 <MX_ADC1_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034f6:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034f8:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80034fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034fe:	f001 fb95 	bl	8004c2c <HAL_ADC_ConfigChannel>
 8003502:	b9e8      	cbnz	r0, 8003540 <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <MX_ADC1_Init+0x104>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003506:	4813      	ldr	r0, [pc, #76]	; (8003554 <MX_ADC1_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003508:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800350a:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800350c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003510:	f001 fb8c 	bl	8004c2c <HAL_ADC_ConfigChannel>
 8003514:	b988      	cbnz	r0, 800353a <MX_ADC1_Init+0xde>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003516:	4a13      	ldr	r2, [pc, #76]	; (8003564 <MX_ADC1_Init+0x108>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003518:	480e      	ldr	r0, [pc, #56]	; (8003554 <MX_ADC1_Init+0xf8>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800351a:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800351c:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800351e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003522:	f001 fb83 	bl	8004c2c <HAL_ADC_ConfigChannel>
 8003526:	b920      	cbnz	r0, 8003532 <MX_ADC1_Init+0xd6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003528:	b00c      	add	sp, #48	; 0x30
 800352a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800352c:	f000 fc0c 	bl	8003d48 <Error_Handler>
 8003530:	e7c6      	b.n	80034c0 <MX_ADC1_Init+0x64>
    Error_Handler();
 8003532:	f000 fc09 	bl	8003d48 <Error_Handler>
}
 8003536:	b00c      	add	sp, #48	; 0x30
 8003538:	bd10      	pop	{r4, pc}
    Error_Handler();
 800353a:	f000 fc05 	bl	8003d48 <Error_Handler>
 800353e:	e7ea      	b.n	8003516 <MX_ADC1_Init+0xba>
    Error_Handler();
 8003540:	f000 fc02 	bl	8003d48 <Error_Handler>
 8003544:	e7de      	b.n	8003504 <MX_ADC1_Init+0xa8>
    Error_Handler();
 8003546:	f000 fbff 	bl	8003d48 <Error_Handler>
 800354a:	e7d2      	b.n	80034f2 <MX_ADC1_Init+0x96>
    Error_Handler();
 800354c:	f000 fbfc 	bl	8003d48 <Error_Handler>
 8003550:	e7be      	b.n	80034d0 <MX_ADC1_Init+0x74>
 8003552:	bf00      	nop
 8003554:	200018cc 	.word	0x200018cc
 8003558:	04300002 	.word	0x04300002
 800355c:	08600004 	.word	0x08600004
 8003560:	0c900008 	.word	0x0c900008
 8003564:	cb840000 	.word	0xcb840000

08003568 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003568:	b510      	push	{r4, lr}
 800356a:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800356c:	2220      	movs	r2, #32
 800356e:	2100      	movs	r1, #0
 8003570:	4668      	mov	r0, sp
 8003572:	f006 fdc5 	bl	800a100 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003576:	4832      	ldr	r0, [pc, #200]	; (8003640 <MX_ADC2_Init+0xd8>)
 8003578:	4c32      	ldr	r4, [pc, #200]	; (8003644 <MX_ADC2_Init+0xdc>)
 800357a:	6004      	str	r4, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800357c:	2104      	movs	r1, #4
 800357e:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.NbrOfConversion = 4;
 8003580:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003586:	2300      	movs	r3, #0
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003588:	2201      	movs	r2, #1
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800358a:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800358c:	210c      	movs	r1, #12
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800358e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003592:	e9c0 3213 	strd	r3, r2, [r0, #76]	; 0x4c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003596:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800359a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800359e:	e9c0 1311 	strd	r1, r3, [r0, #68]	; 0x44
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035a2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80035aa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.OversamplingMode = ENABLE;
 80035ae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035b2:	8383      	strh	r3, [r0, #28]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80035b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035b8:	6042      	str	r2, [r0, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035ba:	f001 f8c3 	bl	8004744 <HAL_ADC_Init>
 80035be:	bb78      	cbnz	r0, 8003620 <MX_ADC2_Init+0xb8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <MX_ADC2_Init+0xe0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035c2:	481f      	ldr	r0, [pc, #124]	; (8003640 <MX_ADC2_Init+0xd8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035c4:	2306      	movs	r3, #6
 80035c6:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80035ca:	2107      	movs	r1, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035cc:	237f      	movs	r3, #127	; 0x7f
 80035ce:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035d2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80035d4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035d6:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 80035d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035dc:	f001 fb26 	bl	8004c2c <HAL_ADC_ConfigChannel>
 80035e0:	bb58      	cbnz	r0, 800363a <MX_ADC2_Init+0xd2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80035e2:	491a      	ldr	r1, [pc, #104]	; (800364c <MX_ADC2_Init+0xe4>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035e4:	4816      	ldr	r0, [pc, #88]	; (8003640 <MX_ADC2_Init+0xd8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80035e6:	220c      	movs	r2, #12
 80035e8:	e9cd 1200 	strd	r1, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80035ec:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035ee:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80035f0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035f2:	f001 fb1b 	bl	8004c2c <HAL_ADC_ConfigChannel>
 80035f6:	b9e8      	cbnz	r0, 8003634 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <MX_ADC2_Init+0xe8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035fa:	4811      	ldr	r0, [pc, #68]	; (8003640 <MX_ADC2_Init+0xd8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80035fc:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035fe:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003600:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003604:	f001 fb12 	bl	8004c2c <HAL_ADC_ConfigChannel>
 8003608:	b988      	cbnz	r0, 800362e <MX_ADC2_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <MX_ADC2_Init+0xec>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <MX_ADC2_Init+0xd8>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800360e:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003610:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003612:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003616:	f001 fb09 	bl	8004c2c <HAL_ADC_ConfigChannel>
 800361a:	b920      	cbnz	r0, 8003626 <MX_ADC2_Init+0xbe>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800361c:	b008      	add	sp, #32
 800361e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003620:	f000 fb92 	bl	8003d48 <Error_Handler>
 8003624:	e7cc      	b.n	80035c0 <MX_ADC2_Init+0x58>
    Error_Handler();
 8003626:	f000 fb8f 	bl	8003d48 <Error_Handler>
}
 800362a:	b008      	add	sp, #32
 800362c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800362e:	f000 fb8b 	bl	8003d48 <Error_Handler>
 8003632:	e7ea      	b.n	800360a <MX_ADC2_Init+0xa2>
    Error_Handler();
 8003634:	f000 fb88 	bl	8003d48 <Error_Handler>
 8003638:	e7de      	b.n	80035f8 <MX_ADC2_Init+0x90>
    Error_Handler();
 800363a:	f000 fb85 	bl	8003d48 <Error_Handler>
 800363e:	e7d0      	b.n	80035e2 <MX_ADC2_Init+0x7a>
 8003640:	20001938 	.word	0x20001938
 8003644:	50000100 	.word	0x50000100
 8003648:	32601000 	.word	0x32601000
 800364c:	3ac04000 	.word	0x3ac04000
 8003650:	36902000 	.word	0x36902000
 8003654:	0c900008 	.word	0x0c900008

08003658 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	b09c      	sub	sp, #112	; 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003660:	2244      	movs	r2, #68	; 0x44
 8003662:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003668:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800366c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366e:	f006 fd47 	bl	800a100 <memset>
  if(adcHandle->Instance==ADC1)
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003678:	d004      	beq.n	8003684 <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 800367a:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_ADC_MspInit+0x1b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d055      	beq.n	800372c <HAL_ADC_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003680:	b01c      	add	sp, #112	; 0x70
 8003682:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003688:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800368e:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003690:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003692:	f003 fc69 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 8003696:	2800      	cmp	r0, #0
 8003698:	f040 80ad 	bne.w	80037f6 <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800369c:	4a5d      	ldr	r2, [pc, #372]	; (8003814 <HAL_ADC_MspInit+0x1bc>)
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036a2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036a6:	d109      	bne.n	80036bc <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036a8:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <HAL_ADC_MspInit+0x1c0>)
 80036aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036bc:	4b56      	ldr	r3, [pc, #344]	; (8003818 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc1.Instance = DMA1_Channel1;
 80036be:	4d57      	ldr	r5, [pc, #348]	; (800381c <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80036d2:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80036d8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80036dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f002 fef8 	bl	80064d8 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80036e8:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036ea:	622e      	str	r6, [r5, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80036ec:	2305      	movs	r3, #5
 80036ee:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036f2:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f8:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036fc:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003704:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003708:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800370c:	f002 f800 	bl	8005710 <HAL_DMA_Init>
 8003710:	2800      	cmp	r0, #0
 8003712:	d173      	bne.n	80037fc <HAL_ADC_MspInit+0x1a4>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003714:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003716:	6565      	str	r5, [r4, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003718:	4611      	mov	r1, r2
 800371a:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800371c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800371e:	f001 fe41 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003722:	2012      	movs	r0, #18
 8003724:	f001 fe7c 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 8003728:	b01c      	add	sp, #112	; 0x70
 800372a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800372c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003734:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003736:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003738:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800373a:	f003 fc15 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 800373e:	2800      	cmp	r0, #0
 8003740:	d15f      	bne.n	8003802 <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003742:	4a34      	ldr	r2, [pc, #208]	; (8003814 <HAL_ADC_MspInit+0x1bc>)
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003748:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800374a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800374c:	d109      	bne.n	8003762 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800374e:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_ADC_MspInit+0x1c0>)
 8003750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003756:	64da      	str	r2, [r3, #76]	; 0x4c
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800375e:	9303      	str	r3, [sp, #12]
 8003760:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc2.Instance = DMA1_Channel2;
 8003764:	4d2f      	ldr	r5, [pc, #188]	; (8003824 <HAL_ADC_MspInit+0x1cc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
 800376e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003770:	f002 0201 	and.w	r2, r2, #1
 8003774:	9204      	str	r2, [sp, #16]
 8003776:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377a:	f042 0202 	orr.w	r2, r2, #2
 800377e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2600      	movs	r6, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003788:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 800378a:	2260      	movs	r2, #96	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378c:	a906      	add	r1, sp, #24
 800378e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8003792:	2303      	movs	r3, #3
 8003794:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800379a:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f002 fe9c 	bl	80064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80037a0:	f640 0204 	movw	r2, #2052	; 0x804
 80037a4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	4820      	ldr	r0, [pc, #128]	; (8003828 <HAL_ADC_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a8:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80037ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b0:	f002 fe92 	bl	80064d8 <HAL_GPIO_Init>
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_ADC_MspInit+0x1d4>)
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80037b6:	622e      	str	r6, [r5, #32]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80037b8:	2324      	movs	r3, #36	; 0x24
 80037ba:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80037be:	2280      	movs	r2, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c4:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80037c8:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80037ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ce:	2320      	movs	r3, #32
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d0:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80037d4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80037d8:	f001 ff9a 	bl	8005710 <HAL_DMA_Init>
 80037dc:	b9a0      	cbnz	r0, 8003808 <HAL_ADC_MspInit+0x1b0>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80037e0:	6565      	str	r5, [r4, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80037e2:	4611      	mov	r1, r2
 80037e4:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80037e6:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80037e8:	f001 fddc 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80037ec:	2012      	movs	r0, #18
 80037ee:	f001 fe17 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 80037f2:	b01c      	add	sp, #112	; 0x70
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80037f6:	f000 faa7 	bl	8003d48 <Error_Handler>
 80037fa:	e74f      	b.n	800369c <HAL_ADC_MspInit+0x44>
      Error_Handler();
 80037fc:	f000 faa4 	bl	8003d48 <Error_Handler>
 8003800:	e788      	b.n	8003714 <HAL_ADC_MspInit+0xbc>
      Error_Handler();
 8003802:	f000 faa1 	bl	8003d48 <Error_Handler>
 8003806:	e79c      	b.n	8003742 <HAL_ADC_MspInit+0xea>
      Error_Handler();
 8003808:	f000 fa9e 	bl	8003d48 <Error_Handler>
 800380c:	e7e7      	b.n	80037de <HAL_ADC_MspInit+0x186>
 800380e:	bf00      	nop
 8003810:	50000100 	.word	0x50000100
 8003814:	200018c8 	.word	0x200018c8
 8003818:	40021000 	.word	0x40021000
 800381c:	200019a4 	.word	0x200019a4
 8003820:	40020008 	.word	0x40020008
 8003824:	20001a04 	.word	0x20001a04
 8003828:	48000400 	.word	0x48000400
 800382c:	4002001c 	.word	0x4002001c

08003830 <MX_CORDIC_Init>:
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003830:	4805      	ldr	r0, [pc, #20]	; (8003848 <MX_CORDIC_Init+0x18>)
{
 8003832:	b508      	push	{r3, lr}
  hcordic.Instance = CORDIC;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <MX_CORDIC_Init+0x1c>)
 8003836:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003838:	f001 fd88 	bl	800534c <HAL_CORDIC_Init>
 800383c:	b900      	cbnz	r0, 8003840 <MX_CORDIC_Init+0x10>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800383e:	bd08      	pop	{r3, pc}
 8003840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003844:	f000 ba80 	b.w	8003d48 <Error_Handler>
 8003848:	20001a64 	.word	0x20001a64
 800384c:	40020c00 	.word	0x40020c00

08003850 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_CORDIC_MspInit+0x2c>)
 8003852:	6802      	ldr	r2, [r0, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d000      	beq.n	800385a <HAL_CORDIC_MspInit+0xa>
 8003858:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800385a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800386a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8003876:	b002      	add	sp, #8
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40020c00 	.word	0x40020c00

08003880 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003880:	b500      	push	{lr}
 8003882:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003884:	2230      	movs	r2, #48	; 0x30
 8003886:	2100      	movs	r1, #0
 8003888:	4668      	mov	r0, sp
 800388a:	f006 fc39 	bl	800a100 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800388e:	4810      	ldr	r0, [pc, #64]	; (80038d0 <MX_DAC1_Init+0x50>)
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <MX_DAC1_Init+0x54>)
 8003892:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003894:	f001 fdec 	bl	8005470 <HAL_DAC_Init>
 8003898:	b990      	cbnz	r0, 80038c0 <MX_DAC1_Init+0x40>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800389a:	2200      	movs	r2, #0
  sConfig.DAC_SignedFormat = DISABLE;
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800389c:	2301      	movs	r3, #1
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800389e:	480c      	ldr	r0, [pc, #48]	; (80038d0 <MX_DAC1_Init+0x50>)
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80038a0:	9200      	str	r2, [sp, #0]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038a2:	4669      	mov	r1, sp
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038a4:	e9cd 2202 	strd	r2, r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038a8:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80038ac:	e9cd 3206 	strd	r3, r2, [sp, #24]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80038b0:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038b4:	f001 fe40 	bl	8005538 <HAL_DAC_ConfigChannel>
 80038b8:	b928      	cbnz	r0, 80038c6 <MX_DAC1_Init+0x46>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80038ba:	b00d      	add	sp, #52	; 0x34
 80038bc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80038c0:	f000 fa42 	bl	8003d48 <Error_Handler>
 80038c4:	e7e9      	b.n	800389a <MX_DAC1_Init+0x1a>
    Error_Handler();
 80038c6:	f000 fa3f 	bl	8003d48 <Error_Handler>
}
 80038ca:	b00d      	add	sp, #52	; 0x34
 80038cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d0:	20001a8c 	.word	0x20001a8c
 80038d4:	50000800 	.word	0x50000800

080038d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80038d8:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_DAC_MspInit+0x70>)
 80038dc:	6801      	ldr	r1, [r0, #0]
{
 80038de:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 80038e2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80038e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038ec:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 80038ee:	d002      	beq.n	80038f6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80038f0:	b009      	add	sp, #36	; 0x24
 80038f2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80038f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038fe:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003940 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003904:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003908:	64da      	str	r2, [r3, #76]	; 0x4c
 800390a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800390c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003910:	9200      	str	r2, [sp, #0]
 8003912:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003924:	a902      	add	r1, sp, #8
 8003926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800392a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	f002 fdd2 	bl	80064d8 <HAL_GPIO_Init>
}
 8003934:	b009      	add	sp, #36	; 0x24
 8003936:	f85d fb04 	ldr.w	pc, [sp], #4
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w
 8003940:	00000010 	.word	0x00000010
 8003944:	00000003 	.word	0x00000003
 8003948:	50000800 	.word	0x50000800

0800394c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <MX_DMA_Init+0xb4>)
{
 800394e:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003950:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003952:	f040 0004 	orr.w	r0, r0, #4
 8003956:	6498      	str	r0, [r3, #72]	; 0x48
 8003958:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 800395a:	b084      	sub	sp, #16
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800395c:	f004 0404 	and.w	r4, r4, #4
 8003960:	9401      	str	r4, [sp, #4]
 8003962:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003964:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8003966:	f044 0401 	orr.w	r4, r4, #1
 800396a:	649c      	str	r4, [r3, #72]	; 0x48
 800396c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800396e:	f004 0401 	and.w	r4, r4, #1
 8003972:	9402      	str	r4, [sp, #8]
 8003974:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003976:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8003978:	f044 0402 	orr.w	r4, r4, #2
 800397c:	649c      	str	r4, [r3, #72]	; 0x48
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003980:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003982:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003986:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003988:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800398a:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 800398c:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800398e:	f001 fd09 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003992:	200b      	movs	r0, #11
 8003994:	f001 fd44 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	4611      	mov	r1, r2
 800399c:	200c      	movs	r0, #12
 800399e:	f001 fd01 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80039a2:	200c      	movs	r0, #12
 80039a4:	f001 fd3c 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	4611      	mov	r1, r2
 80039ac:	200d      	movs	r0, #13
 80039ae:	f001 fcf9 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80039b2:	200d      	movs	r0, #13
 80039b4:	f001 fd34 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	4611      	mov	r1, r2
 80039bc:	200e      	movs	r0, #14
 80039be:	f001 fcf1 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80039c2:	200e      	movs	r0, #14
 80039c4:	f001 fd2c 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	4611      	mov	r1, r2
 80039cc:	2038      	movs	r0, #56	; 0x38
 80039ce:	f001 fce9 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80039d2:	2038      	movs	r0, #56	; 0x38
 80039d4:	f001 fd24 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80039d8:	2200      	movs	r2, #0
 80039da:	4611      	mov	r1, r2
 80039dc:	2039      	movs	r0, #57	; 0x39
 80039de:	f001 fce1 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80039e2:	2039      	movs	r0, #57	; 0x39
 80039e4:	f001 fd1c 	bl	8005420 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	203a      	movs	r0, #58	; 0x3a
 80039ec:	4611      	mov	r1, r2
 80039ee:	f001 fcd9 	bl	80053a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80039f2:	203a      	movs	r0, #58	; 0x3a

}
 80039f4:	b004      	add	sp, #16
 80039f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80039fa:	f001 bd11 	b.w	8005420 <HAL_NVIC_EnableIRQ>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003a04:	4811      	ldr	r0, [pc, #68]	; (8003a4c <MX_FDCAN1_Init+0x48>)
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <MX_FDCAN1_Init+0x4c>)
{
 8003a08:	b510      	push	{r4, lr}
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003a0a:	2300      	movs	r3, #0
  hfdcan1.Instance = FDCAN1;
 8003a0c:	6002      	str	r2, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003a0e:	f44f 7240 	mov.w	r2, #768	; 0x300
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
 8003a12:	2101      	movs	r1, #1
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8003a14:	2407      	movs	r4, #7
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003a16:	e9c0 3201 	strd	r3, r2, [r0, #4]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8003a1a:	222a      	movs	r2, #42	; 0x2a
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8003a1c:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hfdcan1.Init.NominalTimeSeg2 = 7;
  hfdcan1.Init.DataPrescaler = 1;
 8003a20:	e9c0 4108 	strd	r4, r1, [r0, #32]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8003a24:	61c2      	str	r2, [r0, #28]
  hfdcan1.Init.DataSyncJumpWidth = 9;
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003a26:	210a      	movs	r1, #10
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8003a28:	2209      	movs	r2, #9
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003a2a:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003a2c:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 9;
  hfdcan1.Init.StdFiltersNbr = 0;
 8003a30:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003a34:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a38:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003a3a:	7483      	strb	r3, [r0, #18]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003a3c:	f002 f81e 	bl	8005a7c <HAL_FDCAN_Init>
 8003a40:	b900      	cbnz	r0, 8003a44 <MX_FDCAN1_Init+0x40>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003a42:	bd10      	pop	{r4, pc}
 8003a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003a48:	f000 b97e 	b.w	8003d48 <Error_Handler>
 8003a4c:	20001aa0 	.word	0x20001aa0
 8003a50:	40006400 	.word	0x40006400
 8003a54:	00000000 	.word	0x00000000

08003a58 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	b098      	sub	sp, #96	; 0x60

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a60:	2244      	movs	r2, #68	; 0x44
 8003a62:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003a68:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003a6c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a6e:	f006 fb47 	bl	800a100 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_FDCAN_MspInit+0xa8>)
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003a7a:	b018      	add	sp, #96	; 0x60
 8003a7c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003a7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a86:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003a88:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003a8a:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8c:	f003 fa6c 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 8003a90:	bb58      	cbnz	r0, 8003aea <HAL_FDCAN_MspInit+0x92>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_FDCAN_MspInit+0xac>)
 8003a94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a96:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a9e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003aa2:	9200      	str	r2, [sp, #0]
 8003aa4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003aa8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8003af0 <HAL_FDCAN_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003ab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ab8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8003af8 <HAL_FDCAN_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ac4:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003aca:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003ace:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad0:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad2:	f002 fd01 	bl	80064d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4611      	mov	r1, r2
 8003ada:	2015      	movs	r0, #21
 8003adc:	f001 fc62 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003ae0:	2015      	movs	r0, #21
 8003ae2:	f001 fc9d 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 8003ae6:	b018      	add	sp, #96	; 0x60
 8003ae8:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003aea:	f000 f92d 	bl	8003d48 <Error_Handler>
 8003aee:	e7d0      	b.n	8003a92 <HAL_FDCAN_MspInit+0x3a>
 8003af0:	00001800 	.word	0x00001800
 8003af4:	00000002 	.word	0x00000002
	...
 8003b00:	40006400 	.word	0x40006400
 8003b04:	40021000 	.word	0x40021000

08003b08 <MX_FMAC_Init>:
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8003b08:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_FMAC_Init+0x18>)
{
 8003b0a:	b508      	push	{r3, lr}
  hfmac.Instance = FMAC;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <MX_FMAC_Init+0x1c>)
 8003b0e:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8003b10:	f002 fc96 	bl	8006440 <HAL_FMAC_Init>
 8003b14:	b900      	cbnz	r0, 8003b18 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8003b16:	bd08      	pop	{r3, pc}
 8003b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b1c:	f000 b914 	b.w	8003d48 <Error_Handler>
 8003b20:	20001b04 	.word	0x20001b04
 8003b24:	40021400 	.word	0x40021400

08003b28 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_FMAC_MspInit+0x28>)
 8003b2a:	6802      	ldr	r2, [r0, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d000      	beq.n	8003b32 <HAL_FMAC_MspInit+0xa>
 8003b30:	4770      	bx	lr
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8003b32:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
{
 8003b36:	b082      	sub	sp, #8
    __HAL_RCC_FMAC_CLK_ENABLE();
 8003b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b3a:	f042 0210 	orr.w	r2, r2, #16
 8003b3e:	649a      	str	r2, [r3, #72]	; 0x48
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8003b4a:	b002      	add	sp, #8
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40021400 	.word	0x40021400

08003b54 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	2400      	movs	r4, #0
{
 8003b5a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003b60:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b64:	4b42      	ldr	r3, [pc, #264]	; (8003c70 <MX_GPIO_Init+0x11c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b66:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003b6a:	4e42      	ldr	r6, [pc, #264]	; (8003c74 <MX_GPIO_Init+0x120>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8003b6c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8003c7c <MX_GPIO_Init+0x128>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8003b70:	4d41      	ldr	r5, [pc, #260]	; (8003c78 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b72:	f042 0220 	orr.w	r2, r2, #32
 8003b76:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b7a:	f002 0220 	and.w	r2, r2, #32
 8003b7e:	9201      	str	r2, [sp, #4]
 8003b80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b84:	f042 0204 	orr.w	r2, r2, #4
 8003b88:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b8c:	f002 0204 	and.w	r2, r2, #4
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9e:	f002 0201 	and.w	r2, r2, #1
 8003ba2:	9203      	str	r2, [sp, #12]
 8003ba4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba8:	f042 0202 	orr.w	r2, r2, #2
 8003bac:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb0:	f002 0202 	and.w	r2, r2, #2
 8003bb4:	9204      	str	r2, [sp, #16]
 8003bb6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bba:	f042 0208 	orr.w	r2, r2, #8
 8003bbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003bc8:	4630      	mov	r0, r6
 8003bca:	4622      	mov	r2, r4
 8003bcc:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bce:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003bd0:	f002 fd7c 	bl	80066cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bde:	f002 fd75 	bl	80066cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8003be2:	4622      	mov	r2, r4
 8003be4:	4640      	mov	r0, r8
 8003be6:	2104      	movs	r1, #4
 8003be8:	f002 fd70 	bl	80066cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8003bec:	4622      	mov	r2, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	2140      	movs	r1, #64	; 0x40
 8003bf2:	f002 fd6b 	bl	80066cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8003bf6:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	22c0      	movs	r2, #192	; 0xc0
 8003c00:	2301      	movs	r3, #1
 8003c02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c06:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0a:	f002 fc65 	bl	80064d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c14:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c1e:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003c22:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c24:	f002 fc58 	bl	80064d8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8003c28:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8003c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2e:	2301      	movs	r3, #1
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8003c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c38:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8003c3c:	f002 fc4c 	bl	80064d8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8003c40:	4640      	mov	r0, r8
 8003c42:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8003c44:	2204      	movs	r2, #4
 8003c46:	2301      	movs	r3, #1
 8003c48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c4c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8003c50:	f002 fc42 	bl	80064d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8003c54:	2240      	movs	r2, #64	; 0x40
 8003c56:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8003c58:	a906      	add	r1, sp, #24
 8003c5a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8003c5c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8003c60:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8003c64:	f002 fc38 	bl	80064d8 <HAL_GPIO_Init>

}
 8003c68:	b00c      	add	sp, #48	; 0x30
 8003c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000400 	.word	0x48000400
 8003c7c:	48000c00 	.word	0x48000c00

08003c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c80:	b530      	push	{r4, r5, lr}
 8003c82:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c84:	2238      	movs	r2, #56	; 0x38
 8003c86:	2100      	movs	r1, #0
 8003c88:	a806      	add	r0, sp, #24
 8003c8a:	f006 fa39 	bl	800a100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e9cd 0000 	strd	r0, r0, [sp]
 8003c94:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8003c98:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c9a:	f002 fd1d 	bl	80066d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c9e:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ca0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ca4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ca6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ca8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003caa:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cac:	f44f 7580 	mov.w	r5, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cb0:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cb2:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003cb4:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003cb8:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cba:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cbe:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8003cc0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cc2:	f002 fd87 	bl	80067d4 <HAL_RCC_OscConfig>
 8003cc6:	b108      	cbz	r0, 8003ccc <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cca:	e7fe      	b.n	8003cca <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ccc:	220f      	movs	r2, #15
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ce2:	f003 f81b 	bl	8006d1c <HAL_RCC_ClockConfig>
 8003ce6:	b108      	cbz	r0, 8003cec <SystemClock_Config+0x6c>
 8003ce8:	b672      	cpsid	i
  while (1)
 8003cea:	e7fe      	b.n	8003cea <SystemClock_Config+0x6a>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8003cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cf0:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f002 ffb9 	bl	8006c6c <HAL_RCC_MCOConfig>
}
 8003cfa:	b015      	add	sp, #84	; 0x54
 8003cfc:	bd30      	pop	{r4, r5, pc}
 8003cfe:	bf00      	nop

08003d00 <main>:
{
 8003d00:	b508      	push	{r3, lr}
  HAL_Init();
 8003d02:	f000 fceb 	bl	80046dc <HAL_Init>
  SystemClock_Config();
 8003d06:	f7ff ffbb 	bl	8003c80 <SystemClock_Config>
  MX_GPIO_Init();
 8003d0a:	f7ff ff23 	bl	8003b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d0e:	f7ff fe1d 	bl	800394c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003d12:	f7ff fe77 	bl	8003a04 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8003d16:	f000 f819 	bl	8003d4c <MX_SPI1_Init>
  MX_SPI3_Init();
 8003d1a:	f000 f83f 	bl	8003d9c <MX_SPI3_Init>
  MX_TIM1_Init();
 8003d1e:	f000 fb43 	bl	80043a8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003d22:	f7ff fb9b 	bl	800345c <MX_ADC1_Init>
  MX_ADC2_Init();
 8003d26:	f7ff fc1f 	bl	8003568 <MX_ADC2_Init>
  MX_DAC1_Init();
 8003d2a:	f7ff fda9 	bl	8003880 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8003d2e:	f000 fbd7 	bl	80044e0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003d32:	f000 fa63 	bl	80041fc <MX_TIM3_Init>
  MX_FMAC_Init();
 8003d36:	f7ff fee7 	bl	8003b08 <MX_FMAC_Init>
  MX_CORDIC_Init();
 8003d3a:	f7ff fd79 	bl	8003830 <MX_CORDIC_Init>
  MX_TIM2_Init();
 8003d3e:	f000 fa23 	bl	8004188 <MX_TIM2_Init>
	BLDC_main();
 8003d42:	f7fd f967 	bl	8001014 <BLDC_main>
  while (1)
 8003d46:	e7fc      	b.n	8003d42 <main+0x42>

08003d48 <Error_Handler>:
 8003d48:	b672      	cpsid	i
  while (1)
 8003d4a:	e7fe      	b.n	8003d4a <Error_Handler+0x2>

08003d4c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d4c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003d4e:	4811      	ldr	r0, [pc, #68]	; (8003d94 <MX_SPI1_Init+0x48>)
 8003d50:	4c11      	ldr	r4, [pc, #68]	; (8003d98 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d52:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d56:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d58:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d60:	2201      	movs	r2, #1
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d62:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d66:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003d6a:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d6e:	2128      	movs	r1, #40	; 0x28
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003d70:	2207      	movs	r2, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d72:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d76:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 7;
 8003d7a:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003d7e:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d82:	f003 fb7b 	bl	800747c <HAL_SPI_Init>
 8003d86:	b900      	cbnz	r0, 8003d8a <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003d8e:	f7ff bfdb 	b.w	8003d48 <Error_Handler>
 8003d92:	bf00      	nop
 8003d94:	20001cbc 	.word	0x20001cbc
 8003d98:	40013000 	.word	0x40013000

08003d9c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003d9c:	b510      	push	{r4, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003d9e:	4811      	ldr	r0, [pc, #68]	; (8003de4 <MX_SPI3_Init+0x48>)
 8003da0:	4c11      	ldr	r4, [pc, #68]	; (8003de8 <MX_SPI3_Init+0x4c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003da2:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003da6:	2300      	movs	r3, #0
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003da8:	e9c0 4200 	strd	r4, r2, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003db0:	2201      	movs	r2, #1
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003db2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003db6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003dba:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003dbe:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8003dc0:	2207      	movs	r2, #7
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003dc2:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dc6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCPolynomial = 7;
 8003dca:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003dce:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003dd2:	f003 fb53 	bl	800747c <HAL_SPI_Init>
 8003dd6:	b900      	cbnz	r0, 8003dda <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003dde:	f7ff bfb3 	b.w	8003d48 <Error_Handler>
 8003de2:	bf00      	nop
 8003de4:	20001d20 	.word	0x20001d20
 8003de8:	40003c00 	.word	0x40003c00

08003dec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dec:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8003dee:	6803      	ldr	r3, [r0, #0]
 8003df0:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_SPI_MspInit+0x180>)
{
 8003df2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8003df6:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003dfc:	e9cd 4406 	strd	r4, r4, [sp, #24]
{
 8003e00:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e02:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8003e04:	d004      	beq.n	8003e10 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8003e06:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <HAL_SPI_MspInit+0x184>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d052      	beq.n	8003eb2 <HAL_SPI_MspInit+0xc6>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003e0c:	b00a      	add	sp, #40	; 0x28
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e10:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <HAL_SPI_MspInit+0x188>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	4859      	ldr	r0, [pc, #356]	; (8003f78 <HAL_SPI_MspInit+0x18c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003e16:	4e59      	ldr	r6, [pc, #356]	; (8003f7c <HAL_SPI_MspInit+0x190>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60
 8003e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e24:	9200      	str	r2, [sp, #0]
 8003e26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e2a:	f042 0202 	orr.w	r2, r2, #2
 8003e2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003e38:	2238      	movs	r2, #56	; 0x38
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e40:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e42:	2305      	movs	r3, #5
 8003e44:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e48:	f002 fb46 	bl	80064d8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	; (8003f80 <HAL_SPI_MspInit+0x194>)
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e4e:	6234      	str	r4, [r6, #32]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003e50:	230a      	movs	r3, #10
 8003e52:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003e56:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e58:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e5a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e5e:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003e62:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003e66:	f001 fc53 	bl	8005710 <HAL_DMA_Init>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d174      	bne.n	8003f58 <HAL_SPI_MspInit+0x16c>
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003e6e:	4c45      	ldr	r4, [pc, #276]	; (8003f84 <HAL_SPI_MspInit+0x198>)
 8003e70:	4945      	ldr	r1, [pc, #276]	; (8003f88 <HAL_SPI_MspInit+0x19c>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003e72:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003e74:	220b      	movs	r2, #11
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e76:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003e78:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e7c:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e7e:	2110      	movs	r1, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e80:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e82:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e86:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e8a:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003e8e:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e90:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e92:	f001 fc3d 	bl	8005710 <HAL_DMA_Init>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d15b      	bne.n	8003f52 <HAL_SPI_MspInit+0x166>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003e9e:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ea0:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003ea2:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ea4:	f001 fa7e 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003ea8:	2023      	movs	r0, #35	; 0x23
 8003eaa:	f001 fab9 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 8003eae:	b00a      	add	sp, #40	; 0x28
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <HAL_SPI_MspInit+0x188>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	4835      	ldr	r0, [pc, #212]	; (8003f8c <HAL_SPI_MspInit+0x1a0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003eb8:	4e35      	ldr	r6, [pc, #212]	; (8003f90 <HAL_SPI_MspInit+0x1a4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8003ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ec2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003ec6:	9202      	str	r2, [sp, #8]
 8003ec8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ecc:	f042 0204 	orr.w	r2, r2, #4
 8003ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003eda:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eea:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eec:	f002 faf4 	bl	80064d8 <HAL_GPIO_Init>
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_SPI_MspInit+0x1a8>)
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ef2:	6234      	str	r4, [r6, #32]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8003ef4:	230e      	movs	r3, #14
 8003ef6:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003efa:	4630      	mov	r0, r6
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003efc:	2380      	movs	r3, #128	; 0x80
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efe:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f02:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003f06:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003f0a:	f001 fc01 	bl	8005710 <HAL_DMA_Init>
 8003f0e:	bb30      	cbnz	r0, 8003f5e <HAL_SPI_MspInit+0x172>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8003f10:	4c21      	ldr	r4, [pc, #132]	; (8003f98 <HAL_SPI_MspInit+0x1ac>)
 8003f12:	4922      	ldr	r1, [pc, #136]	; (8003f9c <HAL_SPI_MspInit+0x1b0>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003f14:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003f16:	220f      	movs	r2, #15
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f18:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003f1a:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003f1e:	4620      	mov	r0, r4
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f20:	2110      	movs	r1, #16
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f22:	2280      	movs	r2, #128	; 0x80
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f24:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f28:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f2c:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003f30:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f32:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003f34:	f001 fbec 	bl	8005710 <HAL_DMA_Init>
 8003f38:	b9a0      	cbnz	r0, 8003f64 <HAL_SPI_MspInit+0x178>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003f40:	656c      	str	r4, [r5, #84]	; 0x54
 8003f42:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f44:	f001 fa2e 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f48:	2033      	movs	r0, #51	; 0x33
 8003f4a:	f001 fa69 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 8003f4e:	b00a      	add	sp, #40	; 0x28
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003f52:	f7ff fef9 	bl	8003d48 <Error_Handler>
 8003f56:	e7a0      	b.n	8003e9a <HAL_SPI_MspInit+0xae>
      Error_Handler();
 8003f58:	f7ff fef6 	bl	8003d48 <Error_Handler>
 8003f5c:	e787      	b.n	8003e6e <HAL_SPI_MspInit+0x82>
      Error_Handler();
 8003f5e:	f7ff fef3 	bl	8003d48 <Error_Handler>
 8003f62:	e7d5      	b.n	8003f10 <HAL_SPI_MspInit+0x124>
      Error_Handler();
 8003f64:	f7ff fef0 	bl	8003d48 <Error_Handler>
 8003f68:	e7e7      	b.n	8003f3a <HAL_SPI_MspInit+0x14e>
 8003f6a:	bf00      	nop
 8003f6c:	40013000 	.word	0x40013000
 8003f70:	40003c00 	.word	0x40003c00
 8003f74:	40021000 	.word	0x40021000
 8003f78:	48000400 	.word	0x48000400
 8003f7c:	20001b3c 	.word	0x20001b3c
 8003f80:	40020030 	.word	0x40020030
 8003f84:	20001b9c 	.word	0x20001b9c
 8003f88:	40020044 	.word	0x40020044
 8003f8c:	48000800 	.word	0x48000800
 8003f90:	20001bfc 	.word	0x20001bfc
 8003f94:	40020408 	.word	0x40020408
 8003f98:	20001c5c 	.word	0x20001c5c
 8003f9c:	4002041c 	.word	0x4002041c

08003fa0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_MspInit+0x30>)
 8003fa2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60
 8003faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003fac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fae:	f002 0201 	and.w	r2, r2, #1
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fc8:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8003fca:	f002 bbfb 	b.w	80067c4 <HAL_PWREx_DisableUCPDDeadBattery>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000

08003fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <NMI_Handler>
 8003fd6:	bf00      	nop

08003fd8 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 8003fd8:	4a02      	ldr	r2, [pc, #8]	; (8003fe4 <HardFault_Handler+0xc>)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = 0;
 8003fde:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3 = 0;
 8003fe0:	63d3      	str	r3, [r2, #60]	; 0x3c
  while (1)
 8003fe2:	e7fb      	b.n	8003fdc <HardFault_Handler+0x4>
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <MemManage_Handler>
 8003fea:	bf00      	nop

08003fec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <BusFault_Handler>
 8003fee:	bf00      	nop

08003ff0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff0:	e7fe      	b.n	8003ff0 <UsageFault_Handler>
 8003ff2:	bf00      	nop

08003ff4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <DebugMon_Handler>:
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <PendSV_Handler>:
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004000:	f000 bb7c 	b.w	80046fc <HAL_IncTick>

08004004 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <DMA1_Channel1_IRQHandler+0x8>)
 8004006:	f001 bceb 	b.w	80059e0 <HAL_DMA_IRQHandler>
 800400a:	bf00      	nop
 800400c:	200019a4 	.word	0x200019a4

08004010 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <DMA1_Channel2_IRQHandler+0x8>)
 8004012:	f001 bce5 	b.w	80059e0 <HAL_DMA_IRQHandler>
 8004016:	bf00      	nop
 8004018:	20001a04 	.word	0x20001a04

0800401c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <DMA1_Channel3_IRQHandler+0x8>)
 800401e:	f001 bcdf 	b.w	80059e0 <HAL_DMA_IRQHandler>
 8004022:	bf00      	nop
 8004024:	20001b3c 	.word	0x20001b3c

08004028 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <DMA1_Channel4_IRQHandler+0x8>)
 800402a:	f001 bcd9 	b.w	80059e0 <HAL_DMA_IRQHandler>
 800402e:	bf00      	nop
 8004030:	20001b9c 	.word	0x20001b9c

08004034 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004036:	4804      	ldr	r0, [pc, #16]	; (8004048 <ADC1_2_IRQHandler+0x14>)
 8004038:	f000 fc92 	bl	8004960 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800403c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <ADC1_2_IRQHandler+0x18>)
 8004042:	f000 bc8d 	b.w	8004960 <HAL_ADC_IRQHandler>
 8004046:	bf00      	nop
 8004048:	200018cc 	.word	0x200018cc
 800404c:	20001938 	.word	0x20001938

08004050 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <FDCAN1_IT0_IRQHandler+0x8>)
 8004052:	f001 bf8b 	b.w	8005f6c <HAL_FDCAN_IRQHandler>
 8004056:	bf00      	nop
 8004058:	20001aa0 	.word	0x20001aa0

0800405c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <TIM2_IRQHandler+0x8>)
 800405e:	f004 b90b 	b.w	8008278 <HAL_TIM_IRQHandler>
 8004062:	bf00      	nop
 8004064:	20001dd4 	.word	0x20001dd4

08004068 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <TIM3_IRQHandler+0x8>)
 800406a:	f004 b905 	b.w	8008278 <HAL_TIM_IRQHandler>
 800406e:	bf00      	nop
 8004070:	20001e20 	.word	0x20001e20

08004074 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <SPI1_IRQHandler+0x8>)
 8004076:	f003 bc5d 	b.w	8007934 <HAL_SPI_IRQHandler>
 800407a:	bf00      	nop
 800407c:	20001cbc 	.word	0x20001cbc

08004080 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <USART1_IRQHandler+0x8>)
 8004082:	f004 bd7f 	b.w	8008b84 <HAL_UART_IRQHandler>
 8004086:	bf00      	nop
 8004088:	20001ecc 	.word	0x20001ecc

0800408c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <SPI3_IRQHandler+0x8>)
 800408e:	f003 bc51 	b.w	8007934 <HAL_SPI_IRQHandler>
 8004092:	bf00      	nop
 8004094:	20001d20 	.word	0x20001d20

08004098 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <DMA2_Channel1_IRQHandler+0x8>)
 800409a:	f001 bca1 	b.w	80059e0 <HAL_DMA_IRQHandler>
 800409e:	bf00      	nop
 80040a0:	20001bfc 	.word	0x20001bfc

080040a4 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <DMA2_Channel2_IRQHandler+0x8>)
 80040a6:	f001 bc9b 	b.w	80059e0 <HAL_DMA_IRQHandler>
 80040aa:	bf00      	nop
 80040ac:	20001c5c 	.word	0x20001c5c

080040b0 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80040b0:	4801      	ldr	r0, [pc, #4]	; (80040b8 <DMA2_Channel3_IRQHandler+0x8>)
 80040b2:	f001 bc95 	b.w	80059e0 <HAL_DMA_IRQHandler>
 80040b6:	bf00      	nop
 80040b8:	20001e6c 	.word	0x20001e6c

080040bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80040bc:	2001      	movs	r0, #1
 80040be:	4770      	bx	lr

080040c0 <_kill>:

int _kill(int pid, int sig)
{
 80040c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040c2:	f006 f86f 	bl	800a1a4 <__errno>
 80040c6:	2316      	movs	r3, #22
 80040c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	bd08      	pop	{r3, pc}

080040d0 <_exit>:

void _exit (int status)
{
 80040d0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80040d2:	f006 f867 	bl	800a1a4 <__errno>
 80040d6:	2316      	movs	r3, #22
 80040d8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80040da:	e7fe      	b.n	80040da <_exit+0xa>

080040dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040dc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040de:	1e16      	subs	r6, r2, #0
 80040e0:	dd07      	ble.n	80040f2 <_read+0x16>
 80040e2:	460c      	mov	r4, r1
 80040e4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80040e6:	f3af 8000 	nop.w
 80040ea:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	42a5      	cmp	r5, r4
 80040f0:	d1f9      	bne.n	80040e6 <_read+0xa>
  }

  return len;
}
 80040f2:	4630      	mov	r0, r6
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
 80040f6:	bf00      	nop

080040f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	1e16      	subs	r6, r2, #0
 80040fc:	dd07      	ble.n	800410e <_write+0x16>
 80040fe:	460c      	mov	r4, r1
 8004100:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8004102:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004106:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410a:	42ac      	cmp	r4, r5
 800410c:	d1f9      	bne.n	8004102 <_write+0xa>
  }
  return len;
}
 800410e:	4630      	mov	r0, r6
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	bf00      	nop

08004114 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop

0800411c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800411c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004120:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004122:	2000      	movs	r0, #0
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004128:	2001      	movs	r0, #1
 800412a:	4770      	bx	lr

0800412c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800412c:	2000      	movs	r0, #0
 800412e:	4770      	bx	lr

08004130 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004130:	490c      	ldr	r1, [pc, #48]	; (8004164 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004132:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004134:	680b      	ldr	r3, [r1, #0]
{
 8004136:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004138:	4c0c      	ldr	r4, [pc, #48]	; (800416c <_sbrk+0x3c>)
 800413a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800413c:	b12b      	cbz	r3, 800414a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800413e:	4418      	add	r0, r3
 8004140:	4290      	cmp	r0, r2
 8004142:	d807      	bhi.n	8004154 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004144:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <_sbrk+0x40>)
 800414c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800414e:	4418      	add	r0, r3
 8004150:	4290      	cmp	r0, r2
 8004152:	d9f7      	bls.n	8004144 <_sbrk+0x14>
    errno = ENOMEM;
 8004154:	f006 f826 	bl	800a1a4 <__errno>
 8004158:	230c      	movs	r3, #12
 800415a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd10      	pop	{r4, pc}
 8004164:	20001d84 	.word	0x20001d84
 8004168:	20008000 	.word	0x20008000
 800416c:	00000400 	.word	0x00000400
 8004170:	200020b0 	.word	0x200020b0

08004174 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <SystemInit+0x10>)
 8004176:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800417a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800417e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004188:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800418a:	481b      	ldr	r0, [pc, #108]	; (80041f8 <MX_TIM2_Init+0x70>)
 800418c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
 8004190:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8004192:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 7999;
 8004194:	f641 723f 	movw	r2, #7999	; 0x1f3f
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004198:	2300      	movs	r3, #0
  htim2.Init.Period = 7999;
 800419a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800419c:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800419e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80041a2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ae:	9303      	str	r3, [sp, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041b2:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041b4:	f003 fd06 	bl	8007bc4 <HAL_TIM_Base_Init>
 80041b8:	b990      	cbnz	r0, 80041e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041be:	480e      	ldr	r0, [pc, #56]	; (80041f8 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c0:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041c2:	a904      	add	r1, sp, #16
 80041c4:	f003 ff7e 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 80041c8:	b990      	cbnz	r0, 80041f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ca:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041cc:	480a      	ldr	r0, [pc, #40]	; (80041f8 <MX_TIM2_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ce:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041d0:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d2:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041d4:	f004 fb34 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 80041d8:	b928      	cbnz	r0, 80041e6 <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80041da:	b009      	add	sp, #36	; 0x24
 80041dc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041e0:	f7ff fdb2 	bl	8003d48 <Error_Handler>
 80041e4:	e7e9      	b.n	80041ba <MX_TIM2_Init+0x32>
    Error_Handler();
 80041e6:	f7ff fdaf 	bl	8003d48 <Error_Handler>
}
 80041ea:	b009      	add	sp, #36	; 0x24
 80041ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041f0:	f7ff fdaa 	bl	8003d48 <Error_Handler>
 80041f4:	e7e9      	b.n	80041ca <MX_TIM2_Init+0x42>
 80041f6:	bf00      	nop
 80041f8:	20001dd4 	.word	0x20001dd4

080041fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041fc:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041fe:	481b      	ldr	r0, [pc, #108]	; (800426c <MX_TIM3_Init+0x70>)
 8004200:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <MX_TIM3_Init+0x74>)
 8004202:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 8004204:	2203      	movs	r2, #3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004206:	2300      	movs	r3, #0
{
 8004208:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Prescaler = 3;
 800420a:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 3999;
 800420c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004210:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004214:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004216:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800421a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004222:	9303      	str	r3, [sp, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004224:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004226:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004228:	f003 fccc 	bl	8007bc4 <HAL_TIM_Base_Init>
 800422c:	b990      	cbnz	r0, 8004254 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800422e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004232:	480e      	ldr	r0, [pc, #56]	; (800426c <MX_TIM3_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004234:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004236:	a904      	add	r1, sp, #16
 8004238:	f003 ff44 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 800423c:	b990      	cbnz	r0, 8004264 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800423e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004240:	480a      	ldr	r0, [pc, #40]	; (800426c <MX_TIM3_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004242:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004244:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004246:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004248:	f004 fafa 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 800424c:	b928      	cbnz	r0, 800425a <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800424e:	b009      	add	sp, #36	; 0x24
 8004250:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004254:	f7ff fd78 	bl	8003d48 <Error_Handler>
 8004258:	e7e9      	b.n	800422e <MX_TIM3_Init+0x32>
    Error_Handler();
 800425a:	f7ff fd75 	bl	8003d48 <Error_Handler>
}
 800425e:	b009      	add	sp, #36	; 0x24
 8004260:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004264:	f7ff fd70 	bl	8003d48 <Error_Handler>
 8004268:	e7e9      	b.n	800423e <MX_TIM3_Init+0x42>
 800426a:	bf00      	nop
 800426c:	20001e20 	.word	0x20001e20
 8004270:	40000400 	.word	0x40000400

08004274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004274:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8004276:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_TIM_Base_MspInit+0x90>)
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	4293      	cmp	r3, r2
{
 800427c:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 800427e:	d008      	beq.n	8004292 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004284:	d027      	beq.n	80042d6 <HAL_TIM_Base_MspInit+0x62>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8004286:	4a20      	ldr	r2, [pc, #128]	; (8004308 <HAL_TIM_Base_MspInit+0x94>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00f      	beq.n	80042ac <HAL_TIM_Base_MspInit+0x38>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800428c:	b005      	add	sp, #20
 800428e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_TIM_Base_MspInit+0x98>)
 8004294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
 800429c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	9b01      	ldr	r3, [sp, #4]
}
 80042a6:	b005      	add	sp, #20
 80042a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_TIM_Base_MspInit+0x98>)
 80042ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80042b0:	f041 0102 	orr.w	r1, r1, #2
 80042b4:	6599      	str	r1, [r3, #88]	; 0x58
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042b8:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042c0:	201d      	movs	r0, #29
 80042c2:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042c6:	f001 f86d 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042ca:	201d      	movs	r0, #29
}
 80042cc:	b005      	add	sp, #20
 80042ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042d2:	f001 b8a5 	b.w	8005420 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042da:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042dc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80042de:	f041 0101 	orr.w	r1, r1, #1
 80042e2:	6599      	str	r1, [r3, #88]	; 0x58
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042ec:	201c      	movs	r0, #28
 80042ee:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042f0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042f2:	f001 f857 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042f6:	201c      	movs	r0, #28
}
 80042f8:	b005      	add	sp, #20
 80042fa:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042fe:	f001 b88f 	b.w	8005420 <HAL_NVIC_EnableIRQ>
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40000400 	.word	0x40000400
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004310:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_TIM_MspPostInit+0x8c>)
 8004314:	6802      	ldr	r2, [r0, #0]
{
 8004316:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 800431a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004320:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004324:	9406      	str	r4, [sp, #24]
  if(timHandle->Instance==TIM1)
 8004326:	d001      	beq.n	800432c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004328:	b009      	add	sp, #36	; 0x24
 800432a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800432c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004330:	2502      	movs	r5, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004334:	481a      	ldr	r0, [pc, #104]	; (80043a0 <HAL_TIM_MspPostInit+0x90>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004336:	f042 0204 	orr.w	r2, r2, #4
 800433a:	64da      	str	r2, [r3, #76]	; 0x4c
 800433c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800433e:	f002 0204 	and.w	r2, r2, #4
 8004342:	9200      	str	r2, [sp, #0]
 8004344:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004348:	f042 0202 	orr.w	r2, r2, #2
 800434c:	64da      	str	r2, [r3, #76]	; 0x4c
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004350:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004358:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800435a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800435c:	2302      	movs	r3, #2
 800435e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004362:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004364:	f002 f8b8 	bl	80064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004368:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436c:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004372:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004374:	480b      	ldr	r0, [pc, #44]	; (80043a4 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004376:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004378:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437c:	f002 f8ac 	bl	80064d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004384:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004386:	4807      	ldr	r0, [pc, #28]	; (80043a4 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004388:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	e9cd 2502 	strd	r2, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004390:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004394:	f002 f8a0 	bl	80064d8 <HAL_GPIO_Init>
}
 8004398:	b009      	add	sp, #36	; 0x24
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	48000800 	.word	0x48000800
 80043a4:	48000400 	.word	0x48000400

080043a8 <MX_TIM1_Init>:
{
 80043a8:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043aa:	2400      	movs	r4, #0
{
 80043ac:	b09c      	sub	sp, #112	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043ae:	2234      	movs	r2, #52	; 0x34
 80043b0:	4621      	mov	r1, r4
 80043b2:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043bc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80043c0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80043c4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043c8:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ca:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043cc:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ce:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043d0:	f005 fe96 	bl	800a100 <memset>
  htim1.Instance = TIM1;
 80043d4:	4840      	ldr	r0, [pc, #256]	; (80044d8 <MX_TIM1_Init+0x130>)
 80043d6:	4a41      	ldr	r2, [pc, #260]	; (80044dc <MX_TIM1_Init+0x134>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80043d8:	2320      	movs	r3, #32
  htim1.Init.Prescaler = 0;
 80043da:	e9c0 2400 	strd	r2, r4, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80043de:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 80043e0:	f240 52db 	movw	r2, #1499	; 0x5db
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043e4:	2380      	movs	r3, #128	; 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e6:	e9c0 2403 	strd	r2, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043ea:	e9c0 4305 	strd	r4, r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043ee:	f003 fbe9 	bl	8007bc4 <HAL_TIM_Base_Init>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d154      	bne.n	80044a0 <MX_TIM1_Init+0xf8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043fa:	4837      	ldr	r0, [pc, #220]	; (80044d8 <MX_TIM1_Init+0x130>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043fc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80043fe:	a904      	add	r1, sp, #16
 8004400:	f003 fe60 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 8004404:	2800      	cmp	r0, #0
 8004406:	d164      	bne.n	80044d2 <MX_TIM1_Init+0x12a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004408:	4833      	ldr	r0, [pc, #204]	; (80044d8 <MX_TIM1_Init+0x130>)
 800440a:	f003 fcb3 	bl	8007d74 <HAL_TIM_PWM_Init>
 800440e:	2800      	cmp	r0, #0
 8004410:	d15c      	bne.n	80044cc <MX_TIM1_Init+0x124>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	2200      	movs	r2, #0
 8004416:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800441a:	482f      	ldr	r0, [pc, #188]	; (80044d8 <MX_TIM1_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800441c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800441e:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004420:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004422:	f004 fa0d 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 8004426:	2800      	cmp	r0, #0
 8004428:	d14d      	bne.n	80044c6 <MX_TIM1_Init+0x11e>
  sConfigOC.Pulse = 0;
 800442a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800442c:	2160      	movs	r1, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800442e:	2302      	movs	r3, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004430:	2000      	movs	r0, #0
  sConfigOC.Pulse = 0;
 8004432:	e9cd 1208 	strd	r1, r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004436:	2100      	movs	r1, #0
 8004438:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800443c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800443e:	4826      	ldr	r0, [pc, #152]	; (80044d8 <MX_TIM1_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004440:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8004442:	2308      	movs	r3, #8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004444:	a908      	add	r1, sp, #32
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8004446:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004448:	f004 f850 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 800444c:	2800      	cmp	r0, #0
 800444e:	d137      	bne.n	80044c0 <MX_TIM1_Init+0x118>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004450:	4821      	ldr	r0, [pc, #132]	; (80044d8 <MX_TIM1_Init+0x130>)
 8004452:	2204      	movs	r2, #4
 8004454:	a908      	add	r1, sp, #32
 8004456:	f004 f849 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 800445a:	bb70      	cbnz	r0, 80044ba <MX_TIM1_Init+0x112>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800445c:	481e      	ldr	r0, [pc, #120]	; (80044d8 <MX_TIM1_Init+0x130>)
 800445e:	2208      	movs	r2, #8
 8004460:	a908      	add	r1, sp, #32
 8004462:	f004 f843 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8004466:	bb28      	cbnz	r0, 80044b4 <MX_TIM1_Init+0x10c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004468:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800446a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800446e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004472:	4819      	ldr	r0, [pc, #100]	; (80044d8 <MX_TIM1_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004474:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004476:	a90f      	add	r1, sp, #60	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004478:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800447c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004480:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004484:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004488:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800448c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004490:	f004 fa20 	bl	80088d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004494:	b938      	cbnz	r0, 80044a6 <MX_TIM1_Init+0xfe>
  HAL_TIM_MspPostInit(&htim1);
 8004496:	4810      	ldr	r0, [pc, #64]	; (80044d8 <MX_TIM1_Init+0x130>)
 8004498:	f7ff ff3a 	bl	8004310 <HAL_TIM_MspPostInit>
}
 800449c:	b01c      	add	sp, #112	; 0x70
 800449e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80044a0:	f7ff fc52 	bl	8003d48 <Error_Handler>
 80044a4:	e7a7      	b.n	80043f6 <MX_TIM1_Init+0x4e>
    Error_Handler();
 80044a6:	f7ff fc4f 	bl	8003d48 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80044aa:	480b      	ldr	r0, [pc, #44]	; (80044d8 <MX_TIM1_Init+0x130>)
 80044ac:	f7ff ff30 	bl	8004310 <HAL_TIM_MspPostInit>
}
 80044b0:	b01c      	add	sp, #112	; 0x70
 80044b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80044b4:	f7ff fc48 	bl	8003d48 <Error_Handler>
 80044b8:	e7d6      	b.n	8004468 <MX_TIM1_Init+0xc0>
    Error_Handler();
 80044ba:	f7ff fc45 	bl	8003d48 <Error_Handler>
 80044be:	e7cd      	b.n	800445c <MX_TIM1_Init+0xb4>
    Error_Handler();
 80044c0:	f7ff fc42 	bl	8003d48 <Error_Handler>
 80044c4:	e7c4      	b.n	8004450 <MX_TIM1_Init+0xa8>
    Error_Handler();
 80044c6:	f7ff fc3f 	bl	8003d48 <Error_Handler>
 80044ca:	e7ae      	b.n	800442a <MX_TIM1_Init+0x82>
    Error_Handler();
 80044cc:	f7ff fc3c 	bl	8003d48 <Error_Handler>
 80044d0:	e79f      	b.n	8004412 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80044d2:	f7ff fc39 	bl	8003d48 <Error_Handler>
 80044d6:	e797      	b.n	8004408 <MX_TIM1_Init+0x60>
 80044d8:	20001d88 	.word	0x20001d88
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80044e0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044e2:	481f      	ldr	r0, [pc, #124]	; (8004560 <MX_USART1_UART_Init+0x80>)
 80044e4:	4c1f      	ldr	r4, [pc, #124]	; (8004564 <MX_USART1_UART_Init+0x84>)
  huart1.Init.BaudRate = 921600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044e6:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 921600;
 80044e8:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044ec:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 921600;
 80044ee:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044f6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044fe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004502:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004504:	f004 ff34 	bl	8009370 <HAL_UART_Init>
 8004508:	b970      	cbnz	r0, 8004528 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800450a:	4815      	ldr	r0, [pc, #84]	; (8004560 <MX_USART1_UART_Init+0x80>)
 800450c:	2100      	movs	r1, #0
 800450e:	f004 ffbf 	bl	8009490 <HAL_UARTEx_SetTxFifoThreshold>
 8004512:	b988      	cbnz	r0, 8004538 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004514:	4812      	ldr	r0, [pc, #72]	; (8004560 <MX_USART1_UART_Init+0x80>)
 8004516:	2100      	movs	r1, #0
 8004518:	f004 fffc 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 800451c:	b9a0      	cbnz	r0, 8004548 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800451e:	4810      	ldr	r0, [pc, #64]	; (8004560 <MX_USART1_UART_Init+0x80>)
 8004520:	f004 ff98 	bl	8009454 <HAL_UARTEx_DisableFifoMode>
 8004524:	b9b8      	cbnz	r0, 8004556 <MX_USART1_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004526:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004528:	f7ff fc0e 	bl	8003d48 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800452c:	480c      	ldr	r0, [pc, #48]	; (8004560 <MX_USART1_UART_Init+0x80>)
 800452e:	2100      	movs	r1, #0
 8004530:	f004 ffae 	bl	8009490 <HAL_UARTEx_SetTxFifoThreshold>
 8004534:	2800      	cmp	r0, #0
 8004536:	d0ed      	beq.n	8004514 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8004538:	f7ff fc06 	bl	8003d48 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800453c:	4808      	ldr	r0, [pc, #32]	; (8004560 <MX_USART1_UART_Init+0x80>)
 800453e:	2100      	movs	r1, #0
 8004540:	f004 ffe8 	bl	8009514 <HAL_UARTEx_SetRxFifoThreshold>
 8004544:	2800      	cmp	r0, #0
 8004546:	d0ea      	beq.n	800451e <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8004548:	f7ff fbfe 	bl	8003d48 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800454c:	4804      	ldr	r0, [pc, #16]	; (8004560 <MX_USART1_UART_Init+0x80>)
 800454e:	f004 ff81 	bl	8009454 <HAL_UARTEx_DisableFifoMode>
 8004552:	2800      	cmp	r0, #0
 8004554:	d0e7      	beq.n	8004526 <MX_USART1_UART_Init+0x46>
}
 8004556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800455a:	f7ff bbf5 	b.w	8003d48 <Error_Handler>
 800455e:	bf00      	nop
 8004560:	20001ecc 	.word	0x20001ecc
 8004564:	40013800 	.word	0x40013800

08004568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	b099      	sub	sp, #100	; 0x64

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004570:	2244      	movs	r2, #68	; 0x44
 8004572:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004578:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800457c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800457e:	f005 fdbf 	bl	800a100 <memset>
  if(uartHandle->Instance==USART1)
 8004582:	4b29      	ldr	r3, [pc, #164]	; (8004628 <HAL_UART_MspInit+0xc0>)
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800458a:	b019      	add	sp, #100	; 0x64
 800458c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800458e:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004590:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004592:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004594:	f002 fce8 	bl	8006f68 <HAL_RCCEx_PeriphCLKConfig>
 8004598:	2800      	cmp	r0, #0
 800459a:	d13f      	bne.n	800461c <HAL_UART_MspInit+0xb4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459e:	4824      	ldr	r0, [pc, #144]	; (8004630 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    hdma_usart1_tx.Instance = DMA2_Channel3;
 80045a2:	4d24      	ldr	r5, [pc, #144]	; (8004634 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80045a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60
 80045aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80045b0:	9200      	str	r2, [sp, #0]
 80045b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045b6:	f042 0204 	orr.w	r2, r2, #4
 80045ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045c4:	2230      	movs	r2, #48	; 0x30
 80045c6:	2302      	movs	r3, #2
 80045c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045cc:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045d8:	2307      	movs	r3, #7
 80045da:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045dc:	f001 ff7c 	bl	80064d8 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80045e0:	4915      	ldr	r1, [pc, #84]	; (8004638 <HAL_UART_MspInit+0xd0>)
 80045e2:	2219      	movs	r2, #25
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045e4:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80045e6:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80045ea:	4628      	mov	r0, r5
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045ec:	2110      	movs	r1, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045ee:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045f0:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045f4:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045f8:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045fc:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80045fe:	f001 f887 	bl	8005710 <HAL_DMA_Init>
 8004602:	b970      	cbnz	r0, 8004622 <HAL_UART_MspInit+0xba>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004604:	2200      	movs	r2, #0
 8004606:	4611      	mov	r1, r2
 8004608:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800460a:	67a5      	str	r5, [r4, #120]	; 0x78
 800460c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800460e:	f000 fec9 	bl	80053a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004612:	2025      	movs	r0, #37	; 0x25
 8004614:	f000 ff04 	bl	8005420 <HAL_NVIC_EnableIRQ>
}
 8004618:	b019      	add	sp, #100	; 0x64
 800461a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800461c:	f7ff fb94 	bl	8003d48 <Error_Handler>
 8004620:	e7bc      	b.n	800459c <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004622:	f7ff fb91 	bl	8003d48 <Error_Handler>
 8004626:	e7ed      	b.n	8004604 <HAL_UART_MspInit+0x9c>
 8004628:	40013800 	.word	0x40013800
 800462c:	40021000 	.word	0x40021000
 8004630:	48000800 	.word	0x48000800
 8004634:	20001e6c 	.word	0x20001e6c
 8004638:	40020430 	.word	0x40020430

0800463c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800463e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004640:	480d      	ldr	r0, [pc, #52]	; (8004678 <LoopForever+0x6>)
  ldr r1, =_edata
 8004642:	490e      	ldr	r1, [pc, #56]	; (800467c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004644:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <LoopForever+0xe>)
  movs r3, #0
 8004646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004648:	e002      	b.n	8004650 <LoopCopyDataInit>

0800464a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800464c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800464e:	3304      	adds	r3, #4

08004650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004654:	d3f9      	bcc.n	800464a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004656:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004658:	4c0b      	ldr	r4, [pc, #44]	; (8004688 <LoopForever+0x16>)
  movs r3, #0
 800465a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800465c:	e001      	b.n	8004662 <LoopFillZerobss>

0800465e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800465e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004660:	3204      	adds	r2, #4

08004662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004664:	d3fb      	bcc.n	800465e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004666:	f7ff fd85 	bl	8004174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800466a:	f005 fda1 	bl	800a1b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800466e:	f7ff fb47 	bl	8003d00 <main>

08004672 <LoopForever>:

LoopForever:
    b LoopForever
 8004672:	e7fe      	b.n	8004672 <LoopForever>
  ldr   r0, =_estack
 8004674:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800467c:	20000738 	.word	0x20000738
  ldr r2, =_sidata
 8004680:	0800cd00 	.word	0x0800cd00
  ldr r2, =_sbss
 8004684:	20000738 	.word	0x20000738
  ldr r4, =_ebss
 8004688:	200020ac 	.word	0x200020ac

0800468c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800468c:	e7fe      	b.n	800468c <COMP1_2_3_IRQHandler>
	...

08004690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004690:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_InitTick+0x40>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b90b      	cbnz	r3, 800469c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004698:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800469a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <HAL_InitTick+0x44>)
 800469e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046a2:	4605      	mov	r5, r0
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	6808      	ldr	r0, [r1, #0]
 80046aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80046ae:	f000 fec5 	bl	800543c <HAL_SYSTICK_Config>
 80046b2:	4604      	mov	r4, r0
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d1ef      	bne.n	8004698 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046b8:	2d0f      	cmp	r5, #15
 80046ba:	d8ed      	bhi.n	8004698 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046bc:	4602      	mov	r2, r0
 80046be:	4629      	mov	r1, r5
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f000 fe6e 	bl	80053a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_InitTick+0x48>)
 80046ca:	4620      	mov	r0, r4
 80046cc:	601d      	str	r5, [r3, #0]
}
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	20000538 	.word	0x20000538
 80046d4:	20000534 	.word	0x20000534
 80046d8:	2000053c 	.word	0x2000053c

080046dc <HAL_Init>:
{
 80046dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046de:	2003      	movs	r0, #3
 80046e0:	f000 fe4e 	bl	8005380 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046e4:	200f      	movs	r0, #15
 80046e6:	f7ff ffd3 	bl	8004690 <HAL_InitTick>
 80046ea:	b110      	cbz	r0, 80046f2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80046ec:	2401      	movs	r4, #1
}
 80046ee:	4620      	mov	r0, r4
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	4604      	mov	r4, r0
    HAL_MspInit();
 80046f4:	f7ff fc54 	bl	8003fa0 <HAL_MspInit>
}
 80046f8:	4620      	mov	r0, r4
 80046fa:	bd10      	pop	{r4, pc}

080046fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80046fc:	4a03      	ldr	r2, [pc, #12]	; (800470c <HAL_IncTick+0x10>)
 80046fe:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_IncTick+0x14>)
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	6809      	ldr	r1, [r1, #0]
 8004704:	440b      	add	r3, r1
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20001f5c 	.word	0x20001f5c
 8004710:	20000538 	.word	0x20000538

08004714 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <HAL_GetTick+0x8>)
 8004716:	6818      	ldr	r0, [r3, #0]
}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20001f5c 	.word	0x20001f5c

08004720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004724:	f7ff fff6 	bl	8004714 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004728:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800472a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800472c:	d002      	beq.n	8004734 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_Delay+0x20>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004734:	f7ff ffee 	bl	8004714 <HAL_GetTick>
 8004738:	1b43      	subs	r3, r0, r5
 800473a:	42a3      	cmp	r3, r4
 800473c:	d3fa      	bcc.n	8004734 <HAL_Delay+0x14>
  {
  }
}
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000538 	.word	0x20000538

08004744 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004744:	b530      	push	{r4, r5, lr}
 8004746:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004748:	2300      	movs	r3, #0
 800474a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800474c:	2800      	cmp	r0, #0
 800474e:	f000 80c9 	beq.w	80048e4 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004752:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004754:	4604      	mov	r4, r0
 8004756:	2d00      	cmp	r5, #0
 8004758:	f000 8092 	beq.w	8004880 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800475c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800475e:	6893      	ldr	r3, [r2, #8]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	d505      	bpl.n	8004770 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004764:	6893      	ldr	r3, [r2, #8]
 8004766:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800476a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800476e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004770:	6893      	ldr	r3, [r2, #8]
 8004772:	00dd      	lsls	r5, r3, #3
 8004774:	d419      	bmi.n	80047aa <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004776:	4b70      	ldr	r3, [pc, #448]	; (8004938 <HAL_ADC_Init+0x1f4>)
 8004778:	4870      	ldr	r0, [pc, #448]	; (800493c <HAL_ADC_Init+0x1f8>)
 800477a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800477c:	6891      	ldr	r1, [r2, #8]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	fba0 0303 	umull	r0, r3, r0, r3
 8004784:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004796:	6091      	str	r1, [r2, #8]
 8004798:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	b12b      	cbz	r3, 80047aa <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80047a4:	9b01      	ldr	r3, [sp, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f9      	bne.n	800479e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047aa:	6893      	ldr	r3, [r2, #8]
 80047ac:	00d8      	lsls	r0, r3, #3
 80047ae:	d459      	bmi.n	8004864 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047b2:	f043 0310 	orr.w	r3, r3, #16
 80047b6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047ba:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047bc:	4303      	orrs	r3, r0
 80047be:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047c0:	6893      	ldr	r3, [r2, #8]
 80047c2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047c8:	d153      	bne.n	8004872 <HAL_ADC_Init+0x12e>
 80047ca:	06d9      	lsls	r1, r3, #27
 80047cc:	d451      	bmi.n	8004872 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80047d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047da:	6893      	ldr	r3, [r2, #8]
 80047dc:	07db      	lsls	r3, r3, #31
 80047de:	d40e      	bmi.n	80047fe <HAL_ADC_Init+0xba>
 80047e0:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_ADC_Init+0x1fc>)
 80047e2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80047e6:	6889      	ldr	r1, [r1, #8]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	430b      	orrs	r3, r1
 80047ec:	07dd      	lsls	r5, r3, #31
 80047ee:	d406      	bmi.n	80047fe <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047f0:	4954      	ldr	r1, [pc, #336]	; (8004944 <HAL_ADC_Init+0x200>)
 80047f2:	6865      	ldr	r5, [r4, #4]
 80047f4:	688b      	ldr	r3, [r1, #8]
 80047f6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80047fa:	432b      	orrs	r3, r5
 80047fc:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80047fe:	68e5      	ldr	r5, [r4, #12]
 8004800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004802:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8004806:	432b      	orrs	r3, r5
 8004808:	68a5      	ldr	r5, [r4, #8]
 800480a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800480c:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800480e:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004810:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004814:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004818:	d05f      	beq.n	80048da <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800481a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800481c:	b121      	cbz	r1, 8004828 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800481e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004820:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004824:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004826:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004828:	68d5      	ldr	r5, [r2, #12]
 800482a:	4947      	ldr	r1, [pc, #284]	; (8004948 <HAL_ADC_Init+0x204>)
 800482c:	4029      	ands	r1, r5
 800482e:	4319      	orrs	r1, r3
 8004830:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004832:	6913      	ldr	r3, [r2, #16]
 8004834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004836:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800483a:	430b      	orrs	r3, r1
 800483c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800483e:	6893      	ldr	r3, [r2, #8]
 8004840:	0759      	lsls	r1, r3, #29
 8004842:	d523      	bpl.n	800488c <HAL_ADC_Init+0x148>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004844:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d04e      	beq.n	80048ea <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800484c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800484e:	f023 030f 	bic.w	r3, r3, #15
 8004852:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004860:	b003      	add	sp, #12
 8004862:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800486e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004870:	d0ab      	beq.n	80047ca <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004874:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004876:	f043 0310 	orr.w	r3, r3, #16
 800487a:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800487c:	b003      	add	sp, #12
 800487e:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004880:	f7fe feea 	bl	8003658 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004884:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004886:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800488a:	e767      	b.n	800475c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800488c:	6893      	ldr	r3, [r2, #8]
 800488e:	071b      	lsls	r3, r3, #28
 8004890:	d4d9      	bmi.n	8004846 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004892:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004894:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004898:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800489a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800489e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048a0:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80048a4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048a8:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80048aa:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048ac:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048ae:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80048b0:	bb19      	cbnz	r1, 80048fa <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80048b8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80048bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80048c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d021      	beq.n	8004914 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048d0:	6913      	ldr	r3, [r2, #16]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6113      	str	r3, [r2, #16]
 80048d8:	e7b5      	b.n	8004846 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80048da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048dc:	3901      	subs	r1, #1
 80048de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80048e2:	e79a      	b.n	800481a <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80048e4:	2001      	movs	r0, #1
}
 80048e6:	b003      	add	sp, #12
 80048e8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80048ec:	6a23      	ldr	r3, [r4, #32]
 80048ee:	f021 010f 	bic.w	r1, r1, #15
 80048f2:	3b01      	subs	r3, #1
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6313      	str	r3, [r2, #48]	; 0x30
 80048f8:	e7ac      	b.n	8004854 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004900:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004904:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800490c:	430b      	orrs	r3, r1
 800490e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004912:	e7d9      	b.n	80048c8 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004914:	6911      	ldr	r1, [r2, #16]
 8004916:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004918:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800491a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800491e:	f021 0104 	bic.w	r1, r1, #4
 8004922:	432b      	orrs	r3, r5
 8004924:	430b      	orrs	r3, r1
 8004926:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004928:	430b      	orrs	r3, r1
 800492a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800492c:	430b      	orrs	r3, r1
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6113      	str	r3, [r2, #16]
 8004934:	e787      	b.n	8004846 <HAL_ADC_Init+0x102>
 8004936:	bf00      	nop
 8004938:	20000534 	.word	0x20000534
 800493c:	053e2d63 	.word	0x053e2d63
 8004940:	50000100 	.word	0x50000100
 8004944:	50000300 	.word	0x50000300
 8004948:	fff04007 	.word	0xfff04007

0800494c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800494c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800494e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004950:	f7fe fa8a 	bl	8002e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004954:	bd08      	pop	{r3, pc}
 8004956:	bf00      	nop

08004958 <HAL_ADC_LevelOutOfWindowCallback>:
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop

0800495c <HAL_ADC_ErrorCallback>:
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop

08004960 <HAL_ADC_IRQHandler>:
{
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004962:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004964:	4a8d      	ldr	r2, [pc, #564]	; (8004b9c <HAL_ADC_IRQHandler+0x23c>)
 8004966:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004968:	685e      	ldr	r6, [r3, #4]
 800496a:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800496c:	07a9      	lsls	r1, r5, #30
{
 800496e:	4604      	mov	r4, r0
 8004970:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004974:	d502      	bpl.n	800497c <HAL_ADC_IRQHandler+0x1c>
 8004976:	07b2      	lsls	r2, r6, #30
 8004978:	f100 809f 	bmi.w	8004aba <HAL_ADC_IRQHandler+0x15a>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800497c:	0769      	lsls	r1, r5, #29
 800497e:	d579      	bpl.n	8004a74 <HAL_ADC_IRQHandler+0x114>
 8004980:	0772      	lsls	r2, r6, #29
 8004982:	d577      	bpl.n	8004a74 <HAL_ADC_IRQHandler+0x114>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004984:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004986:	06d2      	lsls	r2, r2, #27
 8004988:	d403      	bmi.n	8004992 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800498a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800498c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004990:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004998:	d11c      	bne.n	80049d4 <HAL_ADC_IRQHandler+0x74>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800499a:	4a81      	ldr	r2, [pc, #516]	; (8004ba0 <HAL_ADC_IRQHandler+0x240>)
 800499c:	4293      	cmp	r3, r2
 800499e:	f000 80dd 	beq.w	8004b5c <HAL_ADC_IRQHandler+0x1fc>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049a2:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80049a4:	0490      	lsls	r0, r2, #18
 80049a6:	d415      	bmi.n	80049d4 <HAL_ADC_IRQHandler+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	0711      	lsls	r1, r2, #28
 80049ac:	d512      	bpl.n	80049d4 <HAL_ADC_IRQHandler+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	0752      	lsls	r2, r2, #29
 80049b2:	f100 80e1 	bmi.w	8004b78 <HAL_ADC_IRQHandler+0x218>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	f022 020c 	bic.w	r2, r2, #12
 80049bc:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049c8:	04db      	lsls	r3, r3, #19
 80049ca:	d403      	bmi.n	80049d4 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7fe fb2b 	bl	8003030 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	220c      	movs	r2, #12
 80049de:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049e0:	06a8      	lsls	r0, r5, #26
 80049e2:	d54d      	bpl.n	8004a80 <HAL_ADC_IRQHandler+0x120>
 80049e4:	06b1      	lsls	r1, r6, #26
 80049e6:	d54b      	bpl.n	8004a80 <HAL_ADC_IRQHandler+0x120>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049ea:	06d1      	lsls	r1, r2, #27
 80049ec:	d403      	bmi.n	80049f6 <HAL_ADC_IRQHandler+0x96>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f4:	65e2      	str	r2, [r4, #92]	; 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049f6:	496a      	ldr	r1, [pc, #424]	; (8004ba0 <HAL_ADC_IRQHandler+0x240>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049fa:	68d8      	ldr	r0, [r3, #12]
 80049fc:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049fe:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8004a02:	d068      	beq.n	8004ad6 <HAL_ADC_IRQHandler+0x176>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a04:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a06:	b9d2      	cbnz	r2, 8004a3e <HAL_ADC_IRQHandler+0xde>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a08:	018a      	lsls	r2, r1, #6
 8004a0a:	f100 809f 	bmi.w	8004b4c <HAL_ADC_IRQHandler+0x1ec>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	0650      	lsls	r0, r2, #25
 8004a12:	d514      	bpl.n	8004a3e <HAL_ADC_IRQHandler+0xde>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a14:	0289      	lsls	r1, r1, #10
 8004a16:	d412      	bmi.n	8004a3e <HAL_ADC_IRQHandler+0xde>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	0712      	lsls	r2, r2, #28
 8004a1c:	f100 80b5 	bmi.w	8004b8a <HAL_ADC_IRQHandler+0x22a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a26:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2e:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a32:	05d8      	lsls	r0, r3, #23
 8004a34:	d403      	bmi.n	8004a3e <HAL_ADC_IRQHandler+0xde>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 fc0e 	bl	8005260 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	2260      	movs	r2, #96	; 0x60
 8004a48:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a4a:	0629      	lsls	r1, r5, #24
 8004a4c:	d501      	bpl.n	8004a52 <HAL_ADC_IRQHandler+0xf2>
 8004a4e:	0632      	lsls	r2, r6, #24
 8004a50:	d455      	bmi.n	8004afe <HAL_ADC_IRQHandler+0x19e>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004a52:	05e8      	lsls	r0, r5, #23
 8004a54:	d501      	bpl.n	8004a5a <HAL_ADC_IRQHandler+0xfa>
 8004a56:	05f1      	lsls	r1, r6, #23
 8004a58:	d45c      	bmi.n	8004b14 <HAL_ADC_IRQHandler+0x1b4>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004a5a:	05aa      	lsls	r2, r5, #22
 8004a5c:	d501      	bpl.n	8004a62 <HAL_ADC_IRQHandler+0x102>
 8004a5e:	05b0      	lsls	r0, r6, #22
 8004a60:	d441      	bmi.n	8004ae6 <HAL_ADC_IRQHandler+0x186>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004a62:	06e9      	lsls	r1, r5, #27
 8004a64:	d501      	bpl.n	8004a6a <HAL_ADC_IRQHandler+0x10a>
 8004a66:	06f2      	lsls	r2, r6, #27
 8004a68:	d40f      	bmi.n	8004a8a <HAL_ADC_IRQHandler+0x12a>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a6a:	056d      	lsls	r5, r5, #21
 8004a6c:	d501      	bpl.n	8004a72 <HAL_ADC_IRQHandler+0x112>
 8004a6e:	0570      	lsls	r0, r6, #21
 8004a70:	d45c      	bmi.n	8004b2c <HAL_ADC_IRQHandler+0x1cc>
}
 8004a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004a74:	0728      	lsls	r0, r5, #28
 8004a76:	d5b3      	bpl.n	80049e0 <HAL_ADC_IRQHandler+0x80>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a78:	0731      	lsls	r1, r6, #28
 8004a7a:	d483      	bmi.n	8004984 <HAL_ADC_IRQHandler+0x24>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a7c:	06a8      	lsls	r0, r5, #26
 8004a7e:	d4b1      	bmi.n	80049e4 <HAL_ADC_IRQHandler+0x84>
 8004a80:	066a      	lsls	r2, r5, #25
 8004a82:	d5e2      	bpl.n	8004a4a <HAL_ADC_IRQHandler+0xea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a84:	0670      	lsls	r0, r6, #25
 8004a86:	d5e0      	bpl.n	8004a4a <HAL_ADC_IRQHandler+0xea>
 8004a88:	e7ae      	b.n	80049e8 <HAL_ADC_IRQHandler+0x88>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004a8a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004a8c:	b132      	cbz	r2, 8004a9c <HAL_ADC_IRQHandler+0x13c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004a8e:	2f00      	cmp	r7, #0
 8004a90:	d06e      	beq.n	8004b70 <HAL_ADC_IRQHandler+0x210>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004a92:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_ADC_IRQHandler+0x23c>)
 8004a94:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004a96:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_ADC_IRQHandler+0x154>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa2:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004aa4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004aa6:	f043 0302 	orr.w	r3, r3, #2
 8004aaa:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ff55 	bl	800495c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e7d7      	b.n	8004a6a <HAL_ADC_IRQHandler+0x10a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004aba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004abc:	06d8      	lsls	r0, r3, #27
 8004abe:	d403      	bmi.n	8004ac8 <HAL_ADC_IRQHandler+0x168>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ac0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ac2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ac6:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fbd1 	bl	8005270 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e752      	b.n	800497c <HAL_ADC_IRQHandler+0x1c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ad6:	21c1      	movs	r1, #193	; 0xc1
 8004ad8:	40f9      	lsrs	r1, r7
 8004ada:	07c9      	lsls	r1, r1, #31
 8004adc:	d492      	bmi.n	8004a04 <HAL_ADC_IRQHandler+0xa4>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ade:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004ae2:	68c9      	ldr	r1, [r1, #12]
 8004ae4:	e78f      	b.n	8004a06 <HAL_ADC_IRQHandler+0xa6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ae6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aec:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 fbbc 	bl	800526c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e7b1      	b.n	8004a62 <HAL_ADC_IRQHandler+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004afe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b04:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b06:	4620      	mov	r0, r4
 8004b08:	f7ff ff26 	bl	8004958 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e79e      	b.n	8004a52 <HAL_ADC_IRQHandler+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fba3 	bl	8005268 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e796      	b.n	8004a5a <HAL_ADC_IRQHandler+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004b2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b32:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004b34:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004b40:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004b42:	6019      	str	r1, [r3, #0]
}
 8004b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004b48:	f000 bb8c 	b.w	8005264 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b4c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004b50:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b54:	4302      	orrs	r2, r0
 8004b56:	f47f af72 	bne.w	8004a3e <HAL_ADC_IRQHandler+0xde>
 8004b5a:	e758      	b.n	8004a0e <HAL_ADC_IRQHandler+0xae>
 8004b5c:	f240 2221 	movw	r2, #545	; 0x221
 8004b60:	40fa      	lsrs	r2, r7
 8004b62:	07d2      	lsls	r2, r2, #31
 8004b64:	f53f af1d 	bmi.w	80049a2 <HAL_ADC_IRQHandler+0x42>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	e719      	b.n	80049a4 <HAL_ADC_IRQHandler+0x44>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	07d7      	lsls	r7, r2, #31
 8004b74:	d59e      	bpl.n	8004ab4 <HAL_ADC_IRQHandler+0x154>
 8004b76:	e791      	b.n	8004a9c <HAL_ADC_IRQHandler+0x13c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b7a:	f043 0310 	orr.w	r3, r3, #16
 8004b7e:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6623      	str	r3, [r4, #96]	; 0x60
 8004b88:	e724      	b.n	80049d4 <HAL_ADC_IRQHandler+0x74>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004b8c:	f043 0310 	orr.w	r3, r3, #16
 8004b90:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6623      	str	r3, [r4, #96]	; 0x60
 8004b9a:	e750      	b.n	8004a3e <HAL_ADC_IRQHandler+0xde>
 8004b9c:	50000300 	.word	0x50000300
 8004ba0:	50000100 	.word	0x50000100

08004ba4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ba8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8004bac:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bb0:	d11d      	bne.n	8004bee <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bb2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004bba:	680a      	ldr	r2, [r1, #0]
 8004bbc:	f012 0f08 	tst.w	r2, #8
 8004bc0:	68ca      	ldr	r2, [r1, #12]
 8004bc2:	d01b      	beq.n	8004bfc <ADC_DMAConvCplt+0x58>
 8004bc4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8004bc8:	d10d      	bne.n	8004be6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004bca:	68ca      	ldr	r2, [r1, #12]
 8004bcc:	0494      	lsls	r4, r2, #18
 8004bce:	d40a      	bmi.n	8004be6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bda:	04d1      	lsls	r1, r2, #19
 8004bdc:	d403      	bmi.n	8004be6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fa22 	bl	8003030 <HAL_ADC_ConvCpltCallback>
}
 8004bec:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bee:	06d2      	lsls	r2, r2, #27
 8004bf0:	d40a      	bmi.n	8004c08 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfa:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004bfc:	0790      	lsls	r0, r2, #30
 8004bfe:	d5e7      	bpl.n	8004bd0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fe fa15 	bl	8003030 <HAL_ADC_ConvCpltCallback>
 8004c06:	e7f1      	b.n	8004bec <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fea7 	bl	800495c <HAL_ADC_ErrorCallback>
}
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c10:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004c12:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c14:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c1c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004c1e:	f043 0304 	orr.w	r3, r3, #4
 8004c22:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c24:	f7ff fe9a 	bl	800495c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c28:	bd08      	pop	{r3, pc}
 8004c2a:	bf00      	nop

08004c2c <HAL_ADC_ConfigChannel>:
{
 8004c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004c2e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004c32:	b083      	sub	sp, #12
 8004c34:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004c36:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004c3e:	f000 8141 	beq.w	8004ec4 <HAL_ADC_ConfigChannel+0x298>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c42:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004c44:	2001      	movs	r0, #1
 8004c46:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c4a:	68a2      	ldr	r2, [r4, #8]
 8004c4c:	0756      	lsls	r6, r2, #29
 8004c4e:	d44c      	bmi.n	8004cea <HAL_ADC_ConfigChannel+0xbe>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c50:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8004c52:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c54:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8004c58:	f00c 0c0c 	and.w	ip, ip, #12
 8004c5c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8004c60:	f000 001f 	and.w	r0, r0, #31
 8004c64:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004c68:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8004c6c:	261f      	movs	r6, #31
 8004c6e:	4082      	lsls	r2, r0
 8004c70:	fa06 f000 	lsl.w	r0, r6, r0
 8004c74:	ea25 0000 	bic.w	r0, r5, r0
 8004c78:	4302      	orrs	r2, r0
 8004c7a:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c7e:	68a2      	ldr	r2, [r4, #8]
 8004c80:	0755      	lsls	r5, r2, #29
 8004c82:	d543      	bpl.n	8004d0c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c84:	68a2      	ldr	r2, [r4, #8]
 8004c86:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c88:	68a2      	ldr	r2, [r4, #8]
 8004c8a:	f012 0f01 	tst.w	r2, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c8e:	4602      	mov	r2, r0
 8004c90:	d10c      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004c92:	4dbf      	ldr	r5, [pc, #764]	; (8004f90 <HAL_ADC_ConfigChannel+0x364>)
 8004c94:	68ce      	ldr	r6, [r1, #12]
 8004c96:	42ae      	cmp	r6, r5
 8004c98:	f000 80bc 	beq.w	8004e14 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004c9c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8004ca0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8004ca4:	ea21 0100 	bic.w	r1, r1, r0
 8004ca8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cac:	49b9      	ldr	r1, [pc, #740]	; (8004f94 <HAL_ADC_ConfigChannel+0x368>)
 8004cae:	420a      	tst	r2, r1
 8004cb0:	d02a      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004cb2:	49b9      	ldr	r1, [pc, #740]	; (8004f98 <HAL_ADC_ConfigChannel+0x36c>)
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004cb4:	4db9      	ldr	r5, [pc, #740]	; (8004f9c <HAL_ADC_ConfigChannel+0x370>)
 8004cb6:	6888      	ldr	r0, [r1, #8]
 8004cb8:	42aa      	cmp	r2, r5
 8004cba:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8004cbe:	d01d      	beq.n	8004cfc <HAL_ADC_ConfigChannel+0xd0>
 8004cc0:	4db7      	ldr	r5, [pc, #732]	; (8004fa0 <HAL_ADC_ConfigChannel+0x374>)
 8004cc2:	42aa      	cmp	r2, r5
 8004cc4:	d01a      	beq.n	8004cfc <HAL_ADC_ConfigChannel+0xd0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cc6:	4db7      	ldr	r5, [pc, #732]	; (8004fa4 <HAL_ADC_ConfigChannel+0x378>)
 8004cc8:	42aa      	cmp	r2, r5
 8004cca:	f040 812d 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x2fc>
 8004cce:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004cd2:	d119      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cd4:	4ab4      	ldr	r2, [pc, #720]	; (8004fa8 <HAL_ADC_ConfigChannel+0x37c>)
 8004cd6:	4294      	cmp	r4, r2
 8004cd8:	d016      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004cda:	688a      	ldr	r2, [r1, #8]
 8004cdc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004ce0:	4332      	orrs	r2, r6
 8004ce2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ce6:	608a      	str	r2, [r1, #8]
}
 8004ce8:	e003      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0xc6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cec:	f042 0220 	orr.w	r2, r2, #32
 8004cf0:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004cf8:	b003      	add	sp, #12
 8004cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cfc:	0202      	lsls	r2, r0, #8
 8004cfe:	d403      	bmi.n	8004d08 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d00:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004d04:	f000 80f1 	beq.w	8004eea <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e7f2      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004d0c:	68a2      	ldr	r2, [r4, #8]
 8004d0e:	0710      	lsls	r0, r2, #28
 8004d10:	d47e      	bmi.n	8004e10 <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d12:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d14:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d16:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004d1a:	f000 8119 	beq.w	8004f50 <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d1e:	0dee      	lsrs	r6, r5, #23
 8004d20:	f104 0c14 	add.w	ip, r4, #20
 8004d24:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8004d28:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8004d2c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8004d30:	2707      	movs	r7, #7
 8004d32:	40aa      	lsls	r2, r5
 8004d34:	fa07 f505 	lsl.w	r5, r7, r5
 8004d38:	ea20 0005 	bic.w	r0, r0, r5
 8004d3c:	4302      	orrs	r2, r0
 8004d3e:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d42:	6962      	ldr	r2, [r4, #20]
 8004d44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d48:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d4a:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d4e:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d50:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d52:	d02d      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d54:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d58:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004d5c:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 8004d5e:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 8004d62:	4f92      	ldr	r7, [pc, #584]	; (8004fac <HAL_ADC_ConfigChannel+0x380>)
 8004d64:	4096      	lsls	r6, r2
 8004d66:	680a      	ldr	r2, [r1, #0]
 8004d68:	ea0c 0707 	and.w	r7, ip, r7
 8004d6c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8004d70:	433a      	orrs	r2, r7
 8004d72:	4332      	orrs	r2, r6
 8004d74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d78:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d7c:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8004d7e:	698e      	ldr	r6, [r1, #24]
 8004d80:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8004d84:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004d88:	4332      	orrs	r2, r6
 8004d8a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d8e:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004d90:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004d92:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8004d96:	f1a5 0501 	sub.w	r5, r5, #1
 8004d9a:	fab5 f585 	clz	r5, r5
 8004d9e:	096d      	lsrs	r5, r5, #5
 8004da0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004da4:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8004da8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8004dac:	6808      	ldr	r0, [r1, #0]
}
 8004dae:	e76b      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004db0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004db2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004db4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004db6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dba:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	f040 80fc 	bne.w	8004fbc <HAL_ADC_ConfigChannel+0x390>
 8004dc4:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dc8:	42aa      	cmp	r2, r5
 8004dca:	f000 8170 	beq.w	80050ae <HAL_ADC_ConfigChannel+0x482>
 8004dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dd0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dd6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004dda:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8004dde:	42ae      	cmp	r6, r5
 8004de0:	f000 8153 	beq.w	800508a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004de4:	6896      	ldr	r6, [r2, #8]
 8004de6:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004de8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dec:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004df0:	42ae      	cmp	r6, r5
 8004df2:	f000 8138 	beq.w	8005066 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004df6:	68d6      	ldr	r6, [r2, #12]
 8004df8:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dfa:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dfe:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8004e02:	4295      	cmp	r5, r2
 8004e04:	f47f af40 	bne.w	8004c88 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e0e:	603a      	str	r2, [r7, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
}
 8004e12:	e739      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8004e14:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004e18:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8004e1c:	432a      	orrs	r2, r5
 8004e1e:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e22:	2d00      	cmp	r5, #0
 8004e24:	d051      	beq.n	8004eca <HAL_ADC_ConfigChannel+0x29e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	f000 80f7 	beq.w	800501e <HAL_ADC_ConfigChannel+0x3f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004e30:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e34:	3201      	adds	r2, #1
 8004e36:	f002 021f 	and.w	r2, r2, #31
 8004e3a:	2a09      	cmp	r2, #9
 8004e3c:	f240 80ef 	bls.w	800501e <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	f000 814e 	beq.w	80050e6 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8004e4a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e4e:	3501      	adds	r5, #1
 8004e50:	06ad      	lsls	r5, r5, #26
 8004e52:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004e5a:	2a00      	cmp	r2, #0
 8004e5c:	f000 8148 	beq.w	80050f0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8004e60:	fab2 f282 	clz	r2, r2
 8004e64:	3201      	adds	r2, #1
 8004e66:	f002 021f 	and.w	r2, r2, #31
 8004e6a:	2601      	movs	r6, #1
 8004e6c:	fa06 f202 	lsl.w	r2, r6, r2
 8004e70:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004e76:	2800      	cmp	r0, #0
 8004e78:	f000 8138 	beq.w	80050ec <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004e7c:	fab0 f080 	clz	r0, r0
 8004e80:	3001      	adds	r0, #1
 8004e82:	f000 001f 	and.w	r0, r0, #31
 8004e86:	2203      	movs	r2, #3
 8004e88:	f06f 061d 	mvn.w	r6, #29
 8004e8c:	fb12 6200 	smlabb	r2, r2, r0, r6
 8004e90:	0512      	lsls	r2, r2, #20
 8004e92:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e96:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e98:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8004e9a:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e9c:	f005 0504 	and.w	r5, r5, #4
 8004ea0:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8004ea4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8004eac:	f04f 0e07 	mov.w	lr, #7
 8004eb0:	5970      	ldr	r0, [r6, r5]
 8004eb2:	fa0e f202 	lsl.w	r2, lr, r2
 8004eb6:	ea20 0202 	bic.w	r2, r0, r2
 8004eba:	ea42 020c 	orr.w	r2, r2, ip
 8004ebe:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ec0:	680a      	ldr	r2, [r1, #0]
}
 8004ec2:	e6f3      	b.n	8004cac <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8004ec4:	2002      	movs	r0, #2
}
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004eca:	0e82      	lsrs	r2, r0, #26
 8004ecc:	3201      	adds	r2, #1
 8004ece:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed2:	2809      	cmp	r0, #9
 8004ed4:	d84e      	bhi.n	8004f74 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ed6:	0695      	lsls	r5, r2, #26
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4082      	lsls	r2, r0
 8004edc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004ee0:	4315      	orrs	r5, r2
 8004ee2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004ee6:	0512      	lsls	r2, r2, #20
 8004ee8:	e7d5      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004eea:	492b      	ldr	r1, [pc, #172]	; (8004f98 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eec:	4830      	ldr	r0, [pc, #192]	; (8004fb0 <HAL_ADC_ConfigChannel+0x384>)
 8004eee:	688a      	ldr	r2, [r1, #8]
 8004ef0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004ef4:	4332      	orrs	r2, r6
 8004ef6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004efa:	608a      	str	r2, [r1, #8]
 8004efc:	6802      	ldr	r2, [r0, #0]
 8004efe:	492d      	ldr	r1, [pc, #180]	; (8004fb4 <HAL_ADC_ConfigChannel+0x388>)
 8004f00:	0992      	lsrs	r2, r2, #6
 8004f02:	fba1 1202 	umull	r1, r2, r1, r2
 8004f06:	0992      	lsrs	r2, r2, #6
 8004f08:	3201      	adds	r2, #1
 8004f0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	2a00      	cmp	r2, #0
 8004f16:	f43f aef7 	beq.w	8004d08 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8004f1a:	9a01      	ldr	r2, [sp, #4]
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004f20:	9a01      	ldr	r2, [sp, #4]
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	d1f9      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x2ee>
 8004f26:	e6ef      	b.n	8004d08 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f28:	4d23      	ldr	r5, [pc, #140]	; (8004fb8 <HAL_ADC_ConfigChannel+0x38c>)
 8004f2a:	42aa      	cmp	r2, r5
 8004f2c:	f47f aeec 	bne.w	8004d08 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f30:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8004f34:	f47f aee8 	bne.w	8004d08 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_ADC_ConfigChannel+0x37c>)
 8004f3a:	4294      	cmp	r4, r2
 8004f3c:	f43f aee4 	beq.w	8004d08 <HAL_ADC_ConfigChannel+0xdc>
 8004f40:	688a      	ldr	r2, [r1, #8]
 8004f42:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004f46:	4332      	orrs	r2, r6
 8004f48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004f4c:	608a      	str	r2, [r1, #8]
}
 8004f4e:	e6d0      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f50:	0dea      	lsrs	r2, r5, #23
 8004f52:	f002 0204 	and.w	r2, r2, #4
 8004f56:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 8004f5a:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8004f5e:	2607      	movs	r6, #7
 8004f60:	40ae      	lsls	r6, r5
 8004f62:	5885      	ldr	r5, [r0, r2]
 8004f64:	ea25 0506 	bic.w	r5, r5, r6
 8004f68:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004f6a:	6962      	ldr	r2, [r4, #20]
 8004f6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f70:	6162      	str	r2, [r4, #20]
}
 8004f72:	e6ea      	b.n	8004d4a <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f74:	0695      	lsls	r5, r2, #26
 8004f76:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8004f7a:	3a1e      	subs	r2, #30
 8004f7c:	2601      	movs	r6, #1
 8004f7e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004f82:	0512      	lsls	r2, r2, #20
 8004f84:	fa06 f000 	lsl.w	r0, r6, r0
 8004f88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f8c:	4305      	orrs	r5, r0
 8004f8e:	e782      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x26a>
 8004f90:	407f0000 	.word	0x407f0000
 8004f94:	80080000 	.word	0x80080000
 8004f98:	50000300 	.word	0x50000300
 8004f9c:	c3210000 	.word	0xc3210000
 8004fa0:	90c00010 	.word	0x90c00010
 8004fa4:	c7520000 	.word	0xc7520000
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	03fff000 	.word	0x03fff000
 8004fb0:	20000534 	.word	0x20000534
 8004fb4:	053e2d63 	.word	0x053e2d63
 8004fb8:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004fc0:	b11d      	cbz	r5, 8004fca <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 8004fc2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fc6:	42aa      	cmp	r2, r5
 8004fc8:	d071      	beq.n	80050ae <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fcc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fce:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fd2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004fd6:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004fde:	b11d      	cbz	r5, 8004fe8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8004fe0:	fab5 f585 	clz	r5, r5
 8004fe4:	42ae      	cmp	r6, r5
 8004fe6:	d050      	beq.n	800508a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fe8:	6895      	ldr	r5, [r2, #8]
 8004fea:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fec:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ff0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004ff8:	b11d      	cbz	r5, 8005002 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004ffa:	fab5 f585 	clz	r5, r5
 8004ffe:	42ae      	cmp	r6, r5
 8005000:	d031      	beq.n	8005066 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005002:	68d5      	ldr	r5, [r2, #12]
 8005004:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005006:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800500a:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005012:	2d00      	cmp	r5, #0
 8005014:	f43f ae38 	beq.w	8004c88 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8005018:	fab5 f585 	clz	r5, r5
 800501c:	e6f1      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005022:	2d00      	cmp	r5, #0
 8005024:	d059      	beq.n	80050da <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8005026:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800502a:	3501      	adds	r5, #1
 800502c:	06ad      	lsls	r5, r5, #26
 800502e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8005036:	2a00      	cmp	r2, #0
 8005038:	d04d      	beq.n	80050d6 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 800503a:	fab2 f282 	clz	r2, r2
 800503e:	3201      	adds	r2, #1
 8005040:	f002 021f 	and.w	r2, r2, #31
 8005044:	2601      	movs	r6, #1
 8005046:	fa06 f202 	lsl.w	r2, r6, r2
 800504a:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005050:	2800      	cmp	r0, #0
 8005052:	d045      	beq.n	80050e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005054:	fab0 f280 	clz	r2, r0
 8005058:	3201      	adds	r2, #1
 800505a:	f002 021f 	and.w	r2, r2, #31
 800505e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005062:	0512      	lsls	r2, r2, #20
 8005064:	e717      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800506c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800506e:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005070:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005072:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005076:	68d2      	ldr	r2, [r2, #12]
 8005078:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800507c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005080:	2d00      	cmp	r5, #0
 8005082:	d1c4      	bne.n	800500e <HAL_ADC_ConfigChannel+0x3e2>
 8005084:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005088:	e6bb      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 800508a:	6838      	ldr	r0, [r7, #0]
 800508c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005090:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005092:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005094:	6808      	ldr	r0, [r1, #0]
 8005096:	6896      	ldr	r6, [r2, #8]
 8005098:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800509c:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050a0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	d1a5      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x3c8>
 80050a8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80050ac:	e6a0      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 80050ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80050b0:	4622      	mov	r2, r4
 80050b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80050b6:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050bc:	6808      	ldr	r0, [r1, #0]
 80050be:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80050c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050c4:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050c8:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	d184      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x3ae>
 80050d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80050d4:	e683      	b.n	8004dde <HAL_ADC_ConfigChannel+0x1b2>
 80050d6:	2202      	movs	r2, #2
 80050d8:	e7b7      	b.n	800504a <HAL_ADC_ConfigChannel+0x41e>
 80050da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050de:	e7a8      	b.n	8005032 <HAL_ADC_ConfigChannel+0x406>
 80050e0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80050e4:	e6d7      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x26a>
 80050e6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050ea:	e6b4      	b.n	8004e56 <HAL_ADC_ConfigChannel+0x22a>
 80050ec:	4a01      	ldr	r2, [pc, #4]	; (80050f4 <HAL_ADC_ConfigChannel+0x4c8>)
 80050ee:	e6d2      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x26a>
 80050f0:	2202      	movs	r2, #2
 80050f2:	e6bd      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x244>
 80050f4:	fe500000 	.word	0xfe500000

080050f8 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	07d2      	lsls	r2, r2, #31
 80050fe:	d501      	bpl.n	8005104 <ADC_Enable+0xc>
  return HAL_OK;
 8005100:	2000      	movs	r0, #0
}
 8005102:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <ADC_Enable+0x70>)
 8005108:	4211      	tst	r1, r2
{
 800510a:	b570      	push	{r4, r5, r6, lr}
 800510c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800510e:	d008      	beq.n	8005122 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005110:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005112:	f043 0310 	orr.w	r3, r3, #16
 8005116:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005118:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800511a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800511c:	4303      	orrs	r3, r0
 800511e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8005120:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	4d11      	ldr	r5, [pc, #68]	; (800516c <ADC_Enable+0x74>)
 8005126:	402a      	ands	r2, r5
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800512e:	f7ff faf1 	bl	8004714 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005132:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005134:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	07d0      	lsls	r0, r2, #31
 800513a:	d413      	bmi.n	8005164 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	07d1      	lsls	r1, r2, #31
 8005140:	d404      	bmi.n	800514c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	402a      	ands	r2, r5
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800514c:	f7ff fae2 	bl	8004714 <HAL_GetTick>
 8005150:	1b03      	subs	r3, r0, r4
 8005152:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005154:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005156:	d9ee      	bls.n	8005136 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	07d2      	lsls	r2, r2, #31
 800515c:	d5d8      	bpl.n	8005110 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	07d0      	lsls	r0, r2, #31
 8005162:	d5eb      	bpl.n	800513c <ADC_Enable+0x44>
  return HAL_OK;
 8005164:	2000      	movs	r0, #0
}
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	8000003f 	.word	0x8000003f
 800516c:	7fffffc0 	.word	0x7fffffc0

08005170 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005170:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_ADC_Start_DMA+0xdc>)
{
 8005172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005176:	f8d3 8008 	ldr.w	r8, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800517a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800517c:	689d      	ldr	r5, [r3, #8]
 800517e:	f015 0504 	ands.w	r5, r5, #4
 8005182:	d116      	bne.n	80051b2 <HAL_ADC_Start_DMA+0x42>
    __HAL_LOCK(hadc);
 8005184:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005188:	2b01      	cmp	r3, #1
 800518a:	4604      	mov	r4, r0
 800518c:	d011      	beq.n	80051b2 <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800518e:	f008 081f 	and.w	r8, r8, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005192:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 8005196:	f04f 0c01 	mov.w	ip, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800519a:	fa23 f308 	lsr.w	r3, r3, r8
 800519e:	ea13 030c 	ands.w	r3, r3, ip
    __HAL_LOCK(hadc);
 80051a2:	f880 c058 	strb.w	ip, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80051a6:	d107      	bne.n	80051b8 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80051a8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80051ac:	4660      	mov	r0, ip
}
 80051ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80051b2:	2002      	movs	r0, #2
}
 80051b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80051b8:	460e      	mov	r6, r1
 80051ba:	4617      	mov	r7, r2
 80051bc:	f7ff ff9c 	bl	80050f8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d13b      	bne.n	800523c <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80051c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051c6:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80051c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051d6:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <HAL_ADC_Start_DMA+0xe0>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	d033      	beq.n	8005244 <HAL_ADC_Start_DMA+0xd4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051e2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051e8:	4d1a      	ldr	r5, [pc, #104]	; (8005254 <HAL_ADC_Start_DMA+0xe4>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051ea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051ee:	bf1c      	itt	ne
 80051f0:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80051f2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80051f6:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051f8:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051fa:	4d17      	ldr	r5, [pc, #92]	; (8005258 <HAL_ADC_Start_DMA+0xe8>)
 80051fc:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051fe:	4d17      	ldr	r5, [pc, #92]	; (800525c <HAL_ADC_Start_DMA+0xec>)
 8005200:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005202:	251c      	movs	r5, #28
 8005204:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8005206:	2500      	movs	r5, #0
 8005208:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800520c:	684d      	ldr	r5, [r1, #4]
 800520e:	f045 0510 	orr.w	r5, r5, #16
 8005212:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005214:	68cd      	ldr	r5, [r1, #12]
 8005216:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800521a:	463b      	mov	r3, r7
 800521c:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800521e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005220:	3140      	adds	r1, #64	; 0x40
 8005222:	f000 fb0b 	bl	800583c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005226:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8005228:	6893      	ldr	r3, [r2, #8]
 800522a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800522e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6093      	str	r3, [r2, #8]
}
 8005238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800523c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005244:	f1b8 0f00 	cmp.w	r8, #0
 8005248:	d0c8      	beq.n	80051dc <HAL_ADC_Start_DMA+0x6c>
 800524a:	e7cb      	b.n	80051e4 <HAL_ADC_Start_DMA+0x74>
 800524c:	50000300 	.word	0x50000300
 8005250:	50000100 	.word	0x50000100
 8005254:	08004ba5 	.word	0x08004ba5
 8005258:	0800494d 	.word	0x0800494d
 800525c:	08004c11 	.word	0x08004c11

08005260 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop

08005264 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop

0800526c <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <HAL_ADCEx_EndOfSamplingCallback>:
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005274:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005276:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800527a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800527c:	2a01      	cmp	r2, #1
{
 800527e:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8005280:	d047      	beq.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005282:	6804      	ldr	r4, [r0, #0]
 8005284:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005286:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005288:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800528a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800528e:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005290:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005294:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005296:	d007      	beq.n	80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005298:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800529a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800529e:	f041 0120 	orr.w	r1, r1, #32
 80052a2:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80052a4:	b01d      	add	sp, #116	; 0x74
 80052a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052a8:	4d26      	ldr	r5, [pc, #152]	; (8005344 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 80052aa:	68aa      	ldr	r2, [r5, #8]
 80052ac:	0752      	lsls	r2, r2, #29
 80052ae:	d50a      	bpl.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052b0:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052b4:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80052b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052ba:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80052c2:	b01d      	add	sp, #116	; 0x74
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	68a0      	ldr	r0, [r4, #8]
 80052c8:	f010 0004 	ands.w	r0, r0, #4
 80052cc:	d1f1      	bne.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052ce:	b31e      	cbz	r6, 8005318 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80052d0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8005348 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80052d4:	684f      	ldr	r7, [r1, #4]
 80052d6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80052da:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80052de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052e2:	433a      	orrs	r2, r7
 80052e4:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80052e8:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052ec:	68a2      	ldr	r2, [r4, #8]
 80052ee:	07d4      	lsls	r4, r2, #31
 80052f0:	d426      	bmi.n	8005340 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80052f2:	68a8      	ldr	r0, [r5, #8]
 80052f4:	f010 0001 	ands.w	r0, r0, #1
 80052f8:	d119      	bne.n	800532e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 80052fa:	688a      	ldr	r2, [r1, #8]
 80052fc:	f8de 1008 	ldr.w	r1, [lr, #8]
 8005300:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8005304:	4332      	orrs	r2, r6
 8005306:	f021 010f 	bic.w	r1, r1, #15
 800530a:	430a      	orrs	r2, r1
 800530c:	f8ce 2008 	str.w	r2, [lr, #8]
 8005310:	e7d4      	b.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8005312:	2002      	movs	r0, #2
}
 8005314:	b01d      	add	sp, #116	; 0x74
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005318:	490b      	ldr	r1, [pc, #44]	; (8005348 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800531a:	688a      	ldr	r2, [r1, #8]
 800531c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005320:	608a      	str	r2, [r1, #8]
 8005322:	68a2      	ldr	r2, [r4, #8]
 8005324:	68a8      	ldr	r0, [r5, #8]
 8005326:	4310      	orrs	r0, r2
 8005328:	f010 0001 	ands.w	r0, r0, #1
 800532c:	d001      	beq.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800532e:	2000      	movs	r0, #0
 8005330:	e7c4      	b.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005332:	688a      	ldr	r2, [r1, #8]
 8005334:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005338:	f022 020f 	bic.w	r2, r2, #15
 800533c:	608a      	str	r2, [r1, #8]
 800533e:	e7bd      	b.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8005340:	68aa      	ldr	r2, [r5, #8]
 8005342:	e7bb      	b.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8005344:	50000100 	.word	0x50000100
 8005348:	50000300 	.word	0x50000300

0800534c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800534c:	b1b0      	cbz	r0, 800537c <HAL_CORDIC_Init+0x30>
{
 800534e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005350:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005354:	4604      	mov	r4, r0
 8005356:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800535a:	b153      	cbz	r3, 8005372 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800535c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800535e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005360:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005362:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8005366:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 800536a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800536e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8005370:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8005372:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8005376:	f7fe fa6b 	bl	8003850 <HAL_CORDIC_MspInit>
 800537a:	e7ef      	b.n	800535c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 800537c:	2001      	movs	r0, #1
}
 800537e:	4770      	bx	lr

08005380 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005380:	4907      	ldr	r1, [pc, #28]	; (80053a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005382:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005384:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005386:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800538a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005390:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005392:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800539a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <HAL_NVIC_SetPriority+0x74>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053ac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ae:	f1c3 0e07 	rsb	lr, r3, #7
 80053b2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053ba:	bf28      	it	cs
 80053bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c0:	f1bc 0f06 	cmp.w	ip, #6
 80053c4:	d91b      	bls.n	80053fe <HAL_NVIC_SetPriority+0x5a>
 80053c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c8:	f04f 3cff 	mov.w	ip, #4294967295
 80053cc:	fa0c fc03 	lsl.w	ip, ip, r3
 80053d0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d4:	f04f 3cff 	mov.w	ip, #4294967295
 80053d8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80053dc:	ea21 010c 	bic.w	r1, r1, ip
 80053e0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80053e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80053e8:	db0c      	blt.n	8005404 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ea:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053ee:	0109      	lsls	r1, r1, #4
 80053f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053f4:	b2c9      	uxtb	r1, r1
 80053f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80053fe:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005400:	4613      	mov	r3, r2
 8005402:	e7e7      	b.n	80053d4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005404:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_NVIC_SetPriority+0x78>)
 8005406:	f000 000f 	and.w	r0, r0, #15
 800540a:	0109      	lsls	r1, r1, #4
 800540c:	4403      	add	r3, r0
 800540e:	b2c9      	uxtb	r1, r1
 8005410:	7619      	strb	r1, [r3, #24]
 8005412:	f85d fb04 	ldr.w	pc, [sp], #4
 8005416:	bf00      	nop
 8005418:	e000ed00 	.word	0xe000ed00
 800541c:	e000ecfc 	.word	0xe000ecfc

08005420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005420:	2800      	cmp	r0, #0
 8005422:	db07      	blt.n	8005434 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_NVIC_EnableIRQ+0x18>)
 8005426:	0941      	lsrs	r1, r0, #5
 8005428:	2301      	movs	r3, #1
 800542a:	f000 001f 	and.w	r0, r0, #31
 800542e:	4083      	lsls	r3, r0
 8005430:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e100 	.word	0xe000e100

0800543c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800543c:	3801      	subs	r0, #1
 800543e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005442:	d210      	bcs.n	8005466 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005444:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005446:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544a:	4c08      	ldr	r4, [pc, #32]	; (800546c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800544c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8005452:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005456:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005458:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800545a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800545c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800545e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005462:	6119      	str	r1, [r3, #16]
 8005464:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005466:	2001      	movs	r0, #1
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005470:	b188      	cbz	r0, 8005496 <HAL_DAC_Init+0x26>
{
 8005472:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005474:	7903      	ldrb	r3, [r0, #4]
 8005476:	4604      	mov	r4, r0
 8005478:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800547c:	b13b      	cbz	r3, 800548e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800547e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005480:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005482:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005484:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005486:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005488:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800548a:	4618      	mov	r0, r3
}
 800548c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800548e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005490:	f7fe fa22 	bl	80038d8 <HAL_DAC_MspInit>
 8005494:	e7f3      	b.n	800547e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005496:	2001      	movs	r0, #1
}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop

0800549c <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800549e:	7943      	ldrb	r3, [r0, #5]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d02e      	beq.n	8005502 <HAL_DAC_Start+0x66>
 80054a4:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a6:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054a8:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 80054aa:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 80054ac:	2001      	movs	r0, #1
 80054ae:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 80054b0:	460d      	mov	r5, r1
 80054b2:	f005 0710 	and.w	r7, r5, #16
 80054b6:	6811      	ldr	r1, [r2, #0]
 80054b8:	fa00 f307 	lsl.w	r3, r0, r7
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80054c0:	f7ff f92e 	bl	8004720 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054c4:	6822      	ldr	r2, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 80054c6:	b96d      	cbnz	r5, 80054e4 <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054c8:	6813      	ldr	r3, [r2, #0]
 80054ca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80054ce:	42b3      	cmp	r3, r6
 80054d0:	d103      	bne.n	80054da <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80054d2:	6853      	ldr	r3, [r2, #4]
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054da:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80054dc:	2301      	movs	r3, #1
 80054de:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80054e0:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	40be      	lsls	r6, r7
 80054e8:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80054ec:	42b3      	cmp	r3, r6
 80054ee:	d1f4      	bne.n	80054da <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80054f0:	6853      	ldr	r3, [r2, #4]
 80054f2:	f043 0302 	orr.w	r3, r3, #2
 80054f6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 80054f8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80054fa:	2301      	movs	r3, #1
 80054fc:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80054fe:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8005500:	e7ef      	b.n	80054e2 <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 8005502:	2002      	movs	r0, #2
}
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	bf00      	nop

08005508 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005508:	b410      	push	{r4}
 800550a:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800550c:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 800550e:	2400      	movs	r4, #0
 8005510:	9401      	str	r4, [sp, #4]
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005512:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005514:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005516:	b951      	cbnz	r1, 800552e <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005518:	9901      	ldr	r1, [sp, #4]
 800551a:	3108      	adds	r1, #8
 800551c:	440a      	add	r2, r1
 800551e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005520:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8005522:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8005524:	6013      	str	r3, [r2, #0]
}
 8005526:	b003      	add	sp, #12
 8005528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552c:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800552e:	9901      	ldr	r1, [sp, #4]
 8005530:	3114      	adds	r1, #20
 8005532:	440a      	add	r2, r1
 8005534:	9201      	str	r2, [sp, #4]
 8005536:	e7f3      	b.n	8005520 <HAL_DAC_SetValue+0x18>

08005538 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005538:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800553a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 800553e:	2b01      	cmp	r3, #1
 8005540:	f000 80d0 	beq.w	80056e4 <HAL_DAC_ConfigChannel+0x1ac>
 8005544:	2301      	movs	r3, #1
{
 8005546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800554a:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 800554e:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005550:	f04f 0302 	mov.w	r3, #2
 8005554:	4605      	mov	r5, r0
 8005556:	460f      	mov	r7, r1
 8005558:	4616      	mov	r6, r2
 800555a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800555c:	d07d      	beq.n	800565a <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800555e:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005560:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d108      	bne.n	800557c <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 800556a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800556c:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800556e:	211f      	movs	r1, #31
 8005570:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005572:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005574:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005578:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800557a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800557c:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 800557e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005580:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005582:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005584:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005588:	d063      	beq.n	8005652 <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800558a:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	bf16      	itet	ne
 8005590:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8005594:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005598:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800559c:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800559e:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055a2:	f1a4 0401 	sub.w	r4, r4, #1
 80055a6:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80055aa:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055ae:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80055b0:	fab8 f888 	clz	r8, r8
 80055b4:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055b8:	0264      	lsls	r4, r4, #9
 80055ba:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 80055be:	ea44 040c 	orr.w	r4, r4, ip
 80055c2:	ea44 040e 	orr.w	r4, r4, lr
 80055c6:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80055c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055cc:	40b2      	lsls	r2, r6
 80055ce:	430a      	orrs	r2, r1
 80055d0:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80055d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d8:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80055da:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80055e2:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055e6:	d074      	beq.n	80056d2 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80055e8:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055ec:	40b4      	lsls	r4, r6
 80055ee:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055f2:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80055f4:	6803      	ldr	r3, [r0, #0]
 80055f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055fa:	40b2      	lsls	r2, r6
 80055fc:	ea23 0302 	bic.w	r3, r3, r2
 8005600:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005602:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8005606:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005608:	f640 71fe 	movw	r1, #4094	; 0xffe
 800560c:	40b1      	lsls	r1, r6
 800560e:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005612:	fa02 f106 	lsl.w	r1, r2, r6
 8005616:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005618:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 800561a:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800561c:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005624:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005626:	24c0      	movs	r4, #192	; 0xc0
 8005628:	6802      	ldr	r2, [r0, #0]
 800562a:	40b4      	lsls	r4, r6
 800562c:	ea22 0204 	bic.w	r2, r2, r4
 8005630:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005632:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005634:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005638:	40b1      	lsls	r1, r6
 800563a:	ea22 0201 	bic.w	r2, r2, r1
 800563e:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005640:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005642:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005644:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005646:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8005648:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 800564a:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 800564c:	7169      	strb	r1, [r5, #5]
}
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005652:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 8005654:	f04f 0e00 	mov.w	lr, #0
 8005658:	e7a0      	b.n	800559c <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 800565a:	f7ff f85b 	bl	8004714 <HAL_GetTick>
 800565e:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 8005660:	b12e      	cbz	r6, 800566e <HAL_DAC_ConfigChannel+0x136>
 8005662:	e014      	b.n	800568e <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005664:	f7ff f856 	bl	8004714 <HAL_GetTick>
 8005668:	1b03      	subs	r3, r0, r4
 800566a:	2b01      	cmp	r3, #1
 800566c:	d83c      	bhi.n	80056e8 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	d4f6      	bmi.n	8005664 <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 8005676:	2001      	movs	r0, #1
 8005678:	f7ff f852 	bl	8004720 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800567c:	6828      	ldr	r0, [r5, #0]
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	6403      	str	r3, [r0, #64]	; 0x40
 8005682:	e00e      	b.n	80056a2 <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005684:	f7ff f846 	bl	8004714 <HAL_GetTick>
 8005688:	1b03      	subs	r3, r0, r4
 800568a:	2b01      	cmp	r3, #1
 800568c:	d82c      	bhi.n	80056e8 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	dbf6      	blt.n	8005684 <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 8005696:	2001      	movs	r0, #1
 8005698:	f7ff f842 	bl	8004720 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800569c:	6828      	ldr	r0, [r5, #0]
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80056a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80056a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056a6:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80056aa:	f006 0610 	and.w	r6, r6, #16
 80056ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80056b2:	40b1      	lsls	r1, r6
 80056b4:	40b2      	lsls	r2, r6
 80056b6:	ea23 0301 	bic.w	r3, r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80056c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c2:	21ff      	movs	r1, #255	; 0xff
 80056c4:	40b1      	lsls	r1, r6
 80056c6:	40b2      	lsls	r2, r6
 80056c8:	ea23 0301 	bic.w	r3, r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	64c3      	str	r3, [r0, #76]	; 0x4c
 80056d0:	e748      	b.n	8005564 <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80056d2:	f001 fc1f 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <HAL_DAC_ConfigChannel+0x1d0>)
 80056d8:	4298      	cmp	r0, r3
 80056da:	d90d      	bls.n	80056f8 <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 80056dc:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80056de:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80056e2:	e783      	b.n	80055ec <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 80056e4:	2002      	movs	r0, #2
}
 80056e6:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056e8:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056ea:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056ec:	f043 0308 	orr.w	r3, r3, #8
 80056f0:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 80056f2:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056f4:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 80056f6:	e7aa      	b.n	800564e <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_DAC_ConfigChannel+0x1d4>)
 80056fa:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80056fc:	bf88      	it	hi
 80056fe:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 8005702:	6828      	ldr	r0, [r5, #0]
 8005704:	e772      	b.n	80055ec <HAL_DAC_ConfigChannel+0xb4>
 8005706:	bf00      	nop
 8005708:	09896800 	.word	0x09896800
 800570c:	04c4b400 	.word	0x04c4b400

08005710 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005710:	2800      	cmp	r0, #0
 8005712:	d078      	beq.n	8005806 <HAL_DMA_Init+0xf6>
{
 8005714:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005716:	4b3d      	ldr	r3, [pc, #244]	; (800580c <HAL_DMA_Init+0xfc>)
 8005718:	6804      	ldr	r4, [r0, #0]
 800571a:	429c      	cmp	r4, r3
 800571c:	d95f      	bls.n	80057de <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <HAL_DMA_Init+0x100>)
 8005720:	4b3c      	ldr	r3, [pc, #240]	; (8005814 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8005722:	493d      	ldr	r1, [pc, #244]	; (8005818 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005724:	4422      	add	r2, r4
 8005726:	fba3 3202 	umull	r3, r2, r3, r2
 800572a:	0912      	lsrs	r2, r2, #4
 800572c:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800572e:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005730:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005732:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8005736:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005738:	4e36      	ldr	r6, [pc, #216]	; (8005814 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800573a:	4f34      	ldr	r7, [pc, #208]	; (800580c <HAL_DMA_Init+0xfc>)
 800573c:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005740:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8005742:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005744:	430b      	orrs	r3, r1
 8005746:	6941      	ldr	r1, [r0, #20]
 8005748:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574a:	6981      	ldr	r1, [r0, #24]
 800574c:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 800574e:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005750:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005754:	69c1      	ldr	r1, [r0, #28]
 8005756:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005758:	b2e1      	uxtb	r1, r4
 800575a:	3908      	subs	r1, #8
 800575c:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005760:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005762:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005766:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005768:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 800576c:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800576e:	4e2b      	ldr	r6, [pc, #172]	; (800581c <HAL_DMA_Init+0x10c>)
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005772:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005776:	42bc      	cmp	r4, r7
 8005778:	bf98      	it	ls
 800577a:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800577c:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005780:	4c28      	ldr	r4, [pc, #160]	; (8005824 <HAL_DMA_Init+0x114>)
 8005782:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005784:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005788:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800578a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800578e:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005790:	6484      	str	r4, [r0, #72]	; 0x48
 8005792:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005796:	d02b      	beq.n	80057f0 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005798:	6845      	ldr	r5, [r0, #4]
 800579a:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800579c:	3d01      	subs	r5, #1
 800579e:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057a0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057a8:	d828      	bhi.n	80057fc <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057ac:	4d1f      	ldr	r5, [pc, #124]	; (800582c <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057b0:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057b2:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057b4:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057b6:	f004 041f 	and.w	r4, r4, #31
 80057ba:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057be:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057c0:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057c4:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057c6:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c8:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ca:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80057cc:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ce:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80057d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80057d4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80057d8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80057da:	4618      	mov	r0, r3
}
 80057dc:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_DMA_Init+0x124>)
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 80057e2:	4915      	ldr	r1, [pc, #84]	; (8005838 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057e4:	4422      	add	r2, r4
 80057e6:	fba3 3202 	umull	r3, r2, r3, r2
 80057ea:	0912      	lsrs	r2, r2, #4
 80057ec:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80057ee:	e79e      	b.n	800572e <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057f0:	2400      	movs	r4, #0
 80057f2:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f8:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80057fc:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80057fe:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005802:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005804:	e7e1      	b.n	80057ca <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8005806:	2001      	movs	r0, #1
}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40020407 	.word	0x40020407
 8005810:	bffdfbf8 	.word	0xbffdfbf8
 8005814:	cccccccd 	.word	0xcccccccd
 8005818:	40020400 	.word	0x40020400
 800581c:	40020800 	.word	0x40020800
 8005820:	40020820 	.word	0x40020820
 8005824:	40020880 	.word	0x40020880
 8005828:	1000823f 	.word	0x1000823f
 800582c:	40020940 	.word	0x40020940
 8005830:	40020900 	.word	0x40020900
 8005834:	bffdfff8 	.word	0xbffdfff8
 8005838:	40020000 	.word	0x40020000

0800583c <HAL_DMA_Start_IT>:
{
 800583c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800583e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8005842:	2c01      	cmp	r4, #1
 8005844:	d051      	beq.n	80058ea <HAL_DMA_Start_IT+0xae>
 8005846:	2401      	movs	r4, #1
 8005848:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800584c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8005850:	2c01      	cmp	r4, #1
 8005852:	d005      	beq.n	8005860 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8005854:	2300      	movs	r3, #0
 8005856:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800585a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800585c:	2002      	movs	r0, #2
}
 800585e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005860:	2402      	movs	r4, #2
 8005862:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005866:	2400      	movs	r4, #0
 8005868:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800586a:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 800586e:	6825      	ldr	r5, [r4, #0]
 8005870:	f025 0501 	bic.w	r5, r5, #1
 8005874:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005876:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 800587a:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800587c:	b115      	cbz	r5, 8005884 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587e:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8005882:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005884:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8005886:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005888:	f006 0c1f 	and.w	ip, r6, #31
 800588c:	2601      	movs	r6, #1
 800588e:	fa06 f60c 	lsl.w	r6, r6, ip
 8005892:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8005894:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005896:	6883      	ldr	r3, [r0, #8]
 8005898:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800589a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 800589c:	bf0b      	itete	eq
 800589e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80058a0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80058a2:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80058a4:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80058a6:	b1bb      	cbz	r3, 80058d8 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f043 030e 	orr.w	r3, r3, #14
 80058ae:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	03d2      	lsls	r2, r2, #15
 80058b6:	d503      	bpl.n	80058c0 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058be:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80058c0:	b11d      	cbz	r5, 80058ca <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80058d0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80058d2:	6023      	str	r3, [r4, #0]
}
 80058d4:	bcf0      	pop	{r4, r5, r6, r7}
 80058d6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	f043 030a 	orr.w	r3, r3, #10
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	e7e2      	b.n	80058b0 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 80058ea:	2002      	movs	r0, #2
}
 80058ec:	bcf0      	pop	{r4, r5, r6, r7}
 80058ee:	4770      	bx	lr

080058f0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80058f4:	2a02      	cmp	r2, #2
{
 80058f6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f8:	d009      	beq.n	800590e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058fa:	2204      	movs	r2, #4
 80058fc:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80058fe:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005900:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8005902:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8005904:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800590c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800590e:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005910:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8005912:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005914:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005916:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005918:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800591a:	f020 000e 	bic.w	r0, r0, #14
 800591e:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8005926:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8005928:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800592a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 800592c:	f020 0001 	bic.w	r0, r0, #1
 8005930:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005932:	f001 011f 	and.w	r1, r1, #31
 8005936:	2201      	movs	r2, #1
 8005938:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800593a:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800593e:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005940:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8005942:	b138      	cbz	r0, 8005954 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005944:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005946:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800594a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800594e:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005950:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005954:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8005956:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005958:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800595c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8005960:	bc30      	pop	{r4, r5}
 8005962:	4770      	bx	lr

08005964 <HAL_DMA_Abort_IT>:
{
 8005964:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005966:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800596a:	2b02      	cmp	r3, #2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 800596e:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005970:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8005972:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005974:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005976:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 800597a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 800597e:	4618      	mov	r0, r3
}
 8005980:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005982:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005984:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005986:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800598a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598c:	f021 010e 	bic.w	r1, r1, #14
 8005990:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	f021 0101 	bic.w	r1, r1, #1
 8005998:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800599a:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800599c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800599e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059a4:	f002 021f 	and.w	r2, r2, #31
 80059a8:	2301      	movs	r3, #1
 80059aa:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ac:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059b0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b2:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80059b4:	b132      	cbz	r2, 80059c4 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059b6:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b8:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c0:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c2:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80059c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80059c6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80059c8:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80059ca:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80059ce:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80059d2:	b113      	cbz	r3, 80059da <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 80059d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	4620      	mov	r0, r4
}
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	4618      	mov	r0, r3
}
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop

080059e0 <HAL_DMA_IRQHandler>:
{
 80059e0:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059e4:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80059e6:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059e8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80059ea:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2204      	movs	r2, #4
 80059f2:	409a      	lsls	r2, r3
 80059f4:	420a      	tst	r2, r1
 80059f6:	d00e      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x36>
 80059f8:	f014 0f04 	tst.w	r4, #4
 80059fc:	d00b      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059fe:	682b      	ldr	r3, [r5, #0]
 8005a00:	069b      	lsls	r3, r3, #26
 8005a02:	d403      	bmi.n	8005a0c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	f023 0304 	bic.w	r3, r3, #4
 8005a0a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8005a0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a0e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8005a10:	b1cb      	cbz	r3, 8005a46 <HAL_DMA_IRQHandler+0x66>
}
 8005a12:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8005a14:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a16:	2202      	movs	r2, #2
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	420a      	tst	r2, r1
 8005a1c:	d015      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8005a1e:	f014 0f02 	tst.w	r4, #2
 8005a22:	d012      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	0699      	lsls	r1, r3, #26
 8005a28:	d406      	bmi.n	8005a38 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a2a:	682b      	ldr	r3, [r5, #0]
 8005a2c:	f023 030a 	bic.w	r3, r3, #10
 8005a30:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8005a38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a3a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x32>
}
 8005a46:	bc70      	pop	{r4, r5, r6}
 8005a48:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	420a      	tst	r2, r1
 8005a50:	d0f9      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8005a52:	0722      	lsls	r2, r4, #28
 8005a54:	d5f7      	bpl.n	8005a46 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a56:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8005a58:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a5a:	f022 020e 	bic.w	r2, r2, #14
 8005a5e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a60:	2201      	movs	r2, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8005a66:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a68:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a6a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005a6c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8005a70:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d0e6      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x66>
}
 8005a78:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005a7a:	4708      	bx	r1

08005a7c <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f000 80d9 	beq.w	8005c34 <HAL_FDCAN_Init+0x1b8>
{
 8005a82:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a84:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005a88:	4604      	mov	r4, r0
 8005a8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d071      	beq.n	8005b76 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	6993      	ldr	r3, [r2, #24]
 8005a96:	f023 0310 	bic.w	r3, r3, #16
 8005a9a:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a9c:	f7fe fe3a 	bl	8004714 <HAL_GetTick>
 8005aa0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005aa2:	e004      	b.n	8005aae <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005aa4:	f7fe fe36 	bl	8004714 <HAL_GetTick>
 8005aa8:	1b43      	subs	r3, r0, r5
 8005aaa:	2b0a      	cmp	r3, #10
 8005aac:	d85a      	bhi.n	8005b64 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	0711      	lsls	r1, r2, #28
 8005ab4:	d4f6      	bmi.n	8005aa4 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	f042 0201 	orr.w	r2, r2, #1
 8005abc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005abe:	f7fe fe29 	bl	8004714 <HAL_GetTick>
 8005ac2:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ac4:	e004      	b.n	8005ad0 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ac6:	f7fe fe25 	bl	8004714 <HAL_GetTick>
 8005aca:	1b40      	subs	r0, r0, r5
 8005acc:	280a      	cmp	r0, #10
 8005ace:	d849      	bhi.n	8005b64 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	07d2      	lsls	r2, r2, #31
 8005ad6:	d5f6      	bpl.n	8005ac6 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ad8:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005ada:	4959      	ldr	r1, [pc, #356]	; (8005c40 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005adc:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8005ae0:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ae2:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8005ae4:	f000 80a1 	beq.w	8005c2a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005ae8:	7c22      	ldrb	r2, [r4, #16]
 8005aea:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	bf0c      	ite	eq
 8005af0:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005af4:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8005af8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005afa:	7c62      	ldrb	r2, [r4, #17]
 8005afc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	bf0c      	ite	eq
 8005b02:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b06:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8005b0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b0c:	7ca2      	ldrb	r2, [r4, #18]
 8005b0e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	bf0c      	ite	eq
 8005b14:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b18:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8005b1c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b22:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b28:	4302      	orrs	r2, r0
 8005b2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b32:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b34:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b36:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b38:	f022 0210 	bic.w	r2, r2, #16
 8005b3c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b3e:	d01f      	beq.n	8005b80 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b40:	b311      	cbz	r1, 8005b88 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b42:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b44:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b46:	d077      	beq.n	8005c38 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b4c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b4e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b50:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b52:	f042 0210 	orr.w	r2, r2, #16
 8005b56:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b58:	d116      	bne.n	8005b88 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b5a:	699a      	ldr	r2, [r3, #24]
 8005b5c:	f042 0220 	orr.w	r2, r2, #32
 8005b60:	619a      	str	r2, [r3, #24]
 8005b62:	e011      	b.n	8005b88 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b64:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b66:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005b6e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8005b72:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8005b76:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8005b7a:	f7fd ff6d 	bl	8003a58 <HAL_FDCAN_MspInit>
 8005b7e:	e788      	b.n	8005a92 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	f042 0204 	orr.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b88:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b8c:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b8e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b90:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b92:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b96:	6a21      	ldr	r1, [r4, #32]
 8005b98:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b9a:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b9c:	6961      	ldr	r1, [r4, #20]
 8005b9e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ba4:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ba8:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005baa:	d10e      	bne.n	8005bca <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bac:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bb2:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bb4:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bb6:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bb8:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005bbe:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005bc2:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bc8:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005bce:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bd2:	4302      	orrs	r2, r0
 8005bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005bd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005bdc:	4819      	ldr	r0, [pc, #100]	; (8005c44 <HAL_FDCAN_Init+0x1c8>)
 8005bde:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005be0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005be4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005bec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005bf0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bf6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005bfa:	4913      	ldr	r1, [pc, #76]	; (8005c48 <HAL_FDCAN_Init+0x1cc>)
 8005bfc:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_FDCAN_Init+0x1d0>)

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005c04:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <HAL_FDCAN_Init+0x1d4>)
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005c06:	3140      	adds	r1, #64	; 0x40
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c08:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c0c:	33f0      	adds	r3, #240	; 0xf0
 8005c0e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c12:	2100      	movs	r1, #0
 8005c14:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005c18:	f004 fa72 	bl	800a100 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c1c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c1e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c20:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005c22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c26:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8005c28:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <HAL_FDCAN_Init+0x1d8>)
 8005c2c:	6861      	ldr	r1, [r4, #4]
 8005c2e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 8005c32:	e759      	b.n	8005ae8 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
}
 8005c36:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c38:	f042 0220 	orr.w	r2, r2, #32
 8005c3c:	619a      	str	r2, [r3, #24]
 8005c3e:	e7a3      	b.n	8005b88 <HAL_FDCAN_Init+0x10c>
 8005c40:	40006400 	.word	0x40006400
 8005c44:	4000a400 	.word	0x4000a400
 8005c48:	4000a470 	.word	0x4000a470
 8005c4c:	4000a588 	.word	0x4000a588
 8005c50:	4000a660 	.word	0x4000a660
 8005c54:	40006000 	.word	0x40006000

08005c58 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c58:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8005c5c:	2a01      	cmp	r2, #1
{
 8005c5e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005c60:	d005      	beq.n	8005c6e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c62:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005c64:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8005c68:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005c6c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c6e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c76:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c78:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8005c80:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c82:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop

08005c88 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005c8a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005c8e:	2b02      	cmp	r3, #2
{
 8005c90:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005c92:	d10c      	bne.n	8005cae <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005c94:	6805      	ldr	r5, [r0, #0]
 8005c96:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8005c9a:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8005c9e:	d00d      	beq.n	8005cbc <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005ca0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8005ca6:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005ca8:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8005cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005cae:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005cb0:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8005cb4:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005cb6:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005cbc:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005cc0:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005cc2:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d139      	bne.n	8005d3e <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8005cca:	688b      	ldr	r3, [r1, #8]
 8005ccc:	690f      	ldr	r7, [r1, #16]
 8005cce:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8005cd0:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cd2:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cd6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8005cda:	4303      	orrs	r3, r0
 8005cdc:	6948      	ldr	r0, [r1, #20]
 8005cde:	6a0c      	ldr	r4, [r1, #32]
 8005ce0:	4303      	orrs	r3, r0
 8005ce2:	68c8      	ldr	r0, [r1, #12]
 8005ce4:	4303      	orrs	r3, r0
 8005ce6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005cea:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8005cee:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005cf2:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005cf6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005cfa:	4c15      	ldr	r4, [pc, #84]	; (8005d50 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8005cfc:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005cfe:	89cb      	ldrh	r3, [r1, #14]
 8005d00:	5ce3      	ldrb	r3, [r4, r3]
 8005d02:	b1a3      	cbz	r3, 8005d2e <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d04:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d06:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d08:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d0a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8005d0e:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d10:	433b      	orrs	r3, r7
 8005d12:	7857      	ldrb	r7, [r2, #1]
 8005d14:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d18:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005d1c:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d20:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005d22:	89cb      	ldrh	r3, [r1, #14]
 8005d24:	5ce3      	ldrb	r3, [r4, r3]
 8005d26:	459c      	cmp	ip, r3
 8005d28:	f102 0204 	add.w	r2, r2, #4
 8005d2c:	d3ea      	bcc.n	8005d04 <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005d2e:	2301      	movs	r3, #1
 8005d30:	40b3      	lsls	r3, r6
 8005d32:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8005d36:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005d38:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 8005d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8005d3e:	690b      	ldr	r3, [r1, #16]
 8005d40:	6808      	ldr	r0, [r1, #0]
 8005d42:	ea43 0700 	orr.w	r7, r3, r0
 8005d46:	688b      	ldr	r3, [r1, #8]
 8005d48:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005d4a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8005d4e:	e7c2      	b.n	8005cd6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8005d50:	0800c920 	.word	0x0800c920

08005d54 <HAL_FDCAN_GetRxMessage>:
{
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d58:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8005d5c:	2802      	cmp	r0, #2
 8005d5e:	d10d      	bne.n	8005d7c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005d60:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005d62:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005d66:	d00f      	beq.n	8005d88 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d68:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8005d6c:	0700      	lsls	r0, r0, #28
 8005d6e:	d160      	bne.n	8005e32 <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d70:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8005d76:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d78:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005d7e:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8005d82:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005d84:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005d88:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8005d8c:	0705      	lsls	r5, r0, #28
 8005d8e:	d0ef      	beq.n	8005d70 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d90:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005d94:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d96:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005d9a:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8005d9e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005da2:	6828      	ldr	r0, [r5, #0]
 8005da4:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8005da8:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d150      	bne.n	8005e50 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005dae:	6828      	ldr	r0, [r5, #0]
 8005db0:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8005db4:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005db6:	6828      	ldr	r0, [r5, #0]
 8005db8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8005dbc:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005dbe:	6828      	ldr	r0, [r5, #0]
 8005dc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005dc4:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005dc6:	88a8      	ldrh	r0, [r5, #4]
 8005dc8:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005dca:	6868      	ldr	r0, [r5, #4]
 8005dcc:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8005dd0:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005dd2:	686e      	ldr	r6, [r5, #4]
 8005dd4:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8005dd8:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005dda:	686e      	ldr	r6, [r5, #4]
 8005ddc:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8005de0:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005de2:	79ee      	ldrb	r6, [r5, #7]
 8005de4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005de8:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005dea:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005dec:	4e1a      	ldr	r6, [pc, #104]	; (8005e58 <HAL_FDCAN_GetRxMessage+0x104>)
 8005dee:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005df2:	6868      	ldr	r0, [r5, #4]
 8005df4:	0fc0      	lsrs	r0, r0, #31
 8005df6:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005df8:	f1be 0f00 	cmp.w	lr, #0
 8005dfc:	d011      	beq.n	8005e22 <HAL_FDCAN_GetRxMessage+0xce>
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8005e04:	46f4      	mov	ip, lr
 8005e06:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8005e0a:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005e0e:	89d0      	ldrh	r0, [r2, #14]
 8005e10:	f1ac 0c06 	sub.w	ip, ip, #6
 8005e14:	5c30      	ldrb	r0, [r6, r0]
 8005e16:	ebac 0c05 	sub.w	ip, ip, r5
 8005e1a:	4560      	cmp	r0, ip
 8005e1c:	d8f2      	bhi.n	8005e04 <HAL_FDCAN_GetRxMessage+0xb0>
 8005e1e:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e22:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8005e24:	bf0c      	ite	eq
 8005e26:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8005e2a:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8005e2e:	2000      	movs	r0, #0
}
 8005e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005e32:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005e36:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005e38:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005e3c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8005e40:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e44:	6828      	ldr	r0, [r5, #0]
 8005e46:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8005e4a:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0ae      	beq.n	8005dae <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005e50:	6828      	ldr	r0, [r5, #0]
 8005e52:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005e56:	e7ad      	b.n	8005db4 <HAL_FDCAN_GetRxMessage+0x60>
 8005e58:	0800c920 	.word	0x0800c920

08005e5c <HAL_FDCAN_ActivateNotification>:
{
 8005e5c:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e5e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e62:	3801      	subs	r0, #1
 8005e64:	2801      	cmp	r0, #1
 8005e66:	d905      	bls.n	8005e74 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e6a:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8005e6e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005e72:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005e74:	681b      	ldr	r3, [r3, #0]
{
 8005e76:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005e78:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005e7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005e7e:	d03d      	beq.n	8005efc <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005e80:	07c4      	lsls	r4, r0, #31
 8005e82:	d43b      	bmi.n	8005efc <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005e84:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8005e86:	f044 0401 	orr.w	r4, r4, #1
 8005e8a:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005e8c:	b1cd      	cbz	r5, 8005ec2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005e8e:	07c5      	lsls	r5, r0, #31
 8005e90:	d517      	bpl.n	8005ec2 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005e92:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005e94:	f040 0002 	orr.w	r0, r0, #2
 8005e98:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005e9a:	060c      	lsls	r4, r1, #24
 8005e9c:	d504      	bpl.n	8005ea8 <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005e9e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8005ea2:	4310      	orrs	r0, r2
 8005ea4:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005ea8:	05c8      	lsls	r0, r1, #23
 8005eaa:	d504      	bpl.n	8005eb6 <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005eac:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005eb0:	4302      	orrs	r2, r0
 8005eb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb8:	430a      	orrs	r2, r1
    return HAL_OK;
 8005eba:	2000      	movs	r0, #0
}
 8005ebc:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005ec0:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005ec2:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005ec6:	d001      	beq.n	8005ecc <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005ec8:	0784      	lsls	r4, r0, #30
 8005eca:	d4e2      	bmi.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
 8005ecc:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005ed0:	d131      	bne.n	8005f36 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005ed2:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005ed6:	d001      	beq.n	8005edc <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005ed8:	0704      	lsls	r4, r0, #28
 8005eda:	d4da      	bmi.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
 8005edc:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005ee0:	d001      	beq.n	8005ee6 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005ee2:	06c5      	lsls	r5, r0, #27
 8005ee4:	d4d5      	bmi.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
 8005ee6:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005eea:	d001      	beq.n	8005ef0 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005eec:	0684      	lsls	r4, r0, #26
 8005eee:	d4d0      	bmi.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
 8005ef0:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005ef4:	d0d1      	beq.n	8005e9a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005ef6:	0645      	lsls	r5, r0, #25
 8005ef8:	d5cf      	bpl.n	8005e9a <HAL_FDCAN_ActivateNotification+0x3e>
 8005efa:	e7ca      	b.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005efc:	f011 0f38 	tst.w	r1, #56	; 0x38
 8005f00:	d001      	beq.n	8005f06 <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005f02:	0784      	lsls	r4, r0, #30
 8005f04:	d5be      	bpl.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
 8005f06:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8005f0a:	d117      	bne.n	8005f3c <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005f0c:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8005f10:	d001      	beq.n	8005f16 <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005f12:	0704      	lsls	r4, r0, #28
 8005f14:	d5b6      	bpl.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
 8005f16:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8005f1a:	d001      	beq.n	8005f20 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005f1c:	06c4      	lsls	r4, r0, #27
 8005f1e:	d5b1      	bpl.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
 8005f20:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8005f24:	d001      	beq.n	8005f2a <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005f26:	0684      	lsls	r4, r0, #26
 8005f28:	d5ac      	bpl.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
 8005f2a:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8005f2e:	d0ad      	beq.n	8005e8c <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005f30:	0644      	lsls	r4, r0, #25
 8005f32:	d4ab      	bmi.n	8005e8c <HAL_FDCAN_ActivateNotification+0x30>
 8005f34:	e7a6      	b.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f36:	0745      	lsls	r5, r0, #29
 8005f38:	d4ab      	bmi.n	8005e92 <HAL_FDCAN_ActivateNotification+0x36>
 8005f3a:	e7ca      	b.n	8005ed2 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005f3c:	0744      	lsls	r4, r0, #29
 8005f3e:	d5a1      	bpl.n	8005e84 <HAL_FDCAN_ActivateNotification+0x28>
 8005f40:	e7e4      	b.n	8005f0c <HAL_FDCAN_ActivateNotification+0xb0>
 8005f42:	bf00      	nop

08005f44 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <HAL_FDCAN_RxFifo1Callback>:
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop

08005f4c <HAL_FDCAN_TxFifoEmptyCallback>:
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop

08005f50 <HAL_FDCAN_TxBufferCompleteCallback>:
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop

08005f54 <HAL_FDCAN_TxBufferAbortCallback>:
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop

08005f58 <HAL_FDCAN_TimestampWraparoundCallback>:
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop

08005f5c <HAL_FDCAN_TimeoutOccurredCallback>:
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <HAL_FDCAN_HighPriorityMessageCallback>:
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop

08005f64 <HAL_FDCAN_ErrorCallback>:
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <HAL_FDCAN_ErrorStatusCallback>:
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop

08005f6c <HAL_FDCAN_IRQHandler>:
{
 8005f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f76:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005f7e:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f80:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005f86:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005f88:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8005f8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005f8c:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8005f8e:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f92:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f96:	0652      	lsls	r2, r2, #25
{
 8005f98:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f9a:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f9e:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005fa2:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8005fa6:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005faa:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005fae:	d502      	bpl.n	8005fb6 <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb2:	0651      	lsls	r1, r2, #25
 8005fb4:	d473      	bmi.n	800609e <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb8:	05d2      	lsls	r2, r2, #23
 8005fba:	d502      	bpl.n	8005fc2 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fbe:	05d0      	lsls	r0, r2, #23
 8005fc0:	d45d      	bmi.n	800607e <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8005fc2:	f1b9 0f00 	cmp.w	r9, #0
 8005fc6:	d14a      	bne.n	800605e <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8005fc8:	f1b8 0f00 	cmp.w	r8, #0
 8005fcc:	d137      	bne.n	800603e <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8005fce:	2f00      	cmp	r7, #0
 8005fd0:	d13e      	bne.n	8006050 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fd4:	0591      	lsls	r1, r2, #22
 8005fd6:	d502      	bpl.n	8005fde <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8005fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fda:	0592      	lsls	r2, r2, #22
 8005fdc:	d475      	bmi.n	80060ca <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8005fde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fe0:	0617      	lsls	r7, r2, #24
 8005fe2:	d502      	bpl.n	8005fea <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	0610      	lsls	r0, r2, #24
 8005fe8:	d477      	bmi.n	80060da <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fec:	0491      	lsls	r1, r2, #18
 8005fee:	d502      	bpl.n	8005ff6 <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff2:	0492      	lsls	r2, r2, #18
 8005ff4:	d459      	bmi.n	80060aa <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff8:	0417      	lsls	r7, r2, #16
 8005ffa:	d502      	bpl.n	8006002 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ffe:	0410      	lsls	r0, r2, #16
 8006000:	d45b      	bmi.n	80060ba <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006002:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006004:	0451      	lsls	r1, r2, #17
 8006006:	d509      	bpl.n	800601c <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800600a:	0452      	lsls	r2, r2, #17
 800600c:	d506      	bpl.n	800601c <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800600e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006014:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800601a:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800601c:	b94e      	cbnz	r6, 8006032 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 800601e:	b125      	cbz	r5, 800602a <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006024:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006026:	432b      	orrs	r3, r5
 8006028:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800602a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800602c:	bb13      	cbnz	r3, 8006074 <HAL_FDCAN_IRQHandler+0x108>
}
 800602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006032:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006034:	4631      	mov	r1, r6
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff ff96 	bl	8005f68 <HAL_FDCAN_ErrorStatusCallback>
 800603c:	e7ef      	b.n	800601e <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800603e:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006042:	4641      	mov	r1, r8
 8006044:	4620      	mov	r0, r4
 8006046:	f7fd f989 	bl	800335c <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800604a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 800604c:	2f00      	cmp	r7, #0
 800604e:	d0c0      	beq.n	8005fd2 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006050:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006052:	4639      	mov	r1, r7
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff ff77 	bl	8005f48 <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	e7b9      	b.n	8005fd2 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800605e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006062:	4649      	mov	r1, r9
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff6d 	bl	8005f44 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800606a:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 800606c:	f1b8 0f00 	cmp.w	r8, #0
 8006070:	d0ad      	beq.n	8005fce <HAL_FDCAN_IRQHandler+0x62>
 8006072:	e7e4      	b.n	800603e <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff ff75 	bl	8005f64 <HAL_FDCAN_ErrorCallback>
}
 800607a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800607e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006086:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800608c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800608e:	4620      	mov	r0, r4
 8006090:	f7ff ff60 	bl	8005f54 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006094:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006096:	f1b9 0f00 	cmp.w	r9, #0
 800609a:	d095      	beq.n	8005fc8 <HAL_FDCAN_IRQHandler+0x5c>
 800609c:	e7df      	b.n	800605e <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800609e:	2240      	movs	r2, #64	; 0x40
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80060a2:	f7ff ff5d 	bl	8005f60 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	e785      	b.n	8005fb6 <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80060aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060ae:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7ff ff51 	bl	8005f58 <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	e79d      	b.n	8005ff6 <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80060ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060be:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80060c0:	4620      	mov	r0, r4
 80060c2:	f7ff ff4b 	bl	8005f5c <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	e79b      	b.n	8006002 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80060ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ce:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7ff ff3b 	bl	8005f4c <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	e781      	b.n	8005fde <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80060da:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80060de:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80060e2:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff ff31 	bl	8005f50 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	e77b      	b.n	8005fea <HAL_FDCAN_IRQHandler+0x7e>
 80060f2:	bf00      	nop

080060f4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80060f8:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800624c <HAL_FLASH_Program+0x158>
{
 80060fc:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 80060fe:	f898 3000 	ldrb.w	r3, [r8]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d04f      	beq.n	80061a6 <HAL_FLASH_Program+0xb2>
 8006106:	2301      	movs	r3, #1
 8006108:	4681      	mov	r9, r0
 800610a:	460e      	mov	r6, r1
 800610c:	4617      	mov	r7, r2
 800610e:	f888 3000 	strb.w	r3, [r8]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006112:	f7fe faff 	bl	8004714 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006116:	4d4c      	ldr	r5, [pc, #304]	; (8006248 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 8006118:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800611a:	e006      	b.n	800612a <HAL_FLASH_Program+0x36>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800611c:	f7fe fafa 	bl	8004714 <HAL_GetTick>
 8006120:	eba0 0c04 	sub.w	ip, r0, r4
 8006124:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8006128:	d837      	bhi.n	800619a <HAL_FLASH_Program+0xa6>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800612a:	692b      	ldr	r3, [r5, #16]
 800612c:	03d8      	lsls	r0, r3, #15
 800612e:	d4f5      	bmi.n	800611c <HAL_FLASH_Program+0x28>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006130:	692c      	ldr	r4, [r5, #16]
 8006132:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8006136:	401c      	ands	r4, r3
 8006138:	d146      	bne.n	80061c8 <HAL_FLASH_Program+0xd4>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800613a:	692b      	ldr	r3, [r5, #16]
 800613c:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800613e:	bf44      	itt	mi
 8006140:	2301      	movmi	r3, #1
 8006142:	612b      	strmi	r3, [r5, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006144:	2300      	movs	r3, #0
 8006146:	f8c8 3004 	str.w	r3, [r8, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800614a:	f1b9 0f00 	cmp.w	r9, #0
 800614e:	d02d      	beq.n	80061ac <HAL_FLASH_Program+0xb8>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006150:	f109 33ff 	add.w	r3, r9, #4294967295
 8006154:	2b01      	cmp	r3, #1
 8006156:	d93f      	bls.n	80061d8 <HAL_FLASH_Program+0xe4>
  uint32_t tickstart = HAL_GetTick();
 8006158:	f7fe fadc 	bl	8004714 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800615c:	4e3a      	ldr	r6, [pc, #232]	; (8006248 <HAL_FLASH_Program+0x154>)
  uint32_t tickstart = HAL_GetTick();
 800615e:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006160:	e005      	b.n	800616e <HAL_FLASH_Program+0x7a>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006162:	f7fe fad7 	bl	8004714 <HAL_GetTick>
 8006166:	1b40      	subs	r0, r0, r5
 8006168:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800616c:	d82a      	bhi.n	80061c4 <HAL_FLASH_Program+0xd0>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800616e:	6933      	ldr	r3, [r6, #16]
 8006170:	03db      	lsls	r3, r3, #15
 8006172:	d4f6      	bmi.n	8006162 <HAL_FLASH_Program+0x6e>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006174:	6933      	ldr	r3, [r6, #16]
 8006176:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 800617a:	4013      	ands	r3, r2
 800617c:	d152      	bne.n	8006224 <HAL_FLASH_Program+0x130>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800617e:	6930      	ldr	r0, [r6, #16]
 8006180:	f010 0001 	ands.w	r0, r0, #1
 8006184:	d002      	beq.n	800618c <HAL_FLASH_Program+0x98>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006186:	2201      	movs	r2, #1
 8006188:	6132      	str	r2, [r6, #16]
 800618a:	4618      	mov	r0, r3
    if (prog_bit != 0U)
 800618c:	b134      	cbz	r4, 800619c <HAL_FLASH_Program+0xa8>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800618e:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <HAL_FLASH_Program+0x154>)
 8006190:	6953      	ldr	r3, [r2, #20]
 8006192:	ea23 0304 	bic.w	r3, r3, r4
 8006196:	6153      	str	r3, [r2, #20]
 8006198:	e000      	b.n	800619c <HAL_FLASH_Program+0xa8>
 800619a:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 800619c:	2300      	movs	r3, #0
 800619e:	f888 3000 	strb.w	r3, [r8]
}
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(&pFlash);
 80061a6:	2002      	movs	r0, #2
}
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80061ac:	4a26      	ldr	r2, [pc, #152]	; (8006248 <HAL_FLASH_Program+0x154>)
 80061ae:	6953      	ldr	r3, [r2, #20]
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80061b6:	6037      	str	r7, [r6, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80061b8:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 80061bc:	2401      	movs	r4, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80061be:	f8c6 a004 	str.w	sl, [r6, #4]
      prog_bit = FLASH_CR_PG;
 80061c2:	e7c9      	b.n	8006158 <HAL_FLASH_Program+0x64>
      return HAL_TIMEOUT;
 80061c4:	2003      	movs	r0, #3
 80061c6:	e7e1      	b.n	800618c <HAL_FLASH_Program+0x98>
    pFlash.ErrorCode |= error;
 80061c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80061cc:	4323      	orrs	r3, r4
 80061ce:	f8c8 3004 	str.w	r3, [r8, #4]
    return HAL_ERROR;
 80061d2:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80061d4:	612c      	str	r4, [r5, #16]
  if (status == HAL_OK)
 80061d6:	e7e1      	b.n	800619c <HAL_FLASH_Program+0xa8>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80061d8:	491b      	ldr	r1, [pc, #108]	; (8006248 <HAL_FLASH_Program+0x154>)
 80061da:	694a      	ldr	r2, [r1, #20]
 80061dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80061e0:	463b      	mov	r3, r7
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80061e2:	614a      	str	r2, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061e8:	b672      	cpsid	i
 80061ea:	ea46 0207 	orr.w	r2, r6, r7
 80061ee:	0752      	lsls	r2, r2, #29
 80061f0:	d120      	bne.n	8006234 <HAL_FLASH_Program+0x140>
 80061f2:	1d3a      	adds	r2, r7, #4
 80061f4:	42b2      	cmp	r2, r6
 80061f6:	d01d      	beq.n	8006234 <HAL_FLASH_Program+0x140>
 80061f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061fc:	1af6      	subs	r6, r6, r3
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80061fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006202:	18f2      	adds	r2, r6, r3
 8006204:	3308      	adds	r3, #8
 8006206:	42bb      	cmp	r3, r7
 8006208:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 800620c:	d1f7      	bne.n	80061fe <HAL_FLASH_Program+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	f384 8810 	msr	PRIMASK, r4
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006212:	f1a9 0902 	sub.w	r9, r9, #2
 8006216:	fab9 f989 	clz	r9, r9
 800621a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800621e:	ea4f 4489 	mov.w	r4, r9, lsl #18
 8006222:	e799      	b.n	8006158 <HAL_FLASH_Program+0x64>
    pFlash.ErrorCode |= error;
 8006224:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006228:	431a      	orrs	r2, r3
 800622a:	f8c8 2004 	str.w	r2, [r8, #4]
    return HAL_ERROR;
 800622e:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8006230:	6133      	str	r3, [r6, #16]
    return HAL_ERROR;
 8006232:	e7ab      	b.n	800618c <HAL_FLASH_Program+0x98>
 8006234:	1bf6      	subs	r6, r6, r7
 8006236:	f507 7780 	add.w	r7, r7, #256	; 0x100
    *dest_addr = *src_addr;
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	519a      	str	r2, [r3, r6]
    src_addr++;
 800623e:	3304      	adds	r3, #4
  while (row_index != 0U);
 8006240:	429f      	cmp	r7, r3
 8006242:	d1fa      	bne.n	800623a <HAL_FLASH_Program+0x146>
 8006244:	e7e3      	b.n	800620e <HAL_FLASH_Program+0x11a>
 8006246:	bf00      	nop
 8006248:	40022000 	.word	0x40022000
 800624c:	20000540 	.word	0x20000540

08006250 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_FLASH_Unlock+0x1c>)
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	2a00      	cmp	r2, #0
 8006256:	db01      	blt.n	800625c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2000      	movs	r0, #0
}
 800625a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800625c:	4904      	ldr	r1, [pc, #16]	; (8006270 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800625e:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006260:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006262:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006264:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	0fc0      	lsrs	r0, r0, #31
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40022000 	.word	0x40022000
 8006270:	45670123 	.word	0x45670123
 8006274:	cdef89ab 	.word	0xcdef89ab

08006278 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006278:	4b04      	ldr	r3, [pc, #16]	; (800628c <HAL_FLASH_Lock+0x14>)
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006280:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006282:	6958      	ldr	r0, [r3, #20]
}
 8006284:	43c0      	mvns	r0, r0
 8006286:	0fc0      	lsrs	r0, r0, #31
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40022000 	.word	0x40022000

08006290 <FLASH_WaitForLastOperation>:
{
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7fe fa3e 	bl	8004714 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006298:	4e10      	ldr	r6, [pc, #64]	; (80062dc <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 800629a:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800629c:	e004      	b.n	80062a8 <FLASH_WaitForLastOperation+0x18>
    if ((HAL_GetTick() - tickstart) > Timeout)
 800629e:	f7fe fa39 	bl	8004714 <HAL_GetTick>
 80062a2:	1b03      	subs	r3, r0, r4
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	d80f      	bhi.n	80062c8 <FLASH_WaitForLastOperation+0x38>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80062a8:	6933      	ldr	r3, [r6, #16]
 80062aa:	03db      	lsls	r3, r3, #15
 80062ac:	d4f7      	bmi.n	800629e <FLASH_WaitForLastOperation+0xe>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80062ae:	6933      	ldr	r3, [r6, #16]
 80062b0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 80062b4:	4013      	ands	r3, r2
 80062b6:	d109      	bne.n	80062cc <FLASH_WaitForLastOperation+0x3c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80062b8:	6930      	ldr	r0, [r6, #16]
 80062ba:	f010 0001 	ands.w	r0, r0, #1
 80062be:	d002      	beq.n	80062c6 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80062c0:	2201      	movs	r2, #1
 80062c2:	6132      	str	r2, [r6, #16]
 80062c4:	4618      	mov	r0, r3
}
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80062c8:	2003      	movs	r0, #3
}
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80062cc:	4904      	ldr	r1, [pc, #16]	; (80062e0 <FLASH_WaitForLastOperation+0x50>)
 80062ce:	684a      	ldr	r2, [r1, #4]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 80062d4:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 80062d6:	6133      	str	r3, [r6, #16]
}
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	bf00      	nop
 80062dc:	40022000 	.word	0x40022000
 80062e0:	20000540 	.word	0x20000540

080062e4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80062e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80062e8:	4f53      	ldr	r7, [pc, #332]	; (8006438 <HAL_FLASHEx_Erase+0x154>)
 80062ea:	783b      	ldrb	r3, [r7, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d07a      	beq.n	80063e6 <HAL_FLASHEx_Erase+0x102>
 80062f0:	4681      	mov	r9, r0
 80062f2:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062f8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80062fa:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062fc:	f7ff ffc8 	bl	8006290 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8006300:	4606      	mov	r6, r0
 8006302:	b120      	cbz	r0, 800630e <HAL_FLASHEx_Erase+0x2a>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006304:	2300      	movs	r3, #0
 8006306:	703b      	strb	r3, [r7, #0]

  return status;
}
 8006308:	4630      	mov	r0, r6
 800630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800630e:	4b4b      	ldr	r3, [pc, #300]	; (800643c <HAL_FLASHEx_Erase+0x158>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006310:	6078      	str	r0, [r7, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	f412 7f00 	tst.w	r2, #512	; 0x200
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006318:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800631a:	d168      	bne.n	80063ee <HAL_FLASHEx_Erase+0x10a>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800631c:	0552      	lsls	r2, r2, #21
 800631e:	f140 8089 	bpl.w	8006434 <HAL_FLASHEx_Erase+0x150>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006328:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800632a:	2302      	movs	r3, #2
 800632c:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800632e:	f8d9 3000 	ldr.w	r3, [r9]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d064      	beq.n	8006400 <HAL_FLASHEx_Erase+0x11c>
      *PageError = 0xFFFFFFFFU;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	f8c8 3000 	str.w	r3, [r8]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800633e:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8006342:	442b      	add	r3, r5
 8006344:	429d      	cmp	r5, r3
 8006346:	d224      	bcs.n	8006392 <HAL_FLASHEx_Erase+0xae>
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006348:	4c3c      	ldr	r4, [pc, #240]	; (800643c <HAL_FLASHEx_Erase+0x158>)
 800634a:	e005      	b.n	8006358 <HAL_FLASHEx_Erase+0x74>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800634c:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8006350:	3501      	adds	r5, #1
 8006352:	4413      	add	r3, r2
 8006354:	42ab      	cmp	r3, r5
 8006356:	d91c      	bls.n	8006392 <HAL_FLASHEx_Erase+0xae>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006358:	6962      	ldr	r2, [r4, #20]
 800635a:	00eb      	lsls	r3, r5, #3
 800635c:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8006360:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006364:	4313      	orrs	r3, r2
 8006366:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006368:	6963      	ldr	r3, [r4, #20]
 800636a:	f043 0302 	orr.w	r3, r3, #2
 800636e:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006370:	6963      	ldr	r3, [r4, #20]
 8006372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006376:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800637c:	f7ff ff88 	bl	8006290 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006380:	6963      	ldr	r3, [r4, #20]
 8006382:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8006386:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8006388:	2800      	cmp	r0, #0
 800638a:	d0df      	beq.n	800634c <HAL_FLASHEx_Erase+0x68>
          *PageError = page_index;
 800638c:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006390:	4606      	mov	r6, r0
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006392:	7f3b      	ldrb	r3, [r7, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006394:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8006398:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800639a:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800639c:	d110      	bne.n	80063c0 <HAL_FLASHEx_Erase+0xdc>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800639e:	4a27      	ldr	r2, [pc, #156]	; (800643c <HAL_FLASHEx_Erase+0x158>)
 80063a0:	6811      	ldr	r1, [r2, #0]
 80063a2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80063a6:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80063a8:	6811      	ldr	r1, [r2, #0]
 80063aa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80063ae:	6011      	str	r1, [r2, #0]
 80063b0:	6811      	ldr	r1, [r2, #0]
 80063b2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80063b6:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063b8:	6811      	ldr	r1, [r2, #0]
 80063ba:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80063be:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80063c0:	3b02      	subs	r3, #2
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d80c      	bhi.n	80063e0 <HAL_FLASHEx_Erase+0xfc>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80063c6:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_FLASHEx_Erase+0x158>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063d6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063de:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80063e0:	2300      	movs	r3, #0
 80063e2:	773b      	strb	r3, [r7, #28]
}
 80063e4:	e78e      	b.n	8006304 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 80063e6:	2602      	movs	r6, #2
}
 80063e8:	4630      	mov	r0, r6
 80063ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80063ee:	0551      	lsls	r1, r2, #21
 80063f0:	d51e      	bpl.n	8006430 <HAL_FLASHEx_Erase+0x14c>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f8:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80063fa:	2303      	movs	r3, #3
 80063fc:	773b      	strb	r3, [r7, #28]
 80063fe:	e796      	b.n	800632e <HAL_FLASHEx_Erase+0x4a>
    if ((Banks & FLASH_BANK_1) != 0U)
 8006400:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006404:	07db      	lsls	r3, r3, #31
 8006406:	d504      	bpl.n	8006412 <HAL_FLASHEx_Erase+0x12e>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006408:	4a0c      	ldr	r2, [pc, #48]	; (800643c <HAL_FLASHEx_Erase+0x158>)
 800640a:	6953      	ldr	r3, [r2, #20]
 800640c:	f043 0304 	orr.w	r3, r3, #4
 8006410:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006412:	4c0a      	ldr	r4, [pc, #40]	; (800643c <HAL_FLASHEx_Erase+0x158>)
 8006414:	6963      	ldr	r3, [r4, #20]
 8006416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641a:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800641c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006420:	f7ff ff36 	bl	8006290 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006424:	6963      	ldr	r3, [r4, #20]
 8006426:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800642a:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800642c:	6163      	str	r3, [r4, #20]
 800642e:	e7b0      	b.n	8006392 <HAL_FLASHEx_Erase+0xae>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006430:	773c      	strb	r4, [r7, #28]
 8006432:	e77c      	b.n	800632e <HAL_FLASHEx_Erase+0x4a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006434:	7738      	strb	r0, [r7, #28]
 8006436:	e77a      	b.n	800632e <HAL_FLASHEx_Erase+0x4a>
 8006438:	20000540 	.word	0x20000540
 800643c:	40022000 	.word	0x40022000

08006440 <HAL_FMAC_Init>:
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006440:	2800      	cmp	r0, #0
 8006442:	d047      	beq.n	80064d4 <HAL_FMAC_Init+0x94>
{
 8006444:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006446:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800644a:	4604      	mov	r4, r0
 800644c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006450:	2b00      	cmp	r3, #0
 8006452:	d03a      	beq.n	80064ca <HAL_FMAC_Init+0x8a>
    HAL_FMAC_MspInit(hfmac);
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8006454:	2300      	movs	r3, #0
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
  hfmac->pInputSize = NULL;
  hfmac->InputCurrentSize = 0U;
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006456:	2220      	movs	r2, #32
 8006458:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  hfmac->FilterParam = 0U;
 800645c:	6063      	str	r3, [r4, #4]
  hfmac->pInput = NULL;
 800645e:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8006460:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8006462:	8223      	strh	r3, [r4, #16]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8006464:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 8006466:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8006468:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800646a:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  tickstart = HAL_GetTick();
 800646e:	f7fe f951 	bl	8004714 <HAL_GetTick>
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  tickstart = HAL_GetTick();
 800647a:	4605      	mov	r5, r0
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800647c:	611a      	str	r2, [r3, #16]
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800647e:	e006      	b.n	800648e <HAL_FMAC_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006480:	f7fe f948 	bl	8004714 <HAL_GetTick>
 8006484:	1b43      	subs	r3, r0, r5
 8006486:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800648a:	d80e      	bhi.n	80064aa <HAL_FMAC_Init+0x6a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006494:	d1f4      	bne.n	8006480 <HAL_FMAC_Init+0x40>
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006496:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006498:	2220      	movs	r2, #32
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800649a:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_OK;
 800649c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hfmac);
 800649e:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_READY;
 80064a0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 80064a4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80064aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80064b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064b4:	f043 0310 	orr.w	r3, r3, #16
 80064b8:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80064ba:	22a0      	movs	r2, #160	; 0xa0
  __HAL_UNLOCK(hfmac);
 80064bc:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80064be:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 80064c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    status = HAL_ERROR;
 80064c6:	2001      	movs	r0, #1
}
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
    hfmac->Lock = HAL_UNLOCKED;
 80064ca:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 80064ce:	f7fd fb2b 	bl	8003b28 <HAL_FMAC_MspInit>
 80064d2:	e7bf      	b.n	8006454 <HAL_FMAC_Init+0x14>
    return HAL_ERROR;
 80064d4:	2001      	movs	r0, #1
}
 80064d6:	4770      	bx	lr

080064d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064dc:	680c      	ldr	r4, [r1, #0]
{
 80064de:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064e0:	2c00      	cmp	r4, #0
 80064e2:	d07d      	beq.n	80065e0 <HAL_GPIO_Init+0x108>
 80064e4:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064e8:	4e71      	ldr	r6, [pc, #452]	; (80066b0 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 80064ea:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064ec:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064f0:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064f2:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 80064f6:	ea17 0a04 	ands.w	sl, r7, r4
 80064fa:	d06b      	beq.n	80065d4 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064fc:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006500:	f001 0203 	and.w	r2, r1, #3
 8006504:	1e55      	subs	r5, r2, #1
 8006506:	2d01      	cmp	r5, #1
 8006508:	d96d      	bls.n	80065e6 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800650a:	2a03      	cmp	r2, #3
 800650c:	f040 80b1 	bne.w	8006672 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006510:	fa02 f20c 	lsl.w	r2, r2, ip
 8006514:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006516:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006518:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800651a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800651c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006520:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006522:	d057      	beq.n	80065d4 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006524:	4d63      	ldr	r5, [pc, #396]	; (80066b4 <HAL_GPIO_Init+0x1dc>)
 8006526:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	662a      	str	r2, [r5, #96]	; 0x60
 800652e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006530:	f002 0201 	and.w	r2, r2, #1
 8006534:	9203      	str	r2, [sp, #12]
 8006536:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006538:	f023 0203 	bic.w	r2, r3, #3
 800653c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006540:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006544:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006548:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800654a:	00bf      	lsls	r7, r7, #2
 800654c:	f04f 080f 	mov.w	r8, #15
 8006550:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006554:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006558:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800655c:	d01a      	beq.n	8006594 <HAL_GPIO_Init+0xbc>
 800655e:	4d56      	ldr	r5, [pc, #344]	; (80066b8 <HAL_GPIO_Init+0x1e0>)
 8006560:	42a8      	cmp	r0, r5
 8006562:	f000 8092 	beq.w	800668a <HAL_GPIO_Init+0x1b2>
 8006566:	4d55      	ldr	r5, [pc, #340]	; (80066bc <HAL_GPIO_Init+0x1e4>)
 8006568:	42a8      	cmp	r0, r5
 800656a:	f000 8093 	beq.w	8006694 <HAL_GPIO_Init+0x1bc>
 800656e:	4d54      	ldr	r5, [pc, #336]	; (80066c0 <HAL_GPIO_Init+0x1e8>)
 8006570:	42a8      	cmp	r0, r5
 8006572:	f000 8083 	beq.w	800667c <HAL_GPIO_Init+0x1a4>
 8006576:	4d53      	ldr	r5, [pc, #332]	; (80066c4 <HAL_GPIO_Init+0x1ec>)
 8006578:	42a8      	cmp	r0, r5
 800657a:	f000 8092 	beq.w	80066a2 <HAL_GPIO_Init+0x1ca>
 800657e:	4d52      	ldr	r5, [pc, #328]	; (80066c8 <HAL_GPIO_Init+0x1f0>)
 8006580:	42a8      	cmp	r0, r5
 8006582:	bf0c      	ite	eq
 8006584:	f04f 0805 	moveq.w	r8, #5
 8006588:	f04f 0806 	movne.w	r8, #6
 800658c:	fa08 f707 	lsl.w	r7, r8, r7
 8006590:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006594:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8006598:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 800659a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800659e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 80065a0:	bf54      	ite	pl
 80065a2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065a4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 80065a8:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80065aa:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065ac:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 80065ae:	bf54      	ite	pl
 80065b0:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065b2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 80065b6:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 80065b8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ba:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 80065bc:	bf54      	ite	pl
 80065be:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065c0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 80065c4:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80065c6:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065c8:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 80065ca:	bf54      	ite	pl
 80065cc:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80065ce:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 80065d2:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 80065d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065d6:	fa34 f203 	lsrs.w	r2, r4, r3
 80065da:	f10c 0c02 	add.w	ip, ip, #2
 80065de:	d188      	bne.n	80064f2 <HAL_GPIO_Init+0x1a>
  }
}
 80065e0:	b005      	add	sp, #20
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80065e6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ea:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065ee:	f04f 0803 	mov.w	r8, #3
 80065f2:	fa08 f80c 	lsl.w	r8, r8, ip
 80065f6:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065fa:	fa05 f50c 	lsl.w	r5, r5, ip
 80065fe:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8006602:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006604:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8006608:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800660c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006610:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8006614:	409f      	lsls	r7, r3
 8006616:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800661a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800661c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800661e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006622:	f8de 7008 	ldr.w	r7, [lr, #8]
 8006626:	fa07 f70c 	lsl.w	r7, r7, ip
 800662a:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800662e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006630:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006632:	fa02 f20c 	lsl.w	r2, r2, ip
 8006636:	f47f af6e 	bne.w	8006516 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 800663a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800663e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006642:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8006646:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800664a:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800664c:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006650:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006654:	fa07 f708 	lsl.w	r7, r7, r8
 8006658:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800665a:	270f      	movs	r7, #15
 800665c:	fa07 f808 	lsl.w	r8, r7, r8
 8006660:	9f00      	ldr	r7, [sp, #0]
 8006662:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006666:	9f01      	ldr	r7, [sp, #4]
 8006668:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800666c:	f8c9 7020 	str.w	r7, [r9, #32]
 8006670:	e751      	b.n	8006516 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006672:	2503      	movs	r5, #3
 8006674:	fa05 f50c 	lsl.w	r5, r5, ip
 8006678:	43ed      	mvns	r5, r5
 800667a:	e7cf      	b.n	800661c <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800667c:	f04f 0803 	mov.w	r8, #3
 8006680:	fa08 f707 	lsl.w	r7, r8, r7
 8006684:	ea49 0907 	orr.w	r9, r9, r7
 8006688:	e784      	b.n	8006594 <HAL_GPIO_Init+0xbc>
 800668a:	fa0b f707 	lsl.w	r7, fp, r7
 800668e:	ea49 0907 	orr.w	r9, r9, r7
 8006692:	e77f      	b.n	8006594 <HAL_GPIO_Init+0xbc>
 8006694:	f04f 0802 	mov.w	r8, #2
 8006698:	fa08 f707 	lsl.w	r7, r8, r7
 800669c:	ea49 0907 	orr.w	r9, r9, r7
 80066a0:	e778      	b.n	8006594 <HAL_GPIO_Init+0xbc>
 80066a2:	f04f 0804 	mov.w	r8, #4
 80066a6:	fa08 f707 	lsl.w	r7, r8, r7
 80066aa:	ea49 0907 	orr.w	r9, r9, r7
 80066ae:	e771      	b.n	8006594 <HAL_GPIO_Init+0xbc>
 80066b0:	40010400 	.word	0x40010400
 80066b4:	40021000 	.word	0x40021000
 80066b8:	48000400 	.word	0x48000400
 80066bc:	48000800 	.word	0x48000800
 80066c0:	48000c00 	.word	0x48000c00
 80066c4:	48001000 	.word	0x48001000
 80066c8:	48001400 	.word	0x48001400

080066cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066cc:	b10a      	cbz	r2, 80066d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066ce:	6181      	str	r1, [r0, #24]
 80066d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066d2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop

080066d8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066d8:	4a37      	ldr	r2, [pc, #220]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066da:	b960      	cbnz	r0, 80066f6 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066ea:	d01d      	beq.n	8006728 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066f4:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066f6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80066fa:	d007      	beq.n	800670c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006706:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006708:	6013      	str	r3, [r2, #0]
}
 800670a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800670c:	6813      	ldr	r3, [r2, #0]
 800670e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006716:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800671a:	d02b      	beq.n	8006774 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800671c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8006720:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006722:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006726:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006730:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006732:	4822      	ldr	r0, [pc, #136]	; (80067bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006734:	4922      	ldr	r1, [pc, #136]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800673a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006740:	6803      	ldr	r3, [r0, #0]
 8006742:	2032      	movs	r0, #50	; 0x32
 8006744:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006748:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800674a:	fba1 1303 	umull	r1, r3, r1, r3
 800674e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006750:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006752:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006756:	d506      	bpl.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8006758:	e000      	b.n	800675c <HAL_PWREx_ControlVoltageScaling+0x84>
 800675a:	b123      	cbz	r3, 8006766 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800675c:	6951      	ldr	r1, [r2, #20]
 800675e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8006760:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006764:	d4f9      	bmi.n	800675a <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 800676c:	bf54      	ite	pl
 800676e:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8006770:	2003      	movmi	r0, #3
 8006772:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800677c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800677e:	480f      	ldr	r0, [pc, #60]	; (80067bc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006780:	490f      	ldr	r1, [pc, #60]	; (80067c0 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800678a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800678c:	6803      	ldr	r3, [r0, #0]
 800678e:	2032      	movs	r0, #50	; 0x32
 8006790:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006794:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006796:	fba1 1303 	umull	r1, r3, r1, r3
 800679a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800679c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800679e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a2:	d5e0      	bpl.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80067a4:	e001      	b.n	80067aa <HAL_PWREx_ControlVoltageScaling+0xd2>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0dd      	beq.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80067aa:	6951      	ldr	r1, [r2, #20]
 80067ac:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80067ae:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b2:	d5d8      	bpl.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80067b4:	e7f7      	b.n	80067a6 <HAL_PWREx_ControlVoltageScaling+0xce>
 80067b6:	bf00      	nop
 80067b8:	40007000 	.word	0x40007000
 80067bc:	20000534 	.word	0x20000534
 80067c0:	431bde83 	.word	0x431bde83

080067c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80067c4:	4a02      	ldr	r2, [pc, #8]	; (80067d0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80067c6:	6893      	ldr	r3, [r2, #8]
 80067c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067cc:	6093      	str	r3, [r2, #8]
}
 80067ce:	4770      	bx	lr
 80067d0:	40007000 	.word	0x40007000

080067d4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f000 81c3 	beq.w	8006b60 <HAL_RCC_OscConfig+0x38c>
{
 80067da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067de:	6803      	ldr	r3, [r0, #0]
 80067e0:	07d9      	lsls	r1, r3, #31
{
 80067e2:	b082      	sub	sp, #8
 80067e4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067e6:	d52d      	bpl.n	8006844 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e8:	49a6      	ldr	r1, [pc, #664]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 80067ea:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ec:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ee:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067f2:	2a0c      	cmp	r2, #12
 80067f4:	f000 810a 	beq.w	8006a0c <HAL_RCC_OscConfig+0x238>
 80067f8:	2a08      	cmp	r2, #8
 80067fa:	f000 810c 	beq.w	8006a16 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	f000 8133 	beq.w	8006a6e <HAL_RCC_OscConfig+0x29a>
 8006808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800680c:	f000 819b 	beq.w	8006b46 <HAL_RCC_OscConfig+0x372>
 8006810:	4d9c      	ldr	r5, [pc, #624]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006812:	682a      	ldr	r2, [r5, #0]
 8006814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	682a      	ldr	r2, [r5, #0]
 800681c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006820:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 8128 	bne.w	8006a78 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006828:	f7fd ff74 	bl	8004714 <HAL_GetTick>
 800682c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800682e:	e005      	b.n	800683c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006830:	f7fd ff70 	bl	8004714 <HAL_GetTick>
 8006834:	1b80      	subs	r0, r0, r6
 8006836:	2864      	cmp	r0, #100	; 0x64
 8006838:	f200 8142 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	039f      	lsls	r7, r3, #14
 8006840:	d4f6      	bmi.n	8006830 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	079e      	lsls	r6, r3, #30
 8006846:	d528      	bpl.n	800689a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006848:	4a8e      	ldr	r2, [pc, #568]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 800684a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800684c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800684e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006852:	2b0c      	cmp	r3, #12
 8006854:	f000 80ec 	beq.w	8006a30 <HAL_RCC_OscConfig+0x25c>
 8006858:	2b04      	cmp	r3, #4
 800685a:	f000 80ee 	beq.w	8006a3a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800685e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006860:	4d88      	ldr	r5, [pc, #544]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 811d 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fd ff50 	bl	8004714 <HAL_GetTick>
 8006874:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006876:	e005      	b.n	8006884 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006878:	f7fd ff4c 	bl	8004714 <HAL_GetTick>
 800687c:	1b80      	subs	r0, r0, r6
 800687e:	2802      	cmp	r0, #2
 8006880:	f200 811e 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	0558      	lsls	r0, r3, #21
 8006888:	d5f6      	bpl.n	8006878 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800688a:	686b      	ldr	r3, [r5, #4]
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006892:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006896:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	071a      	lsls	r2, r3, #28
 800689c:	d519      	bpl.n	80068d2 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800689e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068a0:	4d78      	ldr	r5, [pc, #480]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 809e 	beq.w	80069e4 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80068a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b4:	f7fd ff2e 	bl	8004714 <HAL_GetTick>
 80068b8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068ba:	e005      	b.n	80068c8 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068bc:	f7fd ff2a 	bl	8004714 <HAL_GetTick>
 80068c0:	1b80      	subs	r0, r0, r6
 80068c2:	2802      	cmp	r0, #2
 80068c4:	f200 80fc 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068c8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80068cc:	079f      	lsls	r7, r3, #30
 80068ce:	d5f5      	bpl.n	80068bc <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	0759      	lsls	r1, r3, #29
 80068d4:	d541      	bpl.n	800695a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068d6:	4b6b      	ldr	r3, [pc, #428]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 80068d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068da:	00d2      	lsls	r2, r2, #3
 80068dc:	f100 80f4 	bmi.w	8006ac8 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068e6:	659a      	str	r2, [r3, #88]	; 0x58
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80068f2:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f4:	4e64      	ldr	r6, [pc, #400]	; (8006a88 <HAL_RCC_OscConfig+0x2b4>)
 80068f6:	6833      	ldr	r3, [r6, #0]
 80068f8:	05df      	lsls	r7, r3, #23
 80068fa:	f140 8113 	bpl.w	8006b24 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	2b01      	cmp	r3, #1
 8006902:	f000 80e3 	beq.w	8006acc <HAL_RCC_OscConfig+0x2f8>
 8006906:	2b05      	cmp	r3, #5
 8006908:	f000 8169 	beq.w	8006bde <HAL_RCC_OscConfig+0x40a>
 800690c:	4e5d      	ldr	r6, [pc, #372]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 800690e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800691a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 80d7 	bne.w	8006ada <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fd fef2 	bl	8004714 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006934:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006936:	e005      	b.n	8006944 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fd feec 	bl	8004714 <HAL_GetTick>
 800693c:	1bc0      	subs	r0, r0, r7
 800693e:	4540      	cmp	r0, r8
 8006940:	f200 80be 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006944:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8006948:	079a      	lsls	r2, r3, #30
 800694a:	d4f5      	bmi.n	8006938 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800694c:	b125      	cbz	r5, 8006958 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694e:	4a4d      	ldr	r2, [pc, #308]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006950:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006956:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	069b      	lsls	r3, r3, #26
 800695c:	d518      	bpl.n	8006990 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800695e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006960:	4d48      	ldr	r5, [pc, #288]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80ca 	beq.w	8006afc <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8006968:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006974:	f7fd fece 	bl	8004714 <HAL_GetTick>
 8006978:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800697a:	e005      	b.n	8006988 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800697c:	f7fd feca 	bl	8004714 <HAL_GetTick>
 8006980:	1b80      	subs	r0, r0, r6
 8006982:	2802      	cmp	r0, #2
 8006984:	f200 809c 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006988:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800698c:	079f      	lsls	r7, r3, #30
 800698e:	d5f5      	bpl.n	800697c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006990:	69e0      	ldr	r0, [r4, #28]
 8006992:	b318      	cbz	r0, 80069dc <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006994:	4d3b      	ldr	r5, [pc, #236]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006996:	68ab      	ldr	r3, [r5, #8]
 8006998:	f003 030c 	and.w	r3, r3, #12
 800699c:	2b0c      	cmp	r3, #12
 800699e:	f000 812c 	beq.w	8006bfa <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069a4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80069a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069aa:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069ac:	f000 80da 	beq.w	8006b64 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069b0:	68eb      	ldr	r3, [r5, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069b8:	68eb      	ldr	r3, [r5, #12]
 80069ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c2:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fd fea6 	bl	8004714 <HAL_GetTick>
 80069c8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ca:	e004      	b.n	80069d6 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069cc:	f7fd fea2 	bl	8004714 <HAL_GetTick>
 80069d0:	1b00      	subs	r0, r0, r4
 80069d2:	2802      	cmp	r0, #2
 80069d4:	d874      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	019b      	lsls	r3, r3, #6
 80069da:	d4f7      	bmi.n	80069cc <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80069dc:	2000      	movs	r0, #0
}
 80069de:	b002      	add	sp, #8
 80069e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80069e4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 80069f0:	f7fd fe90 	bl	8004714 <HAL_GetTick>
 80069f4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f6:	e004      	b.n	8006a02 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f8:	f7fd fe8c 	bl	8004714 <HAL_GetTick>
 80069fc:	1b80      	subs	r0, r0, r6
 80069fe:	2802      	cmp	r0, #2
 8006a00:	d85e      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a02:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006a06:	0798      	lsls	r0, r3, #30
 8006a08:	d4f6      	bmi.n	80069f8 <HAL_RCC_OscConfig+0x224>
 8006a0a:	e761      	b.n	80068d0 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a0c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a10:	2903      	cmp	r1, #3
 8006a12:	f47f aef4 	bne.w	80067fe <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a16:	4a1b      	ldr	r2, [pc, #108]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	0392      	lsls	r2, r2, #14
 8006a1c:	f57f af12 	bpl.w	8006844 <HAL_RCC_OscConfig+0x70>
 8006a20:	6862      	ldr	r2, [r4, #4]
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	f47f af0e 	bne.w	8006844 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006a28:	2001      	movs	r0, #1
}
 8006a2a:	b002      	add	sp, #8
 8006a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a30:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a34:	2a02      	cmp	r2, #2
 8006a36:	f47f af12 	bne.w	800685e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	055d      	lsls	r5, r3, #21
 8006a40:	d502      	bpl.n	8006a48 <HAL_RCC_OscConfig+0x274>
 8006a42:	68e3      	ldr	r3, [r4, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ef      	beq.n	8006a28 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a48:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006a4a:	6920      	ldr	r0, [r4, #16]
 8006a4c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a4e:	490f      	ldr	r1, [pc, #60]	; (8006a8c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a54:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006a58:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a5a:	6808      	ldr	r0, [r1, #0]
 8006a5c:	f7fd fe18 	bl	8004690 <HAL_InitTick>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1e1      	bne.n	8006a28 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	071a      	lsls	r2, r3, #28
 8006a68:	f57f af33 	bpl.w	80068d2 <HAL_RCC_OscConfig+0xfe>
 8006a6c:	e717      	b.n	800689e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6e:	4a05      	ldr	r2, [pc, #20]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a78:	f7fd fe4c 	bl	8004714 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a7c:	4e01      	ldr	r6, [pc, #4]	; (8006a84 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006a7e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a80:	e00b      	b.n	8006a9a <HAL_RCC_OscConfig+0x2c6>
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
 8006a88:	40007000 	.word	0x40007000
 8006a8c:	2000053c 	.word	0x2000053c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fd fe40 	bl	8004714 <HAL_GetTick>
 8006a94:	1b40      	subs	r0, r0, r5
 8006a96:	2864      	cmp	r0, #100	; 0x64
 8006a98:	d812      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a9a:	6833      	ldr	r3, [r6, #0]
 8006a9c:	039b      	lsls	r3, r3, #14
 8006a9e:	d5f7      	bpl.n	8006a90 <HAL_RCC_OscConfig+0x2bc>
 8006aa0:	e6cf      	b.n	8006842 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006aaa:	f7fd fe33 	bl	8004714 <HAL_GetTick>
 8006aae:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	0559      	lsls	r1, r3, #21
 8006ab4:	d5d6      	bpl.n	8006a64 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab6:	f7fd fe2d 	bl	8004714 <HAL_GetTick>
 8006aba:	1b80      	subs	r0, r0, r6
 8006abc:	2802      	cmp	r0, #2
 8006abe:	d9f7      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8006ac0:	2003      	movs	r0, #3
}
 8006ac2:	b002      	add	sp, #8
 8006ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006ac8:	2500      	movs	r5, #0
 8006aca:	e713      	b.n	80068f4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006acc:	4a65      	ldr	r2, [pc, #404]	; (8006c64 <HAL_RCC_OscConfig+0x490>)
 8006ace:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006ada:	f7fd fe1b 	bl	8004714 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ade:	4f61      	ldr	r7, [pc, #388]	; (8006c64 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006ae0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae6:	e004      	b.n	8006af2 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae8:	f7fd fe14 	bl	8004714 <HAL_GetTick>
 8006aec:	1b80      	subs	r0, r0, r6
 8006aee:	4540      	cmp	r0, r8
 8006af0:	d8e6      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006af6:	0799      	lsls	r1, r3, #30
 8006af8:	d5f6      	bpl.n	8006ae8 <HAL_RCC_OscConfig+0x314>
 8006afa:	e727      	b.n	800694c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006afc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006b08:	f7fd fe04 	bl	8004714 <HAL_GetTick>
 8006b0c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b0e:	e004      	b.n	8006b1a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b10:	f7fd fe00 	bl	8004714 <HAL_GetTick>
 8006b14:	1b80      	subs	r0, r0, r6
 8006b16:	2802      	cmp	r0, #2
 8006b18:	d8d2      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b1a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006b1e:	0798      	lsls	r0, r3, #30
 8006b20:	d4f6      	bmi.n	8006b10 <HAL_RCC_OscConfig+0x33c>
 8006b22:	e735      	b.n	8006990 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b24:	6833      	ldr	r3, [r6, #0]
 8006b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fdf2 	bl	8004714 <HAL_GetTick>
 8006b30:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b32:	6833      	ldr	r3, [r6, #0]
 8006b34:	05d8      	lsls	r0, r3, #23
 8006b36:	f53f aee2 	bmi.w	80068fe <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3a:	f7fd fdeb 	bl	8004714 <HAL_GetTick>
 8006b3e:	1bc0      	subs	r0, r0, r7
 8006b40:	2802      	cmp	r0, #2
 8006b42:	d9f6      	bls.n	8006b32 <HAL_RCC_OscConfig+0x35e>
 8006b44:	e7bc      	b.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b4a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b5c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b5e:	e78b      	b.n	8006a78 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8006b60:	2001      	movs	r0, #1
}
 8006b62:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006b64:	f7fd fdd6 	bl	8004714 <HAL_GetTick>
 8006b68:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b6a:	e004      	b.n	8006b76 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fd fdd2 	bl	8004714 <HAL_GetTick>
 8006b70:	1b80      	subs	r0, r0, r6
 8006b72:	2802      	cmp	r0, #2
 8006b74:	d8a4      	bhi.n	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	0199      	lsls	r1, r3, #6
 8006b7a:	d4f7      	bmi.n	8006b6c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b7c:	68e9      	ldr	r1, [r5, #12]
 8006b7e:	4b3a      	ldr	r3, [pc, #232]	; (8006c68 <HAL_RCC_OscConfig+0x494>)
 8006b80:	6a22      	ldr	r2, [r4, #32]
 8006b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b84:	4e37      	ldr	r6, [pc, #220]	; (8006c64 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b86:	400b      	ands	r3, r1
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8006b8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006b92:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8006b96:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8006b9a:	3801      	subs	r0, #1
 8006b9c:	0849      	lsrs	r1, r1, #1
 8006b9e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006ba2:	3901      	subs	r1, #1
 8006ba4:	0852      	lsrs	r2, r2, #1
 8006ba6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006baa:	3a01      	subs	r2, #1
 8006bac:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006bb0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bb8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bba:	68eb      	ldr	r3, [r5, #12]
 8006bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006bc2:	f7fd fda7 	bl	8004714 <HAL_GetTick>
 8006bc6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc8:	e005      	b.n	8006bd6 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fd fda3 	bl	8004714 <HAL_GetTick>
 8006bce:	1b00      	subs	r0, r0, r4
 8006bd0:	2802      	cmp	r0, #2
 8006bd2:	f63f af75 	bhi.w	8006ac0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	019a      	lsls	r2, r3, #6
 8006bda:	d5f6      	bpl.n	8006bca <HAL_RCC_OscConfig+0x3f6>
 8006bdc:	e6fe      	b.n	80069dc <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bde:	4b21      	ldr	r3, [pc, #132]	; (8006c64 <HAL_RCC_OscConfig+0x490>)
 8006be0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006be4:	f042 0204 	orr.w	r2, r2, #4
 8006be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006bec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bf8:	e76f      	b.n	8006ada <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bfa:	2801      	cmp	r0, #1
 8006bfc:	f43f aeef 	beq.w	80069de <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006c00:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c02:	6a22      	ldr	r2, [r4, #32]
 8006c04:	f003 0103 	and.w	r1, r3, #3
 8006c08:	4291      	cmp	r1, r2
 8006c0a:	f47f af0d 	bne.w	8006a28 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c14:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006c1a:	f47f af05 	bne.w	8006a28 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c24:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006c28:	f47f aefe 	bne.w	8006a28 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c32:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8006c36:	f47f aef7 	bne.w	8006a28 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c3c:	0852      	lsrs	r2, r2, #1
 8006c3e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8006c42:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c44:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8006c48:	f47f aeee 	bne.w	8006a28 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006c4e:	0852      	lsrs	r2, r2, #1
 8006c50:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006c54:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c56:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8006c5a:	bf14      	ite	ne
 8006c5c:	2001      	movne	r0, #1
 8006c5e:	2000      	moveq	r0, #0
 8006c60:	e6bd      	b.n	80069de <HAL_RCC_OscConfig+0x20a>
 8006c62:	bf00      	nop
 8006c64:	40021000 	.word	0x40021000
 8006c68:	019f800c 	.word	0x019f800c

08006c6c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c6e:	b087      	sub	sp, #28

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8006c70:	2302      	movs	r3, #2
 8006c72:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8006c74:	2503      	movs	r5, #3
 8006c76:	2300      	movs	r3, #0
 8006c78:	e9cd 3503 	strd	r3, r5, [sp, #12]
  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8006c7c:	4f0f      	ldr	r7, [pc, #60]	; (8006cbc <HAL_RCC_MCOConfig+0x50>)
{
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4616      	mov	r6, r2
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006c82:	f3c0 4003 	ubfx	r0, r0, #16, #4
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8006c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4083      	lsls	r3, r0
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8006c90:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8006c94:	b2a3      	uxth	r3, r4
 8006c96:	9301      	str	r3, [sp, #4]
{
 8006c98:	460d      	mov	r5, r1
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8006c9a:	f3c4 5307 	ubfx	r3, r4, #20, #8
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8006c9e:	0280      	lsls	r0, r0, #10
 8006ca0:	a901      	add	r1, sp, #4
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8006ca2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8006ca4:	f7ff fc18 	bl	80064d8 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8006ca8:	00e3      	lsls	r3, r4, #3
 8006caa:	d405      	bmi.n	8006cb8 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cb2:	4333      	orrs	r3, r6
 8006cb4:	432b      	orrs	r3, r5
 8006cb6:	60bb      	str	r3, [r7, #8]
  }
}
 8006cb8:	b007      	add	sp, #28
 8006cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006cc0:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x54>)
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	f002 020c 	and.w	r2, r2, #12
 8006cc8:	2a04      	cmp	r2, #4
 8006cca:	d021      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	f002 020c 	and.w	r2, r2, #12
 8006cd2:	2a08      	cmp	r2, #8
 8006cd4:	d01c      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	f002 020c 	and.w	r2, r2, #12
 8006cdc:	2a0c      	cmp	r2, #12
 8006cde:	d001      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8006ce0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8006ce2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ce4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ce6:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ce8:	68d8      	ldr	r0, [r3, #12]
 8006cea:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x58>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cec:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cf0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cf4:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cfa:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x54>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006d06:	3301      	adds	r3, #1
 8006d08:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006d0a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006d0e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x58>)
 8006d12:	4770      	bx	lr
 8006d14:	40021000 	.word	0x40021000
 8006d18:	00f42400 	.word	0x00f42400

08006d1c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f000 80e9 	beq.w	8006ef4 <HAL_RCC_ClockConfig+0x1d8>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d22:	4a75      	ldr	r2, [pc, #468]	; (8006ef8 <HAL_RCC_ClockConfig+0x1dc>)
{
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	428b      	cmp	r3, r1
 8006d30:	460d      	mov	r5, r1
 8006d32:	4604      	mov	r4, r0
 8006d34:	d20c      	bcs.n	8006d50 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d36:	6813      	ldr	r3, [r2, #0]
 8006d38:	f023 030f 	bic.w	r3, r3, #15
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	428b      	cmp	r3, r1
 8006d48:	d002      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006d4a:	2001      	movs	r0, #1
}
 8006d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	07df      	lsls	r7, r3, #31
 8006d54:	d569      	bpl.n	8006e2a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d56:	6867      	ldr	r7, [r4, #4]
 8006d58:	2f03      	cmp	r7, #3
 8006d5a:	f000 80a0 	beq.w	8006e9e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d5e:	4b67      	ldr	r3, [pc, #412]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d60:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d62:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d64:	f000 8097 	beq.w	8006e96 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d68:	055b      	lsls	r3, r3, #21
 8006d6a:	d5ee      	bpl.n	8006d4a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d6c:	f7ff ffa8 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006d70:	4b63      	ldr	r3, [pc, #396]	; (8006f00 <HAL_RCC_ClockConfig+0x1e4>)
 8006d72:	4298      	cmp	r0, r3
 8006d74:	f240 80bb 	bls.w	8006eee <HAL_RCC_ClockConfig+0x1d2>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d78:	4a60      	ldr	r2, [pc, #384]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006d7a:	6893      	ldr	r3, [r2, #8]
 8006d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d86:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d8a:	4e5c      	ldr	r6, [pc, #368]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006d8c:	68b3      	ldr	r3, [r6, #8]
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	433b      	orrs	r3, r7
 8006d94:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006d96:	f7fd fcbd 	bl	8004714 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006d9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da0:	e004      	b.n	8006dac <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006da2:	f7fd fcb7 	bl	8004714 <HAL_GetTick>
 8006da6:	1bc0      	subs	r0, r0, r7
 8006da8:	4540      	cmp	r0, r8
 8006daa:	d871      	bhi.n	8006e90 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dac:	68b3      	ldr	r3, [r6, #8]
 8006dae:	6862      	ldr	r2, [r4, #4]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006db8:	d1f3      	bne.n	8006da2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	079f      	lsls	r7, r3, #30
 8006dbe:	d436      	bmi.n	8006e2e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006dc0:	f1b9 0f00 	cmp.w	r9, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006dc6:	68b3      	ldr	r3, [r6, #8]
 8006dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dcc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dce:	4e4a      	ldr	r6, [pc, #296]	; (8006ef8 <HAL_RCC_ClockConfig+0x1dc>)
 8006dd0:	6833      	ldr	r3, [r6, #0]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	d846      	bhi.n	8006e68 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	075a      	lsls	r2, r3, #29
 8006dde:	d506      	bpl.n	8006dee <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006de0:	4946      	ldr	r1, [pc, #280]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	688a      	ldr	r2, [r1, #8]
 8006de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dea:	4302      	orrs	r2, r0
 8006dec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	071b      	lsls	r3, r3, #28
 8006df0:	d507      	bpl.n	8006e02 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006df2:	4a42      	ldr	r2, [pc, #264]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006df4:	6921      	ldr	r1, [r4, #16]
 8006df6:	6893      	ldr	r3, [r2, #8]
 8006df8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006dfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e02:	f7ff ff5d 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8006e06:	4a3d      	ldr	r2, [pc, #244]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006e08:	4c3e      	ldr	r4, [pc, #248]	; (8006f04 <HAL_RCC_ClockConfig+0x1e8>)
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	493e      	ldr	r1, [pc, #248]	; (8006f08 <HAL_RCC_ClockConfig+0x1ec>)
 8006e0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006e12:	4603      	mov	r3, r0
 8006e14:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006e16:	483d      	ldr	r0, [pc, #244]	; (8006f0c <HAL_RCC_ClockConfig+0x1f0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e18:	f002 021f 	and.w	r2, r2, #31
 8006e1c:	40d3      	lsrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006e20:	6800      	ldr	r0, [r0, #0]
}
 8006e22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006e26:	f7fd bc33 	b.w	8004690 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2a:	079e      	lsls	r6, r3, #30
 8006e2c:	d5cf      	bpl.n	8006dce <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2e:	0758      	lsls	r0, r3, #29
 8006e30:	d504      	bpl.n	8006e3c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e32:	4932      	ldr	r1, [pc, #200]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006e34:	688a      	ldr	r2, [r1, #8]
 8006e36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e3a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	0719      	lsls	r1, r3, #28
 8006e3e:	d506      	bpl.n	8006e4e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e40:	4a2e      	ldr	r2, [pc, #184]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006e42:	6893      	ldr	r3, [r2, #8]
 8006e44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e4c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006e50:	68a1      	ldr	r1, [r4, #8]
 8006e52:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e54:	4e28      	ldr	r6, [pc, #160]	; (8006ef8 <HAL_RCC_ClockConfig+0x1dc>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5e:	6833      	ldr	r3, [r6, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	42ab      	cmp	r3, r5
 8006e66:	d9b8      	bls.n	8006dda <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e68:	6833      	ldr	r3, [r6, #0]
 8006e6a:	f023 030f 	bic.w	r3, r3, #15
 8006e6e:	432b      	orrs	r3, r5
 8006e70:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e72:	f7fd fc4f 	bl	8004714 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e76:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006e7a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7c:	6833      	ldr	r3, [r6, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	42ab      	cmp	r3, r5
 8006e84:	d0a9      	beq.n	8006dda <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e86:	f7fd fc45 	bl	8004714 <HAL_GetTick>
 8006e8a:	1bc0      	subs	r0, r0, r7
 8006e8c:	4540      	cmp	r0, r8
 8006e8e:	d9f5      	bls.n	8006e7c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8006e90:	2003      	movs	r0, #3
}
 8006e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e96:	039a      	lsls	r2, r3, #14
 8006e98:	f53f af68 	bmi.w	8006d6c <HAL_RCC_ClockConfig+0x50>
 8006e9c:	e755      	b.n	8006d4a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	0188      	lsls	r0, r1, #6
 8006ea4:	f57f af51 	bpl.w	8006d4a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ea8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eaa:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eac:	68d2      	ldr	r2, [r2, #12]
 8006eae:	4818      	ldr	r0, [pc, #96]	; (8006f10 <HAL_RCC_ClockConfig+0x1f4>)
      if(pllfreq > 80000000U)
 8006eb0:	4e13      	ldr	r6, [pc, #76]	; (8006f00 <HAL_RCC_ClockConfig+0x1e4>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eb2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8006eb6:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eb8:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ebc:	480f      	ldr	r0, [pc, #60]	; (8006efc <HAL_RCC_ClockConfig+0x1e0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ebe:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006ec2:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ec6:	68c1      	ldr	r1, [r0, #12]
 8006ec8:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8006ecc:	3101      	adds	r1, #1
 8006ece:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8006ed0:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006ed4:	42b2      	cmp	r2, r6
 8006ed6:	d90a      	bls.n	8006eee <HAL_RCC_ClockConfig+0x1d2>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ed8:	6882      	ldr	r2, [r0, #8]
 8006eda:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8006ede:	f43f af4b 	beq.w	8006d78 <HAL_RCC_ClockConfig+0x5c>
 8006ee2:	0799      	lsls	r1, r3, #30
 8006ee4:	d503      	bpl.n	8006eee <HAL_RCC_ClockConfig+0x1d2>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f43f af45 	beq.w	8006d78 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006eee:	f04f 0900 	mov.w	r9, #0
 8006ef2:	e74a      	b.n	8006d8a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8006ef4:	2001      	movs	r0, #1
}
 8006ef6:	4770      	bx	lr
 8006ef8:	40022000 	.word	0x40022000
 8006efc:	40021000 	.word	0x40021000
 8006f00:	04c4b400 	.word	0x04c4b400
 8006f04:	0800c908 	.word	0x0800c908
 8006f08:	20000534 	.word	0x20000534
 8006f0c:	2000053c 	.word	0x2000053c
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006f14:	4b01      	ldr	r3, [pc, #4]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000534 	.word	0x20000534

08006f20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006f22:	4a06      	ldr	r2, [pc, #24]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f24:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f26:	4906      	ldr	r1, [pc, #24]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f28:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006f2c:	6808      	ldr	r0, [r1, #0]
 8006f2e:	5cd3      	ldrb	r3, [r2, r3]
 8006f30:	f003 031f 	and.w	r3, r3, #31
}
 8006f34:	40d8      	lsrs	r0, r3
 8006f36:	4770      	bx	lr
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	0800c918 	.word	0x0800c918
 8006f40:	20000534 	.word	0x20000534

08006f44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006f46:	4a06      	ldr	r2, [pc, #24]	; (8006f60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f48:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006f4a:	4906      	ldr	r1, [pc, #24]	; (8006f64 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f4c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006f50:	6808      	ldr	r0, [r1, #0]
 8006f52:	5cd3      	ldrb	r3, [r2, r3]
 8006f54:	f003 031f 	and.w	r3, r3, #31
}
 8006f58:	40d8      	lsrs	r0, r3
 8006f5a:	4770      	bx	lr
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	0800c918 	.word	0x0800c918
 8006f64:	20000534 	.word	0x20000534

08006f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f6c:	6803      	ldr	r3, [r0, #0]
{
 8006f6e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f70:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8006f74:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f76:	d056      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f78:	4b9f      	ldr	r3, [pc, #636]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006f7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f7c:	00d5      	lsls	r5, r2, #3
 8006f7e:	f140 810c 	bpl.w	800719a <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8006f82:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f84:	4d9d      	ldr	r5, [pc, #628]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f8e:	f7fd fbc1 	bl	8004714 <HAL_GetTick>
 8006f92:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f94:	e005      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fd fbbd 	bl	8004714 <HAL_GetTick>
 8006f9a:	1b83      	subs	r3, r0, r6
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f200 8107 	bhi.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	05d8      	lsls	r0, r3, #23
 8006fa6:	d5f6      	bpl.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fa8:	4d93      	ldr	r5, [pc, #588]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006faa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006fb2:	d027      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006fb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d025      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fba:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fbe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fca:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fd6:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fda:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8006fdc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fe0:	f140 8108 	bpl.w	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fd fb96 	bl	8004714 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006fec:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fee:	e005      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff0:	f7fd fb90 	bl	8004714 <HAL_GetTick>
 8006ff4:	1b80      	subs	r0, r0, r6
 8006ff6:	4540      	cmp	r0, r8
 8006ff8:	f200 80da 	bhi.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ffc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007000:	079b      	lsls	r3, r3, #30
 8007002:	d5f5      	bpl.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007004:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007006:	497c      	ldr	r1, [pc, #496]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007008:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800700c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007016:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007018:	b127      	cbz	r7, 8007024 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800701a:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800701c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	07de      	lsls	r6, r3, #31
 8007028:	d508      	bpl.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800702a:	4973      	ldr	r1, [pc, #460]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800702c:	6865      	ldr	r5, [r4, #4]
 800702e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007032:	f022 0203 	bic.w	r2, r2, #3
 8007036:	432a      	orrs	r2, r5
 8007038:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800703c:	079d      	lsls	r5, r3, #30
 800703e:	d508      	bpl.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007040:	496d      	ldr	r1, [pc, #436]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007042:	68a5      	ldr	r5, [r4, #8]
 8007044:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007048:	f022 020c 	bic.w	r2, r2, #12
 800704c:	432a      	orrs	r2, r5
 800704e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007052:	0759      	lsls	r1, r3, #29
 8007054:	d508      	bpl.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007056:	4968      	ldr	r1, [pc, #416]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007058:	68e5      	ldr	r5, [r4, #12]
 800705a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800705e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007062:	432a      	orrs	r2, r5
 8007064:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007068:	071a      	lsls	r2, r3, #28
 800706a:	d508      	bpl.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800706c:	4962      	ldr	r1, [pc, #392]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800706e:	6925      	ldr	r5, [r4, #16]
 8007070:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007074:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007078:	432a      	orrs	r2, r5
 800707a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800707e:	069f      	lsls	r7, r3, #26
 8007080:	d508      	bpl.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007082:	495d      	ldr	r1, [pc, #372]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007084:	6965      	ldr	r5, [r4, #20]
 8007086:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800708a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800708e:	432a      	orrs	r2, r5
 8007090:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007094:	065e      	lsls	r6, r3, #25
 8007096:	d508      	bpl.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007098:	4957      	ldr	r1, [pc, #348]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800709a:	69a5      	ldr	r5, [r4, #24]
 800709c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80070a4:	432a      	orrs	r2, r5
 80070a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070aa:	061d      	lsls	r5, r3, #24
 80070ac:	d508      	bpl.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ae:	4952      	ldr	r1, [pc, #328]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070b0:	69e5      	ldr	r5, [r4, #28]
 80070b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80070ba:	432a      	orrs	r2, r5
 80070bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070c0:	05d9      	lsls	r1, r3, #23
 80070c2:	d508      	bpl.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070c4:	494c      	ldr	r1, [pc, #304]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070c6:	6a25      	ldr	r5, [r4, #32]
 80070c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070cc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80070d0:	432a      	orrs	r2, r5
 80070d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070d6:	059a      	lsls	r2, r3, #22
 80070d8:	d508      	bpl.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070da:	4947      	ldr	r1, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070dc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070e2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80070e6:	432a      	orrs	r2, r5
 80070e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070ec:	055f      	lsls	r7, r3, #21
 80070ee:	d50b      	bpl.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070f0:	4941      	ldr	r1, [pc, #260]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80070f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80070f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80070f8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80070fc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80070fe:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007102:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007106:	d055      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007108:	051e      	lsls	r6, r3, #20
 800710a:	d50b      	bpl.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800710c:	493a      	ldr	r1, [pc, #232]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800710e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007110:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007114:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007118:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800711a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800711e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007122:	d04c      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007124:	04dd      	lsls	r5, r3, #19
 8007126:	d50b      	bpl.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007128:	4933      	ldr	r1, [pc, #204]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800712a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800712c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007134:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007136:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800713a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800713e:	d043      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007140:	0499      	lsls	r1, r3, #18
 8007142:	d50b      	bpl.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007144:	492c      	ldr	r1, [pc, #176]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007146:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007148:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800714c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007150:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007152:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007156:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800715a:	d03a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800715c:	045a      	lsls	r2, r3, #17
 800715e:	d50b      	bpl.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007160:	4925      	ldr	r1, [pc, #148]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8007162:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007164:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007168:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800716c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800716e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007172:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007176:	d031      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007178:	041b      	lsls	r3, r3, #16
 800717a:	d50b      	bpl.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800717c:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800717e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007180:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007184:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007188:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800718a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800718e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007192:	d028      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8007194:	b002      	add	sp, #8
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800719c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58
 80071a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80071ac:	2701      	movs	r7, #1
 80071ae:	e6e9      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 80071b0:	2003      	movs	r0, #3
 80071b2:	e731      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071b4:	68ca      	ldr	r2, [r1, #12]
 80071b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071ba:	60ca      	str	r2, [r1, #12]
 80071bc:	e7a4      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071be:	68ca      	ldr	r2, [r1, #12]
 80071c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071c4:	60ca      	str	r2, [r1, #12]
 80071c6:	e7ad      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c8:	68ca      	ldr	r2, [r1, #12]
 80071ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071ce:	60ca      	str	r2, [r1, #12]
 80071d0:	e7b6      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d2:	68ca      	ldr	r2, [r1, #12]
 80071d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071d8:	60ca      	str	r2, [r1, #12]
 80071da:	e7bf      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071dc:	68ca      	ldr	r2, [r1, #12]
 80071de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071e2:	60ca      	str	r2, [r1, #12]
 80071e4:	e7c8      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071e6:	68d3      	ldr	r3, [r2, #12]
 80071e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ec:	60d3      	str	r3, [r2, #12]
}
 80071ee:	b002      	add	sp, #8
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	4613      	mov	r3, r2
 80071f6:	e706      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000

08007200 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007206:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007208:	4617      	mov	r7, r2
 800720a:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 800720c:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007210:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007212:	f7fd fa7f 	bl	8004714 <HAL_GetTick>
 8007216:	442f      	add	r7, r5
 8007218:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800721a:	f7fd fa7b 	bl	8004714 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800721e:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007220:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007228:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800722c:	0d1b      	lsrs	r3, r3, #20
 800722e:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007232:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007234:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007236:	4622      	mov	r2, r4
 8007238:	1c69      	adds	r1, r5, #1
 800723a:	6893      	ldr	r3, [r2, #8]
 800723c:	d110      	bne.n	8007260 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 800723e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007242:	d009      	beq.n	8007258 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007244:	7b23      	ldrb	r3, [r4, #12]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800724c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8007250:	6893      	ldr	r3, [r2, #8]
 8007252:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007256:	d1f5      	bne.n	8007244 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007258:	2000      	movs	r0, #0
}
 800725a:	b002      	add	sp, #8
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007260:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007264:	d0f8      	beq.n	8007258 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007266:	7b23      	ldrb	r3, [r4, #12]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800726e:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007272:	f7fd fa4f 	bl	8004714 <HAL_GetTick>
 8007276:	eba0 0008 	sub.w	r0, r0, r8
 800727a:	42b8      	cmp	r0, r7
 800727c:	d209      	bcs.n	8007292 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 800727e:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007280:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8007282:	2b00      	cmp	r3, #0
      count--;
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800728a:	bf08      	it	eq
 800728c:	2700      	moveq	r7, #0
      count--;
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	e7d2      	b.n	8007238 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007292:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007296:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007298:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800729c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072a0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a2:	d013      	beq.n	80072cc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80072a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80072aa:	d107      	bne.n	80072bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80072bc:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80072be:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80072c0:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80072c4:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80072c8:	2003      	movs	r0, #3
 80072ca:	e7c6      	b.n	800725a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072cc:	68b2      	ldr	r2, [r6, #8]
 80072ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80072d2:	d002      	beq.n	80072da <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80072d8:	d1e4      	bne.n	80072a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e7df      	b.n	80072a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 80072e4:	20000534 	.word	0x20000534

080072e8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	460c      	mov	r4, r1
 80072ee:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072f0:	f7fd fa10 	bl	8004714 <HAL_GetTick>
 80072f4:	3464      	adds	r4, #100	; 0x64
 80072f6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80072f8:	f7fd fa0c 	bl	8004714 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072fc:	4b24      	ldr	r3, [pc, #144]	; (8007390 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fe:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007306:	fb04 f303 	mul.w	r3, r4, r3
 800730a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800730c:	6893      	ldr	r3, [r2, #8]
 800730e:	061a      	lsls	r2, r3, #24
 8007310:	d52f      	bpl.n	8007372 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
 8007312:	4605      	mov	r5, r0
 8007314:	e00a      	b.n	800732c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x44>
      if (count == 0U)
 8007316:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007318:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800731a:	6831      	ldr	r1, [r6, #0]
      count--;
 800731c:	3b01      	subs	r3, #1
 800731e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007320:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8007322:	2a00      	cmp	r2, #0
 8007324:	bf08      	it	eq
 8007326:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	d522      	bpl.n	8007372 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800732c:	f7fd f9f2 	bl	8004714 <HAL_GetTick>
 8007330:	1b43      	subs	r3, r0, r5
 8007332:	42a3      	cmp	r3, r4
 8007334:	d3ef      	bcc.n	8007316 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007336:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800733a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007344:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007346:	d017      	beq.n	8007378 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007348:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800734a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800734e:	d107      	bne.n	8007360 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          SPI_RESET_CRC(hspi);
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800735e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007360:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007362:	2300      	movs	r3, #0
 8007364:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8007366:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800736a:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
}
 800736e:	b002      	add	sp, #8
 8007370:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8007372:	2000      	movs	r0, #0
}
 8007374:	b002      	add	sp, #8
 8007376:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007378:	68b2      	ldr	r2, [r6, #8]
 800737a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800737e:	d002      	beq.n	8007386 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007380:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007384:	d1e0      	bne.n	8007348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
          __HAL_SPI_DISABLE(hspi);
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e7db      	b.n	8007348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
 8007390:	20000534 	.word	0x20000534

08007394 <SPI_EndRxTxTransaction.constprop.0>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8007394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007396:	b083      	sub	sp, #12
  __IO uint8_t  tmpreg8 = 0;
 8007398:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 800739a:	460f      	mov	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 800739c:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80073a0:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073a2:	f7fd f9b7 	bl	8004714 <HAL_GetTick>
 80073a6:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80073aa:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80073ac:	f7fd f9b2 	bl	8004714 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073b0:	4b31      	ldr	r3, [pc, #196]	; (8007478 <SPI_EndRxTxTransaction.constprop.0+0xe4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80073bc:	0d1b      	lsrs	r3, r3, #20
 80073be:	fb04 f303 	mul.w	r3, r4, r3
 80073c2:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80073cc:	d034      	beq.n	8007438 <SPI_EndRxTxTransaction.constprop.0+0xa4>
 80073ce:	4606      	mov	r6, r0
 80073d0:	e00b      	b.n	80073ea <SPI_EndRxTxTransaction.constprop.0+0x56>
      if (count == 0U)
 80073d2:	9a01      	ldr	r2, [sp, #4]
      count--;
 80073d4:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80073d6:	6829      	ldr	r1, [r5, #0]
      count--;
 80073d8:	3b01      	subs	r3, #1
 80073da:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80073dc:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 80073de:	2a00      	cmp	r2, #0
 80073e0:	bf08      	it	eq
 80073e2:	2400      	moveq	r4, #0
  while ((hspi->Instance->SR & Fifo) != State)
 80073e4:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80073e8:	d026      	beq.n	8007438 <SPI_EndRxTxTransaction.constprop.0+0xa4>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ea:	f7fd f993 	bl	8004714 <HAL_GetTick>
 80073ee:	1b83      	subs	r3, r0, r6
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d8ee      	bhi.n	80073d2 <SPI_EndRxTxTransaction.constprop.0+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f4:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073f8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073fa:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007402:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007404:	d02c      	beq.n	8007460 <SPI_EndRxTxTransaction.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007406:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007408:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800740c:	d107      	bne.n	800741e <SPI_EndRxTxTransaction.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800741c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800741e:	2301      	movs	r3, #1
 8007420:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007424:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8007426:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007428:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 800742c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800742e:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007432:	662b      	str	r3, [r5, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007434:	b003      	add	sp, #12
 8007436:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007438:	4639      	mov	r1, r7
 800743a:	4628      	mov	r0, r5
 800743c:	f7ff ff54 	bl	80072e8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007440:	b938      	cbnz	r0, 8007452 <SPI_EndRxTxTransaction.constprop.0+0xbe>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007442:	463a      	mov	r2, r7
 8007444:	2164      	movs	r1, #100	; 0x64
 8007446:	4628      	mov	r0, r5
 8007448:	f7ff feda 	bl	8007200 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800744c:	b908      	cbnz	r0, 8007452 <SPI_EndRxTxTransaction.constprop.0+0xbe>
}
 800744e:	b003      	add	sp, #12
 8007450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007452:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007454:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007456:	f043 0320 	orr.w	r3, r3, #32
 800745a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800745c:	b003      	add	sp, #12
 800745e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007460:	68aa      	ldr	r2, [r5, #8]
 8007462:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007466:	d002      	beq.n	800746e <SPI_EndRxTxTransaction.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007468:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800746c:	d1cb      	bne.n	8007406 <SPI_EndRxTxTransaction.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	e7c6      	b.n	8007406 <SPI_EndRxTxTransaction.constprop.0+0x72>
 8007478:	20000534 	.word	0x20000534

0800747c <HAL_SPI_Init>:
  if (hspi == NULL)
 800747c:	2800      	cmp	r0, #0
 800747e:	d077      	beq.n	8007570 <HAL_SPI_Init+0xf4>
{
 8007480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007484:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007486:	4604      	mov	r4, r0
 8007488:	2e00      	cmp	r6, #0
 800748a:	d058      	beq.n	800753e <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800748c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800748e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007492:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007496:	2200      	movs	r2, #0
 8007498:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800749a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d059      	beq.n	8007556 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 80074a2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074a4:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80074a6:	2302      	movs	r3, #2
 80074a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80074ac:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074ae:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80074b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b6:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074b8:	d947      	bls.n	800754a <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074ba:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 80074be:	d159      	bne.n	8007574 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074c2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074c4:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80074c8:	6862      	ldr	r2, [r4, #4]
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80074d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074d4:	431a      	orrs	r2, r3
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	4313      	orrs	r3, r2
 80074de:	6962      	ldr	r2, [r4, #20]
 80074e0:	f002 0201 	and.w	r2, r2, #1
 80074e4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e8:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074f4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074f6:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074fa:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80074fe:	69a6      	ldr	r6, [r4, #24]
 8007500:	6a23      	ldr	r3, [r4, #32]
 8007502:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8007506:	f406 7300 	and.w	r3, r6, #512	; 0x200
 800750a:	4313      	orrs	r3, r2
 800750c:	ea43 0308 	orr.w	r3, r3, r8
 8007510:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007512:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007514:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007516:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800751a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800751c:	ea4e 0306 	orr.w	r3, lr, r6
 8007520:	ea43 030c 	orr.w	r3, r3, ip
 8007524:	4303      	orrs	r3, r0
 8007526:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007528:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800752a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800752c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007530:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007532:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007534:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007536:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800753e:	6843      	ldr	r3, [r0, #4]
 8007540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007544:	d0a5      	beq.n	8007492 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007546:	61c6      	str	r6, [r0, #28]
 8007548:	e7a3      	b.n	8007492 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800754a:	d00b      	beq.n	8007564 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800754c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007550:	2500      	movs	r5, #0
 8007552:	62a5      	str	r5, [r4, #40]	; 0x28
 8007554:	e7b8      	b.n	80074c8 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007556:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800755a:	4620      	mov	r0, r4
 800755c:	f7fc fc46 	bl	8003dec <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007560:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007562:	e79e      	b.n	80074a2 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007564:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007566:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800756a:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800756e:	e7ab      	b.n	80074c8 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007570:	2001      	movs	r0, #1
}
 8007572:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007574:	2000      	movs	r0, #0
 8007576:	e7eb      	b.n	8007550 <HAL_SPI_Init+0xd4>

08007578 <HAL_SPI_TransmitReceive_DMA>:
{
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800757c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8007580:	2801      	cmp	r0, #1
 8007582:	d07c      	beq.n	800767e <HAL_SPI_TransmitReceive_DMA+0x106>
 8007584:	2001      	movs	r0, #1
 8007586:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 800758a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800758e:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007590:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8007592:	fa5f fc80 	uxtb.w	ip, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007596:	d00d      	beq.n	80075b4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007598:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800759c:	d004      	beq.n	80075a8 <HAL_SPI_TransmitReceive_DMA+0x30>
    errorcode = HAL_BUSY;
 800759e:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80075a0:	2300      	movs	r3, #0
 80075a2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075a8:	68a0      	ldr	r0, [r4, #8]
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d1f7      	bne.n	800759e <HAL_SPI_TransmitReceive_DMA+0x26>
 80075ae:	f1bc 0f04 	cmp.w	ip, #4
 80075b2:	d1f4      	bne.n	800759e <HAL_SPI_TransmitReceive_DMA+0x26>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d060      	beq.n	800767a <HAL_SPI_TransmitReceive_DMA+0x102>
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d05e      	beq.n	800767a <HAL_SPI_TransmitReceive_DMA+0x102>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05c      	beq.n	800767a <HAL_SPI_TransmitReceive_DMA+0x102>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075c0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075c4:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075c6:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075c8:	bf1c      	itt	ne
 80075ca:	2005      	movne	r0, #5
 80075cc:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80075d0:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferSize  = Size;
 80075d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d4:	2000      	movs	r0, #0
 80075d6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 80075d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 80075da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80075de:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80075e2:	6848      	ldr	r0, [r1, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075e4:	6422      	str	r2, [r4, #64]	; 0x40
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80075e6:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
  hspi->RxXferSize  = Size;
 80075ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80075ee:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f0:	68e0      	ldr	r0, [r4, #12]
 80075f2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80075f6:	d94d      	bls.n	8007694 <HAL_SPI_TransmitReceive_DMA+0x11c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075f8:	684b      	ldr	r3, [r1, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007600:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007602:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8007606:	4d44      	ldr	r5, [pc, #272]	; (8007718 <HAL_SPI_TransmitReceive_DMA+0x1a0>)
 8007608:	4e44      	ldr	r6, [pc, #272]	; (800771c <HAL_SPI_TransmitReceive_DMA+0x1a4>)
 800760a:	2b04      	cmp	r3, #4
 800760c:	4b44      	ldr	r3, [pc, #272]	; (8007720 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
 800760e:	bf08      	it	eq
 8007610:	462b      	moveq	r3, r5
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007612:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 8007616:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 800761e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007622:	4d41      	ldr	r5, [pc, #260]	; (8007728 <HAL_SPI_TransmitReceive_DMA+0x1b0>)
 8007624:	bf08      	it	eq
 8007626:	4635      	moveq	r5, r6
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007628:	310c      	adds	r1, #12
 800762a:	b29b      	uxth	r3, r3
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800762c:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800762e:	f7fe f905 	bl	800583c <HAL_DMA_Start_IT>
 8007632:	bb30      	cbnz	r0, 8007682 <HAL_SPI_TransmitReceive_DMA+0x10a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007634:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007636:	6d61      	ldr	r1, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007638:	6853      	ldr	r3, [r2, #4]
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6053      	str	r3, [r2, #4]
                                 hspi->TxXferCount))
 8007640:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007642:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007644:	e9c1 000b 	strd	r0, r0, [r1, #44]	; 0x2c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007648:	e9c1 000d 	strd	r0, r0, [r1, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800764c:	b29b      	uxth	r3, r3
 800764e:	4608      	mov	r0, r1
 8007650:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007652:	f7fe f8f3 	bl	800583c <HAL_DMA_Start_IT>
 8007656:	b9a0      	cbnz	r0, 8007682 <HAL_SPI_TransmitReceive_DMA+0x10a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	0652      	lsls	r2, r2, #25
 800765e:	d403      	bmi.n	8007668 <HAL_SPI_TransmitReceive_DMA+0xf0>
    __HAL_SPI_ENABLE(hspi);
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007666:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	f042 0220 	orr.w	r2, r2, #32
 800766e:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	f042 0202 	orr.w	r2, r2, #2
 8007676:	605a      	str	r2, [r3, #4]
 8007678:	e792      	b.n	80075a0 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 800767a:	2001      	movs	r0, #1
 800767c:	e790      	b.n	80075a0 <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 800767e:	2002      	movs	r0, #2
}
 8007680:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007682:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8007684:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007686:	f043 0310 	orr.w	r3, r3, #16
 800768a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800768c:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 800768e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 8007692:	e785      	b.n	80075a0 <HAL_SPI_TransmitReceive_DMA+0x28>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007694:	6848      	ldr	r0, [r1, #4]
 8007696:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800769a:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800769c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800769e:	6980      	ldr	r0, [r0, #24]
 80076a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80076a4:	d018      	beq.n	80076d8 <HAL_SPI_TransmitReceive_DMA+0x160>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a8:	6983      	ldr	r3, [r0, #24]
 80076aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ae:	d1a8      	bne.n	8007602 <HAL_SPI_TransmitReceive_DMA+0x8a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076b0:	684b      	ldr	r3, [r1, #4]
 80076b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b6:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80076b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076bc:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80076c0:	684b      	ldr	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80076c2:	d115      	bne.n	80076f0 <HAL_SPI_TransmitReceive_DMA+0x178>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80076c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076c8:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80076ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076ce:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80076d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80076d6:	e794      	b.n	8007602 <HAL_SPI_TransmitReceive_DMA+0x8a>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80076d8:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076dc:	684b      	ldr	r3, [r1, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80076de:	d112      	bne.n	8007706 <HAL_SPI_TransmitReceive_DMA+0x18e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076e4:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80076e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80076e8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80076ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80076ee:	e7da      	b.n	80076a6 <HAL_SPI_TransmitReceive_DMA+0x12e>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80076f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80076f4:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80076f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80076fa:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80076fe:	3301      	adds	r3, #1
 8007700:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8007704:	e77d      	b.n	8007602 <HAL_SPI_TransmitReceive_DMA+0x8a>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800770a:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800770c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800770e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007712:	3301      	adds	r3, #1
 8007714:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007716:	e7c6      	b.n	80076a6 <HAL_SPI_TransmitReceive_DMA+0x12e>
 8007718:	08007735 	.word	0x08007735
 800771c:	08007779 	.word	0x08007779
 8007720:	08007745 	.word	0x08007745
 8007724:	08007755 	.word	0x08007755
 8007728:	080078d9 	.word	0x080078d9

0800772c <HAL_SPI_RxCpltCallback>:
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop

08007730 <HAL_SPI_RxHalfCpltCallback>:
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop

08007734 <SPI_DMAHalfReceiveCplt>:
{
 8007734:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007736:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007738:	f7ff fffa 	bl	8007730 <HAL_SPI_RxHalfCpltCallback>
}
 800773c:	bd08      	pop	{r3, pc}
 800773e:	bf00      	nop

08007740 <HAL_SPI_TxRxHalfCpltCallback>:
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop

08007744 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8007744:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007746:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007748:	f7ff fffa 	bl	8007740 <HAL_SPI_TxRxHalfCpltCallback>
}
 800774c:	bd08      	pop	{r3, pc}
 800774e:	bf00      	nop

08007750 <HAL_SPI_ErrorCallback>:
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop

08007754 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007754:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007756:	6802      	ldr	r2, [r0, #0]
{
 8007758:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800775a:	6853      	ldr	r3, [r2, #4]
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007762:	6e03      	ldr	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007764:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007766:	f043 0310 	orr.w	r3, r3, #16
 800776a:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800776c:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8007770:	f7ff ffee 	bl	8007750 <HAL_SPI_ErrorCallback>
}
 8007774:	bd08      	pop	{r3, pc}
 8007776:	bf00      	nop

08007778 <SPI_DMAReceiveCplt>:
{
 8007778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800777a:	4604      	mov	r4, r0
 800777c:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800777e:	6a85      	ldr	r5, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8007780:	f7fc ffc8 	bl	8004714 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	0699      	lsls	r1, r3, #26
 800778a:	d45d      	bmi.n	8007848 <SPI_DMAReceiveCplt+0xd0>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800778c:	682b      	ldr	r3, [r5, #0]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800778e:	68a9      	ldr	r1, [r5, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	f022 0220 	bic.w	r2, r2, #32
 8007796:	4607      	mov	r7, r0
 8007798:	605a      	str	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800779a:	2900      	cmp	r1, #0
 800779c:	d059      	beq.n	8007852 <SPI_DMAReceiveCplt+0xda>
 800779e:	6868      	ldr	r0, [r5, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077a0:	685a      	ldr	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a2:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077a6:	f022 0201 	bic.w	r2, r2, #1
 80077aa:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ac:	d076      	beq.n	800789c <SPI_DMAReceiveCplt+0x124>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077ae:	f7fc ffb1 	bl	8004714 <HAL_GetTick>
 80077b2:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80077b6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80077b8:	f7fc ffac 	bl	8004714 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077bc:	4b45      	ldr	r3, [pc, #276]	; (80078d4 <SPI_DMAReceiveCplt+0x15c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80077c4:	fb04 f303 	mul.w	r3, r4, r3
 80077c8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	061a      	lsls	r2, r3, #24
  tmp_tickstart = HAL_GetTick();
 80077d0:	4606      	mov	r6, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d2:	d40b      	bmi.n	80077ec <SPI_DMAReceiveCplt+0x74>
 80077d4:	e046      	b.n	8007864 <SPI_DMAReceiveCplt+0xec>
      if (count == 0U)
 80077d6:	9a01      	ldr	r2, [sp, #4]
      count--;
 80077d8:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077da:	6829      	ldr	r1, [r5, #0]
      count--;
 80077dc:	3b01      	subs	r3, #1
 80077de:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e0:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	bf08      	it	eq
 80077e6:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e8:	061b      	lsls	r3, r3, #24
 80077ea:	d53b      	bpl.n	8007864 <SPI_DMAReceiveCplt+0xec>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077ec:	f7fc ff92 	bl	8004714 <HAL_GetTick>
 80077f0:	1b83      	subs	r3, r0, r6
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	d3ef      	bcc.n	80077d6 <SPI_DMAReceiveCplt+0x5e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077f6:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077fa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007804:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007806:	d055      	beq.n	80078b4 <SPI_DMAReceiveCplt+0x13c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007808:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800780a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800780e:	d107      	bne.n	8007820 <SPI_DMAReceiveCplt+0xa8>
          SPI_RESET_CRC(hspi);
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800781e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007820:	2301      	movs	r3, #1
 8007822:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007826:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8007828:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800782a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 800782e:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007832:	662b      	str	r3, [r5, #96]	; 0x60
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007834:	2320      	movs	r3, #32
 8007836:	662b      	str	r3, [r5, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8007838:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 800783a:	2200      	movs	r2, #0
 800783c:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007840:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007844:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007846:	bb23      	cbnz	r3, 8007892 <SPI_DMAReceiveCplt+0x11a>
  HAL_SPI_RxCpltCallback(hspi);
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff ff6f 	bl	800772c <HAL_SPI_RxCpltCallback>
}
 800784e:	b003      	add	sp, #12
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007852:	686a      	ldr	r2, [r5, #4]
 8007854:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007858:	685a      	ldr	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800785a:	d027      	beq.n	80078ac <SPI_DMAReceiveCplt+0x134>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007862:	e7a4      	b.n	80077ae <SPI_DMAReceiveCplt+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007864:	686b      	ldr	r3, [r5, #4]
 8007866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800786a:	d1e5      	bne.n	8007838 <SPI_DMAReceiveCplt+0xc0>
 800786c:	68ab      	ldr	r3, [r5, #8]
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007872:	d002      	beq.n	800787a <SPI_DMAReceiveCplt+0x102>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007878:	d1de      	bne.n	8007838 <SPI_DMAReceiveCplt+0xc0>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800787a:	463a      	mov	r2, r7
 800787c:	2164      	movs	r1, #100	; 0x64
 800787e:	4628      	mov	r0, r5
 8007880:	f7ff fcbe 	bl	8007200 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007884:	2800      	cmp	r0, #0
 8007886:	d0d7      	beq.n	8007838 <SPI_DMAReceiveCplt+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007888:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800788a:	f043 0320 	orr.w	r3, r3, #32
 800788e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007890:	e7d0      	b.n	8007834 <SPI_DMAReceiveCplt+0xbc>
      HAL_SPI_ErrorCallback(hspi);
 8007892:	4628      	mov	r0, r5
 8007894:	f7ff ff5c 	bl	8007750 <HAL_SPI_ErrorCallback>
}
 8007898:	b003      	add	sp, #12
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80078a0:	d114      	bne.n	80078cc <SPI_DMAReceiveCplt+0x154>
    __HAL_SPI_DISABLE(hspi);
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	e780      	b.n	80077ae <SPI_DMAReceiveCplt+0x36>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078ac:	f022 0203 	bic.w	r2, r2, #3
 80078b0:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b2:	e77c      	b.n	80077ae <SPI_DMAReceiveCplt+0x36>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078b4:	68aa      	ldr	r2, [r5, #8]
 80078b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80078ba:	d002      	beq.n	80078c2 <SPI_DMAReceiveCplt+0x14a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078bc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80078c0:	d1a2      	bne.n	8007808 <SPI_DMAReceiveCplt+0x90>
          __HAL_SPI_DISABLE(hspi);
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e79d      	b.n	8007808 <SPI_DMAReceiveCplt+0x90>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80078d0:	d0e7      	beq.n	80078a2 <SPI_DMAReceiveCplt+0x12a>
 80078d2:	e76c      	b.n	80077ae <SPI_DMAReceiveCplt+0x36>
 80078d4:	20000534 	.word	0x20000534

080078d8 <SPI_DMATransmitReceiveCplt>:
{
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80078de:	f7fc ff19 	bl	8004714 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	069b      	lsls	r3, r3, #26
 80078e8:	d41b      	bmi.n	8007922 <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	6853      	ldr	r3, [r2, #4]
 80078ee:	f023 0320 	bic.w	r3, r3, #32
 80078f2:	4601      	mov	r1, r0
 80078f4:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7ff fd4c 	bl	8007394 <SPI_EndRxTxTransaction.constprop.0>
 80078fc:	b118      	cbz	r0, 8007906 <SPI_DMATransmitReceiveCplt+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007900:	f043 0320 	orr.w	r3, r3, #32
 8007904:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007906:	6821      	ldr	r1, [r4, #0]
 8007908:	684b      	ldr	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 800790a:	2200      	movs	r2, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800790c:	f023 0303 	bic.w	r3, r3, #3
    hspi->State = HAL_SPI_STATE_READY;
 8007910:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007912:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 8007914:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007916:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800791a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800791e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007920:	b91b      	cbnz	r3, 800792a <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 8007922:	4620      	mov	r0, r4
 8007924:	f7fa ff3c 	bl	80027a0 <HAL_SPI_TxRxCpltCallback>
}
 8007928:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff ff10 	bl	8007750 <HAL_SPI_ErrorCallback>
}
 8007930:	bd38      	pop	{r3, r4, r5, pc}
 8007932:	bf00      	nop

08007934 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8007934:	6802      	ldr	r2, [r0, #0]
{
 8007936:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8007938:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800793a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800793c:	f003 0c41 	and.w	ip, r3, #65	; 0x41
 8007940:	f1bc 0f01 	cmp.w	ip, #1
{
 8007944:	b084      	sub	sp, #16
 8007946:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007948:	d05a      	beq.n	8007a00 <HAL_SPI_IRQHandler+0xcc>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800794a:	0798      	lsls	r0, r3, #30
 800794c:	d501      	bpl.n	8007952 <HAL_SPI_IRQHandler+0x1e>
 800794e:	0608      	lsls	r0, r1, #24
 8007950:	d45e      	bmi.n	8007a10 <HAL_SPI_IRQHandler+0xdc>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007952:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8007956:	d051      	beq.n	80079fc <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007958:	0688      	lsls	r0, r1, #26
 800795a:	d54f      	bpl.n	80079fc <HAL_SPI_IRQHandler+0xc8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800795c:	0658      	lsls	r0, r3, #25
 800795e:	d50e      	bpl.n	800797e <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007960:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8007964:	2803      	cmp	r0, #3
 8007966:	d05d      	beq.n	8007a24 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007968:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800796a:	f040 0004 	orr.w	r0, r0, #4
 800796e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007970:	2000      	movs	r0, #0
 8007972:	9000      	str	r0, [sp, #0]
 8007974:	68d0      	ldr	r0, [r2, #12]
 8007976:	9000      	str	r0, [sp, #0]
 8007978:	6890      	ldr	r0, [r2, #8]
 800797a:	9000      	str	r0, [sp, #0]
 800797c:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800797e:	0698      	lsls	r0, r3, #26
 8007980:	d50c      	bpl.n	800799c <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007982:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007984:	f040 0001 	orr.w	r0, r0, #1
 8007988:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800798a:	2000      	movs	r0, #0
 800798c:	9002      	str	r0, [sp, #8]
 800798e:	6890      	ldr	r0, [r2, #8]
 8007990:	9002      	str	r0, [sp, #8]
 8007992:	6810      	ldr	r0, [r2, #0]
 8007994:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8007998:	6010      	str	r0, [r2, #0]
 800799a:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800799c:	05d8      	lsls	r0, r3, #23
 800799e:	d508      	bpl.n	80079b2 <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079a2:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079a4:	f043 0308 	orr.w	r3, r3, #8
 80079a8:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079aa:	9003      	str	r0, [sp, #12]
 80079ac:	6893      	ldr	r3, [r2, #8]
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80079b4:	b313      	cbz	r3, 80079fc <HAL_SPI_IRQHandler+0xc8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079b6:	6853      	ldr	r3, [r2, #4]
 80079b8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80079bc:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80079be:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079c0:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 80079c2:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079c6:	d029      	beq.n	8007a1c <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079c8:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80079ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80079d2:	b140      	cbz	r0, 80079e6 <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80079d4:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <HAL_SPI_IRQHandler+0x100>)
 80079d6:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80079d8:	f7fd ffc4 	bl	8005964 <HAL_DMA_Abort_IT>
 80079dc:	b118      	cbz	r0, 80079e6 <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80079e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e4:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80079e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079e8:	b140      	cbz	r0, 80079fc <HAL_SPI_IRQHandler+0xc8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <HAL_SPI_IRQHandler+0x100>)
 80079ec:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80079ee:	f7fd ffb9 	bl	8005964 <HAL_DMA_Abort_IT>
 80079f2:	b118      	cbz	r0, 80079fc <HAL_SPI_IRQHandler+0xc8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80079f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fa:	6623      	str	r3, [r4, #96]	; 0x60
}
 80079fc:	b004      	add	sp, #16
 80079fe:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007a04:	d0a1      	beq.n	800794a <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 8007a06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8007a08:	b004      	add	sp, #16
 8007a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 8007a0e:	4718      	bx	r3
 8007a10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007a12:	4620      	mov	r0, r4
}
 8007a14:	b004      	add	sp, #16
 8007a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 8007a1a:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7ff fe97 	bl	8007750 <HAL_SPI_ErrorCallback>
 8007a22:	e7eb      	b.n	80079fc <HAL_SPI_IRQHandler+0xc8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a24:	2300      	movs	r3, #0
 8007a26:	9301      	str	r3, [sp, #4]
 8007a28:	68d3      	ldr	r3, [r2, #12]
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6893      	ldr	r3, [r2, #8]
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	9b01      	ldr	r3, [sp, #4]
        return;
 8007a32:	e7e3      	b.n	80079fc <HAL_SPI_IRQHandler+0xc8>
 8007a34:	08007a39 	.word	0x08007a39

08007a38 <SPI_DMAAbortOnError>:
{
 8007a38:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007a42:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8007a44:	f7ff fe84 	bl	8007750 <HAL_SPI_ErrorCallback>
}
 8007a48:	bd08      	pop	{r3, pc}
 8007a4a:	bf00      	nop

08007a4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4c:	6a03      	ldr	r3, [r0, #32]
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a54:	6a03      	ldr	r3, [r0, #32]
{
 8007a56:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a5a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a62:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007a66:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a68:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007a6e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a70:	4d13      	ldr	r5, [pc, #76]	; (8007ac0 <TIM_OC1_SetConfig+0x74>)
 8007a72:	42a8      	cmp	r0, r5
 8007a74:	d00f      	beq.n	8007a96 <TIM_OC1_SetConfig+0x4a>
 8007a76:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007a7a:	42a8      	cmp	r0, r5
 8007a7c:	d00b      	beq.n	8007a96 <TIM_OC1_SetConfig+0x4a>
 8007a7e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007a82:	42a8      	cmp	r0, r5
 8007a84:	d007      	beq.n	8007a96 <TIM_OC1_SetConfig+0x4a>
 8007a86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a8a:	42a8      	cmp	r0, r5
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC1_SetConfig+0x4a>
 8007a8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a92:	42a8      	cmp	r0, r5
 8007a94:	d10d      	bne.n	8007ab2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a96:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a98:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007a9c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a9e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aa2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aa6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aaa:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aae:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ab2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007ab4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007ab6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007ab8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007aba:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007abc:	6203      	str	r3, [r0, #32]
}
 8007abe:	4770      	bx	lr
 8007ac0:	40012c00 	.word	0x40012c00

08007ac4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac4:	6a03      	ldr	r3, [r0, #32]
 8007ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007acc:	6a03      	ldr	r3, [r0, #32]
{
 8007ace:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ad2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ad6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ada:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007ade:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ae0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007ae2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ae6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aea:	4d15      	ldr	r5, [pc, #84]	; (8007b40 <TIM_OC3_SetConfig+0x7c>)
 8007aec:	42a8      	cmp	r0, r5
 8007aee:	d010      	beq.n	8007b12 <TIM_OC3_SetConfig+0x4e>
 8007af0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007af4:	42a8      	cmp	r0, r5
 8007af6:	d00c      	beq.n	8007b12 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007afc:	42a8      	cmp	r0, r5
 8007afe:	d00f      	beq.n	8007b20 <TIM_OC3_SetConfig+0x5c>
 8007b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007b04:	42a8      	cmp	r0, r5
 8007b06:	d00b      	beq.n	8007b20 <TIM_OC3_SetConfig+0x5c>
 8007b08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007b0c:	42a8      	cmp	r0, r5
 8007b0e:	d10f      	bne.n	8007b30 <TIM_OC3_SetConfig+0x6c>
 8007b10:	e006      	b.n	8007b20 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b12:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b20:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b24:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b28:	ea46 0c05 	orr.w	ip, r6, r5
 8007b2c:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b30:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007b32:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007b34:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007b36:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007b38:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007b3a:	6203      	str	r3, [r0, #32]
}
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40012c00 	.word	0x40012c00

08007b44 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b44:	6a03      	ldr	r3, [r0, #32]
 8007b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b4a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4c:	6a03      	ldr	r3, [r0, #32]
{
 8007b4e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b52:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b56:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b5e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b62:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b6c:	4d14      	ldr	r5, [pc, #80]	; (8007bc0 <TIM_OC4_SetConfig+0x7c>)
 8007b6e:	42a8      	cmp	r0, r5
 8007b70:	d010      	beq.n	8007b94 <TIM_OC4_SetConfig+0x50>
 8007b72:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007b76:	42a8      	cmp	r0, r5
 8007b78:	d00c      	beq.n	8007b94 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b7a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007b7e:	42a8      	cmp	r0, r5
 8007b80:	d00f      	beq.n	8007ba2 <TIM_OC4_SetConfig+0x5e>
 8007b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007b86:	42a8      	cmp	r0, r5
 8007b88:	d00b      	beq.n	8007ba2 <TIM_OC4_SetConfig+0x5e>
 8007b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007b8e:	42a8      	cmp	r0, r5
 8007b90:	d10f      	bne.n	8007bb2 <TIM_OC4_SetConfig+0x6e>
 8007b92:	e006      	b.n	8007ba2 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b94:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b9a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007ba2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ba6:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007baa:	ea46 0c05 	orr.w	ip, r6, r5
 8007bae:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bb2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007bb4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007bb6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007bb8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007bba:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007bbc:	6203      	str	r3, [r0, #32]
}
 8007bbe:	4770      	bx	lr
 8007bc0:	40012c00 	.word	0x40012c00

08007bc4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f000 8081 	beq.w	8007ccc <HAL_TIM_Base_Init+0x108>
{
 8007bca:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d06d      	beq.n	8007cb6 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bda:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bdc:	493c      	ldr	r1, [pc, #240]	; (8007cd0 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007bde:	2302      	movs	r3, #2
 8007be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007be6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be8:	d051      	beq.n	8007c8e <HAL_TIM_Base_Init+0xca>
 8007bea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007bee:	d021      	beq.n	8007c34 <HAL_TIM_Base_Init+0x70>
 8007bf0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d01d      	beq.n	8007c34 <HAL_TIM_Base_Init+0x70>
 8007bf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bfc:	428a      	cmp	r2, r1
 8007bfe:	d019      	beq.n	8007c34 <HAL_TIM_Base_Init+0x70>
 8007c00:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007c04:	428a      	cmp	r2, r1
 8007c06:	d042      	beq.n	8007c8e <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c08:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8007c0c:	428a      	cmp	r2, r1
 8007c0e:	d057      	beq.n	8007cc0 <HAL_TIM_Base_Init+0xfc>
 8007c10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c14:	428a      	cmp	r2, r1
 8007c16:	d053      	beq.n	8007cc0 <HAL_TIM_Base_Init+0xfc>
 8007c18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d04f      	beq.n	8007cc0 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c20:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c22:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c28:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007c2a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007c2c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c2e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c30:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c32:	e010      	b.n	8007c56 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007c34:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c3c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c42:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c44:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007c4e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007c50:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c52:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c54:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007c56:	2301      	movs	r3, #1
 8007c58:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c5a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007c82:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007c8a:	2000      	movs	r0, #0
}
 8007c8c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007c8e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c90:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c96:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c9c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c9e:	69a1      	ldr	r1, [r4, #24]
 8007ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007ca6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ca8:	68e3      	ldr	r3, [r4, #12]
 8007caa:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007cb0:	6963      	ldr	r3, [r4, #20]
 8007cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb4:	e7cf      	b.n	8007c56 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007cb6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007cba:	f7fc fadb 	bl	8004274 <HAL_TIM_Base_MspInit>
 8007cbe:	e78c      	b.n	8007bda <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cc2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc8:	4303      	orrs	r3, r0
 8007cca:	e7e9      	b.n	8007ca0 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8007ccc:	2001      	movs	r0, #1
}
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00

08007cd4 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8007cd4:	6803      	ldr	r3, [r0, #0]
 8007cd6:	6a19      	ldr	r1, [r3, #32]
 8007cd8:	f241 1211 	movw	r2, #4369	; 0x1111
 8007cdc:	4211      	tst	r1, r2
 8007cde:	d108      	bne.n	8007cf2 <HAL_TIM_Base_Stop+0x1e>
 8007ce0:	6a19      	ldr	r1, [r3, #32]
 8007ce2:	f244 4244 	movw	r2, #17476	; 0x4444
 8007ce6:	4211      	tst	r1, r2
 8007ce8:	d103      	bne.n	8007cf2 <HAL_TIM_Base_Stop+0x1e>
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4770      	bx	lr

08007cfc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007cfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d122      	bne.n	8007d4a <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	4917      	ldr	r1, [pc, #92]	; (8007d64 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d0e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d10:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d18:	d019      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d1e:	d016      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
 8007d20:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <HAL_TIM_Base_Start_IT+0x6c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
 8007d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
 8007d2e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
 8007d36:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007d44:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	4770      	bx	lr
    return HAL_ERROR;
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d4e:	6899      	ldr	r1, [r3, #8]
 8007d50:	4a06      	ldr	r2, [pc, #24]	; (8007d6c <HAL_TIM_Base_Start_IT+0x70>)
 8007d52:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d54:	2a06      	cmp	r2, #6
 8007d56:	d002      	beq.n	8007d5e <HAL_TIM_Base_Start_IT+0x62>
 8007d58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007d5c:	d1ef      	bne.n	8007d3e <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8007d5e:	2000      	movs	r0, #0
}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	00010007 	.word	0x00010007

08007d70 <HAL_TIM_PWM_MspInit>:
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop

08007d74 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f000 8081 	beq.w	8007e7c <HAL_TIM_PWM_Init+0x108>
{
 8007d7a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d7c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d80:	4604      	mov	r4, r0
 8007d82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d06d      	beq.n	8007e66 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d8a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d8c:	493c      	ldr	r1, [pc, #240]	; (8007e80 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007d96:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d98:	d051      	beq.n	8007e3e <HAL_TIM_PWM_Init+0xca>
 8007d9a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007d9e:	d021      	beq.n	8007de4 <HAL_TIM_PWM_Init+0x70>
 8007da0:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007da4:	428a      	cmp	r2, r1
 8007da6:	d01d      	beq.n	8007de4 <HAL_TIM_PWM_Init+0x70>
 8007da8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007dac:	428a      	cmp	r2, r1
 8007dae:	d019      	beq.n	8007de4 <HAL_TIM_PWM_Init+0x70>
 8007db0:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007db4:	428a      	cmp	r2, r1
 8007db6:	d042      	beq.n	8007e3e <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007db8:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8007dbc:	428a      	cmp	r2, r1
 8007dbe:	d057      	beq.n	8007e70 <HAL_TIM_PWM_Init+0xfc>
 8007dc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007dc4:	428a      	cmp	r2, r1
 8007dc6:	d053      	beq.n	8007e70 <HAL_TIM_PWM_Init+0xfc>
 8007dc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007dcc:	428a      	cmp	r2, r1
 8007dce:	d04f      	beq.n	8007e70 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd0:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd8:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007dda:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007ddc:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dde:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007de0:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de2:	e010      	b.n	8007e06 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007de4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007de6:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007dec:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dfa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dfc:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007dfe:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007e00:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e02:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e04:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007e06:	2301      	movs	r3, #1
 8007e08:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007e12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007e16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007e1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007e1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007e32:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007e3a:	2000      	movs	r0, #0
}
 8007e3c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007e3e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e40:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e46:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e4c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e4e:	69a1      	ldr	r1, [r4, #24]
 8007e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e54:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007e56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e58:	68e3      	ldr	r3, [r4, #12]
 8007e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007e60:	6963      	ldr	r3, [r4, #20]
 8007e62:	6313      	str	r3, [r2, #48]	; 0x30
 8007e64:	e7cf      	b.n	8007e06 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007e66:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007e6a:	f7ff ff81 	bl	8007d70 <HAL_TIM_PWM_MspInit>
 8007e6e:	e78c      	b.n	8007d8a <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e70:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e72:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e78:	4303      	orrs	r3, r0
 8007e7a:	e7e9      	b.n	8007e50 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8007e7c:	2001      	movs	r0, #1
}
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00

08007e84 <HAL_TIM_PWM_Start>:
 8007e84:	2910      	cmp	r1, #16
 8007e86:	d80a      	bhi.n	8007e9e <HAL_TIM_PWM_Start+0x1a>
 8007e88:	e8df f001 	tbb	[pc, r1]
 8007e8c:	09090955 	.word	0x09090955
 8007e90:	0909095b 	.word	0x0909095b
 8007e94:	09090963 	.word	0x09090963
 8007e98:	09090968 	.word	0x09090968
 8007e9c:	71          	.byte	0x71
 8007e9d:	00          	.byte	0x00
 8007e9e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d14b      	bne.n	8007f3e <HAL_TIM_PWM_Start+0xba>
 8007ea6:	2910      	cmp	r1, #16
 8007ea8:	d80a      	bhi.n	8007ec0 <HAL_TIM_PWM_Start+0x3c>
 8007eaa:	e8df f001 	tbb	[pc, r1]
 8007eae:	0987      	.short	0x0987
 8007eb0:	094e0909 	.word	0x094e0909
 8007eb4:	09700909 	.word	0x09700909
 8007eb8:	096c0909 	.word	0x096c0909
 8007ebc:	0909      	.short	0x0909
 8007ebe:	68          	.byte	0x68
 8007ebf:	00          	.byte	0x00
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007ec6:	6803      	ldr	r3, [r0, #0]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	6a18      	ldr	r0, [r3, #32]
 8007ecc:	f001 011f 	and.w	r1, r1, #31
 8007ed0:	fa02 f101 	lsl.w	r1, r2, r1
 8007ed4:	ea20 0001 	bic.w	r0, r0, r1
 8007ed8:	6218      	str	r0, [r3, #32]
 8007eda:	6a18      	ldr	r0, [r3, #32]
 8007edc:	4a39      	ldr	r2, [pc, #228]	; (8007fc4 <HAL_TIM_PWM_Start+0x140>)
 8007ede:	4301      	orrs	r1, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	6219      	str	r1, [r3, #32]
 8007ee4:	d057      	beq.n	8007f96 <HAL_TIM_PWM_Start+0x112>
 8007ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d061      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12e>
 8007eee:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d05d      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12e>
 8007ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d059      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12e>
 8007efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d055      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0x12e>
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0a:	d048      	beq.n	8007f9e <HAL_TIM_PWM_Start+0x11a>
 8007f0c:	4a2e      	ldr	r2, [pc, #184]	; (8007fc8 <HAL_TIM_PWM_Start+0x144>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d045      	beq.n	8007f9e <HAL_TIM_PWM_Start+0x11a>
 8007f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d041      	beq.n	8007f9e <HAL_TIM_PWM_Start+0x11a>
 8007f1a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d03d      	beq.n	8007f9e <HAL_TIM_PWM_Start+0x11a>
 8007f22:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d039      	beq.n	8007f9e <HAL_TIM_PWM_Start+0x11a>
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	2000      	movs	r0, #0
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	4770      	bx	lr
 8007f36:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d03e      	beq.n	8007fbc <HAL_TIM_PWM_Start+0x138>
 8007f3e:	2001      	movs	r0, #1
 8007f40:	4770      	bx	lr
 8007f42:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d1f9      	bne.n	8007f3e <HAL_TIM_PWM_Start+0xba>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007f50:	e7b9      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x42>
 8007f52:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d0a5      	beq.n	8007ea6 <HAL_TIM_PWM_Start+0x22>
 8007f5a:	e7f0      	b.n	8007f3e <HAL_TIM_PWM_Start+0xba>
 8007f5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007f60:	3b01      	subs	r3, #1
 8007f62:	bf18      	it	ne
 8007f64:	2301      	movne	r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d09d      	beq.n	8007ea6 <HAL_TIM_PWM_Start+0x22>
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	4770      	bx	lr
 8007f6e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007f72:	3b01      	subs	r3, #1
 8007f74:	bf18      	it	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d094      	beq.n	8007ea6 <HAL_TIM_PWM_Start+0x22>
 8007f7c:	e7f5      	b.n	8007f6a <HAL_TIM_PWM_Start+0xe6>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007f84:	e79f      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x42>
 8007f86:	2302      	movs	r3, #2
 8007f88:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007f8c:	e79b      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x42>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007f94:	e797      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x42>
 8007f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f9e:	6899      	ldr	r1, [r3, #8]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <HAL_TIM_PWM_Start+0x148>)
 8007fa2:	400a      	ands	r2, r1
 8007fa4:	2a06      	cmp	r2, #6
 8007fa6:	d002      	beq.n	8007fae <HAL_TIM_PWM_Start+0x12a>
 8007fa8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007fac:	d1bd      	bne.n	8007f2a <HAL_TIM_PWM_Start+0xa6>
 8007fae:	2000      	movs	r0, #0
 8007fb0:	4770      	bx	lr
 8007fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fb8:	645a      	str	r2, [r3, #68]	; 0x44
 8007fba:	e7a4      	b.n	8007f06 <HAL_TIM_PWM_Start+0x82>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007fc2:	e780      	b.n	8007ec6 <HAL_TIM_PWM_Start+0x42>
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	00010007 	.word	0x00010007

08007fd0 <HAL_TIM_PWM_Stop>:
 8007fd0:	6803      	ldr	r3, [r0, #0]
 8007fd2:	b410      	push	{r4}
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	f001 041f 	and.w	r4, r1, #31
 8007fda:	f04f 0c01 	mov.w	ip, #1
 8007fde:	fa0c fc04 	lsl.w	ip, ip, r4
 8007fe2:	ea22 020c 	bic.w	r2, r2, ip
 8007fe6:	621a      	str	r2, [r3, #32]
 8007fe8:	4a35      	ldr	r2, [pc, #212]	; (80080c0 <HAL_TIM_PWM_Stop+0xf0>)
 8007fea:	6a1c      	ldr	r4, [r3, #32]
 8007fec:	621c      	str	r4, [r3, #32]
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d021      	beq.n	8008036 <HAL_TIM_PWM_Stop+0x66>
 8007ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d01d      	beq.n	8008036 <HAL_TIM_PWM_Stop+0x66>
 8007ffa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d019      	beq.n	8008036 <HAL_TIM_PWM_Stop+0x66>
 8008002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008006:	4293      	cmp	r3, r2
 8008008:	d015      	beq.n	8008036 <HAL_TIM_PWM_Stop+0x66>
 800800a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800800e:	4293      	cmp	r3, r2
 8008010:	d011      	beq.n	8008036 <HAL_TIM_PWM_Stop+0x66>
 8008012:	6a1c      	ldr	r4, [r3, #32]
 8008014:	f241 1211 	movw	r2, #4369	; 0x1111
 8008018:	4214      	tst	r4, r2
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Stop+0x56>
 800801c:	6a1c      	ldr	r4, [r3, #32]
 800801e:	f244 4244 	movw	r2, #17476	; 0x4444
 8008022:	4214      	tst	r4, r2
 8008024:	d016      	beq.n	8008054 <HAL_TIM_PWM_Stop+0x84>
 8008026:	b9d9      	cbnz	r1, 8008060 <HAL_TIM_PWM_Stop+0x90>
 8008028:	2301      	movs	r3, #1
 800802a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800802e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008032:	2000      	movs	r0, #0
 8008034:	4770      	bx	lr
 8008036:	6a1c      	ldr	r4, [r3, #32]
 8008038:	f241 1211 	movw	r2, #4369	; 0x1111
 800803c:	4214      	tst	r4, r2
 800803e:	d1e8      	bne.n	8008012 <HAL_TIM_PWM_Stop+0x42>
 8008040:	6a1c      	ldr	r4, [r3, #32]
 8008042:	f244 4244 	movw	r2, #17476	; 0x4444
 8008046:	4214      	tst	r4, r2
 8008048:	d1e3      	bne.n	8008012 <HAL_TIM_PWM_Stop+0x42>
 800804a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
 8008052:	e7de      	b.n	8008012 <HAL_TIM_PWM_Stop+0x42>
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	2900      	cmp	r1, #0
 800805e:	d0e3      	beq.n	8008028 <HAL_TIM_PWM_Stop+0x58>
 8008060:	3904      	subs	r1, #4
 8008062:	290c      	cmp	r1, #12
 8008064:	d808      	bhi.n	8008078 <HAL_TIM_PWM_Stop+0xa8>
 8008066:	e8df f001 	tbb	[pc, r1]
 800806a:	0723      	.short	0x0723
 800806c:	071c0707 	.word	0x071c0707
 8008070:	07150707 	.word	0x07150707
 8008074:	0707      	.short	0x0707
 8008076:	0e          	.byte	0x0e
 8008077:	00          	.byte	0x00
 8008078:	2301      	movs	r3, #1
 800807a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800807e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008082:	2000      	movs	r0, #0
 8008084:	4770      	bx	lr
 8008086:	2301      	movs	r3, #1
 8008088:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800808c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr
 8008094:	2301      	movs	r3, #1
 8008096:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800809a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800809e:	2000      	movs	r0, #0
 80080a0:	4770      	bx	lr
 80080a2:	2301      	movs	r3, #1
 80080a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80080a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ac:	2000      	movs	r0, #0
 80080ae:	4770      	bx	lr
 80080b0:	2301      	movs	r3, #1
 80080b2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80080b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ba:	2000      	movs	r0, #0
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40012c00 	.word	0x40012c00

080080c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80080c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f000 8088 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x11a>
 80080ce:	4602      	mov	r2, r0
{
 80080d0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80080d2:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80080d4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80080d6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80080da:	2001      	movs	r0, #1
 80080dc:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e2:	4b5e      	ldr	r3, [pc, #376]	; (800825c <HAL_TIM_ConfigClockSource+0x198>)
 80080e4:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80080e6:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80080e8:	680b      	ldr	r3, [r1, #0]
 80080ea:	2b70      	cmp	r3, #112	; 0x70
 80080ec:	f000 80a5 	beq.w	800823a <HAL_TIM_ConfigClockSource+0x176>
 80080f0:	d827      	bhi.n	8008142 <HAL_TIM_ConfigClockSource+0x7e>
 80080f2:	2b50      	cmp	r3, #80	; 0x50
 80080f4:	d075      	beq.n	80081e2 <HAL_TIM_ConfigClockSource+0x11e>
 80080f6:	d93d      	bls.n	8008174 <HAL_TIM_ConfigClockSource+0xb0>
 80080f8:	2b60      	cmp	r3, #96	; 0x60
 80080fa:	d11a      	bne.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fc:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080fe:	6848      	ldr	r0, [r1, #4]
 8008100:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008102:	f023 0310 	bic.w	r3, r3, #16
 8008106:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008108:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800810a:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8008114:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008118:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800811c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800811e:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008120:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008122:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800812a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008130:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008132:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008134:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008136:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800813a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800813e:	bc30      	pop	{r4, r5}
 8008140:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008146:	d067      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x154>
 8008148:	d938      	bls.n	80081bc <HAL_TIM_ConfigClockSource+0xf8>
 800814a:	4945      	ldr	r1, [pc, #276]	; (8008260 <HAL_TIM_ConfigClockSource+0x19c>)
 800814c:	428b      	cmp	r3, r1
 800814e:	d006      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 8008150:	d92d      	bls.n	80081ae <HAL_TIM_ConfigClockSource+0xea>
 8008152:	4944      	ldr	r1, [pc, #272]	; (8008264 <HAL_TIM_ConfigClockSource+0x1a0>)
 8008154:	428b      	cmp	r3, r1
 8008156:	d002      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 8008158:	3130      	adds	r1, #48	; 0x30
 800815a:	428b      	cmp	r3, r1
 800815c:	d1e9      	bne.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 800815e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008160:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8008164:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008168:	4319      	orrs	r1, r3
 800816a:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 800816e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8008170:	60a1      	str	r1, [r4, #8]
}
 8008172:	e7de      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d126      	bne.n	80081c6 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800817c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800817e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008182:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008184:	6a23      	ldr	r3, [r4, #32]
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800818c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800818e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008192:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008196:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008198:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800819a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800819c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80081a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081a4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80081a8:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80081aa:	60a3      	str	r3, [r4, #8]
}
 80081ac:	e7c1      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 80081ae:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081b2:	d0d4      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 80081b4:	3910      	subs	r1, #16
 80081b6:	428b      	cmp	r3, r1
 80081b8:	d0d1      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 80081ba:	e7ba      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80081bc:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 80081c0:	bf18      	it	ne
 80081c2:	2001      	movne	r0, #1
 80081c4:	e7b5      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 80081c6:	d8b4      	bhi.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d0c8      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 80081cc:	d903      	bls.n	80081d6 <HAL_TIM_ConfigClockSource+0x112>
 80081ce:	2b30      	cmp	r3, #48	; 0x30
 80081d0:	d0c5      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
 80081d2:	2001      	movs	r0, #1
 80081d4:	e7ad      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
 80081d6:	f033 0110 	bics.w	r1, r3, #16
 80081da:	d1aa      	bne.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
 80081dc:	e7bf      	b.n	800815e <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 80081de:	2002      	movs	r0, #2
}
 80081e0:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e2:	684b      	ldr	r3, [r1, #4]
 80081e4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80081e6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80081ec:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ee:	6a23      	ldr	r3, [r4, #32]
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f6:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008200:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008202:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8008204:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008206:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800820a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800820e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8008212:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8008214:	60a3      	str	r3, [r4, #8]
}
 8008216:	e78c      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008218:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800821c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800821e:	432b      	orrs	r3, r5
 8008220:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008222:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800822a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8008234:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008236:	60a3      	str	r3, [r4, #8]
      break;
 8008238:	e77b      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800823a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800823e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008240:	432b      	orrs	r3, r5
 8008242:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008244:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008248:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800824c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800824e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008250:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008252:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8008256:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8008258:	60a3      	str	r3, [r4, #8]
      break;
 800825a:	e76a      	b.n	8008132 <HAL_TIM_ConfigClockSource+0x6e>
 800825c:	ffce0088 	.word	0xffce0088
 8008260:	00100030 	.word	0x00100030
 8008264:	00100040 	.word	0x00100040

08008268 <HAL_TIM_OC_DelayElapsedCallback>:
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <HAL_TIM_IC_CaptureCallback>:
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop

08008274 <HAL_TIM_TriggerCallback>:
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008278:	6803      	ldr	r3, [r0, #0]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	0791      	lsls	r1, r2, #30
{
 800827e:	b510      	push	{r4, lr}
 8008280:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008282:	d503      	bpl.n	800828c <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	0792      	lsls	r2, r2, #30
 8008288:	f100 808a 	bmi.w	80083a0 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	0752      	lsls	r2, r2, #29
 8008290:	d502      	bpl.n	8008298 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	0750      	lsls	r0, r2, #29
 8008296:	d470      	bmi.n	800837a <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008298:	691a      	ldr	r2, [r3, #16]
 800829a:	0711      	lsls	r1, r2, #28
 800829c:	d502      	bpl.n	80082a4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	0712      	lsls	r2, r2, #28
 80082a2:	d458      	bmi.n	8008356 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	06d1      	lsls	r1, r2, #27
 80082a8:	d502      	bpl.n	80082b0 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	06d2      	lsls	r2, r2, #27
 80082ae:	d43e      	bmi.n	800832e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	07d0      	lsls	r0, r2, #31
 80082b4:	d503      	bpl.n	80082be <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	07d1      	lsls	r1, r2, #31
 80082ba:	f100 808a 	bmi.w	80083d2 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	0612      	lsls	r2, r2, #24
 80082c2:	d503      	bpl.n	80082cc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	0610      	lsls	r0, r2, #24
 80082c8:	f100 808b 	bmi.w	80083e2 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	05d1      	lsls	r1, r2, #23
 80082d0:	d503      	bpl.n	80082da <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	0612      	lsls	r2, r2, #24
 80082d6:	f100 808c 	bmi.w	80083f2 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	0650      	lsls	r0, r2, #25
 80082de:	d503      	bpl.n	80082e8 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	0651      	lsls	r1, r2, #25
 80082e4:	f100 808d 	bmi.w	8008402 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	0692      	lsls	r2, r2, #26
 80082ec:	d503      	bpl.n	80082f6 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	0690      	lsls	r0, r2, #26
 80082f2:	f100 808e 	bmi.w	8008412 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	02d1      	lsls	r1, r2, #11
 80082fa:	d503      	bpl.n	8008304 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	02d2      	lsls	r2, r2, #11
 8008300:	f100 808f 	bmi.w	8008422 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	0290      	lsls	r0, r2, #10
 8008308:	d503      	bpl.n	8008312 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	0291      	lsls	r1, r2, #10
 800830e:	f100 8090 	bmi.w	8008432 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	0252      	lsls	r2, r2, #9
 8008316:	d503      	bpl.n	8008320 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	0250      	lsls	r0, r2, #9
 800831c:	f100 8091 	bmi.w	8008442 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	0211      	lsls	r1, r2, #8
 8008324:	d502      	bpl.n	800832c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	0212      	lsls	r2, r2, #8
 800832a:	d44a      	bmi.n	80083c2 <HAL_TIM_IRQHandler+0x14a>
}
 800832c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800832e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008332:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008334:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008336:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800833e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008340:	f040 8090 	bne.w	8008464 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008344:	f7ff ff90 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff ff91 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008350:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008352:	7722      	strb	r2, [r4, #28]
 8008354:	e7ac      	b.n	80082b0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008356:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800835c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008364:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008366:	d17a      	bne.n	800845e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008368:	f7ff ff7e 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	4620      	mov	r0, r4
 800836e:	f7ff ff7f 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008374:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008376:	7722      	strb	r2, [r4, #28]
 8008378:	e794      	b.n	80082a4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800837a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800837e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008380:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008382:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800838a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800838c:	d164      	bne.n	8008458 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838e:	f7ff ff6b 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff ff6c 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008398:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800839a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839c:	7722      	strb	r2, [r4, #28]
 800839e:	e77b      	b.n	8008298 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083a0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083a4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083a6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083a8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	0799      	lsls	r1, r3, #30
 80083ae:	d150      	bne.n	8008452 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b0:	f7ff ff5a 	bl	8008268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	4620      	mov	r0, r4
 80083b6:	f7ff ff5b 	bl	8008270 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083bc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	7722      	strb	r2, [r4, #28]
 80083c0:	e764      	b.n	800828c <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80083c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80083c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80083c8:	611a      	str	r2, [r3, #16]
}
 80083ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80083ce:	f000 badb 	b.w	8008988 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083d2:	f06f 0201 	mvn.w	r2, #1
 80083d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80083d8:	4620      	mov	r0, r4
 80083da:	f7f9 fc13 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	e76d      	b.n	80082be <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fac3 	bl	8008974 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	e76c      	b.n	80082cc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 fabd 	bl	8008978 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	e76b      	b.n	80082da <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008406:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008408:	4620      	mov	r0, r4
 800840a:	f7ff ff33 	bl	8008274 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	e76a      	b.n	80082e8 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008412:	f06f 0220 	mvn.w	r2, #32
 8008416:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008418:	4620      	mov	r0, r4
 800841a:	f000 faa9 	bl	8008970 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	e769      	b.n	80082f6 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008422:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008426:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008428:	4620      	mov	r0, r4
 800842a:	f000 faa7 	bl	800897c <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	e768      	b.n	8008304 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008432:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008436:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008438:	4620      	mov	r0, r4
 800843a:	f000 faa1 	bl	8008980 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	e767      	b.n	8008312 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008442:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008446:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fa9b 	bl	8008984 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	e766      	b.n	8008320 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008452:	f7ff ff0b 	bl	800826c <HAL_TIM_IC_CaptureCallback>
 8008456:	e7b0      	b.n	80083ba <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008458:	f7ff ff08 	bl	800826c <HAL_TIM_IC_CaptureCallback>
 800845c:	e79c      	b.n	8008398 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800845e:	f7ff ff05 	bl	800826c <HAL_TIM_IC_CaptureCallback>
 8008462:	e786      	b.n	8008372 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008464:	f7ff ff02 	bl	800826c <HAL_TIM_IC_CaptureCallback>
 8008468:	e771      	b.n	800834e <HAL_TIM_IRQHandler+0xd6>
 800846a:	bf00      	nop

0800846c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800846c:	6a03      	ldr	r3, [r0, #32]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008474:	6a03      	ldr	r3, [r0, #32]
{
 8008476:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008478:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800847a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800847c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800847e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008482:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008486:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800848a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800848c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008490:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008494:	4d14      	ldr	r5, [pc, #80]	; (80084e8 <TIM_OC2_SetConfig+0x7c>)
 8008496:	42a8      	cmp	r0, r5
 8008498:	d010      	beq.n	80084bc <TIM_OC2_SetConfig+0x50>
 800849a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800849e:	42a8      	cmp	r0, r5
 80084a0:	d00c      	beq.n	80084bc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80084a6:	42a8      	cmp	r0, r5
 80084a8:	d00f      	beq.n	80084ca <TIM_OC2_SetConfig+0x5e>
 80084aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084ae:	42a8      	cmp	r0, r5
 80084b0:	d00b      	beq.n	80084ca <TIM_OC2_SetConfig+0x5e>
 80084b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084b6:	42a8      	cmp	r0, r5
 80084b8:	d10f      	bne.n	80084da <TIM_OC2_SetConfig+0x6e>
 80084ba:	e006      	b.n	80084ca <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80084be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80084c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084ca:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ce:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084d2:	ea46 0c05 	orr.w	ip, r6, r5
 80084d6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80084da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80084dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80084de:	6182      	str	r2, [r0, #24]
}
 80084e0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80084e2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80084e4:	6203      	str	r3, [r0, #32]
}
 80084e6:	4770      	bx	lr
 80084e8:	40012c00 	.word	0x40012c00

080084ec <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80084ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	f000 80f7 	beq.w	80086e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80084f6:	2301      	movs	r3, #1
{
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4604      	mov	r4, r0
 80084fc:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80084fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008502:	2a14      	cmp	r2, #20
 8008504:	d80c      	bhi.n	8008520 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008506:	e8df f002 	tbb	[pc, r2]
 800850a:	0b55      	.short	0x0b55
 800850c:	0b6a0b0b 	.word	0x0b6a0b0b
 8008510:	0b800b0b 	.word	0x0b800b0b
 8008514:	0b950b0b 	.word	0x0b950b0b
 8008518:	0bab0b0b 	.word	0x0bab0b0b
 800851c:	0b0b      	.short	0x0b0b
 800851e:	11          	.byte	0x11
 800851f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008520:	2200      	movs	r2, #0
  switch (Channel)
 8008522:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008524:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800852c:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800852e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008530:	6a13      	ldr	r3, [r2, #32]
 8008532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008536:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8008538:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800853a:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 800853c:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800853e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008542:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008546:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800854a:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800854c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008550:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008554:	4e65      	ldr	r6, [pc, #404]	; (80086ec <HAL_TIM_PWM_ConfigChannel+0x200>)
 8008556:	42b2      	cmp	r2, r6
 8008558:	d00f      	beq.n	800857a <HAL_TIM_PWM_ConfigChannel+0x8e>
 800855a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800855e:	42b2      	cmp	r2, r6
 8008560:	d00b      	beq.n	800857a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8008562:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008566:	42b2      	cmp	r2, r6
 8008568:	d007      	beq.n	800857a <HAL_TIM_PWM_ConfigChannel+0x8e>
 800856a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800856e:	42b2      	cmp	r2, r6
 8008570:	d003      	beq.n	800857a <HAL_TIM_PWM_ConfigChannel+0x8e>
 8008572:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008576:	42b2      	cmp	r2, r6
 8008578:	d104      	bne.n	8008584 <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800857a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800857c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008580:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8008584:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008586:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8008588:	6869      	ldr	r1, [r5, #4]
 800858a:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 800858c:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800858e:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008590:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008596:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008598:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800859a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800859e:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085a0:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80085a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80085a6:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80085a8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80085ac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085b4:	6800      	ldr	r0, [r0, #0]
 80085b6:	f7ff fa49 	bl	8007a4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085ba:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085bc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085be:	f043 0308 	orr.w	r3, r3, #8
 80085c2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085c4:	6982      	ldr	r2, [r0, #24]
 80085c6:	f022 0204 	bic.w	r2, r2, #4
 80085ca:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085cc:	6982      	ldr	r2, [r0, #24]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 80085d2:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80085d6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80085da:	4618      	mov	r0, r3
 80085dc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085de:	6800      	ldr	r0, [r0, #0]
 80085e0:	f7ff ff44 	bl	800846c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085e4:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80085ec:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085ee:	6982      	ldr	r2, [r0, #24]
 80085f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f4:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085f6:	6982      	ldr	r2, [r0, #24]
 80085f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80085fc:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 80085fe:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008600:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008602:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008606:	4618      	mov	r0, r3
 8008608:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800860a:	6800      	ldr	r0, [r0, #0]
 800860c:	f7ff fa5a 	bl	8007ac4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008610:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008612:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008614:	f043 0308 	orr.w	r3, r3, #8
 8008618:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800861a:	69c2      	ldr	r2, [r0, #28]
 800861c:	f022 0204 	bic.w	r2, r2, #4
 8008620:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008622:	69c2      	ldr	r2, [r0, #28]
 8008624:	430a      	orrs	r2, r1
 8008626:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8008628:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800862a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800862c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008634:	6800      	ldr	r0, [r0, #0]
 8008636:	f7ff fa85 	bl	8007b44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800863a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800863c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800863e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008642:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008644:	69c2      	ldr	r2, [r0, #28]
 8008646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800864a:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800864c:	69c2      	ldr	r2, [r0, #28]
 800864e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008652:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8008654:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008658:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800865c:	4618      	mov	r0, r3
 800865e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008660:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008662:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008664:	6a13      	ldr	r3, [r2, #32]
 8008666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800866a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800866c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800866e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8008670:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008672:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008676:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800867a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800867c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800867e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008686:	4e19      	ldr	r6, [pc, #100]	; (80086ec <HAL_TIM_PWM_ConfigChannel+0x200>)
 8008688:	42b2      	cmp	r2, r6
 800868a:	d00f      	beq.n	80086ac <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800868c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008690:	42b2      	cmp	r2, r6
 8008692:	d00b      	beq.n	80086ac <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008694:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008698:	42b2      	cmp	r2, r6
 800869a:	d007      	beq.n	80086ac <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800869c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80086a0:	42b2      	cmp	r2, r6
 80086a2:	d003      	beq.n	80086ac <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80086a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80086a8:	42b2      	cmp	r2, r6
 80086aa:	d104      	bne.n	80086b6 <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086ac:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086ae:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086b2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80086b6:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80086b8:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80086ba:	6869      	ldr	r1, [r5, #4]
 80086bc:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 80086be:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086c2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80086c4:	f043 0308 	orr.w	r3, r3, #8
 80086c8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086ca:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80086cc:	f021 0104 	bic.w	r1, r1, #4
 80086d0:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086d2:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80086d4:	4301      	orrs	r1, r0
 80086d6:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 80086d8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80086dc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80086e4:	2302      	movs	r3, #2
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40012c00 	.word	0x40012c00

080086f0 <HAL_TIMEx_PWMN_Start>:
 80086f0:	2900      	cmp	r1, #0
 80086f2:	d139      	bne.n	8008768 <HAL_TIMEx_PWMN_Start+0x78>
 80086f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d141      	bne.n	8008780 <HAL_TIMEx_PWMN_Start+0x90>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8008702:	6803      	ldr	r3, [r0, #0]
 8008704:	f001 011f 	and.w	r1, r1, #31
 8008708:	6a18      	ldr	r0, [r3, #32]
 800870a:	2204      	movs	r2, #4
 800870c:	408a      	lsls	r2, r1
 800870e:	ea20 0002 	bic.w	r0, r0, r2
 8008712:	6218      	str	r0, [r3, #32]
 8008714:	6a18      	ldr	r0, [r3, #32]
 8008716:	4924      	ldr	r1, [pc, #144]	; (80087a8 <HAL_TIMEx_PWMN_Start+0xb8>)
 8008718:	4302      	orrs	r2, r0
 800871a:	621a      	str	r2, [r3, #32]
 800871c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800871e:	428b      	cmp	r3, r1
 8008720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008724:	645a      	str	r2, [r3, #68]	; 0x44
 8008726:	d011      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0x5c>
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872c:	d00e      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0x5c>
 800872e:	4a1f      	ldr	r2, [pc, #124]	; (80087ac <HAL_TIMEx_PWMN_Start+0xbc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0x5c>
 8008734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0x5c>
 800873c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <HAL_TIMEx_PWMN_Start+0x5c>
 8008744:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008748:	4293      	cmp	r3, r2
 800874a:	d107      	bne.n	800875c <HAL_TIMEx_PWMN_Start+0x6c>
 800874c:	6899      	ldr	r1, [r3, #8]
 800874e:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <HAL_TIMEx_PWMN_Start+0xc0>)
 8008750:	400a      	ands	r2, r1
 8008752:	2a06      	cmp	r2, #6
 8008754:	d016      	beq.n	8008784 <HAL_TIMEx_PWMN_Start+0x94>
 8008756:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800875a:	d013      	beq.n	8008784 <HAL_TIMEx_PWMN_Start+0x94>
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	2000      	movs	r0, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	4770      	bx	lr
 8008768:	2904      	cmp	r1, #4
 800876a:	d00d      	beq.n	8008788 <HAL_TIMEx_PWMN_Start+0x98>
 800876c:	2908      	cmp	r1, #8
 800876e:	d013      	beq.n	8008798 <HAL_TIMEx_PWMN_Start+0xa8>
 8008770:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008774:	2b01      	cmp	r3, #1
 8008776:	d103      	bne.n	8008780 <HAL_TIMEx_PWMN_Start+0x90>
 8008778:	2302      	movs	r3, #2
 800877a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800877e:	e7c0      	b.n	8008702 <HAL_TIMEx_PWMN_Start+0x12>
 8008780:	2001      	movs	r0, #1
 8008782:	4770      	bx	lr
 8008784:	2000      	movs	r0, #0
 8008786:	4770      	bx	lr
 8008788:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800878c:	2b01      	cmp	r3, #1
 800878e:	d1f7      	bne.n	8008780 <HAL_TIMEx_PWMN_Start+0x90>
 8008790:	2302      	movs	r3, #2
 8008792:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008796:	e7b4      	b.n	8008702 <HAL_TIMEx_PWMN_Start+0x12>
 8008798:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800879c:	2b01      	cmp	r3, #1
 800879e:	d1ef      	bne.n	8008780 <HAL_TIMEx_PWMN_Start+0x90>
 80087a0:	2302      	movs	r3, #2
 80087a2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 80087a6:	e7ac      	b.n	8008702 <HAL_TIMEx_PWMN_Start+0x12>
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40000400 	.word	0x40000400
 80087b0:	00010007 	.word	0x00010007

080087b4 <HAL_TIMEx_PWMN_Stop>:
 80087b4:	6803      	ldr	r3, [r0, #0]
 80087b6:	b410      	push	{r4}
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	f001 041f 	and.w	r4, r1, #31
 80087be:	f04f 0c04 	mov.w	ip, #4
 80087c2:	fa0c fc04 	lsl.w	ip, ip, r4
 80087c6:	ea22 020c 	bic.w	r2, r2, ip
 80087ca:	621a      	str	r2, [r3, #32]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	621a      	str	r2, [r3, #32]
 80087d0:	6a1c      	ldr	r4, [r3, #32]
 80087d2:	f241 1211 	movw	r2, #4369	; 0x1111
 80087d6:	4214      	tst	r4, r2
 80087d8:	d104      	bne.n	80087e4 <HAL_TIMEx_PWMN_Stop+0x30>
 80087da:	6a1c      	ldr	r4, [r3, #32]
 80087dc:	f244 4244 	movw	r2, #17476	; 0x4444
 80087e0:	4214      	tst	r4, r2
 80087e2:	d022      	beq.n	800882a <HAL_TIMEx_PWMN_Stop+0x76>
 80087e4:	6a1c      	ldr	r4, [r3, #32]
 80087e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80087ea:	4214      	tst	r4, r2
 80087ec:	d104      	bne.n	80087f8 <HAL_TIMEx_PWMN_Stop+0x44>
 80087ee:	6a1c      	ldr	r4, [r3, #32]
 80087f0:	f244 4244 	movw	r2, #17476	; 0x4444
 80087f4:	4214      	tst	r4, r2
 80087f6:	d013      	beq.n	8008820 <HAL_TIMEx_PWMN_Stop+0x6c>
 80087f8:	2301      	movs	r3, #1
 80087fa:	b929      	cbnz	r1, 8008808 <HAL_TIMEx_PWMN_Stop+0x54>
 80087fc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8008800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008804:	2000      	movs	r0, #0
 8008806:	4770      	bx	lr
 8008808:	2904      	cmp	r1, #4
 800880a:	d013      	beq.n	8008834 <HAL_TIMEx_PWMN_Stop+0x80>
 800880c:	2908      	cmp	r1, #8
 800880e:	bf0c      	ite	eq
 8008810:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 8008814:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 8008818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800881c:	2000      	movs	r0, #0
 800881e:	4770      	bx	lr
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	f022 0201 	bic.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	e7e6      	b.n	80087f8 <HAL_TIMEx_PWMN_Stop+0x44>
 800882a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008830:	645a      	str	r2, [r3, #68]	; 0x44
 8008832:	e7d7      	b.n	80087e4 <HAL_TIMEx_PWMN_Stop+0x30>
 8008834:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883c:	2000      	movs	r0, #0
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008840:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008844:	2b01      	cmp	r3, #1
 8008846:	d03e      	beq.n	80088c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8008848:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800884a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800884c:	4d1f      	ldr	r5, [pc, #124]	; (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800884e:	2302      	movs	r3, #2
 8008850:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008854:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008856:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008858:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800885a:	d028      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800885c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008860:	42aa      	cmp	r2, r5
 8008862:	d024      	beq.n	80088ae <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008864:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008866:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800886a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800886e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008870:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008874:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008876:	d00c      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8008878:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800887a:	429a      	cmp	r2, r3
 800887c:	d009      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800887e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008882:	429a      	cmp	r2, r3
 8008884:	d005      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8008886:	42aa      	cmp	r2, r5
 8008888:	d003      	beq.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800888a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800888e:	429a      	cmp	r2, r3
 8008890:	d104      	bne.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008892:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008894:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008898:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800889a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800889c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800889e:	2201      	movs	r2, #1
 80088a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80088a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80088a8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80088aa:	4618      	mov	r0, r3
}
 80088ac:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088ae:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088b4:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80088b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80088bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c0:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80088c2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c4:	e7e5      	b.n	8008892 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 80088c6:	2002      	movs	r0, #2
}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40000400 	.word	0x40000400

080088d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d045      	beq.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 80088dc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088de:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80088e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e6:	4602      	mov	r2, r0
 80088e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088ea:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088f8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008900:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008902:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008908:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800890a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800890c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008910:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008912:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008914:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008918:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800891a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800891e:	4c13      	ldr	r4, [pc, #76]	; (800896c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8008920:	42a0      	cmp	r0, r4
 8008922:	d00b      	beq.n	800893c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8008924:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008928:	42a0      	cmp	r0, r4
 800892a:	d007      	beq.n	800893c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800892c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800892e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008930:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8008934:	4608      	mov	r0, r1
}
 8008936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800893a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800893c:	69cc      	ldr	r4, [r1, #28]
 800893e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008942:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008944:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008946:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800894a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800894e:	6a0c      	ldr	r4, [r1, #32]
 8008950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008954:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008956:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008958:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800895a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800895e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008960:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008964:	430b      	orrs	r3, r1
 8008966:	e7e1      	b.n	800892c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8008968:	2002      	movs	r0, #2
}
 800896a:	4770      	bx	lr
 800896c:	40012c00 	.word	0x40012c00

08008970 <HAL_TIMEx_CommutCallback>:
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <HAL_TIMEx_BreakCallback>:
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <HAL_TIMEx_Break2Callback>:
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <HAL_TIMEx_EncoderIndexCallback>:
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <HAL_TIMEx_DirectionChangeCallback>:
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <HAL_TIMEx_IndexErrorCallback>:
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <HAL_TIMEx_TransitionErrorCallback>:
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800898e:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8008992:	2e20      	cmp	r6, #32
 8008994:	d141      	bne.n	8008a1a <HAL_UART_Transmit_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008996:	2900      	cmp	r1, #0
 8008998:	d03d      	beq.n	8008a16 <HAL_UART_Transmit_DMA+0x8a>
 800899a:	2a00      	cmp	r2, #0
 800899c:	d03b      	beq.n	8008a16 <HAL_UART_Transmit_DMA+0x8a>
 800899e:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80089a0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 80089a4:	2801      	cmp	r0, #1
 80089a6:	d038      	beq.n	8008a1a <HAL_UART_Transmit_DMA+0x8e>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 80089a8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80089aa:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ae:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80089b0:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089b2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 80089b8:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 80089ba:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 80089be:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 80089c6:	b190      	cbz	r0, 80089ee <HAL_UART_Transmit_DMA+0x62>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089c8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008a30 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80089cc:	6387      	str	r7, [r0, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80089ce:	4613      	mov	r3, r2
 80089d0:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089d2:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80089d6:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8008a34 <HAL_UART_Transmit_DMA+0xa8>
 80089da:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80089de:	f8df c058 	ldr.w	ip, [pc, #88]	; 8008a38 <HAL_UART_Transmit_DMA+0xac>
 80089e2:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80089e6:	3228      	adds	r2, #40	; 0x28
 80089e8:	f7fc ff28 	bl	800583c <HAL_DMA_Start_IT>
 80089ec:	b9b8      	cbnz	r0, 8008a1e <HAL_UART_Transmit_DMA+0x92>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 80089f2:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80089f4:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 80089f6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	f102 0308 	add.w	r3, r2, #8
 80089fe:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	f102 0008 	add.w	r0, r2, #8
 8008a0a:	e840 3100 	strex	r1, r3, [r0]
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d1f3      	bne.n	80089fa <HAL_UART_Transmit_DMA+0x6e>

    return HAL_OK;
 8008a12:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008a16:	2001      	movs	r0, #1
}
 8008a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008a1a:	2002      	movs	r0, #2
}
 8008a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a1e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8008a20:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a24:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8008a28:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8008a2a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8008a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a30:	08008a41 	.word	0x08008a41
 8008a34:	08008a89 	.word	0x08008a89
 8008a38:	08008a99 	.word	0x08008a99

08008a3c <HAL_UART_TxCpltCallback>:
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop

08008a40 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a42:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a44:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f013 0320 	ands.w	r3, r3, #32
 8008a4c:	d117      	bne.n	8008a7e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8008a4e:	6802      	ldr	r2, [r0, #0]
 8008a50:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	f102 0308 	add.w	r3, r2, #8
 8008a58:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	f102 0008 	add.w	r0, r2, #8
 8008a64:	e840 3100 	strex	r1, r3, [r0]
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	d1f3      	bne.n	8008a54 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	e842 3100 	strex	r1, r3, [r2]
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d1f7      	bne.n	8008a6c <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a7c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008a7e:	f7ff ffdd 	bl	8008a3c <HAL_UART_TxCpltCallback>
}
 8008a82:	bd08      	pop	{r3, pc}

08008a84 <HAL_UART_TxHalfCpltCallback>:
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop

08008a88 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a88:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008a8c:	f7ff fffa 	bl	8008a84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a90:	bd08      	pop	{r3, pc}
 8008a92:	bf00      	nop

08008a94 <HAL_UART_ErrorCallback>:
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop

08008a98 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a98:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a9a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a9c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8008aa0:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008aa2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	0612      	lsls	r2, r2, #24
 8008aaa:	d501      	bpl.n	8008ab0 <UART_DMAError+0x18>
 8008aac:	2921      	cmp	r1, #33	; 0x21
 8008aae:	d00d      	beq.n	8008acc <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	0652      	lsls	r2, r2, #25
 8008ab4:	d501      	bpl.n	8008aba <UART_DMAError+0x22>
 8008ab6:	2c22      	cmp	r4, #34	; 0x22
 8008ab8:	d023      	beq.n	8008b02 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008aba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008abe:	f043 0310 	orr.w	r3, r3, #16
 8008ac2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ac6:	f7ff ffe5 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aca:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008ad6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	e843 2100 	strex	r1, r2, [r3]
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	d1f7      	bne.n	8008ad2 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	f103 0208 	add.w	r2, r3, #8
 8008ae6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008aea:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	f103 0c08 	add.w	ip, r3, #8
 8008af2:	e84c 2100 	strex	r1, r2, [ip]
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d1f3      	bne.n	8008ae2 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8008afa:	2220      	movs	r2, #32
 8008afc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8008b00:	e7d6      	b.n	8008ab0 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b08:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	e843 2100 	strex	r1, r2, [r3]
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d1f7      	bne.n	8008b08 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b18:	4c13      	ldr	r4, [pc, #76]	; (8008b68 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	f103 0208 	add.w	r2, r3, #8
 8008b1e:	e852 2f00 	ldrex	r2, [r2]
 8008b22:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	f103 0c08 	add.w	ip, r3, #8
 8008b28:	e84c 2100 	strex	r1, r2, [ip]
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	d1f4      	bne.n	8008b1a <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008b32:	2a01      	cmp	r2, #1
 8008b34:	d006      	beq.n	8008b44 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8008b3e:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8008b42:	e7ba      	b.n	8008aba <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b48:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	e843 2100 	strex	r1, r2, [r3]
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d0f0      	beq.n	8008b36 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	e853 2f00 	ldrex	r2, [r3]
 8008b58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	e843 2100 	strex	r1, r2, [r3]
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d1ef      	bne.n	8008b44 <UART_DMAError+0xac>
 8008b64:	e7e7      	b.n	8008b36 <UART_DMAError+0x9e>
 8008b66:	bf00      	nop
 8008b68:	effffffe 	.word	0xeffffffe

08008b6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b6c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b76:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b7a:	f7ff ff8b 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b7e:	bd08      	pop	{r3, pc}

08008b80 <HAL_UARTEx_RxEventCallback>:
}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b84:	6803      	ldr	r3, [r0, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b88:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b8a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8008b8e:	ea12 0f0c 	tst.w	r2, ip
{
 8008b92:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b94:	689d      	ldr	r5, [r3, #8]
{
 8008b96:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008b98:	f000 80eb 	beq.w	8008d72 <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008b9c:	489a      	ldr	r0, [pc, #616]	; (8008e08 <HAL_UART_IRQHandler+0x284>)
 8008b9e:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ba2:	489a      	ldr	r0, [pc, #616]	; (8008e0c <HAL_UART_IRQHandler+0x288>)
 8008ba4:	4008      	ands	r0, r1
 8008ba6:	ea50 000c 	orrs.w	r0, r0, ip
 8008baa:	d155      	bne.n	8008c58 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008bae:	2801      	cmp	r0, #1
 8008bb0:	d022      	beq.n	8008bf8 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bb2:	02d6      	lsls	r6, r2, #11
 8008bb4:	d502      	bpl.n	8008bbc <HAL_UART_IRQHandler+0x38>
 8008bb6:	0268      	lsls	r0, r5, #9
 8008bb8:	f100 8104 	bmi.w	8008dc4 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bbc:	0616      	lsls	r6, r2, #24
 8008bbe:	d506      	bpl.n	8008bce <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bc0:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bc4:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bc8:	4328      	orrs	r0, r5
 8008bca:	f040 80f3 	bne.w	8008db4 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bce:	0650      	lsls	r0, r2, #25
 8008bd0:	d534      	bpl.n	8008c3c <HAL_UART_IRQHandler+0xb8>
 8008bd2:	064e      	lsls	r6, r1, #25
 8008bd4:	d532      	bpl.n	8008c3c <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	e843 2100 	strex	r1, r2, [r3]
 8008be2:	2900      	cmp	r1, #0
 8008be4:	d1f7      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008be6:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008be8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008bee:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7ff ff23 	bl	8008a3c <HAL_UART_TxCpltCallback>
}
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bf8:	06d6      	lsls	r6, r2, #27
 8008bfa:	d5da      	bpl.n	8008bb2 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bfc:	06c8      	lsls	r0, r1, #27
 8008bfe:	d5d8      	bpl.n	8008bb2 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c00:	2210      	movs	r2, #16
 8008c02:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	0651      	lsls	r1, r2, #25
 8008c08:	f140 8106 	bpl.w	8008e18 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c0c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008c0e:	6801      	ldr	r1, [r0, #0]
 8008c10:	684a      	ldr	r2, [r1, #4]
 8008c12:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d0ee      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c18:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008c1c:	4295      	cmp	r5, r2
 8008c1e:	d9ea      	bls.n	8008bf6 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8008c20:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c24:	680a      	ldr	r2, [r1, #0]
 8008c26:	0692      	lsls	r2, r2, #26
 8008c28:	f140 812b 	bpl.w	8008e82 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c2c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008c30:	1ae9      	subs	r1, r5, r3
 8008c32:	4620      	mov	r0, r4
 8008c34:	b289      	uxth	r1, r1
 8008c36:	f7ff ffa3 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
}
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c3c:	0215      	lsls	r5, r2, #8
 8008c3e:	d502      	bpl.n	8008c46 <HAL_UART_IRQHandler+0xc2>
 8008c40:	0048      	lsls	r0, r1, #1
 8008c42:	f100 80dc 	bmi.w	8008dfe <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c46:	01d3      	lsls	r3, r2, #7
 8008c48:	d5d5      	bpl.n	8008bf6 <HAL_UART_IRQHandler+0x72>
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	dad3      	bge.n	8008bf6 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c4e:	4620      	mov	r0, r4
}
 8008c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c54:	f000 bbfa 	b.w	800944c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c58:	07d0      	lsls	r0, r2, #31
 8008c5a:	d509      	bpl.n	8008c70 <HAL_UART_IRQHandler+0xec>
 8008c5c:	05ce      	lsls	r6, r1, #23
 8008c5e:	d507      	bpl.n	8008c70 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c60:	2001      	movs	r0, #1
 8008c62:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c64:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008c68:	f040 0001 	orr.w	r0, r0, #1
 8008c6c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c70:	0790      	lsls	r0, r2, #30
 8008c72:	f140 8090 	bpl.w	8008d96 <HAL_UART_IRQHandler+0x212>
 8008c76:	07ee      	lsls	r6, r5, #31
 8008c78:	d50a      	bpl.n	8008c90 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7a:	2002      	movs	r0, #2
 8008c7c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c7e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008c82:	f040 0004 	orr.w	r0, r0, #4
 8008c86:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8a:	0750      	lsls	r0, r2, #29
 8008c8c:	f100 8089 	bmi.w	8008da2 <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c90:	0716      	lsls	r6, r2, #28
 8008c92:	d50c      	bpl.n	8008cae <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008c94:	f001 0020 	and.w	r0, r1, #32
 8008c98:	ea50 000c 	orrs.w	r0, r0, ip
 8008c9c:	d007      	beq.n	8008cae <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c9e:	2008      	movs	r0, #8
 8008ca0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ca2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008ca6:	f040 0008 	orr.w	r0, r0, #8
 8008caa:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cae:	0510      	lsls	r0, r2, #20
 8008cb0:	d50a      	bpl.n	8008cc8 <HAL_UART_IRQHandler+0x144>
 8008cb2:	014e      	lsls	r6, r1, #5
 8008cb4:	d508      	bpl.n	8008cc8 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cb6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008cba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cbc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008cc0:	f040 0020 	orr.w	r0, r0, #32
 8008cc4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d092      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cd0:	0690      	lsls	r0, r2, #26
 8008cd2:	d50a      	bpl.n	8008cea <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cd4:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cd8:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8008cdc:	4329      	orrs	r1, r5
 8008cde:	d004      	beq.n	8008cea <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 8008ce0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008ce2:	b112      	cbz	r2, 8008cea <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ce8:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8008cea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cee:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cf0:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cf4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008cf8:	ea52 0501 	orrs.w	r5, r2, r1
 8008cfc:	f000 80f2 	beq.w	8008ee4 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	e843 2100 	strex	r1, r2, [r3]
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d1f7      	bne.n	8008d00 <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d10:	483f      	ldr	r0, [pc, #252]	; (8008e10 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	f103 0208 	add.w	r2, r3, #8
 8008d16:	e852 2f00 	ldrex	r2, [r2]
 8008d1a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	f103 0508 	add.w	r5, r3, #8
 8008d20:	e845 2100 	strex	r1, r2, [r5]
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d1f4      	bne.n	8008d12 <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008d2a:	2a01      	cmp	r2, #1
 8008d2c:	d052      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d2e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008d30:	2120      	movs	r1, #32
 8008d32:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d36:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d38:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8008d3a:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3c:	064a      	lsls	r2, r1, #25
 8008d3e:	d55a      	bpl.n	8008df6 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	f103 0208 	add.w	r2, r3, #8
 8008d44:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	f103 0008 	add.w	r0, r3, #8
 8008d50:	e840 2100 	strex	r1, r2, [r0]
 8008d54:	2900      	cmp	r1, #0
 8008d56:	d1f3      	bne.n	8008d40 <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 8008d58:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d04b      	beq.n	8008df6 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d5e:	4b2d      	ldr	r3, [pc, #180]	; (8008e14 <HAL_UART_IRQHandler+0x290>)
 8008d60:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d62:	f7fc fdff 	bl	8005964 <HAL_DMA_Abort_IT>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af45 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008d6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008d70:	e00e      	b.n	8008d90 <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d72:	0696      	lsls	r6, r2, #26
 8008d74:	f57f af1a 	bpl.w	8008bac <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d78:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d7c:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 8008d80:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8008d84:	f43f af12 	beq.w	8008bac <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8008d88:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f43f af33 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x72>
}
 8008d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d94:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d96:	0756      	lsls	r6, r2, #29
 8008d98:	f57f af7a 	bpl.w	8008c90 <HAL_UART_IRQHandler+0x10c>
 8008d9c:	07e8      	lsls	r0, r5, #31
 8008d9e:	f57f af77 	bpl.w	8008c90 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008da2:	2004      	movs	r0, #4
 8008da4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008da6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8008daa:	f040 0002 	orr.w	r0, r0, #2
 8008dae:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8008db2:	e76d      	b.n	8008c90 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8008db4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f43f af1d 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8008dbc:	4620      	mov	r0, r4
}
 8008dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008dc2:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008dc8:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008dd0:	f000 bb3a 	b.w	8009448 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	e843 2100 	strex	r1, r2, [r3]
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d0a4      	beq.n	8008d2e <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	e853 2f00 	ldrex	r2, [r3]
 8008de8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	e843 2100 	strex	r1, r2, [r3]
 8008df0:	2900      	cmp	r1, #0
 8008df2:	d1ef      	bne.n	8008dd4 <HAL_UART_IRQHandler+0x250>
 8008df4:	e79b      	b.n	8008d2e <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff fe4c 	bl	8008a94 <HAL_UART_ErrorCallback>
}
 8008dfc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008dfe:	4620      	mov	r0, r4
}
 8008e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008e04:	f000 bb24 	b.w	8009450 <HAL_UARTEx_TxFifoEmptyCallback>
 8008e08:	10000001 	.word	0x10000001
 8008e0c:	04000120 	.word	0x04000120
 8008e10:	effffffe 	.word	0xeffffffe
 8008e14:	08008b6d 	.word	0x08008b6d
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e18:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8008e1c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e20:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8008e24:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e26:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	f43f aee4 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e2e:	1a41      	subs	r1, r0, r1
 8008e30:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008e32:	2900      	cmp	r1, #0
 8008e34:	f43f aedf 	beq.w	8008bf6 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	e843 2000 	strex	r0, r2, [r3]
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1f7      	bne.n	8008e38 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e48:	4d29      	ldr	r5, [pc, #164]	; (8008ef0 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	f103 0208 	add.w	r2, r3, #8
 8008e4e:	e852 2f00 	ldrex	r2, [r2]
 8008e52:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	f103 0c08 	add.w	ip, r3, #8
 8008e58:	e84c 2000 	strex	r0, r2, [ip]
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1f4      	bne.n	8008e4a <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8008e60:	2220      	movs	r2, #32
 8008e62:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008e66:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e68:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	e843 2000 	strex	r0, r2, [r3]
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d1f7      	bne.n	8008e6a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff fe80 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
}
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	e843 2100 	strex	r1, r2, [r3]
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d1f7      	bne.n	8008e82 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	f103 0208 	add.w	r2, r3, #8
 8008e96:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	f103 0508 	add.w	r5, r3, #8
 8008ea2:	e845 2100 	strex	r1, r2, [r5]
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	d1f3      	bne.n	8008e92 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	f103 0208 	add.w	r2, r3, #8
 8008eae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	f103 0508 	add.w	r5, r3, #8
 8008eba:	e845 2100 	strex	r1, r2, [r5]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d1f3      	bne.n	8008eaa <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec8:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ece:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	e843 2100 	strex	r1, r2, [r3]
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	d1f7      	bne.n	8008eca <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008eda:	f7fc fd09 	bl	80058f0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ede:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008ee2:	e6a3      	b.n	8008c2c <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f7ff fdd5 	bl	8008a94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eea:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	effffffe 	.word	0xeffffffe

08008ef4 <UART_SetConfig>:
{
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ef8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008efa:	6882      	ldr	r2, [r0, #8]
 8008efc:	6900      	ldr	r0, [r0, #16]
 8008efe:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f00:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f02:	4302      	orrs	r2, r0
 8008f04:	430a      	orrs	r2, r1
 8008f06:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f08:	49a5      	ldr	r1, [pc, #660]	; (80091a0 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f0a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f0c:	4029      	ands	r1, r5
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	68e1      	ldr	r1, [r4, #12]
 8008f16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008f1a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f1c:	49a1      	ldr	r1, [pc, #644]	; (80091a4 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f1e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f20:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f22:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f24:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f26:	d06b      	beq.n	8009000 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8008f28:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f2a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8008f2e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8008f32:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f34:	430a      	orrs	r2, r1
 8008f36:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f3c:	f022 020f 	bic.w	r2, r2, #15
 8008f40:	430a      	orrs	r2, r1
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f44:	4a98      	ldr	r2, [pc, #608]	; (80091a8 <UART_SetConfig+0x2b4>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d012      	beq.n	8008f70 <UART_SetConfig+0x7c>
 8008f4a:	4a98      	ldr	r2, [pc, #608]	; (80091ac <UART_SetConfig+0x2b8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d036      	beq.n	8008fbe <UART_SetConfig+0xca>
 8008f50:	4a97      	ldr	r2, [pc, #604]	; (80091b0 <UART_SetConfig+0x2bc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f000 80f8 	beq.w	8009148 <UART_SetConfig+0x254>
 8008f58:	4a96      	ldr	r2, [pc, #600]	; (80091b4 <UART_SetConfig+0x2c0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f000 80a4 	beq.w	80090a8 <UART_SetConfig+0x1b4>
        ret = HAL_ERROR;
 8008f60:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8008f62:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008f64:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8008f68:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8008f6c:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f70:	4b91      	ldr	r3, [pc, #580]	; (80091b8 <UART_SetConfig+0x2c4>)
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	f240 808d 	bls.w	800909c <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008f86:	f000 80fc 	beq.w	8009182 <UART_SetConfig+0x28e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f8a:	f7fd ffdb 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f000 80d8 	beq.w	8009144 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f96:	6862      	ldr	r2, [r4, #4]
 8008f98:	4b88      	ldr	r3, [pc, #544]	; (80091bc <UART_SetConfig+0x2c8>)
 8008f9a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008f9e:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fa2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fa6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008faa:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fae:	f1a3 0210 	sub.w	r2, r3, #16
 8008fb2:	428a      	cmp	r2, r1
 8008fb4:	d8d4      	bhi.n	8008f60 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	2000      	movs	r0, #0
 8008fba:	60d3      	str	r3, [r2, #12]
 8008fbc:	e7d1      	b.n	8008f62 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fbe:	4b7e      	ldr	r3, [pc, #504]	; (80091b8 <UART_SetConfig+0x2c4>)
 8008fc0:	4a7f      	ldr	r2, [pc, #508]	; (80091c0 <UART_SetConfig+0x2cc>)
 8008fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc6:	f003 030c 	and.w	r3, r3, #12
 8008fca:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fcc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008fd0:	d07c      	beq.n	80090cc <UART_SetConfig+0x1d8>
    switch (clocksource)
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	d8c4      	bhi.n	8008f60 <UART_SetConfig+0x6c>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0xe8>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009103 	.word	0x08009103
 8008fe0:	08008f8b 	.word	0x08008f8b
 8008fe4:	0800917f 	.word	0x0800917f
 8008fe8:	08008f61 	.word	0x08008f61
 8008fec:	080090c7 	.word	0x080090c7
 8008ff0:	08008f61 	.word	0x08008f61
 8008ff4:	08008f61 	.word	0x08008f61
 8008ff8:	08008f61 	.word	0x08008f61
 8008ffc:	0800916f 	.word	0x0800916f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009000:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009004:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009008:	4311      	orrs	r1, r2
 800900a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009010:	4869      	ldr	r0, [pc, #420]	; (80091b8 <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009012:	f022 020f 	bic.w	r2, r2, #15
 8009016:	430a      	orrs	r2, r1
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800901a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800901e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009026:	f000 80a8 	beq.w	800917a <UART_SetConfig+0x286>
 800902a:	d80b      	bhi.n	8009044 <UART_SetConfig+0x150>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d038      	beq.n	80090a2 <UART_SetConfig+0x1ae>
 8009030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009034:	d194      	bne.n	8008f60 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8009036:	f7fd fe43 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800903a:	2800      	cmp	r0, #0
 800903c:	f000 8082 	beq.w	8009144 <UART_SetConfig+0x250>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009040:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009042:	e004      	b.n	800904e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009048:	d18a      	bne.n	8008f60 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 800904a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800904e:	4b5b      	ldr	r3, [pc, #364]	; (80091bc <UART_SetConfig+0x2c8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009050:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009052:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8009056:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800905a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800905e:	4299      	cmp	r1, r3
 8009060:	f63f af7e 	bhi.w	8008f60 <UART_SetConfig+0x6c>
 8009064:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009068:	f63f af7a 	bhi.w	8008f60 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800906c:	2300      	movs	r3, #0
 800906e:	4619      	mov	r1, r3
 8009070:	f7f7 fe12 	bl	8000c98 <__aeabi_uldivmod>
 8009074:	086a      	lsrs	r2, r5, #1
 8009076:	0203      	lsls	r3, r0, #8
 8009078:	0209      	lsls	r1, r1, #8
 800907a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800907e:	1898      	adds	r0, r3, r2
 8009080:	f141 0100 	adc.w	r1, r1, #0
 8009084:	462a      	mov	r2, r5
 8009086:	2300      	movs	r3, #0
 8009088:	f7f7 fe06 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800908c:	4a4d      	ldr	r2, [pc, #308]	; (80091c4 <UART_SetConfig+0x2d0>)
 800908e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8009092:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009094:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009096:	f63f af63 	bhi.w	8008f60 <UART_SetConfig+0x6c>
 800909a:	e78c      	b.n	8008fb6 <UART_SetConfig+0xc2>
 800909c:	4a4a      	ldr	r2, [pc, #296]	; (80091c8 <UART_SetConfig+0x2d4>)
 800909e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80090a0:	e794      	b.n	8008fcc <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a2:	f7fd ff3d 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
        break;
 80090a6:	e7c8      	b.n	800903a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090a8:	4b43      	ldr	r3, [pc, #268]	; (80091b8 <UART_SetConfig+0x2c4>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090b2:	2b80      	cmp	r3, #128	; 0x80
 80090b4:	d06d      	beq.n	8009192 <UART_SetConfig+0x29e>
 80090b6:	d85d      	bhi.n	8009174 <UART_SetConfig+0x280>
 80090b8:	b303      	cbz	r3, 80090fc <UART_SetConfig+0x208>
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	f47f af50 	bne.w	8008f60 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80090c4:	d020      	beq.n	8009108 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 80090c6:	f7fd fdfb 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
        break;
 80090ca:	e760      	b.n	8008f8e <UART_SetConfig+0x9a>
    switch (clocksource)
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	f63f af47 	bhi.w	8008f60 <UART_SetConfig+0x6c>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0x1e4>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	08009189 	.word	0x08009189
 80090dc:	08009183 	.word	0x08009183
 80090e0:	0800918f 	.word	0x0800918f
 80090e4:	08008f61 	.word	0x08008f61
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08008f61 	.word	0x08008f61
 80090f0:	08008f61 	.word	0x08008f61
 80090f4:	08008f61 	.word	0x08008f61
 80090f8:	08009111 	.word	0x08009111
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009100:	d042      	beq.n	8009188 <UART_SetConfig+0x294>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009102:	f7fd ff0d 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
        break;
 8009106:	e742      	b.n	8008f8e <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8009108:	f7fd fdda 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800910c:	b1d0      	cbz	r0, 8009144 <UART_SetConfig+0x250>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009110:	6862      	ldr	r2, [r4, #4]
 8009112:	4b2a      	ldr	r3, [pc, #168]	; (80091bc <UART_SetConfig+0x2c8>)
 8009114:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8009118:	fbb0 f0f1 	udiv	r0, r0, r1
 800911c:	0853      	lsrs	r3, r2, #1
 800911e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009122:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009126:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800912a:	f1a3 0210 	sub.w	r2, r3, #16
 800912e:	428a      	cmp	r2, r1
 8009130:	f63f af16 	bhi.w	8008f60 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009134:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009138:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800913a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800913c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009140:	4313      	orrs	r3, r2
 8009142:	60cb      	str	r3, [r1, #12]
 8009144:	2000      	movs	r0, #0
 8009146:	e70c      	b.n	8008f62 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009148:	4b1b      	ldr	r3, [pc, #108]	; (80091b8 <UART_SetConfig+0x2c4>)
 800914a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009152:	2b20      	cmp	r3, #32
 8009154:	d01d      	beq.n	8009192 <UART_SetConfig+0x29e>
 8009156:	d804      	bhi.n	8009162 <UART_SetConfig+0x26e>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0cf      	beq.n	80090fc <UART_SetConfig+0x208>
 800915c:	2b10      	cmp	r3, #16
 800915e:	d0af      	beq.n	80090c0 <UART_SetConfig+0x1cc>
 8009160:	e6fe      	b.n	8008f60 <UART_SetConfig+0x6c>
 8009162:	2b30      	cmp	r3, #48	; 0x30
 8009164:	f47f aefc 	bne.w	8008f60 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009168:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800916c:	d0d0      	beq.n	8009110 <UART_SetConfig+0x21c>
    switch (clocksource)
 800916e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009172:	e710      	b.n	8008f96 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009174:	2bc0      	cmp	r3, #192	; 0xc0
 8009176:	d0f7      	beq.n	8009168 <UART_SetConfig+0x274>
 8009178:	e6f2      	b.n	8008f60 <UART_SetConfig+0x6c>
 800917a:	4814      	ldr	r0, [pc, #80]	; (80091cc <UART_SetConfig+0x2d8>)
 800917c:	e767      	b.n	800904e <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800917e:	4813      	ldr	r0, [pc, #76]	; (80091cc <UART_SetConfig+0x2d8>)
 8009180:	e709      	b.n	8008f96 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009182:	f7fd fedf 	bl	8006f44 <HAL_RCC_GetPCLK2Freq>
        break;
 8009186:	e7c1      	b.n	800910c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009188:	f7fd feca 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
        break;
 800918c:	e7be      	b.n	800910c <UART_SetConfig+0x218>
        pclk = (uint32_t) HSI_VALUE;
 800918e:	480f      	ldr	r0, [pc, #60]	; (80091cc <UART_SetConfig+0x2d8>)
 8009190:	e7be      	b.n	8009110 <UART_SetConfig+0x21c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009192:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009196:	480d      	ldr	r0, [pc, #52]	; (80091cc <UART_SetConfig+0x2d8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009198:	f47f aefd 	bne.w	8008f96 <UART_SetConfig+0xa2>
 800919c:	e7b8      	b.n	8009110 <UART_SetConfig+0x21c>
 800919e:	bf00      	nop
 80091a0:	cfff69f3 	.word	0xcfff69f3
 80091a4:	40008000 	.word	0x40008000
 80091a8:	40013800 	.word	0x40013800
 80091ac:	40004400 	.word	0x40004400
 80091b0:	40004800 	.word	0x40004800
 80091b4:	40004c00 	.word	0x40004c00
 80091b8:	40021000 	.word	0x40021000
 80091bc:	0800c944 	.word	0x0800c944
 80091c0:	0800c934 	.word	0x0800c934
 80091c4:	000ffcff 	.word	0x000ffcff
 80091c8:	0800c930 	.word	0x0800c930
 80091cc:	00f42400 	.word	0x00f42400

080091d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091d2:	07da      	lsls	r2, r3, #31
{
 80091d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091d6:	d506      	bpl.n	80091e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091d8:	6801      	ldr	r1, [r0, #0]
 80091da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80091dc:	684a      	ldr	r2, [r1, #4]
 80091de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80091e2:	4322      	orrs	r2, r4
 80091e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091e6:	079c      	lsls	r4, r3, #30
 80091e8:	d506      	bpl.n	80091f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091ea:	6801      	ldr	r1, [r0, #0]
 80091ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80091ee:	684a      	ldr	r2, [r1, #4]
 80091f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80091f4:	4322      	orrs	r2, r4
 80091f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091f8:	0759      	lsls	r1, r3, #29
 80091fa:	d506      	bpl.n	800920a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091fc:	6801      	ldr	r1, [r0, #0]
 80091fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009200:	684a      	ldr	r2, [r1, #4]
 8009202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009206:	4322      	orrs	r2, r4
 8009208:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800920a:	071a      	lsls	r2, r3, #28
 800920c:	d506      	bpl.n	800921c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800920e:	6801      	ldr	r1, [r0, #0]
 8009210:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009212:	684a      	ldr	r2, [r1, #4]
 8009214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009218:	4322      	orrs	r2, r4
 800921a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800921c:	06dc      	lsls	r4, r3, #27
 800921e:	d506      	bpl.n	800922e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009220:	6801      	ldr	r1, [r0, #0]
 8009222:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800922a:	4322      	orrs	r2, r4
 800922c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800922e:	0699      	lsls	r1, r3, #26
 8009230:	d506      	bpl.n	8009240 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009232:	6801      	ldr	r1, [r0, #0]
 8009234:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009236:	688a      	ldr	r2, [r1, #8]
 8009238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800923c:	4322      	orrs	r2, r4
 800923e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009240:	065a      	lsls	r2, r3, #25
 8009242:	d509      	bpl.n	8009258 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009244:	6801      	ldr	r1, [r0, #0]
 8009246:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009248:	684a      	ldr	r2, [r1, #4]
 800924a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800924e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009250:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009254:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009256:	d00b      	beq.n	8009270 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	d506      	bpl.n	800926a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800925c:	6802      	ldr	r2, [r0, #0]
 800925e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009260:	6853      	ldr	r3, [r2, #4]
 8009262:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009266:	430b      	orrs	r3, r1
 8009268:	6053      	str	r3, [r2, #4]
}
 800926a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009270:	684a      	ldr	r2, [r1, #4]
 8009272:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009274:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009278:	4322      	orrs	r2, r4
 800927a:	604a      	str	r2, [r1, #4]
 800927c:	e7ec      	b.n	8009258 <UART_AdvFeatureConfig+0x88>
 800927e:	bf00      	nop

08009280 <UART_WaitOnFlagUntilTimeout>:
{
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009288:	6804      	ldr	r4, [r0, #0]
{
 800928a:	4607      	mov	r7, r0
 800928c:	460e      	mov	r6, r1
 800928e:	4615      	mov	r5, r2
 8009290:	4699      	mov	r9, r3
 8009292:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009296:	d10a      	bne.n	80092ae <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009298:	69e3      	ldr	r3, [r4, #28]
 800929a:	ea36 0303 	bics.w	r3, r6, r3
 800929e:	bf0c      	ite	eq
 80092a0:	2301      	moveq	r3, #1
 80092a2:	2300      	movne	r3, #0
 80092a4:	429d      	cmp	r5, r3
 80092a6:	d0f7      	beq.n	8009298 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80092a8:	2000      	movs	r0, #0
}
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ae:	69e2      	ldr	r2, [r4, #28]
 80092b0:	ea36 0202 	bics.w	r2, r6, r2
 80092b4:	bf0c      	ite	eq
 80092b6:	2301      	moveq	r3, #1
 80092b8:	2300      	movne	r3, #0
 80092ba:	42ab      	cmp	r3, r5
 80092bc:	d1f4      	bne.n	80092a8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092be:	f7fb fa29 	bl	8004714 <HAL_GetTick>
 80092c2:	eba0 0009 	sub.w	r0, r0, r9
 80092c6:	4540      	cmp	r0, r8
 80092c8:	d833      	bhi.n	8009332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80092ca:	f1b8 0f00 	cmp.w	r8, #0
 80092ce:	d030      	beq.n	8009332 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092d0:	683c      	ldr	r4, [r7, #0]
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	0758      	lsls	r0, r3, #29
 80092d6:	4622      	mov	r2, r4
 80092d8:	d5db      	bpl.n	8009292 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092da:	69e3      	ldr	r3, [r4, #28]
 80092dc:	0519      	lsls	r1, r3, #20
 80092de:	d5d8      	bpl.n	8009292 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092e4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	e844 3100 	strex	r1, r3, [r4]
 80092f2:	b139      	cbz	r1, 8009304 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	e852 3f00 	ldrex	r3, [r2]
 80092f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	e842 3100 	strex	r1, r3, [r2]
 8009300:	2900      	cmp	r1, #0
 8009302:	d1f7      	bne.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009304:	f102 0308 	add.w	r3, r2, #8
 8009308:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	f102 0008 	add.w	r0, r2, #8
 8009314:	e840 3100 	strex	r1, r3, [r0]
 8009318:	2900      	cmp	r1, #0
 800931a:	d1f3      	bne.n	8009304 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800931c:	2320      	movs	r3, #32
 800931e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009322:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800932a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800932c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009330:	e7bb      	b.n	80092aa <UART_WaitOnFlagUntilTimeout+0x2a>
 8009332:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	e842 3100 	strex	r1, r3, [r2]
 8009340:	2900      	cmp	r1, #0
 8009342:	d1f7      	bne.n	8009334 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	f102 0308 	add.w	r3, r2, #8
 8009348:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	f102 0008 	add.w	r0, r2, #8
 8009354:	e840 3100 	strex	r1, r3, [r0]
 8009358:	2900      	cmp	r1, #0
 800935a:	d1f3      	bne.n	8009344 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800935c:	2320      	movs	r3, #32
 800935e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009362:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800936a:	2003      	movs	r0, #3
 800936c:	e79d      	b.n	80092aa <UART_WaitOnFlagUntilTimeout+0x2a>
 800936e:	bf00      	nop

08009370 <HAL_UART_Init>:
  if (huart == NULL)
 8009370:	2800      	cmp	r0, #0
 8009372:	d066      	beq.n	8009442 <HAL_UART_Init+0xd2>
{
 8009374:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009376:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800937a:	b082      	sub	sp, #8
 800937c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800937e:	2b00      	cmp	r3, #0
 8009380:	d04c      	beq.n	800941c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8009382:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009384:	2324      	movs	r3, #36	; 0x24
 8009386:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009390:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009392:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009394:	f7ff fdae 	bl	8008ef4 <UART_SetConfig>
 8009398:	2801      	cmp	r0, #1
 800939a:	d03c      	beq.n	8009416 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800939c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d135      	bne.n	800940e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	6859      	ldr	r1, [r3, #4]
 80093a6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80093aa:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ac:	6899      	ldr	r1, [r3, #8]
 80093ae:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80093b2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80093b4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093b6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80093b8:	f041 0101 	orr.w	r1, r1, #1
 80093bc:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093be:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80093c2:	f7fb f9a7 	bl	8004714 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80093cc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ce:	d40e      	bmi.n	80093ee <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	075b      	lsls	r3, r3, #29
 80093d4:	d427      	bmi.n	8009426 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80093de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80093e2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 80093e6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80093ea:	b002      	add	sp, #8
 80093ec:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	462a      	mov	r2, r5
 80093f6:	4603      	mov	r3, r0
 80093f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093fc:	4620      	mov	r0, r4
 80093fe:	f7ff ff3f 	bl	8009280 <UART_WaitOnFlagUntilTimeout>
 8009402:	b9e0      	cbnz	r0, 800943e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	075b      	lsls	r3, r3, #29
 800940a:	d40c      	bmi.n	8009426 <HAL_UART_Init+0xb6>
 800940c:	e7e3      	b.n	80093d6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800940e:	4620      	mov	r0, r4
 8009410:	f7ff fede 	bl	80091d0 <UART_AdvFeatureConfig>
 8009414:	e7c5      	b.n	80093a2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009416:	2001      	movs	r0, #1
}
 8009418:	b002      	add	sp, #8
 800941a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800941c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009420:	f7fb f8a2 	bl	8004568 <HAL_UART_MspInit>
 8009424:	e7ad      	b.n	8009382 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2200      	movs	r2, #0
 800942e:	4633      	mov	r3, r6
 8009430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009434:	4620      	mov	r0, r4
 8009436:	f7ff ff23 	bl	8009280 <UART_WaitOnFlagUntilTimeout>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0cb      	beq.n	80093d6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800943e:	2003      	movs	r0, #3
 8009440:	e7d3      	b.n	80093ea <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8009442:	2001      	movs	r0, #1
}
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop

08009448 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop

0800944c <HAL_UARTEx_RxFifoFullCallback>:
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop

08009450 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop

08009454 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009454:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009458:	2b01      	cmp	r3, #1
 800945a:	d017      	beq.n	800948c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800945c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800945e:	2324      	movs	r3, #36	; 0x24
{
 8009460:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009462:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009466:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009468:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800946a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800946c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009470:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009474:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009476:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009478:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800947e:	2220      	movs	r2, #32
 8009480:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8009484:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009488:	4618      	mov	r0, r3
}
 800948a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800948c:	2002      	movs	r0, #2
}
 800948e:	4770      	bx	lr

08009490 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009490:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009494:	2a01      	cmp	r2, #1
 8009496:	d037      	beq.n	8009508 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009498:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800949a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800949c:	2024      	movs	r0, #36	; 0x24
{
 800949e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80094a0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094a4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094a6:	6810      	ldr	r0, [r2, #0]
 80094a8:	f020 0001 	bic.w	r0, r0, #1
 80094ac:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094ae:	6890      	ldr	r0, [r2, #8]
 80094b0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80094b4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094b6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094b8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094ba:	b310      	cbz	r0, 8009502 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094bc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094be:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80094c0:	4d12      	ldr	r5, [pc, #72]	; (800950c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094c6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ca:	4911      	ldr	r1, [pc, #68]	; (8009510 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80094cc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094d0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80094d4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80094d8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094dc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094de:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094e0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094e4:	fbb1 f1f5 	udiv	r1, r1, r5
 80094e8:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80094ec:	2100      	movs	r1, #0
 80094ee:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80094f2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80094f6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80094fa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80094fc:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009500:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009502:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009504:	4608      	mov	r0, r1
 8009506:	e7ef      	b.n	80094e8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009508:	2002      	movs	r0, #2
}
 800950a:	4770      	bx	lr
 800950c:	0800c95c 	.word	0x0800c95c
 8009510:	0800c964 	.word	0x0800c964

08009514 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009514:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009518:	2a01      	cmp	r2, #1
 800951a:	d037      	beq.n	800958c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800951c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800951e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	2024      	movs	r0, #36	; 0x24
{
 8009522:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009524:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009528:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800952a:	6810      	ldr	r0, [r2, #0]
 800952c:	f020 0001 	bic.w	r0, r0, #1
 8009530:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009532:	6890      	ldr	r0, [r2, #8]
 8009534:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8009538:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800953a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800953c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800953e:	b310      	cbz	r0, 8009586 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009540:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009542:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009544:	4d12      	ldr	r5, [pc, #72]	; (8009590 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009546:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800954a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800954e:	4911      	ldr	r1, [pc, #68]	; (8009594 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009550:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009554:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009558:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800955c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009560:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009562:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009564:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009568:	fbb1 f1f5 	udiv	r1, r1, r5
 800956c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009570:	2100      	movs	r1, #0
 8009572:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009576:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009578:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800957a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800957e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009580:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009584:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009586:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009588:	4608      	mov	r0, r1
 800958a:	e7ef      	b.n	800956c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800958c:	2002      	movs	r0, #2
}
 800958e:	4770      	bx	lr
 8009590:	0800c95c 	.word	0x0800c95c
 8009594:	0800c964 	.word	0x0800c964

08009598 <__cvt>:
 8009598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	ec55 4b10 	vmov	r4, r5, d0
 80095a0:	2d00      	cmp	r5, #0
 80095a2:	460e      	mov	r6, r1
 80095a4:	4619      	mov	r1, r3
 80095a6:	462b      	mov	r3, r5
 80095a8:	bfbb      	ittet	lt
 80095aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80095ae:	461d      	movlt	r5, r3
 80095b0:	2300      	movge	r3, #0
 80095b2:	232d      	movlt	r3, #45	; 0x2d
 80095b4:	700b      	strb	r3, [r1, #0]
 80095b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095bc:	4691      	mov	r9, r2
 80095be:	f023 0820 	bic.w	r8, r3, #32
 80095c2:	bfbc      	itt	lt
 80095c4:	4622      	movlt	r2, r4
 80095c6:	4614      	movlt	r4, r2
 80095c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095cc:	d005      	beq.n	80095da <__cvt+0x42>
 80095ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095d2:	d100      	bne.n	80095d6 <__cvt+0x3e>
 80095d4:	3601      	adds	r6, #1
 80095d6:	2102      	movs	r1, #2
 80095d8:	e000      	b.n	80095dc <__cvt+0x44>
 80095da:	2103      	movs	r1, #3
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	ab02      	add	r3, sp, #8
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	ec45 4b10 	vmov	d0, r4, r5
 80095e8:	4653      	mov	r3, sl
 80095ea:	4632      	mov	r2, r6
 80095ec:	f000 fea0 	bl	800a330 <_dtoa_r>
 80095f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095f4:	4607      	mov	r7, r0
 80095f6:	d102      	bne.n	80095fe <__cvt+0x66>
 80095f8:	f019 0f01 	tst.w	r9, #1
 80095fc:	d022      	beq.n	8009644 <__cvt+0xac>
 80095fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009602:	eb07 0906 	add.w	r9, r7, r6
 8009606:	d110      	bne.n	800962a <__cvt+0x92>
 8009608:	783b      	ldrb	r3, [r7, #0]
 800960a:	2b30      	cmp	r3, #48	; 0x30
 800960c:	d10a      	bne.n	8009624 <__cvt+0x8c>
 800960e:	2200      	movs	r2, #0
 8009610:	2300      	movs	r3, #0
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f7f7 fa7f 	bl	8000b18 <__aeabi_dcmpeq>
 800961a:	b918      	cbnz	r0, 8009624 <__cvt+0x8c>
 800961c:	f1c6 0601 	rsb	r6, r6, #1
 8009620:	f8ca 6000 	str.w	r6, [sl]
 8009624:	f8da 3000 	ldr.w	r3, [sl]
 8009628:	4499      	add	r9, r3
 800962a:	2200      	movs	r2, #0
 800962c:	2300      	movs	r3, #0
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8009636:	b108      	cbz	r0, 800963c <__cvt+0xa4>
 8009638:	f8cd 900c 	str.w	r9, [sp, #12]
 800963c:	2230      	movs	r2, #48	; 0x30
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	454b      	cmp	r3, r9
 8009642:	d307      	bcc.n	8009654 <__cvt+0xbc>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009648:	1bdb      	subs	r3, r3, r7
 800964a:	4638      	mov	r0, r7
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	b004      	add	sp, #16
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	1c59      	adds	r1, r3, #1
 8009656:	9103      	str	r1, [sp, #12]
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	e7f0      	b.n	800963e <__cvt+0xa6>

0800965c <__exponent>:
 800965c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965e:	4603      	mov	r3, r0
 8009660:	2900      	cmp	r1, #0
 8009662:	bfb8      	it	lt
 8009664:	4249      	neglt	r1, r1
 8009666:	f803 2b02 	strb.w	r2, [r3], #2
 800966a:	bfb4      	ite	lt
 800966c:	222d      	movlt	r2, #45	; 0x2d
 800966e:	222b      	movge	r2, #43	; 0x2b
 8009670:	2909      	cmp	r1, #9
 8009672:	7042      	strb	r2, [r0, #1]
 8009674:	dd2a      	ble.n	80096cc <__exponent+0x70>
 8009676:	f10d 0207 	add.w	r2, sp, #7
 800967a:	4617      	mov	r7, r2
 800967c:	260a      	movs	r6, #10
 800967e:	4694      	mov	ip, r2
 8009680:	fb91 f5f6 	sdiv	r5, r1, r6
 8009684:	fb06 1415 	mls	r4, r6, r5, r1
 8009688:	3430      	adds	r4, #48	; 0x30
 800968a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800968e:	460c      	mov	r4, r1
 8009690:	2c63      	cmp	r4, #99	; 0x63
 8009692:	f102 32ff 	add.w	r2, r2, #4294967295
 8009696:	4629      	mov	r1, r5
 8009698:	dcf1      	bgt.n	800967e <__exponent+0x22>
 800969a:	3130      	adds	r1, #48	; 0x30
 800969c:	f1ac 0402 	sub.w	r4, ip, #2
 80096a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80096a4:	1c41      	adds	r1, r0, #1
 80096a6:	4622      	mov	r2, r4
 80096a8:	42ba      	cmp	r2, r7
 80096aa:	d30a      	bcc.n	80096c2 <__exponent+0x66>
 80096ac:	f10d 0209 	add.w	r2, sp, #9
 80096b0:	eba2 020c 	sub.w	r2, r2, ip
 80096b4:	42bc      	cmp	r4, r7
 80096b6:	bf88      	it	hi
 80096b8:	2200      	movhi	r2, #0
 80096ba:	4413      	add	r3, r2
 80096bc:	1a18      	subs	r0, r3, r0
 80096be:	b003      	add	sp, #12
 80096c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80096c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80096ca:	e7ed      	b.n	80096a8 <__exponent+0x4c>
 80096cc:	2330      	movs	r3, #48	; 0x30
 80096ce:	3130      	adds	r1, #48	; 0x30
 80096d0:	7083      	strb	r3, [r0, #2]
 80096d2:	70c1      	strb	r1, [r0, #3]
 80096d4:	1d03      	adds	r3, r0, #4
 80096d6:	e7f1      	b.n	80096bc <__exponent+0x60>

080096d8 <_printf_float>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	ed2d 8b02 	vpush	{d8}
 80096e0:	b08d      	sub	sp, #52	; 0x34
 80096e2:	460c      	mov	r4, r1
 80096e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096e8:	4616      	mov	r6, r2
 80096ea:	461f      	mov	r7, r3
 80096ec:	4605      	mov	r5, r0
 80096ee:	f000 fd0f 	bl	800a110 <_localeconv_r>
 80096f2:	f8d0 a000 	ldr.w	sl, [r0]
 80096f6:	4650      	mov	r0, sl
 80096f8:	f7f6 fde2 	bl	80002c0 <strlen>
 80096fc:	2300      	movs	r3, #0
 80096fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	f8d8 3000 	ldr.w	r3, [r8]
 8009708:	f894 b018 	ldrb.w	fp, [r4, #24]
 800970c:	3307      	adds	r3, #7
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	f8c8 2000 	str.w	r2, [r8]
 800971a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800971e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009722:	9307      	str	r3, [sp, #28]
 8009724:	f8cd 8018 	str.w	r8, [sp, #24]
 8009728:	ee08 0a10 	vmov	s16, r0
 800972c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009734:	4b9e      	ldr	r3, [pc, #632]	; (80099b0 <_printf_float+0x2d8>)
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	f7f7 fa1f 	bl	8000b7c <__aeabi_dcmpun>
 800973e:	bb88      	cbnz	r0, 80097a4 <_printf_float+0xcc>
 8009740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009744:	4b9a      	ldr	r3, [pc, #616]	; (80099b0 <_printf_float+0x2d8>)
 8009746:	f04f 32ff 	mov.w	r2, #4294967295
 800974a:	f7f7 f9f9 	bl	8000b40 <__aeabi_dcmple>
 800974e:	bb48      	cbnz	r0, 80097a4 <_printf_float+0xcc>
 8009750:	2200      	movs	r2, #0
 8009752:	2300      	movs	r3, #0
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f7 f9e8 	bl	8000b2c <__aeabi_dcmplt>
 800975c:	b110      	cbz	r0, 8009764 <_printf_float+0x8c>
 800975e:	232d      	movs	r3, #45	; 0x2d
 8009760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009764:	4a93      	ldr	r2, [pc, #588]	; (80099b4 <_printf_float+0x2dc>)
 8009766:	4b94      	ldr	r3, [pc, #592]	; (80099b8 <_printf_float+0x2e0>)
 8009768:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800976c:	bf94      	ite	ls
 800976e:	4690      	movls	r8, r2
 8009770:	4698      	movhi	r8, r3
 8009772:	2303      	movs	r3, #3
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	9b05      	ldr	r3, [sp, #20]
 8009778:	f023 0304 	bic.w	r3, r3, #4
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	f04f 0900 	mov.w	r9, #0
 8009782:	9700      	str	r7, [sp, #0]
 8009784:	4633      	mov	r3, r6
 8009786:	aa0b      	add	r2, sp, #44	; 0x2c
 8009788:	4621      	mov	r1, r4
 800978a:	4628      	mov	r0, r5
 800978c:	f000 f9da 	bl	8009b44 <_printf_common>
 8009790:	3001      	adds	r0, #1
 8009792:	f040 8090 	bne.w	80098b6 <_printf_float+0x1de>
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
 800979a:	b00d      	add	sp, #52	; 0x34
 800979c:	ecbd 8b02 	vpop	{d8}
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	4642      	mov	r2, r8
 80097a6:	464b      	mov	r3, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	4649      	mov	r1, r9
 80097ac:	f7f7 f9e6 	bl	8000b7c <__aeabi_dcmpun>
 80097b0:	b140      	cbz	r0, 80097c4 <_printf_float+0xec>
 80097b2:	464b      	mov	r3, r9
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bfbc      	itt	lt
 80097b8:	232d      	movlt	r3, #45	; 0x2d
 80097ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097be:	4a7f      	ldr	r2, [pc, #508]	; (80099bc <_printf_float+0x2e4>)
 80097c0:	4b7f      	ldr	r3, [pc, #508]	; (80099c0 <_printf_float+0x2e8>)
 80097c2:	e7d1      	b.n	8009768 <_printf_float+0x90>
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097ca:	9206      	str	r2, [sp, #24]
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	d13f      	bne.n	8009850 <_printf_float+0x178>
 80097d0:	2306      	movs	r3, #6
 80097d2:	6063      	str	r3, [r4, #4]
 80097d4:	9b05      	ldr	r3, [sp, #20]
 80097d6:	6861      	ldr	r1, [r4, #4]
 80097d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097dc:	2300      	movs	r3, #0
 80097de:	9303      	str	r3, [sp, #12]
 80097e0:	ab0a      	add	r3, sp, #40	; 0x28
 80097e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097e6:	ab09      	add	r3, sp, #36	; 0x24
 80097e8:	ec49 8b10 	vmov	d0, r8, r9
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097f4:	4628      	mov	r0, r5
 80097f6:	f7ff fecf 	bl	8009598 <__cvt>
 80097fa:	9b06      	ldr	r3, [sp, #24]
 80097fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097fe:	2b47      	cmp	r3, #71	; 0x47
 8009800:	4680      	mov	r8, r0
 8009802:	d108      	bne.n	8009816 <_printf_float+0x13e>
 8009804:	1cc8      	adds	r0, r1, #3
 8009806:	db02      	blt.n	800980e <_printf_float+0x136>
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	4299      	cmp	r1, r3
 800980c:	dd41      	ble.n	8009892 <_printf_float+0x1ba>
 800980e:	f1ab 0302 	sub.w	r3, fp, #2
 8009812:	fa5f fb83 	uxtb.w	fp, r3
 8009816:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800981a:	d820      	bhi.n	800985e <_printf_float+0x186>
 800981c:	3901      	subs	r1, #1
 800981e:	465a      	mov	r2, fp
 8009820:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009824:	9109      	str	r1, [sp, #36]	; 0x24
 8009826:	f7ff ff19 	bl	800965c <__exponent>
 800982a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800982c:	1813      	adds	r3, r2, r0
 800982e:	2a01      	cmp	r2, #1
 8009830:	4681      	mov	r9, r0
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	dc02      	bgt.n	800983c <_printf_float+0x164>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	07d2      	lsls	r2, r2, #31
 800983a:	d501      	bpl.n	8009840 <_printf_float+0x168>
 800983c:	3301      	adds	r3, #1
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009844:	2b00      	cmp	r3, #0
 8009846:	d09c      	beq.n	8009782 <_printf_float+0xaa>
 8009848:	232d      	movs	r3, #45	; 0x2d
 800984a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800984e:	e798      	b.n	8009782 <_printf_float+0xaa>
 8009850:	9a06      	ldr	r2, [sp, #24]
 8009852:	2a47      	cmp	r2, #71	; 0x47
 8009854:	d1be      	bne.n	80097d4 <_printf_float+0xfc>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1bc      	bne.n	80097d4 <_printf_float+0xfc>
 800985a:	2301      	movs	r3, #1
 800985c:	e7b9      	b.n	80097d2 <_printf_float+0xfa>
 800985e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009862:	d118      	bne.n	8009896 <_printf_float+0x1be>
 8009864:	2900      	cmp	r1, #0
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	dd0b      	ble.n	8009882 <_printf_float+0x1aa>
 800986a:	6121      	str	r1, [r4, #16]
 800986c:	b913      	cbnz	r3, 8009874 <_printf_float+0x19c>
 800986e:	6822      	ldr	r2, [r4, #0]
 8009870:	07d0      	lsls	r0, r2, #31
 8009872:	d502      	bpl.n	800987a <_printf_float+0x1a2>
 8009874:	3301      	adds	r3, #1
 8009876:	440b      	add	r3, r1
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	65a1      	str	r1, [r4, #88]	; 0x58
 800987c:	f04f 0900 	mov.w	r9, #0
 8009880:	e7de      	b.n	8009840 <_printf_float+0x168>
 8009882:	b913      	cbnz	r3, 800988a <_printf_float+0x1b2>
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	07d2      	lsls	r2, r2, #31
 8009888:	d501      	bpl.n	800988e <_printf_float+0x1b6>
 800988a:	3302      	adds	r3, #2
 800988c:	e7f4      	b.n	8009878 <_printf_float+0x1a0>
 800988e:	2301      	movs	r3, #1
 8009890:	e7f2      	b.n	8009878 <_printf_float+0x1a0>
 8009892:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009898:	4299      	cmp	r1, r3
 800989a:	db05      	blt.n	80098a8 <_printf_float+0x1d0>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	6121      	str	r1, [r4, #16]
 80098a0:	07d8      	lsls	r0, r3, #31
 80098a2:	d5ea      	bpl.n	800987a <_printf_float+0x1a2>
 80098a4:	1c4b      	adds	r3, r1, #1
 80098a6:	e7e7      	b.n	8009878 <_printf_float+0x1a0>
 80098a8:	2900      	cmp	r1, #0
 80098aa:	bfd4      	ite	le
 80098ac:	f1c1 0202 	rsble	r2, r1, #2
 80098b0:	2201      	movgt	r2, #1
 80098b2:	4413      	add	r3, r2
 80098b4:	e7e0      	b.n	8009878 <_printf_float+0x1a0>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	055a      	lsls	r2, r3, #21
 80098ba:	d407      	bmi.n	80098cc <_printf_float+0x1f4>
 80098bc:	6923      	ldr	r3, [r4, #16]
 80098be:	4642      	mov	r2, r8
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	d12c      	bne.n	8009924 <_printf_float+0x24c>
 80098ca:	e764      	b.n	8009796 <_printf_float+0xbe>
 80098cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098d0:	f240 80e0 	bls.w	8009a94 <_printf_float+0x3bc>
 80098d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098d8:	2200      	movs	r2, #0
 80098da:	2300      	movs	r3, #0
 80098dc:	f7f7 f91c 	bl	8000b18 <__aeabi_dcmpeq>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d034      	beq.n	800994e <_printf_float+0x276>
 80098e4:	4a37      	ldr	r2, [pc, #220]	; (80099c4 <_printf_float+0x2ec>)
 80098e6:	2301      	movs	r3, #1
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af51 	beq.w	8009796 <_printf_float+0xbe>
 80098f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098f8:	429a      	cmp	r2, r3
 80098fa:	db02      	blt.n	8009902 <_printf_float+0x22a>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	07d8      	lsls	r0, r3, #31
 8009900:	d510      	bpl.n	8009924 <_printf_float+0x24c>
 8009902:	ee18 3a10 	vmov	r3, s16
 8009906:	4652      	mov	r2, sl
 8009908:	4631      	mov	r1, r6
 800990a:	4628      	mov	r0, r5
 800990c:	47b8      	blx	r7
 800990e:	3001      	adds	r0, #1
 8009910:	f43f af41 	beq.w	8009796 <_printf_float+0xbe>
 8009914:	f04f 0800 	mov.w	r8, #0
 8009918:	f104 091a 	add.w	r9, r4, #26
 800991c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991e:	3b01      	subs	r3, #1
 8009920:	4543      	cmp	r3, r8
 8009922:	dc09      	bgt.n	8009938 <_printf_float+0x260>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	079b      	lsls	r3, r3, #30
 8009928:	f100 8107 	bmi.w	8009b3a <_printf_float+0x462>
 800992c:	68e0      	ldr	r0, [r4, #12]
 800992e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009930:	4298      	cmp	r0, r3
 8009932:	bfb8      	it	lt
 8009934:	4618      	movlt	r0, r3
 8009936:	e730      	b.n	800979a <_printf_float+0xc2>
 8009938:	2301      	movs	r3, #1
 800993a:	464a      	mov	r2, r9
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	f43f af27 	beq.w	8009796 <_printf_float+0xbe>
 8009948:	f108 0801 	add.w	r8, r8, #1
 800994c:	e7e6      	b.n	800991c <_printf_float+0x244>
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc39      	bgt.n	80099c8 <_printf_float+0x2f0>
 8009954:	4a1b      	ldr	r2, [pc, #108]	; (80099c4 <_printf_float+0x2ec>)
 8009956:	2301      	movs	r3, #1
 8009958:	4631      	mov	r1, r6
 800995a:	4628      	mov	r0, r5
 800995c:	47b8      	blx	r7
 800995e:	3001      	adds	r0, #1
 8009960:	f43f af19 	beq.w	8009796 <_printf_float+0xbe>
 8009964:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009968:	4313      	orrs	r3, r2
 800996a:	d102      	bne.n	8009972 <_printf_float+0x29a>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	07d9      	lsls	r1, r3, #31
 8009970:	d5d8      	bpl.n	8009924 <_printf_float+0x24c>
 8009972:	ee18 3a10 	vmov	r3, s16
 8009976:	4652      	mov	r2, sl
 8009978:	4631      	mov	r1, r6
 800997a:	4628      	mov	r0, r5
 800997c:	47b8      	blx	r7
 800997e:	3001      	adds	r0, #1
 8009980:	f43f af09 	beq.w	8009796 <_printf_float+0xbe>
 8009984:	f04f 0900 	mov.w	r9, #0
 8009988:	f104 0a1a 	add.w	sl, r4, #26
 800998c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800998e:	425b      	negs	r3, r3
 8009990:	454b      	cmp	r3, r9
 8009992:	dc01      	bgt.n	8009998 <_printf_float+0x2c0>
 8009994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009996:	e792      	b.n	80098be <_printf_float+0x1e6>
 8009998:	2301      	movs	r3, #1
 800999a:	4652      	mov	r2, sl
 800999c:	4631      	mov	r1, r6
 800999e:	4628      	mov	r0, r5
 80099a0:	47b8      	blx	r7
 80099a2:	3001      	adds	r0, #1
 80099a4:	f43f aef7 	beq.w	8009796 <_printf_float+0xbe>
 80099a8:	f109 0901 	add.w	r9, r9, #1
 80099ac:	e7ee      	b.n	800998c <_printf_float+0x2b4>
 80099ae:	bf00      	nop
 80099b0:	7fefffff 	.word	0x7fefffff
 80099b4:	0800c96c 	.word	0x0800c96c
 80099b8:	0800c970 	.word	0x0800c970
 80099bc:	0800c974 	.word	0x0800c974
 80099c0:	0800c978 	.word	0x0800c978
 80099c4:	0800c97c 	.word	0x0800c97c
 80099c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099cc:	429a      	cmp	r2, r3
 80099ce:	bfa8      	it	ge
 80099d0:	461a      	movge	r2, r3
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	4691      	mov	r9, r2
 80099d6:	dc37      	bgt.n	8009a48 <_printf_float+0x370>
 80099d8:	f04f 0b00 	mov.w	fp, #0
 80099dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099e0:	f104 021a 	add.w	r2, r4, #26
 80099e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	eba3 0309 	sub.w	r3, r3, r9
 80099ec:	455b      	cmp	r3, fp
 80099ee:	dc33      	bgt.n	8009a58 <_printf_float+0x380>
 80099f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f4:	429a      	cmp	r2, r3
 80099f6:	db3b      	blt.n	8009a70 <_printf_float+0x398>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	07da      	lsls	r2, r3, #31
 80099fc:	d438      	bmi.n	8009a70 <_printf_float+0x398>
 80099fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a02:	eba2 0903 	sub.w	r9, r2, r3
 8009a06:	9b05      	ldr	r3, [sp, #20]
 8009a08:	1ad2      	subs	r2, r2, r3
 8009a0a:	4591      	cmp	r9, r2
 8009a0c:	bfa8      	it	ge
 8009a0e:	4691      	movge	r9, r2
 8009a10:	f1b9 0f00 	cmp.w	r9, #0
 8009a14:	dc35      	bgt.n	8009a82 <_printf_float+0x3aa>
 8009a16:	f04f 0800 	mov.w	r8, #0
 8009a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a1e:	f104 0a1a 	add.w	sl, r4, #26
 8009a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	eba3 0309 	sub.w	r3, r3, r9
 8009a2c:	4543      	cmp	r3, r8
 8009a2e:	f77f af79 	ble.w	8009924 <_printf_float+0x24c>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4652      	mov	r2, sl
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	f43f aeaa 	beq.w	8009796 <_printf_float+0xbe>
 8009a42:	f108 0801 	add.w	r8, r8, #1
 8009a46:	e7ec      	b.n	8009a22 <_printf_float+0x34a>
 8009a48:	4613      	mov	r3, r2
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	4628      	mov	r0, r5
 8009a50:	47b8      	blx	r7
 8009a52:	3001      	adds	r0, #1
 8009a54:	d1c0      	bne.n	80099d8 <_printf_float+0x300>
 8009a56:	e69e      	b.n	8009796 <_printf_float+0xbe>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	9205      	str	r2, [sp, #20]
 8009a60:	47b8      	blx	r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f43f ae97 	beq.w	8009796 <_printf_float+0xbe>
 8009a68:	9a05      	ldr	r2, [sp, #20]
 8009a6a:	f10b 0b01 	add.w	fp, fp, #1
 8009a6e:	e7b9      	b.n	80099e4 <_printf_float+0x30c>
 8009a70:	ee18 3a10 	vmov	r3, s16
 8009a74:	4652      	mov	r2, sl
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1be      	bne.n	80099fe <_printf_float+0x326>
 8009a80:	e689      	b.n	8009796 <_printf_float+0xbe>
 8009a82:	9a05      	ldr	r2, [sp, #20]
 8009a84:	464b      	mov	r3, r9
 8009a86:	4442      	add	r2, r8
 8009a88:	4631      	mov	r1, r6
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	47b8      	blx	r7
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d1c1      	bne.n	8009a16 <_printf_float+0x33e>
 8009a92:	e680      	b.n	8009796 <_printf_float+0xbe>
 8009a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a96:	2a01      	cmp	r2, #1
 8009a98:	dc01      	bgt.n	8009a9e <_printf_float+0x3c6>
 8009a9a:	07db      	lsls	r3, r3, #31
 8009a9c:	d53a      	bpl.n	8009b14 <_printf_float+0x43c>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f ae74 	beq.w	8009796 <_printf_float+0xbe>
 8009aae:	ee18 3a10 	vmov	r3, s16
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	f43f ae6b 	beq.w	8009796 <_printf_float+0xbe>
 8009ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009acc:	f7f7 f824 	bl	8000b18 <__aeabi_dcmpeq>
 8009ad0:	b9d8      	cbnz	r0, 8009b0a <_printf_float+0x432>
 8009ad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ad6:	f108 0201 	add.w	r2, r8, #1
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d10e      	bne.n	8009b02 <_printf_float+0x42a>
 8009ae4:	e657      	b.n	8009796 <_printf_float+0xbe>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4652      	mov	r2, sl
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f ae50 	beq.w	8009796 <_printf_float+0xbe>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4543      	cmp	r3, r8
 8009b00:	dcf1      	bgt.n	8009ae6 <_printf_float+0x40e>
 8009b02:	464b      	mov	r3, r9
 8009b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b08:	e6da      	b.n	80098c0 <_printf_float+0x1e8>
 8009b0a:	f04f 0800 	mov.w	r8, #0
 8009b0e:	f104 0a1a 	add.w	sl, r4, #26
 8009b12:	e7f2      	b.n	8009afa <_printf_float+0x422>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4642      	mov	r2, r8
 8009b18:	e7df      	b.n	8009ada <_printf_float+0x402>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	464a      	mov	r2, r9
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f ae36 	beq.w	8009796 <_printf_float+0xbe>
 8009b2a:	f108 0801 	add.w	r8, r8, #1
 8009b2e:	68e3      	ldr	r3, [r4, #12]
 8009b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b32:	1a5b      	subs	r3, r3, r1
 8009b34:	4543      	cmp	r3, r8
 8009b36:	dcf0      	bgt.n	8009b1a <_printf_float+0x442>
 8009b38:	e6f8      	b.n	800992c <_printf_float+0x254>
 8009b3a:	f04f 0800 	mov.w	r8, #0
 8009b3e:	f104 0919 	add.w	r9, r4, #25
 8009b42:	e7f4      	b.n	8009b2e <_printf_float+0x456>

08009b44 <_printf_common>:
 8009b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b48:	4616      	mov	r6, r2
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	688a      	ldr	r2, [r1, #8]
 8009b4e:	690b      	ldr	r3, [r1, #16]
 8009b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b54:	4293      	cmp	r3, r2
 8009b56:	bfb8      	it	lt
 8009b58:	4613      	movlt	r3, r2
 8009b5a:	6033      	str	r3, [r6, #0]
 8009b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b60:	4607      	mov	r7, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	b10a      	cbz	r2, 8009b6a <_printf_common+0x26>
 8009b66:	3301      	adds	r3, #1
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	0699      	lsls	r1, r3, #26
 8009b6e:	bf42      	ittt	mi
 8009b70:	6833      	ldrmi	r3, [r6, #0]
 8009b72:	3302      	addmi	r3, #2
 8009b74:	6033      	strmi	r3, [r6, #0]
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	f015 0506 	ands.w	r5, r5, #6
 8009b7c:	d106      	bne.n	8009b8c <_printf_common+0x48>
 8009b7e:	f104 0a19 	add.w	sl, r4, #25
 8009b82:	68e3      	ldr	r3, [r4, #12]
 8009b84:	6832      	ldr	r2, [r6, #0]
 8009b86:	1a9b      	subs	r3, r3, r2
 8009b88:	42ab      	cmp	r3, r5
 8009b8a:	dc26      	bgt.n	8009bda <_printf_common+0x96>
 8009b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b90:	1e13      	subs	r3, r2, #0
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	bf18      	it	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	0692      	lsls	r2, r2, #26
 8009b9a:	d42b      	bmi.n	8009bf4 <_printf_common+0xb0>
 8009b9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	47c0      	blx	r8
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d01e      	beq.n	8009be8 <_printf_common+0xa4>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	f003 0306 	and.w	r3, r3, #6
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	bf02      	ittt	eq
 8009bb6:	68e5      	ldreq	r5, [r4, #12]
 8009bb8:	6833      	ldreq	r3, [r6, #0]
 8009bba:	1aed      	subeq	r5, r5, r3
 8009bbc:	68a3      	ldr	r3, [r4, #8]
 8009bbe:	bf0c      	ite	eq
 8009bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bc4:	2500      	movne	r5, #0
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	bfc4      	itt	gt
 8009bca:	1a9b      	subgt	r3, r3, r2
 8009bcc:	18ed      	addgt	r5, r5, r3
 8009bce:	2600      	movs	r6, #0
 8009bd0:	341a      	adds	r4, #26
 8009bd2:	42b5      	cmp	r5, r6
 8009bd4:	d11a      	bne.n	8009c0c <_printf_common+0xc8>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	e008      	b.n	8009bec <_printf_common+0xa8>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4652      	mov	r2, sl
 8009bde:	4649      	mov	r1, r9
 8009be0:	4638      	mov	r0, r7
 8009be2:	47c0      	blx	r8
 8009be4:	3001      	adds	r0, #1
 8009be6:	d103      	bne.n	8009bf0 <_printf_common+0xac>
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	e7c6      	b.n	8009b82 <_printf_common+0x3e>
 8009bf4:	18e1      	adds	r1, r4, r3
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	2030      	movs	r0, #48	; 0x30
 8009bfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bfe:	4422      	add	r2, r4
 8009c00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c08:	3302      	adds	r3, #2
 8009c0a:	e7c7      	b.n	8009b9c <_printf_common+0x58>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4622      	mov	r2, r4
 8009c10:	4649      	mov	r1, r9
 8009c12:	4638      	mov	r0, r7
 8009c14:	47c0      	blx	r8
 8009c16:	3001      	adds	r0, #1
 8009c18:	d0e6      	beq.n	8009be8 <_printf_common+0xa4>
 8009c1a:	3601      	adds	r6, #1
 8009c1c:	e7d9      	b.n	8009bd2 <_printf_common+0x8e>
	...

08009c20 <_printf_i>:
 8009c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	7e0f      	ldrb	r7, [r1, #24]
 8009c26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c28:	2f78      	cmp	r7, #120	; 0x78
 8009c2a:	4691      	mov	r9, r2
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	469a      	mov	sl, r3
 8009c32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c36:	d807      	bhi.n	8009c48 <_printf_i+0x28>
 8009c38:	2f62      	cmp	r7, #98	; 0x62
 8009c3a:	d80a      	bhi.n	8009c52 <_printf_i+0x32>
 8009c3c:	2f00      	cmp	r7, #0
 8009c3e:	f000 80d4 	beq.w	8009dea <_printf_i+0x1ca>
 8009c42:	2f58      	cmp	r7, #88	; 0x58
 8009c44:	f000 80c0 	beq.w	8009dc8 <_printf_i+0x1a8>
 8009c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c50:	e03a      	b.n	8009cc8 <_printf_i+0xa8>
 8009c52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c56:	2b15      	cmp	r3, #21
 8009c58:	d8f6      	bhi.n	8009c48 <_printf_i+0x28>
 8009c5a:	a101      	add	r1, pc, #4	; (adr r1, 8009c60 <_printf_i+0x40>)
 8009c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c60:	08009cb9 	.word	0x08009cb9
 8009c64:	08009ccd 	.word	0x08009ccd
 8009c68:	08009c49 	.word	0x08009c49
 8009c6c:	08009c49 	.word	0x08009c49
 8009c70:	08009c49 	.word	0x08009c49
 8009c74:	08009c49 	.word	0x08009c49
 8009c78:	08009ccd 	.word	0x08009ccd
 8009c7c:	08009c49 	.word	0x08009c49
 8009c80:	08009c49 	.word	0x08009c49
 8009c84:	08009c49 	.word	0x08009c49
 8009c88:	08009c49 	.word	0x08009c49
 8009c8c:	08009dd1 	.word	0x08009dd1
 8009c90:	08009cf9 	.word	0x08009cf9
 8009c94:	08009d8b 	.word	0x08009d8b
 8009c98:	08009c49 	.word	0x08009c49
 8009c9c:	08009c49 	.word	0x08009c49
 8009ca0:	08009df3 	.word	0x08009df3
 8009ca4:	08009c49 	.word	0x08009c49
 8009ca8:	08009cf9 	.word	0x08009cf9
 8009cac:	08009c49 	.word	0x08009c49
 8009cb0:	08009c49 	.word	0x08009c49
 8009cb4:	08009d93 	.word	0x08009d93
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	1d1a      	adds	r2, r3, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	602a      	str	r2, [r5, #0]
 8009cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e09f      	b.n	8009e0c <_printf_i+0x1ec>
 8009ccc:	6820      	ldr	r0, [r4, #0]
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	0607      	lsls	r7, r0, #24
 8009cd2:	f103 0104 	add.w	r1, r3, #4
 8009cd6:	6029      	str	r1, [r5, #0]
 8009cd8:	d501      	bpl.n	8009cde <_printf_i+0xbe>
 8009cda:	681e      	ldr	r6, [r3, #0]
 8009cdc:	e003      	b.n	8009ce6 <_printf_i+0xc6>
 8009cde:	0646      	lsls	r6, r0, #25
 8009ce0:	d5fb      	bpl.n	8009cda <_printf_i+0xba>
 8009ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	da03      	bge.n	8009cf2 <_printf_i+0xd2>
 8009cea:	232d      	movs	r3, #45	; 0x2d
 8009cec:	4276      	negs	r6, r6
 8009cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cf2:	485a      	ldr	r0, [pc, #360]	; (8009e5c <_printf_i+0x23c>)
 8009cf4:	230a      	movs	r3, #10
 8009cf6:	e012      	b.n	8009d1e <_printf_i+0xfe>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	6820      	ldr	r0, [r4, #0]
 8009cfc:	1d19      	adds	r1, r3, #4
 8009cfe:	6029      	str	r1, [r5, #0]
 8009d00:	0605      	lsls	r5, r0, #24
 8009d02:	d501      	bpl.n	8009d08 <_printf_i+0xe8>
 8009d04:	681e      	ldr	r6, [r3, #0]
 8009d06:	e002      	b.n	8009d0e <_printf_i+0xee>
 8009d08:	0641      	lsls	r1, r0, #25
 8009d0a:	d5fb      	bpl.n	8009d04 <_printf_i+0xe4>
 8009d0c:	881e      	ldrh	r6, [r3, #0]
 8009d0e:	4853      	ldr	r0, [pc, #332]	; (8009e5c <_printf_i+0x23c>)
 8009d10:	2f6f      	cmp	r7, #111	; 0x6f
 8009d12:	bf0c      	ite	eq
 8009d14:	2308      	moveq	r3, #8
 8009d16:	230a      	movne	r3, #10
 8009d18:	2100      	movs	r1, #0
 8009d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d1e:	6865      	ldr	r5, [r4, #4]
 8009d20:	60a5      	str	r5, [r4, #8]
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	bfa2      	ittt	ge
 8009d26:	6821      	ldrge	r1, [r4, #0]
 8009d28:	f021 0104 	bicge.w	r1, r1, #4
 8009d2c:	6021      	strge	r1, [r4, #0]
 8009d2e:	b90e      	cbnz	r6, 8009d34 <_printf_i+0x114>
 8009d30:	2d00      	cmp	r5, #0
 8009d32:	d04b      	beq.n	8009dcc <_printf_i+0x1ac>
 8009d34:	4615      	mov	r5, r2
 8009d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d3e:	5dc7      	ldrb	r7, [r0, r7]
 8009d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d44:	4637      	mov	r7, r6
 8009d46:	42bb      	cmp	r3, r7
 8009d48:	460e      	mov	r6, r1
 8009d4a:	d9f4      	bls.n	8009d36 <_printf_i+0x116>
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d10b      	bne.n	8009d68 <_printf_i+0x148>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	07de      	lsls	r6, r3, #31
 8009d54:	d508      	bpl.n	8009d68 <_printf_i+0x148>
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	bfde      	ittt	le
 8009d5e:	2330      	movle	r3, #48	; 0x30
 8009d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d68:	1b52      	subs	r2, r2, r5
 8009d6a:	6122      	str	r2, [r4, #16]
 8009d6c:	f8cd a000 	str.w	sl, [sp]
 8009d70:	464b      	mov	r3, r9
 8009d72:	aa03      	add	r2, sp, #12
 8009d74:	4621      	mov	r1, r4
 8009d76:	4640      	mov	r0, r8
 8009d78:	f7ff fee4 	bl	8009b44 <_printf_common>
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d14a      	bne.n	8009e16 <_printf_i+0x1f6>
 8009d80:	f04f 30ff 	mov.w	r0, #4294967295
 8009d84:	b004      	add	sp, #16
 8009d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f043 0320 	orr.w	r3, r3, #32
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	4833      	ldr	r0, [pc, #204]	; (8009e60 <_printf_i+0x240>)
 8009d94:	2778      	movs	r7, #120	; 0x78
 8009d96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6829      	ldr	r1, [r5, #0]
 8009d9e:	061f      	lsls	r7, r3, #24
 8009da0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009da4:	d402      	bmi.n	8009dac <_printf_i+0x18c>
 8009da6:	065f      	lsls	r7, r3, #25
 8009da8:	bf48      	it	mi
 8009daa:	b2b6      	uxthmi	r6, r6
 8009dac:	07df      	lsls	r7, r3, #31
 8009dae:	bf48      	it	mi
 8009db0:	f043 0320 	orrmi.w	r3, r3, #32
 8009db4:	6029      	str	r1, [r5, #0]
 8009db6:	bf48      	it	mi
 8009db8:	6023      	strmi	r3, [r4, #0]
 8009dba:	b91e      	cbnz	r6, 8009dc4 <_printf_i+0x1a4>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	f023 0320 	bic.w	r3, r3, #32
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	e7a7      	b.n	8009d18 <_printf_i+0xf8>
 8009dc8:	4824      	ldr	r0, [pc, #144]	; (8009e5c <_printf_i+0x23c>)
 8009dca:	e7e4      	b.n	8009d96 <_printf_i+0x176>
 8009dcc:	4615      	mov	r5, r2
 8009dce:	e7bd      	b.n	8009d4c <_printf_i+0x12c>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	6826      	ldr	r6, [r4, #0]
 8009dd4:	6961      	ldr	r1, [r4, #20]
 8009dd6:	1d18      	adds	r0, r3, #4
 8009dd8:	6028      	str	r0, [r5, #0]
 8009dda:	0635      	lsls	r5, r6, #24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0x1c4>
 8009de0:	6019      	str	r1, [r3, #0]
 8009de2:	e002      	b.n	8009dea <_printf_i+0x1ca>
 8009de4:	0670      	lsls	r0, r6, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0x1c0>
 8009de8:	8019      	strh	r1, [r3, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	4615      	mov	r5, r2
 8009df0:	e7bc      	b.n	8009d6c <_printf_i+0x14c>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	1d1a      	adds	r2, r3, #4
 8009df6:	602a      	str	r2, [r5, #0]
 8009df8:	681d      	ldr	r5, [r3, #0]
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7f6 fa0e 	bl	8000220 <memchr>
 8009e04:	b108      	cbz	r0, 8009e0a <_printf_i+0x1ea>
 8009e06:	1b40      	subs	r0, r0, r5
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e14:	e7aa      	b.n	8009d6c <_printf_i+0x14c>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	462a      	mov	r2, r5
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d0ad      	beq.n	8009d80 <_printf_i+0x160>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	079b      	lsls	r3, r3, #30
 8009e28:	d413      	bmi.n	8009e52 <_printf_i+0x232>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	4298      	cmp	r0, r3
 8009e30:	bfb8      	it	lt
 8009e32:	4618      	movlt	r0, r3
 8009e34:	e7a6      	b.n	8009d84 <_printf_i+0x164>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d09d      	beq.n	8009d80 <_printf_i+0x160>
 8009e44:	3501      	adds	r5, #1
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	9903      	ldr	r1, [sp, #12]
 8009e4a:	1a5b      	subs	r3, r3, r1
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dcf2      	bgt.n	8009e36 <_printf_i+0x216>
 8009e50:	e7eb      	b.n	8009e2a <_printf_i+0x20a>
 8009e52:	2500      	movs	r5, #0
 8009e54:	f104 0619 	add.w	r6, r4, #25
 8009e58:	e7f5      	b.n	8009e46 <_printf_i+0x226>
 8009e5a:	bf00      	nop
 8009e5c:	0800c97e 	.word	0x0800c97e
 8009e60:	0800c98f 	.word	0x0800c98f

08009e64 <std>:
 8009e64:	2300      	movs	r3, #0
 8009e66:	b510      	push	{r4, lr}
 8009e68:	4604      	mov	r4, r0
 8009e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e72:	6083      	str	r3, [r0, #8]
 8009e74:	8181      	strh	r1, [r0, #12]
 8009e76:	6643      	str	r3, [r0, #100]	; 0x64
 8009e78:	81c2      	strh	r2, [r0, #14]
 8009e7a:	6183      	str	r3, [r0, #24]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	2208      	movs	r2, #8
 8009e80:	305c      	adds	r0, #92	; 0x5c
 8009e82:	f000 f93d 	bl	800a100 <memset>
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <std+0x58>)
 8009e88:	6263      	str	r3, [r4, #36]	; 0x24
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <std+0x5c>)
 8009e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <std+0x60>)
 8009e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e92:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <std+0x64>)
 8009e94:	6323      	str	r3, [r4, #48]	; 0x30
 8009e96:	4b0d      	ldr	r3, [pc, #52]	; (8009ecc <std+0x68>)
 8009e98:	6224      	str	r4, [r4, #32]
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	d006      	beq.n	8009eac <std+0x48>
 8009e9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009ea2:	4294      	cmp	r4, r2
 8009ea4:	d002      	beq.n	8009eac <std+0x48>
 8009ea6:	33d0      	adds	r3, #208	; 0xd0
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d105      	bne.n	8009eb8 <std+0x54>
 8009eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb4:	f000 b9a0 	b.w	800a1f8 <__retarget_lock_init_recursive>
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	bf00      	nop
 8009ebc:	08009fe9 	.word	0x08009fe9
 8009ec0:	0800a00b 	.word	0x0800a00b
 8009ec4:	0800a043 	.word	0x0800a043
 8009ec8:	0800a067 	.word	0x0800a067
 8009ecc:	20001f60 	.word	0x20001f60

08009ed0 <stdio_exit_handler>:
 8009ed0:	4a02      	ldr	r2, [pc, #8]	; (8009edc <stdio_exit_handler+0xc>)
 8009ed2:	4903      	ldr	r1, [pc, #12]	; (8009ee0 <stdio_exit_handler+0x10>)
 8009ed4:	4803      	ldr	r0, [pc, #12]	; (8009ee4 <stdio_exit_handler+0x14>)
 8009ed6:	f000 b869 	b.w	8009fac <_fwalk_sglue>
 8009eda:	bf00      	nop
 8009edc:	20000560 	.word	0x20000560
 8009ee0:	0800bbc9 	.word	0x0800bbc9
 8009ee4:	2000056c 	.word	0x2000056c

08009ee8 <cleanup_stdio>:
 8009ee8:	6841      	ldr	r1, [r0, #4]
 8009eea:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <cleanup_stdio+0x34>)
 8009eec:	4299      	cmp	r1, r3
 8009eee:	b510      	push	{r4, lr}
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	d001      	beq.n	8009ef8 <cleanup_stdio+0x10>
 8009ef4:	f001 fe68 	bl	800bbc8 <_fflush_r>
 8009ef8:	68a1      	ldr	r1, [r4, #8]
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <cleanup_stdio+0x38>)
 8009efc:	4299      	cmp	r1, r3
 8009efe:	d002      	beq.n	8009f06 <cleanup_stdio+0x1e>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f001 fe61 	bl	800bbc8 <_fflush_r>
 8009f06:	68e1      	ldr	r1, [r4, #12]
 8009f08:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <cleanup_stdio+0x3c>)
 8009f0a:	4299      	cmp	r1, r3
 8009f0c:	d004      	beq.n	8009f18 <cleanup_stdio+0x30>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f14:	f001 be58 	b.w	800bbc8 <_fflush_r>
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20001f60 	.word	0x20001f60
 8009f20:	20001fc8 	.word	0x20001fc8
 8009f24:	20002030 	.word	0x20002030

08009f28 <global_stdio_init.part.0>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <global_stdio_init.part.0+0x30>)
 8009f2c:	4c0b      	ldr	r4, [pc, #44]	; (8009f5c <global_stdio_init.part.0+0x34>)
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <global_stdio_init.part.0+0x38>)
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	4620      	mov	r0, r4
 8009f34:	2200      	movs	r2, #0
 8009f36:	2104      	movs	r1, #4
 8009f38:	f7ff ff94 	bl	8009e64 <std>
 8009f3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f40:	2201      	movs	r2, #1
 8009f42:	2109      	movs	r1, #9
 8009f44:	f7ff ff8e 	bl	8009e64 <std>
 8009f48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f52:	2112      	movs	r1, #18
 8009f54:	f7ff bf86 	b.w	8009e64 <std>
 8009f58:	20002098 	.word	0x20002098
 8009f5c:	20001f60 	.word	0x20001f60
 8009f60:	08009ed1 	.word	0x08009ed1

08009f64 <__sfp_lock_acquire>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sfp_lock_acquire+0x8>)
 8009f66:	f000 b948 	b.w	800a1fa <__retarget_lock_acquire_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	200020a1 	.word	0x200020a1

08009f70 <__sfp_lock_release>:
 8009f70:	4801      	ldr	r0, [pc, #4]	; (8009f78 <__sfp_lock_release+0x8>)
 8009f72:	f000 b943 	b.w	800a1fc <__retarget_lock_release_recursive>
 8009f76:	bf00      	nop
 8009f78:	200020a1 	.word	0x200020a1

08009f7c <__sinit>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	4604      	mov	r4, r0
 8009f80:	f7ff fff0 	bl	8009f64 <__sfp_lock_acquire>
 8009f84:	6a23      	ldr	r3, [r4, #32]
 8009f86:	b11b      	cbz	r3, 8009f90 <__sinit+0x14>
 8009f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f8c:	f7ff bff0 	b.w	8009f70 <__sfp_lock_release>
 8009f90:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <__sinit+0x28>)
 8009f92:	6223      	str	r3, [r4, #32]
 8009f94:	4b04      	ldr	r3, [pc, #16]	; (8009fa8 <__sinit+0x2c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f5      	bne.n	8009f88 <__sinit+0xc>
 8009f9c:	f7ff ffc4 	bl	8009f28 <global_stdio_init.part.0>
 8009fa0:	e7f2      	b.n	8009f88 <__sinit+0xc>
 8009fa2:	bf00      	nop
 8009fa4:	08009ee9 	.word	0x08009ee9
 8009fa8:	20002098 	.word	0x20002098

08009fac <_fwalk_sglue>:
 8009fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	4688      	mov	r8, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fbc:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc0:	d505      	bpl.n	8009fce <_fwalk_sglue+0x22>
 8009fc2:	6824      	ldr	r4, [r4, #0]
 8009fc4:	2c00      	cmp	r4, #0
 8009fc6:	d1f7      	bne.n	8009fb8 <_fwalk_sglue+0xc>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fce:	89ab      	ldrh	r3, [r5, #12]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d907      	bls.n	8009fe4 <_fwalk_sglue+0x38>
 8009fd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	d003      	beq.n	8009fe4 <_fwalk_sglue+0x38>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4638      	mov	r0, r7
 8009fe0:	47c0      	blx	r8
 8009fe2:	4306      	orrs	r6, r0
 8009fe4:	3568      	adds	r5, #104	; 0x68
 8009fe6:	e7e9      	b.n	8009fbc <_fwalk_sglue+0x10>

08009fe8 <__sread>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff0:	f000 f8b4 	bl	800a15c <_read_r>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	bfab      	itete	ge
 8009ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8009ffc:	181b      	addge	r3, r3, r0
 8009ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a002:	bfac      	ite	ge
 800a004:	6563      	strge	r3, [r4, #84]	; 0x54
 800a006:	81a3      	strhlt	r3, [r4, #12]
 800a008:	bd10      	pop	{r4, pc}

0800a00a <__swrite>:
 800a00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00e:	461f      	mov	r7, r3
 800a010:	898b      	ldrh	r3, [r1, #12]
 800a012:	05db      	lsls	r3, r3, #23
 800a014:	4605      	mov	r5, r0
 800a016:	460c      	mov	r4, r1
 800a018:	4616      	mov	r6, r2
 800a01a:	d505      	bpl.n	800a028 <__swrite+0x1e>
 800a01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a020:	2302      	movs	r3, #2
 800a022:	2200      	movs	r2, #0
 800a024:	f000 f888 	bl	800a138 <_lseek_r>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	4632      	mov	r2, r6
 800a036:	463b      	mov	r3, r7
 800a038:	4628      	mov	r0, r5
 800a03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a03e:	f000 b89f 	b.w	800a180 <_write_r>

0800a042 <__sseek>:
 800a042:	b510      	push	{r4, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04a:	f000 f875 	bl	800a138 <_lseek_r>
 800a04e:	1c43      	adds	r3, r0, #1
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	bf15      	itete	ne
 800a054:	6560      	strne	r0, [r4, #84]	; 0x54
 800a056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a05e:	81a3      	strheq	r3, [r4, #12]
 800a060:	bf18      	it	ne
 800a062:	81a3      	strhne	r3, [r4, #12]
 800a064:	bd10      	pop	{r4, pc}

0800a066 <__sclose>:
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	f000 b855 	b.w	800a118 <_close_r>

0800a06e <_vsniprintf_r>:
 800a06e:	b530      	push	{r4, r5, lr}
 800a070:	4614      	mov	r4, r2
 800a072:	2c00      	cmp	r4, #0
 800a074:	b09b      	sub	sp, #108	; 0x6c
 800a076:	4605      	mov	r5, r0
 800a078:	461a      	mov	r2, r3
 800a07a:	da05      	bge.n	800a088 <_vsniprintf_r+0x1a>
 800a07c:	238b      	movs	r3, #139	; 0x8b
 800a07e:	6003      	str	r3, [r0, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295
 800a084:	b01b      	add	sp, #108	; 0x6c
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a08c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a090:	bf14      	ite	ne
 800a092:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a096:	4623      	moveq	r3, r4
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	9305      	str	r3, [sp, #20]
 800a09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0a0:	9100      	str	r1, [sp, #0]
 800a0a2:	9104      	str	r1, [sp, #16]
 800a0a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a0a8:	4669      	mov	r1, sp
 800a0aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a0ac:	f001 fc08 	bl	800b8c0 <_svfiprintf_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	bfbc      	itt	lt
 800a0b4:	238b      	movlt	r3, #139	; 0x8b
 800a0b6:	602b      	strlt	r3, [r5, #0]
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	d0e3      	beq.n	800a084 <_vsniprintf_r+0x16>
 800a0bc:	9b00      	ldr	r3, [sp, #0]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e7df      	b.n	800a084 <_vsniprintf_r+0x16>

0800a0c4 <vsniprintf>:
 800a0c4:	b507      	push	{r0, r1, r2, lr}
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	460a      	mov	r2, r1
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	4803      	ldr	r0, [pc, #12]	; (800a0dc <vsniprintf+0x18>)
 800a0d0:	6800      	ldr	r0, [r0, #0]
 800a0d2:	f7ff ffcc 	bl	800a06e <_vsniprintf_r>
 800a0d6:	b003      	add	sp, #12
 800a0d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0dc:	200005b8 	.word	0x200005b8

0800a0e0 <memcmp>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	3901      	subs	r1, #1
 800a0e4:	4402      	add	r2, r0
 800a0e6:	4290      	cmp	r0, r2
 800a0e8:	d101      	bne.n	800a0ee <memcmp+0xe>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e005      	b.n	800a0fa <memcmp+0x1a>
 800a0ee:	7803      	ldrb	r3, [r0, #0]
 800a0f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d001      	beq.n	800a0fc <memcmp+0x1c>
 800a0f8:	1b18      	subs	r0, r3, r4
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	e7f2      	b.n	800a0e6 <memcmp+0x6>

0800a100 <memset>:
 800a100:	4402      	add	r2, r0
 800a102:	4603      	mov	r3, r0
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <memset+0xa>
 800a108:	4770      	bx	lr
 800a10a:	f803 1b01 	strb.w	r1, [r3], #1
 800a10e:	e7f9      	b.n	800a104 <memset+0x4>

0800a110 <_localeconv_r>:
 800a110:	4800      	ldr	r0, [pc, #0]	; (800a114 <_localeconv_r+0x4>)
 800a112:	4770      	bx	lr
 800a114:	200006ac 	.word	0x200006ac

0800a118 <_close_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_close_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f9 fff6 	bl	8004114 <_close>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_close_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_close_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	2000209c 	.word	0x2000209c

0800a138 <_lseek_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_lseek_r+0x20>)
 800a13c:	4604      	mov	r4, r0
 800a13e:	4608      	mov	r0, r1
 800a140:	4611      	mov	r1, r2
 800a142:	2200      	movs	r2, #0
 800a144:	602a      	str	r2, [r5, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f7f9 fff0 	bl	800412c <_lseek>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d102      	bne.n	800a156 <_lseek_r+0x1e>
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	b103      	cbz	r3, 800a156 <_lseek_r+0x1e>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	2000209c 	.word	0x2000209c

0800a15c <_read_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d07      	ldr	r5, [pc, #28]	; (800a17c <_read_r+0x20>)
 800a160:	4604      	mov	r4, r0
 800a162:	4608      	mov	r0, r1
 800a164:	4611      	mov	r1, r2
 800a166:	2200      	movs	r2, #0
 800a168:	602a      	str	r2, [r5, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f7f9 ffb6 	bl	80040dc <_read>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_read_r+0x1e>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_read_r+0x1e>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	2000209c 	.word	0x2000209c

0800a180 <_write_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	4d07      	ldr	r5, [pc, #28]	; (800a1a0 <_write_r+0x20>)
 800a184:	4604      	mov	r4, r0
 800a186:	4608      	mov	r0, r1
 800a188:	4611      	mov	r1, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	602a      	str	r2, [r5, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f7f9 ffb2 	bl	80040f8 <_write>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_write_r+0x1e>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_write_r+0x1e>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	2000209c 	.word	0x2000209c

0800a1a4 <__errno>:
 800a1a4:	4b01      	ldr	r3, [pc, #4]	; (800a1ac <__errno+0x8>)
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	200005b8 	.word	0x200005b8

0800a1b0 <__libc_init_array>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	4d0d      	ldr	r5, [pc, #52]	; (800a1e8 <__libc_init_array+0x38>)
 800a1b4:	4c0d      	ldr	r4, [pc, #52]	; (800a1ec <__libc_init_array+0x3c>)
 800a1b6:	1b64      	subs	r4, r4, r5
 800a1b8:	10a4      	asrs	r4, r4, #2
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	42a6      	cmp	r6, r4
 800a1be:	d109      	bne.n	800a1d4 <__libc_init_array+0x24>
 800a1c0:	4d0b      	ldr	r5, [pc, #44]	; (800a1f0 <__libc_init_array+0x40>)
 800a1c2:	4c0c      	ldr	r4, [pc, #48]	; (800a1f4 <__libc_init_array+0x44>)
 800a1c4:	f002 fad8 	bl	800c778 <_init>
 800a1c8:	1b64      	subs	r4, r4, r5
 800a1ca:	10a4      	asrs	r4, r4, #2
 800a1cc:	2600      	movs	r6, #0
 800a1ce:	42a6      	cmp	r6, r4
 800a1d0:	d105      	bne.n	800a1de <__libc_init_array+0x2e>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d8:	4798      	blx	r3
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7ee      	b.n	800a1bc <__libc_init_array+0xc>
 800a1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e2:	4798      	blx	r3
 800a1e4:	3601      	adds	r6, #1
 800a1e6:	e7f2      	b.n	800a1ce <__libc_init_array+0x1e>
 800a1e8:	0800ccf8 	.word	0x0800ccf8
 800a1ec:	0800ccf8 	.word	0x0800ccf8
 800a1f0:	0800ccf8 	.word	0x0800ccf8
 800a1f4:	0800ccfc 	.word	0x0800ccfc

0800a1f8 <__retarget_lock_init_recursive>:
 800a1f8:	4770      	bx	lr

0800a1fa <__retarget_lock_acquire_recursive>:
 800a1fa:	4770      	bx	lr

0800a1fc <__retarget_lock_release_recursive>:
 800a1fc:	4770      	bx	lr

0800a1fe <memcpy>:
 800a1fe:	440a      	add	r2, r1
 800a200:	4291      	cmp	r1, r2
 800a202:	f100 33ff 	add.w	r3, r0, #4294967295
 800a206:	d100      	bne.n	800a20a <memcpy+0xc>
 800a208:	4770      	bx	lr
 800a20a:	b510      	push	{r4, lr}
 800a20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a210:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a214:	4291      	cmp	r1, r2
 800a216:	d1f9      	bne.n	800a20c <memcpy+0xe>
 800a218:	bd10      	pop	{r4, pc}

0800a21a <quorem>:
 800a21a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21e:	6903      	ldr	r3, [r0, #16]
 800a220:	690c      	ldr	r4, [r1, #16]
 800a222:	42a3      	cmp	r3, r4
 800a224:	4607      	mov	r7, r0
 800a226:	db7e      	blt.n	800a326 <quorem+0x10c>
 800a228:	3c01      	subs	r4, #1
 800a22a:	f101 0814 	add.w	r8, r1, #20
 800a22e:	f100 0514 	add.w	r5, r0, #20
 800a232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a23c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a240:	3301      	adds	r3, #1
 800a242:	429a      	cmp	r2, r3
 800a244:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a24c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a250:	d331      	bcc.n	800a2b6 <quorem+0x9c>
 800a252:	f04f 0e00 	mov.w	lr, #0
 800a256:	4640      	mov	r0, r8
 800a258:	46ac      	mov	ip, r5
 800a25a:	46f2      	mov	sl, lr
 800a25c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a260:	b293      	uxth	r3, r2
 800a262:	fb06 e303 	mla	r3, r6, r3, lr
 800a266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a26a:	0c1a      	lsrs	r2, r3, #16
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	ebaa 0303 	sub.w	r3, sl, r3
 800a272:	f8dc a000 	ldr.w	sl, [ip]
 800a276:	fa13 f38a 	uxtah	r3, r3, sl
 800a27a:	fb06 220e 	mla	r2, r6, lr, r2
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	9b00      	ldr	r3, [sp, #0]
 800a282:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a286:	b292      	uxth	r2, r2
 800a288:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a28c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a290:	f8bd 3000 	ldrh.w	r3, [sp]
 800a294:	4581      	cmp	r9, r0
 800a296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a29a:	f84c 3b04 	str.w	r3, [ip], #4
 800a29e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2a2:	d2db      	bcs.n	800a25c <quorem+0x42>
 800a2a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2a8:	b92b      	cbnz	r3, 800a2b6 <quorem+0x9c>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	3b04      	subs	r3, #4
 800a2ae:	429d      	cmp	r5, r3
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	d32c      	bcc.n	800a30e <quorem+0xf4>
 800a2b4:	613c      	str	r4, [r7, #16]
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f001 f9a8 	bl	800b60c <__mcmp>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	db22      	blt.n	800a306 <quorem+0xec>
 800a2c0:	3601      	adds	r6, #1
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2ca:	f8d1 c000 	ldr.w	ip, [r1]
 800a2ce:	b293      	uxth	r3, r2
 800a2d0:	1ac3      	subs	r3, r0, r3
 800a2d2:	0c12      	lsrs	r2, r2, #16
 800a2d4:	fa13 f38c 	uxtah	r3, r3, ip
 800a2d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a2dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2e6:	45c1      	cmp	r9, r8
 800a2e8:	f841 3b04 	str.w	r3, [r1], #4
 800a2ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a2f0:	d2e9      	bcs.n	800a2c6 <quorem+0xac>
 800a2f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2fa:	b922      	cbnz	r2, 800a306 <quorem+0xec>
 800a2fc:	3b04      	subs	r3, #4
 800a2fe:	429d      	cmp	r5, r3
 800a300:	461a      	mov	r2, r3
 800a302:	d30a      	bcc.n	800a31a <quorem+0x100>
 800a304:	613c      	str	r4, [r7, #16]
 800a306:	4630      	mov	r0, r6
 800a308:	b003      	add	sp, #12
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	3b04      	subs	r3, #4
 800a312:	2a00      	cmp	r2, #0
 800a314:	d1ce      	bne.n	800a2b4 <quorem+0x9a>
 800a316:	3c01      	subs	r4, #1
 800a318:	e7c9      	b.n	800a2ae <quorem+0x94>
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	3b04      	subs	r3, #4
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1f0      	bne.n	800a304 <quorem+0xea>
 800a322:	3c01      	subs	r4, #1
 800a324:	e7eb      	b.n	800a2fe <quorem+0xe4>
 800a326:	2000      	movs	r0, #0
 800a328:	e7ee      	b.n	800a308 <quorem+0xee>
 800a32a:	0000      	movs	r0, r0
 800a32c:	0000      	movs	r0, r0
	...

0800a330 <_dtoa_r>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	ed2d 8b04 	vpush	{d8-d9}
 800a338:	69c5      	ldr	r5, [r0, #28]
 800a33a:	b093      	sub	sp, #76	; 0x4c
 800a33c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a340:	ec57 6b10 	vmov	r6, r7, d0
 800a344:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a348:	9107      	str	r1, [sp, #28]
 800a34a:	4604      	mov	r4, r0
 800a34c:	920a      	str	r2, [sp, #40]	; 0x28
 800a34e:	930d      	str	r3, [sp, #52]	; 0x34
 800a350:	b975      	cbnz	r5, 800a370 <_dtoa_r+0x40>
 800a352:	2010      	movs	r0, #16
 800a354:	f000 fe2a 	bl	800afac <malloc>
 800a358:	4602      	mov	r2, r0
 800a35a:	61e0      	str	r0, [r4, #28]
 800a35c:	b920      	cbnz	r0, 800a368 <_dtoa_r+0x38>
 800a35e:	4bae      	ldr	r3, [pc, #696]	; (800a618 <_dtoa_r+0x2e8>)
 800a360:	21ef      	movs	r1, #239	; 0xef
 800a362:	48ae      	ldr	r0, [pc, #696]	; (800a61c <_dtoa_r+0x2ec>)
 800a364:	f001 fc82 	bl	800bc6c <__assert_func>
 800a368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a36c:	6005      	str	r5, [r0, #0]
 800a36e:	60c5      	str	r5, [r0, #12]
 800a370:	69e3      	ldr	r3, [r4, #28]
 800a372:	6819      	ldr	r1, [r3, #0]
 800a374:	b151      	cbz	r1, 800a38c <_dtoa_r+0x5c>
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	604a      	str	r2, [r1, #4]
 800a37a:	2301      	movs	r3, #1
 800a37c:	4093      	lsls	r3, r2
 800a37e:	608b      	str	r3, [r1, #8]
 800a380:	4620      	mov	r0, r4
 800a382:	f000 ff07 	bl	800b194 <_Bfree>
 800a386:	69e3      	ldr	r3, [r4, #28]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	1e3b      	subs	r3, r7, #0
 800a38e:	bfbb      	ittet	lt
 800a390:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a394:	9303      	strlt	r3, [sp, #12]
 800a396:	2300      	movge	r3, #0
 800a398:	2201      	movlt	r2, #1
 800a39a:	bfac      	ite	ge
 800a39c:	f8c8 3000 	strge.w	r3, [r8]
 800a3a0:	f8c8 2000 	strlt.w	r2, [r8]
 800a3a4:	4b9e      	ldr	r3, [pc, #632]	; (800a620 <_dtoa_r+0x2f0>)
 800a3a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a3aa:	ea33 0308 	bics.w	r3, r3, r8
 800a3ae:	d11b      	bne.n	800a3e8 <_dtoa_r+0xb8>
 800a3b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a3bc:	4333      	orrs	r3, r6
 800a3be:	f000 8593 	beq.w	800aee8 <_dtoa_r+0xbb8>
 800a3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c4:	b963      	cbnz	r3, 800a3e0 <_dtoa_r+0xb0>
 800a3c6:	4b97      	ldr	r3, [pc, #604]	; (800a624 <_dtoa_r+0x2f4>)
 800a3c8:	e027      	b.n	800a41a <_dtoa_r+0xea>
 800a3ca:	4b97      	ldr	r3, [pc, #604]	; (800a628 <_dtoa_r+0x2f8>)
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	9800      	ldr	r0, [sp, #0]
 800a3d6:	b013      	add	sp, #76	; 0x4c
 800a3d8:	ecbd 8b04 	vpop	{d8-d9}
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	4b90      	ldr	r3, [pc, #576]	; (800a624 <_dtoa_r+0x2f4>)
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	3303      	adds	r3, #3
 800a3e6:	e7f3      	b.n	800a3d0 <_dtoa_r+0xa0>
 800a3e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	ec51 0b17 	vmov	r0, r1, d7
 800a3f2:	eeb0 8a47 	vmov.f32	s16, s14
 800a3f6:	eef0 8a67 	vmov.f32	s17, s15
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f7f6 fb8c 	bl	8000b18 <__aeabi_dcmpeq>
 800a400:	4681      	mov	r9, r0
 800a402:	b160      	cbz	r0, 800a41e <_dtoa_r+0xee>
 800a404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a406:	2301      	movs	r3, #1
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8568 	beq.w	800aee2 <_dtoa_r+0xbb2>
 800a412:	4b86      	ldr	r3, [pc, #536]	; (800a62c <_dtoa_r+0x2fc>)
 800a414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	3b01      	subs	r3, #1
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	e7da      	b.n	800a3d4 <_dtoa_r+0xa4>
 800a41e:	aa10      	add	r2, sp, #64	; 0x40
 800a420:	a911      	add	r1, sp, #68	; 0x44
 800a422:	4620      	mov	r0, r4
 800a424:	eeb0 0a48 	vmov.f32	s0, s16
 800a428:	eef0 0a68 	vmov.f32	s1, s17
 800a42c:	f001 f994 	bl	800b758 <__d2b>
 800a430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a434:	4682      	mov	sl, r0
 800a436:	2d00      	cmp	r5, #0
 800a438:	d07f      	beq.n	800a53a <_dtoa_r+0x20a>
 800a43a:	ee18 3a90 	vmov	r3, s17
 800a43e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a442:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a446:	ec51 0b18 	vmov	r0, r1, d8
 800a44a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a44e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a452:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a456:	4619      	mov	r1, r3
 800a458:	2200      	movs	r2, #0
 800a45a:	4b75      	ldr	r3, [pc, #468]	; (800a630 <_dtoa_r+0x300>)
 800a45c:	f7f5 ff3c 	bl	80002d8 <__aeabi_dsub>
 800a460:	a367      	add	r3, pc, #412	; (adr r3, 800a600 <_dtoa_r+0x2d0>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f6 f8ef 	bl	8000648 <__aeabi_dmul>
 800a46a:	a367      	add	r3, pc, #412	; (adr r3, 800a608 <_dtoa_r+0x2d8>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f5 ff34 	bl	80002dc <__adddf3>
 800a474:	4606      	mov	r6, r0
 800a476:	4628      	mov	r0, r5
 800a478:	460f      	mov	r7, r1
 800a47a:	f7f6 f87b 	bl	8000574 <__aeabi_i2d>
 800a47e:	a364      	add	r3, pc, #400	; (adr r3, 800a610 <_dtoa_r+0x2e0>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f6 f8e0 	bl	8000648 <__aeabi_dmul>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4630      	mov	r0, r6
 800a48e:	4639      	mov	r1, r7
 800a490:	f7f5 ff24 	bl	80002dc <__adddf3>
 800a494:	4606      	mov	r6, r0
 800a496:	460f      	mov	r7, r1
 800a498:	f7f6 fb86 	bl	8000ba8 <__aeabi_d2iz>
 800a49c:	2200      	movs	r2, #0
 800a49e:	4683      	mov	fp, r0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	f7f6 fb41 	bl	8000b2c <__aeabi_dcmplt>
 800a4aa:	b148      	cbz	r0, 800a4c0 <_dtoa_r+0x190>
 800a4ac:	4658      	mov	r0, fp
 800a4ae:	f7f6 f861 	bl	8000574 <__aeabi_i2d>
 800a4b2:	4632      	mov	r2, r6
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	f7f6 fb2f 	bl	8000b18 <__aeabi_dcmpeq>
 800a4ba:	b908      	cbnz	r0, 800a4c0 <_dtoa_r+0x190>
 800a4bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4c0:	f1bb 0f16 	cmp.w	fp, #22
 800a4c4:	d857      	bhi.n	800a576 <_dtoa_r+0x246>
 800a4c6:	4b5b      	ldr	r3, [pc, #364]	; (800a634 <_dtoa_r+0x304>)
 800a4c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	ec51 0b18 	vmov	r0, r1, d8
 800a4d4:	f7f6 fb2a 	bl	8000b2c <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d04e      	beq.n	800a57a <_dtoa_r+0x24a>
 800a4dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4e6:	1b5b      	subs	r3, r3, r5
 800a4e8:	1e5a      	subs	r2, r3, #1
 800a4ea:	bf45      	ittet	mi
 800a4ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800a4f0:	9305      	strmi	r3, [sp, #20]
 800a4f2:	2300      	movpl	r3, #0
 800a4f4:	2300      	movmi	r3, #0
 800a4f6:	9206      	str	r2, [sp, #24]
 800a4f8:	bf54      	ite	pl
 800a4fa:	9305      	strpl	r3, [sp, #20]
 800a4fc:	9306      	strmi	r3, [sp, #24]
 800a4fe:	f1bb 0f00 	cmp.w	fp, #0
 800a502:	db3c      	blt.n	800a57e <_dtoa_r+0x24e>
 800a504:	9b06      	ldr	r3, [sp, #24]
 800a506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a50a:	445b      	add	r3, fp
 800a50c:	9306      	str	r3, [sp, #24]
 800a50e:	2300      	movs	r3, #0
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	2b09      	cmp	r3, #9
 800a516:	d868      	bhi.n	800a5ea <_dtoa_r+0x2ba>
 800a518:	2b05      	cmp	r3, #5
 800a51a:	bfc4      	itt	gt
 800a51c:	3b04      	subgt	r3, #4
 800a51e:	9307      	strgt	r3, [sp, #28]
 800a520:	9b07      	ldr	r3, [sp, #28]
 800a522:	f1a3 0302 	sub.w	r3, r3, #2
 800a526:	bfcc      	ite	gt
 800a528:	2500      	movgt	r5, #0
 800a52a:	2501      	movle	r5, #1
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	f200 8085 	bhi.w	800a63c <_dtoa_r+0x30c>
 800a532:	e8df f003 	tbb	[pc, r3]
 800a536:	3b2e      	.short	0x3b2e
 800a538:	5839      	.short	0x5839
 800a53a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a53e:	441d      	add	r5, r3
 800a540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a544:	2b20      	cmp	r3, #32
 800a546:	bfc1      	itttt	gt
 800a548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a54c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a550:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a554:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a558:	bfd6      	itet	le
 800a55a:	f1c3 0320 	rsble	r3, r3, #32
 800a55e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a562:	fa06 f003 	lslle.w	r0, r6, r3
 800a566:	f7f5 fff5 	bl	8000554 <__aeabi_ui2d>
 800a56a:	2201      	movs	r2, #1
 800a56c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a570:	3d01      	subs	r5, #1
 800a572:	920e      	str	r2, [sp, #56]	; 0x38
 800a574:	e76f      	b.n	800a456 <_dtoa_r+0x126>
 800a576:	2301      	movs	r3, #1
 800a578:	e7b3      	b.n	800a4e2 <_dtoa_r+0x1b2>
 800a57a:	900c      	str	r0, [sp, #48]	; 0x30
 800a57c:	e7b2      	b.n	800a4e4 <_dtoa_r+0x1b4>
 800a57e:	9b05      	ldr	r3, [sp, #20]
 800a580:	eba3 030b 	sub.w	r3, r3, fp
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	f1cb 0300 	rsb	r3, fp, #0
 800a58a:	9308      	str	r3, [sp, #32]
 800a58c:	2300      	movs	r3, #0
 800a58e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a590:	e7bf      	b.n	800a512 <_dtoa_r+0x1e2>
 800a592:	2300      	movs	r3, #0
 800a594:	9309      	str	r3, [sp, #36]	; 0x24
 800a596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dc52      	bgt.n	800a642 <_dtoa_r+0x312>
 800a59c:	2301      	movs	r3, #1
 800a59e:	9301      	str	r3, [sp, #4]
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a6:	e00b      	b.n	800a5c0 <_dtoa_r+0x290>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e7f3      	b.n	800a594 <_dtoa_r+0x264>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b2:	445b      	add	r3, fp
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	bfb8      	it	lt
 800a5be:	2301      	movlt	r3, #1
 800a5c0:	69e0      	ldr	r0, [r4, #28]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	f102 0614 	add.w	r6, r2, #20
 800a5ca:	429e      	cmp	r6, r3
 800a5cc:	d93d      	bls.n	800a64a <_dtoa_r+0x31a>
 800a5ce:	6041      	str	r1, [r0, #4]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fd9f 	bl	800b114 <_Balloc>
 800a5d6:	9000      	str	r0, [sp, #0]
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d139      	bne.n	800a650 <_dtoa_r+0x320>
 800a5dc:	4b16      	ldr	r3, [pc, #88]	; (800a638 <_dtoa_r+0x308>)
 800a5de:	4602      	mov	r2, r0
 800a5e0:	f240 11af 	movw	r1, #431	; 0x1af
 800a5e4:	e6bd      	b.n	800a362 <_dtoa_r+0x32>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e7e1      	b.n	800a5ae <_dtoa_r+0x27e>
 800a5ea:	2501      	movs	r5, #1
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9307      	str	r3, [sp, #28]
 800a5f0:	9509      	str	r5, [sp, #36]	; 0x24
 800a5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2312      	movs	r3, #18
 800a5fe:	e7d1      	b.n	800a5a4 <_dtoa_r+0x274>
 800a600:	636f4361 	.word	0x636f4361
 800a604:	3fd287a7 	.word	0x3fd287a7
 800a608:	8b60c8b3 	.word	0x8b60c8b3
 800a60c:	3fc68a28 	.word	0x3fc68a28
 800a610:	509f79fb 	.word	0x509f79fb
 800a614:	3fd34413 	.word	0x3fd34413
 800a618:	0800c9ad 	.word	0x0800c9ad
 800a61c:	0800c9c4 	.word	0x0800c9c4
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	0800c9a9 	.word	0x0800c9a9
 800a628:	0800c9a0 	.word	0x0800c9a0
 800a62c:	0800c97d 	.word	0x0800c97d
 800a630:	3ff80000 	.word	0x3ff80000
 800a634:	0800cab0 	.word	0x0800cab0
 800a638:	0800ca1c 	.word	0x0800ca1c
 800a63c:	2301      	movs	r3, #1
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	e7d7      	b.n	800a5f2 <_dtoa_r+0x2c2>
 800a642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	e7ba      	b.n	800a5c0 <_dtoa_r+0x290>
 800a64a:	3101      	adds	r1, #1
 800a64c:	0052      	lsls	r2, r2, #1
 800a64e:	e7ba      	b.n	800a5c6 <_dtoa_r+0x296>
 800a650:	69e3      	ldr	r3, [r4, #28]
 800a652:	9a00      	ldr	r2, [sp, #0]
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	2b0e      	cmp	r3, #14
 800a65a:	f200 80a8 	bhi.w	800a7ae <_dtoa_r+0x47e>
 800a65e:	2d00      	cmp	r5, #0
 800a660:	f000 80a5 	beq.w	800a7ae <_dtoa_r+0x47e>
 800a664:	f1bb 0f00 	cmp.w	fp, #0
 800a668:	dd38      	ble.n	800a6dc <_dtoa_r+0x3ac>
 800a66a:	4bc0      	ldr	r3, [pc, #768]	; (800a96c <_dtoa_r+0x63c>)
 800a66c:	f00b 020f 	and.w	r2, fp, #15
 800a670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a678:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a67c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a680:	d019      	beq.n	800a6b6 <_dtoa_r+0x386>
 800a682:	4bbb      	ldr	r3, [pc, #748]	; (800a970 <_dtoa_r+0x640>)
 800a684:	ec51 0b18 	vmov	r0, r1, d8
 800a688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a68c:	f7f6 f906 	bl	800089c <__aeabi_ddiv>
 800a690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a694:	f008 080f 	and.w	r8, r8, #15
 800a698:	2503      	movs	r5, #3
 800a69a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a970 <_dtoa_r+0x640>
 800a69e:	f1b8 0f00 	cmp.w	r8, #0
 800a6a2:	d10a      	bne.n	800a6ba <_dtoa_r+0x38a>
 800a6a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	f7f6 f8f6 	bl	800089c <__aeabi_ddiv>
 800a6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b4:	e02b      	b.n	800a70e <_dtoa_r+0x3de>
 800a6b6:	2502      	movs	r5, #2
 800a6b8:	e7ef      	b.n	800a69a <_dtoa_r+0x36a>
 800a6ba:	f018 0f01 	tst.w	r8, #1
 800a6be:	d008      	beq.n	800a6d2 <_dtoa_r+0x3a2>
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6c8:	f7f5 ffbe 	bl	8000648 <__aeabi_dmul>
 800a6cc:	3501      	adds	r5, #1
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6d6:	f109 0908 	add.w	r9, r9, #8
 800a6da:	e7e0      	b.n	800a69e <_dtoa_r+0x36e>
 800a6dc:	f000 809f 	beq.w	800a81e <_dtoa_r+0x4ee>
 800a6e0:	f1cb 0600 	rsb	r6, fp, #0
 800a6e4:	4ba1      	ldr	r3, [pc, #644]	; (800a96c <_dtoa_r+0x63c>)
 800a6e6:	4fa2      	ldr	r7, [pc, #648]	; (800a970 <_dtoa_r+0x640>)
 800a6e8:	f006 020f 	and.w	r2, r6, #15
 800a6ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	ec51 0b18 	vmov	r0, r1, d8
 800a6f8:	f7f5 ffa6 	bl	8000648 <__aeabi_dmul>
 800a6fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a700:	1136      	asrs	r6, r6, #4
 800a702:	2300      	movs	r3, #0
 800a704:	2502      	movs	r5, #2
 800a706:	2e00      	cmp	r6, #0
 800a708:	d17e      	bne.n	800a808 <_dtoa_r+0x4d8>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1d0      	bne.n	800a6b0 <_dtoa_r+0x380>
 800a70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a710:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 8084 	beq.w	800a822 <_dtoa_r+0x4f2>
 800a71a:	4b96      	ldr	r3, [pc, #600]	; (800a974 <_dtoa_r+0x644>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	4640      	mov	r0, r8
 800a720:	4649      	mov	r1, r9
 800a722:	f7f6 fa03 	bl	8000b2c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d07b      	beq.n	800a822 <_dtoa_r+0x4f2>
 800a72a:	9b04      	ldr	r3, [sp, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d078      	beq.n	800a822 <_dtoa_r+0x4f2>
 800a730:	9b01      	ldr	r3, [sp, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	dd39      	ble.n	800a7aa <_dtoa_r+0x47a>
 800a736:	4b90      	ldr	r3, [pc, #576]	; (800a978 <_dtoa_r+0x648>)
 800a738:	2200      	movs	r2, #0
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 ff83 	bl	8000648 <__aeabi_dmul>
 800a742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a746:	9e01      	ldr	r6, [sp, #4]
 800a748:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a74c:	3501      	adds	r5, #1
 800a74e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a752:	4628      	mov	r0, r5
 800a754:	f7f5 ff0e 	bl	8000574 <__aeabi_i2d>
 800a758:	4642      	mov	r2, r8
 800a75a:	464b      	mov	r3, r9
 800a75c:	f7f5 ff74 	bl	8000648 <__aeabi_dmul>
 800a760:	4b86      	ldr	r3, [pc, #536]	; (800a97c <_dtoa_r+0x64c>)
 800a762:	2200      	movs	r2, #0
 800a764:	f7f5 fdba 	bl	80002dc <__adddf3>
 800a768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a770:	9303      	str	r3, [sp, #12]
 800a772:	2e00      	cmp	r6, #0
 800a774:	d158      	bne.n	800a828 <_dtoa_r+0x4f8>
 800a776:	4b82      	ldr	r3, [pc, #520]	; (800a980 <_dtoa_r+0x650>)
 800a778:	2200      	movs	r2, #0
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fdab 	bl	80002d8 <__aeabi_dsub>
 800a782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a786:	4680      	mov	r8, r0
 800a788:	4689      	mov	r9, r1
 800a78a:	f7f6 f9ed 	bl	8000b68 <__aeabi_dcmpgt>
 800a78e:	2800      	cmp	r0, #0
 800a790:	f040 8296 	bne.w	800acc0 <_dtoa_r+0x990>
 800a794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a798:	4640      	mov	r0, r8
 800a79a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a79e:	4649      	mov	r1, r9
 800a7a0:	f7f6 f9c4 	bl	8000b2c <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f040 8289 	bne.w	800acbc <_dtoa_r+0x98c>
 800a7aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f2c0 814e 	blt.w	800aa52 <_dtoa_r+0x722>
 800a7b6:	f1bb 0f0e 	cmp.w	fp, #14
 800a7ba:	f300 814a 	bgt.w	800aa52 <_dtoa_r+0x722>
 800a7be:	4b6b      	ldr	r3, [pc, #428]	; (800a96c <_dtoa_r+0x63c>)
 800a7c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a7c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f280 80dc 	bge.w	800a988 <_dtoa_r+0x658>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f300 80d8 	bgt.w	800a988 <_dtoa_r+0x658>
 800a7d8:	f040 826f 	bne.w	800acba <_dtoa_r+0x98a>
 800a7dc:	4b68      	ldr	r3, [pc, #416]	; (800a980 <_dtoa_r+0x650>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	f7f5 ff30 	bl	8000648 <__aeabi_dmul>
 800a7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7ec:	f7f6 f9b2 	bl	8000b54 <__aeabi_dcmpge>
 800a7f0:	9e04      	ldr	r6, [sp, #16]
 800a7f2:	4637      	mov	r7, r6
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f040 8245 	bne.w	800ac84 <_dtoa_r+0x954>
 800a7fa:	9d00      	ldr	r5, [sp, #0]
 800a7fc:	2331      	movs	r3, #49	; 0x31
 800a7fe:	f805 3b01 	strb.w	r3, [r5], #1
 800a802:	f10b 0b01 	add.w	fp, fp, #1
 800a806:	e241      	b.n	800ac8c <_dtoa_r+0x95c>
 800a808:	07f2      	lsls	r2, r6, #31
 800a80a:	d505      	bpl.n	800a818 <_dtoa_r+0x4e8>
 800a80c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a810:	f7f5 ff1a 	bl	8000648 <__aeabi_dmul>
 800a814:	3501      	adds	r5, #1
 800a816:	2301      	movs	r3, #1
 800a818:	1076      	asrs	r6, r6, #1
 800a81a:	3708      	adds	r7, #8
 800a81c:	e773      	b.n	800a706 <_dtoa_r+0x3d6>
 800a81e:	2502      	movs	r5, #2
 800a820:	e775      	b.n	800a70e <_dtoa_r+0x3de>
 800a822:	9e04      	ldr	r6, [sp, #16]
 800a824:	465f      	mov	r7, fp
 800a826:	e792      	b.n	800a74e <_dtoa_r+0x41e>
 800a828:	9900      	ldr	r1, [sp, #0]
 800a82a:	4b50      	ldr	r3, [pc, #320]	; (800a96c <_dtoa_r+0x63c>)
 800a82c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a830:	4431      	add	r1, r6
 800a832:	9102      	str	r1, [sp, #8]
 800a834:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a836:	eeb0 9a47 	vmov.f32	s18, s14
 800a83a:	eef0 9a67 	vmov.f32	s19, s15
 800a83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a846:	2900      	cmp	r1, #0
 800a848:	d044      	beq.n	800a8d4 <_dtoa_r+0x5a4>
 800a84a:	494e      	ldr	r1, [pc, #312]	; (800a984 <_dtoa_r+0x654>)
 800a84c:	2000      	movs	r0, #0
 800a84e:	f7f6 f825 	bl	800089c <__aeabi_ddiv>
 800a852:	ec53 2b19 	vmov	r2, r3, d9
 800a856:	f7f5 fd3f 	bl	80002d8 <__aeabi_dsub>
 800a85a:	9d00      	ldr	r5, [sp, #0]
 800a85c:	ec41 0b19 	vmov	d9, r0, r1
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	f7f6 f9a0 	bl	8000ba8 <__aeabi_d2iz>
 800a868:	4606      	mov	r6, r0
 800a86a:	f7f5 fe83 	bl	8000574 <__aeabi_i2d>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fd2f 	bl	80002d8 <__aeabi_dsub>
 800a87a:	3630      	adds	r6, #48	; 0x30
 800a87c:	f805 6b01 	strb.w	r6, [r5], #1
 800a880:	ec53 2b19 	vmov	r2, r3, d9
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	f7f6 f950 	bl	8000b2c <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d164      	bne.n	800a95a <_dtoa_r+0x62a>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	4937      	ldr	r1, [pc, #220]	; (800a974 <_dtoa_r+0x644>)
 800a896:	2000      	movs	r0, #0
 800a898:	f7f5 fd1e 	bl	80002d8 <__aeabi_dsub>
 800a89c:	ec53 2b19 	vmov	r2, r3, d9
 800a8a0:	f7f6 f944 	bl	8000b2c <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 80b6 	bne.w	800aa16 <_dtoa_r+0x6e6>
 800a8aa:	9b02      	ldr	r3, [sp, #8]
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	f43f af7c 	beq.w	800a7aa <_dtoa_r+0x47a>
 800a8b2:	4b31      	ldr	r3, [pc, #196]	; (800a978 <_dtoa_r+0x648>)
 800a8b4:	ec51 0b19 	vmov	r0, r1, d9
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f7f5 fec5 	bl	8000648 <__aeabi_dmul>
 800a8be:	4b2e      	ldr	r3, [pc, #184]	; (800a978 <_dtoa_r+0x648>)
 800a8c0:	ec41 0b19 	vmov	d9, r0, r1
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	f7f5 febd 	bl	8000648 <__aeabi_dmul>
 800a8ce:	4680      	mov	r8, r0
 800a8d0:	4689      	mov	r9, r1
 800a8d2:	e7c5      	b.n	800a860 <_dtoa_r+0x530>
 800a8d4:	ec51 0b17 	vmov	r0, r1, d7
 800a8d8:	f7f5 feb6 	bl	8000648 <__aeabi_dmul>
 800a8dc:	9b02      	ldr	r3, [sp, #8]
 800a8de:	9d00      	ldr	r5, [sp, #0]
 800a8e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e2:	ec41 0b19 	vmov	d9, r0, r1
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	f7f6 f95d 	bl	8000ba8 <__aeabi_d2iz>
 800a8ee:	4606      	mov	r6, r0
 800a8f0:	f7f5 fe40 	bl	8000574 <__aeabi_i2d>
 800a8f4:	3630      	adds	r6, #48	; 0x30
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	f7f5 fceb 	bl	80002d8 <__aeabi_dsub>
 800a902:	f805 6b01 	strb.w	r6, [r5], #1
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	429d      	cmp	r5, r3
 800a90a:	4680      	mov	r8, r0
 800a90c:	4689      	mov	r9, r1
 800a90e:	f04f 0200 	mov.w	r2, #0
 800a912:	d124      	bne.n	800a95e <_dtoa_r+0x62e>
 800a914:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <_dtoa_r+0x654>)
 800a916:	ec51 0b19 	vmov	r0, r1, d9
 800a91a:	f7f5 fcdf 	bl	80002dc <__adddf3>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	4640      	mov	r0, r8
 800a924:	4649      	mov	r1, r9
 800a926:	f7f6 f91f 	bl	8000b68 <__aeabi_dcmpgt>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d173      	bne.n	800aa16 <_dtoa_r+0x6e6>
 800a92e:	ec53 2b19 	vmov	r2, r3, d9
 800a932:	4914      	ldr	r1, [pc, #80]	; (800a984 <_dtoa_r+0x654>)
 800a934:	2000      	movs	r0, #0
 800a936:	f7f5 fccf 	bl	80002d8 <__aeabi_dsub>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	4640      	mov	r0, r8
 800a940:	4649      	mov	r1, r9
 800a942:	f7f6 f8f3 	bl	8000b2c <__aeabi_dcmplt>
 800a946:	2800      	cmp	r0, #0
 800a948:	f43f af2f 	beq.w	800a7aa <_dtoa_r+0x47a>
 800a94c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a94e:	1e6b      	subs	r3, r5, #1
 800a950:	930f      	str	r3, [sp, #60]	; 0x3c
 800a952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a956:	2b30      	cmp	r3, #48	; 0x30
 800a958:	d0f8      	beq.n	800a94c <_dtoa_r+0x61c>
 800a95a:	46bb      	mov	fp, r7
 800a95c:	e04a      	b.n	800a9f4 <_dtoa_r+0x6c4>
 800a95e:	4b06      	ldr	r3, [pc, #24]	; (800a978 <_dtoa_r+0x648>)
 800a960:	f7f5 fe72 	bl	8000648 <__aeabi_dmul>
 800a964:	4680      	mov	r8, r0
 800a966:	4689      	mov	r9, r1
 800a968:	e7bd      	b.n	800a8e6 <_dtoa_r+0x5b6>
 800a96a:	bf00      	nop
 800a96c:	0800cab0 	.word	0x0800cab0
 800a970:	0800ca88 	.word	0x0800ca88
 800a974:	3ff00000 	.word	0x3ff00000
 800a978:	40240000 	.word	0x40240000
 800a97c:	401c0000 	.word	0x401c0000
 800a980:	40140000 	.word	0x40140000
 800a984:	3fe00000 	.word	0x3fe00000
 800a988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a98c:	9d00      	ldr	r5, [sp, #0]
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	4630      	mov	r0, r6
 800a994:	4639      	mov	r1, r7
 800a996:	f7f5 ff81 	bl	800089c <__aeabi_ddiv>
 800a99a:	f7f6 f905 	bl	8000ba8 <__aeabi_d2iz>
 800a99e:	9001      	str	r0, [sp, #4]
 800a9a0:	f7f5 fde8 	bl	8000574 <__aeabi_i2d>
 800a9a4:	4642      	mov	r2, r8
 800a9a6:	464b      	mov	r3, r9
 800a9a8:	f7f5 fe4e 	bl	8000648 <__aeabi_dmul>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	f7f5 fc90 	bl	80002d8 <__aeabi_dsub>
 800a9b8:	9e01      	ldr	r6, [sp, #4]
 800a9ba:	9f04      	ldr	r7, [sp, #16]
 800a9bc:	3630      	adds	r6, #48	; 0x30
 800a9be:	f805 6b01 	strb.w	r6, [r5], #1
 800a9c2:	9e00      	ldr	r6, [sp, #0]
 800a9c4:	1bae      	subs	r6, r5, r6
 800a9c6:	42b7      	cmp	r7, r6
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	d134      	bne.n	800aa38 <_dtoa_r+0x708>
 800a9ce:	f7f5 fc85 	bl	80002dc <__adddf3>
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	f7f6 f8c5 	bl	8000b68 <__aeabi_dcmpgt>
 800a9de:	b9c8      	cbnz	r0, 800aa14 <_dtoa_r+0x6e4>
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f6 f896 	bl	8000b18 <__aeabi_dcmpeq>
 800a9ec:	b110      	cbz	r0, 800a9f4 <_dtoa_r+0x6c4>
 800a9ee:	9b01      	ldr	r3, [sp, #4]
 800a9f0:	07db      	lsls	r3, r3, #31
 800a9f2:	d40f      	bmi.n	800aa14 <_dtoa_r+0x6e4>
 800a9f4:	4651      	mov	r1, sl
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 fbcc 	bl	800b194 <_Bfree>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa00:	702b      	strb	r3, [r5, #0]
 800aa02:	f10b 0301 	add.w	r3, fp, #1
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f43f ace2 	beq.w	800a3d4 <_dtoa_r+0xa4>
 800aa10:	601d      	str	r5, [r3, #0]
 800aa12:	e4df      	b.n	800a3d4 <_dtoa_r+0xa4>
 800aa14:	465f      	mov	r7, fp
 800aa16:	462b      	mov	r3, r5
 800aa18:	461d      	mov	r5, r3
 800aa1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1e:	2a39      	cmp	r2, #57	; 0x39
 800aa20:	d106      	bne.n	800aa30 <_dtoa_r+0x700>
 800aa22:	9a00      	ldr	r2, [sp, #0]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d1f7      	bne.n	800aa18 <_dtoa_r+0x6e8>
 800aa28:	9900      	ldr	r1, [sp, #0]
 800aa2a:	2230      	movs	r2, #48	; 0x30
 800aa2c:	3701      	adds	r7, #1
 800aa2e:	700a      	strb	r2, [r1, #0]
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	3201      	adds	r2, #1
 800aa34:	701a      	strb	r2, [r3, #0]
 800aa36:	e790      	b.n	800a95a <_dtoa_r+0x62a>
 800aa38:	4ba3      	ldr	r3, [pc, #652]	; (800acc8 <_dtoa_r+0x998>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f7f5 fe04 	bl	8000648 <__aeabi_dmul>
 800aa40:	2200      	movs	r2, #0
 800aa42:	2300      	movs	r3, #0
 800aa44:	4606      	mov	r6, r0
 800aa46:	460f      	mov	r7, r1
 800aa48:	f7f6 f866 	bl	8000b18 <__aeabi_dcmpeq>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d09e      	beq.n	800a98e <_dtoa_r+0x65e>
 800aa50:	e7d0      	b.n	800a9f4 <_dtoa_r+0x6c4>
 800aa52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	f000 80ca 	beq.w	800abee <_dtoa_r+0x8be>
 800aa5a:	9a07      	ldr	r2, [sp, #28]
 800aa5c:	2a01      	cmp	r2, #1
 800aa5e:	f300 80ad 	bgt.w	800abbc <_dtoa_r+0x88c>
 800aa62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	f000 80a5 	beq.w	800abb4 <_dtoa_r+0x884>
 800aa6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa6e:	9e08      	ldr	r6, [sp, #32]
 800aa70:	9d05      	ldr	r5, [sp, #20]
 800aa72:	9a05      	ldr	r2, [sp, #20]
 800aa74:	441a      	add	r2, r3
 800aa76:	9205      	str	r2, [sp, #20]
 800aa78:	9a06      	ldr	r2, [sp, #24]
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	441a      	add	r2, r3
 800aa7e:	4620      	mov	r0, r4
 800aa80:	9206      	str	r2, [sp, #24]
 800aa82:	f000 fc3d 	bl	800b300 <__i2b>
 800aa86:	4607      	mov	r7, r0
 800aa88:	b165      	cbz	r5, 800aaa4 <_dtoa_r+0x774>
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dd09      	ble.n	800aaa4 <_dtoa_r+0x774>
 800aa90:	42ab      	cmp	r3, r5
 800aa92:	9a05      	ldr	r2, [sp, #20]
 800aa94:	bfa8      	it	ge
 800aa96:	462b      	movge	r3, r5
 800aa98:	1ad2      	subs	r2, r2, r3
 800aa9a:	9205      	str	r2, [sp, #20]
 800aa9c:	9a06      	ldr	r2, [sp, #24]
 800aa9e:	1aed      	subs	r5, r5, r3
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	9306      	str	r3, [sp, #24]
 800aaa4:	9b08      	ldr	r3, [sp, #32]
 800aaa6:	b1f3      	cbz	r3, 800aae6 <_dtoa_r+0x7b6>
 800aaa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 80a3 	beq.w	800abf6 <_dtoa_r+0x8c6>
 800aab0:	2e00      	cmp	r6, #0
 800aab2:	dd10      	ble.n	800aad6 <_dtoa_r+0x7a6>
 800aab4:	4639      	mov	r1, r7
 800aab6:	4632      	mov	r2, r6
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fce1 	bl	800b480 <__pow5mult>
 800aabe:	4652      	mov	r2, sl
 800aac0:	4601      	mov	r1, r0
 800aac2:	4607      	mov	r7, r0
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fc31 	bl	800b32c <__multiply>
 800aaca:	4651      	mov	r1, sl
 800aacc:	4680      	mov	r8, r0
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fb60 	bl	800b194 <_Bfree>
 800aad4:	46c2      	mov	sl, r8
 800aad6:	9b08      	ldr	r3, [sp, #32]
 800aad8:	1b9a      	subs	r2, r3, r6
 800aada:	d004      	beq.n	800aae6 <_dtoa_r+0x7b6>
 800aadc:	4651      	mov	r1, sl
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 fcce 	bl	800b480 <__pow5mult>
 800aae4:	4682      	mov	sl, r0
 800aae6:	2101      	movs	r1, #1
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fc09 	bl	800b300 <__i2b>
 800aaee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	f340 8081 	ble.w	800abfa <_dtoa_r+0x8ca>
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4601      	mov	r1, r0
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fcbf 	bl	800b480 <__pow5mult>
 800ab02:	9b07      	ldr	r3, [sp, #28]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	4606      	mov	r6, r0
 800ab08:	dd7a      	ble.n	800ac00 <_dtoa_r+0x8d0>
 800ab0a:	f04f 0800 	mov.w	r8, #0
 800ab0e:	6933      	ldr	r3, [r6, #16]
 800ab10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab14:	6918      	ldr	r0, [r3, #16]
 800ab16:	f000 fba5 	bl	800b264 <__hi0bits>
 800ab1a:	f1c0 0020 	rsb	r0, r0, #32
 800ab1e:	9b06      	ldr	r3, [sp, #24]
 800ab20:	4418      	add	r0, r3
 800ab22:	f010 001f 	ands.w	r0, r0, #31
 800ab26:	f000 8094 	beq.w	800ac52 <_dtoa_r+0x922>
 800ab2a:	f1c0 0320 	rsb	r3, r0, #32
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	f340 8085 	ble.w	800ac3e <_dtoa_r+0x90e>
 800ab34:	9b05      	ldr	r3, [sp, #20]
 800ab36:	f1c0 001c 	rsb	r0, r0, #28
 800ab3a:	4403      	add	r3, r0
 800ab3c:	9305      	str	r3, [sp, #20]
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	4403      	add	r3, r0
 800ab42:	4405      	add	r5, r0
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	9b05      	ldr	r3, [sp, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	dd05      	ble.n	800ab58 <_dtoa_r+0x828>
 800ab4c:	4651      	mov	r1, sl
 800ab4e:	461a      	mov	r2, r3
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 fcef 	bl	800b534 <__lshift>
 800ab56:	4682      	mov	sl, r0
 800ab58:	9b06      	ldr	r3, [sp, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	dd05      	ble.n	800ab6a <_dtoa_r+0x83a>
 800ab5e:	4631      	mov	r1, r6
 800ab60:	461a      	mov	r2, r3
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 fce6 	bl	800b534 <__lshift>
 800ab68:	4606      	mov	r6, r0
 800ab6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d072      	beq.n	800ac56 <_dtoa_r+0x926>
 800ab70:	4631      	mov	r1, r6
 800ab72:	4650      	mov	r0, sl
 800ab74:	f000 fd4a 	bl	800b60c <__mcmp>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	da6c      	bge.n	800ac56 <_dtoa_r+0x926>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4651      	mov	r1, sl
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fb28 	bl	800b1d8 <__multadd>
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab8e:	4682      	mov	sl, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 81b0 	beq.w	800aef6 <_dtoa_r+0xbc6>
 800ab96:	2300      	movs	r3, #0
 800ab98:	4639      	mov	r1, r7
 800ab9a:	220a      	movs	r2, #10
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fb1b 	bl	800b1d8 <__multadd>
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	4607      	mov	r7, r0
 800aba8:	f300 8096 	bgt.w	800acd8 <_dtoa_r+0x9a8>
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	dc59      	bgt.n	800ac66 <_dtoa_r+0x936>
 800abb2:	e091      	b.n	800acd8 <_dtoa_r+0x9a8>
 800abb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abba:	e758      	b.n	800aa6e <_dtoa_r+0x73e>
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	1e5e      	subs	r6, r3, #1
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	42b3      	cmp	r3, r6
 800abc4:	bfbf      	itttt	lt
 800abc6:	9b08      	ldrlt	r3, [sp, #32]
 800abc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800abca:	9608      	strlt	r6, [sp, #32]
 800abcc:	1af3      	sublt	r3, r6, r3
 800abce:	bfb4      	ite	lt
 800abd0:	18d2      	addlt	r2, r2, r3
 800abd2:	1b9e      	subge	r6, r3, r6
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	bfbc      	itt	lt
 800abd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800abda:	2600      	movlt	r6, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfb7      	itett	lt
 800abe0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800abe4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800abe8:	1a9d      	sublt	r5, r3, r2
 800abea:	2300      	movlt	r3, #0
 800abec:	e741      	b.n	800aa72 <_dtoa_r+0x742>
 800abee:	9e08      	ldr	r6, [sp, #32]
 800abf0:	9d05      	ldr	r5, [sp, #20]
 800abf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abf4:	e748      	b.n	800aa88 <_dtoa_r+0x758>
 800abf6:	9a08      	ldr	r2, [sp, #32]
 800abf8:	e770      	b.n	800aadc <_dtoa_r+0x7ac>
 800abfa:	9b07      	ldr	r3, [sp, #28]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	dc19      	bgt.n	800ac34 <_dtoa_r+0x904>
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	b9bb      	cbnz	r3, 800ac34 <_dtoa_r+0x904>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac0a:	b99b      	cbnz	r3, 800ac34 <_dtoa_r+0x904>
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac12:	0d1b      	lsrs	r3, r3, #20
 800ac14:	051b      	lsls	r3, r3, #20
 800ac16:	b183      	cbz	r3, 800ac3a <_dtoa_r+0x90a>
 800ac18:	9b05      	ldr	r3, [sp, #20]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	9305      	str	r3, [sp, #20]
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	3301      	adds	r3, #1
 800ac22:	9306      	str	r3, [sp, #24]
 800ac24:	f04f 0801 	mov.w	r8, #1
 800ac28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f af6f 	bne.w	800ab0e <_dtoa_r+0x7de>
 800ac30:	2001      	movs	r0, #1
 800ac32:	e774      	b.n	800ab1e <_dtoa_r+0x7ee>
 800ac34:	f04f 0800 	mov.w	r8, #0
 800ac38:	e7f6      	b.n	800ac28 <_dtoa_r+0x8f8>
 800ac3a:	4698      	mov	r8, r3
 800ac3c:	e7f4      	b.n	800ac28 <_dtoa_r+0x8f8>
 800ac3e:	d082      	beq.n	800ab46 <_dtoa_r+0x816>
 800ac40:	9a05      	ldr	r2, [sp, #20]
 800ac42:	331c      	adds	r3, #28
 800ac44:	441a      	add	r2, r3
 800ac46:	9205      	str	r2, [sp, #20]
 800ac48:	9a06      	ldr	r2, [sp, #24]
 800ac4a:	441a      	add	r2, r3
 800ac4c:	441d      	add	r5, r3
 800ac4e:	9206      	str	r2, [sp, #24]
 800ac50:	e779      	b.n	800ab46 <_dtoa_r+0x816>
 800ac52:	4603      	mov	r3, r0
 800ac54:	e7f4      	b.n	800ac40 <_dtoa_r+0x910>
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dc37      	bgt.n	800accc <_dtoa_r+0x99c>
 800ac5c:	9b07      	ldr	r3, [sp, #28]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	dd34      	ble.n	800accc <_dtoa_r+0x99c>
 800ac62:	9b04      	ldr	r3, [sp, #16]
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	9b01      	ldr	r3, [sp, #4]
 800ac68:	b963      	cbnz	r3, 800ac84 <_dtoa_r+0x954>
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	2205      	movs	r2, #5
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fab2 	bl	800b1d8 <__multadd>
 800ac74:	4601      	mov	r1, r0
 800ac76:	4606      	mov	r6, r0
 800ac78:	4650      	mov	r0, sl
 800ac7a:	f000 fcc7 	bl	800b60c <__mcmp>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f73f adbb 	bgt.w	800a7fa <_dtoa_r+0x4ca>
 800ac84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac86:	9d00      	ldr	r5, [sp, #0]
 800ac88:	ea6f 0b03 	mvn.w	fp, r3
 800ac8c:	f04f 0800 	mov.w	r8, #0
 800ac90:	4631      	mov	r1, r6
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fa7e 	bl	800b194 <_Bfree>
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	f43f aeab 	beq.w	800a9f4 <_dtoa_r+0x6c4>
 800ac9e:	f1b8 0f00 	cmp.w	r8, #0
 800aca2:	d005      	beq.n	800acb0 <_dtoa_r+0x980>
 800aca4:	45b8      	cmp	r8, r7
 800aca6:	d003      	beq.n	800acb0 <_dtoa_r+0x980>
 800aca8:	4641      	mov	r1, r8
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fa72 	bl	800b194 <_Bfree>
 800acb0:	4639      	mov	r1, r7
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fa6e 	bl	800b194 <_Bfree>
 800acb8:	e69c      	b.n	800a9f4 <_dtoa_r+0x6c4>
 800acba:	2600      	movs	r6, #0
 800acbc:	4637      	mov	r7, r6
 800acbe:	e7e1      	b.n	800ac84 <_dtoa_r+0x954>
 800acc0:	46bb      	mov	fp, r7
 800acc2:	4637      	mov	r7, r6
 800acc4:	e599      	b.n	800a7fa <_dtoa_r+0x4ca>
 800acc6:	bf00      	nop
 800acc8:	40240000 	.word	0x40240000
 800accc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 80c8 	beq.w	800ae64 <_dtoa_r+0xb34>
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	2d00      	cmp	r5, #0
 800acda:	dd05      	ble.n	800ace8 <_dtoa_r+0x9b8>
 800acdc:	4639      	mov	r1, r7
 800acde:	462a      	mov	r2, r5
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fc27 	bl	800b534 <__lshift>
 800ace6:	4607      	mov	r7, r0
 800ace8:	f1b8 0f00 	cmp.w	r8, #0
 800acec:	d05b      	beq.n	800ada6 <_dtoa_r+0xa76>
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fa0f 	bl	800b114 <_Balloc>
 800acf6:	4605      	mov	r5, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <_dtoa_r+0x9d6>
 800acfa:	4b83      	ldr	r3, [pc, #524]	; (800af08 <_dtoa_r+0xbd8>)
 800acfc:	4602      	mov	r2, r0
 800acfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ad02:	f7ff bb2e 	b.w	800a362 <_dtoa_r+0x32>
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	3202      	adds	r2, #2
 800ad0a:	0092      	lsls	r2, r2, #2
 800ad0c:	f107 010c 	add.w	r1, r7, #12
 800ad10:	300c      	adds	r0, #12
 800ad12:	f7ff fa74 	bl	800a1fe <memcpy>
 800ad16:	2201      	movs	r2, #1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fc0a 	bl	800b534 <__lshift>
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	9308      	str	r3, [sp, #32]
 800ad2e:	9b02      	ldr	r3, [sp, #8]
 800ad30:	f003 0301 	and.w	r3, r3, #1
 800ad34:	46b8      	mov	r8, r7
 800ad36:	9306      	str	r3, [sp, #24]
 800ad38:	4607      	mov	r7, r0
 800ad3a:	9b04      	ldr	r3, [sp, #16]
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	4650      	mov	r0, sl
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	f7ff fa69 	bl	800a21a <quorem>
 800ad48:	4641      	mov	r1, r8
 800ad4a:	9002      	str	r0, [sp, #8]
 800ad4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad50:	4650      	mov	r0, sl
 800ad52:	f000 fc5b 	bl	800b60c <__mcmp>
 800ad56:	463a      	mov	r2, r7
 800ad58:	9005      	str	r0, [sp, #20]
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 fc71 	bl	800b644 <__mdiff>
 800ad62:	68c2      	ldr	r2, [r0, #12]
 800ad64:	4605      	mov	r5, r0
 800ad66:	bb02      	cbnz	r2, 800adaa <_dtoa_r+0xa7a>
 800ad68:	4601      	mov	r1, r0
 800ad6a:	4650      	mov	r0, sl
 800ad6c:	f000 fc4e 	bl	800b60c <__mcmp>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4629      	mov	r1, r5
 800ad74:	4620      	mov	r0, r4
 800ad76:	9209      	str	r2, [sp, #36]	; 0x24
 800ad78:	f000 fa0c 	bl	800b194 <_Bfree>
 800ad7c:	9b07      	ldr	r3, [sp, #28]
 800ad7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad80:	9d04      	ldr	r5, [sp, #16]
 800ad82:	ea43 0102 	orr.w	r1, r3, r2
 800ad86:	9b06      	ldr	r3, [sp, #24]
 800ad88:	4319      	orrs	r1, r3
 800ad8a:	d110      	bne.n	800adae <_dtoa_r+0xa7e>
 800ad8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ad90:	d029      	beq.n	800ade6 <_dtoa_r+0xab6>
 800ad92:	9b05      	ldr	r3, [sp, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	dd02      	ble.n	800ad9e <_dtoa_r+0xa6e>
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	f883 9000 	strb.w	r9, [r3]
 800ada4:	e774      	b.n	800ac90 <_dtoa_r+0x960>
 800ada6:	4638      	mov	r0, r7
 800ada8:	e7ba      	b.n	800ad20 <_dtoa_r+0x9f0>
 800adaa:	2201      	movs	r2, #1
 800adac:	e7e1      	b.n	800ad72 <_dtoa_r+0xa42>
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	db04      	blt.n	800adbe <_dtoa_r+0xa8e>
 800adb4:	9907      	ldr	r1, [sp, #28]
 800adb6:	430b      	orrs	r3, r1
 800adb8:	9906      	ldr	r1, [sp, #24]
 800adba:	430b      	orrs	r3, r1
 800adbc:	d120      	bne.n	800ae00 <_dtoa_r+0xad0>
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	dded      	ble.n	800ad9e <_dtoa_r+0xa6e>
 800adc2:	4651      	mov	r1, sl
 800adc4:	2201      	movs	r2, #1
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 fbb4 	bl	800b534 <__lshift>
 800adcc:	4631      	mov	r1, r6
 800adce:	4682      	mov	sl, r0
 800add0:	f000 fc1c 	bl	800b60c <__mcmp>
 800add4:	2800      	cmp	r0, #0
 800add6:	dc03      	bgt.n	800ade0 <_dtoa_r+0xab0>
 800add8:	d1e1      	bne.n	800ad9e <_dtoa_r+0xa6e>
 800adda:	f019 0f01 	tst.w	r9, #1
 800adde:	d0de      	beq.n	800ad9e <_dtoa_r+0xa6e>
 800ade0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ade4:	d1d8      	bne.n	800ad98 <_dtoa_r+0xa68>
 800ade6:	9a01      	ldr	r2, [sp, #4]
 800ade8:	2339      	movs	r3, #57	; 0x39
 800adea:	7013      	strb	r3, [r2, #0]
 800adec:	462b      	mov	r3, r5
 800adee:	461d      	mov	r5, r3
 800adf0:	3b01      	subs	r3, #1
 800adf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adf6:	2a39      	cmp	r2, #57	; 0x39
 800adf8:	d06c      	beq.n	800aed4 <_dtoa_r+0xba4>
 800adfa:	3201      	adds	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e747      	b.n	800ac90 <_dtoa_r+0x960>
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	dd07      	ble.n	800ae14 <_dtoa_r+0xae4>
 800ae04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ae08:	d0ed      	beq.n	800ade6 <_dtoa_r+0xab6>
 800ae0a:	9a01      	ldr	r2, [sp, #4]
 800ae0c:	f109 0301 	add.w	r3, r9, #1
 800ae10:	7013      	strb	r3, [r2, #0]
 800ae12:	e73d      	b.n	800ac90 <_dtoa_r+0x960>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	9a08      	ldr	r2, [sp, #32]
 800ae18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d043      	beq.n	800aea8 <_dtoa_r+0xb78>
 800ae20:	4651      	mov	r1, sl
 800ae22:	2300      	movs	r3, #0
 800ae24:	220a      	movs	r2, #10
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f9d6 	bl	800b1d8 <__multadd>
 800ae2c:	45b8      	cmp	r8, r7
 800ae2e:	4682      	mov	sl, r0
 800ae30:	f04f 0300 	mov.w	r3, #0
 800ae34:	f04f 020a 	mov.w	r2, #10
 800ae38:	4641      	mov	r1, r8
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	d107      	bne.n	800ae4e <_dtoa_r+0xb1e>
 800ae3e:	f000 f9cb 	bl	800b1d8 <__multadd>
 800ae42:	4680      	mov	r8, r0
 800ae44:	4607      	mov	r7, r0
 800ae46:	9b04      	ldr	r3, [sp, #16]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	e775      	b.n	800ad3a <_dtoa_r+0xa0a>
 800ae4e:	f000 f9c3 	bl	800b1d8 <__multadd>
 800ae52:	4639      	mov	r1, r7
 800ae54:	4680      	mov	r8, r0
 800ae56:	2300      	movs	r3, #0
 800ae58:	220a      	movs	r2, #10
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 f9bc 	bl	800b1d8 <__multadd>
 800ae60:	4607      	mov	r7, r0
 800ae62:	e7f0      	b.n	800ae46 <_dtoa_r+0xb16>
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	9d00      	ldr	r5, [sp, #0]
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4650      	mov	r0, sl
 800ae6e:	f7ff f9d4 	bl	800a21a <quorem>
 800ae72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae76:	9b00      	ldr	r3, [sp, #0]
 800ae78:	f805 9b01 	strb.w	r9, [r5], #1
 800ae7c:	1aea      	subs	r2, r5, r3
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	4293      	cmp	r3, r2
 800ae82:	dd07      	ble.n	800ae94 <_dtoa_r+0xb64>
 800ae84:	4651      	mov	r1, sl
 800ae86:	2300      	movs	r3, #0
 800ae88:	220a      	movs	r2, #10
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f9a4 	bl	800b1d8 <__multadd>
 800ae90:	4682      	mov	sl, r0
 800ae92:	e7ea      	b.n	800ae6a <_dtoa_r+0xb3a>
 800ae94:	9b01      	ldr	r3, [sp, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bfc8      	it	gt
 800ae9a:	461d      	movgt	r5, r3
 800ae9c:	9b00      	ldr	r3, [sp, #0]
 800ae9e:	bfd8      	it	le
 800aea0:	2501      	movle	r5, #1
 800aea2:	441d      	add	r5, r3
 800aea4:	f04f 0800 	mov.w	r8, #0
 800aea8:	4651      	mov	r1, sl
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fb41 	bl	800b534 <__lshift>
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	f000 fba9 	bl	800b60c <__mcmp>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	dc96      	bgt.n	800adec <_dtoa_r+0xabc>
 800aebe:	d102      	bne.n	800aec6 <_dtoa_r+0xb96>
 800aec0:	f019 0f01 	tst.w	r9, #1
 800aec4:	d192      	bne.n	800adec <_dtoa_r+0xabc>
 800aec6:	462b      	mov	r3, r5
 800aec8:	461d      	mov	r5, r3
 800aeca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aece:	2a30      	cmp	r2, #48	; 0x30
 800aed0:	d0fa      	beq.n	800aec8 <_dtoa_r+0xb98>
 800aed2:	e6dd      	b.n	800ac90 <_dtoa_r+0x960>
 800aed4:	9a00      	ldr	r2, [sp, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d189      	bne.n	800adee <_dtoa_r+0xabe>
 800aeda:	f10b 0b01 	add.w	fp, fp, #1
 800aede:	2331      	movs	r3, #49	; 0x31
 800aee0:	e796      	b.n	800ae10 <_dtoa_r+0xae0>
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <_dtoa_r+0xbdc>)
 800aee4:	f7ff ba99 	b.w	800a41a <_dtoa_r+0xea>
 800aee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f47f aa6d 	bne.w	800a3ca <_dtoa_r+0x9a>
 800aef0:	4b07      	ldr	r3, [pc, #28]	; (800af10 <_dtoa_r+0xbe0>)
 800aef2:	f7ff ba92 	b.w	800a41a <_dtoa_r+0xea>
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dcb5      	bgt.n	800ae68 <_dtoa_r+0xb38>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	f73f aeb1 	bgt.w	800ac66 <_dtoa_r+0x936>
 800af04:	e7b0      	b.n	800ae68 <_dtoa_r+0xb38>
 800af06:	bf00      	nop
 800af08:	0800ca1c 	.word	0x0800ca1c
 800af0c:	0800c97c 	.word	0x0800c97c
 800af10:	0800c9a0 	.word	0x0800c9a0

0800af14 <_free_r>:
 800af14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af16:	2900      	cmp	r1, #0
 800af18:	d044      	beq.n	800afa4 <_free_r+0x90>
 800af1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1e:	9001      	str	r0, [sp, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f1a1 0404 	sub.w	r4, r1, #4
 800af26:	bfb8      	it	lt
 800af28:	18e4      	addlt	r4, r4, r3
 800af2a:	f000 f8e7 	bl	800b0fc <__malloc_lock>
 800af2e:	4a1e      	ldr	r2, [pc, #120]	; (800afa8 <_free_r+0x94>)
 800af30:	9801      	ldr	r0, [sp, #4]
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	b933      	cbnz	r3, 800af44 <_free_r+0x30>
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	6014      	str	r4, [r2, #0]
 800af3a:	b003      	add	sp, #12
 800af3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af40:	f000 b8e2 	b.w	800b108 <__malloc_unlock>
 800af44:	42a3      	cmp	r3, r4
 800af46:	d908      	bls.n	800af5a <_free_r+0x46>
 800af48:	6825      	ldr	r5, [r4, #0]
 800af4a:	1961      	adds	r1, r4, r5
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf01      	itttt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	1949      	addeq	r1, r1, r5
 800af56:	6021      	streq	r1, [r4, #0]
 800af58:	e7ed      	b.n	800af36 <_free_r+0x22>
 800af5a:	461a      	mov	r2, r3
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	b10b      	cbz	r3, 800af64 <_free_r+0x50>
 800af60:	42a3      	cmp	r3, r4
 800af62:	d9fa      	bls.n	800af5a <_free_r+0x46>
 800af64:	6811      	ldr	r1, [r2, #0]
 800af66:	1855      	adds	r5, r2, r1
 800af68:	42a5      	cmp	r5, r4
 800af6a:	d10b      	bne.n	800af84 <_free_r+0x70>
 800af6c:	6824      	ldr	r4, [r4, #0]
 800af6e:	4421      	add	r1, r4
 800af70:	1854      	adds	r4, r2, r1
 800af72:	42a3      	cmp	r3, r4
 800af74:	6011      	str	r1, [r2, #0]
 800af76:	d1e0      	bne.n	800af3a <_free_r+0x26>
 800af78:	681c      	ldr	r4, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	6053      	str	r3, [r2, #4]
 800af7e:	440c      	add	r4, r1
 800af80:	6014      	str	r4, [r2, #0]
 800af82:	e7da      	b.n	800af3a <_free_r+0x26>
 800af84:	d902      	bls.n	800af8c <_free_r+0x78>
 800af86:	230c      	movs	r3, #12
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	e7d6      	b.n	800af3a <_free_r+0x26>
 800af8c:	6825      	ldr	r5, [r4, #0]
 800af8e:	1961      	adds	r1, r4, r5
 800af90:	428b      	cmp	r3, r1
 800af92:	bf04      	itt	eq
 800af94:	6819      	ldreq	r1, [r3, #0]
 800af96:	685b      	ldreq	r3, [r3, #4]
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	bf04      	itt	eq
 800af9c:	1949      	addeq	r1, r1, r5
 800af9e:	6021      	streq	r1, [r4, #0]
 800afa0:	6054      	str	r4, [r2, #4]
 800afa2:	e7ca      	b.n	800af3a <_free_r+0x26>
 800afa4:	b003      	add	sp, #12
 800afa6:	bd30      	pop	{r4, r5, pc}
 800afa8:	200020a4 	.word	0x200020a4

0800afac <malloc>:
 800afac:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <malloc+0xc>)
 800afae:	4601      	mov	r1, r0
 800afb0:	6818      	ldr	r0, [r3, #0]
 800afb2:	f000 b823 	b.w	800affc <_malloc_r>
 800afb6:	bf00      	nop
 800afb8:	200005b8 	.word	0x200005b8

0800afbc <sbrk_aligned>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4e0e      	ldr	r6, [pc, #56]	; (800aff8 <sbrk_aligned+0x3c>)
 800afc0:	460c      	mov	r4, r1
 800afc2:	6831      	ldr	r1, [r6, #0]
 800afc4:	4605      	mov	r5, r0
 800afc6:	b911      	cbnz	r1, 800afce <sbrk_aligned+0x12>
 800afc8:	f000 fe40 	bl	800bc4c <_sbrk_r>
 800afcc:	6030      	str	r0, [r6, #0]
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 fe3b 	bl	800bc4c <_sbrk_r>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d00a      	beq.n	800aff0 <sbrk_aligned+0x34>
 800afda:	1cc4      	adds	r4, r0, #3
 800afdc:	f024 0403 	bic.w	r4, r4, #3
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d007      	beq.n	800aff4 <sbrk_aligned+0x38>
 800afe4:	1a21      	subs	r1, r4, r0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 fe30 	bl	800bc4c <_sbrk_r>
 800afec:	3001      	adds	r0, #1
 800afee:	d101      	bne.n	800aff4 <sbrk_aligned+0x38>
 800aff0:	f04f 34ff 	mov.w	r4, #4294967295
 800aff4:	4620      	mov	r0, r4
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	200020a8 	.word	0x200020a8

0800affc <_malloc_r>:
 800affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b000:	1ccd      	adds	r5, r1, #3
 800b002:	f025 0503 	bic.w	r5, r5, #3
 800b006:	3508      	adds	r5, #8
 800b008:	2d0c      	cmp	r5, #12
 800b00a:	bf38      	it	cc
 800b00c:	250c      	movcc	r5, #12
 800b00e:	2d00      	cmp	r5, #0
 800b010:	4607      	mov	r7, r0
 800b012:	db01      	blt.n	800b018 <_malloc_r+0x1c>
 800b014:	42a9      	cmp	r1, r5
 800b016:	d905      	bls.n	800b024 <_malloc_r+0x28>
 800b018:	230c      	movs	r3, #12
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	2600      	movs	r6, #0
 800b01e:	4630      	mov	r0, r6
 800b020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b024:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0f8 <_malloc_r+0xfc>
 800b028:	f000 f868 	bl	800b0fc <__malloc_lock>
 800b02c:	f8d8 3000 	ldr.w	r3, [r8]
 800b030:	461c      	mov	r4, r3
 800b032:	bb5c      	cbnz	r4, 800b08c <_malloc_r+0x90>
 800b034:	4629      	mov	r1, r5
 800b036:	4638      	mov	r0, r7
 800b038:	f7ff ffc0 	bl	800afbc <sbrk_aligned>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	4604      	mov	r4, r0
 800b040:	d155      	bne.n	800b0ee <_malloc_r+0xf2>
 800b042:	f8d8 4000 	ldr.w	r4, [r8]
 800b046:	4626      	mov	r6, r4
 800b048:	2e00      	cmp	r6, #0
 800b04a:	d145      	bne.n	800b0d8 <_malloc_r+0xdc>
 800b04c:	2c00      	cmp	r4, #0
 800b04e:	d048      	beq.n	800b0e2 <_malloc_r+0xe6>
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	4631      	mov	r1, r6
 800b054:	4638      	mov	r0, r7
 800b056:	eb04 0903 	add.w	r9, r4, r3
 800b05a:	f000 fdf7 	bl	800bc4c <_sbrk_r>
 800b05e:	4581      	cmp	r9, r0
 800b060:	d13f      	bne.n	800b0e2 <_malloc_r+0xe6>
 800b062:	6821      	ldr	r1, [r4, #0]
 800b064:	1a6d      	subs	r5, r5, r1
 800b066:	4629      	mov	r1, r5
 800b068:	4638      	mov	r0, r7
 800b06a:	f7ff ffa7 	bl	800afbc <sbrk_aligned>
 800b06e:	3001      	adds	r0, #1
 800b070:	d037      	beq.n	800b0e2 <_malloc_r+0xe6>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	442b      	add	r3, r5
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	f8d8 3000 	ldr.w	r3, [r8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d038      	beq.n	800b0f2 <_malloc_r+0xf6>
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	42a2      	cmp	r2, r4
 800b084:	d12b      	bne.n	800b0de <_malloc_r+0xe2>
 800b086:	2200      	movs	r2, #0
 800b088:	605a      	str	r2, [r3, #4]
 800b08a:	e00f      	b.n	800b0ac <_malloc_r+0xb0>
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	1b52      	subs	r2, r2, r5
 800b090:	d41f      	bmi.n	800b0d2 <_malloc_r+0xd6>
 800b092:	2a0b      	cmp	r2, #11
 800b094:	d917      	bls.n	800b0c6 <_malloc_r+0xca>
 800b096:	1961      	adds	r1, r4, r5
 800b098:	42a3      	cmp	r3, r4
 800b09a:	6025      	str	r5, [r4, #0]
 800b09c:	bf18      	it	ne
 800b09e:	6059      	strne	r1, [r3, #4]
 800b0a0:	6863      	ldr	r3, [r4, #4]
 800b0a2:	bf08      	it	eq
 800b0a4:	f8c8 1000 	streq.w	r1, [r8]
 800b0a8:	5162      	str	r2, [r4, r5]
 800b0aa:	604b      	str	r3, [r1, #4]
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f104 060b 	add.w	r6, r4, #11
 800b0b2:	f000 f829 	bl	800b108 <__malloc_unlock>
 800b0b6:	f026 0607 	bic.w	r6, r6, #7
 800b0ba:	1d23      	adds	r3, r4, #4
 800b0bc:	1af2      	subs	r2, r6, r3
 800b0be:	d0ae      	beq.n	800b01e <_malloc_r+0x22>
 800b0c0:	1b9b      	subs	r3, r3, r6
 800b0c2:	50a3      	str	r3, [r4, r2]
 800b0c4:	e7ab      	b.n	800b01e <_malloc_r+0x22>
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	6862      	ldr	r2, [r4, #4]
 800b0ca:	d1dd      	bne.n	800b088 <_malloc_r+0x8c>
 800b0cc:	f8c8 2000 	str.w	r2, [r8]
 800b0d0:	e7ec      	b.n	800b0ac <_malloc_r+0xb0>
 800b0d2:	4623      	mov	r3, r4
 800b0d4:	6864      	ldr	r4, [r4, #4]
 800b0d6:	e7ac      	b.n	800b032 <_malloc_r+0x36>
 800b0d8:	4634      	mov	r4, r6
 800b0da:	6876      	ldr	r6, [r6, #4]
 800b0dc:	e7b4      	b.n	800b048 <_malloc_r+0x4c>
 800b0de:	4613      	mov	r3, r2
 800b0e0:	e7cc      	b.n	800b07c <_malloc_r+0x80>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	603b      	str	r3, [r7, #0]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f000 f80e 	bl	800b108 <__malloc_unlock>
 800b0ec:	e797      	b.n	800b01e <_malloc_r+0x22>
 800b0ee:	6025      	str	r5, [r4, #0]
 800b0f0:	e7dc      	b.n	800b0ac <_malloc_r+0xb0>
 800b0f2:	605b      	str	r3, [r3, #4]
 800b0f4:	deff      	udf	#255	; 0xff
 800b0f6:	bf00      	nop
 800b0f8:	200020a4 	.word	0x200020a4

0800b0fc <__malloc_lock>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__malloc_lock+0x8>)
 800b0fe:	f7ff b87c 	b.w	800a1fa <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	200020a0 	.word	0x200020a0

0800b108 <__malloc_unlock>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__malloc_unlock+0x8>)
 800b10a:	f7ff b877 	b.w	800a1fc <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	200020a0 	.word	0x200020a0

0800b114 <_Balloc>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	69c6      	ldr	r6, [r0, #28]
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	b976      	cbnz	r6, 800b13c <_Balloc+0x28>
 800b11e:	2010      	movs	r0, #16
 800b120:	f7ff ff44 	bl	800afac <malloc>
 800b124:	4602      	mov	r2, r0
 800b126:	61e0      	str	r0, [r4, #28]
 800b128:	b920      	cbnz	r0, 800b134 <_Balloc+0x20>
 800b12a:	4b18      	ldr	r3, [pc, #96]	; (800b18c <_Balloc+0x78>)
 800b12c:	4818      	ldr	r0, [pc, #96]	; (800b190 <_Balloc+0x7c>)
 800b12e:	216b      	movs	r1, #107	; 0x6b
 800b130:	f000 fd9c 	bl	800bc6c <__assert_func>
 800b134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b138:	6006      	str	r6, [r0, #0]
 800b13a:	60c6      	str	r6, [r0, #12]
 800b13c:	69e6      	ldr	r6, [r4, #28]
 800b13e:	68f3      	ldr	r3, [r6, #12]
 800b140:	b183      	cbz	r3, 800b164 <_Balloc+0x50>
 800b142:	69e3      	ldr	r3, [r4, #28]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b14a:	b9b8      	cbnz	r0, 800b17c <_Balloc+0x68>
 800b14c:	2101      	movs	r1, #1
 800b14e:	fa01 f605 	lsl.w	r6, r1, r5
 800b152:	1d72      	adds	r2, r6, #5
 800b154:	0092      	lsls	r2, r2, #2
 800b156:	4620      	mov	r0, r4
 800b158:	f000 fda6 	bl	800bca8 <_calloc_r>
 800b15c:	b160      	cbz	r0, 800b178 <_Balloc+0x64>
 800b15e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b162:	e00e      	b.n	800b182 <_Balloc+0x6e>
 800b164:	2221      	movs	r2, #33	; 0x21
 800b166:	2104      	movs	r1, #4
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 fd9d 	bl	800bca8 <_calloc_r>
 800b16e:	69e3      	ldr	r3, [r4, #28]
 800b170:	60f0      	str	r0, [r6, #12]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1e4      	bne.n	800b142 <_Balloc+0x2e>
 800b178:	2000      	movs	r0, #0
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	6802      	ldr	r2, [r0, #0]
 800b17e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b182:	2300      	movs	r3, #0
 800b184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b188:	e7f7      	b.n	800b17a <_Balloc+0x66>
 800b18a:	bf00      	nop
 800b18c:	0800c9ad 	.word	0x0800c9ad
 800b190:	0800ca2d 	.word	0x0800ca2d

0800b194 <_Bfree>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	69c6      	ldr	r6, [r0, #28]
 800b198:	4605      	mov	r5, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	b976      	cbnz	r6, 800b1bc <_Bfree+0x28>
 800b19e:	2010      	movs	r0, #16
 800b1a0:	f7ff ff04 	bl	800afac <malloc>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	61e8      	str	r0, [r5, #28]
 800b1a8:	b920      	cbnz	r0, 800b1b4 <_Bfree+0x20>
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <_Bfree+0x3c>)
 800b1ac:	4809      	ldr	r0, [pc, #36]	; (800b1d4 <_Bfree+0x40>)
 800b1ae:	218f      	movs	r1, #143	; 0x8f
 800b1b0:	f000 fd5c 	bl	800bc6c <__assert_func>
 800b1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1b8:	6006      	str	r6, [r0, #0]
 800b1ba:	60c6      	str	r6, [r0, #12]
 800b1bc:	b13c      	cbz	r4, 800b1ce <_Bfree+0x3a>
 800b1be:	69eb      	ldr	r3, [r5, #28]
 800b1c0:	6862      	ldr	r2, [r4, #4]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c8:	6021      	str	r1, [r4, #0]
 800b1ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ce:	bd70      	pop	{r4, r5, r6, pc}
 800b1d0:	0800c9ad 	.word	0x0800c9ad
 800b1d4:	0800ca2d 	.word	0x0800ca2d

0800b1d8 <__multadd>:
 800b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1dc:	690d      	ldr	r5, [r1, #16]
 800b1de:	4607      	mov	r7, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	461e      	mov	r6, r3
 800b1e4:	f101 0c14 	add.w	ip, r1, #20
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b1ee:	b299      	uxth	r1, r3
 800b1f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b1f4:	0c1e      	lsrs	r6, r3, #16
 800b1f6:	0c0b      	lsrs	r3, r1, #16
 800b1f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b1fc:	b289      	uxth	r1, r1
 800b1fe:	3001      	adds	r0, #1
 800b200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b204:	4285      	cmp	r5, r0
 800b206:	f84c 1b04 	str.w	r1, [ip], #4
 800b20a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b20e:	dcec      	bgt.n	800b1ea <__multadd+0x12>
 800b210:	b30e      	cbz	r6, 800b256 <__multadd+0x7e>
 800b212:	68a3      	ldr	r3, [r4, #8]
 800b214:	42ab      	cmp	r3, r5
 800b216:	dc19      	bgt.n	800b24c <__multadd+0x74>
 800b218:	6861      	ldr	r1, [r4, #4]
 800b21a:	4638      	mov	r0, r7
 800b21c:	3101      	adds	r1, #1
 800b21e:	f7ff ff79 	bl	800b114 <_Balloc>
 800b222:	4680      	mov	r8, r0
 800b224:	b928      	cbnz	r0, 800b232 <__multadd+0x5a>
 800b226:	4602      	mov	r2, r0
 800b228:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <__multadd+0x84>)
 800b22a:	480d      	ldr	r0, [pc, #52]	; (800b260 <__multadd+0x88>)
 800b22c:	21ba      	movs	r1, #186	; 0xba
 800b22e:	f000 fd1d 	bl	800bc6c <__assert_func>
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	3202      	adds	r2, #2
 800b236:	f104 010c 	add.w	r1, r4, #12
 800b23a:	0092      	lsls	r2, r2, #2
 800b23c:	300c      	adds	r0, #12
 800b23e:	f7fe ffde 	bl	800a1fe <memcpy>
 800b242:	4621      	mov	r1, r4
 800b244:	4638      	mov	r0, r7
 800b246:	f7ff ffa5 	bl	800b194 <_Bfree>
 800b24a:	4644      	mov	r4, r8
 800b24c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b250:	3501      	adds	r5, #1
 800b252:	615e      	str	r6, [r3, #20]
 800b254:	6125      	str	r5, [r4, #16]
 800b256:	4620      	mov	r0, r4
 800b258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25c:	0800ca1c 	.word	0x0800ca1c
 800b260:	0800ca2d 	.word	0x0800ca2d

0800b264 <__hi0bits>:
 800b264:	0c03      	lsrs	r3, r0, #16
 800b266:	041b      	lsls	r3, r3, #16
 800b268:	b9d3      	cbnz	r3, 800b2a0 <__hi0bits+0x3c>
 800b26a:	0400      	lsls	r0, r0, #16
 800b26c:	2310      	movs	r3, #16
 800b26e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b272:	bf04      	itt	eq
 800b274:	0200      	lsleq	r0, r0, #8
 800b276:	3308      	addeq	r3, #8
 800b278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b27c:	bf04      	itt	eq
 800b27e:	0100      	lsleq	r0, r0, #4
 800b280:	3304      	addeq	r3, #4
 800b282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b286:	bf04      	itt	eq
 800b288:	0080      	lsleq	r0, r0, #2
 800b28a:	3302      	addeq	r3, #2
 800b28c:	2800      	cmp	r0, #0
 800b28e:	db05      	blt.n	800b29c <__hi0bits+0x38>
 800b290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b294:	f103 0301 	add.w	r3, r3, #1
 800b298:	bf08      	it	eq
 800b29a:	2320      	moveq	r3, #32
 800b29c:	4618      	mov	r0, r3
 800b29e:	4770      	bx	lr
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	e7e4      	b.n	800b26e <__hi0bits+0xa>

0800b2a4 <__lo0bits>:
 800b2a4:	6803      	ldr	r3, [r0, #0]
 800b2a6:	f013 0207 	ands.w	r2, r3, #7
 800b2aa:	d00c      	beq.n	800b2c6 <__lo0bits+0x22>
 800b2ac:	07d9      	lsls	r1, r3, #31
 800b2ae:	d422      	bmi.n	800b2f6 <__lo0bits+0x52>
 800b2b0:	079a      	lsls	r2, r3, #30
 800b2b2:	bf49      	itett	mi
 800b2b4:	085b      	lsrmi	r3, r3, #1
 800b2b6:	089b      	lsrpl	r3, r3, #2
 800b2b8:	6003      	strmi	r3, [r0, #0]
 800b2ba:	2201      	movmi	r2, #1
 800b2bc:	bf5c      	itt	pl
 800b2be:	6003      	strpl	r3, [r0, #0]
 800b2c0:	2202      	movpl	r2, #2
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4770      	bx	lr
 800b2c6:	b299      	uxth	r1, r3
 800b2c8:	b909      	cbnz	r1, 800b2ce <__lo0bits+0x2a>
 800b2ca:	0c1b      	lsrs	r3, r3, #16
 800b2cc:	2210      	movs	r2, #16
 800b2ce:	b2d9      	uxtb	r1, r3
 800b2d0:	b909      	cbnz	r1, 800b2d6 <__lo0bits+0x32>
 800b2d2:	3208      	adds	r2, #8
 800b2d4:	0a1b      	lsrs	r3, r3, #8
 800b2d6:	0719      	lsls	r1, r3, #28
 800b2d8:	bf04      	itt	eq
 800b2da:	091b      	lsreq	r3, r3, #4
 800b2dc:	3204      	addeq	r2, #4
 800b2de:	0799      	lsls	r1, r3, #30
 800b2e0:	bf04      	itt	eq
 800b2e2:	089b      	lsreq	r3, r3, #2
 800b2e4:	3202      	addeq	r2, #2
 800b2e6:	07d9      	lsls	r1, r3, #31
 800b2e8:	d403      	bmi.n	800b2f2 <__lo0bits+0x4e>
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	f102 0201 	add.w	r2, r2, #1
 800b2f0:	d003      	beq.n	800b2fa <__lo0bits+0x56>
 800b2f2:	6003      	str	r3, [r0, #0]
 800b2f4:	e7e5      	b.n	800b2c2 <__lo0bits+0x1e>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	e7e3      	b.n	800b2c2 <__lo0bits+0x1e>
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	e7e1      	b.n	800b2c2 <__lo0bits+0x1e>
	...

0800b300 <__i2b>:
 800b300:	b510      	push	{r4, lr}
 800b302:	460c      	mov	r4, r1
 800b304:	2101      	movs	r1, #1
 800b306:	f7ff ff05 	bl	800b114 <_Balloc>
 800b30a:	4602      	mov	r2, r0
 800b30c:	b928      	cbnz	r0, 800b31a <__i2b+0x1a>
 800b30e:	4b05      	ldr	r3, [pc, #20]	; (800b324 <__i2b+0x24>)
 800b310:	4805      	ldr	r0, [pc, #20]	; (800b328 <__i2b+0x28>)
 800b312:	f240 1145 	movw	r1, #325	; 0x145
 800b316:	f000 fca9 	bl	800bc6c <__assert_func>
 800b31a:	2301      	movs	r3, #1
 800b31c:	6144      	str	r4, [r0, #20]
 800b31e:	6103      	str	r3, [r0, #16]
 800b320:	bd10      	pop	{r4, pc}
 800b322:	bf00      	nop
 800b324:	0800ca1c 	.word	0x0800ca1c
 800b328:	0800ca2d 	.word	0x0800ca2d

0800b32c <__multiply>:
 800b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	4691      	mov	r9, r2
 800b332:	690a      	ldr	r2, [r1, #16]
 800b334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b338:	429a      	cmp	r2, r3
 800b33a:	bfb8      	it	lt
 800b33c:	460b      	movlt	r3, r1
 800b33e:	460c      	mov	r4, r1
 800b340:	bfbc      	itt	lt
 800b342:	464c      	movlt	r4, r9
 800b344:	4699      	movlt	r9, r3
 800b346:	6927      	ldr	r7, [r4, #16]
 800b348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	6861      	ldr	r1, [r4, #4]
 800b350:	eb07 060a 	add.w	r6, r7, sl
 800b354:	42b3      	cmp	r3, r6
 800b356:	b085      	sub	sp, #20
 800b358:	bfb8      	it	lt
 800b35a:	3101      	addlt	r1, #1
 800b35c:	f7ff feda 	bl	800b114 <_Balloc>
 800b360:	b930      	cbnz	r0, 800b370 <__multiply+0x44>
 800b362:	4602      	mov	r2, r0
 800b364:	4b44      	ldr	r3, [pc, #272]	; (800b478 <__multiply+0x14c>)
 800b366:	4845      	ldr	r0, [pc, #276]	; (800b47c <__multiply+0x150>)
 800b368:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b36c:	f000 fc7e 	bl	800bc6c <__assert_func>
 800b370:	f100 0514 	add.w	r5, r0, #20
 800b374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b378:	462b      	mov	r3, r5
 800b37a:	2200      	movs	r2, #0
 800b37c:	4543      	cmp	r3, r8
 800b37e:	d321      	bcc.n	800b3c4 <__multiply+0x98>
 800b380:	f104 0314 	add.w	r3, r4, #20
 800b384:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b388:	f109 0314 	add.w	r3, r9, #20
 800b38c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b390:	9202      	str	r2, [sp, #8]
 800b392:	1b3a      	subs	r2, r7, r4
 800b394:	3a15      	subs	r2, #21
 800b396:	f022 0203 	bic.w	r2, r2, #3
 800b39a:	3204      	adds	r2, #4
 800b39c:	f104 0115 	add.w	r1, r4, #21
 800b3a0:	428f      	cmp	r7, r1
 800b3a2:	bf38      	it	cc
 800b3a4:	2204      	movcc	r2, #4
 800b3a6:	9201      	str	r2, [sp, #4]
 800b3a8:	9a02      	ldr	r2, [sp, #8]
 800b3aa:	9303      	str	r3, [sp, #12]
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d80c      	bhi.n	800b3ca <__multiply+0x9e>
 800b3b0:	2e00      	cmp	r6, #0
 800b3b2:	dd03      	ble.n	800b3bc <__multiply+0x90>
 800b3b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d05b      	beq.n	800b474 <__multiply+0x148>
 800b3bc:	6106      	str	r6, [r0, #16]
 800b3be:	b005      	add	sp, #20
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	f843 2b04 	str.w	r2, [r3], #4
 800b3c8:	e7d8      	b.n	800b37c <__multiply+0x50>
 800b3ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3ce:	f1ba 0f00 	cmp.w	sl, #0
 800b3d2:	d024      	beq.n	800b41e <__multiply+0xf2>
 800b3d4:	f104 0e14 	add.w	lr, r4, #20
 800b3d8:	46a9      	mov	r9, r5
 800b3da:	f04f 0c00 	mov.w	ip, #0
 800b3de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3e2:	f8d9 1000 	ldr.w	r1, [r9]
 800b3e6:	fa1f fb82 	uxth.w	fp, r2
 800b3ea:	b289      	uxth	r1, r1
 800b3ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3f8:	4461      	add	r1, ip
 800b3fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800b402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b406:	b289      	uxth	r1, r1
 800b408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b40c:	4577      	cmp	r7, lr
 800b40e:	f849 1b04 	str.w	r1, [r9], #4
 800b412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b416:	d8e2      	bhi.n	800b3de <__multiply+0xb2>
 800b418:	9a01      	ldr	r2, [sp, #4]
 800b41a:	f845 c002 	str.w	ip, [r5, r2]
 800b41e:	9a03      	ldr	r2, [sp, #12]
 800b420:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b424:	3304      	adds	r3, #4
 800b426:	f1b9 0f00 	cmp.w	r9, #0
 800b42a:	d021      	beq.n	800b470 <__multiply+0x144>
 800b42c:	6829      	ldr	r1, [r5, #0]
 800b42e:	f104 0c14 	add.w	ip, r4, #20
 800b432:	46ae      	mov	lr, r5
 800b434:	f04f 0a00 	mov.w	sl, #0
 800b438:	f8bc b000 	ldrh.w	fp, [ip]
 800b43c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b440:	fb09 220b 	mla	r2, r9, fp, r2
 800b444:	4452      	add	r2, sl
 800b446:	b289      	uxth	r1, r1
 800b448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b44c:	f84e 1b04 	str.w	r1, [lr], #4
 800b450:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b458:	f8be 1000 	ldrh.w	r1, [lr]
 800b45c:	fb09 110a 	mla	r1, r9, sl, r1
 800b460:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b464:	4567      	cmp	r7, ip
 800b466:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b46a:	d8e5      	bhi.n	800b438 <__multiply+0x10c>
 800b46c:	9a01      	ldr	r2, [sp, #4]
 800b46e:	50a9      	str	r1, [r5, r2]
 800b470:	3504      	adds	r5, #4
 800b472:	e799      	b.n	800b3a8 <__multiply+0x7c>
 800b474:	3e01      	subs	r6, #1
 800b476:	e79b      	b.n	800b3b0 <__multiply+0x84>
 800b478:	0800ca1c 	.word	0x0800ca1c
 800b47c:	0800ca2d 	.word	0x0800ca2d

0800b480 <__pow5mult>:
 800b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b484:	4615      	mov	r5, r2
 800b486:	f012 0203 	ands.w	r2, r2, #3
 800b48a:	4606      	mov	r6, r0
 800b48c:	460f      	mov	r7, r1
 800b48e:	d007      	beq.n	800b4a0 <__pow5mult+0x20>
 800b490:	4c25      	ldr	r4, [pc, #148]	; (800b528 <__pow5mult+0xa8>)
 800b492:	3a01      	subs	r2, #1
 800b494:	2300      	movs	r3, #0
 800b496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b49a:	f7ff fe9d 	bl	800b1d8 <__multadd>
 800b49e:	4607      	mov	r7, r0
 800b4a0:	10ad      	asrs	r5, r5, #2
 800b4a2:	d03d      	beq.n	800b520 <__pow5mult+0xa0>
 800b4a4:	69f4      	ldr	r4, [r6, #28]
 800b4a6:	b97c      	cbnz	r4, 800b4c8 <__pow5mult+0x48>
 800b4a8:	2010      	movs	r0, #16
 800b4aa:	f7ff fd7f 	bl	800afac <malloc>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	61f0      	str	r0, [r6, #28]
 800b4b2:	b928      	cbnz	r0, 800b4c0 <__pow5mult+0x40>
 800b4b4:	4b1d      	ldr	r3, [pc, #116]	; (800b52c <__pow5mult+0xac>)
 800b4b6:	481e      	ldr	r0, [pc, #120]	; (800b530 <__pow5mult+0xb0>)
 800b4b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b4bc:	f000 fbd6 	bl	800bc6c <__assert_func>
 800b4c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4c4:	6004      	str	r4, [r0, #0]
 800b4c6:	60c4      	str	r4, [r0, #12]
 800b4c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b4cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d0:	b94c      	cbnz	r4, 800b4e6 <__pow5mult+0x66>
 800b4d2:	f240 2171 	movw	r1, #625	; 0x271
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	f7ff ff12 	bl	800b300 <__i2b>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	6003      	str	r3, [r0, #0]
 800b4e6:	f04f 0900 	mov.w	r9, #0
 800b4ea:	07eb      	lsls	r3, r5, #31
 800b4ec:	d50a      	bpl.n	800b504 <__pow5mult+0x84>
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7ff ff1a 	bl	800b32c <__multiply>
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f7ff fe49 	bl	800b194 <_Bfree>
 800b502:	4647      	mov	r7, r8
 800b504:	106d      	asrs	r5, r5, #1
 800b506:	d00b      	beq.n	800b520 <__pow5mult+0xa0>
 800b508:	6820      	ldr	r0, [r4, #0]
 800b50a:	b938      	cbnz	r0, 800b51c <__pow5mult+0x9c>
 800b50c:	4622      	mov	r2, r4
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff ff0b 	bl	800b32c <__multiply>
 800b516:	6020      	str	r0, [r4, #0]
 800b518:	f8c0 9000 	str.w	r9, [r0]
 800b51c:	4604      	mov	r4, r0
 800b51e:	e7e4      	b.n	800b4ea <__pow5mult+0x6a>
 800b520:	4638      	mov	r0, r7
 800b522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b526:	bf00      	nop
 800b528:	0800cb78 	.word	0x0800cb78
 800b52c:	0800c9ad 	.word	0x0800c9ad
 800b530:	0800ca2d 	.word	0x0800ca2d

0800b534 <__lshift>:
 800b534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	460c      	mov	r4, r1
 800b53a:	6849      	ldr	r1, [r1, #4]
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	4607      	mov	r7, r0
 800b546:	4691      	mov	r9, r2
 800b548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b54c:	f108 0601 	add.w	r6, r8, #1
 800b550:	42b3      	cmp	r3, r6
 800b552:	db0b      	blt.n	800b56c <__lshift+0x38>
 800b554:	4638      	mov	r0, r7
 800b556:	f7ff fddd 	bl	800b114 <_Balloc>
 800b55a:	4605      	mov	r5, r0
 800b55c:	b948      	cbnz	r0, 800b572 <__lshift+0x3e>
 800b55e:	4602      	mov	r2, r0
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <__lshift+0xd0>)
 800b562:	4829      	ldr	r0, [pc, #164]	; (800b608 <__lshift+0xd4>)
 800b564:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b568:	f000 fb80 	bl	800bc6c <__assert_func>
 800b56c:	3101      	adds	r1, #1
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	e7ee      	b.n	800b550 <__lshift+0x1c>
 800b572:	2300      	movs	r3, #0
 800b574:	f100 0114 	add.w	r1, r0, #20
 800b578:	f100 0210 	add.w	r2, r0, #16
 800b57c:	4618      	mov	r0, r3
 800b57e:	4553      	cmp	r3, sl
 800b580:	db33      	blt.n	800b5ea <__lshift+0xb6>
 800b582:	6920      	ldr	r0, [r4, #16]
 800b584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b588:	f104 0314 	add.w	r3, r4, #20
 800b58c:	f019 091f 	ands.w	r9, r9, #31
 800b590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b598:	d02b      	beq.n	800b5f2 <__lshift+0xbe>
 800b59a:	f1c9 0e20 	rsb	lr, r9, #32
 800b59e:	468a      	mov	sl, r1
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b5a8:	4310      	orrs	r0, r2
 800b5aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b2:	459c      	cmp	ip, r3
 800b5b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5b8:	d8f3      	bhi.n	800b5a2 <__lshift+0x6e>
 800b5ba:	ebac 0304 	sub.w	r3, ip, r4
 800b5be:	3b15      	subs	r3, #21
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	f104 0015 	add.w	r0, r4, #21
 800b5ca:	4584      	cmp	ip, r0
 800b5cc:	bf38      	it	cc
 800b5ce:	2304      	movcc	r3, #4
 800b5d0:	50ca      	str	r2, [r1, r3]
 800b5d2:	b10a      	cbz	r2, 800b5d8 <__lshift+0xa4>
 800b5d4:	f108 0602 	add.w	r6, r8, #2
 800b5d8:	3e01      	subs	r6, #1
 800b5da:	4638      	mov	r0, r7
 800b5dc:	612e      	str	r6, [r5, #16]
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f7ff fdd8 	bl	800b194 <_Bfree>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	e7c5      	b.n	800b57e <__lshift+0x4a>
 800b5f2:	3904      	subs	r1, #4
 800b5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5fc:	459c      	cmp	ip, r3
 800b5fe:	d8f9      	bhi.n	800b5f4 <__lshift+0xc0>
 800b600:	e7ea      	b.n	800b5d8 <__lshift+0xa4>
 800b602:	bf00      	nop
 800b604:	0800ca1c 	.word	0x0800ca1c
 800b608:	0800ca2d 	.word	0x0800ca2d

0800b60c <__mcmp>:
 800b60c:	b530      	push	{r4, r5, lr}
 800b60e:	6902      	ldr	r2, [r0, #16]
 800b610:	690c      	ldr	r4, [r1, #16]
 800b612:	1b12      	subs	r2, r2, r4
 800b614:	d10e      	bne.n	800b634 <__mcmp+0x28>
 800b616:	f100 0314 	add.w	r3, r0, #20
 800b61a:	3114      	adds	r1, #20
 800b61c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b62c:	42a5      	cmp	r5, r4
 800b62e:	d003      	beq.n	800b638 <__mcmp+0x2c>
 800b630:	d305      	bcc.n	800b63e <__mcmp+0x32>
 800b632:	2201      	movs	r2, #1
 800b634:	4610      	mov	r0, r2
 800b636:	bd30      	pop	{r4, r5, pc}
 800b638:	4283      	cmp	r3, r0
 800b63a:	d3f3      	bcc.n	800b624 <__mcmp+0x18>
 800b63c:	e7fa      	b.n	800b634 <__mcmp+0x28>
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	e7f7      	b.n	800b634 <__mcmp+0x28>

0800b644 <__mdiff>:
 800b644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460c      	mov	r4, r1
 800b64a:	4606      	mov	r6, r0
 800b64c:	4611      	mov	r1, r2
 800b64e:	4620      	mov	r0, r4
 800b650:	4690      	mov	r8, r2
 800b652:	f7ff ffdb 	bl	800b60c <__mcmp>
 800b656:	1e05      	subs	r5, r0, #0
 800b658:	d110      	bne.n	800b67c <__mdiff+0x38>
 800b65a:	4629      	mov	r1, r5
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7ff fd59 	bl	800b114 <_Balloc>
 800b662:	b930      	cbnz	r0, 800b672 <__mdiff+0x2e>
 800b664:	4b3a      	ldr	r3, [pc, #232]	; (800b750 <__mdiff+0x10c>)
 800b666:	4602      	mov	r2, r0
 800b668:	f240 2137 	movw	r1, #567	; 0x237
 800b66c:	4839      	ldr	r0, [pc, #228]	; (800b754 <__mdiff+0x110>)
 800b66e:	f000 fafd 	bl	800bc6c <__assert_func>
 800b672:	2301      	movs	r3, #1
 800b674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	bfa4      	itt	ge
 800b67e:	4643      	movge	r3, r8
 800b680:	46a0      	movge	r8, r4
 800b682:	4630      	mov	r0, r6
 800b684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b688:	bfa6      	itte	ge
 800b68a:	461c      	movge	r4, r3
 800b68c:	2500      	movge	r5, #0
 800b68e:	2501      	movlt	r5, #1
 800b690:	f7ff fd40 	bl	800b114 <_Balloc>
 800b694:	b920      	cbnz	r0, 800b6a0 <__mdiff+0x5c>
 800b696:	4b2e      	ldr	r3, [pc, #184]	; (800b750 <__mdiff+0x10c>)
 800b698:	4602      	mov	r2, r0
 800b69a:	f240 2145 	movw	r1, #581	; 0x245
 800b69e:	e7e5      	b.n	800b66c <__mdiff+0x28>
 800b6a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6a4:	6926      	ldr	r6, [r4, #16]
 800b6a6:	60c5      	str	r5, [r0, #12]
 800b6a8:	f104 0914 	add.w	r9, r4, #20
 800b6ac:	f108 0514 	add.w	r5, r8, #20
 800b6b0:	f100 0e14 	add.w	lr, r0, #20
 800b6b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6bc:	f108 0210 	add.w	r2, r8, #16
 800b6c0:	46f2      	mov	sl, lr
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6cc:	fa11 f88b 	uxtah	r8, r1, fp
 800b6d0:	b299      	uxth	r1, r3
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	eba8 0801 	sub.w	r8, r8, r1
 800b6d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6e0:	fa1f f888 	uxth.w	r8, r8
 800b6e4:	1419      	asrs	r1, r3, #16
 800b6e6:	454e      	cmp	r6, r9
 800b6e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6ec:	f84a 3b04 	str.w	r3, [sl], #4
 800b6f0:	d8e8      	bhi.n	800b6c4 <__mdiff+0x80>
 800b6f2:	1b33      	subs	r3, r6, r4
 800b6f4:	3b15      	subs	r3, #21
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	3415      	adds	r4, #21
 800b6fe:	42a6      	cmp	r6, r4
 800b700:	bf38      	it	cc
 800b702:	2304      	movcc	r3, #4
 800b704:	441d      	add	r5, r3
 800b706:	4473      	add	r3, lr
 800b708:	469e      	mov	lr, r3
 800b70a:	462e      	mov	r6, r5
 800b70c:	4566      	cmp	r6, ip
 800b70e:	d30e      	bcc.n	800b72e <__mdiff+0xea>
 800b710:	f10c 0203 	add.w	r2, ip, #3
 800b714:	1b52      	subs	r2, r2, r5
 800b716:	f022 0203 	bic.w	r2, r2, #3
 800b71a:	3d03      	subs	r5, #3
 800b71c:	45ac      	cmp	ip, r5
 800b71e:	bf38      	it	cc
 800b720:	2200      	movcc	r2, #0
 800b722:	4413      	add	r3, r2
 800b724:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b728:	b17a      	cbz	r2, 800b74a <__mdiff+0x106>
 800b72a:	6107      	str	r7, [r0, #16]
 800b72c:	e7a4      	b.n	800b678 <__mdiff+0x34>
 800b72e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b732:	fa11 f288 	uxtah	r2, r1, r8
 800b736:	1414      	asrs	r4, r2, #16
 800b738:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b73c:	b292      	uxth	r2, r2
 800b73e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b742:	f84e 2b04 	str.w	r2, [lr], #4
 800b746:	1421      	asrs	r1, r4, #16
 800b748:	e7e0      	b.n	800b70c <__mdiff+0xc8>
 800b74a:	3f01      	subs	r7, #1
 800b74c:	e7ea      	b.n	800b724 <__mdiff+0xe0>
 800b74e:	bf00      	nop
 800b750:	0800ca1c 	.word	0x0800ca1c
 800b754:	0800ca2d 	.word	0x0800ca2d

0800b758 <__d2b>:
 800b758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b75c:	460f      	mov	r7, r1
 800b75e:	2101      	movs	r1, #1
 800b760:	ec59 8b10 	vmov	r8, r9, d0
 800b764:	4616      	mov	r6, r2
 800b766:	f7ff fcd5 	bl	800b114 <_Balloc>
 800b76a:	4604      	mov	r4, r0
 800b76c:	b930      	cbnz	r0, 800b77c <__d2b+0x24>
 800b76e:	4602      	mov	r2, r0
 800b770:	4b24      	ldr	r3, [pc, #144]	; (800b804 <__d2b+0xac>)
 800b772:	4825      	ldr	r0, [pc, #148]	; (800b808 <__d2b+0xb0>)
 800b774:	f240 310f 	movw	r1, #783	; 0x30f
 800b778:	f000 fa78 	bl	800bc6c <__assert_func>
 800b77c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b784:	bb2d      	cbnz	r5, 800b7d2 <__d2b+0x7a>
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	f1b8 0300 	subs.w	r3, r8, #0
 800b78c:	d026      	beq.n	800b7dc <__d2b+0x84>
 800b78e:	4668      	mov	r0, sp
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	f7ff fd87 	bl	800b2a4 <__lo0bits>
 800b796:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b79a:	b1e8      	cbz	r0, 800b7d8 <__d2b+0x80>
 800b79c:	f1c0 0320 	rsb	r3, r0, #32
 800b7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a4:	430b      	orrs	r3, r1
 800b7a6:	40c2      	lsrs	r2, r0
 800b7a8:	6163      	str	r3, [r4, #20]
 800b7aa:	9201      	str	r2, [sp, #4]
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	61a3      	str	r3, [r4, #24]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bf14      	ite	ne
 800b7b4:	2202      	movne	r2, #2
 800b7b6:	2201      	moveq	r2, #1
 800b7b8:	6122      	str	r2, [r4, #16]
 800b7ba:	b1bd      	cbz	r5, 800b7ec <__d2b+0x94>
 800b7bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7c0:	4405      	add	r5, r0
 800b7c2:	603d      	str	r5, [r7, #0]
 800b7c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7c8:	6030      	str	r0, [r6, #0]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d6:	e7d6      	b.n	800b786 <__d2b+0x2e>
 800b7d8:	6161      	str	r1, [r4, #20]
 800b7da:	e7e7      	b.n	800b7ac <__d2b+0x54>
 800b7dc:	a801      	add	r0, sp, #4
 800b7de:	f7ff fd61 	bl	800b2a4 <__lo0bits>
 800b7e2:	9b01      	ldr	r3, [sp, #4]
 800b7e4:	6163      	str	r3, [r4, #20]
 800b7e6:	3020      	adds	r0, #32
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	e7e5      	b.n	800b7b8 <__d2b+0x60>
 800b7ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7f4:	6038      	str	r0, [r7, #0]
 800b7f6:	6918      	ldr	r0, [r3, #16]
 800b7f8:	f7ff fd34 	bl	800b264 <__hi0bits>
 800b7fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b800:	e7e2      	b.n	800b7c8 <__d2b+0x70>
 800b802:	bf00      	nop
 800b804:	0800ca1c 	.word	0x0800ca1c
 800b808:	0800ca2d 	.word	0x0800ca2d

0800b80c <__ssputs_r>:
 800b80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b810:	688e      	ldr	r6, [r1, #8]
 800b812:	461f      	mov	r7, r3
 800b814:	42be      	cmp	r6, r7
 800b816:	680b      	ldr	r3, [r1, #0]
 800b818:	4682      	mov	sl, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	4690      	mov	r8, r2
 800b81e:	d82c      	bhi.n	800b87a <__ssputs_r+0x6e>
 800b820:	898a      	ldrh	r2, [r1, #12]
 800b822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b826:	d026      	beq.n	800b876 <__ssputs_r+0x6a>
 800b828:	6965      	ldr	r5, [r4, #20]
 800b82a:	6909      	ldr	r1, [r1, #16]
 800b82c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b830:	eba3 0901 	sub.w	r9, r3, r1
 800b834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b838:	1c7b      	adds	r3, r7, #1
 800b83a:	444b      	add	r3, r9
 800b83c:	106d      	asrs	r5, r5, #1
 800b83e:	429d      	cmp	r5, r3
 800b840:	bf38      	it	cc
 800b842:	461d      	movcc	r5, r3
 800b844:	0553      	lsls	r3, r2, #21
 800b846:	d527      	bpl.n	800b898 <__ssputs_r+0x8c>
 800b848:	4629      	mov	r1, r5
 800b84a:	f7ff fbd7 	bl	800affc <_malloc_r>
 800b84e:	4606      	mov	r6, r0
 800b850:	b360      	cbz	r0, 800b8ac <__ssputs_r+0xa0>
 800b852:	6921      	ldr	r1, [r4, #16]
 800b854:	464a      	mov	r2, r9
 800b856:	f7fe fcd2 	bl	800a1fe <memcpy>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	6126      	str	r6, [r4, #16]
 800b868:	6165      	str	r5, [r4, #20]
 800b86a:	444e      	add	r6, r9
 800b86c:	eba5 0509 	sub.w	r5, r5, r9
 800b870:	6026      	str	r6, [r4, #0]
 800b872:	60a5      	str	r5, [r4, #8]
 800b874:	463e      	mov	r6, r7
 800b876:	42be      	cmp	r6, r7
 800b878:	d900      	bls.n	800b87c <__ssputs_r+0x70>
 800b87a:	463e      	mov	r6, r7
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	4632      	mov	r2, r6
 800b880:	4641      	mov	r1, r8
 800b882:	f000 f9c9 	bl	800bc18 <memmove>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	1b9b      	subs	r3, r3, r6
 800b88a:	60a3      	str	r3, [r4, #8]
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	4433      	add	r3, r6
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	2000      	movs	r0, #0
 800b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b898:	462a      	mov	r2, r5
 800b89a:	f000 fa2d 	bl	800bcf8 <_realloc_r>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d1e0      	bne.n	800b866 <__ssputs_r+0x5a>
 800b8a4:	6921      	ldr	r1, [r4, #16]
 800b8a6:	4650      	mov	r0, sl
 800b8a8:	f7ff fb34 	bl	800af14 <_free_r>
 800b8ac:	230c      	movs	r3, #12
 800b8ae:	f8ca 3000 	str.w	r3, [sl]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	e7e9      	b.n	800b894 <__ssputs_r+0x88>

0800b8c0 <_svfiprintf_r>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	4698      	mov	r8, r3
 800b8c6:	898b      	ldrh	r3, [r1, #12]
 800b8c8:	061b      	lsls	r3, r3, #24
 800b8ca:	b09d      	sub	sp, #116	; 0x74
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	4614      	mov	r4, r2
 800b8d2:	d50e      	bpl.n	800b8f2 <_svfiprintf_r+0x32>
 800b8d4:	690b      	ldr	r3, [r1, #16]
 800b8d6:	b963      	cbnz	r3, 800b8f2 <_svfiprintf_r+0x32>
 800b8d8:	2140      	movs	r1, #64	; 0x40
 800b8da:	f7ff fb8f 	bl	800affc <_malloc_r>
 800b8de:	6028      	str	r0, [r5, #0]
 800b8e0:	6128      	str	r0, [r5, #16]
 800b8e2:	b920      	cbnz	r0, 800b8ee <_svfiprintf_r+0x2e>
 800b8e4:	230c      	movs	r3, #12
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ec:	e0d0      	b.n	800ba90 <_svfiprintf_r+0x1d0>
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	616b      	str	r3, [r5, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f6:	2320      	movs	r3, #32
 800b8f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b900:	2330      	movs	r3, #48	; 0x30
 800b902:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800baa8 <_svfiprintf_r+0x1e8>
 800b906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b90a:	f04f 0901 	mov.w	r9, #1
 800b90e:	4623      	mov	r3, r4
 800b910:	469a      	mov	sl, r3
 800b912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b916:	b10a      	cbz	r2, 800b91c <_svfiprintf_r+0x5c>
 800b918:	2a25      	cmp	r2, #37	; 0x25
 800b91a:	d1f9      	bne.n	800b910 <_svfiprintf_r+0x50>
 800b91c:	ebba 0b04 	subs.w	fp, sl, r4
 800b920:	d00b      	beq.n	800b93a <_svfiprintf_r+0x7a>
 800b922:	465b      	mov	r3, fp
 800b924:	4622      	mov	r2, r4
 800b926:	4629      	mov	r1, r5
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff ff6f 	bl	800b80c <__ssputs_r>
 800b92e:	3001      	adds	r0, #1
 800b930:	f000 80a9 	beq.w	800ba86 <_svfiprintf_r+0x1c6>
 800b934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b936:	445a      	add	r2, fp
 800b938:	9209      	str	r2, [sp, #36]	; 0x24
 800b93a:	f89a 3000 	ldrb.w	r3, [sl]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80a1 	beq.w	800ba86 <_svfiprintf_r+0x1c6>
 800b944:	2300      	movs	r3, #0
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b94e:	f10a 0a01 	add.w	sl, sl, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	9307      	str	r3, [sp, #28]
 800b956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b95a:	931a      	str	r3, [sp, #104]	; 0x68
 800b95c:	4654      	mov	r4, sl
 800b95e:	2205      	movs	r2, #5
 800b960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b964:	4850      	ldr	r0, [pc, #320]	; (800baa8 <_svfiprintf_r+0x1e8>)
 800b966:	f7f4 fc5b 	bl	8000220 <memchr>
 800b96a:	9a04      	ldr	r2, [sp, #16]
 800b96c:	b9d8      	cbnz	r0, 800b9a6 <_svfiprintf_r+0xe6>
 800b96e:	06d0      	lsls	r0, r2, #27
 800b970:	bf44      	itt	mi
 800b972:	2320      	movmi	r3, #32
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b978:	0711      	lsls	r1, r2, #28
 800b97a:	bf44      	itt	mi
 800b97c:	232b      	movmi	r3, #43	; 0x2b
 800b97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b982:	f89a 3000 	ldrb.w	r3, [sl]
 800b986:	2b2a      	cmp	r3, #42	; 0x2a
 800b988:	d015      	beq.n	800b9b6 <_svfiprintf_r+0xf6>
 800b98a:	9a07      	ldr	r2, [sp, #28]
 800b98c:	4654      	mov	r4, sl
 800b98e:	2000      	movs	r0, #0
 800b990:	f04f 0c0a 	mov.w	ip, #10
 800b994:	4621      	mov	r1, r4
 800b996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b99a:	3b30      	subs	r3, #48	; 0x30
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d94d      	bls.n	800ba3c <_svfiprintf_r+0x17c>
 800b9a0:	b1b0      	cbz	r0, 800b9d0 <_svfiprintf_r+0x110>
 800b9a2:	9207      	str	r2, [sp, #28]
 800b9a4:	e014      	b.n	800b9d0 <_svfiprintf_r+0x110>
 800b9a6:	eba0 0308 	sub.w	r3, r0, r8
 800b9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	9304      	str	r3, [sp, #16]
 800b9b2:	46a2      	mov	sl, r4
 800b9b4:	e7d2      	b.n	800b95c <_svfiprintf_r+0x9c>
 800b9b6:	9b03      	ldr	r3, [sp, #12]
 800b9b8:	1d19      	adds	r1, r3, #4
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	9103      	str	r1, [sp, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bfbb      	ittet	lt
 800b9c2:	425b      	neglt	r3, r3
 800b9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9c8:	9307      	strge	r3, [sp, #28]
 800b9ca:	9307      	strlt	r3, [sp, #28]
 800b9cc:	bfb8      	it	lt
 800b9ce:	9204      	strlt	r2, [sp, #16]
 800b9d0:	7823      	ldrb	r3, [r4, #0]
 800b9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d4:	d10c      	bne.n	800b9f0 <_svfiprintf_r+0x130>
 800b9d6:	7863      	ldrb	r3, [r4, #1]
 800b9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9da:	d134      	bne.n	800ba46 <_svfiprintf_r+0x186>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	1d1a      	adds	r2, r3, #4
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	9203      	str	r2, [sp, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfb8      	it	lt
 800b9e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ec:	3402      	adds	r4, #2
 800b9ee:	9305      	str	r3, [sp, #20]
 800b9f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bab8 <_svfiprintf_r+0x1f8>
 800b9f4:	7821      	ldrb	r1, [r4, #0]
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	f7f4 fc11 	bl	8000220 <memchr>
 800b9fe:	b138      	cbz	r0, 800ba10 <_svfiprintf_r+0x150>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	eba0 000a 	sub.w	r0, r0, sl
 800ba06:	2240      	movs	r2, #64	; 0x40
 800ba08:	4082      	lsls	r2, r0
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba14:	4825      	ldr	r0, [pc, #148]	; (800baac <_svfiprintf_r+0x1ec>)
 800ba16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	f7f4 fc00 	bl	8000220 <memchr>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d038      	beq.n	800ba96 <_svfiprintf_r+0x1d6>
 800ba24:	4b22      	ldr	r3, [pc, #136]	; (800bab0 <_svfiprintf_r+0x1f0>)
 800ba26:	bb1b      	cbnz	r3, 800ba70 <_svfiprintf_r+0x1b0>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	3307      	adds	r3, #7
 800ba2c:	f023 0307 	bic.w	r3, r3, #7
 800ba30:	3308      	adds	r3, #8
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	4433      	add	r3, r6
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	e768      	b.n	800b90e <_svfiprintf_r+0x4e>
 800ba3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba40:	460c      	mov	r4, r1
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7a6      	b.n	800b994 <_svfiprintf_r+0xd4>
 800ba46:	2300      	movs	r3, #0
 800ba48:	3401      	adds	r4, #1
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f04f 0c0a 	mov.w	ip, #10
 800ba52:	4620      	mov	r0, r4
 800ba54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba58:	3a30      	subs	r2, #48	; 0x30
 800ba5a:	2a09      	cmp	r2, #9
 800ba5c:	d903      	bls.n	800ba66 <_svfiprintf_r+0x1a6>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0c6      	beq.n	800b9f0 <_svfiprintf_r+0x130>
 800ba62:	9105      	str	r1, [sp, #20]
 800ba64:	e7c4      	b.n	800b9f0 <_svfiprintf_r+0x130>
 800ba66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e7f0      	b.n	800ba52 <_svfiprintf_r+0x192>
 800ba70:	ab03      	add	r3, sp, #12
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	462a      	mov	r2, r5
 800ba76:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <_svfiprintf_r+0x1f4>)
 800ba78:	a904      	add	r1, sp, #16
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	f7fd fe2c 	bl	80096d8 <_printf_float>
 800ba80:	1c42      	adds	r2, r0, #1
 800ba82:	4606      	mov	r6, r0
 800ba84:	d1d6      	bne.n	800ba34 <_svfiprintf_r+0x174>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	065b      	lsls	r3, r3, #25
 800ba8a:	f53f af2d 	bmi.w	800b8e8 <_svfiprintf_r+0x28>
 800ba8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba90:	b01d      	add	sp, #116	; 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	ab03      	add	r3, sp, #12
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	462a      	mov	r2, r5
 800ba9c:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <_svfiprintf_r+0x1f4>)
 800ba9e:	a904      	add	r1, sp, #16
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7fe f8bd 	bl	8009c20 <_printf_i>
 800baa6:	e7eb      	b.n	800ba80 <_svfiprintf_r+0x1c0>
 800baa8:	0800cb84 	.word	0x0800cb84
 800baac:	0800cb8e 	.word	0x0800cb8e
 800bab0:	080096d9 	.word	0x080096d9
 800bab4:	0800b80d 	.word	0x0800b80d
 800bab8:	0800cb8a 	.word	0x0800cb8a

0800babc <__sflush_r>:
 800babc:	898a      	ldrh	r2, [r1, #12]
 800babe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	4605      	mov	r5, r0
 800bac4:	0710      	lsls	r0, r2, #28
 800bac6:	460c      	mov	r4, r1
 800bac8:	d458      	bmi.n	800bb7c <__sflush_r+0xc0>
 800baca:	684b      	ldr	r3, [r1, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dc05      	bgt.n	800badc <__sflush_r+0x20>
 800bad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dc02      	bgt.n	800badc <__sflush_r+0x20>
 800bad6:	2000      	movs	r0, #0
 800bad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800badc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bade:	2e00      	cmp	r6, #0
 800bae0:	d0f9      	beq.n	800bad6 <__sflush_r+0x1a>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bae8:	682f      	ldr	r7, [r5, #0]
 800baea:	6a21      	ldr	r1, [r4, #32]
 800baec:	602b      	str	r3, [r5, #0]
 800baee:	d032      	beq.n	800bb56 <__sflush_r+0x9a>
 800baf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	075a      	lsls	r2, r3, #29
 800baf6:	d505      	bpl.n	800bb04 <__sflush_r+0x48>
 800baf8:	6863      	ldr	r3, [r4, #4]
 800bafa:	1ac0      	subs	r0, r0, r3
 800bafc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bafe:	b10b      	cbz	r3, 800bb04 <__sflush_r+0x48>
 800bb00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb02:	1ac0      	subs	r0, r0, r3
 800bb04:	2300      	movs	r3, #0
 800bb06:	4602      	mov	r2, r0
 800bb08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb0a:	6a21      	ldr	r1, [r4, #32]
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b0      	blx	r6
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	d106      	bne.n	800bb24 <__sflush_r+0x68>
 800bb16:	6829      	ldr	r1, [r5, #0]
 800bb18:	291d      	cmp	r1, #29
 800bb1a:	d82b      	bhi.n	800bb74 <__sflush_r+0xb8>
 800bb1c:	4a29      	ldr	r2, [pc, #164]	; (800bbc4 <__sflush_r+0x108>)
 800bb1e:	410a      	asrs	r2, r1
 800bb20:	07d6      	lsls	r6, r2, #31
 800bb22:	d427      	bmi.n	800bb74 <__sflush_r+0xb8>
 800bb24:	2200      	movs	r2, #0
 800bb26:	6062      	str	r2, [r4, #4]
 800bb28:	04d9      	lsls	r1, r3, #19
 800bb2a:	6922      	ldr	r2, [r4, #16]
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	d504      	bpl.n	800bb3a <__sflush_r+0x7e>
 800bb30:	1c42      	adds	r2, r0, #1
 800bb32:	d101      	bne.n	800bb38 <__sflush_r+0x7c>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b903      	cbnz	r3, 800bb3a <__sflush_r+0x7e>
 800bb38:	6560      	str	r0, [r4, #84]	; 0x54
 800bb3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb3c:	602f      	str	r7, [r5, #0]
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	d0c9      	beq.n	800bad6 <__sflush_r+0x1a>
 800bb42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb46:	4299      	cmp	r1, r3
 800bb48:	d002      	beq.n	800bb50 <__sflush_r+0x94>
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f7ff f9e2 	bl	800af14 <_free_r>
 800bb50:	2000      	movs	r0, #0
 800bb52:	6360      	str	r0, [r4, #52]	; 0x34
 800bb54:	e7c0      	b.n	800bad8 <__sflush_r+0x1c>
 800bb56:	2301      	movs	r3, #1
 800bb58:	4628      	mov	r0, r5
 800bb5a:	47b0      	blx	r6
 800bb5c:	1c41      	adds	r1, r0, #1
 800bb5e:	d1c8      	bne.n	800baf2 <__sflush_r+0x36>
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0c5      	beq.n	800baf2 <__sflush_r+0x36>
 800bb66:	2b1d      	cmp	r3, #29
 800bb68:	d001      	beq.n	800bb6e <__sflush_r+0xb2>
 800bb6a:	2b16      	cmp	r3, #22
 800bb6c:	d101      	bne.n	800bb72 <__sflush_r+0xb6>
 800bb6e:	602f      	str	r7, [r5, #0]
 800bb70:	e7b1      	b.n	800bad6 <__sflush_r+0x1a>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	e7ad      	b.n	800bad8 <__sflush_r+0x1c>
 800bb7c:	690f      	ldr	r7, [r1, #16]
 800bb7e:	2f00      	cmp	r7, #0
 800bb80:	d0a9      	beq.n	800bad6 <__sflush_r+0x1a>
 800bb82:	0793      	lsls	r3, r2, #30
 800bb84:	680e      	ldr	r6, [r1, #0]
 800bb86:	bf08      	it	eq
 800bb88:	694b      	ldreq	r3, [r1, #20]
 800bb8a:	600f      	str	r7, [r1, #0]
 800bb8c:	bf18      	it	ne
 800bb8e:	2300      	movne	r3, #0
 800bb90:	eba6 0807 	sub.w	r8, r6, r7
 800bb94:	608b      	str	r3, [r1, #8]
 800bb96:	f1b8 0f00 	cmp.w	r8, #0
 800bb9a:	dd9c      	ble.n	800bad6 <__sflush_r+0x1a>
 800bb9c:	6a21      	ldr	r1, [r4, #32]
 800bb9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bba0:	4643      	mov	r3, r8
 800bba2:	463a      	mov	r2, r7
 800bba4:	4628      	mov	r0, r5
 800bba6:	47b0      	blx	r6
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	dc06      	bgt.n	800bbba <__sflush_r+0xfe>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb2:	81a3      	strh	r3, [r4, #12]
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	e78e      	b.n	800bad8 <__sflush_r+0x1c>
 800bbba:	4407      	add	r7, r0
 800bbbc:	eba8 0800 	sub.w	r8, r8, r0
 800bbc0:	e7e9      	b.n	800bb96 <__sflush_r+0xda>
 800bbc2:	bf00      	nop
 800bbc4:	dfbffffe 	.word	0xdfbffffe

0800bbc8 <_fflush_r>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	690b      	ldr	r3, [r1, #16]
 800bbcc:	4605      	mov	r5, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	b913      	cbnz	r3, 800bbd8 <_fflush_r+0x10>
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	b118      	cbz	r0, 800bbe2 <_fflush_r+0x1a>
 800bbda:	6a03      	ldr	r3, [r0, #32]
 800bbdc:	b90b      	cbnz	r3, 800bbe2 <_fflush_r+0x1a>
 800bbde:	f7fe f9cd 	bl	8009f7c <__sinit>
 800bbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0f3      	beq.n	800bbd2 <_fflush_r+0xa>
 800bbea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbec:	07d0      	lsls	r0, r2, #31
 800bbee:	d404      	bmi.n	800bbfa <_fflush_r+0x32>
 800bbf0:	0599      	lsls	r1, r3, #22
 800bbf2:	d402      	bmi.n	800bbfa <_fflush_r+0x32>
 800bbf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbf6:	f7fe fb00 	bl	800a1fa <__retarget_lock_acquire_recursive>
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	f7ff ff5d 	bl	800babc <__sflush_r>
 800bc02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc04:	07da      	lsls	r2, r3, #31
 800bc06:	4605      	mov	r5, r0
 800bc08:	d4e4      	bmi.n	800bbd4 <_fflush_r+0xc>
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	059b      	lsls	r3, r3, #22
 800bc0e:	d4e1      	bmi.n	800bbd4 <_fflush_r+0xc>
 800bc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc12:	f7fe faf3 	bl	800a1fc <__retarget_lock_release_recursive>
 800bc16:	e7dd      	b.n	800bbd4 <_fflush_r+0xc>

0800bc18 <memmove>:
 800bc18:	4288      	cmp	r0, r1
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	eb01 0402 	add.w	r4, r1, r2
 800bc20:	d902      	bls.n	800bc28 <memmove+0x10>
 800bc22:	4284      	cmp	r4, r0
 800bc24:	4623      	mov	r3, r4
 800bc26:	d807      	bhi.n	800bc38 <memmove+0x20>
 800bc28:	1e43      	subs	r3, r0, #1
 800bc2a:	42a1      	cmp	r1, r4
 800bc2c:	d008      	beq.n	800bc40 <memmove+0x28>
 800bc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc36:	e7f8      	b.n	800bc2a <memmove+0x12>
 800bc38:	4402      	add	r2, r0
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	428a      	cmp	r2, r1
 800bc3e:	d100      	bne.n	800bc42 <memmove+0x2a>
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc4a:	e7f7      	b.n	800bc3c <memmove+0x24>

0800bc4c <_sbrk_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d06      	ldr	r5, [pc, #24]	; (800bc68 <_sbrk_r+0x1c>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	f7f8 fa6a 	bl	8004130 <_sbrk>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_sbrk_r+0x1a>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_sbrk_r+0x1a>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	2000209c 	.word	0x2000209c

0800bc6c <__assert_func>:
 800bc6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc6e:	4614      	mov	r4, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <__assert_func+0x2c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4605      	mov	r5, r0
 800bc78:	68d8      	ldr	r0, [r3, #12]
 800bc7a:	b14c      	cbz	r4, 800bc90 <__assert_func+0x24>
 800bc7c:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <__assert_func+0x30>)
 800bc7e:	9100      	str	r1, [sp, #0]
 800bc80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc84:	4906      	ldr	r1, [pc, #24]	; (800bca0 <__assert_func+0x34>)
 800bc86:	462b      	mov	r3, r5
 800bc88:	f000 f872 	bl	800bd70 <fiprintf>
 800bc8c:	f000 f882 	bl	800bd94 <abort>
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <__assert_func+0x38>)
 800bc92:	461c      	mov	r4, r3
 800bc94:	e7f3      	b.n	800bc7e <__assert_func+0x12>
 800bc96:	bf00      	nop
 800bc98:	200005b8 	.word	0x200005b8
 800bc9c:	0800cb9f 	.word	0x0800cb9f
 800bca0:	0800cbac 	.word	0x0800cbac
 800bca4:	0800cbda 	.word	0x0800cbda

0800bca8 <_calloc_r>:
 800bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcaa:	fba1 2402 	umull	r2, r4, r1, r2
 800bcae:	b94c      	cbnz	r4, 800bcc4 <_calloc_r+0x1c>
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	9201      	str	r2, [sp, #4]
 800bcb4:	f7ff f9a2 	bl	800affc <_malloc_r>
 800bcb8:	9a01      	ldr	r2, [sp, #4]
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b930      	cbnz	r0, 800bccc <_calloc_r+0x24>
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	b003      	add	sp, #12
 800bcc2:	bd30      	pop	{r4, r5, pc}
 800bcc4:	220c      	movs	r2, #12
 800bcc6:	6002      	str	r2, [r0, #0]
 800bcc8:	2500      	movs	r5, #0
 800bcca:	e7f8      	b.n	800bcbe <_calloc_r+0x16>
 800bccc:	4621      	mov	r1, r4
 800bcce:	f7fe fa17 	bl	800a100 <memset>
 800bcd2:	e7f4      	b.n	800bcbe <_calloc_r+0x16>

0800bcd4 <__ascii_mbtowc>:
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	b901      	cbnz	r1, 800bcda <__ascii_mbtowc+0x6>
 800bcd8:	a901      	add	r1, sp, #4
 800bcda:	b142      	cbz	r2, 800bcee <__ascii_mbtowc+0x1a>
 800bcdc:	b14b      	cbz	r3, 800bcf2 <__ascii_mbtowc+0x1e>
 800bcde:	7813      	ldrb	r3, [r2, #0]
 800bce0:	600b      	str	r3, [r1, #0]
 800bce2:	7812      	ldrb	r2, [r2, #0]
 800bce4:	1e10      	subs	r0, r2, #0
 800bce6:	bf18      	it	ne
 800bce8:	2001      	movne	r0, #1
 800bcea:	b002      	add	sp, #8
 800bcec:	4770      	bx	lr
 800bcee:	4610      	mov	r0, r2
 800bcf0:	e7fb      	b.n	800bcea <__ascii_mbtowc+0x16>
 800bcf2:	f06f 0001 	mvn.w	r0, #1
 800bcf6:	e7f8      	b.n	800bcea <__ascii_mbtowc+0x16>

0800bcf8 <_realloc_r>:
 800bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	4614      	mov	r4, r2
 800bd00:	460e      	mov	r6, r1
 800bd02:	b921      	cbnz	r1, 800bd0e <_realloc_r+0x16>
 800bd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	4611      	mov	r1, r2
 800bd0a:	f7ff b977 	b.w	800affc <_malloc_r>
 800bd0e:	b92a      	cbnz	r2, 800bd1c <_realloc_r+0x24>
 800bd10:	f7ff f900 	bl	800af14 <_free_r>
 800bd14:	4625      	mov	r5, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	f000 f841 	bl	800bda2 <_malloc_usable_size_r>
 800bd20:	4284      	cmp	r4, r0
 800bd22:	4607      	mov	r7, r0
 800bd24:	d802      	bhi.n	800bd2c <_realloc_r+0x34>
 800bd26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd2a:	d812      	bhi.n	800bd52 <_realloc_r+0x5a>
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4640      	mov	r0, r8
 800bd30:	f7ff f964 	bl	800affc <_malloc_r>
 800bd34:	4605      	mov	r5, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d0ed      	beq.n	800bd16 <_realloc_r+0x1e>
 800bd3a:	42bc      	cmp	r4, r7
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4631      	mov	r1, r6
 800bd40:	bf28      	it	cs
 800bd42:	463a      	movcs	r2, r7
 800bd44:	f7fe fa5b 	bl	800a1fe <memcpy>
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	f7ff f8e2 	bl	800af14 <_free_r>
 800bd50:	e7e1      	b.n	800bd16 <_realloc_r+0x1e>
 800bd52:	4635      	mov	r5, r6
 800bd54:	e7df      	b.n	800bd16 <_realloc_r+0x1e>

0800bd56 <__ascii_wctomb>:
 800bd56:	b149      	cbz	r1, 800bd6c <__ascii_wctomb+0x16>
 800bd58:	2aff      	cmp	r2, #255	; 0xff
 800bd5a:	bf85      	ittet	hi
 800bd5c:	238a      	movhi	r3, #138	; 0x8a
 800bd5e:	6003      	strhi	r3, [r0, #0]
 800bd60:	700a      	strbls	r2, [r1, #0]
 800bd62:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd66:	bf98      	it	ls
 800bd68:	2001      	movls	r0, #1
 800bd6a:	4770      	bx	lr
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	4770      	bx	lr

0800bd70 <fiprintf>:
 800bd70:	b40e      	push	{r1, r2, r3}
 800bd72:	b503      	push	{r0, r1, lr}
 800bd74:	4601      	mov	r1, r0
 800bd76:	ab03      	add	r3, sp, #12
 800bd78:	4805      	ldr	r0, [pc, #20]	; (800bd90 <fiprintf+0x20>)
 800bd7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd7e:	6800      	ldr	r0, [r0, #0]
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	f000 f83f 	bl	800be04 <_vfiprintf_r>
 800bd86:	b002      	add	sp, #8
 800bd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd8c:	b003      	add	sp, #12
 800bd8e:	4770      	bx	lr
 800bd90:	200005b8 	.word	0x200005b8

0800bd94 <abort>:
 800bd94:	b508      	push	{r3, lr}
 800bd96:	2006      	movs	r0, #6
 800bd98:	f000 fa0c 	bl	800c1b4 <raise>
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	f7f8 f997 	bl	80040d0 <_exit>

0800bda2 <_malloc_usable_size_r>:
 800bda2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bda6:	1f18      	subs	r0, r3, #4
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bfbc      	itt	lt
 800bdac:	580b      	ldrlt	r3, [r1, r0]
 800bdae:	18c0      	addlt	r0, r0, r3
 800bdb0:	4770      	bx	lr

0800bdb2 <__sfputc_r>:
 800bdb2:	6893      	ldr	r3, [r2, #8]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	b410      	push	{r4}
 800bdba:	6093      	str	r3, [r2, #8]
 800bdbc:	da08      	bge.n	800bdd0 <__sfputc_r+0x1e>
 800bdbe:	6994      	ldr	r4, [r2, #24]
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	db01      	blt.n	800bdc8 <__sfputc_r+0x16>
 800bdc4:	290a      	cmp	r1, #10
 800bdc6:	d103      	bne.n	800bdd0 <__sfputc_r+0x1e>
 800bdc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdcc:	f000 b934 	b.w	800c038 <__swbuf_r>
 800bdd0:	6813      	ldr	r3, [r2, #0]
 800bdd2:	1c58      	adds	r0, r3, #1
 800bdd4:	6010      	str	r0, [r2, #0]
 800bdd6:	7019      	strb	r1, [r3, #0]
 800bdd8:	4608      	mov	r0, r1
 800bdda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <__sfputs_r>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	4614      	mov	r4, r2
 800bde8:	18d5      	adds	r5, r2, r3
 800bdea:	42ac      	cmp	r4, r5
 800bdec:	d101      	bne.n	800bdf2 <__sfputs_r+0x12>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e007      	b.n	800be02 <__sfputs_r+0x22>
 800bdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf6:	463a      	mov	r2, r7
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff ffda 	bl	800bdb2 <__sfputc_r>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	d1f3      	bne.n	800bdea <__sfputs_r+0xa>
 800be02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be04 <_vfiprintf_r>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	460d      	mov	r5, r1
 800be0a:	b09d      	sub	sp, #116	; 0x74
 800be0c:	4614      	mov	r4, r2
 800be0e:	4698      	mov	r8, r3
 800be10:	4606      	mov	r6, r0
 800be12:	b118      	cbz	r0, 800be1c <_vfiprintf_r+0x18>
 800be14:	6a03      	ldr	r3, [r0, #32]
 800be16:	b90b      	cbnz	r3, 800be1c <_vfiprintf_r+0x18>
 800be18:	f7fe f8b0 	bl	8009f7c <__sinit>
 800be1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be1e:	07d9      	lsls	r1, r3, #31
 800be20:	d405      	bmi.n	800be2e <_vfiprintf_r+0x2a>
 800be22:	89ab      	ldrh	r3, [r5, #12]
 800be24:	059a      	lsls	r2, r3, #22
 800be26:	d402      	bmi.n	800be2e <_vfiprintf_r+0x2a>
 800be28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2a:	f7fe f9e6 	bl	800a1fa <__retarget_lock_acquire_recursive>
 800be2e:	89ab      	ldrh	r3, [r5, #12]
 800be30:	071b      	lsls	r3, r3, #28
 800be32:	d501      	bpl.n	800be38 <_vfiprintf_r+0x34>
 800be34:	692b      	ldr	r3, [r5, #16]
 800be36:	b99b      	cbnz	r3, 800be60 <_vfiprintf_r+0x5c>
 800be38:	4629      	mov	r1, r5
 800be3a:	4630      	mov	r0, r6
 800be3c:	f000 f93a 	bl	800c0b4 <__swsetup_r>
 800be40:	b170      	cbz	r0, 800be60 <_vfiprintf_r+0x5c>
 800be42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be44:	07dc      	lsls	r4, r3, #31
 800be46:	d504      	bpl.n	800be52 <_vfiprintf_r+0x4e>
 800be48:	f04f 30ff 	mov.w	r0, #4294967295
 800be4c:	b01d      	add	sp, #116	; 0x74
 800be4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	0598      	lsls	r0, r3, #22
 800be56:	d4f7      	bmi.n	800be48 <_vfiprintf_r+0x44>
 800be58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be5a:	f7fe f9cf 	bl	800a1fc <__retarget_lock_release_recursive>
 800be5e:	e7f3      	b.n	800be48 <_vfiprintf_r+0x44>
 800be60:	2300      	movs	r3, #0
 800be62:	9309      	str	r3, [sp, #36]	; 0x24
 800be64:	2320      	movs	r3, #32
 800be66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6e:	2330      	movs	r3, #48	; 0x30
 800be70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c024 <_vfiprintf_r+0x220>
 800be74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be78:	f04f 0901 	mov.w	r9, #1
 800be7c:	4623      	mov	r3, r4
 800be7e:	469a      	mov	sl, r3
 800be80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be84:	b10a      	cbz	r2, 800be8a <_vfiprintf_r+0x86>
 800be86:	2a25      	cmp	r2, #37	; 0x25
 800be88:	d1f9      	bne.n	800be7e <_vfiprintf_r+0x7a>
 800be8a:	ebba 0b04 	subs.w	fp, sl, r4
 800be8e:	d00b      	beq.n	800bea8 <_vfiprintf_r+0xa4>
 800be90:	465b      	mov	r3, fp
 800be92:	4622      	mov	r2, r4
 800be94:	4629      	mov	r1, r5
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ffa2 	bl	800bde0 <__sfputs_r>
 800be9c:	3001      	adds	r0, #1
 800be9e:	f000 80a9 	beq.w	800bff4 <_vfiprintf_r+0x1f0>
 800bea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea4:	445a      	add	r2, fp
 800bea6:	9209      	str	r2, [sp, #36]	; 0x24
 800bea8:	f89a 3000 	ldrb.w	r3, [sl]
 800beac:	2b00      	cmp	r3, #0
 800beae:	f000 80a1 	beq.w	800bff4 <_vfiprintf_r+0x1f0>
 800beb2:	2300      	movs	r3, #0
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bebc:	f10a 0a01 	add.w	sl, sl, #1
 800bec0:	9304      	str	r3, [sp, #16]
 800bec2:	9307      	str	r3, [sp, #28]
 800bec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec8:	931a      	str	r3, [sp, #104]	; 0x68
 800beca:	4654      	mov	r4, sl
 800becc:	2205      	movs	r2, #5
 800bece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed2:	4854      	ldr	r0, [pc, #336]	; (800c024 <_vfiprintf_r+0x220>)
 800bed4:	f7f4 f9a4 	bl	8000220 <memchr>
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	b9d8      	cbnz	r0, 800bf14 <_vfiprintf_r+0x110>
 800bedc:	06d1      	lsls	r1, r2, #27
 800bede:	bf44      	itt	mi
 800bee0:	2320      	movmi	r3, #32
 800bee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee6:	0713      	lsls	r3, r2, #28
 800bee8:	bf44      	itt	mi
 800beea:	232b      	movmi	r3, #43	; 0x2b
 800beec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef0:	f89a 3000 	ldrb.w	r3, [sl]
 800bef4:	2b2a      	cmp	r3, #42	; 0x2a
 800bef6:	d015      	beq.n	800bf24 <_vfiprintf_r+0x120>
 800bef8:	9a07      	ldr	r2, [sp, #28]
 800befa:	4654      	mov	r4, sl
 800befc:	2000      	movs	r0, #0
 800befe:	f04f 0c0a 	mov.w	ip, #10
 800bf02:	4621      	mov	r1, r4
 800bf04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf08:	3b30      	subs	r3, #48	; 0x30
 800bf0a:	2b09      	cmp	r3, #9
 800bf0c:	d94d      	bls.n	800bfaa <_vfiprintf_r+0x1a6>
 800bf0e:	b1b0      	cbz	r0, 800bf3e <_vfiprintf_r+0x13a>
 800bf10:	9207      	str	r2, [sp, #28]
 800bf12:	e014      	b.n	800bf3e <_vfiprintf_r+0x13a>
 800bf14:	eba0 0308 	sub.w	r3, r0, r8
 800bf18:	fa09 f303 	lsl.w	r3, r9, r3
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	9304      	str	r3, [sp, #16]
 800bf20:	46a2      	mov	sl, r4
 800bf22:	e7d2      	b.n	800beca <_vfiprintf_r+0xc6>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	1d19      	adds	r1, r3, #4
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	9103      	str	r1, [sp, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	bfbb      	ittet	lt
 800bf30:	425b      	neglt	r3, r3
 800bf32:	f042 0202 	orrlt.w	r2, r2, #2
 800bf36:	9307      	strge	r3, [sp, #28]
 800bf38:	9307      	strlt	r3, [sp, #28]
 800bf3a:	bfb8      	it	lt
 800bf3c:	9204      	strlt	r2, [sp, #16]
 800bf3e:	7823      	ldrb	r3, [r4, #0]
 800bf40:	2b2e      	cmp	r3, #46	; 0x2e
 800bf42:	d10c      	bne.n	800bf5e <_vfiprintf_r+0x15a>
 800bf44:	7863      	ldrb	r3, [r4, #1]
 800bf46:	2b2a      	cmp	r3, #42	; 0x2a
 800bf48:	d134      	bne.n	800bfb4 <_vfiprintf_r+0x1b0>
 800bf4a:	9b03      	ldr	r3, [sp, #12]
 800bf4c:	1d1a      	adds	r2, r3, #4
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	9203      	str	r2, [sp, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bfb8      	it	lt
 800bf56:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf5a:	3402      	adds	r4, #2
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c034 <_vfiprintf_r+0x230>
 800bf62:	7821      	ldrb	r1, [r4, #0]
 800bf64:	2203      	movs	r2, #3
 800bf66:	4650      	mov	r0, sl
 800bf68:	f7f4 f95a 	bl	8000220 <memchr>
 800bf6c:	b138      	cbz	r0, 800bf7e <_vfiprintf_r+0x17a>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	eba0 000a 	sub.w	r0, r0, sl
 800bf74:	2240      	movs	r2, #64	; 0x40
 800bf76:	4082      	lsls	r2, r0
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	3401      	adds	r4, #1
 800bf7c:	9304      	str	r3, [sp, #16]
 800bf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf82:	4829      	ldr	r0, [pc, #164]	; (800c028 <_vfiprintf_r+0x224>)
 800bf84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf88:	2206      	movs	r2, #6
 800bf8a:	f7f4 f949 	bl	8000220 <memchr>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d03f      	beq.n	800c012 <_vfiprintf_r+0x20e>
 800bf92:	4b26      	ldr	r3, [pc, #152]	; (800c02c <_vfiprintf_r+0x228>)
 800bf94:	bb1b      	cbnz	r3, 800bfde <_vfiprintf_r+0x1da>
 800bf96:	9b03      	ldr	r3, [sp, #12]
 800bf98:	3307      	adds	r3, #7
 800bf9a:	f023 0307 	bic.w	r3, r3, #7
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	9303      	str	r3, [sp, #12]
 800bfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa4:	443b      	add	r3, r7
 800bfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa8:	e768      	b.n	800be7c <_vfiprintf_r+0x78>
 800bfaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfae:	460c      	mov	r4, r1
 800bfb0:	2001      	movs	r0, #1
 800bfb2:	e7a6      	b.n	800bf02 <_vfiprintf_r+0xfe>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f04f 0c0a 	mov.w	ip, #10
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc6:	3a30      	subs	r2, #48	; 0x30
 800bfc8:	2a09      	cmp	r2, #9
 800bfca:	d903      	bls.n	800bfd4 <_vfiprintf_r+0x1d0>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0c6      	beq.n	800bf5e <_vfiprintf_r+0x15a>
 800bfd0:	9105      	str	r1, [sp, #20]
 800bfd2:	e7c4      	b.n	800bf5e <_vfiprintf_r+0x15a>
 800bfd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd8:	4604      	mov	r4, r0
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e7f0      	b.n	800bfc0 <_vfiprintf_r+0x1bc>
 800bfde:	ab03      	add	r3, sp, #12
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4b12      	ldr	r3, [pc, #72]	; (800c030 <_vfiprintf_r+0x22c>)
 800bfe6:	a904      	add	r1, sp, #16
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7fd fb75 	bl	80096d8 <_printf_float>
 800bfee:	4607      	mov	r7, r0
 800bff0:	1c78      	adds	r0, r7, #1
 800bff2:	d1d6      	bne.n	800bfa2 <_vfiprintf_r+0x19e>
 800bff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff6:	07d9      	lsls	r1, r3, #31
 800bff8:	d405      	bmi.n	800c006 <_vfiprintf_r+0x202>
 800bffa:	89ab      	ldrh	r3, [r5, #12]
 800bffc:	059a      	lsls	r2, r3, #22
 800bffe:	d402      	bmi.n	800c006 <_vfiprintf_r+0x202>
 800c000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c002:	f7fe f8fb 	bl	800a1fc <__retarget_lock_release_recursive>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	065b      	lsls	r3, r3, #25
 800c00a:	f53f af1d 	bmi.w	800be48 <_vfiprintf_r+0x44>
 800c00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c010:	e71c      	b.n	800be4c <_vfiprintf_r+0x48>
 800c012:	ab03      	add	r3, sp, #12
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	462a      	mov	r2, r5
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <_vfiprintf_r+0x22c>)
 800c01a:	a904      	add	r1, sp, #16
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7fd fdff 	bl	8009c20 <_printf_i>
 800c022:	e7e4      	b.n	800bfee <_vfiprintf_r+0x1ea>
 800c024:	0800cb84 	.word	0x0800cb84
 800c028:	0800cb8e 	.word	0x0800cb8e
 800c02c:	080096d9 	.word	0x080096d9
 800c030:	0800bde1 	.word	0x0800bde1
 800c034:	0800cb8a 	.word	0x0800cb8a

0800c038 <__swbuf_r>:
 800c038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03a:	460e      	mov	r6, r1
 800c03c:	4614      	mov	r4, r2
 800c03e:	4605      	mov	r5, r0
 800c040:	b118      	cbz	r0, 800c04a <__swbuf_r+0x12>
 800c042:	6a03      	ldr	r3, [r0, #32]
 800c044:	b90b      	cbnz	r3, 800c04a <__swbuf_r+0x12>
 800c046:	f7fd ff99 	bl	8009f7c <__sinit>
 800c04a:	69a3      	ldr	r3, [r4, #24]
 800c04c:	60a3      	str	r3, [r4, #8]
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	071a      	lsls	r2, r3, #28
 800c052:	d525      	bpl.n	800c0a0 <__swbuf_r+0x68>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	b31b      	cbz	r3, 800c0a0 <__swbuf_r+0x68>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	6922      	ldr	r2, [r4, #16]
 800c05c:	1a98      	subs	r0, r3, r2
 800c05e:	6963      	ldr	r3, [r4, #20]
 800c060:	b2f6      	uxtb	r6, r6
 800c062:	4283      	cmp	r3, r0
 800c064:	4637      	mov	r7, r6
 800c066:	dc04      	bgt.n	800c072 <__swbuf_r+0x3a>
 800c068:	4621      	mov	r1, r4
 800c06a:	4628      	mov	r0, r5
 800c06c:	f7ff fdac 	bl	800bbc8 <_fflush_r>
 800c070:	b9e0      	cbnz	r0, 800c0ac <__swbuf_r+0x74>
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	3b01      	subs	r3, #1
 800c076:	60a3      	str	r3, [r4, #8]
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	6022      	str	r2, [r4, #0]
 800c07e:	701e      	strb	r6, [r3, #0]
 800c080:	6962      	ldr	r2, [r4, #20]
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	429a      	cmp	r2, r3
 800c086:	d004      	beq.n	800c092 <__swbuf_r+0x5a>
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	07db      	lsls	r3, r3, #31
 800c08c:	d506      	bpl.n	800c09c <__swbuf_r+0x64>
 800c08e:	2e0a      	cmp	r6, #10
 800c090:	d104      	bne.n	800c09c <__swbuf_r+0x64>
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f7ff fd97 	bl	800bbc8 <_fflush_r>
 800c09a:	b938      	cbnz	r0, 800c0ac <__swbuf_r+0x74>
 800c09c:	4638      	mov	r0, r7
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f000 f806 	bl	800c0b4 <__swsetup_r>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0d5      	beq.n	800c058 <__swbuf_r+0x20>
 800c0ac:	f04f 37ff 	mov.w	r7, #4294967295
 800c0b0:	e7f4      	b.n	800c09c <__swbuf_r+0x64>
	...

0800c0b4 <__swsetup_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <__swsetup_r+0xac>)
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	460c      	mov	r4, r1
 800c0be:	b118      	cbz	r0, 800c0c8 <__swsetup_r+0x14>
 800c0c0:	6a03      	ldr	r3, [r0, #32]
 800c0c2:	b90b      	cbnz	r3, 800c0c8 <__swsetup_r+0x14>
 800c0c4:	f7fd ff5a 	bl	8009f7c <__sinit>
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0ce:	0718      	lsls	r0, r3, #28
 800c0d0:	d422      	bmi.n	800c118 <__swsetup_r+0x64>
 800c0d2:	06d9      	lsls	r1, r3, #27
 800c0d4:	d407      	bmi.n	800c0e6 <__swsetup_r+0x32>
 800c0d6:	2309      	movs	r3, #9
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0de:	81a3      	strh	r3, [r4, #12]
 800c0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e4:	e034      	b.n	800c150 <__swsetup_r+0x9c>
 800c0e6:	0758      	lsls	r0, r3, #29
 800c0e8:	d512      	bpl.n	800c110 <__swsetup_r+0x5c>
 800c0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ec:	b141      	cbz	r1, 800c100 <__swsetup_r+0x4c>
 800c0ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	d002      	beq.n	800c0fc <__swsetup_r+0x48>
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f7fe ff0c 	bl	800af14 <_free_r>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6363      	str	r3, [r4, #52]	; 0x34
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	2300      	movs	r3, #0
 800c10a:	6063      	str	r3, [r4, #4]
 800c10c:	6923      	ldr	r3, [r4, #16]
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	f043 0308 	orr.w	r3, r3, #8
 800c116:	81a3      	strh	r3, [r4, #12]
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	b94b      	cbnz	r3, 800c130 <__swsetup_r+0x7c>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c126:	d003      	beq.n	800c130 <__swsetup_r+0x7c>
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 f884 	bl	800c238 <__smakebuf_r>
 800c130:	89a0      	ldrh	r0, [r4, #12]
 800c132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c136:	f010 0301 	ands.w	r3, r0, #1
 800c13a:	d00a      	beq.n	800c152 <__swsetup_r+0x9e>
 800c13c:	2300      	movs	r3, #0
 800c13e:	60a3      	str	r3, [r4, #8]
 800c140:	6963      	ldr	r3, [r4, #20]
 800c142:	425b      	negs	r3, r3
 800c144:	61a3      	str	r3, [r4, #24]
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	b943      	cbnz	r3, 800c15c <__swsetup_r+0xa8>
 800c14a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c14e:	d1c4      	bne.n	800c0da <__swsetup_r+0x26>
 800c150:	bd38      	pop	{r3, r4, r5, pc}
 800c152:	0781      	lsls	r1, r0, #30
 800c154:	bf58      	it	pl
 800c156:	6963      	ldrpl	r3, [r4, #20]
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	e7f4      	b.n	800c146 <__swsetup_r+0x92>
 800c15c:	2000      	movs	r0, #0
 800c15e:	e7f7      	b.n	800c150 <__swsetup_r+0x9c>
 800c160:	200005b8 	.word	0x200005b8

0800c164 <_raise_r>:
 800c164:	291f      	cmp	r1, #31
 800c166:	b538      	push	{r3, r4, r5, lr}
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	d904      	bls.n	800c178 <_raise_r+0x14>
 800c16e:	2316      	movs	r3, #22
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	f04f 30ff 	mov.w	r0, #4294967295
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c17a:	b112      	cbz	r2, 800c182 <_raise_r+0x1e>
 800c17c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c180:	b94b      	cbnz	r3, 800c196 <_raise_r+0x32>
 800c182:	4620      	mov	r0, r4
 800c184:	f000 f830 	bl	800c1e8 <_getpid_r>
 800c188:	462a      	mov	r2, r5
 800c18a:	4601      	mov	r1, r0
 800c18c:	4620      	mov	r0, r4
 800c18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c192:	f000 b817 	b.w	800c1c4 <_kill_r>
 800c196:	2b01      	cmp	r3, #1
 800c198:	d00a      	beq.n	800c1b0 <_raise_r+0x4c>
 800c19a:	1c59      	adds	r1, r3, #1
 800c19c:	d103      	bne.n	800c1a6 <_raise_r+0x42>
 800c19e:	2316      	movs	r3, #22
 800c1a0:	6003      	str	r3, [r0, #0]
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	e7e7      	b.n	800c176 <_raise_r+0x12>
 800c1a6:	2400      	movs	r4, #0
 800c1a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	4798      	blx	r3
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e7e0      	b.n	800c176 <_raise_r+0x12>

0800c1b4 <raise>:
 800c1b4:	4b02      	ldr	r3, [pc, #8]	; (800c1c0 <raise+0xc>)
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	f7ff bfd3 	b.w	800c164 <_raise_r>
 800c1be:	bf00      	nop
 800c1c0:	200005b8 	.word	0x200005b8

0800c1c4 <_kill_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d07      	ldr	r5, [pc, #28]	; (800c1e4 <_kill_r+0x20>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	f7f7 ff75 	bl	80040c0 <_kill>
 800c1d6:	1c43      	adds	r3, r0, #1
 800c1d8:	d102      	bne.n	800c1e0 <_kill_r+0x1c>
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	b103      	cbz	r3, 800c1e0 <_kill_r+0x1c>
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	bd38      	pop	{r3, r4, r5, pc}
 800c1e2:	bf00      	nop
 800c1e4:	2000209c 	.word	0x2000209c

0800c1e8 <_getpid_r>:
 800c1e8:	f7f7 bf68 	b.w	80040bc <_getpid>

0800c1ec <__swhatbuf_r>:
 800c1ec:	b570      	push	{r4, r5, r6, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	b096      	sub	sp, #88	; 0x58
 800c1f8:	4615      	mov	r5, r2
 800c1fa:	461e      	mov	r6, r3
 800c1fc:	da0d      	bge.n	800c21a <__swhatbuf_r+0x2e>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c204:	f04f 0100 	mov.w	r1, #0
 800c208:	bf0c      	ite	eq
 800c20a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c20e:	2340      	movne	r3, #64	; 0x40
 800c210:	2000      	movs	r0, #0
 800c212:	6031      	str	r1, [r6, #0]
 800c214:	602b      	str	r3, [r5, #0]
 800c216:	b016      	add	sp, #88	; 0x58
 800c218:	bd70      	pop	{r4, r5, r6, pc}
 800c21a:	466a      	mov	r2, sp
 800c21c:	f000 f848 	bl	800c2b0 <_fstat_r>
 800c220:	2800      	cmp	r0, #0
 800c222:	dbec      	blt.n	800c1fe <__swhatbuf_r+0x12>
 800c224:	9901      	ldr	r1, [sp, #4]
 800c226:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c22a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c22e:	4259      	negs	r1, r3
 800c230:	4159      	adcs	r1, r3
 800c232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c236:	e7eb      	b.n	800c210 <__swhatbuf_r+0x24>

0800c238 <__smakebuf_r>:
 800c238:	898b      	ldrh	r3, [r1, #12]
 800c23a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c23c:	079d      	lsls	r5, r3, #30
 800c23e:	4606      	mov	r6, r0
 800c240:	460c      	mov	r4, r1
 800c242:	d507      	bpl.n	800c254 <__smakebuf_r+0x1c>
 800c244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	2301      	movs	r3, #1
 800c24e:	6163      	str	r3, [r4, #20]
 800c250:	b002      	add	sp, #8
 800c252:	bd70      	pop	{r4, r5, r6, pc}
 800c254:	ab01      	add	r3, sp, #4
 800c256:	466a      	mov	r2, sp
 800c258:	f7ff ffc8 	bl	800c1ec <__swhatbuf_r>
 800c25c:	9900      	ldr	r1, [sp, #0]
 800c25e:	4605      	mov	r5, r0
 800c260:	4630      	mov	r0, r6
 800c262:	f7fe fecb 	bl	800affc <_malloc_r>
 800c266:	b948      	cbnz	r0, 800c27c <__smakebuf_r+0x44>
 800c268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26c:	059a      	lsls	r2, r3, #22
 800c26e:	d4ef      	bmi.n	800c250 <__smakebuf_r+0x18>
 800c270:	f023 0303 	bic.w	r3, r3, #3
 800c274:	f043 0302 	orr.w	r3, r3, #2
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	e7e3      	b.n	800c244 <__smakebuf_r+0xc>
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	6020      	str	r0, [r4, #0]
 800c280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	9b00      	ldr	r3, [sp, #0]
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	9b01      	ldr	r3, [sp, #4]
 800c28c:	6120      	str	r0, [r4, #16]
 800c28e:	b15b      	cbz	r3, 800c2a8 <__smakebuf_r+0x70>
 800c290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c294:	4630      	mov	r0, r6
 800c296:	f000 f81d 	bl	800c2d4 <_isatty_r>
 800c29a:	b128      	cbz	r0, 800c2a8 <__smakebuf_r+0x70>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	f043 0301 	orr.w	r3, r3, #1
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	431d      	orrs	r5, r3
 800c2ac:	81a5      	strh	r5, [r4, #12]
 800c2ae:	e7cf      	b.n	800c250 <__smakebuf_r+0x18>

0800c2b0 <_fstat_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4d07      	ldr	r5, [pc, #28]	; (800c2d0 <_fstat_r+0x20>)
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	4608      	mov	r0, r1
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	602b      	str	r3, [r5, #0]
 800c2be:	f7f7 ff2d 	bl	800411c <_fstat>
 800c2c2:	1c43      	adds	r3, r0, #1
 800c2c4:	d102      	bne.n	800c2cc <_fstat_r+0x1c>
 800c2c6:	682b      	ldr	r3, [r5, #0]
 800c2c8:	b103      	cbz	r3, 800c2cc <_fstat_r+0x1c>
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	bd38      	pop	{r3, r4, r5, pc}
 800c2ce:	bf00      	nop
 800c2d0:	2000209c 	.word	0x2000209c

0800c2d4 <_isatty_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d06      	ldr	r5, [pc, #24]	; (800c2f0 <_isatty_r+0x1c>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	602b      	str	r3, [r5, #0]
 800c2e0:	f7f7 ff22 	bl	8004128 <_isatty>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	d102      	bne.n	800c2ee <_isatty_r+0x1a>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	b103      	cbz	r3, 800c2ee <_isatty_r+0x1a>
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	2000209c 	.word	0x2000209c

0800c2f4 <fmod>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	ed2d 8b02 	vpush	{d8}
 800c2fa:	ec57 6b10 	vmov	r6, r7, d0
 800c2fe:	ec55 4b11 	vmov	r4, r5, d1
 800c302:	f000 f92b 	bl	800c55c <__ieee754_fmod>
 800c306:	4622      	mov	r2, r4
 800c308:	462b      	mov	r3, r5
 800c30a:	4630      	mov	r0, r6
 800c30c:	4639      	mov	r1, r7
 800c30e:	eeb0 8a40 	vmov.f32	s16, s0
 800c312:	eef0 8a60 	vmov.f32	s17, s1
 800c316:	f7f4 fc31 	bl	8000b7c <__aeabi_dcmpun>
 800c31a:	b990      	cbnz	r0, 800c342 <fmod+0x4e>
 800c31c:	2200      	movs	r2, #0
 800c31e:	2300      	movs	r3, #0
 800c320:	4620      	mov	r0, r4
 800c322:	4629      	mov	r1, r5
 800c324:	f7f4 fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 800c328:	b158      	cbz	r0, 800c342 <fmod+0x4e>
 800c32a:	f7fd ff3b 	bl	800a1a4 <__errno>
 800c32e:	2321      	movs	r3, #33	; 0x21
 800c330:	6003      	str	r3, [r0, #0]
 800c332:	2200      	movs	r2, #0
 800c334:	2300      	movs	r3, #0
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	f7f4 faaf 	bl	800089c <__aeabi_ddiv>
 800c33e:	ec41 0b18 	vmov	d8, r0, r1
 800c342:	eeb0 0a48 	vmov.f32	s0, s16
 800c346:	eef0 0a68 	vmov.f32	s1, s17
 800c34a:	ecbd 8b02 	vpop	{d8}
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c350 <sqrt>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	ed2d 8b02 	vpush	{d8}
 800c356:	ec55 4b10 	vmov	r4, r5, d0
 800c35a:	f000 f825 	bl	800c3a8 <__ieee754_sqrt>
 800c35e:	4622      	mov	r2, r4
 800c360:	462b      	mov	r3, r5
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	eeb0 8a40 	vmov.f32	s16, s0
 800c36a:	eef0 8a60 	vmov.f32	s17, s1
 800c36e:	f7f4 fc05 	bl	8000b7c <__aeabi_dcmpun>
 800c372:	b990      	cbnz	r0, 800c39a <sqrt+0x4a>
 800c374:	2200      	movs	r2, #0
 800c376:	2300      	movs	r3, #0
 800c378:	4620      	mov	r0, r4
 800c37a:	4629      	mov	r1, r5
 800c37c:	f7f4 fbd6 	bl	8000b2c <__aeabi_dcmplt>
 800c380:	b158      	cbz	r0, 800c39a <sqrt+0x4a>
 800c382:	f7fd ff0f 	bl	800a1a4 <__errno>
 800c386:	2321      	movs	r3, #33	; 0x21
 800c388:	6003      	str	r3, [r0, #0]
 800c38a:	2200      	movs	r2, #0
 800c38c:	2300      	movs	r3, #0
 800c38e:	4610      	mov	r0, r2
 800c390:	4619      	mov	r1, r3
 800c392:	f7f4 fa83 	bl	800089c <__aeabi_ddiv>
 800c396:	ec41 0b18 	vmov	d8, r0, r1
 800c39a:	eeb0 0a48 	vmov.f32	s0, s16
 800c39e:	eef0 0a68 	vmov.f32	s1, s17
 800c3a2:	ecbd 8b02 	vpop	{d8}
 800c3a6:	bd38      	pop	{r3, r4, r5, pc}

0800c3a8 <__ieee754_sqrt>:
 800c3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	ec55 4b10 	vmov	r4, r5, d0
 800c3b0:	4e67      	ldr	r6, [pc, #412]	; (800c550 <__ieee754_sqrt+0x1a8>)
 800c3b2:	43ae      	bics	r6, r5
 800c3b4:	ee10 0a10 	vmov	r0, s0
 800c3b8:	ee10 2a10 	vmov	r2, s0
 800c3bc:	4629      	mov	r1, r5
 800c3be:	462b      	mov	r3, r5
 800c3c0:	d10d      	bne.n	800c3de <__ieee754_sqrt+0x36>
 800c3c2:	f7f4 f941 	bl	8000648 <__aeabi_dmul>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7f3 ff85 	bl	80002dc <__adddf3>
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	ec45 4b10 	vmov	d0, r4, r5
 800c3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	dc0b      	bgt.n	800c3fa <__ieee754_sqrt+0x52>
 800c3e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3e6:	4326      	orrs	r6, r4
 800c3e8:	d0f5      	beq.n	800c3d6 <__ieee754_sqrt+0x2e>
 800c3ea:	b135      	cbz	r5, 800c3fa <__ieee754_sqrt+0x52>
 800c3ec:	f7f3 ff74 	bl	80002d8 <__aeabi_dsub>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	f7f4 fa52 	bl	800089c <__aeabi_ddiv>
 800c3f8:	e7eb      	b.n	800c3d2 <__ieee754_sqrt+0x2a>
 800c3fa:	1509      	asrs	r1, r1, #20
 800c3fc:	f000 808d 	beq.w	800c51a <__ieee754_sqrt+0x172>
 800c400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c404:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c40c:	07c9      	lsls	r1, r1, #31
 800c40e:	bf5c      	itt	pl
 800c410:	005b      	lslpl	r3, r3, #1
 800c412:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c41a:	bf58      	it	pl
 800c41c:	0052      	lslpl	r2, r2, #1
 800c41e:	2500      	movs	r5, #0
 800c420:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c424:	1076      	asrs	r6, r6, #1
 800c426:	0052      	lsls	r2, r2, #1
 800c428:	f04f 0e16 	mov.w	lr, #22
 800c42c:	46ac      	mov	ip, r5
 800c42e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c432:	eb0c 0001 	add.w	r0, ip, r1
 800c436:	4298      	cmp	r0, r3
 800c438:	bfde      	ittt	le
 800c43a:	1a1b      	suble	r3, r3, r0
 800c43c:	eb00 0c01 	addle.w	ip, r0, r1
 800c440:	186d      	addle	r5, r5, r1
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	f1be 0e01 	subs.w	lr, lr, #1
 800c448:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c44c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c450:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c454:	d1ed      	bne.n	800c432 <__ieee754_sqrt+0x8a>
 800c456:	4674      	mov	r4, lr
 800c458:	2720      	movs	r7, #32
 800c45a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c45e:	4563      	cmp	r3, ip
 800c460:	eb01 000e 	add.w	r0, r1, lr
 800c464:	dc02      	bgt.n	800c46c <__ieee754_sqrt+0xc4>
 800c466:	d113      	bne.n	800c490 <__ieee754_sqrt+0xe8>
 800c468:	4290      	cmp	r0, r2
 800c46a:	d811      	bhi.n	800c490 <__ieee754_sqrt+0xe8>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	eb00 0e01 	add.w	lr, r0, r1
 800c472:	da57      	bge.n	800c524 <__ieee754_sqrt+0x17c>
 800c474:	f1be 0f00 	cmp.w	lr, #0
 800c478:	db54      	blt.n	800c524 <__ieee754_sqrt+0x17c>
 800c47a:	f10c 0801 	add.w	r8, ip, #1
 800c47e:	eba3 030c 	sub.w	r3, r3, ip
 800c482:	4290      	cmp	r0, r2
 800c484:	bf88      	it	hi
 800c486:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c48a:	1a12      	subs	r2, r2, r0
 800c48c:	440c      	add	r4, r1
 800c48e:	46c4      	mov	ip, r8
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	3f01      	subs	r7, #1
 800c494:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c498:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c49c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c4a0:	d1dd      	bne.n	800c45e <__ieee754_sqrt+0xb6>
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	d01b      	beq.n	800c4de <__ieee754_sqrt+0x136>
 800c4a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c554 <__ieee754_sqrt+0x1ac>
 800c4aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c558 <__ieee754_sqrt+0x1b0>
 800c4ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4b6:	f7f3 ff0f 	bl	80002d8 <__aeabi_dsub>
 800c4ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	f7f4 fb3b 	bl	8000b40 <__aeabi_dcmple>
 800c4ca:	b140      	cbz	r0, 800c4de <__ieee754_sqrt+0x136>
 800c4cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c4d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4d8:	d126      	bne.n	800c528 <__ieee754_sqrt+0x180>
 800c4da:	3501      	adds	r5, #1
 800c4dc:	463c      	mov	r4, r7
 800c4de:	106a      	asrs	r2, r5, #1
 800c4e0:	0863      	lsrs	r3, r4, #1
 800c4e2:	07e9      	lsls	r1, r5, #31
 800c4e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c4e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c4ec:	bf48      	it	mi
 800c4ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c4f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c4f6:	461c      	mov	r4, r3
 800c4f8:	e76d      	b.n	800c3d6 <__ieee754_sqrt+0x2e>
 800c4fa:	0ad3      	lsrs	r3, r2, #11
 800c4fc:	3815      	subs	r0, #21
 800c4fe:	0552      	lsls	r2, r2, #21
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0fa      	beq.n	800c4fa <__ieee754_sqrt+0x152>
 800c504:	02dc      	lsls	r4, r3, #11
 800c506:	d50a      	bpl.n	800c51e <__ieee754_sqrt+0x176>
 800c508:	f1c1 0420 	rsb	r4, r1, #32
 800c50c:	fa22 f404 	lsr.w	r4, r2, r4
 800c510:	1e4d      	subs	r5, r1, #1
 800c512:	408a      	lsls	r2, r1
 800c514:	4323      	orrs	r3, r4
 800c516:	1b41      	subs	r1, r0, r5
 800c518:	e772      	b.n	800c400 <__ieee754_sqrt+0x58>
 800c51a:	4608      	mov	r0, r1
 800c51c:	e7f0      	b.n	800c500 <__ieee754_sqrt+0x158>
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	3101      	adds	r1, #1
 800c522:	e7ef      	b.n	800c504 <__ieee754_sqrt+0x15c>
 800c524:	46e0      	mov	r8, ip
 800c526:	e7aa      	b.n	800c47e <__ieee754_sqrt+0xd6>
 800c528:	f7f3 fed8 	bl	80002dc <__adddf3>
 800c52c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	4640      	mov	r0, r8
 800c536:	4649      	mov	r1, r9
 800c538:	f7f4 faf8 	bl	8000b2c <__aeabi_dcmplt>
 800c53c:	b120      	cbz	r0, 800c548 <__ieee754_sqrt+0x1a0>
 800c53e:	1ca0      	adds	r0, r4, #2
 800c540:	bf08      	it	eq
 800c542:	3501      	addeq	r5, #1
 800c544:	3402      	adds	r4, #2
 800c546:	e7ca      	b.n	800c4de <__ieee754_sqrt+0x136>
 800c548:	3401      	adds	r4, #1
 800c54a:	f024 0401 	bic.w	r4, r4, #1
 800c54e:	e7c6      	b.n	800c4de <__ieee754_sqrt+0x136>
 800c550:	7ff00000 	.word	0x7ff00000
 800c554:	20000728 	.word	0x20000728
 800c558:	20000730 	.word	0x20000730

0800c55c <__ieee754_fmod>:
 800c55c:	ec53 2b11 	vmov	r2, r3, d1
 800c560:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800c564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c568:	ea5c 0402 	orrs.w	r4, ip, r2
 800c56c:	ec51 0b10 	vmov	r0, r1, d0
 800c570:	ee11 7a10 	vmov	r7, s2
 800c574:	ee11 ea10 	vmov	lr, s2
 800c578:	461e      	mov	r6, r3
 800c57a:	d00c      	beq.n	800c596 <__ieee754_fmod+0x3a>
 800c57c:	4c78      	ldr	r4, [pc, #480]	; (800c760 <__ieee754_fmod+0x204>)
 800c57e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c582:	45a0      	cmp	r8, r4
 800c584:	4689      	mov	r9, r1
 800c586:	dc06      	bgt.n	800c596 <__ieee754_fmod+0x3a>
 800c588:	4254      	negs	r4, r2
 800c58a:	4d76      	ldr	r5, [pc, #472]	; (800c764 <__ieee754_fmod+0x208>)
 800c58c:	4314      	orrs	r4, r2
 800c58e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800c592:	42ac      	cmp	r4, r5
 800c594:	d909      	bls.n	800c5aa <__ieee754_fmod+0x4e>
 800c596:	f7f4 f857 	bl	8000648 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	f7f4 f97d 	bl	800089c <__aeabi_ddiv>
 800c5a2:	ec41 0b10 	vmov	d0, r0, r1
 800c5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5aa:	45e0      	cmp	r8, ip
 800c5ac:	ee10 aa10 	vmov	sl, s0
 800c5b0:	ee10 4a10 	vmov	r4, s0
 800c5b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c5b8:	dc09      	bgt.n	800c5ce <__ieee754_fmod+0x72>
 800c5ba:	dbf2      	blt.n	800c5a2 <__ieee754_fmod+0x46>
 800c5bc:	4290      	cmp	r0, r2
 800c5be:	d3f0      	bcc.n	800c5a2 <__ieee754_fmod+0x46>
 800c5c0:	d105      	bne.n	800c5ce <__ieee754_fmod+0x72>
 800c5c2:	4b69      	ldr	r3, [pc, #420]	; (800c768 <__ieee754_fmod+0x20c>)
 800c5c4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c5c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5cc:	e7e9      	b.n	800c5a2 <__ieee754_fmod+0x46>
 800c5ce:	4a65      	ldr	r2, [pc, #404]	; (800c764 <__ieee754_fmod+0x208>)
 800c5d0:	ea19 0f02 	tst.w	r9, r2
 800c5d4:	d148      	bne.n	800c668 <__ieee754_fmod+0x10c>
 800c5d6:	f1b8 0f00 	cmp.w	r8, #0
 800c5da:	d13d      	bne.n	800c658 <__ieee754_fmod+0xfc>
 800c5dc:	4963      	ldr	r1, [pc, #396]	; (800c76c <__ieee754_fmod+0x210>)
 800c5de:	4653      	mov	r3, sl
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dc36      	bgt.n	800c652 <__ieee754_fmod+0xf6>
 800c5e4:	4216      	tst	r6, r2
 800c5e6:	d14f      	bne.n	800c688 <__ieee754_fmod+0x12c>
 800c5e8:	f1bc 0f00 	cmp.w	ip, #0
 800c5ec:	d144      	bne.n	800c678 <__ieee754_fmod+0x11c>
 800c5ee:	4a5f      	ldr	r2, [pc, #380]	; (800c76c <__ieee754_fmod+0x210>)
 800c5f0:	463b      	mov	r3, r7
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dc3d      	bgt.n	800c672 <__ieee754_fmod+0x116>
 800c5f6:	485e      	ldr	r0, [pc, #376]	; (800c770 <__ieee754_fmod+0x214>)
 800c5f8:	4281      	cmp	r1, r0
 800c5fa:	db4a      	blt.n	800c692 <__ieee754_fmod+0x136>
 800c5fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c604:	485a      	ldr	r0, [pc, #360]	; (800c770 <__ieee754_fmod+0x214>)
 800c606:	4282      	cmp	r2, r0
 800c608:	db57      	blt.n	800c6ba <__ieee754_fmod+0x15e>
 800c60a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c60e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800c612:	1a89      	subs	r1, r1, r2
 800c614:	1b98      	subs	r0, r3, r6
 800c616:	eba4 070e 	sub.w	r7, r4, lr
 800c61a:	2900      	cmp	r1, #0
 800c61c:	d162      	bne.n	800c6e4 <__ieee754_fmod+0x188>
 800c61e:	4574      	cmp	r4, lr
 800c620:	bf38      	it	cc
 800c622:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c626:	2800      	cmp	r0, #0
 800c628:	bfa4      	itt	ge
 800c62a:	463c      	movge	r4, r7
 800c62c:	4603      	movge	r3, r0
 800c62e:	ea53 0104 	orrs.w	r1, r3, r4
 800c632:	d0c6      	beq.n	800c5c2 <__ieee754_fmod+0x66>
 800c634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c638:	db69      	blt.n	800c70e <__ieee754_fmod+0x1b2>
 800c63a:	494d      	ldr	r1, [pc, #308]	; (800c770 <__ieee754_fmod+0x214>)
 800c63c:	428a      	cmp	r2, r1
 800c63e:	db6c      	blt.n	800c71a <__ieee754_fmod+0x1be>
 800c640:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c644:	432b      	orrs	r3, r5
 800c646:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800c64a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c64e:	4620      	mov	r0, r4
 800c650:	e7a7      	b.n	800c5a2 <__ieee754_fmod+0x46>
 800c652:	3901      	subs	r1, #1
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	e7c3      	b.n	800c5e0 <__ieee754_fmod+0x84>
 800c658:	4945      	ldr	r1, [pc, #276]	; (800c770 <__ieee754_fmod+0x214>)
 800c65a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c65e:	2b00      	cmp	r3, #0
 800c660:	ddc0      	ble.n	800c5e4 <__ieee754_fmod+0x88>
 800c662:	3901      	subs	r1, #1
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	e7fa      	b.n	800c65e <__ieee754_fmod+0x102>
 800c668:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c66c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c670:	e7b8      	b.n	800c5e4 <__ieee754_fmod+0x88>
 800c672:	3a01      	subs	r2, #1
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	e7bc      	b.n	800c5f2 <__ieee754_fmod+0x96>
 800c678:	4a3d      	ldr	r2, [pc, #244]	; (800c770 <__ieee754_fmod+0x214>)
 800c67a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800c67e:	2b00      	cmp	r3, #0
 800c680:	ddb9      	ble.n	800c5f6 <__ieee754_fmod+0x9a>
 800c682:	3a01      	subs	r2, #1
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	e7fa      	b.n	800c67e <__ieee754_fmod+0x122>
 800c688:	ea4f 522c 	mov.w	r2, ip, asr #20
 800c68c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c690:	e7b1      	b.n	800c5f6 <__ieee754_fmod+0x9a>
 800c692:	1a40      	subs	r0, r0, r1
 800c694:	281f      	cmp	r0, #31
 800c696:	dc0a      	bgt.n	800c6ae <__ieee754_fmod+0x152>
 800c698:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800c69c:	fa08 f800 	lsl.w	r8, r8, r0
 800c6a0:	fa2a f303 	lsr.w	r3, sl, r3
 800c6a4:	ea43 0308 	orr.w	r3, r3, r8
 800c6a8:	fa0a f400 	lsl.w	r4, sl, r0
 800c6ac:	e7aa      	b.n	800c604 <__ieee754_fmod+0xa8>
 800c6ae:	4b31      	ldr	r3, [pc, #196]	; (800c774 <__ieee754_fmod+0x218>)
 800c6b0:	1a5b      	subs	r3, r3, r1
 800c6b2:	fa0a f303 	lsl.w	r3, sl, r3
 800c6b6:	2400      	movs	r4, #0
 800c6b8:	e7a4      	b.n	800c604 <__ieee754_fmod+0xa8>
 800c6ba:	1a80      	subs	r0, r0, r2
 800c6bc:	281f      	cmp	r0, #31
 800c6be:	dc0a      	bgt.n	800c6d6 <__ieee754_fmod+0x17a>
 800c6c0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800c6c4:	fa0c fc00 	lsl.w	ip, ip, r0
 800c6c8:	fa27 f606 	lsr.w	r6, r7, r6
 800c6cc:	ea46 060c 	orr.w	r6, r6, ip
 800c6d0:	fa07 fe00 	lsl.w	lr, r7, r0
 800c6d4:	e79d      	b.n	800c612 <__ieee754_fmod+0xb6>
 800c6d6:	4e27      	ldr	r6, [pc, #156]	; (800c774 <__ieee754_fmod+0x218>)
 800c6d8:	1ab6      	subs	r6, r6, r2
 800c6da:	fa07 f606 	lsl.w	r6, r7, r6
 800c6de:	f04f 0e00 	mov.w	lr, #0
 800c6e2:	e796      	b.n	800c612 <__ieee754_fmod+0xb6>
 800c6e4:	4574      	cmp	r4, lr
 800c6e6:	bf38      	it	cc
 800c6e8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	da05      	bge.n	800c6fc <__ieee754_fmod+0x1a0>
 800c6f0:	0fe0      	lsrs	r0, r4, #31
 800c6f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c6f6:	0064      	lsls	r4, r4, #1
 800c6f8:	3901      	subs	r1, #1
 800c6fa:	e78b      	b.n	800c614 <__ieee754_fmod+0xb8>
 800c6fc:	ea50 0307 	orrs.w	r3, r0, r7
 800c700:	f43f af5f 	beq.w	800c5c2 <__ieee754_fmod+0x66>
 800c704:	0ffb      	lsrs	r3, r7, #31
 800c706:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c70a:	007c      	lsls	r4, r7, #1
 800c70c:	e7f4      	b.n	800c6f8 <__ieee754_fmod+0x19c>
 800c70e:	0fe1      	lsrs	r1, r4, #31
 800c710:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c714:	0064      	lsls	r4, r4, #1
 800c716:	3a01      	subs	r2, #1
 800c718:	e78c      	b.n	800c634 <__ieee754_fmod+0xd8>
 800c71a:	1a89      	subs	r1, r1, r2
 800c71c:	2914      	cmp	r1, #20
 800c71e:	dc0a      	bgt.n	800c736 <__ieee754_fmod+0x1da>
 800c720:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c724:	fa03 f202 	lsl.w	r2, r3, r2
 800c728:	40cc      	lsrs	r4, r1
 800c72a:	4322      	orrs	r2, r4
 800c72c:	410b      	asrs	r3, r1
 800c72e:	ea43 0105 	orr.w	r1, r3, r5
 800c732:	4610      	mov	r0, r2
 800c734:	e735      	b.n	800c5a2 <__ieee754_fmod+0x46>
 800c736:	291f      	cmp	r1, #31
 800c738:	dc07      	bgt.n	800c74a <__ieee754_fmod+0x1ee>
 800c73a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800c73e:	40cc      	lsrs	r4, r1
 800c740:	fa03 f202 	lsl.w	r2, r3, r2
 800c744:	4322      	orrs	r2, r4
 800c746:	462b      	mov	r3, r5
 800c748:	e7f1      	b.n	800c72e <__ieee754_fmod+0x1d2>
 800c74a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800c74e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c752:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800c756:	32e2      	adds	r2, #226	; 0xe2
 800c758:	fa43 f202 	asr.w	r2, r3, r2
 800c75c:	e7f3      	b.n	800c746 <__ieee754_fmod+0x1ea>
 800c75e:	bf00      	nop
 800c760:	7fefffff 	.word	0x7fefffff
 800c764:	7ff00000 	.word	0x7ff00000
 800c768:	0800cce0 	.word	0x0800cce0
 800c76c:	fffffbed 	.word	0xfffffbed
 800c770:	fffffc02 	.word	0xfffffc02
 800c774:	fffffbe2 	.word	0xfffffbe2

0800c778 <_init>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	bf00      	nop
 800c77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77e:	bc08      	pop	{r3}
 800c780:	469e      	mov	lr, r3
 800c782:	4770      	bx	lr

0800c784 <_fini>:
 800c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c786:	bf00      	nop
 800c788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78a:	bc08      	pop	{r3}
 800c78c:	469e      	mov	lr, r3
 800c78e:	4770      	bx	lr
