
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d114  0800d114  0001d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d4  0800d1d4  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800d1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20000150  0800d32c  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800d32c  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   000254da  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e48  00000000  00000000  0004569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0004a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d8  00000000  00000000  0004c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255d3  00000000  00000000  0004d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029e51  00000000  00000000  00072f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c9e  00000000  00000000  0009cda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081e4  00000000  00000000  00185a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000150 	.word	0x20000150
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d0fc 	.word	0x0800d0fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000154 	.word	0x20000154
 800021c:	0800d0fc 	.word	0x0800d0fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <Update_FIR_filter+0x84>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <Update_FIR_filter+0x88>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp;
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e016      	b.n	8000618 <Update_FIR_filter+0x4c>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <Update_FIR_filter+0x8c>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	ed93 7a00 	vldr	s14, [r3]
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <Update_FIR_filter+0x88>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000606:	ed97 7a03 	vldr	s14, [r7, #12]
 800060a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b09      	cmp	r3, #9
 800061c:	dde5      	ble.n	80005ea <Update_FIR_filter+0x1e>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <Update_FIR_filter+0x84>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d806      	bhi.n	8000634 <Update_FIR_filter+0x68>
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <Update_FIR_filter+0x84>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <Update_FIR_filter+0x84>)
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e002      	b.n	800063a <Update_FIR_filter+0x6e>
	else FIR_index = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <Update_FIR_filter+0x84>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	return temp;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200001a8 	.word	0x200001a8
 8000654:	200001ac 	.word	0x200001ac
 8000658:	20000004 	.word	0x20000004

0800065c <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <Current_IRQ+0x34>)
 800066a:	f007 f991 	bl	8007990 <HAL_GPIO_WritePin>
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d008      	beq.n	8000686 <Current_IRQ+0x2a>
 8000674:	2210      	movs	r2, #16
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <Current_IRQ+0x38>)
 800067a:	f00c f8ef 	bl	800c85c <memcpy>
    else return;
    Current_Callback_flag = 1;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <Current_IRQ+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
 8000684:	e000      	b.n	8000688 <Current_IRQ+0x2c>
    else return;
 8000686:	bf00      	nop
}
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	48000800 	.word	0x48000800
 8000694:	2000017c 	.word	0x2000017c
 8000698:	2000016c 	.word	0x2000016c

0800069c <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 80006a4:	2208      	movs	r2, #8
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <Voltage_Temp_IRQ+0x1c>)
 80006aa:	f00c f8d7 	bl	800c85c <memcpy>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000018c 	.word	0x2000018c

080006bc <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80006c4:	2214      	movs	r2, #20
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <Encoders_IRQ+0x1c>)
 80006ca:	f00c f8c7 	bl	800c85c <memcpy>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000194 	.word	0x20000194

080006dc <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006e4:	220c      	movs	r2, #12
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <Can_RX_Status_IRQ+0x1c>)
 80006ea:	f00c f8b7 	bl	800c85c <memcpy>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200001d4 	.word	0x200001d4

080006fc <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	edd3 7a05 	vldr	s15, [r3, #20]
 800070e:	ed97 7a00 	vldr	s14, [r7]
 8000712:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	da09      	bge.n	8000730 <check_value+0x34>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000722:	ed97 7a00 	vldr	s14, [r7]
 8000726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072e:	d801      	bhi.n	8000734 <check_value+0x38>
 8000730:	2302      	movs	r3, #2
 8000732:	e016      	b.n	8000762 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	edd3 7a04 	vldr	s15, [r3, #16]
 800073a:	ed97 7a00 	vldr	s14, [r7]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	da09      	bge.n	800075c <check_value+0x60>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	edd3 7a01 	vldr	s15, [r3, #4]
 800074e:	ed97 7a00 	vldr	s14, [r7]
 8000752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d801      	bhi.n	8000760 <check_value+0x64>
 800075c:	2301      	movs	r3, #1
 800075e:	e000      	b.n	8000762 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <Limit>:
float Limit(CAN_LIMITS* ptr, float value){
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	ed87 0a00 	vstr	s0, [r7]
	if(value > ptr->max)return ptr->max;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000780:	ed97 7a00 	vldr	s14, [r7]
 8000784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	dd02      	ble.n	8000794 <Limit+0x26>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	e00d      	b.n	80007b0 <Limit+0x42>
	if(value < ptr->min)return ptr->min;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	ed97 7a00 	vldr	s14, [r7]
 800079e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a6:	d502      	bpl.n	80007ae <Limit+0x40>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	e000      	b.n	80007b0 <Limit+0x42>
	return value;
 80007ae:	683b      	ldr	r3, [r7, #0]
}
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <BLDC_main>:

//------------------------MAIN-------------------------
void BLDC_main(void){
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b096      	sub	sp, #88	; 0x58
 80007c8:	af02      	add	r7, sp, #8
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 80007ca:	2128      	movs	r1, #40	; 0x28
 80007cc:	4888      	ldr	r0, [pc, #544]	; (80009f0 <BLDC_main+0x22c>)
 80007ce:	f001 f809 	bl	80017e4 <SetSampleTime>
//	SetTunings(&Current_PID, 0.005f, 10.0f, 0.0f, 1); //alva
	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
 80007d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007d6:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80009f4 <BLDC_main+0x230>
 80007da:	eddf 0a87 	vldr	s1, [pc, #540]	; 80009f8 <BLDC_main+0x234>
 80007de:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80009fc <BLDC_main+0x238>
 80007e2:	4883      	ldr	r0, [pc, #524]	; (80009f0 <BLDC_main+0x22c>)
 80007e4:	f000 ff44 	bl	8001670 <SetTunings>
	SetOutputLimits(&Current_PID, 0, 1499);
 80007e8:	eddf 0a85 	vldr	s1, [pc, #532]	; 8000a00 <BLDC_main+0x23c>
 80007ec:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80009f4 <BLDC_main+0x230>
 80007f0:	487f      	ldr	r0, [pc, #508]	; (80009f0 <BLDC_main+0x22c>)
 80007f2:	f001 f82b 	bl	800184c <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 80007f6:	2100      	movs	r1, #0
 80007f8:	487d      	ldr	r0, [pc, #500]	; (80009f0 <BLDC_main+0x22c>)
 80007fa:	f001 f8d7 	bl	80019ac <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 80007fe:	2101      	movs	r1, #1
 8000800:	487b      	ldr	r0, [pc, #492]	; (80009f0 <BLDC_main+0x22c>)
 8000802:	f001 f87f 	bl	8001904 <SetMode>
	Initialize(&Current_PID);
 8000806:	487a      	ldr	r0, [pc, #488]	; (80009f0 <BLDC_main+0x22c>)
 8000808:	f001 f89e 	bl	8001948 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 800080c:	2164      	movs	r1, #100	; 0x64
 800080e:	487d      	ldr	r0, [pc, #500]	; (8000a04 <BLDC_main+0x240>)
 8000810:	f000 ffe8 	bl	80017e4 <SetSampleTime>
	SetTunings(&Velocity_PID, 1.0f, 0.1f, 0.0f, 1);
 8000814:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000818:	ed9f 1a76 	vldr	s2, [pc, #472]	; 80009f4 <BLDC_main+0x230>
 800081c:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8000a08 <BLDC_main+0x244>
 8000820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000824:	4877      	ldr	r0, [pc, #476]	; (8000a04 <BLDC_main+0x240>)
 8000826:	f000 ff23 	bl	8001670 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 10);
 800082a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800082e:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80009f4 <BLDC_main+0x230>
 8000832:	4874      	ldr	r0, [pc, #464]	; (8000a04 <BLDC_main+0x240>)
 8000834:	f001 f80a 	bl	800184c <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 8000838:	2100      	movs	r1, #0
 800083a:	4872      	ldr	r0, [pc, #456]	; (8000a04 <BLDC_main+0x240>)
 800083c:	f001 f8b6 	bl	80019ac <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 8000840:	2101      	movs	r1, #1
 8000842:	4870      	ldr	r0, [pc, #448]	; (8000a04 <BLDC_main+0x240>)
 8000844:	f001 f85e 	bl	8001904 <SetMode>
	Initialize(&Velocity_PID);
 8000848:	486e      	ldr	r0, [pc, #440]	; (8000a04 <BLDC_main+0x240>)
 800084a:	f001 f87d 	bl	8001948 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	486e      	ldr	r0, [pc, #440]	; (8000a0c <BLDC_main+0x248>)
 8000852:	f000 ffc7 	bl	80017e4 <SetSampleTime>
	SetTunings(&Angle_PID, 1.0f, 0.0f, 0.0f, 1);
 8000856:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800085a:	ed9f 1a66 	vldr	s2, [pc, #408]	; 80009f4 <BLDC_main+0x230>
 800085e:	eddf 0a65 	vldr	s1, [pc, #404]	; 80009f4 <BLDC_main+0x230>
 8000862:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000866:	4869      	ldr	r0, [pc, #420]	; (8000a0c <BLDC_main+0x248>)
 8000868:	f000 ff02 	bl	8001670 <SetTunings>
	SetOutputLimits(&Angle_PID, 0, 10);
 800086c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000870:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80009f4 <BLDC_main+0x230>
 8000874:	4865      	ldr	r0, [pc, #404]	; (8000a0c <BLDC_main+0x248>)
 8000876:	f000 ffe9 	bl	800184c <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 800087a:	2100      	movs	r1, #0
 800087c:	4863      	ldr	r0, [pc, #396]	; (8000a0c <BLDC_main+0x248>)
 800087e:	f001 f895 	bl	80019ac <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8000882:	2101      	movs	r1, #1
 8000884:	4861      	ldr	r0, [pc, #388]	; (8000a0c <BLDC_main+0x248>)
 8000886:	f001 f83d 	bl	8001904 <SetMode>
	Initialize(&Angle_PID);
 800088a:	4860      	ldr	r0, [pc, #384]	; (8000a0c <BLDC_main+0x248>)
 800088c:	f001 f85c 	bl	8001948 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8000890:	485f      	ldr	r0, [pc, #380]	; (8000a10 <BLDC_main+0x24c>)
 8000892:	f000 fd67 	bl	8001364 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8000896:	485f      	ldr	r0, [pc, #380]	; (8000a14 <BLDC_main+0x250>)
 8000898:	f001 faac 	bl	8001df4 <current_init>

	//calibrate DC current offset
	HAL_Delay(100); //let thing settle before starting
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f003 f947 	bl	8003b30 <HAL_Delay>

	uint16_t current_offset_averaging = 100;
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile int32_t current_offset = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (current_offset_averaging){
 80008ac:	e011      	b.n	80008d2 <BLDC_main+0x10e>
		while(!Current_Callback_flag);
 80008ae:	bf00      	nop
 80008b0:	4b59      	ldr	r3, [pc, #356]	; (8000a18 <BLDC_main+0x254>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d0fb      	beq.n	80008b0 <BLDC_main+0xec>
		Current_Callback_flag = 0;
 80008b8:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <BLDC_main+0x254>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 80008be:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <BLDC_main+0x258>)
 80008c0:	68da      	ldr	r2, [r3, #12]
 80008c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008c4:	4413      	add	r3, r2
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		current_offset_averaging--;
 80008c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80008cc:	3b01      	subs	r3, #1
 80008ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (current_offset_averaging){
 80008d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1e9      	bne.n	80008ae <BLDC_main+0xea>
	}
	current_offset = current_offset/100;
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <BLDC_main+0x25c>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1152      	asrs	r2, r2, #5
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80008ea:	484e      	ldr	r0, [pc, #312]	; (8000a24 <BLDC_main+0x260>)
 80008ec:	f001 fa9c 	bl	8001e28 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80008f0:	4a4d      	ldr	r2, [pc, #308]	; (8000a28 <BLDC_main+0x264>)
 80008f2:	2136      	movs	r1, #54	; 0x36
 80008f4:	484d      	ldr	r0, [pc, #308]	; (8000a2c <BLDC_main+0x268>)
 80008f6:	f001 fd0b 	bl	8002310 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80008fa:	484c      	ldr	r0, [pc, #304]	; (8000a2c <BLDC_main+0x268>)
 80008fc:	f001 fcec 	bl	80022d8 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 8000900:	f000 fb74 	bl	8000fec <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 8000904:	2064      	movs	r0, #100	; 0x64
 8000906:	f003 f913 	bl	8003b30 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 800090a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]


	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	483a      	ldr	r0, [pc, #232]	; (8000a30 <BLDC_main+0x26c>)
 8000948:	f007 f822 	bl	8007990 <HAL_GPIO_WritePin>
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 800094c:	bf00      	nop
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <BLDC_main+0x254>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0fb      	beq.n	800094e <BLDC_main+0x18a>

		Current_Callback_flag = 0;
 8000956:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <BLDC_main+0x254>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <BLDC_main+0x258>)
 800095e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <BLDC_main+0x270>)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000972:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <BLDC_main+0x274>)
 8000978:	f107 0410 	add.w	r4, r7, #16
 800097c:	461d      	mov	r5, r3
 800097e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	682b      	ldr	r3, [r5, #0]
 8000984:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <BLDC_main+0x278>)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	ca07      	ldmia	r2, {r0, r1, r2}
 800098c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 8000990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8000998:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <BLDC_main+0x1ea>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d103      	bne.n	80009ae <BLDC_main+0x1ea>
 80009a6:	2302      	movs	r3, #2
 80009a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80009ac:	e054      	b.n	8000a58 <BLDC_main+0x294>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 80009ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d106      	bne.n	80009c4 <BLDC_main+0x200>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b05      	cmp	r3, #5
 80009ba:	d103      	bne.n	80009c4 <BLDC_main+0x200>
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <BLDC_main+0x27c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e049      	b.n	8000a58 <BLDC_main+0x294>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START)Status = BLDC_RUNNING;
 80009c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <BLDC_main+0x216>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d103      	bne.n	80009da <BLDC_main+0x216>
 80009d2:	2303      	movs	r3, #3
 80009d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80009d8:	e03e      	b.n	8000a58 <BLDC_main+0x294>

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK)Status = BLDC_STOPPED_WITH_BREAK;
 80009da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d130      	bne.n	8000a44 <BLDC_main+0x280>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d12d      	bne.n	8000a44 <BLDC_main+0x280>
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80009ee:	e033      	b.n	8000a58 <BLDC_main+0x294>
 80009f0:	20000220 	.word	0x20000220
 80009f4:	00000000 	.word	0x00000000
 80009f8:	42200000 	.word	0x42200000
 80009fc:	3ba3d70a 	.word	0x3ba3d70a
 8000a00:	44bb6000 	.word	0x44bb6000
 8000a04:	20000260 	.word	0x20000260
 8000a08:	3dcccccd 	.word	0x3dcccccd
 8000a0c:	200002a0 	.word	0x200002a0
 8000a10:	080006bd 	.word	0x080006bd
 8000a14:	0800065d 	.word	0x0800065d
 8000a18:	2000016c 	.word	0x2000016c
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	51eb851f 	.word	0x51eb851f
 8000a24:	0800069d 	.word	0x0800069d
 8000a28:	080006dd 	.word	0x080006dd
 8000a2c:	2000078c 	.word	0x2000078c
 8000a30:	48000800 	.word	0x48000800
 8000a34:	2000018c 	.word	0x2000018c
 8000a38:	20000194 	.word	0x20000194
 8000a3c:	200001d4 	.word	0x200001d4
 8000a40:	20000178 	.word	0x20000178
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d105      	bne.n	8000a58 <BLDC_main+0x294>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d102      	bne.n	8000a58 <BLDC_main+0x294>
 8000a52:	2301      	movs	r3, #1
 8000a54:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

		//time keepers
		timing_CAN_feedback++;
 8000a58:	4bc4      	ldr	r3, [pc, #784]	; (8000d6c <BLDC_main+0x5a8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4ac3      	ldr	r2, [pc, #780]	; (8000d6c <BLDC_main+0x5a8>)
 8000a60:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a62:	4bc3      	ldr	r3, [pc, #780]	; (8000d70 <BLDC_main+0x5ac>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4ac1      	ldr	r2, [pc, #772]	; (8000d70 <BLDC_main+0x5ac>)
 8000a6a:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7e:	48bd      	ldr	r0, [pc, #756]	; (8000d74 <BLDC_main+0x5b0>)
 8000a80:	f7ff fe3c 	bl	80006fc <check_value>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 0; //warning
 8000a8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a94:	4313      	orrs	r3, r2
 8000a96:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a9c:	105b      	asrs	r3, r3, #1
 8000a9e:	f003 0201 	and.w	r2, r3, #1
 8000aa2:	4bb5      	ldr	r3, [pc, #724]	; (8000d78 <BLDC_main+0x5b4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	4ab3      	ldr	r2, [pc, #716]	; (8000d78 <BLDC_main+0x5b4>)
 8000aaa:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aba:	48b0      	ldr	r0, [pc, #704]	; (8000d7c <BLDC_main+0x5b8>)
 8000abc:	f7ff fe1e 	bl	80006fc <check_value>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 1; //warning
 8000ac6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000ad6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ada:	f003 0202 	and.w	r2, r3, #2
 8000ade:	4ba6      	ldr	r3, [pc, #664]	; (8000d78 <BLDC_main+0x5b4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	4aa4      	ldr	r2, [pc, #656]	; (8000d78 <BLDC_main+0x5b4>)
 8000ae6:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af2:	eeb0 0a67 	vmov.f32	s0, s15
 8000af6:	48a2      	ldr	r0, [pc, #648]	; (8000d80 <BLDC_main+0x5bc>)
 8000af8:	f7ff fe00 	bl	80006fc <check_value>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 2; //warning
 8000b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b16:	105b      	asrs	r3, r3, #1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	f003 0204 	and.w	r2, r3, #4
 8000b1e:	4b96      	ldr	r3, [pc, #600]	; (8000d78 <BLDC_main+0x5b4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	4a94      	ldr	r2, [pc, #592]	; (8000d78 <BLDC_main+0x5b4>)
 8000b26:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	ee07 3a90 	vmov	s15, r3
 8000b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b32:	eeb0 0a67 	vmov.f32	s0, s15
 8000b36:	4893      	ldr	r0, [pc, #588]	; (8000d84 <BLDC_main+0x5c0>)
 8000b38:	f7ff fde0 	bl	80006fc <check_value>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 3; //warning
 8000b42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b56:	105b      	asrs	r3, r3, #1
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	f003 0208 	and.w	r2, r3, #8
 8000b5e:	4b86      	ldr	r3, [pc, #536]	; (8000d78 <BLDC_main+0x5b4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	4a84      	ldr	r2, [pc, #528]	; (8000d78 <BLDC_main+0x5b4>)
 8000b66:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000b68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b72:	eeb0 0a67 	vmov.f32	s0, s15
 8000b76:	4884      	ldr	r0, [pc, #528]	; (8000d88 <BLDC_main+0x5c4>)
 8000b78:	f7ff fdc0 	bl	80006fc <check_value>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 4; //warning
 8000b82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000b92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b96:	105b      	asrs	r3, r3, #1
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	f003 0210 	and.w	r2, r3, #16
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <BLDC_main+0x5b4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	4a74      	ldr	r2, [pc, #464]	; (8000d78 <BLDC_main+0x5b4>)
 8000ba6:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb6:	4875      	ldr	r0, [pc, #468]	; (8000d8c <BLDC_main+0x5c8>)
 8000bb8:	f7ff fda0 	bl	80006fc <check_value>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 5; //warning
 8000bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bc6:	015b      	lsls	r3, r3, #5
 8000bc8:	f003 0320 	and.w	r3, r3, #32
 8000bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000bd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bd6:	105b      	asrs	r3, r3, #1
 8000bd8:	015b      	lsls	r3, r3, #5
 8000bda:	f003 0220 	and.w	r2, r3, #32
 8000bde:	4b66      	ldr	r3, [pc, #408]	; (8000d78 <BLDC_main+0x5b4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	4a64      	ldr	r2, [pc, #400]	; (8000d78 <BLDC_main+0x5b4>)
 8000be6:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000be8:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf8:	4865      	ldr	r0, [pc, #404]	; (8000d90 <BLDC_main+0x5cc>)
 8000bfa:	f7ff fd7f 	bl	80006fc <check_value>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 6; //warning
 8000c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c08:	019b      	lsls	r3, r3, #6
 8000c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c10:	4313      	orrs	r3, r2
 8000c12:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c18:	105b      	asrs	r3, r3, #1
 8000c1a:	019b      	lsls	r3, r3, #6
 8000c1c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c20:	4b55      	ldr	r3, [pc, #340]	; (8000d78 <BLDC_main+0x5b4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	4a54      	ldr	r2, [pc, #336]	; (8000d78 <BLDC_main+0x5b4>)
 8000c28:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c36:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3a:	4855      	ldr	r0, [pc, #340]	; (8000d90 <BLDC_main+0x5cc>)
 8000c3c:	f7ff fd5e 	bl	80006fc <check_value>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		warning |= (Limit_callback&1)      << 7; //warning
 8000c46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c50:	4313      	orrs	r3, r2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c58:	105b      	asrs	r3, r3, #1
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <BLDC_main+0x5b4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <BLDC_main+0x5b4>)
 8000c66:	6013      	str	r3, [r2, #0]

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	eeb0 0a67 	vmov.f32	s0, s15
 8000c76:	f7ff fca9 	bl	80005cc <Update_FIR_filter>
 8000c7a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Calculated_pos;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c88:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <BLDC_main+0x5d0>)
 8000c8a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)IRQ_Encoders_BUFF.Velocity;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <BLDC_main+0x5d4>)
 8000c9a:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	; (8000d9c <BLDC_main+0x5d8>)
 8000ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca2:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = Limit(&LIMIT_Encoder_2, IRQ_STATUS_BUFF.setpoint);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cae:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb2:	4833      	ldr	r0, [pc, #204]	; (8000d80 <BLDC_main+0x5bc>)
 8000cb4:	f7ff fd5b 	bl	800076e <Limit>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <BLDC_main+0x5d0>)
 8000cbe:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8000cc2:	4834      	ldr	r0, [pc, #208]	; (8000d94 <BLDC_main+0x5d0>)
 8000cc4:	f000 fc22 	bl	800150c <Compute>

		Velocity_PID.Setpoint =  Limit(&LIMIT_Velocity, Angle_PID.Output);
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <BLDC_main+0x5d0>)
 8000cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cce:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd2:	482c      	ldr	r0, [pc, #176]	; (8000d84 <BLDC_main+0x5c0>)
 8000cd4:	f7ff fd4b 	bl	800076e <Limit>
 8000cd8:	eef0 7a40 	vmov.f32	s15, s0
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <BLDC_main+0x5d4>)
 8000cde:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Velocity_PID);
 8000ce2:	482d      	ldr	r0, [pc, #180]	; (8000d98 <BLDC_main+0x5d4>)
 8000ce4:	f000 fc12 	bl	800150c <Compute>
		int8_t direction;
		#ifndef ZERO_GRAVITY
		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)Current_PID.Setpoint = 1000; //Limit(&LIMIT_Current, Velocity_PID.Output);
		else Current_PID.Setpoint = -10;
		#else
		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf6:	ee17 1a90 	vmov	r1, s15
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <BLDC_main+0x5dc>)
 8000cfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000d00:	119a      	asrs	r2, r3, #6
 8000d02:	17cb      	asrs	r3, r1, #31
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	f000 f93b 	bl	8000f8c <fast_sin_2>
 8000d16:	eeb0 7a40 	vmov.f32	s14, s0
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <BLDC_main+0x5e0>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <BLDC_main+0x5d8>)
 8000d26:	edc3 7a02 	vstr	s15, [r3, #8]
		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <BLDC_main+0x5e4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d903      	bls.n	8000d3a <BLDC_main+0x576>
 8000d32:	23ff      	movs	r3, #255	; 0xff
 8000d34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000d38:	e002      	b.n	8000d40 <BLDC_main+0x57c>
		else direction = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		#endif

		Compute(&Current_PID);
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <BLDC_main+0x5d8>)
 8000d42:	f000 fbe3 	bl	800150c <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <BLDC_main+0x5b4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <BLDC_main+0x596>
			Status = BLDC_STOPPED_WITH_BREAK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			shutoff();
 8000d54:	f000 fad2 	bl	80012fc <shutoff>
 8000d58:	e082      	b.n	8000e60 <BLDC_main+0x69c>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000d5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d124      	bne.n	8000dac <BLDC_main+0x5e8>
			shutoff();
 8000d62:	f000 facb 	bl	80012fc <shutoff>
			shutdown();
 8000d66:	f000 fadb 	bl	8001320 <shutdown>
 8000d6a:	e079      	b.n	8000e60 <BLDC_main+0x69c>
 8000d6c:	20000170 	.word	0x20000170
 8000d70:	20000174 	.word	0x20000174
 8000d74:	200000bc 	.word	0x200000bc
 8000d78:	20000178 	.word	0x20000178
 8000d7c:	2000002c 	.word	0x2000002c
 8000d80:	20000044 	.word	0x20000044
 8000d84:	200000d4 	.word	0x200000d4
 8000d88:	20000074 	.word	0x20000074
 8000d8c:	2000005c 	.word	0x2000005c
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	200002a0 	.word	0x200002a0
 8000d98:	20000260 	.word	0x20000260
 8000d9c:	20000220 	.word	0x20000220
 8000da0:	10624dd3 	.word	0x10624dd3
 8000da4:	20000000 	.word	0x20000000
 8000da8:	0002bf20 	.word	0x0002bf20
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000dac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d113      	bne.n	8000ddc <BLDC_main+0x618>
			//shutoff();
			inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
 8000db4:	4b6a      	ldr	r3, [pc, #424]	; (8000f60 <BLDC_main+0x79c>)
 8000db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	4869      	ldr	r0, [pc, #420]	; (8000f64 <BLDC_main+0x7a0>)
 8000dc0:	f7ff fcd5 	bl	800076e <Limit>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dcc:	ee17 3a90 	vmov	r3, s15
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f955 	bl	8001084 <inverter>
 8000dda:	e041      	b.n	8000e60 <BLDC_main+0x69c>
		}
		else if (Status == BLDC_RUNNING){
 8000ddc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d136      	bne.n	8000e52 <BLDC_main+0x68e>
			inverter((((((int32_t)((int32_t)IRQ_Encoders_BUFF.Encoder1_pos)-offset)%deg_pr_pole)*360)/deg_pr_pole+(direction*90)), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000dea:	3b30      	subs	r3, #48	; 0x30
 8000dec:	4a5e      	ldr	r2, [pc, #376]	; (8000f68 <BLDC_main+0x7a4>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1451      	asrs	r1, r2, #17
 8000df4:	17da      	asrs	r2, r3, #31
 8000df6:	1a8a      	subs	r2, r1, r2
 8000df8:	495c      	ldr	r1, [pc, #368]	; (8000f6c <BLDC_main+0x7a8>)
 8000dfa:	fb01 f202 	mul.w	r2, r1, r2
 8000dfe:	1a9a      	subs	r2, r3, r2
 8000e00:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <BLDC_main+0x7ac>)
 8000e02:	fb83 1302 	smull	r1, r3, r3, r2
 8000e06:	1219      	asrs	r1, r3, #8
 8000e08:	17d3      	asrs	r3, r2, #31
 8000e0a:	1acb      	subs	r3, r1, r3
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	0049      	lsls	r1, r1, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	0109      	lsls	r1, r1, #4
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b21c      	sxth	r4, r3
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <BLDC_main+0x79c>)
 8000e2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e30:	eeb0 0a67 	vmov.f32	s0, s15
 8000e34:	484b      	ldr	r0, [pc, #300]	; (8000f64 <BLDC_main+0x7a0>)
 8000e36:	f7ff fc9a 	bl	800076e <Limit>
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 f91a 	bl	8001084 <inverter>
 8000e50:	e006      	b.n	8000e60 <BLDC_main+0x69c>
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000e52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d102      	bne.n	8000e60 <BLDC_main+0x69c>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <BLDC_main+0x7b0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b95      	cmp	r3, #149	; 0x95
 8000e66:	d94d      	bls.n	8000f04 <BLDC_main+0x740>
			timing_CAN_feedback = 0;
 8000e68:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <BLDC_main+0x7b0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000e6e:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <BLDC_main+0x7b4>)
 8000e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e72:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000e74:	4b41      	ldr	r3, [pc, #260]	; (8000f7c <BLDC_main+0x7b8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a3f      	ldr	r2, [pc, #252]	; (8000f78 <BLDC_main+0x7b4>)
 8000e7a:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a3e      	ldr	r2, [pc, #248]	; (8000f78 <BLDC_main+0x7b4>)
 8000e80:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000e82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e86:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <BLDC_main+0x7b4>)
 8000e88:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <BLDC_main+0x7b4>)
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	4a38      	ldr	r2, [pc, #224]	; (8000f78 <BLDC_main+0x7b4>)
 8000e96:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9a:	4a37      	ldr	r2, [pc, #220]	; (8000f78 <BLDC_main+0x7b4>)
 8000e9c:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea0:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <BLDC_main+0x7b4>)
 8000ea2:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000ea4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <BLDC_main+0x7b4>)
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	4a32      	ldr	r2, [pc, #200]	; (8000f78 <BLDC_main+0x7b4>)
 8000eb0:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8000eb2:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <BLDC_main+0x7b4>)
 8000eba:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8000ebc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <BLDC_main+0x7b4>)
 8000ec4:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4a2b      	ldr	r2, [pc, #172]	; (8000f78 <BLDC_main+0x7b4>)
 8000eca:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <BLDC_main+0x7b4>)
 8000ed0:	6153      	str	r3, [r2, #20]
			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <BLDC_main+0x7b4>)
 8000ed6:	6193      	str	r3, [r2, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <BLDC_main+0x7b4>)
 8000edc:	61d3      	str	r3, [r2, #28]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8000ede:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <BLDC_main+0x7b4>)
 8000ee0:	f240 4136 	movw	r1, #1078	; 0x436
 8000ee4:	4826      	ldr	r0, [pc, #152]	; (8000f80 <BLDC_main+0x7bc>)
 8000ee6:	f001 fa4f 	bl	8002388 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <BLDC_main+0x7b4>)
 8000eec:	6919      	ldr	r1, [r3, #16]
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <BLDC_main+0x7b4>)
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <BLDC_main+0x7b4>)
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <BLDC_main+0x7b4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4603      	mov	r3, r0
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <BLDC_main+0x7c0>)
 8000f00:	f000 fd62 	bl	80019c8 <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <BLDC_main+0x7b8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <BLDC_main+0x758>
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f006 fd3b 	bl	8007990 <HAL_GPIO_WritePin>
 8000f1a:	e006      	b.n	8000f2a <BLDC_main+0x766>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f006 fd33 	bl	8007990 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8000f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <BLDC_main+0x778>
 8000f30:	2201      	movs	r2, #1
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4814      	ldr	r0, [pc, #80]	; (8000f88 <BLDC_main+0x7c4>)
 8000f36:	f006 fd2b 	bl	8007990 <HAL_GPIO_WritePin>
 8000f3a:	e004      	b.n	8000f46 <BLDC_main+0x782>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <BLDC_main+0x7c4>)
 8000f42:	f006 fd25 	bl	8007990 <HAL_GPIO_WritePin>
		#endif
		#endif

		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
		dac_value(Current_PID.Output);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <BLDC_main+0x79c>)
 8000f48:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f50:	ee17 3a90 	vmov	r3, s15
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f9a0 	bl	800229c <dac_value>
	while(1){
 8000f5c:	e4f1      	b.n	8000942 <BLDC_main+0x17e>
 8000f5e:	bf00      	nop
 8000f60:	20000220 	.word	0x20000220
 8000f64:	200000a4 	.word	0x200000a4
 8000f68:	5d34edef 	.word	0x5d34edef
 8000f6c:	00057e40 	.word	0x00057e40
 8000f70:	10624dd3 	.word	0x10624dd3
 8000f74:	20000170 	.word	0x20000170
 8000f78:	200001e0 	.word	0x200001e0
 8000f7c:	20000178 	.word	0x20000178
 8000f80:	2000078c 	.word	0x2000078c
 8000f84:	0800d114 	.word	0x0800d114
 8000f88:	48000800 	.word	0x48000800

08000f8c <fast_sin_2>:
		#endif
	}
}


float fast_sin_2(float deg){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a01 	vstr	s0, [r7, #4]
	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa2:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000fe4 <fast_sin_2+0x58>
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fe4 <fast_sin_2+0x58>
 8000fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc6:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000fe8 <fast_sin_2+0x5c>
 8000fca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fd2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	43340000 	.word	0x43340000
 8000fe8:	471e3400 	.word	0x471e3400

08000fec <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <CTRL_init_PWM+0x8c>)
 8000ff4:	f008 fc46 	bl	8009884 <HAL_TIM_PWM_Start>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <CTRL_init_PWM+0x16>
 8000ffe:	f001 ff91 	bl	8002f24 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001002:	2100      	movs	r1, #0
 8001004:	481c      	ldr	r0, [pc, #112]	; (8001078 <CTRL_init_PWM+0x8c>)
 8001006:	f009 fdd1 	bl	800abac <HAL_TIMEx_PWMN_Start>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <CTRL_init_PWM+0x28>
 8001010:	f001 ff88 	bl	8002f24 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001014:	2104      	movs	r1, #4
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <CTRL_init_PWM+0x8c>)
 8001018:	f008 fc34 	bl	8009884 <HAL_TIM_PWM_Start>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <CTRL_init_PWM+0x3a>
 8001022:	f001 ff7f 	bl	8002f24 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001026:	2104      	movs	r1, #4
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <CTRL_init_PWM+0x8c>)
 800102a:	f009 fdbf 	bl	800abac <HAL_TIMEx_PWMN_Start>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <CTRL_init_PWM+0x4c>
 8001034:	f001 ff76 	bl	8002f24 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001038:	2108      	movs	r1, #8
 800103a:	480f      	ldr	r0, [pc, #60]	; (8001078 <CTRL_init_PWM+0x8c>)
 800103c:	f008 fc22 	bl	8009884 <HAL_TIM_PWM_Start>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <CTRL_init_PWM+0x5e>
 8001046:	f001 ff6d 	bl	8002f24 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 800104a:	2108      	movs	r1, #8
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <CTRL_init_PWM+0x8c>)
 800104e:	f009 fdad 	bl	800abac <HAL_TIMEx_PWMN_Start>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <CTRL_init_PWM+0x70>
 8001058:	f001 ff64 	bl	8002f24 <Error_Handler>

	TIM1->CCR1 = 0;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <CTRL_init_PWM+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <CTRL_init_PWM+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <CTRL_init_PWM+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <CTRL_init_PWM+0x94>)
 8001070:	f008 fb3c 	bl	80096ec <HAL_TIM_Base_Start_IT>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000a74 	.word	0x20000a74
 800107c:	40012c00 	.word	0x40012c00
 8001080:	20000ac0 	.word	0x20000ac0

08001084 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	4613      	mov	r3, r2
 8001092:	80bb      	strh	r3, [r7, #4]

	angle = angle%360;
 8001094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001098:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <inverter+0x260>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	441a      	add	r2, r3
 80010a0:	1211      	asrs	r1, r2, #8
 80010a2:	17da      	asrs	r2, r3, #31
 80010a4:	1a8a      	subs	r2, r1, r2
 80010a6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80010aa:	fb01 f202 	mul.w	r2, r1, r2
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 80010be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010c2:	4b89      	ldr	r3, [pc, #548]	; (80012e8 <inverter+0x264>)
 80010c4:	fb83 1302 	smull	r1, r3, r3, r2
 80010c8:	4413      	add	r3, r2
 80010ca:	1159      	asrs	r1, r3, #5
 80010cc:	17d3      	asrs	r3, r2, #31
 80010ce:	1ac9      	subs	r1, r1, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	1a5b      	subs	r3, r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b21b      	sxth	r3, r3
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80012ec <inverter+0x268>
 80010f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001102:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001106:	ed9f 6a79 	vldr	s12, [pc, #484]	; 80012ec <inverter+0x268>
 800110a:	edd7 7a04 	vldr	s15, [r7, #16]
 800110e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001112:	ed9f 6a77 	vldr	s12, [pc, #476]	; 80012f0 <inverter+0x26c>
 8001116:	ee76 7a67 	vsub.f32	s15, s12, s15
 800111a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800111e:	eddf 6a73 	vldr	s13, [pc, #460]	; 80012ec <inverter+0x268>
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800112a:	eddf 5a70 	vldr	s11, [pc, #448]	; 80012ec <inverter+0x268>
 800112e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001132:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001136:	eddf 5a6e 	vldr	s11, [pc, #440]	; 80012f0 <inverter+0x26c>
 800113a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800113e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001142:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80012f4 <inverter+0x270>
 8001146:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800114a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001156:	ee17 3a90 	vmov	r3, s15
 800115a:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	edd7 7a04 	vldr	s15, [r7, #16]
 800116a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800116e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001172:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80012f0 <inverter+0x26c>
 8001176:	edd7 7a04 	vldr	s15, [r7, #16]
 800117a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800117e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001182:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80012f0 <inverter+0x26c>
 8001186:	edd7 7a04 	vldr	s15, [r7, #16]
 800118a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800118e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001196:	eddf 6a57 	vldr	s13, [pc, #348]	; 80012f4 <inverter+0x270>
 800119a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800119e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80011b6:	3303      	adds	r3, #3
 80011b8:	89ba      	ldrh	r2, [r7, #12]
 80011ba:	1a9b      	subs	r3, r3, r2
 80011bc:	0fda      	lsrs	r2, r3, #31
 80011be:	4413      	add	r3, r2
 80011c0:	105b      	asrs	r3, r3, #1
 80011c2:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db10      	blt.n	80011ee <inverter+0x16a>
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	2b3b      	cmp	r3, #59	; 0x3b
 80011d2:	dc0c      	bgt.n	80011ee <inverter+0x16a>
		compare_M1 = T0;
 80011d4:	897b      	ldrh	r3, [r7, #10]
 80011d6:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 80011d8:	897a      	ldrh	r2, [r7, #10]
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80011e0:	897a      	ldrh	r2, [r7, #10]
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	441a      	add	r2, r3
 80011e6:	89bb      	ldrh	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e06a      	b.n	80012c4 <inverter+0x240>
		}
	else if(angle >= 60 && angle < 120){
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	2b3b      	cmp	r3, #59	; 0x3b
 80011f4:	dd10      	ble.n	8001218 <inverter+0x194>
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	2b77      	cmp	r3, #119	; 0x77
 80011fc:	dc0c      	bgt.n	8001218 <inverter+0x194>
		compare_M1 = T0;
 80011fe:	897b      	ldrh	r3, [r7, #10]
 8001200:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001202:	897a      	ldrh	r2, [r7, #10]
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	441a      	add	r2, r3
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 800120e:	897a      	ldrh	r2, [r7, #10]
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	4413      	add	r3, r2
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e055      	b.n	80012c4 <inverter+0x240>
		}
	else if(angle >= 120 && angle < 180){
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121c:	2b77      	cmp	r3, #119	; 0x77
 800121e:	dd10      	ble.n	8001242 <inverter+0x1be>
 8001220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001224:	2bb3      	cmp	r3, #179	; 0xb3
 8001226:	dc0c      	bgt.n	8001242 <inverter+0x1be>
		compare_M1 = T0+T2;
 8001228:	897a      	ldrh	r2, [r7, #10]
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001230:	897a      	ldrh	r2, [r7, #10]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	441a      	add	r2, r3
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e040      	b.n	80012c4 <inverter+0x240>
		}
	else if(angle >= 180 && angle < 240){
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2bb3      	cmp	r3, #179	; 0xb3
 8001248:	dd10      	ble.n	800126c <inverter+0x1e8>
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	2bef      	cmp	r3, #239	; 0xef
 8001250:	dc0c      	bgt.n	800126c <inverter+0x1e8>
		compare_M1 = T0+T1+T2;
 8001252:	897a      	ldrh	r2, [r7, #10]
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	441a      	add	r2, r3
 8001258:	89bb      	ldrh	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 800125e:	897a      	ldrh	r2, [r7, #10]
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	4413      	add	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001266:	897b      	ldrh	r3, [r7, #10]
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e02b      	b.n	80012c4 <inverter+0x240>
		}
	else if(angle >= 240 && angle < 300){
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2bef      	cmp	r3, #239	; 0xef
 8001272:	dd11      	ble.n	8001298 <inverter+0x214>
 8001274:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001278:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800127c:	da0c      	bge.n	8001298 <inverter+0x214>
		compare_M1 = T0+T1+T2;
 800127e:	897a      	ldrh	r2, [r7, #10]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	441a      	add	r2, r3
 8001284:	89bb      	ldrh	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 800128e:	897a      	ldrh	r2, [r7, #10]
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e015      	b.n	80012c4 <inverter+0x240>
		}
	else if(angle >= 300 && angle < 360){
 8001298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012a0:	db10      	blt.n	80012c4 <inverter+0x240>
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80012aa:	da0b      	bge.n	80012c4 <inverter+0x240>
		compare_M1 = T0+T1;
 80012ac:	897a      	ldrh	r2, [r7, #10]
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	4413      	add	r3, r2
 80012b2:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 80012b4:	897b      	ldrh	r3, [r7, #10]
 80012b6:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80012b8:	897a      	ldrh	r2, [r7, #10]
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	441a      	add	r2, r3
 80012be:	89bb      	ldrh	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
		}
	//PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <inverter+0x274>)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <inverter+0x274>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 80012d0:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <inverter+0x274>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	b60b60b7 	.word	0xb60b60b7
 80012e8:	88888889 	.word	0x88888889
 80012ec:	42700000 	.word	0x42700000
 80012f0:	43340000 	.word	0x43340000
 80012f4:	471e3400 	.word	0x471e3400
 80012f8:	40012c00 	.word	0x40012c00

080012fc <shutoff>:
void shutoff(void){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <shutoff+0x20>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <shutoff+0x20>)
 8001308:	2200      	movs	r2, #0
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <shutoff+0x20>)
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40012c00 	.word	0x40012c00

08001320 <shutdown>:
void shutdown(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001324:	2100      	movs	r1, #0
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <shutdown+0x40>)
 8001328:	f008 fbac 	bl	8009a84 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 800132c:	2100      	movs	r1, #0
 800132e:	480c      	ldr	r0, [pc, #48]	; (8001360 <shutdown+0x40>)
 8001330:	f009 fcf0 	bl	800ad14 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001334:	2104      	movs	r1, #4
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <shutdown+0x40>)
 8001338:	f008 fba4 	bl	8009a84 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 800133c:	2104      	movs	r1, #4
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <shutdown+0x40>)
 8001340:	f009 fce8 	bl	800ad14 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001344:	2108      	movs	r1, #8
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <shutdown+0x40>)
 8001348:	f008 fb9c 	bl	8009a84 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 800134c:	2108      	movs	r1, #8
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <shutdown+0x40>)
 8001350:	f009 fce0 	bl	800ad14 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <shutdown+0x40>)
 8001356:	f008 f9a2 	bl	800969e <HAL_TIM_Base_Stop>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000a74 	.word	0x20000a74

08001364 <ORBIS_init>:
 *  max 4MHz
 *
 *
 *
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <ORBIS_init+0x64>)
 8001372:	f006 fb0d 	bl	8007990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	2104      	movs	r1, #4
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <ORBIS_init+0x68>)
 800137c:	f006 fb08 	bl	8007990 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <ORBIS_init+0x6c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <ORBIS_init+0x70>)
 8001388:	2274      	movs	r2, #116	; 0x74
 800138a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <ORBIS_init+0x64>)
 8001392:	f006 fafd 	bl	8007990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2104      	movs	r1, #4
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <ORBIS_init+0x68>)
 800139c:	f006 faf8 	bl	8007990 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80013a0:	2305      	movs	r3, #5
 80013a2:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <ORBIS_init+0x74>)
 80013a4:	490b      	ldr	r1, [pc, #44]	; (80013d4 <ORBIS_init+0x70>)
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <ORBIS_init+0x78>)
 80013a8:	f007 fbd0 	bl	8008b4c <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80013ac:	2305      	movs	r3, #5
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <ORBIS_init+0x7c>)
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <ORBIS_init+0x80>)
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <ORBIS_init+0x84>)
 80013b4:	f007 fbca 	bl	8008b4c <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <ORBIS_init+0x88>)
 80013ba:	f008 f997 	bl	80096ec <HAL_TIM_Base_Start_IT>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000c00 	.word	0x48000c00
 80013d0:	20000300 	.word	0x20000300
 80013d4:	200002e0 	.word	0x200002e0
 80013d8:	200002e8 	.word	0x200002e8
 80013dc:	20000828 	.word	0x20000828
 80013e0:	200002f8 	.word	0x200002f8
 80013e4:	200002f0 	.word	0x200002f0
 80013e8:	2000088c 	.word	0x2000088c
 80013ec:	20000ac0 	.word	0x20000ac0

080013f0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_SPI_TxRxCpltCallback+0xa8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d121      	bne.n	8001444 <HAL_SPI_TxRxCpltCallback+0x54>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4825      	ldr	r0, [pc, #148]	; (800149c <HAL_SPI_TxRxCpltCallback+0xac>)
 8001406:	f006 fac3 	bl	8007990 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = 10;
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800140c:	220a      	movs	r2, #10
 800140e:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_temp_x10 = (SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001412:	78db      	ldrb	r3, [r3, #3]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001424:	821a      	strh	r2, [r3, #16]
		data_encoders.Encoder1_pos = (SPI1_rx_buff[1] << 6) | (SPI1_rx_buff[0] >> 2);
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	019b      	lsls	r3, r3, #6
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_SPI_TxRxCpltCallback+0xb4>)
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	0892      	lsrs	r2, r2, #2
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	4313      	orrs	r3, r2
 8001436:	461a      	mov	r2, r3
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800143a:	601a      	str	r2, [r3, #0]
		Encoders_IRQ_callback(&data_encoders);
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_SPI_TxRxCpltCallback+0xb8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001442:	4798      	blx	r3

	}
	if (hspi == &hspi3) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a19      	ldr	r2, [pc, #100]	; (80014ac <HAL_SPI_TxRxCpltCallback+0xbc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d121      	bne.n	8001490 <HAL_SPI_TxRxCpltCallback+0xa0>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800144c:	2201      	movs	r2, #1
 800144e:	2104      	movs	r1, #4
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <HAL_SPI_TxRxCpltCallback+0xc0>)
 8001452:	f006 fa9d 	bl	8007990 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = 10;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001458:	220a      	movs	r2, #10
 800145a:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001470:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[1] << 6) | (SPI3_rx_buff[0] >> 2);
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_SPI_TxRxCpltCallback+0xc4>)
 8001474:	785b      	ldrb	r3, [r3, #1]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_SPI_TxRxCpltCallback+0xc4>)
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	0892      	lsrs	r2, r2, #2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	461a      	mov	r2, r3
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8001486:	605a      	str	r2, [r3, #4]
		Encoders_IRQ_callback(&data_encoders);
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <HAL_SPI_TxRxCpltCallback+0xb8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800148e:	4798      	blx	r3
	}

}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000828 	.word	0x20000828
 800149c:	48000400 	.word	0x48000400
 80014a0:	20000304 	.word	0x20000304
 80014a4:	200002e8 	.word	0x200002e8
 80014a8:	20000300 	.word	0x20000300
 80014ac:	2000088c 	.word	0x2000088c
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	200002f8 	.word	0x200002f8

080014b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2140      	movs	r1, #64	; 0x40
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014c6:	f006 fa63 	bl	8007990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2104      	movs	r1, #4
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014d0:	f006 fa5e 	bl	8007990 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80014d4:	2305      	movs	r3, #5
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014d8:	4909      	ldr	r1, [pc, #36]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014dc:	f007 fb36 	bl	8008b4c <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80014e0:	2305      	movs	r3, #5
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014e8:	f007 fb30 	bl	8008b4c <HAL_SPI_TransmitReceive_DMA>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000c00 	.word	0x48000c00
 80014fc:	200002e8 	.word	0x200002e8
 8001500:	200002e0 	.word	0x200002e0
 8001504:	20000828 	.word	0x20000828
 8001508:	2000088c 	.word	0x2000088c

0800150c <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80a2 	beq.w	8001664 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	ed93 7a02 	vldr	s14, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	ed93 7a00 	vldr	s14, [r3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	ed93 7a03 	vldr	s14, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 6a06 	vldr	s13, [r3, #24]
 8001554:	edd7 7a03 	vldr	s15, [r7, #12]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <Compute+0x82>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	ed93 7a03 	vldr	s14, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800157c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	ed93 7a03 	vldr	s14, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800159a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	dd04      	ble.n	80015ae <Compute+0xa2>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	e00e      	b.n	80015cc <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80015ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c2:	d503      	bpl.n	80015cc <Compute+0xc0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <Compute+0xe0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a01 	vstr	s15, [r3, #4]
 80015ea:	e003      	b.n	80015f4 <Compute+0xe8>
	else val->Output = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	ed93 6a07 	vldr	s12, [r3, #28]
 8001606:	edd7 7a02 	vldr	s15, [r7, #8]
 800160a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800160e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	dd04      	ble.n	800163c <Compute+0x130>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	e00e      	b.n	800165a <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a08 	vldr	s15, [r3, #32]
 8001648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	d503      	bpl.n	800165a <Compute+0x14e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	e000      	b.n	8001666 <Compute+0x15a>
	if(!val->inAuto) return;
 8001664:	bf00      	nop
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6178      	str	r0, [r7, #20]
 8001678:	ed87 0a04 	vstr	s0, [r7, #16]
 800167c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001680:	ed87 1a02 	vstr	s2, [r7, #8]
 8001684:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001688:	edd7 7a04 	vldr	s15, [r7, #16]
 800168c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	f100 809b 	bmi.w	80017ce <SetTunings+0x15e>
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	f100 8093 	bmi.w	80017ce <SetTunings+0x15e>
 80016a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	f100 808b 	bmi.w	80017ce <SetTunings+0x15e>
 80016b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	f100 8083 	bmi.w	80017ce <SetTunings+0x15e>
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	dc79      	bgt.n	80017ce <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	bfcc      	ite	gt
 80016e8:	2301      	movgt	r3, #1
 80016ea:	2300      	movle	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80016f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	bf4c      	ite	mi
 8001708:	2301      	movmi	r3, #1
 800170a:	2300      	movpl	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001722:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80017dc <SetTunings+0x16c>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8001734:	ed97 7a03 	vldr	s14, [r7, #12]
 8001738:	edd7 7a07 	vldr	s15, [r7, #28]
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8001746:	edd7 6a02 	vldr	s13, [r7, #8]
 800174a:	ed97 7a07 	vldr	s14, [r7, #28]
 800174e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	2b01      	cmp	r3, #1
 800175e:	d11d      	bne.n	800179c <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	edd3 7a05 	vldr	s15, [r3, #20]
 8001766:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017e0 <SetTunings+0x170>
 800176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	edd3 7a06 	vldr	s15, [r3, #24]
 800177a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017e0 <SetTunings+0x170>
 800177e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	edd3 7a07 	vldr	s15, [r3, #28]
 800178e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80017e0 <SetTunings+0x170>
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	ed93 7a05 	vldr	s14, [r3, #20]
 80017a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 80017b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	edd3 7a05 	vldr	s15, [r3, #20]
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80017cc:	e000      	b.n	80017d0 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80017ce:	bf00      	nop
}
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	49742400 	.word	0x49742400
 80017e0:	00000000 	.word	0x00000000

080017e4 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dd25      	ble.n	8001840 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	ed93 7a06 	vldr	s14, [r3, #24]
 8001818:	edd7 7a03 	vldr	s15, [r7, #12]
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 6a07 	vldr	s13, [r3, #28]
 800182c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	ed87 0a02 	vstr	s0, [r7, #8]
 8001858:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 800185c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001860:	edd7 7a01 	vldr	s15, [r7, #4]
 8001864:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	dc44      	bgt.n	80018f8 <SetOutputLimits+0xac>
   val->outMin = Min;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	dd04      	ble.n	800189a <SetOutputLimits+0x4e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e00e      	b.n	80018b8 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	ed93 7a01 	vldr	s14, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80018a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d503      	bpl.n	80018b8 <SetOutputLimits+0x6c>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	dd04      	ble.n	80018d8 <SetOutputLimits+0x8c>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	e010      	b.n	80018fa <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	ed93 7a03 	vldr	s14, [r3, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d505      	bpl.n	80018fa <SetOutputLimits+0xae>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	e000      	b.n	80018fa <SetOutputLimits+0xae>
   if(Min > Max) return;
 80018f8:	bf00      	nop
}
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001924:	2a00      	cmp	r2, #0
 8001926:	bf0c      	ite	eq
 8001928:	2201      	moveq	r2, #1
 800192a:	2200      	movne	r2, #0
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	4293      	cmp	r3, r2
 8001930:	d102      	bne.n	8001938 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f808 	bl	8001948 <Initialize>
    }
    val->inAuto = newAuto;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <Initialize>:

void Initialize(PID_instance *val)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	ed93 7a03 	vldr	s14, [r3, #12]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800196c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	dd04      	ble.n	8001980 <Initialize+0x38>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 800197e:	e00f      	b.n	80019a0 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	ed93 7a03 	vldr	s14, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edd3 7a08 	vldr	s15, [r3, #32]
 800198c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d400      	bmi.n	8001998 <Initialize+0x50>
}
 8001996:	e003      	b.n	80019a0 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 80019c8:	b40f      	push	{r0, r1, r2, r3}
 80019ca:	b590      	push	{r4, r7, lr}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <PrintServerPrintf+0x44>)
 80019e0:	f00a fefa 	bl	800c7d8 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <PrintServerPrintf+0x48>)
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <PrintServerPrintf+0x44>)
 80019ea:	f7fe fc19 	bl	8000220 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4905      	ldr	r1, [pc, #20]	; (8001a0c <PrintServerPrintf+0x44>)
 80019f6:	4620      	mov	r0, r4
 80019f8:	f009 fbc8 	bl	800b18c <HAL_UART_Transmit_DMA>
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000318 	.word	0x20000318
 8001a10:	200000ec 	.word	0x200000ec

08001a14 <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b094      	sub	sp, #80	; 0x50
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <ADC_CAL_init+0x14>
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e1cd      	b.n	8001dc4 <ADC_CAL_init+0x3b0>

	//copy pointer
	adc_handle_CAL = hadc;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8001a2c:	217f      	movs	r1, #127	; 0x7f
 8001a2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a30:	f003 ffc8 	bl	80059c4 <HAL_ADCEx_Calibration_Start>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 8001a3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <ADC_CAL_init+0x34>
 8001a42:	f06f 0301 	mvn.w	r3, #1
 8001a46:	e1bd      	b.n	8001dc4 <ADC_CAL_init+0x3b0>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 8001a48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 8001a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	2220      	movs	r2, #32
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00a fec5 	bl	800c7f4 <memset>
	while(calibrating){
 8001a6a:	e19c      	b.n	8001da6 <ADC_CAL_init+0x392>
		sConfig.Channel = ADC_CHANNEL_0;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4619      	mov	r1, r3
 8001a76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a78:	f003 f950 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001a82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <ADC_CAL_init+0x7c>
 8001a8a:	f06f 0302 	mvn.w	r3, #2
 8001a8e:	e199      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001a90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a92:	f002 fc8b 	bl	80043ac <HAL_ADC_Start>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <ADC_CAL_init+0x96>
 8001aa4:	f06f 0302 	mvn.w	r3, #2
 8001aa8:	e18c      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001aaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ab0:	f002 fd6c 	bl	800458c <HAL_ADC_PollForConversion>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001aba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d102      	bne.n	8001ac8 <ADC_CAL_init+0xb4>
 8001ac2:	f06f 0303 	mvn.w	r3, #3
 8001ac6:	e17d      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <ADC_CAL_init+0xc2>
 8001ad0:	f06f 0304 	mvn.w	r3, #4
 8001ad4:	e176      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001ad6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ad8:	f002 fee4 	bl	80048a4 <HAL_ADC_GetValue>
 8001adc:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001ade:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ae0:	f002 fd20 	bl	8004524 <HAL_ADC_Stop>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001aea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <ADC_CAL_init+0xe4>
 8001af2:	f06f 0305 	mvn.w	r3, #5
 8001af6:	e165      	b.n	8001dc4 <ADC_CAL_init+0x3b0>

		sConfig.Channel = ADC_CHANNEL_1;
 8001af8:	4bb4      	ldr	r3, [pc, #720]	; (8001dcc <ADC_CAL_init+0x3b8>)
 8001afa:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	4619      	mov	r1, r3
 8001b02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b04:	f003 f90a 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001b0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <ADC_CAL_init+0x108>
 8001b16:	f06f 0302 	mvn.w	r3, #2
 8001b1a:	e153      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001b1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b1e:	f002 fc45 	bl	80043ac <HAL_ADC_Start>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <ADC_CAL_init+0x122>
 8001b30:	f06f 0302 	mvn.w	r3, #2
 8001b34:	e146      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b3a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b3c:	f002 fd26 	bl	800458c <HAL_ADC_PollForConversion>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001b46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d102      	bne.n	8001b54 <ADC_CAL_init+0x140>
 8001b4e:	f06f 0303 	mvn.w	r3, #3
 8001b52:	e137      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001b54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <ADC_CAL_init+0x14e>
 8001b5c:	f06f 0304 	mvn.w	r3, #4
 8001b60:	e130      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001b62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b64:	f002 fe9e 	bl	80048a4 <HAL_ADC_GetValue>
 8001b68:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001b6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b6c:	f002 fcda 	bl	8004524 <HAL_ADC_Stop>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001b76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <ADC_CAL_init+0x170>
 8001b7e:	f06f 0305 	mvn.w	r3, #5
 8001b82:	e11f      	b.n	8001dc4 <ADC_CAL_init+0x3b0>

		sConfig.Channel = ADC_CHANNEL_2;
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <ADC_CAL_init+0x3bc>)
 8001b86:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b90:	f003 f8c4 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001b9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <ADC_CAL_init+0x194>
 8001ba2:	f06f 0302 	mvn.w	r3, #2
 8001ba6:	e10d      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001ba8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001baa:	f002 fbff 	bl	80043ac <HAL_ADC_Start>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001bb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <ADC_CAL_init+0x1ae>
 8001bbc:	f06f 0302 	mvn.w	r3, #2
 8001bc0:	e100      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001bc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bc6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bc8:	f002 fce0 	bl	800458c <HAL_ADC_PollForConversion>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001bd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d102      	bne.n	8001be0 <ADC_CAL_init+0x1cc>
 8001bda:	f06f 0303 	mvn.w	r3, #3
 8001bde:	e0f1      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001be0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <ADC_CAL_init+0x1da>
 8001be8:	f06f 0304 	mvn.w	r3, #4
 8001bec:	e0ea      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001bee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bf0:	f002 fe58 	bl	80048a4 <HAL_ADC_GetValue>
 8001bf4:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001bf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001bf8:	f002 fc94 	bl	8004524 <HAL_ADC_Stop>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001c02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <ADC_CAL_init+0x1fc>
 8001c0a:	f06f 0305 	mvn.w	r3, #5
 8001c0e:	e0d9      	b.n	8001dc4 <ADC_CAL_init+0x3b0>

		sConfig.Channel = ADC_CHANNEL_3;
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <ADC_CAL_init+0x3c0>)
 8001c12:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c1c:	f003 f87e 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001c26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <ADC_CAL_init+0x220>
 8001c2e:	f06f 0302 	mvn.w	r3, #2
 8001c32:	e0c7      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001c34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c36:	f002 fbb9 	bl	80043ac <HAL_ADC_Start>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <ADC_CAL_init+0x23a>
 8001c48:	f06f 0302 	mvn.w	r3, #2
 8001c4c:	e0ba      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001c4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c54:	f002 fc9a 	bl	800458c <HAL_ADC_PollForConversion>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001c5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d102      	bne.n	8001c6c <ADC_CAL_init+0x258>
 8001c66:	f06f 0303 	mvn.w	r3, #3
 8001c6a:	e0ab      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <ADC_CAL_init+0x266>
 8001c74:	f06f 0304 	mvn.w	r3, #4
 8001c78:	e0a4      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001c7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c7c:	f002 fe12 	bl	80048a4 <HAL_ADC_GetValue>
 8001c80:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001c82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c84:	f002 fc4e 	bl	8004524 <HAL_ADC_Stop>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <ADC_CAL_init+0x288>
 8001c96:	f06f 0305 	mvn.w	r3, #5
 8001c9a:	e093      	b.n	8001dc4 <ADC_CAL_init+0x3b0>
		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <ADC_CAL_init+0x3c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <ADC_CAL_init+0x3c8>)
 8001cba:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <ADC_CAL_init+0x3c8>)
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	b212      	sxth	r2, r2
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <ADC_CAL_init+0x3cc>)
 8001ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd0:	1ad2      	subs	r2, r2, r3
 8001cd2:	0852      	lsrs	r2, r2, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	0adb      	lsrs	r3, r3, #11
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	011a      	lsls	r2, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <ADC_CAL_init+0x3d0>)
 8001ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cea:	1152      	asrs	r2, r2, #5
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	4a38      	ldr	r2, [pc, #224]	; (8001ddc <ADC_CAL_init+0x3c8>)
 8001cfc:	8812      	ldrh	r2, [r2, #0]
 8001cfe:	b212      	sxth	r2, r2
 8001d00:	fb03 f202 	mul.w	r2, r3, r2
 8001d04:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <ADC_CAL_init+0x3cc>)
 8001d06:	fba3 1302 	umull	r1, r3, r3, r2
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	0852      	lsrs	r2, r2, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	0adb      	lsrs	r3, r3, #11
 8001d12:	461a      	mov	r2, r3
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	011a      	lsls	r2, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <ADC_CAL_init+0x3d0>)
 8001d20:	fb82 1203 	smull	r1, r2, r2, r3
 8001d24:	1152      	asrs	r2, r2, #5
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	4413      	add	r3, r2
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 8001d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <ADC_CAL_init+0x3c8>)
 8001d36:	8812      	ldrh	r2, [r2, #0]
 8001d38:	b212      	sxth	r2, r2
 8001d3a:	fb03 f202 	mul.w	r2, r3, r2
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <ADC_CAL_init+0x3cc>)
 8001d40:	fba3 1302 	umull	r1, r3, r3, r2
 8001d44:	1ad2      	subs	r2, r2, r3
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	011a      	lsls	r2, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <ADC_CAL_init+0x3d0>)
 8001d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5e:	1152      	asrs	r2, r2, #5
 8001d60:	17db      	asrs	r3, r3, #31
 8001d62:	1ad2      	subs	r2, r2, r3
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
		calibrating--;
 8001d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 8001d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d114      	bne.n	8001da6 <ADC_CAL_init+0x392>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <ADC_CAL_init+0x3d4>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <ADC_CAL_init+0x3d8>)
 8001d88:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <ADC_CAL_init+0x3d4>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <ADC_CAL_init+0x3d8>)
 8001d96:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <ADC_CAL_init+0x3d4>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <ADC_CAL_init+0x3d8>)
 8001da4:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8001da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f47f ae5e 	bne.w	8001a6c <ADC_CAL_init+0x58>
	}



	//---------------DAC DEBUG-------------
	HAL_DAC_Init(&hdac1);
 8001db0:	480f      	ldr	r0, [pc, #60]	; (8001df0 <ADC_CAL_init+0x3dc>)
 8001db2:	f004 f84e 	bl	8005e52 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8001db6:	2100      	movs	r1, #0
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <ADC_CAL_init+0x3dc>)
 8001dba:	f004 f86c 	bl	8005e96 <HAL_DAC_Start>


	return VDDA; //success
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <ADC_CAL_init+0x3c8>)
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	b21b      	sxth	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3750      	adds	r7, #80	; 0x50
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	04300002 	.word	0x04300002
 8001dd0:	08600004 	.word	0x08600004
 8001dd4:	0c900008 	.word	0x0c900008
 8001dd8:	200000f0 	.word	0x200000f0
 8001ddc:	20000564 	.word	0x20000564
 8001de0:	00100101 	.word	0x00100101
 8001de4:	51eb851f 	.word	0x51eb851f
 8001de8:	10624dd3 	.word	0x10624dd3
 8001dec:	20000558 	.word	0x20000558
 8001df0:	20000778 	.word	0x20000778

08001df4 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 8001dfc:	4807      	ldr	r0, [pc, #28]	; (8001e1c <current_init+0x28>)
 8001dfe:	f7ff fe09 	bl	8001a14 <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <current_init+0x2c>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4906      	ldr	r1, [pc, #24]	; (8001e24 <current_init+0x30>)
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <current_init+0x28>)
 8001e0e:	f002 fc95 	bl	800473c <HAL_ADC_Start_DMA>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200005dc 	.word	0x200005dc
 8001e20:	20000568 	.word	0x20000568
 8001e24:	20000518 	.word	0x20000518

08001e28 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <voltage_temperature_init+0x20>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8001e36:	2208      	movs	r2, #8
 8001e38:	4904      	ldr	r1, [pc, #16]	; (8001e4c <voltage_temperature_init+0x24>)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <voltage_temperature_init+0x28>)
 8001e3c:	f002 fc7e 	bl	800473c <HAL_ADC_Start_DMA>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000057c 	.word	0x2000057c
 8001e4c:	20000538 	.word	0x20000538
 8001e50:	20000648 	.word	0x20000648

08001e54 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a78      	ldr	r2, [pc, #480]	; (8002040 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	f040 8093 	bne.w	8001f8c <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001e66:	4b77      	ldr	r3, [pc, #476]	; (8002044 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4b71      	ldr	r3, [pc, #452]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001e86:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8001e88:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001e90:	8812      	ldrh	r2, [r2, #0]
 8001e92:	b212      	sxth	r2, r2
 8001e94:	fb03 f202 	mul.w	r2, r3, r2
 8001e98:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e9e:	1ad2      	subs	r2, r2, r3
 8001ea0:	0852      	lsrs	r2, r2, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	0ada      	lsrs	r2, r3, #11
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	011a      	lsls	r2, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	095a      	lsrs	r2, r3, #5
 8001eb8:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	4a64      	ldr	r2, [pc, #400]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001eca:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8001ecc:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	b212      	sxth	r2, r2
 8001ed8:	fb03 f202 	mul.w	r2, r3, r2
 8001edc:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001ede:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	0852      	lsrs	r2, r2, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	0ada      	lsrs	r2, r3, #11
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	011a      	lsls	r2, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095a      	lsrs	r2, r3, #5
 8001efc:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	4a53      	ldr	r2, [pc, #332]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f0e:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8001f10:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	b212      	sxth	r2, r2
 8001f1c:	fb03 f202 	mul.w	r2, r3, r2
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001f22:	fba3 1302 	umull	r1, r3, r3, r2
 8001f26:	1ad2      	subs	r2, r2, r3
 8001f28:	0852      	lsrs	r2, r2, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	0ada      	lsrs	r2, r3, #11
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	011a      	lsls	r2, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	4a46      	ldr	r2, [pc, #280]	; (8002054 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	095a      	lsrs	r2, r3, #5
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	4a42      	ldr	r2, [pc, #264]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f52:	6093      	str	r3, [r2, #8]
		data.Current_DC = (uint32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8001f54:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f5c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfb8      	it	lt
 8001f68:	425b      	neglt	r3, r3
 8001f6a:	441a      	add	r2, r3
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bfb8      	it	lt
 8001f74:	425b      	neglt	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	0fda      	lsrs	r2, r3, #31
 8001f7a:	4413      	add	r3, r2
 8001f7c:	105b      	asrs	r3, r3, #1
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f82:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_ADC_ConvHalfCpltCallback+0x20c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4834      	ldr	r0, [pc, #208]	; (800205c <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001f8a:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a35      	ldr	r2, [pc, #212]	; (8002064 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d151      	bne.n	8002038 <HAL_ADC_ConvHalfCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	b212      	sxth	r2, r2
 8001fa0:	fb03 f202 	mul.w	r2, r3, r2
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8001faa:	1ad2      	subs	r2, r2, r3
 8001fac:	0852      	lsrs	r2, r2, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	0adb      	lsrs	r3, r3, #11
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001fb6:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	b212      	sxth	r2, r2
 8001fc4:	fb03 f202 	mul.w	r2, r3, r2
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001fca:	fba3 1302 	umull	r1, r3, r3, r2
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	0852      	lsrs	r2, r2, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	0adb      	lsrs	r3, r3, #11
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001fda:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001fe4:	8812      	ldrh	r2, [r2, #0]
 8001fe6:	b212      	sxth	r2, r2
 8001fe8:	fb03 f202 	mul.w	r2, r3, r2
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ffc:	1ad2      	subs	r2, r2, r3
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	4413      	add	r3, r2
 8002002:	0adb      	lsrs	r3, r3, #11
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8002006:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002010:	8812      	ldrh	r2, [r2, #0]
 8002012:	b212      	sxth	r2, r2
 8002014:	fb03 f202 	mul.w	r2, r3, r2
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0bdb      	lsrs	r3, r3, #15
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800202e:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8002036:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200005dc 	.word	0x200005dc
 8002044:	200000f0 	.word	0x200000f0
 8002048:	20000518 	.word	0x20000518
 800204c:	20000564 	.word	0x20000564
 8002050:	00100101 	.word	0x00100101
 8002054:	51eb851f 	.word	0x51eb851f
 8002058:	20000558 	.word	0x20000558
 800205c:	2000056c 	.word	0x2000056c
 8002060:	20000568 	.word	0x20000568
 8002064:	20000648 	.word	0x20000648
 8002068:	20000538 	.word	0x20000538
 800206c:	20000580 	.word	0x20000580
 8002070:	ccd99a67 	.word	0xccd99a67
 8002074:	2000057c 	.word	0x2000057c

08002078 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a78      	ldr	r2, [pc, #480]	; (8002264 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8002084:	4293      	cmp	r3, r2
 8002086:	f040 8093 	bne.w	80021b0 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800208a:	4b77      	ldr	r3, [pc, #476]	; (8002268 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	461a      	mov	r2, r3
 800209c:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b71      	ldr	r3, [pc, #452]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80020aa:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	4a6f      	ldr	r2, [pc, #444]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	b212      	sxth	r2, r2
 80020b8:	fb03 f202 	mul.w	r2, r3, r2
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80020be:	fba3 1302 	umull	r1, r3, r3, r2
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	0852      	lsrs	r2, r2, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	0ada      	lsrs	r2, r3, #11
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	011a      	lsls	r2, r3, #4
 80020d2:	4413      	add	r3, r2
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_ADC_ConvCpltCallback+0x200>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095a      	lsrs	r2, r3, #5
 80020dc:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_ADC_ConvCpltCallback+0x204>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	4a64      	ldr	r2, [pc, #400]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 80020ee:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80020f8:	8812      	ldrh	r2, [r2, #0]
 80020fa:	b212      	sxth	r2, r2
 80020fc:	fb03 f202 	mul.w	r2, r3, r2
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002102:	fba3 1302 	umull	r1, r3, r3, r2
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	0852      	lsrs	r2, r2, #1
 800210a:	4413      	add	r3, r2
 800210c:	0ada      	lsrs	r2, r3, #11
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	011a      	lsls	r2, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	4a57      	ldr	r2, [pc, #348]	; (8002278 <HAL_ADC_ConvCpltCallback+0x200>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095a      	lsrs	r2, r3, #5
 8002120:	4b56      	ldr	r3, [pc, #344]	; (800227c <HAL_ADC_ConvCpltCallback+0x204>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	461a      	mov	r2, r3
 8002128:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 8002132:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800213c:	8812      	ldrh	r2, [r2, #0]
 800213e:	b212      	sxth	r2, r2
 8002140:	fb03 f202 	mul.w	r2, r3, r2
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002146:	fba3 1302 	umull	r1, r3, r3, r2
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	0852      	lsrs	r2, r2, #1
 800214e:	4413      	add	r3, r2
 8002150:	0ada      	lsrs	r2, r3, #11
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	011a      	lsls	r2, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	4a46      	ldr	r2, [pc, #280]	; (8002278 <HAL_ADC_ConvCpltCallback+0x200>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095a      	lsrs	r2, r3, #5
 8002164:	4b45      	ldr	r3, [pc, #276]	; (800227c <HAL_ADC_ConvCpltCallback+0x204>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	461a      	mov	r2, r3
 800216c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	4a42      	ldr	r2, [pc, #264]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 8002176:	6093      	str	r3, [r2, #8]
		data.Current_DC = (uint32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002180:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002184:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	bfb8      	it	lt
 800218c:	425b      	neglt	r3, r3
 800218e:	441a      	add	r2, r3
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	bfb8      	it	lt
 8002198:	425b      	neglt	r3, r3
 800219a:	4413      	add	r3, r2
 800219c:	0fda      	lsrs	r2, r3, #31
 800219e:	4413      	add	r3, r2
 80021a0:	105b      	asrs	r3, r3, #1
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 80021a6:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_ADC_ConvCpltCallback+0x20c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4834      	ldr	r0, [pc, #208]	; (8002280 <HAL_ADC_ConvCpltCallback+0x208>)
 80021ae:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a35      	ldr	r2, [pc, #212]	; (8002288 <HAL_ADC_ConvCpltCallback+0x210>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d151      	bne.n	800225c <HAL_ADC_ConvCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <HAL_ADC_ConvCpltCallback+0x214>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80021c0:	8812      	ldrh	r2, [r2, #0]
 80021c2:	b212      	sxth	r2, r2
 80021c4:	fb03 f202 	mul.w	r2, r3, r2
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80021ca:	fba3 1302 	umull	r1, r3, r3, r2
 80021ce:	1ad2      	subs	r2, r2, r3
 80021d0:	0852      	lsrs	r2, r2, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	0adb      	lsrs	r3, r3, #11
 80021d6:	b25a      	sxtb	r2, r3
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_ADC_ConvCpltCallback+0x218>)
 80021da:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_ADC_ConvCpltCallback+0x214>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	b212      	sxth	r2, r2
 80021e8:	fb03 f202 	mul.w	r2, r3, r2
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80021ee:	fba3 1302 	umull	r1, r3, r3, r2
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	0852      	lsrs	r2, r2, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	0adb      	lsrs	r3, r3, #11
 80021fa:	b25a      	sxtb	r2, r3
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_ADC_ConvCpltCallback+0x218>)
 80021fe:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_ADC_ConvCpltCallback+0x214>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	b212      	sxth	r2, r2
 800220c:	fb03 f202 	mul.w	r2, r3, r2
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	461a      	mov	r2, r3
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800221c:	fba3 1302 	umull	r1, r3, r3, r2
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	4413      	add	r3, r2
 8002226:	0adb      	lsrs	r3, r3, #11
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_ADC_ConvCpltCallback+0x218>)
 800222a:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_ADC_ConvCpltCallback+0x214>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002234:	8812      	ldrh	r2, [r2, #0]
 8002236:	b212      	sxth	r2, r2
 8002238:	fb03 f202 	mul.w	r2, r3, r2
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_ADC_ConvCpltCallback+0x21c>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0bdb      	lsrs	r3, r3, #15
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_ADC_ConvCpltCallback+0x218>)
 8002252:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_ADC_ConvCpltCallback+0x220>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <HAL_ADC_ConvCpltCallback+0x218>)
 800225a:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200005dc 	.word	0x200005dc
 8002268:	200000f0 	.word	0x200000f0
 800226c:	20000518 	.word	0x20000518
 8002270:	20000564 	.word	0x20000564
 8002274:	00100101 	.word	0x00100101
 8002278:	51eb851f 	.word	0x51eb851f
 800227c:	20000558 	.word	0x20000558
 8002280:	2000056c 	.word	0x2000056c
 8002284:	20000568 	.word	0x20000568
 8002288:	20000648 	.word	0x20000648
 800228c:	20000538 	.word	0x20000538
 8002290:	20000580 	.word	0x20000580
 8002294:	ccd99a67 	.word	0xccd99a67
 8002298:	2000057c 	.word	0x2000057c

0800229c <dac_value>:

void dac_value(uint16_t V_dac){
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	4613      	mov	r3, r2
 80022aa:	031b      	lsls	r3, r3, #12
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <dac_value+0x34>)
 80022b0:	8812      	ldrh	r2, [r2, #0]
 80022b2:	b212      	sxth	r2, r2
 80022b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80022b8:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <dac_value+0x38>)
 80022c2:	f003 fe3b 	bl	8005f3c <HAL_DAC_SetValue>
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000564 	.word	0x20000564
 80022d4:	20000778 	.word	0x20000778

080022d8 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 fc87 	bl	8006bf4 <HAL_FDCAN_Start>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00a      	b.n	8002306 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f004 fdc3 	bl	8006e80 <HAL_FDCAN_ActivateNotification>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <FDCAN_addCallback+0x70>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d901      	bls.n	8002328 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8002324:	2303      	movs	r3, #3
 8002326:	e025      	b.n	8002374 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e00c      	b.n	8002348 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <FDCAN_addCallback+0x74>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	d101      	bne.n	8002342 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e018      	b.n	8002374 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3301      	adds	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <FDCAN_addCallback+0x70>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3ed      	bcc.n	800232e <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <FDCAN_addCallback+0x70>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	490a      	ldr	r1, [pc, #40]	; (8002384 <FDCAN_addCallback+0x74>)
 800235a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <FDCAN_addCallback+0x74>)
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <FDCAN_addCallback+0x70>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <FDCAN_addCallback+0x70>)
 8002370:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3724      	adds	r7, #36	; 0x24
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	200005d8 	.word	0x200005d8
 8002384:	20000588 	.word	0x20000588

08002388 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8002398:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800239c:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80023aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80023b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4619      	mov	r1, r3
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f004 fc3c 	bl	8006c44 <HAL_FDCAN_AddMessageToTxFifoQ>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3738      	adds	r7, #56	; 0x38
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b09e      	sub	sp, #120	; 0x78
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f004 fc69 	bl	8006ccc <HAL_FDCAN_GetRxMessage>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8002400:	f000 fd90 	bl	8002f24 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002404:	2300      	movs	r3, #0
 8002406:	677b      	str	r3, [r7, #116]	; 0x74
 8002408:	e012      	b.n	8002430 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 800240a:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800240c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	429a      	cmp	r2, r3
 8002418:	d107      	bne.n	800242a <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800241c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800241e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002422:	f107 020c 	add.w	r2, r7, #12
 8002426:	4610      	mov	r0, r2
 8002428:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	3301      	adds	r3, #1
 800242e:	677b      	str	r3, [r7, #116]	; 0x74
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002436:	429a      	cmp	r2, r3
 8002438:	d3e7      	bcc.n	800240a <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3778      	adds	r7, #120	; 0x78
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000588 	.word	0x20000588
 8002448:	200005d8 	.word	0x200005d8

0800244c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2220      	movs	r2, #32
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00a f9c5 	bl	800c7f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800246a:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <MX_ADC1_Init+0x154>)
 800246c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002474:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800247a:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <MX_ADC1_Init+0x154>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002486:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <MX_ADC1_Init+0x154>)
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002492:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002494:	2208      	movs	r2, #8
 8002496:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <MX_ADC1_Init+0x154>)
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024a6:	2204      	movs	r2, #4
 80024a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80024ce:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024d8:	220c      	movs	r2, #12
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80024dc:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024de:	2200      	movs	r2, #0
 80024e0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024ee:	482c      	ldr	r0, [pc, #176]	; (80025a0 <MX_ADC1_Init+0x154>)
 80024f0:	f001 fdd2 	bl	8004098 <HAL_ADC_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024fa:	f000 fd13 	bl	8002f24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	4619      	mov	r1, r3
 8002508:	4825      	ldr	r0, [pc, #148]	; (80025a0 <MX_ADC1_Init+0x154>)
 800250a:	f003 faef 	bl	8005aec <HAL_ADCEx_MultiModeConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002514:	f000 fd06 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <MX_ADC1_Init+0x158>)
 800251a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800251c:	2306      	movs	r3, #6
 800251e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002520:	2303      	movs	r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002524:	237f      	movs	r3, #127	; 0x7f
 8002526:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002528:	2304      	movs	r3, #4
 800252a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4619      	mov	r1, r3
 8002534:	481a      	ldr	r0, [pc, #104]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002536:	f002 fbf1 	bl	8004d1c <HAL_ADC_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002540:	f000 fcf0 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_ADC1_Init+0x15c>)
 8002546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002548:	230c      	movs	r3, #12
 800254a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4619      	mov	r1, r3
 8002550:	4813      	ldr	r0, [pc, #76]	; (80025a0 <MX_ADC1_Init+0x154>)
 8002552:	f002 fbe3 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800255c:	f000 fce2 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_ADC1_Init+0x160>)
 8002562:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002564:	2312      	movs	r3, #18
 8002566:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_ADC1_Init+0x154>)
 800256e:	f002 fbd5 	bl	8004d1c <HAL_ADC_ConfigChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002578:	f000 fcd4 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <MX_ADC1_Init+0x164>)
 800257e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002580:	2318      	movs	r3, #24
 8002582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_ADC1_Init+0x154>)
 800258a:	f002 fbc7 	bl	8004d1c <HAL_ADC_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8002594:	f000 fcc6 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3730      	adds	r7, #48	; 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200005dc 	.word	0x200005dc
 80025a4:	04300002 	.word	0x04300002
 80025a8:	08600004 	.word	0x08600004
 80025ac:	0c900008 	.word	0x0c900008
 80025b0:	cb840000 	.word	0xcb840000

080025b4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025ba:	463b      	mov	r3, r7
 80025bc:	2220      	movs	r2, #32
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00a f917 	bl	800c7f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025c8:	4a47      	ldr	r2, [pc, #284]	; (80026e8 <MX_ADC2_Init+0x134>)
 80025ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025cc:	4b45      	ldr	r3, [pc, #276]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80025d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ec:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80025f2:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80025f8:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <MX_ADC2_Init+0x130>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002600:	2204      	movs	r2, #4
 8002602:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <MX_ADC2_Init+0x130>)
 800260e:	2200      	movs	r2, #0
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002618:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <MX_ADC2_Init+0x130>)
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <MX_ADC2_Init+0x130>)
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002632:	220c      	movs	r2, #12
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002638:	2200      	movs	r2, #0
 800263a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800263c:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <MX_ADC2_Init+0x130>)
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002644:	2201      	movs	r2, #1
 8002646:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002648:	4826      	ldr	r0, [pc, #152]	; (80026e4 <MX_ADC2_Init+0x130>)
 800264a:	f001 fd25 	bl	8004098 <HAL_ADC_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8002654:	f000 fc66 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <MX_ADC2_Init+0x138>)
 800265a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800265c:	2306      	movs	r3, #6
 800265e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002660:	2307      	movs	r3, #7
 8002662:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002664:	237f      	movs	r3, #127	; 0x7f
 8002666:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002668:	2304      	movs	r3, #4
 800266a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002676:	f002 fb51 	bl	8004d1c <HAL_ADC_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002680:	f000 fc50 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_ADC2_Init+0x13c>)
 8002686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002688:	230c      	movs	r3, #12
 800268a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	4813      	ldr	r0, [pc, #76]	; (80026e4 <MX_ADC2_Init+0x130>)
 8002696:	f002 fb41 	bl	8004d1c <HAL_ADC_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80026a0:	f000 fc40 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <MX_ADC2_Init+0x140>)
 80026a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026a8:	2312      	movs	r3, #18
 80026aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026ac:	463b      	mov	r3, r7
 80026ae:	4619      	mov	r1, r3
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <MX_ADC2_Init+0x130>)
 80026b2:	f002 fb33 	bl	8004d1c <HAL_ADC_ConfigChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 80026bc:	f000 fc32 	bl	8002f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <MX_ADC2_Init+0x144>)
 80026c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026c4:	2318      	movs	r3, #24
 80026c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_ADC2_Init+0x130>)
 80026ce:	f002 fb25 	bl	8004d1c <HAL_ADC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80026d8:	f000 fc24 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000648 	.word	0x20000648
 80026e8:	50000100 	.word	0x50000100
 80026ec:	32601000 	.word	0x32601000
 80026f0:	3ac04000 	.word	0x3ac04000
 80026f4:	36902000 	.word	0x36902000
 80026f8:	0c900008 	.word	0x0c900008

080026fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b09e      	sub	sp, #120	; 0x78
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002714:	f107 0320 	add.w	r3, r7, #32
 8002718:	2244      	movs	r2, #68	; 0x44
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f00a f869 	bl	800c7f4 <memset>
  if(adcHandle->Instance==ADC1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272a:	d171      	bne.n	8002810 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800272c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002730:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002732:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002736:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	4618      	mov	r0, r3
 800273e:	f005 ff69 	bl	8008614 <HAL_RCCEx_PeriphCLKConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002748:	f000 fbec 	bl	8002f24 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800274c:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a79      	ldr	r2, [pc, #484]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 8002754:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002756:	4b78      	ldr	r3, [pc, #480]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10b      	bne.n	8002776 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_ADC_MspInit+0x240>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b71      	ldr	r3, [pc, #452]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	4a70      	ldr	r2, [pc, #448]	; (800293c <HAL_ADC_MspInit+0x240>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002782:	4b6e      	ldr	r3, [pc, #440]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800278e:	2307      	movs	r3, #7
 8002790:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002792:	2303      	movs	r3, #3
 8002794:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f004 ff72 	bl	800768c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027aa:	4a66      	ldr	r2, [pc, #408]	; (8002944 <HAL_ADC_MspInit+0x248>)
 80027ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027ae:	4b64      	ldr	r3, [pc, #400]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027b0:	2205      	movs	r2, #5
 80027b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c0:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027c6:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027ce:	4b5c      	ldr	r3, [pc, #368]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027d8:	2220      	movs	r2, #32
 80027da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027dc:	4b58      	ldr	r3, [pc, #352]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027de:	2200      	movs	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027e2:	4857      	ldr	r0, [pc, #348]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027e4:	f003 fd7a 	bl	80062dc <HAL_DMA_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80027ee:	f000 fb99 	bl	8002f24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
 80027f8:	4a51      	ldr	r2, [pc, #324]	; (8002940 <HAL_ADC_MspInit+0x244>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2012      	movs	r0, #18
 8002804:	f003 faf1 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002808:	2012      	movs	r0, #18
 800280a:	f003 fb08 	bl	8005e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800280e:	e08f      	b.n	8002930 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_ADC_MspInit+0x24c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	f040 808a 	bne.w	8002930 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800281c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002820:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002822:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002826:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002828:	f107 0320 	add.w	r3, r7, #32
 800282c:	4618      	mov	r0, r3
 800282e:	f005 fef1 	bl	8008614 <HAL_RCCEx_PeriphCLKConfig>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002838:	f000 fb74 	bl	8002f24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	4a3d      	ldr	r2, [pc, #244]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 8002844:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_ADC_MspInit+0x23c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10b      	bne.n	8002866 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a3a      	ldr	r2, [pc, #232]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_ADC_MspInit+0x240>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	4a34      	ldr	r2, [pc, #208]	; (800293c <HAL_ADC_MspInit+0x240>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	4a2e      	ldr	r2, [pc, #184]	; (800293c <HAL_ADC_MspInit+0x240>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_ADC_MspInit+0x240>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8002896:	2360      	movs	r3, #96	; 0x60
 8002898:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800289a:	2303      	movs	r3, #3
 800289c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f004 feee 	bl	800768c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80028b0:	f640 0304 	movw	r3, #2052	; 0x804
 80028b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b6:	2303      	movs	r3, #3
 80028b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028c2:	4619      	mov	r1, r3
 80028c4:	4821      	ldr	r0, [pc, #132]	; (800294c <HAL_ADC_MspInit+0x250>)
 80028c6:	f004 fee1 	bl	800768c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_ADC_MspInit+0x258>)
 80028ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80028dc:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80028f8:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_ADC_MspInit+0x254>)
 80028fa:	2220      	movs	r2, #32
 80028fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_ADC_MspInit+0x254>)
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002904:	4812      	ldr	r0, [pc, #72]	; (8002950 <HAL_ADC_MspInit+0x254>)
 8002906:	f003 fce9 	bl	80062dc <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002910:	f000 fb08 	bl	8002f24 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_ADC_MspInit+0x254>)
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
 800291a:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_ADC_MspInit+0x254>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	2012      	movs	r0, #18
 8002926:	f003 fa60 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800292a:	2012      	movs	r0, #18
 800292c:	f003 fa77 	bl	8005e1e <HAL_NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3778      	adds	r7, #120	; 0x78
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000774 	.word	0x20000774
 800293c:	40021000 	.word	0x40021000
 8002940:	200006b4 	.word	0x200006b4
 8002944:	40020008 	.word	0x40020008
 8002948:	50000100 	.word	0x50000100
 800294c:	48000400 	.word	0x48000400
 8002950:	20000714 	.word	0x20000714
 8002954:	4002001c 	.word	0x4002001c

08002958 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800295e:	463b      	mov	r3, r7
 8002960:	2230      	movs	r2, #48	; 0x30
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f009 ff45 	bl	800c7f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_DAC1_Init+0x6c>)
 800296c:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <MX_DAC1_Init+0x70>)
 800296e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002970:	4814      	ldr	r0, [pc, #80]	; (80029c4 <MX_DAC1_Init+0x6c>)
 8002972:	f003 fa6e 	bl	8005e52 <HAL_DAC_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800297c:	f000 fad2 	bl	8002f24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800299c:	2301      	movs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4806      	ldr	r0, [pc, #24]	; (80029c4 <MX_DAC1_Init+0x6c>)
 80029ac:	f003 faee 	bl	8005f8c <HAL_DAC_ConfigChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80029b6:	f000 fab5 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	3730      	adds	r7, #48	; 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000778 	.word	0x20000778
 80029c8:	50000800 	.word	0x50000800

080029cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_DAC_MspInit+0x74>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d124      	bne.n	8002a38 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_DAC_MspInit+0x78>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a1e:	2310      	movs	r3, #16
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a22:	2303      	movs	r3, #3
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a34:	f004 fe2a 	bl	800768c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	50000800 	.word	0x50000800
 8002a44:	40021000 	.word	0x40021000

08002a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6493      	str	r3, [r2, #72]	; 0x48
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6493      	str	r3, [r2, #72]	; 0x48
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6493      	str	r3, [r2, #72]	; 0x48
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <MX_DMA_Init+0xc8>)
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	200b      	movs	r0, #11
 8002a9c:	f003 f9a5 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002aa0:	200b      	movs	r0, #11
 8002aa2:	f003 f9bc 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	200c      	movs	r0, #12
 8002aac:	f003 f99d 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ab0:	200c      	movs	r0, #12
 8002ab2:	f003 f9b4 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	200d      	movs	r0, #13
 8002abc:	f003 f995 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ac0:	200d      	movs	r0, #13
 8002ac2:	f003 f9ac 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	200e      	movs	r0, #14
 8002acc:	f003 f98d 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002ad0:	200e      	movs	r0, #14
 8002ad2:	f003 f9a4 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2038      	movs	r0, #56	; 0x38
 8002adc:	f003 f985 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002ae0:	2038      	movs	r0, #56	; 0x38
 8002ae2:	f003 f99c 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2039      	movs	r0, #57	; 0x39
 8002aec:	f003 f97d 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002af0:	2039      	movs	r0, #57	; 0x39
 8002af2:	f003 f994 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	203a      	movs	r0, #58	; 0x3a
 8002afc:	f003 f975 	bl	8005dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002b00:	203a      	movs	r0, #58	; 0x3a
 8002b02:	f003 f98c 	bl	8005e1e <HAL_NVIC_EnableIRQ>

}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000

08002b14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <MX_FDCAN1_Init+0x8c>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b52:	222a      	movs	r2, #42	; 0x2a
 8002b54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b64:	2209      	movs	r2, #9
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b6a:	220a      	movs	r2, #10
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b70:	2209      	movs	r2, #9
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002b86:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_FDCAN1_Init+0x88>)
 8002b88:	f003 feda 	bl	8006940 <HAL_FDCAN_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002b92:	f000 f9c7 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000078c 	.word	0x2000078c
 8002ba0:	40006400 	.word	0x40006400

08002ba4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b09a      	sub	sp, #104	; 0x68
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	2244      	movs	r2, #68	; 0x44
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f009 fe15 	bl	800c7f4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <HAL_FDCAN_MspInit+0xbc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d141      	bne.n	8002c58 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002bda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bde:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4618      	mov	r0, r3
 8002be6:	f005 fd15 	bl	8008614 <HAL_RCCEx_PeriphCLKConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002bf0:	f000 f998 	bl	8002f24 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_FDCAN_MspInit+0xc0>)
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c28:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002c36:	2309      	movs	r3, #9
 8002c38:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c44:	f004 fd22 	bl	800768c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	2015      	movs	r0, #21
 8002c4e:	f003 f8cc 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002c52:	2015      	movs	r0, #21
 8002c54:	f003 f8e3 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3768      	adds	r7, #104	; 0x68
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40006400 	.word	0x40006400
 8002c64:	40021000 	.word	0x40021000

08002c68 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_FMAC_Init+0x20>)
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <MX_FMAC_Init+0x24>)
 8002c70:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_FMAC_Init+0x20>)
 8002c74:	f004 fc5e 	bl	8007534 <HAL_FMAC_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002c7e:	f000 f951 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200007f0 	.word	0x200007f0
 8002c8c:	40021400 	.word	0x40021400

08002c90 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_FMAC_MspInit+0x38>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10b      	bne.n	8002cba <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_FMAC_MspInit+0x3c>)
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_FMAC_MspInit+0x3c>)
 8002ca8:	f043 0310 	orr.w	r3, r3, #16
 8002cac:	6493      	str	r3, [r2, #72]	; 0x48
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_FMAC_MspInit+0x3c>)
 8002cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	4a3e      	ldr	r2, [pc, #248]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <MX_GPIO_Init+0x15c>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	21c0      	movs	r1, #192	; 0xc0
 8002d62:	4833      	ldr	r0, [pc, #204]	; (8002e30 <MX_GPIO_Init+0x160>)
 8002d64:	f004 fe14 	bl	8007990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d72:	f004 fe0d 	bl	8007990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	482e      	ldr	r0, [pc, #184]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002d7c:	f004 fe08 	bl	8007990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	482c      	ldr	r0, [pc, #176]	; (8002e38 <MX_GPIO_Init+0x168>)
 8002d86:	f004 fe03 	bl	8007990 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002d8a:	23c0      	movs	r3, #192	; 0xc0
 8002d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4823      	ldr	r0, [pc, #140]	; (8002e30 <MX_GPIO_Init+0x160>)
 8002da2:	f004 fc73 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f004 fc61 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de6:	f004 fc51 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002dea:	2304      	movs	r3, #4
 8002dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <MX_GPIO_Init+0x164>)
 8002e02:	f004 fc43 	bl	800768c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002e06:	2340      	movs	r3, #64	; 0x40
 8002e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4806      	ldr	r0, [pc, #24]	; (8002e38 <MX_GPIO_Init+0x168>)
 8002e1e:	f004 fc35 	bl	800768c <HAL_GPIO_Init>

}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	48000800 	.word	0x48000800
 8002e34:	48000c00 	.word	0x48000c00
 8002e38:	48000400 	.word	0x48000400

08002e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e40:	f000 fe05 	bl	8003a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e44:	f000 f81b 	bl	8002e7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e48:	f7ff ff42 	bl	8002cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e4c:	f7ff fdfc 	bl	8002a48 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002e50:	f7ff fe60 	bl	8002b14 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002e54:	f000 f86c 	bl	8002f30 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002e58:	f000 f8a8 	bl	8002fac <MX_SPI3_Init>
  MX_TIM1_Init();
 8002e5c:	f000 fb3c 	bl	80034d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002e60:	f7ff faf4 	bl	800244c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e64:	f7ff fba6 	bl	80025b4 <MX_ADC2_Init>
  MX_DAC1_Init();
 8002e68:	f7ff fd76 	bl	8002958 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8002e6c:	f000 fcec 	bl	8003848 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002e70:	f000 fbfa 	bl	8003668 <MX_TIM3_Init>
  MX_FMAC_Init();
 8002e74:	f7ff fef8 	bl	8002c68 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8002e78:	f7fd fca4 	bl	80007c4 <BLDC_main>
 8002e7c:	e7fc      	b.n	8002e78 <main+0x3c>

08002e7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b094      	sub	sp, #80	; 0x50
 8002e82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e84:	f107 0318 	add.w	r3, r7, #24
 8002e88:	2238      	movs	r2, #56	; 0x38
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f009 fcb1 	bl	800c7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f004 fd8d 	bl	80079c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eb0:	2340      	movs	r3, #64	; 0x40
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002ec0:	2350      	movs	r3, #80	; 0x50
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002ec8:	2308      	movs	r3, #8
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed0:	f107 0318 	add.w	r3, r7, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 fe27 	bl	8007b28 <HAL_RCC_OscConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ee0:	f000 f820 	bl	8002f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	2104      	movs	r1, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 f92b 	bl	8008158 <HAL_RCC_ClockConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002f08:	f000 f80c 	bl	8002f24 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8002f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f10:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8002f14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f18:	f005 fa5a 	bl	80083d0 <HAL_RCC_MCOConfig>
}
 8002f1c:	bf00      	nop
 8002f1e:	3750      	adds	r7, #80	; 0x50
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <Error_Handler+0x8>
	...

08002f30 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <MX_SPI1_Init+0x78>)
 8002f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f56:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f66:	2228      	movs	r2, #40	; 0x28
 8002f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f7e:	2207      	movs	r2, #7
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_SPI1_Init+0x74>)
 8002f90:	f005 fd30 	bl	80089f4 <HAL_SPI_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f9a:	f7ff ffc3 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000828 	.word	0x20000828
 8002fa8:	40013000 	.word	0x40013000

08002fac <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <MX_SPI3_Init+0x78>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fbc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fe2:	2228      	movs	r2, #40	; 0x28
 8002fe4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_SPI3_Init+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_SPI3_Init+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_SPI3_Init+0x74>)
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_SPI3_Init+0x74>)
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_SPI3_Init+0x74>)
 8003006:	2208      	movs	r2, #8
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_SPI3_Init+0x74>)
 800300c:	f005 fcf2 	bl	80089f4 <HAL_SPI_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003016:	f7ff ff85 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000088c 	.word	0x2000088c
 8003024:	40003c00 	.word	0x40003c00

08003028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	; 0x30
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a89      	ldr	r2, [pc, #548]	; (800326c <HAL_SPI_MspInit+0x244>)
 8003046:	4293      	cmp	r3, r2
 8003048:	f040 8083 	bne.w	8003152 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800304c:	4b88      	ldr	r3, [pc, #544]	; (8003270 <HAL_SPI_MspInit+0x248>)
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	4a87      	ldr	r2, [pc, #540]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003056:	6613      	str	r3, [r2, #96]	; 0x60
 8003058:	4b85      	ldr	r3, [pc, #532]	; (8003270 <HAL_SPI_MspInit+0x248>)
 800305a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003064:	4b82      	ldr	r3, [pc, #520]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003068:	4a81      	ldr	r2, [pc, #516]	; (8003270 <HAL_SPI_MspInit+0x248>)
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003070:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800307c:	2338      	movs	r3, #56	; 0x38
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800308c:	2305      	movs	r3, #5
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	4619      	mov	r1, r3
 8003096:	4877      	ldr	r0, [pc, #476]	; (8003274 <HAL_SPI_MspInit+0x24c>)
 8003098:	f004 faf8 	bl	800768c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 800309c:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_SPI_MspInit+0x250>)
 800309e:	4a77      	ldr	r2, [pc, #476]	; (800327c <HAL_SPI_MspInit+0x254>)
 80030a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80030a2:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030a4:	220a      	movs	r2, #10
 80030a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a8:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ae:	4b72      	ldr	r3, [pc, #456]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030b4:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ba:	4b6f      	ldr	r3, [pc, #444]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030bc:	2200      	movs	r2, #0
 80030be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c0:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80030c6:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80030d2:	4869      	ldr	r0, [pc, #420]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030d4:	f003 f902 	bl	80062dc <HAL_DMA_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80030de:	f7ff ff21 	bl	8002f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a64      	ldr	r2, [pc, #400]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030e6:	659a      	str	r2, [r3, #88]	; 0x58
 80030e8:	4a63      	ldr	r2, [pc, #396]	; (8003278 <HAL_SPI_MspInit+0x250>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80030ee:	4b64      	ldr	r3, [pc, #400]	; (8003280 <HAL_SPI_MspInit+0x258>)
 80030f0:	4a64      	ldr	r2, [pc, #400]	; (8003284 <HAL_SPI_MspInit+0x25c>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80030f4:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_SPI_MspInit+0x258>)
 80030f6:	220b      	movs	r2, #11
 80030f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fa:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_SPI_MspInit+0x258>)
 80030fc:	2210      	movs	r2, #16
 80030fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003100:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310c:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_SPI_MspInit+0x258>)
 800310e:	2200      	movs	r2, #0
 8003110:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_SPI_MspInit+0x258>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800311e:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003124:	4856      	ldr	r0, [pc, #344]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003126:	f003 f8d9 	bl	80062dc <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003130:	f7ff fef8 	bl	8002f24 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a52      	ldr	r2, [pc, #328]	; (8003280 <HAL_SPI_MspInit+0x258>)
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
 800313a:	4a51      	ldr	r2, [pc, #324]	; (8003280 <HAL_SPI_MspInit+0x258>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2023      	movs	r0, #35	; 0x23
 8003146:	f002 fe50 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800314a:	2023      	movs	r0, #35	; 0x23
 800314c:	f002 fe67 	bl	8005e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003150:	e088      	b.n	8003264 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4c      	ldr	r2, [pc, #304]	; (8003288 <HAL_SPI_MspInit+0x260>)
 8003158:	4293      	cmp	r3, r2
 800315a:	f040 8083 	bne.w	8003264 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	4a43      	ldr	r2, [pc, #268]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003168:	6593      	str	r3, [r2, #88]	; 0x58
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_SPI_MspInit+0x248>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <HAL_SPI_MspInit+0x248>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_SPI_MspInit+0x248>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800318e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031a0:	2306      	movs	r3, #6
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	4619      	mov	r1, r3
 80031aa:	4838      	ldr	r0, [pc, #224]	; (800328c <HAL_SPI_MspInit+0x264>)
 80031ac:	f004 fa6e 	bl	800768c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80031b0:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031b2:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_SPI_MspInit+0x26c>)
 80031b4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031b8:	220e      	movs	r2, #14
 80031ba:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031bc:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c2:	4b33      	ldr	r3, [pc, #204]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031dc:	2200      	movs	r2, #0
 80031de:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80031e6:	482a      	ldr	r0, [pc, #168]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031e8:	f003 f878 	bl	80062dc <HAL_DMA_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80031f2:	f7ff fe97 	bl	8002f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031fa:	659a      	str	r2, [r3, #88]	; 0x58
 80031fc:	4a24      	ldr	r2, [pc, #144]	; (8003290 <HAL_SPI_MspInit+0x268>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8003202:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003204:	4a25      	ldr	r2, [pc, #148]	; (800329c <HAL_SPI_MspInit+0x274>)
 8003206:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_SPI_MspInit+0x270>)
 800320a:	220f      	movs	r2, #15
 800320c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003210:	2210      	movs	r2, #16
 8003212:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b1f      	ldr	r3, [pc, #124]	; (8003298 <HAL_SPI_MspInit+0x270>)
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <HAL_SPI_MspInit+0x270>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003238:	4817      	ldr	r0, [pc, #92]	; (8003298 <HAL_SPI_MspInit+0x270>)
 800323a:	f003 f84f 	bl	80062dc <HAL_DMA_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8003244:	f7ff fe6e 	bl	8002f24 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_SPI_MspInit+0x270>)
 800324c:	655a      	str	r2, [r3, #84]	; 0x54
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_SPI_MspInit+0x270>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2100      	movs	r1, #0
 8003258:	2033      	movs	r0, #51	; 0x33
 800325a:	f002 fdc6 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800325e:	2033      	movs	r0, #51	; 0x33
 8003260:	f002 fddd 	bl	8005e1e <HAL_NVIC_EnableIRQ>
}
 8003264:	bf00      	nop
 8003266:	3730      	adds	r7, #48	; 0x30
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013000 	.word	0x40013000
 8003270:	40021000 	.word	0x40021000
 8003274:	48000400 	.word	0x48000400
 8003278:	200008f0 	.word	0x200008f0
 800327c:	40020030 	.word	0x40020030
 8003280:	20000950 	.word	0x20000950
 8003284:	40020044 	.word	0x40020044
 8003288:	40003c00 	.word	0x40003c00
 800328c:	48000800 	.word	0x48000800
 8003290:	200009b0 	.word	0x200009b0
 8003294:	40020408 	.word	0x40020408
 8003298:	20000a10 	.word	0x20000a10
 800329c:	4002041c 	.word	0x4002041c

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_MspInit+0x44>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_MspInit+0x44>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6613      	str	r3, [r2, #96]	; 0x60
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_MspInit+0x44>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_MspInit+0x44>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <HAL_MspInit+0x44>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_MspInit+0x44>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032d6:	f004 fc17 	bl	8007b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <NMI_Handler+0x4>

080032ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <HardFault_Handler+0x4>

080032f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <MemManage_Handler+0x4>

080032fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <BusFault_Handler+0x4>

08003300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <UsageFault_Handler+0x4>

08003306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003334:	f000 fbde 	bl	8003af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA1_Channel1_IRQHandler+0x10>)
 8003342:	f003 f9ae 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200006b4 	.word	0x200006b4

08003350 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <DMA1_Channel2_IRQHandler+0x10>)
 8003356:	f003 f9a4 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000714 	.word	0x20000714

08003364 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <DMA1_Channel3_IRQHandler+0x10>)
 800336a:	f003 f99a 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200008f0 	.word	0x200008f0

08003378 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <DMA1_Channel4_IRQHandler+0x10>)
 800337e:	f003 f990 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000950 	.word	0x20000950

0800338c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003390:	4803      	ldr	r0, [pc, #12]	; (80033a0 <ADC1_2_IRQHandler+0x14>)
 8003392:	f001 fa95 	bl	80048c0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003396:	4803      	ldr	r0, [pc, #12]	; (80033a4 <ADC1_2_IRQHandler+0x18>)
 8003398:	f001 fa92 	bl	80048c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200005dc 	.word	0x200005dc
 80033a4:	20000648 	.word	0x20000648

080033a8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <FDCAN1_IT0_IRQHandler+0x10>)
 80033ae:	f003 fe4d 	bl	800704c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000078c 	.word	0x2000078c

080033bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <TIM3_IRQHandler+0x10>)
 80033c2:	f006 fbf5 	bl	8009bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000ac0 	.word	0x20000ac0

080033d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <SPI1_IRQHandler+0x10>)
 80033d6:	f005 fd45 	bl	8008e64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000828 	.word	0x20000828

080033e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <USART1_IRQHandler+0x10>)
 80033ea:	f007 ff61 	bl	800b2b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000b0c 	.word	0x20000b0c

080033f8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <SPI3_IRQHandler+0x10>)
 80033fe:	f005 fd31 	bl	8008e64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000088c 	.word	0x2000088c

0800340c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <DMA2_Channel1_IRQHandler+0x10>)
 8003412:	f003 f946 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200009b0 	.word	0x200009b0

08003420 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA2_Channel2_IRQHandler+0x10>)
 8003426:	f003 f93c 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000a10 	.word	0x20000a10

08003434 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <DMA2_Channel3_IRQHandler+0x10>)
 800343a:	f003 f932 	bl	80066a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000b9c 	.word	0x20000b9c

08003448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <_sbrk+0x5c>)
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <_sbrk+0x60>)
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <_sbrk+0x64>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <_sbrk+0x64>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <_sbrk+0x68>)
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <_sbrk+0x64>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d207      	bcs.n	8003488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003478:	f009 f9c4 	bl	800c804 <__errno>
 800347c:	4603      	mov	r3, r0
 800347e:	220c      	movs	r2, #12
 8003480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e009      	b.n	800349c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <_sbrk+0x64>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <_sbrk+0x64>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <_sbrk+0x64>)
 8003498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20008000 	.word	0x20008000
 80034a8:	00000400 	.word	0x00000400
 80034ac:	20000a70 	.word	0x20000a70
 80034b0:	20000d48 	.word	0x20000d48

080034b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <SystemInit+0x20>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <SystemInit+0x20>)
 80034c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b09c      	sub	sp, #112	; 0x70
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
 8003508:	615a      	str	r2, [r3, #20]
 800350a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	2234      	movs	r2, #52	; 0x34
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f009 f96e 	bl	800c7f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003518:	4b51      	ldr	r3, [pc, #324]	; (8003660 <MX_TIM1_Init+0x188>)
 800351a:	4a52      	ldr	r2, [pc, #328]	; (8003664 <MX_TIM1_Init+0x18c>)
 800351c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800351e:	4b50      	ldr	r3, [pc, #320]	; (8003660 <MX_TIM1_Init+0x188>)
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003524:	4b4e      	ldr	r3, [pc, #312]	; (8003660 <MX_TIM1_Init+0x188>)
 8003526:	2220      	movs	r2, #32
 8003528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 800352a:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <MX_TIM1_Init+0x188>)
 800352c:	f240 52db 	movw	r2, #1499	; 0x5db
 8003530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003532:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <MX_TIM1_Init+0x188>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003538:	4b49      	ldr	r3, [pc, #292]	; (8003660 <MX_TIM1_Init+0x188>)
 800353a:	2200      	movs	r2, #0
 800353c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800353e:	4b48      	ldr	r3, [pc, #288]	; (8003660 <MX_TIM1_Init+0x188>)
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003544:	4846      	ldr	r0, [pc, #280]	; (8003660 <MX_TIM1_Init+0x188>)
 8003546:	f006 f853 	bl	80095f0 <HAL_TIM_Base_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003550:	f7ff fce8 	bl	8002f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800355a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800355e:	4619      	mov	r1, r3
 8003560:	483f      	ldr	r0, [pc, #252]	; (8003660 <MX_TIM1_Init+0x188>)
 8003562:	f006 fdb9 	bl	800a0d8 <HAL_TIM_ConfigClockSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800356c:	f7ff fcda 	bl	8002f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003570:	483b      	ldr	r0, [pc, #236]	; (8003660 <MX_TIM1_Init+0x188>)
 8003572:	f006 f925 	bl	80097c0 <HAL_TIM_PWM_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800357c:	f7ff fcd2 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003584:	2300      	movs	r3, #0
 8003586:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003588:	2300      	movs	r3, #0
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800358c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003590:	4619      	mov	r1, r3
 8003592:	4833      	ldr	r0, [pc, #204]	; (8003660 <MX_TIM1_Init+0x188>)
 8003594:	f007 fc1c 	bl	800add0 <HAL_TIMEx_MasterConfigSynchronization>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800359e:	f7ff fcc1 	bl	8002f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035a2:	2360      	movs	r3, #96	; 0x60
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80035aa:	2302      	movs	r3, #2
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80035ae:	2308      	movs	r3, #8
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035b6:	2300      	movs	r3, #0
 80035b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035c2:	2200      	movs	r2, #0
 80035c4:	4619      	mov	r1, r3
 80035c6:	4826      	ldr	r0, [pc, #152]	; (8003660 <MX_TIM1_Init+0x188>)
 80035c8:	f006 fc72 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80035d2:	f7ff fca7 	bl	8002f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035da:	2204      	movs	r2, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4820      	ldr	r0, [pc, #128]	; (8003660 <MX_TIM1_Init+0x188>)
 80035e0:	f006 fc66 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80035ea:	f7ff fc9b 	bl	8002f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035f2:	2208      	movs	r2, #8
 80035f4:	4619      	mov	r1, r3
 80035f6:	481a      	ldr	r0, [pc, #104]	; (8003660 <MX_TIM1_Init+0x188>)
 80035f8:	f006 fc5a 	bl	8009eb0 <HAL_TIM_PWM_ConfigChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003602:	f7ff fc8f 	bl	8002f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800361a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800361e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003624:	2300      	movs	r3, #0
 8003626:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800362c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003636:	2300      	movs	r3, #0
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <MX_TIM1_Init+0x188>)
 8003644:	f007 fc46 	bl	800aed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800364e:	f7ff fc69 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003652:	4803      	ldr	r0, [pc, #12]	; (8003660 <MX_TIM1_Init+0x188>)
 8003654:	f000 f890 	bl	8003778 <HAL_TIM_MspPostInit>

}
 8003658:	bf00      	nop
 800365a:	3770      	adds	r7, #112	; 0x70
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000a74 	.word	0x20000a74
 8003664:	40012c00 	.word	0x40012c00

08003668 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <MX_TIM3_Init+0x94>)
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <MX_TIM3_Init+0x98>)
 800368a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <MX_TIM3_Init+0x94>)
 800368e:	2203      	movs	r2, #3
 8003690:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <MX_TIM3_Init+0x94>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <MX_TIM3_Init+0x94>)
 800369a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800369e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <MX_TIM3_Init+0x94>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <MX_TIM3_Init+0x94>)
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036ac:	4813      	ldr	r0, [pc, #76]	; (80036fc <MX_TIM3_Init+0x94>)
 80036ae:	f005 ff9f 	bl	80095f0 <HAL_TIM_Base_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036b8:	f7ff fc34 	bl	8002f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036c2:	f107 0310 	add.w	r3, r7, #16
 80036c6:	4619      	mov	r1, r3
 80036c8:	480c      	ldr	r0, [pc, #48]	; (80036fc <MX_TIM3_Init+0x94>)
 80036ca:	f006 fd05 	bl	800a0d8 <HAL_TIM_ConfigClockSource>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80036d4:	f7ff fc26 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <MX_TIM3_Init+0x94>)
 80036e6:	f007 fb73 	bl	800add0 <HAL_TIMEx_MasterConfigSynchronization>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80036f0:	f7ff fc18 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000ac0 	.word	0x20000ac0
 8003700:	40000400 	.word	0x40000400

08003704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIM_Base_MspInit+0x68>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10c      	bne.n	8003730 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	6613      	str	r3, [r2, #96]	; 0x60
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 8003724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800372e:	e018      	b.n	8003762 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_TIM_Base_MspInit+0x70>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6593      	str	r3, [r2, #88]	; 0x58
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_TIM_Base_MspInit+0x6c>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	201d      	movs	r0, #29
 8003758:	f002 fb47 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800375c:	201d      	movs	r0, #29
 800375e:	f002 fb5e 	bl	8005e1e <HAL_NVIC_EnableIRQ>
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40000400 	.word	0x40000400

08003778 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <HAL_TIM_MspPostInit+0xc0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d149      	bne.n	800382e <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379a:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a6:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	4a21      	ldr	r2, [pc, #132]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037be:	4b1f      	ldr	r3, [pc, #124]	; (800383c <HAL_TIM_MspPostInit+0xc4>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80037ca:	2307      	movs	r3, #7
 80037cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ce:	2302      	movs	r3, #2
 80037d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80037da:	2302      	movs	r3, #2
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037de:	f107 0314 	add.w	r3, r7, #20
 80037e2:	4619      	mov	r1, r3
 80037e4:	4816      	ldr	r0, [pc, #88]	; (8003840 <HAL_TIM_MspPostInit+0xc8>)
 80037e6:	f003 ff51 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80037fc:	2306      	movs	r3, #6
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	480f      	ldr	r0, [pc, #60]	; (8003844 <HAL_TIM_MspPostInit+0xcc>)
 8003808:	f003 ff40 	bl	800768c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800380c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003812:	2302      	movs	r3, #2
 8003814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381a:	2300      	movs	r3, #0
 800381c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800381e:	2304      	movs	r3, #4
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003822:	f107 0314 	add.w	r3, r7, #20
 8003826:	4619      	mov	r1, r3
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <HAL_TIM_MspPostInit+0xcc>)
 800382a:	f003 ff2f 	bl	800768c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800382e:	bf00      	nop
 8003830:	3728      	adds	r7, #40	; 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40021000 	.word	0x40021000
 8003840:	48000800 	.word	0x48000800
 8003844:	48000400 	.word	0x48000400

08003848 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 800384e:	4a23      	ldr	r2, [pc, #140]	; (80038dc <MX_USART1_UART_Init+0x94>)
 8003850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003854:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800385a:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 800386e:	220c      	movs	r2, #12
 8003870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003886:	2200      	movs	r2, #0
 8003888:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 800388c:	2200      	movs	r2, #0
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003890:	4811      	ldr	r0, [pc, #68]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 8003892:	f007 fc2a 	bl	800b0ea <HAL_UART_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800389c:	f7ff fb42 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038a0:	2100      	movs	r1, #0
 80038a2:	480d      	ldr	r0, [pc, #52]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 80038a4:	f008 fea1 	bl	800c5ea <HAL_UARTEx_SetTxFifoThreshold>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80038ae:	f7ff fb39 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038b2:	2100      	movs	r1, #0
 80038b4:	4808      	ldr	r0, [pc, #32]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 80038b6:	f008 fed6 	bl	800c666 <HAL_UARTEx_SetRxFifoThreshold>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80038c0:	f7ff fb30 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80038c4:	4804      	ldr	r0, [pc, #16]	; (80038d8 <MX_USART1_UART_Init+0x90>)
 80038c6:	f008 fe57 	bl	800c578 <HAL_UARTEx_DisableFifoMode>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80038d0:	f7ff fb28 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000b0c 	.word	0x20000b0c
 80038dc:	40013800 	.word	0x40013800

080038e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b09a      	sub	sp, #104	; 0x68
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038f8:	f107 0310 	add.w	r3, r7, #16
 80038fc:	2244      	movs	r2, #68	; 0x44
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f008 ff77 	bl	800c7f4 <memset>
  if(uartHandle->Instance==USART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a37      	ldr	r2, [pc, #220]	; (80039e8 <HAL_UART_MspInit+0x108>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d166      	bne.n	80039de <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4618      	mov	r0, r3
 800391e:	f004 fe79 	bl	8008614 <HAL_RCCEx_PeriphCLKConfig>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003928:	f7ff fafc 	bl	8002f24 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800392c:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_UART_MspInit+0x10c>)
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <HAL_UART_MspInit+0x10c>)
 8003932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003936:	6613      	str	r3, [r2, #96]	; 0x60
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_UART_MspInit+0x10c>)
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_UART_MspInit+0x10c>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_UART_MspInit+0x10c>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_UART_MspInit+0x10c>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800395c:	2330      	movs	r3, #48	; 0x30
 800395e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003960:	2302      	movs	r3, #2
 8003962:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003968:	2300      	movs	r3, #0
 800396a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800396c:	2307      	movs	r3, #7
 800396e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003974:	4619      	mov	r1, r3
 8003976:	481e      	ldr	r0, [pc, #120]	; (80039f0 <HAL_UART_MspInit+0x110>)
 8003978:	f003 fe88 	bl	800768c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_UART_MspInit+0x114>)
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_UART_MspInit+0x118>)
 8003980:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_UART_MspInit+0x114>)
 8003984:	2219      	movs	r2, #25
 8003986:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_UART_MspInit+0x114>)
 800398a:	2210      	movs	r2, #16
 800398c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_UART_MspInit+0x114>)
 8003990:	2200      	movs	r2, #0
 8003992:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_UART_MspInit+0x114>)
 8003996:	2280      	movs	r2, #128	; 0x80
 8003998:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_UART_MspInit+0x114>)
 800399c:	2200      	movs	r2, #0
 800399e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80039b2:	4810      	ldr	r0, [pc, #64]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039b4:	f002 fc92 	bl	80062dc <HAL_DMA_Init>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80039be:	f7ff fab1 	bl	8002f24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039c6:	679a      	str	r2, [r3, #120]	; 0x78
 80039c8:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <HAL_UART_MspInit+0x114>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	2025      	movs	r0, #37	; 0x25
 80039d4:	f002 fa09 	bl	8005dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039d8:	2025      	movs	r0, #37	; 0x25
 80039da:	f002 fa20 	bl	8005e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039de:	bf00      	nop
 80039e0:	3768      	adds	r7, #104	; 0x68
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40013800 	.word	0x40013800
 80039ec:	40021000 	.word	0x40021000
 80039f0:	48000800 	.word	0x48000800
 80039f4:	20000b9c 	.word	0x20000b9c
 80039f8:	40020430 	.word	0x40020430

080039fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a02:	490e      	ldr	r1, [pc, #56]	; (8003a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a04:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <LoopForever+0xe>)
  movs r3, #0
 8003a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a08:	e002      	b.n	8003a10 <LoopCopyDataInit>

08003a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a0e:	3304      	adds	r3, #4

08003a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a14:	d3f9      	bcc.n	8003a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a18:	4c0b      	ldr	r4, [pc, #44]	; (8003a48 <LoopForever+0x16>)
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a1c:	e001      	b.n	8003a22 <LoopFillZerobss>

08003a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a20:	3204      	adds	r2, #4

08003a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a24:	d3fb      	bcc.n	8003a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a26:	f7ff fd45 	bl	80034b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f008 fef1 	bl	800c810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a2e:	f7ff fa05 	bl	8002e3c <main>

08003a32 <LoopForever>:

LoopForever:
    b LoopForever
 8003a32:	e7fe      	b.n	8003a32 <LoopForever>
  ldr   r0, =_estack
 8003a34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a3c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8003a40:	0800d1dc 	.word	0x0800d1dc
  ldr r2, =_sbss
 8003a44:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003a48:	20000d48 	.word	0x20000d48

08003a4c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <COMP1_2_3_IRQHandler>

08003a4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f002 f9bb 	bl	8005dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5e:	200f      	movs	r0, #15
 8003a60:	f000 f80e 	bl	8003a80 <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	71fb      	strb	r3, [r7, #7]
 8003a6e:	e001      	b.n	8003a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a70:	f7ff fc16 	bl	80032a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a74:	79fb      	ldrb	r3, [r7, #7]

}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_InitTick+0x68>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d022      	beq.n	8003ada <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_InitTick+0x6c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_InitTick+0x68>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f002 f9c6 	bl	8005e3a <HAL_SYSTICK_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	d809      	bhi.n	8003ace <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aba:	2200      	movs	r2, #0
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac2:	f002 f992 	bl	8005dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_InitTick+0x70>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e007      	b.n	8003ade <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e004      	b.n	8003ade <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e001      	b.n	8003ade <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200000fc 	.word	0x200000fc
 8003aec:	200000f4 	.word	0x200000f4
 8003af0:	200000f8 	.word	0x200000f8

08003af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003af8:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_IncTick+0x1c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_IncTick+0x20>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <HAL_IncTick+0x1c>)
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	20000bfc 	.word	0x20000bfc
 8003b14:	200000fc 	.word	0x200000fc

08003b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_GetTick+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000bfc 	.word	0x20000bfc

08003b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b38:	f7ff ffee 	bl	8003b18 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d004      	beq.n	8003b54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_Delay+0x40>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b54:	bf00      	nop
 8003b56:	f7ff ffdf 	bl	8003b18 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d8f7      	bhi.n	8003b56 <HAL_Delay+0x26>
  {
  }
}
 8003b66:	bf00      	nop
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200000fc 	.word	0x200000fc

08003b74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3360      	adds	r3, #96	; 0x60
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <LL_ADC_SetOffset+0x44>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	03fff000 	.word	0x03fff000

08003c24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3360      	adds	r3, #96	; 0x60
 8003c32:	461a      	mov	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3360      	adds	r3, #96	; 0x60
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b087      	sub	sp, #28
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3360      	adds	r3, #96	; 0x60
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	615a      	str	r2, [r3, #20]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3330      	adds	r3, #48	; 0x30
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	4413      	add	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	211f      	movs	r1, #31
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	401a      	ands	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	f003 011f 	and.w	r1, r3, #31
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0e5b      	lsrs	r3, r3, #25
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	0d1b      	lsrs	r3, r3, #20
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2107      	movs	r1, #7
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0d1b      	lsrs	r3, r3, #20
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10a      	bne.n	8003e3e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003e3c:	e00a      	b.n	8003e54 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	407f0000 	.word	0x407f0000

08003e64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 031f 	and.w	r3, r3, #31
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6093      	str	r3, [r2, #8]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f24:	d101      	bne.n	8003f2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f74:	f043 0202 	orr.w	r2, r3, #2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <LL_ADC_IsEnabled+0x18>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <LL_ADC_IsEnabled+0x1a>
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_IsDisableOngoing+0x18>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_IsDisableOngoing+0x1a>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004010:	f043 0210 	orr.w	r2, r3, #16
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d101      	bne.n	800403c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800405a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d101      	bne.n	800408a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e177      	b.n	80043a2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fb1b 	bl	80026fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fef1 	bl	8003ec0 <LL_ADC_IsDeepPowerDownEnabled>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fed7 	bl	8003e9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff0c 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d115      	bne.n	800412a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fef0 	bl	8003ee8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004108:	4b9c      	ldr	r3, [pc, #624]	; (800437c <HAL_ADC_Init+0x2e4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	4a9c      	ldr	r2, [pc, #624]	; (8004380 <HAL_ADC_Init+0x2e8>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	099b      	lsrs	r3, r3, #6
 8004116:	3301      	adds	r3, #1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800411c:	e002      	b.n	8004124 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f9      	bne.n	800411e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff feee 	bl	8003f10 <LL_ADC_IsInternalRegulatorEnabled>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	f043 0210 	orr.w	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff62 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004160:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 8110 	bne.w	8004390 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 810c 	bne.w	8004390 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fefb 	bl	8003f88 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d111      	bne.n	80041bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004198:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800419c:	f7ff fef4 	bl	8003f88 <LL_ADC_IsEnabled>
 80041a0:	4604      	mov	r4, r0
 80041a2:	4878      	ldr	r0, [pc, #480]	; (8004384 <HAL_ADC_Init+0x2ec>)
 80041a4:	f7ff fef0 	bl	8003f88 <LL_ADC_IsEnabled>
 80041a8:	4603      	mov	r3, r0
 80041aa:	4323      	orrs	r3, r4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4874      	ldr	r0, [pc, #464]	; (8004388 <HAL_ADC_Init+0x2f0>)
 80041b8:	f7ff fcdc 	bl	8003b74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7f5b      	ldrb	r3, [r3, #29]
 80041c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80041cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80041d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d106      	bne.n	80041f8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	045b      	lsls	r3, r3, #17
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	4b5c      	ldr	r3, [pc, #368]	; (800438c <HAL_ADC_Init+0x2f4>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	69b9      	ldr	r1, [r7, #24]
 8004224:	430b      	orrs	r3, r1
 8004226:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff feee 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004248:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff0f 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 8004254:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d16d      	bne.n	8004338 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d16a      	bne.n	8004338 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004266:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800426e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427e:	f023 0302 	bic.w	r3, r3, #2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	430b      	orrs	r3, r1
 800428a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6911      	ldr	r1, [r2, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	430b      	orrs	r3, r1
 80042be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80042c2:	e013      	b.n	80042ec <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d118      	bne.n	8004328 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004318:	430a      	orrs	r2, r1
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e007      	b.n	8004338 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10c      	bne.n	800435a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f023 010f 	bic.w	r1, r3, #15
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
 8004358:	e007      	b.n	800436a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 020f 	bic.w	r2, r2, #15
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	65da      	str	r2, [r3, #92]	; 0x5c
 800437a:	e011      	b.n	80043a0 <HAL_ADC_Init+0x308>
 800437c:	200000f4 	.word	0x200000f4
 8004380:	053e2d63 	.word	0x053e2d63
 8004384:	50000100 	.word	0x50000100
 8004388:	50000300 	.word	0x50000300
 800438c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	f043 0210 	orr.w	r2, r3, #16
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	bf00      	nop

080043ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043b4:	4859      	ldr	r0, [pc, #356]	; (800451c <HAL_ADC_Start+0x170>)
 80043b6:	f7ff fd55 	bl	8003e64 <LL_ADC_GetMultimode>
 80043ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fe2f 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f040 809f 	bne.w	800450c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_ADC_Start+0x30>
 80043d8:	2302      	movs	r3, #2
 80043da:	e09a      	b.n	8004512 <HAL_ADC_Start+0x166>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 f945 	bl	8005674 <ADC_Enable>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8086 	bne.w	8004502 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a44      	ldr	r2, [pc, #272]	; (8004520 <HAL_ADC_Start+0x174>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d002      	beq.n	800441a <HAL_ADC_Start+0x6e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	e001      	b.n	800441e <HAL_ADC_Start+0x72>
 800441a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	4293      	cmp	r3, r2
 8004424:	d002      	beq.n	800442c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d106      	bne.n	8004454 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f023 0206 	bic.w	r2, r3, #6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	; 0x60
 8004452:	e002      	b.n	800445a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	221c      	movs	r2, #28
 8004460:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <HAL_ADC_Start+0x174>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d002      	beq.n	800447a <HAL_ADC_Start+0xce>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e001      	b.n	800447e <HAL_ADC_Start+0xd2>
 800447a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	4293      	cmp	r3, r2
 8004484:	d008      	beq.n	8004498 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d002      	beq.n	8004498 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b09      	cmp	r3, #9
 8004496:	d114      	bne.n	80044c2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fd8a 	bl	8003fd4 <LL_ADC_REG_StartConversion>
 80044c0:	e026      	b.n	8004510 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_ADC_Start+0x174>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d002      	beq.n	80044de <HAL_ADC_Start+0x132>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	e001      	b.n	80044e2 <HAL_ADC_Start+0x136>
 80044de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00f      	beq.n	8004510 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004500:	e006      	b.n	8004510 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800450a:	e001      	b.n	8004510 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800450c:	2302      	movs	r3, #2
 800450e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	50000300 	.word	0x50000300
 8004520:	50000100 	.word	0x50000100

08004524 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_ADC_Stop+0x16>
 8004536:	2302      	movs	r3, #2
 8004538:	e023      	b.n	8004582 <HAL_ADC_Stop+0x5e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004542:	2103      	movs	r1, #3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 ffd9 	bl	80054fc <ADC_ConversionStop>
 800454a:	4603      	mov	r3, r0
 800454c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f001 f8ef 	bl	8005738 <ADC_Disable>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004596:	4867      	ldr	r0, [pc, #412]	; (8004734 <HAL_ADC_PollForConversion+0x1a8>)
 8004598:	f7ff fc64 	bl	8003e64 <LL_ADC_GetMultimode>
 800459c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d102      	bne.n	80045ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80045a6:	2308      	movs	r3, #8
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	e02a      	b.n	8004602 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d002      	beq.n	80045be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b09      	cmp	r3, #9
 80045bc:	d111      	bne.n	80045e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0a6      	b.n	800472a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80045dc:	2304      	movs	r3, #4
 80045de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045e0:	e00f      	b.n	8004602 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80045e2:	4854      	ldr	r0, [pc, #336]	; (8004734 <HAL_ADC_PollForConversion+0x1a8>)
 80045e4:	f7ff fc4c 	bl	8003e80 <LL_ADC_GetMultiDMATransfer>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e095      	b.n	800472a <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80045fe:	2304      	movs	r3, #4
 8004600:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004602:	f7ff fa89 	bl	8003b18 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004608:	e021      	b.n	800464e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d01d      	beq.n	800464e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004612:	f7ff fa81 	bl	8003b18 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <HAL_ADC_PollForConversion+0x9c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d112      	bne.n	800464e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e06d      	b.n	800472a <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0d6      	beq.n	800460a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fb53 	bl	8003d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01c      	beq.n	80046b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7f5b      	ldrb	r3, [r3, #29]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d118      	bne.n	80046b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b08      	cmp	r3, #8
 800468c:	d111      	bne.n	80046b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <HAL_ADC_PollForConversion+0x1ac>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d002      	beq.n	80046c2 <HAL_ADC_PollForConversion+0x136>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	e001      	b.n	80046c6 <HAL_ADC_PollForConversion+0x13a>
 80046c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d008      	beq.n	80046e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d002      	beq.n	80046e0 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	d104      	bne.n	80046ea <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e00d      	b.n	8004706 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a12      	ldr	r2, [pc, #72]	; (8004738 <HAL_ADC_PollForConversion+0x1ac>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d002      	beq.n	80046fa <HAL_ADC_PollForConversion+0x16e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	e001      	b.n	80046fe <HAL_ADC_PollForConversion+0x172>
 80046fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d104      	bne.n	8004716 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2208      	movs	r2, #8
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e008      	b.n	8004728 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	220c      	movs	r2, #12
 8004726:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	50000300 	.word	0x50000300
 8004738:	50000100 	.word	0x50000100

0800473c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004748:	4851      	ldr	r0, [pc, #324]	; (8004890 <HAL_ADC_Start_DMA+0x154>)
 800474a:	f7ff fb8b 	bl	8003e64 <LL_ADC_GetMultimode>
 800474e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fc65 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 808f 	bne.w	8004880 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_ADC_Start_DMA+0x34>
 800476c:	2302      	movs	r3, #2
 800476e:	e08a      	b.n	8004886 <HAL_ADC_Start_DMA+0x14a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b05      	cmp	r3, #5
 8004782:	d002      	beq.n	800478a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b09      	cmp	r3, #9
 8004788:	d173      	bne.n	8004872 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 ff72 	bl	8005674 <ADC_Enable>
 8004790:	4603      	mov	r3, r0
 8004792:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d166      	bne.n	8004868 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a38      	ldr	r2, [pc, #224]	; (8004894 <HAL_ADC_Start_DMA+0x158>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d002      	beq.n	80047be <HAL_ADC_Start_DMA+0x82>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	e001      	b.n	80047c2 <HAL_ADC_Start_DMA+0x86>
 80047be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d002      	beq.n	80047d0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ec:	f023 0206 	bic.w	r2, r3, #6
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	661a      	str	r2, [r3, #96]	; 0x60
 80047f4:	e002      	b.n	80047fc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	4a25      	ldr	r2, [pc, #148]	; (8004898 <HAL_ADC_Start_DMA+0x15c>)
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	4a24      	ldr	r2, [pc, #144]	; (800489c <HAL_ADC_Start_DMA+0x160>)
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	4a23      	ldr	r2, [pc, #140]	; (80048a0 <HAL_ADC_Start_DMA+0x164>)
 8004812:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	221c      	movs	r2, #28
 800481a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0210 	orr.w	r2, r2, #16
 8004832:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3340      	adds	r3, #64	; 0x40
 800484e:	4619      	mov	r1, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f001 fdea 	bl	800642c <HAL_DMA_Start_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fbb7 	bl	8003fd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004866:	e00d      	b.n	8004884 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004870:	e008      	b.n	8004884 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800487e:	e001      	b.n	8004884 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004880:	2302      	movs	r3, #2
 8004882:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	50000300 	.word	0x50000300
 8004894:	50000100 	.word	0x50000100
 8004898:	080057f7 	.word	0x080057f7
 800489c:	080058cf 	.word	0x080058cf
 80048a0:	080058eb 	.word	0x080058eb

080048a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048dc:	4883      	ldr	r0, [pc, #524]	; (8004aec <HAL_ADC_IRQHandler+0x22c>)
 80048de:	f7ff fac1 	bl	8003e64 <LL_ADC_GetMultimode>
 80048e2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d017      	beq.n	800491e <HAL_ADC_IRQHandler+0x5e>
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d012      	beq.n	800491e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 f8e1 	bl	8005ad8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2202      	movs	r2, #2
 800491c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_ADC_IRQHandler+0x72>
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8085 	beq.w	8004a48 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d07f      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff f9d7 	bl	8003d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d064      	beq.n	8004a3a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5e      	ldr	r2, [pc, #376]	; (8004af0 <HAL_ADC_IRQHandler+0x230>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d002      	beq.n	8004980 <HAL_ADC_IRQHandler+0xc0>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	e001      	b.n	8004984 <HAL_ADC_IRQHandler+0xc4>
 8004980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4293      	cmp	r3, r2
 800498a:	d008      	beq.n	800499e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d002      	beq.n	800499e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b09      	cmp	r3, #9
 800499c:	d104      	bne.n	80049a8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	e00d      	b.n	80049c4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a50      	ldr	r2, [pc, #320]	; (8004af0 <HAL_ADC_IRQHandler+0x230>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d002      	beq.n	80049b8 <HAL_ADC_IRQHandler+0xf8>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	e001      	b.n	80049bc <HAL_ADC_IRQHandler+0xfc>
 80049b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049bc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d135      	bne.n	8004a3a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d12e      	bne.n	8004a3a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fb1f 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d11a      	bne.n	8004a22 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 020c 	bic.w	r2, r2, #12
 80049fa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d112      	bne.n	8004a3a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a20:	e00b      	b.n	8004a3a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	f043 0210 	orr.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fb1c 	bl	8002078 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	220c      	movs	r2, #12
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <HAL_ADC_IRQHandler+0x19c>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 809e 	beq.w	8004ba4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8098 	beq.w	8004ba4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f980 	bl	8003d96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a96:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff f93b 	bl	8003d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004aa2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <HAL_ADC_IRQHandler+0x230>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d002      	beq.n	8004ab4 <HAL_ADC_IRQHandler+0x1f4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	e001      	b.n	8004ab8 <HAL_ADC_IRQHandler+0x1f8>
 8004ab4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d008      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d002      	beq.n	8004ad2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b07      	cmp	r3, #7
 8004ad0:	d104      	bne.n	8004adc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	623b      	str	r3, [r7, #32]
 8004ada:	e011      	b.n	8004b00 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <HAL_ADC_IRQHandler+0x230>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d006      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x234>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	e005      	b.n	8004af8 <HAL_ADC_IRQHandler+0x238>
 8004aec:	50000300 	.word	0x50000300
 8004af0:	50000100 	.word	0x50000100
 8004af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004af8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d047      	beq.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_ADC_IRQHandler+0x260>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03f      	beq.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d13a      	bne.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d133      	bne.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d12e      	bne.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fa98 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11a      	bne.n	8004b7e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b56:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d112      	bne.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b7c:	e00b      	b.n	8004b96 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 ff76 	bl	8005a88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2260      	movs	r2, #96	; 0x60
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d011      	beq.n	8004bd2 <HAL_ADC_IRQHandler+0x312>
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f895 	bl	8004cf4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d012      	beq.n	8004c02 <HAL_ADC_IRQHandler+0x342>
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00d      	beq.n	8004c02 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 ff5c 	bl	8005ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <HAL_ADC_IRQHandler+0x372>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 ff4e 	bl	8005ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d036      	beq.n	8004caa <HAL_ADC_IRQHandler+0x3ea>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d031      	beq.n	8004caa <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e014      	b.n	8004c7e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c5a:	4825      	ldr	r0, [pc, #148]	; (8004cf0 <HAL_ADC_IRQHandler+0x430>)
 8004c5c:	f7ff f910 	bl	8003e80 <LL_ADC_GetMultiDMATransfer>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004c66:	2301      	movs	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	e008      	b.n	8004c7e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d10e      	bne.n	8004ca2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c94:	f043 0202 	orr.w	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f833 	bl	8004d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2210      	movs	r2, #16
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d018      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x426>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d013      	beq.n	8004ce6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f043 0208 	orr.w	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cde:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fedb 	bl	8005a9c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	; 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	50000300 	.word	0x50000300

08004cf4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b0b6      	sub	sp, #216	; 0xd8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x22>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e3c8      	b.n	80054d0 <HAL_ADC_ConfigChannel+0x7b4>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff f96a 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 83ad 	bne.w	80054b2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	f7fe ffea 	bl	8003d3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f958 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8004d74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff f978 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 8004d82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f040 81d9 	bne.w	8005142 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 81d4 	bne.w	8005142 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da2:	d10f      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7ff f804 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe ff98 	bl	8003cf2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004dc2:	e00e      	b.n	8004de2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6819      	ldr	r1, [r3, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f7fe fff3 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe ff88 	bl	8003cf2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d022      	beq.n	8004e4a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6919      	ldr	r1, [r3, #16]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e14:	f7fe fee2 	bl	8003bdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6919      	ldr	r1, [r3, #16]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	461a      	mov	r2, r3
 8004e26:	f7fe ff2e 	bl	8003c86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6919      	ldr	r1, [r3, #16]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	7f1b      	ldrb	r3, [r3, #28]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x124>
 8004e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e3e:	e000      	b.n	8004e42 <HAL_ADC_ConfigChannel+0x126>
 8004e40:	2300      	movs	r3, #0
 8004e42:	461a      	mov	r2, r3
 8004e44:	f7fe ff3a 	bl	8003cbc <LL_ADC_SetOffsetSaturation>
 8004e48:	e17b      	b.n	8005142 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fee7 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x15a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe fedc 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	0e9b      	lsrs	r3, r3, #26
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	e01e      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x198>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fed1 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e8c:	fa93 f3a3 	rbit	r3, r3
 8004e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	e004      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004eac:	fab3 f383 	clz	r3, r3
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1b0>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0e9b      	lsrs	r3, r3, #26
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	e018      	b.n	8004efe <HAL_ADC_ConfigChannel+0x1e2>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e004      	b.n	8004efe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d106      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fea0 	bl	8003c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fe84 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x220>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fe79 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004f32:	4603      	mov	r3, r0
 8004f34:	0e9b      	lsrs	r3, r3, #26
 8004f36:	f003 021f 	and.w	r2, r3, #31
 8004f3a:	e01e      	b.n	8004f7a <HAL_ADC_ConfigChannel+0x25e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fe fe6e 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f52:	fa93 f3a3 	rbit	r3, r3
 8004f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	e004      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x276>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	0e9b      	lsrs	r3, r3, #26
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	e018      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x2a8>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	e004      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2101      	movs	r1, #1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fe3d 	bl	8003c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2102      	movs	r1, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe fe21 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <HAL_ADC_ConfigChannel+0x2e6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fe16 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	0e9b      	lsrs	r3, r3, #26
 8004ffc:	f003 021f 	and.w	r2, r3, #31
 8005000:	e01e      	b.n	8005040 <HAL_ADC_ConfigChannel+0x324>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2102      	movs	r1, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe fe0b 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 800500e:	4603      	mov	r3, r0
 8005010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	e004      	b.n	800503e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005034:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005038:	fab3 f383 	clz	r3, r3
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x33c>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	0e9b      	lsrs	r3, r3, #26
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	e016      	b.n	8005086 <HAL_ADC_ConfigChannel+0x36a>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005064:	fa93 f3a3 	rbit	r3, r3
 8005068:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800506a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005078:	2320      	movs	r3, #32
 800507a:	e004      	b.n	8005086 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800507c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005086:	429a      	cmp	r2, r3
 8005088:	d106      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	2102      	movs	r1, #2
 8005092:	4618      	mov	r0, r3
 8005094:	f7fe fddc 	bl	8003c50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2103      	movs	r1, #3
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fdc0 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x3a8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2103      	movs	r1, #3
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe fdb5 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 80050ba:	4603      	mov	r3, r0
 80050bc:	0e9b      	lsrs	r3, r3, #26
 80050be:	f003 021f 	and.w	r2, r3, #31
 80050c2:	e017      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x3d8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2103      	movs	r1, #3
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fdaa 	bl	8003c24 <LL_ADC_GetOffsetChannel>
 80050d0:	4603      	mov	r3, r0
 80050d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80050dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050de:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80050e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80050e6:	2320      	movs	r3, #32
 80050e8:	e003      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80050ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_ADC_ConfigChannel+0x3f0>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	e011      	b.n	8005130 <HAL_ADC_ConfigChannel+0x414>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800511a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e003      	b.n	8005130 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005130:	429a      	cmp	r2, r3
 8005132:	d106      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2200      	movs	r2, #0
 800513a:	2103      	movs	r1, #3
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fd87 	bl	8003c50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe ff1e 	bl	8003f88 <LL_ADC_IsEnabled>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 8140 	bne.w	80053d4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	461a      	mov	r2, r3
 8005162:	f7fe fe57 	bl	8003e14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	4a8f      	ldr	r2, [pc, #572]	; (80053a8 <HAL_ADC_ConfigChannel+0x68c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	f040 8131 	bne.w	80053d4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_ADC_ConfigChannel+0x47e>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	0e9b      	lsrs	r3, r3, #26
 8005188:	3301      	adds	r3, #1
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2b09      	cmp	r3, #9
 8005190:	bf94      	ite	ls
 8005192:	2301      	movls	r3, #1
 8005194:	2300      	movhi	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e019      	b.n	80051ce <HAL_ADC_ConfigChannel+0x4b2>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80051a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80051ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80051b2:	2320      	movs	r3, #32
 80051b4:	e003      	b.n	80051be <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80051b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b8:	fab3 f383 	clz	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	3301      	adds	r3, #1
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	bf94      	ite	ls
 80051c8:	2301      	movls	r3, #1
 80051ca:	2300      	movhi	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d079      	beq.n	80052c6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x4d2>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	0e9b      	lsrs	r3, r3, #26
 80051e4:	3301      	adds	r3, #1
 80051e6:	069b      	lsls	r3, r3, #26
 80051e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051ec:	e015      	b.n	800521a <HAL_ADC_ConfigChannel+0x4fe>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f6:	fa93 f3a3 	rbit	r3, r3
 80051fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005206:	2320      	movs	r3, #32
 8005208:	e003      	b.n	8005212 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3301      	adds	r3, #1
 8005214:	069b      	lsls	r3, r3, #26
 8005216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_ADC_ConfigChannel+0x51e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	0e9b      	lsrs	r3, r3, #26
 800522c:	3301      	adds	r3, #1
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	e017      	b.n	800526a <HAL_ADC_ConfigChannel+0x54e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005242:	fa93 f3a3 	rbit	r3, r3
 8005246:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800524c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005252:	2320      	movs	r3, #32
 8005254:	e003      	b.n	800525e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005258:	fab3 f383 	clz	r3, r3
 800525c:	b2db      	uxtb	r3, r3
 800525e:	3301      	adds	r3, #1
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	ea42 0103 	orr.w	r1, r2, r3
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x574>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	0e9b      	lsrs	r3, r3, #26
 8005280:	3301      	adds	r3, #1
 8005282:	f003 021f 	and.w	r2, r3, #31
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	e018      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x5a6>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	fa93 f3a3 	rbit	r3, r3
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80052a8:	2320      	movs	r3, #32
 80052aa:	e003      	b.n	80052b4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80052ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f003 021f 	and.w	r2, r3, #31
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052c2:	430b      	orrs	r3, r1
 80052c4:	e081      	b.n	80053ca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d107      	bne.n	80052e2 <HAL_ADC_ConfigChannel+0x5c6>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	0e9b      	lsrs	r3, r3, #26
 80052d8:	3301      	adds	r3, #1
 80052da:	069b      	lsls	r3, r3, #26
 80052dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052e0:	e015      	b.n	800530e <HAL_ADC_ConfigChannel+0x5f2>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	fa93 f3a3 	rbit	r3, r3
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80052fa:	2320      	movs	r3, #32
 80052fc:	e003      	b.n	8005306 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	fab3 f383 	clz	r3, r3
 8005304:	b2db      	uxtb	r3, r3
 8005306:	3301      	adds	r3, #1
 8005308:	069b      	lsls	r3, r3, #26
 800530a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <HAL_ADC_ConfigChannel+0x612>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	0e9b      	lsrs	r3, r3, #26
 8005320:	3301      	adds	r3, #1
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2101      	movs	r1, #1
 8005328:	fa01 f303 	lsl.w	r3, r1, r3
 800532c:	e017      	b.n	800535e <HAL_ADC_ConfigChannel+0x642>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	fa93 f3a3 	rbit	r3, r3
 800533a:	61fb      	str	r3, [r7, #28]
  return result;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005346:	2320      	movs	r3, #32
 8005348:	e003      	b.n	8005352 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	fab3 f383 	clz	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	3301      	adds	r3, #1
 8005354:	f003 031f 	and.w	r3, r3, #31
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	ea42 0103 	orr.w	r1, r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <HAL_ADC_ConfigChannel+0x66e>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0e9b      	lsrs	r3, r3, #26
 8005374:	3301      	adds	r3, #1
 8005376:	f003 021f 	and.w	r2, r3, #31
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	3b1e      	subs	r3, #30
 8005382:	051b      	lsls	r3, r3, #20
 8005384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005388:	e01e      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x6ac>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	fa93 f3a3 	rbit	r3, r3
 8005396:	613b      	str	r3, [r7, #16]
  return result;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80053a2:	2320      	movs	r3, #32
 80053a4:	e006      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x698>
 80053a6:	bf00      	nop
 80053a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	3301      	adds	r3, #1
 80053b6:	f003 021f 	and.w	r2, r3, #31
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	3b1e      	subs	r3, #30
 80053c2:	051b      	lsls	r3, r3, #20
 80053c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053c8:	430b      	orrs	r3, r1
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	4619      	mov	r1, r3
 80053d0:	f7fe fcf4 	bl	8003dbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b3f      	ldr	r3, [pc, #252]	; (80054d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d071      	beq.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053e0:	483e      	ldr	r0, [pc, #248]	; (80054dc <HAL_ADC_ConfigChannel+0x7c0>)
 80053e2:	f7fe fbed 	bl	8003bc0 <LL_ADC_GetCommonPathInternalCh>
 80053e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a3c      	ldr	r2, [pc, #240]	; (80054e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_ADC_ConfigChannel+0x6e2>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3a      	ldr	r2, [pc, #232]	; (80054e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d127      	bne.n	800544e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d121      	bne.n	800544e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005412:	d157      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800541c:	4619      	mov	r1, r3
 800541e:	482f      	ldr	r0, [pc, #188]	; (80054dc <HAL_ADC_ConfigChannel+0x7c0>)
 8005420:	f7fe fbbb 	bl	8003b9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	4a30      	ldr	r2, [pc, #192]	; (80054ec <HAL_ADC_ConfigChannel+0x7d0>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	099b      	lsrs	r3, r3, #6
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800543e:	e002      	b.n	8005446 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f9      	bne.n	8005440 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800544c:	e03a      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a27      	ldr	r2, [pc, #156]	; (80054f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d113      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x764>
 8005458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800545c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10d      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02a      	beq.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800546e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005476:	4619      	mov	r1, r3
 8005478:	4818      	ldr	r0, [pc, #96]	; (80054dc <HAL_ADC_ConfigChannel+0x7c0>)
 800547a:	f7fe fb8e 	bl	8003b9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800547e:	e021      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d11c      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800548a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d011      	beq.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054a8:	4619      	mov	r1, r3
 80054aa:	480c      	ldr	r0, [pc, #48]	; (80054dc <HAL_ADC_ConfigChannel+0x7c0>)
 80054ac:	f7fe fb75 	bl	8003b9a <LL_ADC_SetCommonPathInternalCh>
 80054b0:	e008      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80054cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	37d8      	adds	r7, #216	; 0xd8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	80080000 	.word	0x80080000
 80054dc:	50000300 	.word	0x50000300
 80054e0:	c3210000 	.word	0xc3210000
 80054e4:	90c00010 	.word	0x90c00010
 80054e8:	200000f4 	.word	0x200000f4
 80054ec:	053e2d63 	.word	0x053e2d63
 80054f0:	c7520000 	.word	0xc7520000
 80054f4:	50000100 	.word	0x50000100
 80054f8:	cb840000 	.word	0xcb840000

080054fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fe fd86 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 8005518:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fda7 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 8005524:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8098 	beq.w	8005664 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d02a      	beq.n	8005598 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7f5b      	ldrb	r3, [r3, #29]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d126      	bne.n	8005598 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7f1b      	ldrb	r3, [r3, #28]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d122      	bne.n	8005598 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005552:	2301      	movs	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005556:	e014      	b.n	8005582 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4a45      	ldr	r2, [pc, #276]	; (8005670 <ADC_ConversionStop+0x174>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d90d      	bls.n	800557c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	f043 0210 	orr.w	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	f043 0201 	orr.w	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e074      	b.n	8005666 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d1e3      	bne.n	8005558 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d014      	beq.n	80055c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fd3e 	bl	8004024 <LL_ADC_REG_IsConversionOngoing>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fcfb 	bl	8003fae <LL_ADC_IsDisableOngoing>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fd1a 	bl	8003ffc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d014      	beq.n	80055f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fd4d 	bl	8004072 <LL_ADC_INJ_IsConversionOngoing>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fce3 	bl	8003fae <LL_ADC_IsDisableOngoing>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fd29 	bl	800404a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d005      	beq.n	800560a <ADC_ConversionStop+0x10e>
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d105      	bne.n	8005610 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005604:	230c      	movs	r3, #12
 8005606:	617b      	str	r3, [r7, #20]
        break;
 8005608:	e005      	b.n	8005616 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800560a:	2308      	movs	r3, #8
 800560c:	617b      	str	r3, [r7, #20]
        break;
 800560e:	e002      	b.n	8005616 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005610:	2304      	movs	r3, #4
 8005612:	617b      	str	r3, [r7, #20]
        break;
 8005614:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005616:	f7fe fa7f 	bl	8003b18 <HAL_GetTick>
 800561a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800561c:	e01b      	b.n	8005656 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800561e:	f7fe fa7b 	bl	8003b18 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b05      	cmp	r3, #5
 800562a:	d914      	bls.n	8005656 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	f043 0210 	orr.w	r2, r3, #16
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564a:	f043 0201 	orr.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e007      	b.n	8005666 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1dc      	bne.n	800561e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	a33fffff 	.word	0xa33fffff

08005674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fc81 	bl	8003f88 <LL_ADC_IsEnabled>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d14d      	bne.n	8005728 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	4b28      	ldr	r3, [pc, #160]	; (8005734 <ADC_Enable+0xc0>)
 8005694:	4013      	ands	r3, r2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00d      	beq.n	80056b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	f043 0210 	orr.w	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e039      	b.n	800572a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fc3c 	bl	8003f38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056c0:	f7fe fa2a 	bl	8003b18 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056c6:	e028      	b.n	800571a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe fc5b 	bl	8003f88 <LL_ADC_IsEnabled>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fc2b 	bl	8003f38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056e2:	f7fe fa19 	bl	8003b18 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d914      	bls.n	800571a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00d      	beq.n	800571a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	f043 0210 	orr.w	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d1cf      	bne.n	80056c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	8000003f 	.word	0x8000003f

08005738 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe fc32 	bl	8003fae <LL_ADC_IsDisableOngoing>
 800574a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fc19 	bl	8003f88 <LL_ADC_IsEnabled>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d047      	beq.n	80057ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d144      	bne.n	80057ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030d 	and.w	r3, r3, #13
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10c      	bne.n	800578a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe fbf3 	bl	8003f60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2203      	movs	r2, #3
 8005780:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005782:	f7fe f9c9 	bl	8003b18 <HAL_GetTick>
 8005786:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005788:	e029      	b.n	80057de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f043 0210 	orr.w	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579a:	f043 0201 	orr.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e023      	b.n	80057ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057a6:	f7fe f9b7 	bl	8003b18 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d914      	bls.n	80057de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c6:	f043 0210 	orr.w	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d2:	f043 0201 	orr.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e007      	b.n	80057ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1dc      	bne.n	80057a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005808:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800580c:	2b00      	cmp	r3, #0
 800580e:	d14b      	bne.n	80058a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d021      	beq.n	800586e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fa72 	bl	8003d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d032      	beq.n	80058a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d12b      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11f      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	65da      	str	r2, [r3, #92]	; 0x5c
 800586c:	e018      	b.n	80058a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d111      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f7fc fbe9 	bl	8002078 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058a6:	e00e      	b.n	80058c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fa27 	bl	8004d08 <HAL_ADC_ErrorCallback>
}
 80058ba:	e004      	b.n	80058c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7fc fab9 	bl	8001e54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005908:	f043 0204 	orr.w	r2, r3, #4
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff f9f9 	bl	8004d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <LL_ADC_IsEnabled>:
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <LL_ADC_IsEnabled+0x18>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <LL_ADC_IsEnabled+0x1a>
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_ADC_StartCalibration>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005956:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005960:	4313      	orrs	r3, r2
 8005962:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_ADC_IsCalibrationOnGoing>:
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598a:	d101      	bne.n	8005990 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_ADC_REG_IsConversionOngoing>:
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d101      	bne.n	80059b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e04d      	b.n	8005a7c <HAL_ADCEx_Calibration_Start+0xb8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fea5 	bl	8005738 <ADC_Disable>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d136      	bne.n	8005a66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a00:	f023 0302 	bic.w	r3, r3, #2
 8005a04:	f043 0202 	orr.w	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff ff96 	bl	8005944 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a18:	e014      	b.n	8005a44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a18      	ldr	r2, [pc, #96]	; (8005a84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d90d      	bls.n	8005a44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2c:	f023 0312 	bic.w	r3, r3, #18
 8005a30:	f043 0210 	orr.w	r2, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e01b      	b.n	8005a7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff ff94 	bl	8005976 <LL_ADC_IsCalibrationOnGoing>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e2      	bne.n	8005a1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	f043 0201 	orr.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a64:	e005      	b.n	8005a72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	f043 0210 	orr.w	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	0004de01 	.word	0x0004de01

08005a88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b0a1      	sub	sp, #132	; 0x84
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e08b      	b.n	8005c22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b12:	2300      	movs	r3, #0
 8005b14:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005b16:	2300      	movs	r3, #0
 8005b18:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b22:	d102      	bne.n	8005b2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b24:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	e001      	b.n	8005b2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e06a      	b.n	8005c22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff ff25 	bl	800599e <LL_ADC_REG_IsConversionOngoing>
 8005b54:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ff1f 	bl	800599e <LL_ADC_REG_IsConversionOngoing>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d14c      	bne.n	8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d149      	bne.n	8005c00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005b6e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d028      	beq.n	8005bca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	6859      	ldr	r1, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b8a:	035b      	lsls	r3, r3, #13
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b98:	f7ff fec1 	bl	800591e <LL_ADC_IsEnabled>
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	4823      	ldr	r0, [pc, #140]	; (8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ba0:	f7ff febd 	bl	800591e <LL_ADC_IsEnabled>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4323      	orrs	r3, r4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d133      	bne.n	8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005bb4:	f023 030f 	bic.w	r3, r3, #15
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	6811      	ldr	r1, [r2, #0]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc8:	e024      	b.n	8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005bda:	f7ff fea0 	bl	800591e <LL_ADC_IsEnabled>
 8005bde:	4604      	mov	r4, r0
 8005be0:	4812      	ldr	r0, [pc, #72]	; (8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005be2:	f7ff fe9c 	bl	800591e <LL_ADC_IsEnabled>
 8005be6:	4603      	mov	r3, r0
 8005be8:	4323      	orrs	r3, r4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d112      	bne.n	8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005bf6:	f023 030f 	bic.w	r3, r3, #15
 8005bfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005bfc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bfe:	e009      	b.n	8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	f043 0220 	orr.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c12:	e000      	b.n	8005c16 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3784      	adds	r7, #132	; 0x84
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd90      	pop	{r4, r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	50000100 	.word	0x50000100
 8005c30:	50000300 	.word	0x50000300

08005c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c44:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <__NVIC_SetPriorityGrouping+0x44>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c50:	4013      	ands	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c66:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <__NVIC_SetPriorityGrouping+0x44>)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	60d3      	str	r3, [r2, #12]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__NVIC_GetPriorityGrouping+0x18>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 0307 	and.w	r3, r3, #7
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	db0b      	blt.n	8005cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 021f 	and.w	r2, r3, #31
 8005cb0:	4907      	ldr	r1, [pc, #28]	; (8005cd0 <__NVIC_EnableIRQ+0x38>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2001      	movs	r0, #1
 8005cba:	fa00 f202 	lsl.w	r2, r0, r2
 8005cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e100 	.word	0xe000e100

08005cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	db0a      	blt.n	8005cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	490c      	ldr	r1, [pc, #48]	; (8005d20 <__NVIC_SetPriority+0x4c>)
 8005cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf2:	0112      	lsls	r2, r2, #4
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cfc:	e00a      	b.n	8005d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	4908      	ldr	r1, [pc, #32]	; (8005d24 <__NVIC_SetPriority+0x50>)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	3b04      	subs	r3, #4
 8005d0c:	0112      	lsls	r2, r2, #4
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	440b      	add	r3, r1
 8005d12:	761a      	strb	r2, [r3, #24]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	e000e100 	.word	0xe000e100
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f1c3 0307 	rsb	r3, r3, #7
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	bf28      	it	cs
 8005d46:	2304      	movcs	r3, #4
 8005d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	2b06      	cmp	r3, #6
 8005d50:	d902      	bls.n	8005d58 <NVIC_EncodePriority+0x30>
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3b03      	subs	r3, #3
 8005d56:	e000      	b.n	8005d5a <NVIC_EncodePriority+0x32>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43da      	mvns	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d70:	f04f 31ff 	mov.w	r1, #4294967295
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	43d9      	mvns	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d80:	4313      	orrs	r3, r2
         );
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3724      	adds	r7, #36	; 0x24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da0:	d301      	bcc.n	8005da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005da2:	2301      	movs	r3, #1
 8005da4:	e00f      	b.n	8005dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <SysTick_Config+0x40>)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dae:	210f      	movs	r1, #15
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	f7ff ff8e 	bl	8005cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <SysTick_Config+0x40>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dbe:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <SysTick_Config+0x40>)
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	e000e010 	.word	0xe000e010

08005dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff29 	bl	8005c34 <__NVIC_SetPriorityGrouping>
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	4603      	mov	r3, r0
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005df8:	f7ff ff40 	bl	8005c7c <__NVIC_GetPriorityGrouping>
 8005dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	6978      	ldr	r0, [r7, #20]
 8005e04:	f7ff ff90 	bl	8005d28 <NVIC_EncodePriority>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff ff5f 	bl	8005cd4 <__NVIC_SetPriority>
}
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	4603      	mov	r3, r0
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff ff33 	bl	8005c98 <__NVIC_EnableIRQ>
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ffa4 	bl	8005d90 <SysTick_Config>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e014      	b.n	8005e8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fc fda9 	bl	80029cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	795b      	ldrb	r3, [r3, #5]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_DAC_Start+0x16>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e043      	b.n	8005f34 <HAL_DAC_Start+0x9e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	409a      	lsls	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f7fd fe2d 	bl	8003b30 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10f      	bne.n	8005efc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d11d      	bne.n	8005f26 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	e014      	b.n	8005f26 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d107      	bne.n	8005f26 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0202 	orr.w	r2, r2, #2
 8005f24:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	3308      	adds	r3, #8
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e004      	b.n	8005f76 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	3314      	adds	r3, #20
 8005f74:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	795b      	ldrb	r3, [r3, #5]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_DAC_ConfigChannel+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e192      	b.n	80062ca <HAL_DAC_ConfigChannel+0x33e>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2202      	movs	r2, #2
 8005fae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d174      	bne.n	80060a2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005fb8:	f7fd fdae 	bl	8003b18 <HAL_GetTick>
 8005fbc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d134      	bne.n	800602e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fc4:	e011      	b.n	8005fea <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fc6:	f7fd fda7 	bl	8003b18 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d90a      	bls.n	8005fea <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f043 0208 	orr.w	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e16f      	b.n	80062ca <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fd fd99 	bl	8003b30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
 8006008:	e01e      	b.n	8006048 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800600a:	f7fd fd85 	bl	8003b18 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	d90a      	bls.n	800602e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f043 0208 	orr.w	r2, r3, #8
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2203      	movs	r2, #3
 8006028:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e14d      	b.n	80062ca <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	dbe8      	blt.n	800600a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006038:	2001      	movs	r0, #1
 800603a:	f7fd fd79 	bl	8003b30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	ea02 0103 	and.w	r1, r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	409a      	lsls	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f003 0310 	and.w	r3, r3, #16
 8006082:	21ff      	movs	r1, #255	; 0xff
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	ea02 0103 	and.w	r1, r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	409a      	lsls	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11d      	bne.n	80060e6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	221f      	movs	r2, #31
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	4013      	ands	r3, r2
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	4313      	orrs	r3, r2
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f003 0310 	and.w	r3, r3, #16
 80060f4:	2207      	movs	r2, #7
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	4013      	ands	r3, r2
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d102      	bne.n	8006110 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800610a:	2300      	movs	r3, #0
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	e00f      	b.n	8006130 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d102      	bne.n	800611e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006118:	2301      	movs	r3, #1
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	e008      	b.n	8006130 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006126:	2301      	movs	r3, #1
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	e001      	b.n	8006130 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800612c:	2300      	movs	r3, #0
 800612e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	4313      	orrs	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	4013      	ands	r3, r2
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d102      	bne.n	8006164 <HAL_DAC_ConfigChannel+0x1d8>
 800615e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006162:	e000      	b.n	8006166 <HAL_DAC_ConfigChannel+0x1da>
 8006164:	2300      	movs	r3, #0
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	4013      	ands	r3, r2
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	795b      	ldrb	r3, [r3, #5]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d102      	bne.n	8006190 <HAL_DAC_ConfigChannel+0x204>
 800618a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618e:	e000      	b.n	8006192 <HAL_DAC_ConfigChannel+0x206>
 8006190:	2300      	movs	r3, #0
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4313      	orrs	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d114      	bne.n	80061d2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80061a8:	f002 f9b8 	bl	800851c <HAL_RCC_GetHCLKFreq>
 80061ac:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4a48      	ldr	r2, [pc, #288]	; (80062d4 <HAL_DAC_ConfigChannel+0x348>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d904      	bls.n	80061c0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e00f      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4a45      	ldr	r2, [pc, #276]	; (80062d8 <HAL_DAC_ConfigChannel+0x34c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d90a      	bls.n	80061de <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
 80061d0:	e006      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	4313      	orrs	r3, r2
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
 80061dc:	e000      	b.n	80061e0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80061de:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	4313      	orrs	r3, r2
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800620a:	fa02 f303 	lsl.w	r3, r2, r3
 800620e:	43da      	mvns	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	400a      	ands	r2, r1
 8006216:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	f640 72fe 	movw	r2, #4094	; 0xffe
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	43db      	mvns	r3, r3
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	4013      	ands	r3, r2
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	4313      	orrs	r3, r2
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	22c0      	movs	r2, #192	; 0xc0
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43da      	mvns	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	400a      	ands	r2, r1
 8006270:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4313      	orrs	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	f640 710f 	movw	r1, #3855	; 0xf0f
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	43db      	mvns	r3, r3
 80062a6:	ea02 0103 	and.w	r1, r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	409a      	lsls	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3728      	adds	r7, #40	; 0x28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	09896800 	.word	0x09896800
 80062d8:	04c4b400 	.word	0x04c4b400

080062dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e08d      	b.n	800640a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_DMA_Init+0x138>)
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d80f      	bhi.n	800631a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	4b45      	ldr	r3, [pc, #276]	; (8006418 <HAL_DMA_Init+0x13c>)
 8006302:	4413      	add	r3, r2
 8006304:	4a45      	ldr	r2, [pc, #276]	; (800641c <HAL_DMA_Init+0x140>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	009a      	lsls	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a42      	ldr	r2, [pc, #264]	; (8006420 <HAL_DMA_Init+0x144>)
 8006316:	641a      	str	r2, [r3, #64]	; 0x40
 8006318:	e00e      	b.n	8006338 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	4b40      	ldr	r3, [pc, #256]	; (8006424 <HAL_DMA_Init+0x148>)
 8006322:	4413      	add	r3, r2
 8006324:	4a3d      	ldr	r2, [pc, #244]	; (800641c <HAL_DMA_Init+0x140>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	009a      	lsls	r2, r3, #2
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a3c      	ldr	r2, [pc, #240]	; (8006428 <HAL_DMA_Init+0x14c>)
 8006336:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800635c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa76 	bl	800687c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006398:	d102      	bne.n	80063a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d010      	beq.n	80063e0 <HAL_DMA_Init+0x104>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d80c      	bhi.n	80063e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa96 	bl	80068f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	e008      	b.n	80063f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40020407 	.word	0x40020407
 8006418:	bffdfff8 	.word	0xbffdfff8
 800641c:	cccccccd 	.word	0xcccccccd
 8006420:	40020000 	.word	0x40020000
 8006424:	bffdfbf8 	.word	0xbffdfbf8
 8006428:	40020400 	.word	0x40020400

0800642c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_DMA_Start_IT+0x20>
 8006448:	2302      	movs	r3, #2
 800644a:	e066      	b.n	800651a <HAL_DMA_Start_IT+0xee>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	d155      	bne.n	800650c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f9bb 	bl	8006800 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 020e 	orr.w	r2, r2, #14
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e00f      	b.n	80064c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0204 	bic.w	r2, r2, #4
 80064b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 020a 	orr.w	r2, r2, #10
 80064c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e005      	b.n	8006518 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006514:	2302      	movs	r3, #2
 8006516:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d005      	beq.n	8006546 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e037      	b.n	80065b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 020e 	bic.w	r2, r2, #14
 8006554:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006564:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f003 021f 	and.w	r2, r3, #31
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2101      	movs	r1, #1
 8006584:	fa01 f202 	lsl.w	r2, r1, r2
 8006588:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006592:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d00d      	beq.n	8006608 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2204      	movs	r2, #4
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e047      	b.n	8006698 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 020e 	bic.w	r2, r2, #14
 8006616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	f003 021f 	and.w	r2, r3, #31
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2101      	movs	r1, #1
 8006646:	fa01 f202 	lsl.w	r2, r1, r2
 800664a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006654:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800666c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006676:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	4798      	blx	r3
    }
  }
  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	2204      	movs	r2, #4
 80066c4:	409a      	lsls	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d026      	beq.n	800671c <HAL_DMA_IRQHandler+0x7a>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d021      	beq.n	800671c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d107      	bne.n	80066f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0204 	bic.w	r2, r2, #4
 80066f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f003 021f 	and.w	r2, r3, #31
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2104      	movs	r1, #4
 8006704:	fa01 f202 	lsl.w	r2, r1, r2
 8006708:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d071      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800671a:	e06c      	b.n	80067f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2202      	movs	r2, #2
 8006726:	409a      	lsls	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d02e      	beq.n	800678e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d029      	beq.n	800678e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 020a 	bic.w	r2, r2, #10
 8006756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	f003 021f 	and.w	r2, r3, #31
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	2102      	movs	r1, #2
 800676e:	fa01 f202 	lsl.w	r2, r1, r2
 8006772:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	2b00      	cmp	r3, #0
 8006782:	d038      	beq.n	80067f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800678c:	e033      	b.n	80067f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	2208      	movs	r2, #8
 8006798:	409a      	lsls	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4013      	ands	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d02a      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d025      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 020e 	bic.w	r2, r2, #14
 80067ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	f003 021f 	and.w	r2, r3, #31
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f202 	lsl.w	r2, r1, r2
 80067ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
}
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006816:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006828:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	f003 021f 	and.w	r2, r3, #31
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2101      	movs	r1, #1
 8006838:	fa01 f202 	lsl.w	r2, r1, r2
 800683c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b10      	cmp	r3, #16
 800684c:	d108      	bne.n	8006860 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800685e:	e007      	b.n	8006870 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	60da      	str	r2, [r3, #12]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800688c:	429a      	cmp	r2, r3
 800688e:	d802      	bhi.n	8006896 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006890:	4b15      	ldr	r3, [pc, #84]	; (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e001      	b.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006896:	4b15      	ldr	r3, [pc, #84]	; (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006898:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	3b08      	subs	r3, #8
 80068a6:	4a12      	ldr	r2, [pc, #72]	; (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	089b      	lsrs	r3, r3, #2
 80068b6:	009a      	lsls	r2, r3, #2
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2201      	movs	r2, #1
 80068d0:	409a      	lsls	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40020407 	.word	0x40020407
 80068e8:	40020800 	.word	0x40020800
 80068ec:	40020820 	.word	0x40020820
 80068f0:	cccccccd 	.word	0xcccccccd
 80068f4:	40020880 	.word	0x40020880

080068f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a08      	ldr	r2, [pc, #32]	; (800693c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800691a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3b01      	subs	r3, #1
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	2201      	movs	r2, #1
 8006926:	409a      	lsls	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	1000823f 	.word	0x1000823f
 800693c:	40020940 	.word	0x40020940

08006940 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e147      	b.n	8006be2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fc f91c 	bl	8002ba4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0210 	bic.w	r2, r2, #16
 800697a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800697c:	f7fd f8cc 	bl	8003b18 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006982:	e012      	b.n	80069aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006984:	f7fd f8c8 	bl	8003b18 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b0a      	cmp	r3, #10
 8006990:	d90b      	bls.n	80069aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e11b      	b.n	8006be2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d0e5      	beq.n	8006984 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069c8:	f7fd f8a6 	bl	8003b18 <HAL_GetTick>
 80069cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80069ce:	e012      	b.n	80069f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80069d0:	f7fd f8a2 	bl	8003b18 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b0a      	cmp	r3, #10
 80069dc:	d90b      	bls.n	80069f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e0f5      	b.n	8006be2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0e5      	beq.n	80069d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0202 	orr.w	r2, r2, #2
 8006a12:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a74      	ldr	r2, [pc, #464]	; (8006bec <HAL_FDCAN_Init+0x2ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d103      	bne.n	8006a26 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006a1e:	4a74      	ldr	r2, [pc, #464]	; (8006bf0 <HAL_FDCAN_Init+0x2b0>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	7c1b      	ldrb	r3, [r3, #16]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d108      	bne.n	8006a40 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3c:	619a      	str	r2, [r3, #24]
 8006a3e:	e007      	b.n	8006a50 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a4e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c5b      	ldrb	r3, [r3, #17]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d108      	bne.n	8006a6a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a66:	619a      	str	r2, [r3, #24]
 8006a68:	e007      	b.n	8006a7a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a78:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7c9b      	ldrb	r3, [r3, #18]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d108      	bne.n	8006a94 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a90:	619a      	str	r2, [r3, #24]
 8006a92:	e007      	b.n	8006aa4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006ac8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0210 	bic.w	r2, r2, #16
 8006ad8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d108      	bne.n	8006af4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699a      	ldr	r2, [r3, #24]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0204 	orr.w	r2, r2, #4
 8006af0:	619a      	str	r2, [r3, #24]
 8006af2:	e02c      	b.n	8006b4e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d028      	beq.n	8006b4e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d01c      	beq.n	8006b3e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b12:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0210 	orr.w	r2, r2, #16
 8006b22:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d110      	bne.n	8006b4e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0220 	orr.w	r2, r2, #32
 8006b3a:	619a      	str	r2, [r3, #24]
 8006b3c:	e007      	b.n	8006b4e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0220 	orr.w	r2, r2, #32
 8006b4c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b5e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006b66:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006b76:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006b78:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b82:	d115      	bne.n	8006bb0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006b92:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006b9c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006bac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006bae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fbe2 	bl	8007390 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40006400 	.word	0x40006400
 8006bf0:	40006500 	.word	0x40006500

08006bf4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d110      	bne.n	8006c2a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e006      	b.n	8006c38 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d12c      	bne.n	8006cb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e023      	b.n	8006cc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fbd2 	bl	800743c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006ca8:	2201      	movs	r2, #1
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	409a      	lsls	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e006      	b.n	8006cc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	f043 0208 	orr.w	r2, r3, #8
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
  }
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b08b      	sub	sp, #44	; 0x2c
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ce0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006ce2:	7efb      	ldrb	r3, [r7, #27]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	f040 80bc 	bne.w	8006e62 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b40      	cmp	r3, #64	; 0x40
 8006cee:	d121      	bne.n	8006d34 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0af      	b.n	8006e70 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	0a1b      	lsrs	r3, r3, #8
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	440b      	add	r3, r1
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
 8006d32:	e020      	b.n	8006d76 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e08d      	b.n	8006e70 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	440b      	add	r3, r1
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	0c9b      	lsrs	r3, r3, #18
 8006d90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e005      	b.n	8006da6 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	0fda      	lsrs	r2, r3, #31
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	e00a      	b.n	8006e30 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	441a      	add	r2, r3
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	440b      	add	r3, r1
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	623b      	str	r3, [r7, #32]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006e38:	5cd3      	ldrb	r3, [r2, r3]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d3eb      	bcc.n	8006e1a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d105      	bne.n	8006e54 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006e52:	e004      	b.n	8006e5e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e006      	b.n	8006e70 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e66:	f043 0208 	orr.w	r2, r3, #8
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
  }
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	372c      	adds	r7, #44	; 0x2c
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	0800d160 	.word	0x0800d160

08006e80 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e92:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d003      	beq.n	8006ea2 <HAL_FDCAN_ActivateNotification+0x22>
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	f040 80c8 	bne.w	8007032 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d03b      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d031      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d027      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d004      	beq.n	8006efa <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01d      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d013      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00c      	beq.n	8006f46 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d004      	beq.n	8006f5a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d13b      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d004      	beq.n	8006f6e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d131      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d127      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11d      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00c      	beq.n	8006fe2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0202 	orr.w	r2, r2, #2
 8006fe0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d009      	beq.n	8007000 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	430a      	orrs	r2, r1
 800701a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	430a      	orrs	r2, r1
 800702c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e006      	b.n	8007040 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007036:	f043 0202 	orr.w	r2, r3, #2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800705e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007068:	4013      	ands	r3, r2
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	4013      	ands	r3, r2
 8007082:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800708e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	4013      	ands	r3, r2
 800709a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80070a6:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80070be:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4013      	ands	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2240      	movs	r2, #64	; 0x40
 80070ee:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f92e 	bl	8007352 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01b      	beq.n	800713c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710e:	2b00      	cmp	r3, #0
 8007110:	d014      	beq.n	800713c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800711a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007132:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007134:	6939      	ldr	r1, [r7, #16]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8ec 	bl	8007314 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007148:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800714a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8b6 	bl	80072be <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6a3a      	ldr	r2, [r7, #32]
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007160:	6a39      	ldr	r1, [r7, #32]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fb f93c 	bl	80023e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007176:	69f9      	ldr	r1, [r7, #28]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8ab 	bl	80072d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8a0 	bl	80072ea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01a      	beq.n	80071ee <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d013      	beq.n	80071ee <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80071ce:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4013      	ands	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2280      	movs	r2, #128	; 0x80
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80071e6:	68f9      	ldr	r1, [r7, #12]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f888 	bl	80072fe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00e      	beq.n	800721a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007212:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f888 	bl	800732a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800723e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f87c 	bl	800733e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d011      	beq.n	8007278 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800726a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f876 	bl	800737a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f858 	bl	8007366 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80072b6:	bf00      	nop
 80072b8:	3728      	adds	r7, #40	; 0x28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007398:	4b27      	ldr	r3, [pc, #156]	; (8007438 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800739a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073aa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b2:	041a      	lsls	r2, r3, #16
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	061a      	lsls	r2, r3, #24
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	e005      	b.n	800741e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3304      	adds	r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	429a      	cmp	r2, r3
 8007428:	d3f3      	bcc.n	8007412 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	4000a400 	.word	0x4000a400

0800743c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800743c:	b480      	push	{r7}
 800743e:	b089      	sub	sp, #36	; 0x24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800745a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007462:	4313      	orrs	r3, r2
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e00a      	b.n	800747e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007470:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007476:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800747c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007488:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800748e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007494:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	4413      	add	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	440b      	add	r3, r1
 80074ae:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	3304      	adds	r3, #4
 80074ba:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	3304      	adds	r3, #4
 80074c6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	e020      	b.n	8007510 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	3303      	adds	r3, #3
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3302      	adds	r3, #2
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	440b      	add	r3, r1
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074e6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	3301      	adds	r3, #1
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	440b      	add	r3, r1
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074f4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	440a      	add	r2, r1
 80074fc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074fe:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	3304      	adds	r3, #4
 8007508:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	3304      	adds	r3, #4
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	4a06      	ldr	r2, [pc, #24]	; (8007530 <FDCAN_CopyMessageToRAM+0xf4>)
 8007518:	5cd3      	ldrb	r3, [r2, r3]
 800751a:	461a      	mov	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	4293      	cmp	r3, r2
 8007520:	d3d5      	bcc.n	80074ce <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	3724      	adds	r7, #36	; 0x24
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	0800d160 	.word	0x0800d160

08007534 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e033      	b.n	80075ae <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fb fb98 	bl	8002c90 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f854 	bl	8007614 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f822 	bl	80075b6 <FMAC_Reset>
 8007572:	4603      	mov	r3, r0
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10c      	bne.n	8007592 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	22a0      	movs	r2, #160	; 0xa0
 8007588:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
 8007590:	e008      	b.n	80075a4 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075be:	f7fc faab 	bl	8003b18 <HAL_GetTick>
 80075c2:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075d2:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80075d4:	e00f      	b.n	80075f6 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80075d6:	f7fc fa9f 	bl	8003b18 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80075e4:	d907      	bls.n	80075f6 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e00a      	b.n	800760c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e8      	bne.n	80075d6 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f807 	bl	8007630 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f81b 	bl	800765e <FMAC_ResetOutputStateAndDataPointers>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800769a:	e15a      	b.n	8007952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	2101      	movs	r1, #1
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	fa01 f303 	lsl.w	r3, r1, r3
 80076a8:	4013      	ands	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 814c 	beq.w	800794c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d005      	beq.n	80076cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d130      	bne.n	800772e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2203      	movs	r2, #3
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4013      	ands	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007702:	2201      	movs	r2, #1
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	fa02 f303 	lsl.w	r3, r2, r3
 800770a:	43db      	mvns	r3, r3
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4013      	ands	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	091b      	lsrs	r3, r3, #4
 8007718:	f003 0201 	and.w	r2, r3, #1
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	fa02 f303 	lsl.w	r3, r2, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	d017      	beq.n	800776a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	2203      	movs	r2, #3
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43db      	mvns	r3, r3
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d123      	bne.n	80077be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	08da      	lsrs	r2, r3, #3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3208      	adds	r2, #8
 800777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	220f      	movs	r2, #15
 800778e:	fa02 f303 	lsl.w	r3, r2, r3
 8007792:	43db      	mvns	r3, r3
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4013      	ands	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	08da      	lsrs	r2, r3, #3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3208      	adds	r2, #8
 80077b8:	6939      	ldr	r1, [r7, #16]
 80077ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2203      	movs	r2, #3
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4013      	ands	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f003 0203 	and.w	r2, r3, #3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80a6 	beq.w	800794c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007800:	4b5b      	ldr	r3, [pc, #364]	; (8007970 <HAL_GPIO_Init+0x2e4>)
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	4a5a      	ldr	r2, [pc, #360]	; (8007970 <HAL_GPIO_Init+0x2e4>)
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	6613      	str	r3, [r2, #96]	; 0x60
 800780c:	4b58      	ldr	r3, [pc, #352]	; (8007970 <HAL_GPIO_Init+0x2e4>)
 800780e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	60bb      	str	r3, [r7, #8]
 8007816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007818:	4a56      	ldr	r2, [pc, #344]	; (8007974 <HAL_GPIO_Init+0x2e8>)
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	3302      	adds	r3, #2
 8007820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	220f      	movs	r2, #15
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	43db      	mvns	r3, r3
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	4013      	ands	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007842:	d01f      	beq.n	8007884 <HAL_GPIO_Init+0x1f8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a4c      	ldr	r2, [pc, #304]	; (8007978 <HAL_GPIO_Init+0x2ec>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d019      	beq.n	8007880 <HAL_GPIO_Init+0x1f4>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a4b      	ldr	r2, [pc, #300]	; (800797c <HAL_GPIO_Init+0x2f0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <HAL_GPIO_Init+0x1f0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a4a      	ldr	r2, [pc, #296]	; (8007980 <HAL_GPIO_Init+0x2f4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00d      	beq.n	8007878 <HAL_GPIO_Init+0x1ec>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a49      	ldr	r2, [pc, #292]	; (8007984 <HAL_GPIO_Init+0x2f8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <HAL_GPIO_Init+0x1e8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a48      	ldr	r2, [pc, #288]	; (8007988 <HAL_GPIO_Init+0x2fc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d101      	bne.n	8007870 <HAL_GPIO_Init+0x1e4>
 800786c:	2305      	movs	r3, #5
 800786e:	e00a      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007870:	2306      	movs	r3, #6
 8007872:	e008      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007874:	2304      	movs	r3, #4
 8007876:	e006      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007878:	2303      	movs	r3, #3
 800787a:	e004      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 800787c:	2302      	movs	r3, #2
 800787e:	e002      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007880:	2301      	movs	r3, #1
 8007882:	e000      	b.n	8007886 <HAL_GPIO_Init+0x1fa>
 8007884:	2300      	movs	r3, #0
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	f002 0203 	and.w	r2, r2, #3
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	4093      	lsls	r3, r2
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007896:	4937      	ldr	r1, [pc, #220]	; (8007974 <HAL_GPIO_Init+0x2e8>)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	3302      	adds	r3, #2
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_GPIO_Init+0x300>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4013      	ands	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80078c8:	4a30      	ldr	r2, [pc, #192]	; (800798c <HAL_GPIO_Init+0x300>)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80078ce:	4b2f      	ldr	r3, [pc, #188]	; (800798c <HAL_GPIO_Init+0x300>)
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	43db      	mvns	r3, r3
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4013      	ands	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078f2:	4a26      	ldr	r2, [pc, #152]	; (800798c <HAL_GPIO_Init+0x300>)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80078f8:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_GPIO_Init+0x300>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	43db      	mvns	r3, r3
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4013      	ands	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800791c:	4a1b      	ldr	r2, [pc, #108]	; (800798c <HAL_GPIO_Init+0x300>)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007922:	4b1a      	ldr	r3, [pc, #104]	; (800798c <HAL_GPIO_Init+0x300>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	43db      	mvns	r3, r3
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4013      	ands	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007946:	4a11      	ldr	r2, [pc, #68]	; (800798c <HAL_GPIO_Init+0x300>)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3301      	adds	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	fa22 f303 	lsr.w	r3, r2, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	f47f ae9d 	bne.w	800769c <HAL_GPIO_Init+0x10>
  }
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40021000 	.word	0x40021000
 8007974:	40010000 	.word	0x40010000
 8007978:	48000400 	.word	0x48000400
 800797c:	48000800 	.word	0x48000800
 8007980:	48000c00 	.word	0x48000c00
 8007984:	48001000 	.word	0x48001000
 8007988:	48001400 	.word	0x48001400
 800798c:	40010400 	.word	0x40010400

08007990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	807b      	strh	r3, [r7, #2]
 800799c:	4613      	mov	r3, r2
 800799e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079a0:	787b      	ldrb	r3, [r7, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079a6:	887a      	ldrh	r2, [r7, #2]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079ac:	e002      	b.n	80079b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079ae:	887a      	ldrh	r2, [r7, #2]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d141      	bne.n	8007a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079ce:	4b4b      	ldr	r3, [pc, #300]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079da:	d131      	bne.n	8007a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80079dc:	4b47      	ldr	r3, [pc, #284]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e2:	4a46      	ldr	r2, [pc, #280]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80079ec:	4b43      	ldr	r3, [pc, #268]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80079f4:	4a41      	ldr	r2, [pc, #260]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80079f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80079fc:	4b40      	ldr	r3, [pc, #256]	; (8007b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2232      	movs	r2, #50	; 0x32
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	4a3f      	ldr	r2, [pc, #252]	; (8007b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	0c9b      	lsrs	r3, r3, #18
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a12:	e002      	b.n	8007a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a1a:	4b38      	ldr	r3, [pc, #224]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a26:	d102      	bne.n	8007a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f2      	bne.n	8007a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a2e:	4b33      	ldr	r3, [pc, #204]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3a:	d158      	bne.n	8007aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e057      	b.n	8007af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a40:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a46:	4a2d      	ldr	r2, [pc, #180]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007a50:	e04d      	b.n	8007aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a58:	d141      	bne.n	8007ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a5a:	4b28      	ldr	r3, [pc, #160]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a66:	d131      	bne.n	8007acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a68:	4b24      	ldr	r3, [pc, #144]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a6e:	4a23      	ldr	r2, [pc, #140]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a78:	4b20      	ldr	r3, [pc, #128]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a80:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a88:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2232      	movs	r2, #50	; 0x32
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a94:	fba2 2303 	umull	r2, r3, r2, r3
 8007a98:	0c9b      	lsrs	r3, r3, #18
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a9e:	e002      	b.n	8007aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab2:	d102      	bne.n	8007aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f2      	bne.n	8007aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac6:	d112      	bne.n	8007aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e011      	b.n	8007af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad2:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007adc:	e007      	b.n	8007aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ae6:	4a05      	ldr	r2, [pc, #20]	; (8007afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	40007000 	.word	0x40007000
 8007b00:	200000f4 	.word	0x200000f4
 8007b04:	431bde83 	.word	0x431bde83

08007b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	4a04      	ldr	r2, [pc, #16]	; (8007b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b16:	6093      	str	r3, [r2, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40007000 	.word	0x40007000

08007b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e306      	b.n	8008148 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d075      	beq.n	8007c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b46:	4b97      	ldr	r3, [pc, #604]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 030c 	and.w	r3, r3, #12
 8007b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b50:	4b94      	ldr	r3, [pc, #592]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCC_OscConfig+0x3e>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d002      	beq.n	8007b6c <HAL_RCC_OscConfig+0x44>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d10b      	bne.n	8007b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b6c:	4b8d      	ldr	r3, [pc, #564]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05b      	beq.n	8007c30 <HAL_RCC_OscConfig+0x108>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d157      	bne.n	8007c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e2e1      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b8c:	d106      	bne.n	8007b9c <HAL_RCC_OscConfig+0x74>
 8007b8e:	4b85      	ldr	r3, [pc, #532]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a84      	ldr	r2, [pc, #528]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	e01d      	b.n	8007bd8 <HAL_RCC_OscConfig+0xb0>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x98>
 8007ba6:	4b7f      	ldr	r3, [pc, #508]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7e      	ldr	r2, [pc, #504]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	4b7c      	ldr	r3, [pc, #496]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a7b      	ldr	r2, [pc, #492]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	e00b      	b.n	8007bd8 <HAL_RCC_OscConfig+0xb0>
 8007bc0:	4b78      	ldr	r3, [pc, #480]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a77      	ldr	r2, [pc, #476]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	4b75      	ldr	r3, [pc, #468]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a74      	ldr	r2, [pc, #464]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d013      	beq.n	8007c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fb ff9a 	bl	8003b18 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be8:	f7fb ff96 	bl	8003b18 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b64      	cmp	r3, #100	; 0x64
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e2a6      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bfa:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0xc0>
 8007c06:	e014      	b.n	8007c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fb ff86 	bl	8003b18 <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c10:	f7fb ff82 	bl	8003b18 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b64      	cmp	r3, #100	; 0x64
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e292      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c22:	4b60      	ldr	r3, [pc, #384]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <HAL_RCC_OscConfig+0xe8>
 8007c2e:	e000      	b.n	8007c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d075      	beq.n	8007d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c3e:	4b59      	ldr	r3, [pc, #356]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c48:	4b56      	ldr	r3, [pc, #344]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f003 0303 	and.w	r3, r3, #3
 8007c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	d102      	bne.n	8007c5e <HAL_RCC_OscConfig+0x136>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d002      	beq.n	8007c64 <HAL_RCC_OscConfig+0x13c>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d11f      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c64:	4b4f      	ldr	r3, [pc, #316]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_RCC_OscConfig+0x154>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e265      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c7c:	4b49      	ldr	r3, [pc, #292]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	061b      	lsls	r3, r3, #24
 8007c8a:	4946      	ldr	r1, [pc, #280]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c90:	4b45      	ldr	r3, [pc, #276]	; (8007da8 <HAL_RCC_OscConfig+0x280>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fb fef3 	bl	8003a80 <HAL_InitTick>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d043      	beq.n	8007d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e251      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d023      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cac:	4b3d      	ldr	r3, [pc, #244]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a3c      	ldr	r2, [pc, #240]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb8:	f7fb ff2e 	bl	8003b18 <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cc0:	f7fb ff2a 	bl	8003b18 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e23a      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cd2:	4b34      	ldr	r3, [pc, #208]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f0      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cde:	4b31      	ldr	r3, [pc, #196]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	061b      	lsls	r3, r3, #24
 8007cec:	492d      	ldr	r1, [pc, #180]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
 8007cf2:	e01a      	b.n	8007d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d00:	f7fb ff0a 	bl	8003b18 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d06:	e008      	b.n	8007d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d08:	f7fb ff06 	bl	8003b18 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e216      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d1a:	4b22      	ldr	r3, [pc, #136]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f0      	bne.n	8007d08 <HAL_RCC_OscConfig+0x1e0>
 8007d26:	e000      	b.n	8007d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d041      	beq.n	8007dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d01c      	beq.n	8007d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d3e:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d46:	f043 0301 	orr.w	r3, r3, #1
 8007d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4e:	f7fb fee3 	bl	8003b18 <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d56:	f7fb fedf 	bl	8003b18 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e1ef      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d68:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0ef      	beq.n	8007d56 <HAL_RCC_OscConfig+0x22e>
 8007d76:	e020      	b.n	8007dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d78:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <HAL_RCC_OscConfig+0x27c>)
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d88:	f7fb fec6 	bl	8003b18 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d8e:	e00d      	b.n	8007dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d90:	f7fb fec2 	bl	8003b18 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d906      	bls.n	8007dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e1d2      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
 8007da8:	200000f8 	.word	0x200000f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dac:	4b8c      	ldr	r3, [pc, #560]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1ea      	bne.n	8007d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 80a6 	beq.w	8007f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007dcc:	4b84      	ldr	r3, [pc, #528]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_RCC_OscConfig+0x2b4>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <HAL_RCC_OscConfig+0x2b6>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00d      	beq.n	8007dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007de2:	4b7f      	ldr	r3, [pc, #508]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de6:	4a7e      	ldr	r2, [pc, #504]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dec:	6593      	str	r3, [r2, #88]	; 0x58
 8007dee:	4b7c      	ldr	r3, [pc, #496]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dfe:	4b79      	ldr	r3, [pc, #484]	; (8007fe4 <HAL_RCC_OscConfig+0x4bc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d118      	bne.n	8007e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e0a:	4b76      	ldr	r3, [pc, #472]	; (8007fe4 <HAL_RCC_OscConfig+0x4bc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a75      	ldr	r2, [pc, #468]	; (8007fe4 <HAL_RCC_OscConfig+0x4bc>)
 8007e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e16:	f7fb fe7f 	bl	8003b18 <HAL_GetTick>
 8007e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e1e:	f7fb fe7b 	bl	8003b18 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e18b      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e30:	4b6c      	ldr	r3, [pc, #432]	; (8007fe4 <HAL_RCC_OscConfig+0x4bc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d108      	bne.n	8007e56 <HAL_RCC_OscConfig+0x32e>
 8007e44:	4b66      	ldr	r3, [pc, #408]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	4a65      	ldr	r2, [pc, #404]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e54:	e024      	b.n	8007ea0 <HAL_RCC_OscConfig+0x378>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2b05      	cmp	r3, #5
 8007e5c:	d110      	bne.n	8007e80 <HAL_RCC_OscConfig+0x358>
 8007e5e:	4b60      	ldr	r3, [pc, #384]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	4a5e      	ldr	r2, [pc, #376]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e66:	f043 0304 	orr.w	r3, r3, #4
 8007e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e6e:	4b5c      	ldr	r3, [pc, #368]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e74:	4a5a      	ldr	r2, [pc, #360]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e7e:	e00f      	b.n	8007ea0 <HAL_RCC_OscConfig+0x378>
 8007e80:	4b57      	ldr	r3, [pc, #348]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e86:	4a56      	ldr	r2, [pc, #344]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e90:	4b53      	ldr	r3, [pc, #332]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e96:	4a52      	ldr	r2, [pc, #328]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007e98:	f023 0304 	bic.w	r3, r3, #4
 8007e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea8:	f7fb fe36 	bl	8003b18 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eae:	e00a      	b.n	8007ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eb0:	f7fb fe32 	bl	8003b18 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e140      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ec6:	4b46      	ldr	r3, [pc, #280]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0ed      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x388>
 8007ed4:	e015      	b.n	8007f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed6:	f7fb fe1f 	bl	8003b18 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007edc:	e00a      	b.n	8007ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ede:	f7fb fe1b 	bl	8003b18 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e129      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ef4:	4b3a      	ldr	r3, [pc, #232]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1ed      	bne.n	8007ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f02:	7ffb      	ldrb	r3, [r7, #31]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d105      	bne.n	8007f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f08:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0c:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d03c      	beq.n	8007f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01c      	beq.n	8007f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f28:	4b2d      	ldr	r3, [pc, #180]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f38:	f7fb fdee 	bl	8003b18 <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f40:	f7fb fdea 	bl	8003b18 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e0fa      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007f52:	4b23      	ldr	r3, [pc, #140]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0ef      	beq.n	8007f40 <HAL_RCC_OscConfig+0x418>
 8007f60:	e01b      	b.n	8007f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f72:	f7fb fdd1 	bl	8003b18 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f78:	e008      	b.n	8007f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f7a:	f7fb fdcd 	bl	8003b18 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e0dd      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007f8c:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1ef      	bne.n	8007f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80d1 	beq.w	8008146 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	2b0c      	cmp	r3, #12
 8007fae:	f000 808b 	beq.w	80080c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d15e      	bne.n	8008078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a08      	ldr	r2, [pc, #32]	; (8007fe0 <HAL_RCC_OscConfig+0x4b8>)
 8007fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc6:	f7fb fda7 	bl	8003b18 <HAL_GetTick>
 8007fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fcc:	e00c      	b.n	8007fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fce:	f7fb fda3 	bl	8003b18 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d905      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e0b3      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fe8:	4b59      	ldr	r3, [pc, #356]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1ec      	bne.n	8007fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ff4:	4b56      	ldr	r3, [pc, #344]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	4b56      	ldr	r3, [pc, #344]	; (8008154 <HAL_RCC_OscConfig+0x62c>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	6a11      	ldr	r1, [r2, #32]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008004:	3a01      	subs	r2, #1
 8008006:	0112      	lsls	r2, r2, #4
 8008008:	4311      	orrs	r1, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800800e:	0212      	lsls	r2, r2, #8
 8008010:	4311      	orrs	r1, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008016:	0852      	lsrs	r2, r2, #1
 8008018:	3a01      	subs	r2, #1
 800801a:	0552      	lsls	r2, r2, #21
 800801c:	4311      	orrs	r1, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008022:	0852      	lsrs	r2, r2, #1
 8008024:	3a01      	subs	r2, #1
 8008026:	0652      	lsls	r2, r2, #25
 8008028:	4311      	orrs	r1, r2
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800802e:	06d2      	lsls	r2, r2, #27
 8008030:	430a      	orrs	r2, r1
 8008032:	4947      	ldr	r1, [pc, #284]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8008034:	4313      	orrs	r3, r2
 8008036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008038:	4b45      	ldr	r3, [pc, #276]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a44      	ldr	r2, [pc, #272]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800803e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008044:	4b42      	ldr	r3, [pc, #264]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a41      	ldr	r2, [pc, #260]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800804a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800804e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008050:	f7fb fd62 	bl	8003b18 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008058:	f7fb fd5e 	bl	8003b18 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e06e      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800806a:	4b39      	ldr	r3, [pc, #228]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0x530>
 8008076:	e066      	b.n	8008146 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008078:	4b35      	ldr	r3, [pc, #212]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800807e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008082:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008084:	4b32      	ldr	r3, [pc, #200]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	4a31      	ldr	r2, [pc, #196]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008090:	4b2f      	ldr	r3, [pc, #188]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	4a2e      	ldr	r2, [pc, #184]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 8008096:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800809a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7fb fd3a 	bl	8003b18 <HAL_GetTick>
 80080a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a8:	f7fb fd36 	bl	8003b18 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e046      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080ba:	4b25      	ldr	r3, [pc, #148]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f0      	bne.n	80080a8 <HAL_RCC_OscConfig+0x580>
 80080c6:	e03e      	b.n	8008146 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	69db      	ldr	r3, [r3, #28]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e039      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80080d4:	4b1e      	ldr	r3, [pc, #120]	; (8008150 <HAL_RCC_OscConfig+0x628>)
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f003 0203 	and.w	r2, r3, #3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d12c      	bne.n	8008142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	3b01      	subs	r3, #1
 80080f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d123      	bne.n	8008142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008106:	429a      	cmp	r2, r3
 8008108:	d11b      	bne.n	8008142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008116:	429a      	cmp	r2, r3
 8008118:	d113      	bne.n	8008142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	085b      	lsrs	r3, r3, #1
 8008126:	3b01      	subs	r3, #1
 8008128:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800812a:	429a      	cmp	r2, r3
 800812c:	d109      	bne.n	8008142 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	3b01      	subs	r3, #1
 800813c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800813e:	429a      	cmp	r2, r3
 8008140:	d001      	beq.n	8008146 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40021000 	.word	0x40021000
 8008154:	019f800c 	.word	0x019f800c

08008158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e11e      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008170:	4b91      	ldr	r3, [pc, #580]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d910      	bls.n	80081a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817e:	4b8e      	ldr	r3, [pc, #568]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f023 020f 	bic.w	r2, r3, #15
 8008186:	498c      	ldr	r1, [pc, #560]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	4313      	orrs	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818e:	4b8a      	ldr	r3, [pc, #552]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e106      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d073      	beq.n	8008294 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d129      	bne.n	8008208 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081b4:	4b81      	ldr	r3, [pc, #516]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0f4      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80081c4:	f000 f9e2 	bl	800858c <RCC_GetSysClockFreqFromPLLSource>
 80081c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4a7c      	ldr	r2, [pc, #496]	; (80083c0 <HAL_RCC_ClockConfig+0x268>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d93f      	bls.n	8008252 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80081d2:	4b7a      	ldr	r3, [pc, #488]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d033      	beq.n	8008252 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d12f      	bne.n	8008252 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80081f2:	4b72      	ldr	r3, [pc, #456]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081fa:	4a70      	ldr	r2, [pc, #448]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80081fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008200:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008202:	2380      	movs	r3, #128	; 0x80
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e024      	b.n	8008252 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b02      	cmp	r3, #2
 800820e:	d107      	bne.n	8008220 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008210:	4b6a      	ldr	r3, [pc, #424]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d109      	bne.n	8008230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e0c6      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008220:	4b66      	ldr	r3, [pc, #408]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e0be      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008230:	f000 f914 	bl	800845c <HAL_RCC_GetSysClockFreq>
 8008234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4a61      	ldr	r2, [pc, #388]	; (80083c0 <HAL_RCC_ClockConfig+0x268>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d909      	bls.n	8008252 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800823e:	4b5f      	ldr	r3, [pc, #380]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008246:	4a5d      	ldr	r2, [pc, #372]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800824e:	2380      	movs	r3, #128	; 0x80
 8008250:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008252:	4b5a      	ldr	r3, [pc, #360]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f023 0203 	bic.w	r2, r3, #3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	4957      	ldr	r1, [pc, #348]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008260:	4313      	orrs	r3, r2
 8008262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008264:	f7fb fc58 	bl	8003b18 <HAL_GetTick>
 8008268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800826a:	e00a      	b.n	8008282 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800826c:	f7fb fc54 	bl	8003b18 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	; 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e095      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008282:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 020c 	and.w	r2, r3, #12
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	429a      	cmp	r2, r3
 8008292:	d1eb      	bne.n	800826c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d023      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082ac:	4b43      	ldr	r3, [pc, #268]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a42      	ldr	r2, [pc, #264]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80082b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80082c4:	4b3d      	ldr	r3, [pc, #244]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082cc:	4a3b      	ldr	r2, [pc, #236]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80082d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4936      	ldr	r1, [pc, #216]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]
 80082e6:	e008      	b.n	80082fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b80      	cmp	r3, #128	; 0x80
 80082ec:	d105      	bne.n	80082fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80082ee:	4b33      	ldr	r3, [pc, #204]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	4a32      	ldr	r2, [pc, #200]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 80082f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082fa:	4b2f      	ldr	r3, [pc, #188]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d21d      	bcs.n	8008344 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f023 020f 	bic.w	r2, r3, #15
 8008310:	4929      	ldr	r1, [pc, #164]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	4313      	orrs	r3, r2
 8008316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008318:	f7fb fbfe 	bl	8003b18 <HAL_GetTick>
 800831c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800831e:	e00a      	b.n	8008336 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008320:	f7fb fbfa 	bl	8003b18 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f241 3288 	movw	r2, #5000	; 0x1388
 800832e:	4293      	cmp	r3, r2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e03b      	b.n	80083ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008336:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <HAL_RCC_ClockConfig+0x260>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d1ed      	bne.n	8008320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008350:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	4917      	ldr	r1, [pc, #92]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 800835e:	4313      	orrs	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d009      	beq.n	8008382 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800836e:	4b13      	ldr	r3, [pc, #76]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	490f      	ldr	r1, [pc, #60]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 800837e:	4313      	orrs	r3, r2
 8008380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008382:	f000 f86b 	bl	800845c <HAL_RCC_GetSysClockFreq>
 8008386:	4602      	mov	r2, r0
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_RCC_ClockConfig+0x264>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	091b      	lsrs	r3, r3, #4
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	490c      	ldr	r1, [pc, #48]	; (80083c4 <HAL_RCC_ClockConfig+0x26c>)
 8008394:	5ccb      	ldrb	r3, [r1, r3]
 8008396:	f003 031f 	and.w	r3, r3, #31
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <HAL_RCC_ClockConfig+0x270>)
 80083a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80083a2:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <HAL_RCC_ClockConfig+0x274>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fb fb6a 	bl	8003a80 <HAL_InitTick>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40022000 	.word	0x40022000
 80083bc:	40021000 	.word	0x40021000
 80083c0:	04c4b400 	.word	0x04c4b400
 80083c4:	0800d148 	.word	0x0800d148
 80083c8:	200000f4 	.word	0x200000f4
 80083cc:	200000f8 	.word	0x200000f8

080083d0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08c      	sub	sp, #48	; 0x30
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80083dc:	2302      	movs	r3, #2
 80083de:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80083e0:	2303      	movs	r3, #3
 80083e2:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80083fc:	029b      	lsls	r3, r3, #10
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <HAL_RCC_MCOConfig+0x88>)
 800840c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800840e:	2101      	movs	r1, #1
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	fa01 f303 	lsl.w	r3, r1, r3
 8008416:	4910      	ldr	r1, [pc, #64]	; (8008458 <HAL_RCC_MCOConfig+0x88>)
 8008418:	4313      	orrs	r3, r2
 800841a:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	b29b      	uxth	r3, r3
 8008420:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	0d1b      	lsrs	r3, r3, #20
 8008426:	b2db      	uxtb	r3, r3
 8008428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800842a:	f107 0310 	add.w	r3, r7, #16
 800842e:	4619      	mov	r1, r3
 8008430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008432:	f7ff f92b 	bl	800768c <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d109      	bne.n	8008450 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <HAL_RCC_MCOConfig+0x88>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	430b      	orrs	r3, r1
 800844a:	4903      	ldr	r1, [pc, #12]	; (8008458 <HAL_RCC_MCOConfig+0x88>)
 800844c:	4313      	orrs	r3, r2
 800844e:	608b      	str	r3, [r1, #8]
  }
}
 8008450:	bf00      	nop
 8008452:	3730      	adds	r7, #48	; 0x30
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40021000 	.word	0x40021000

0800845c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008462:	4b2c      	ldr	r3, [pc, #176]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f003 030c 	and.w	r3, r3, #12
 800846a:	2b04      	cmp	r3, #4
 800846c:	d102      	bne.n	8008474 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800846e:	4b2a      	ldr	r3, [pc, #168]	; (8008518 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	e047      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f003 030c 	and.w	r3, r3, #12
 800847c:	2b08      	cmp	r3, #8
 800847e:	d102      	bne.n	8008486 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	e03e      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 030c 	and.w	r3, r3, #12
 800848e:	2b0c      	cmp	r3, #12
 8008490:	d136      	bne.n	8008500 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008492:	4b20      	ldr	r3, [pc, #128]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800849c:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	3301      	adds	r3, #1
 80084a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d10c      	bne.n	80084ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084b0:	4a19      	ldr	r2, [pc, #100]	; (8008518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	4a16      	ldr	r2, [pc, #88]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ba:	68d2      	ldr	r2, [r2, #12]
 80084bc:	0a12      	lsrs	r2, r2, #8
 80084be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	617b      	str	r3, [r7, #20]
      break;
 80084c8:	e00c      	b.n	80084e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084ca:	4a13      	ldr	r2, [pc, #76]	; (8008518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d4:	68d2      	ldr	r2, [r2, #12]
 80084d6:	0a12      	lsrs	r2, r2, #8
 80084d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
 80084e0:	617b      	str	r3, [r7, #20]
      break;
 80084e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	0e5b      	lsrs	r3, r3, #25
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	3301      	adds	r3, #1
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	e001      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008504:	693b      	ldr	r3, [r7, #16]
}
 8008506:	4618      	mov	r0, r3
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40021000 	.word	0x40021000
 8008518:	00f42400 	.word	0x00f42400

0800851c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008520:	4b03      	ldr	r3, [pc, #12]	; (8008530 <HAL_RCC_GetHCLKFreq+0x14>)
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	200000f4 	.word	0x200000f4

08008534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008538:	f7ff fff0 	bl	800851c <HAL_RCC_GetHCLKFreq>
 800853c:	4602      	mov	r2, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	4904      	ldr	r1, [pc, #16]	; (800855c <HAL_RCC_GetPCLK1Freq+0x28>)
 800854a:	5ccb      	ldrb	r3, [r1, r3]
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40021000 	.word	0x40021000
 800855c:	0800d158 	.word	0x0800d158

08008560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008564:	f7ff ffda 	bl	800851c <HAL_RCC_GetHCLKFreq>
 8008568:	4602      	mov	r2, r0
 800856a:	4b06      	ldr	r3, [pc, #24]	; (8008584 <HAL_RCC_GetPCLK2Freq+0x24>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	0adb      	lsrs	r3, r3, #11
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	4904      	ldr	r1, [pc, #16]	; (8008588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008576:	5ccb      	ldrb	r3, [r1, r3]
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000
 8008588:	0800d158 	.word	0x0800d158

0800858c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008592:	4b1e      	ldr	r3, [pc, #120]	; (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800859c:	4b1b      	ldr	r3, [pc, #108]	; (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d10c      	bne.n	80085ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085b0:	4a17      	ldr	r2, [pc, #92]	; (8008610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b8:	4a14      	ldr	r2, [pc, #80]	; (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085ba:	68d2      	ldr	r2, [r2, #12]
 80085bc:	0a12      	lsrs	r2, r2, #8
 80085be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	617b      	str	r3, [r7, #20]
    break;
 80085c8:	e00c      	b.n	80085e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085ca:	4a11      	ldr	r2, [pc, #68]	; (8008610 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d2:	4a0e      	ldr	r2, [pc, #56]	; (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085d4:	68d2      	ldr	r2, [r2, #12]
 80085d6:	0a12      	lsrs	r2, r2, #8
 80085d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085dc:	fb02 f303 	mul.w	r3, r2, r3
 80085e0:	617b      	str	r3, [r7, #20]
    break;
 80085e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085e4:	4b09      	ldr	r3, [pc, #36]	; (800860c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	0e5b      	lsrs	r3, r3, #25
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	3301      	adds	r3, #1
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80085fe:	687b      	ldr	r3, [r7, #4]
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	40021000 	.word	0x40021000
 8008610:	00f42400 	.word	0x00f42400

08008614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800861c:	2300      	movs	r3, #0
 800861e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008620:	2300      	movs	r3, #0
 8008622:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 8098 	beq.w	8008762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008632:	2300      	movs	r3, #0
 8008634:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008636:	4b43      	ldr	r3, [pc, #268]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800863a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008642:	4b40      	ldr	r3, [pc, #256]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008646:	4a3f      	ldr	r2, [pc, #252]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800864c:	6593      	str	r3, [r2, #88]	; 0x58
 800864e:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008656:	60bb      	str	r3, [r7, #8]
 8008658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800865a:	2301      	movs	r3, #1
 800865c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800865e:	4b3a      	ldr	r3, [pc, #232]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a39      	ldr	r2, [pc, #228]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008668:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800866a:	f7fb fa55 	bl	8003b18 <HAL_GetTick>
 800866e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008670:	e009      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008672:	f7fb fa51 	bl	8003b18 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d902      	bls.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	74fb      	strb	r3, [r7, #19]
        break;
 8008684:	e005      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008686:	4b30      	ldr	r3, [pc, #192]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0ef      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008692:	7cfb      	ldrb	r3, [r7, #19]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d159      	bne.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008698:	4b2a      	ldr	r3, [pc, #168]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800869a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d01e      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d019      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086b4:	4b23      	ldr	r3, [pc, #140]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086c0:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c6:	4a1f      	ldr	r2, [pc, #124]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086e0:	4a18      	ldr	r2, [pc, #96]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d016      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fb fa11 	bl	8003b18 <HAL_GetTick>
 80086f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086f8:	e00b      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fa:	f7fb fa0d 	bl	8003b18 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	; 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d902      	bls.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	74fb      	strb	r3, [r7, #19]
            break;
 8008710:	e006      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008712:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ec      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008720:	7cfb      	ldrb	r3, [r7, #19]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d10b      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008726:	4b07      	ldr	r3, [pc, #28]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	4903      	ldr	r1, [pc, #12]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800873c:	e008      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800873e:	7cfb      	ldrb	r3, [r7, #19]
 8008740:	74bb      	strb	r3, [r7, #18]
 8008742:	e005      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008744:	40021000 	.word	0x40021000
 8008748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874c:	7cfb      	ldrb	r3, [r7, #19]
 800874e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008750:	7c7b      	ldrb	r3, [r7, #17]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d105      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008756:	4ba6      	ldr	r3, [pc, #664]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	4aa5      	ldr	r2, [pc, #660]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800875c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008760:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800876e:	4ba0      	ldr	r3, [pc, #640]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008774:	f023 0203 	bic.w	r2, r3, #3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	499c      	ldr	r1, [pc, #624]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008790:	4b97      	ldr	r3, [pc, #604]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008796:	f023 020c 	bic.w	r2, r3, #12
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	4994      	ldr	r1, [pc, #592]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087b2:	4b8f      	ldr	r3, [pc, #572]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	498b      	ldr	r1, [pc, #556]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80087d4:	4b86      	ldr	r3, [pc, #536]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	4983      	ldr	r1, [pc, #524]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087f6:	4b7e      	ldr	r3, [pc, #504]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	497a      	ldr	r1, [pc, #488]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008818:	4b75      	ldr	r3, [pc, #468]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	4972      	ldr	r1, [pc, #456]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008828:	4313      	orrs	r3, r2
 800882a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800883a:	4b6d      	ldr	r3, [pc, #436]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008840:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	4969      	ldr	r1, [pc, #420]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800884a:	4313      	orrs	r3, r2
 800884c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800885c:	4b64      	ldr	r3, [pc, #400]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	4961      	ldr	r1, [pc, #388]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800886c:	4313      	orrs	r3, r2
 800886e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800887e:	4b5c      	ldr	r3, [pc, #368]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	4958      	ldr	r1, [pc, #352]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800889c:	2b00      	cmp	r3, #0
 800889e:	d015      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088a0:	4b53      	ldr	r3, [pc, #332]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	4950      	ldr	r1, [pc, #320]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088be:	d105      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088c0:	4b4b      	ldr	r3, [pc, #300]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4a4a      	ldr	r2, [pc, #296]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d015      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088d8:	4b45      	ldr	r3, [pc, #276]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e6:	4942      	ldr	r1, [pc, #264]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f6:	d105      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088f8:	4b3d      	ldr	r3, [pc, #244]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4a3c      	ldr	r2, [pc, #240]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008902:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d015      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008910:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008916:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	4934      	ldr	r1, [pc, #208]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008920:	4313      	orrs	r3, r2
 8008922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800892e:	d105      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008930:	4b2f      	ldr	r3, [pc, #188]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	4a2e      	ldr	r2, [pc, #184]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800893a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008948:	4b29      	ldr	r3, [pc, #164]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	4926      	ldr	r1, [pc, #152]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008958:	4313      	orrs	r3, r2
 800895a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008966:	d105      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008968:	4b21      	ldr	r3, [pc, #132]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4a20      	ldr	r2, [pc, #128]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008972:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d015      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008980:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	4918      	ldr	r1, [pc, #96]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800899e:	d105      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a0:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d015      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c6:	490a      	ldr	r1, [pc, #40]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089d6:	d105      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4a04      	ldr	r2, [pc, #16]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80089e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40021000 	.word	0x40021000

080089f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e09d      	b.n	8008b42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d108      	bne.n	8008a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a16:	d009      	beq.n	8008a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	61da      	str	r2, [r3, #28]
 8008a1e:	e005      	b.n	8008a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fa faee 	bl	8003028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a6c:	d902      	bls.n	8008a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e002      	b.n	8008a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a82:	d007      	beq.n	8008a94 <HAL_SPI_Init+0xa0>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	ea42 0103 	orr.w	r1, r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	f003 0204 	and.w	r2, r3, #4
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b10:	ea42 0103 	orr.w	r1, r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e16c      	b.n	8008e46 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008b82:	7dbb      	ldrb	r3, [r7, #22]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d00d      	beq.n	8008ba4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b8e:	d106      	bne.n	8008b9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8008b98:	7dbb      	ldrb	r3, [r7, #22]
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d002      	beq.n	8008ba4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ba2:	e14b      	b.n	8008e3c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d005      	beq.n	8008bb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008bb0:	887b      	ldrh	r3, [r7, #2]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bba:	e13f      	b.n	8008e3c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d003      	beq.n	8008bd0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2205      	movs	r2, #5
 8008bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	887a      	ldrh	r2, [r7, #2]
 8008be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	887a      	ldrh	r2, [r7, #2]
 8008bfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008c18:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c22:	d908      	bls.n	8008c36 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	e06f      	b.n	8008d16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c44:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c50:	d126      	bne.n	8008ca0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10f      	bne.n	8008c7e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c6c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c7c:	e010      	b.n	8008ca0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c8c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3301      	adds	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008caa:	d134      	bne.n	8008d16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cba:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d111      	bne.n	8008cf0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cda:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	085b      	lsrs	r3, r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008cee:	e012      	b.n	8008d16 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cfe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d108      	bne.n	8008d34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	4a4a      	ldr	r2, [pc, #296]	; (8008e50 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	4a49      	ldr	r2, [pc, #292]	; (8008e54 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d32:	e007      	b.n	8008d44 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d38:	4a47      	ldr	r2, [pc, #284]	; (8008e58 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d40:	4a46      	ldr	r2, [pc, #280]	; (8008e5c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8008d42:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d48:	4a45      	ldr	r2, [pc, #276]	; (8008e60 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d50:	2200      	movs	r2, #0
 8008d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d6e:	f7fd fb5d 	bl	800642c <HAL_DMA_Start_IT>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00c      	beq.n	8008d92 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7c:	f043 0210 	orr.w	r2, r3, #16
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008d90:	e054      	b.n	8008e3c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dae:	2200      	movs	r2, #0
 8008db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db6:	2200      	movs	r2, #0
 8008db8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dda:	f7fd fb27 	bl	800642c <HAL_DMA_Start_IT>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00c      	beq.n	8008dfe <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de8:	f043 0210 	orr.w	r2, r3, #16
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008dfc:	e01e      	b.n	8008e3c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d007      	beq.n	8008e1c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e1a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0220 	orr.w	r2, r2, #32
 8008e2a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f042 0202 	orr.w	r2, r2, #2
 8008e3a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	080091d5 	.word	0x080091d5
 8008e54:	0800909d 	.word	0x0800909d
 8008e58:	080091f1 	.word	0x080091f1
 8008e5c:	08009145 	.word	0x08009145
 8008e60:	0800920d 	.word	0x0800920d

08008e64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10e      	bne.n	8008ea4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d004      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
    return;
 8008ea2:	e0ce      	b.n	8009042 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d009      	beq.n	8008ec2 <HAL_SPI_IRQHandler+0x5e>
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
    return;
 8008ec0:	e0bf      	b.n	8009042 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <HAL_SPI_IRQHandler+0x7e>
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d105      	bne.n	8008ee2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80b0 	beq.w	8009042 <HAL_SPI_IRQHandler+0x1de>
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80aa 	beq.w	8009042 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d023      	beq.n	8008f40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d011      	beq.n	8008f28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f08:	f043 0204 	orr.w	r2, r3, #4
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	e00b      	b.n	8008f40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	613b      	str	r3, [r7, #16]
 8008f3c:	693b      	ldr	r3, [r7, #16]
        return;
 8008f3e:	e080      	b.n	8009042 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d014      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4e:	f043 0201 	orr.w	r2, r3, #1
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f82:	f043 0208 	orr.w	r2, r3, #8
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d04f      	beq.n	8009040 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <HAL_SPI_IRQHandler+0x168>
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d034      	beq.n	8009036 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0203 	bic.w	r2, r2, #3
 8008fda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d011      	beq.n	8009008 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe8:	4a17      	ldr	r2, [pc, #92]	; (8009048 <HAL_SPI_IRQHandler+0x1e4>)
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fd faef 	bl	80065d4 <HAL_DMA_Abort_IT>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d016      	beq.n	800903e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	4a0c      	ldr	r2, [pc, #48]	; (8009048 <HAL_SPI_IRQHandler+0x1e4>)
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901c:	4618      	mov	r0, r3
 800901e:	f7fd fad9 	bl	80065d4 <HAL_DMA_Abort_IT>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009034:	e003      	b.n	800903e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f826 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800903c:	e000      	b.n	8009040 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800903e:	bf00      	nop
    return;
 8009040:	bf00      	nop
  }
}
 8009042:	3720      	adds	r7, #32
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	0800924d 	.word	0x0800924d

0800904c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090aa:	f7fa fd35 	bl	8003b18 <HAL_GetTick>
 80090ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d03c      	beq.n	8009138 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0220 	bic.w	r2, r2, #32
 80090cc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10d      	bne.n	80090f2 <SPI_DMAReceiveCplt+0x56>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090de:	d108      	bne.n	80090f2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0203 	bic.w	r2, r2, #3
 80090ee:	605a      	str	r2, [r3, #4]
 80090f0:	e007      	b.n	8009102 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0201 	bic.w	r2, r2, #1
 8009100:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	2164      	movs	r1, #100	; 0x64
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f9d4 	bl	80094b4 <SPI_EndRxTransaction>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7ff ffa9 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009136:	e002      	b.n	800913e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f7ff ff87 	bl	800904c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009150:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009152:	f7fa fce1 	bl	8003b18 <HAL_GetTick>
 8009156:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b20      	cmp	r3, #32
 8009164:	d030      	beq.n	80091c8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0220 	bic.w	r2, r2, #32
 8009174:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	2164      	movs	r1, #100	; 0x64
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f000 f9f2 	bl	8009564 <SPI_EndRxTxTransaction>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800918a:	f043 0220 	orr.w	r2, r3, #32
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0203 	bic.w	r2, r2, #3
 80091a0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff ff61 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091c6:	e002      	b.n	80091ce <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7f8 f911 	bl	80013f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff ff3c 	bl	8009060 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7ff ff38 	bl	8009074 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009204:	bf00      	nop
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0203 	bic.w	r2, r2, #3
 8009228:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922e:	f043 0210 	orr.w	r2, r3, #16
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff ff22 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff ff0d 	bl	8009088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009288:	f7fa fc46 	bl	8003b18 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	4413      	add	r3, r2
 8009296:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009298:	f7fa fc3e 	bl	8003b18 <HAL_GetTick>
 800929c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800929e:	4b39      	ldr	r3, [pc, #228]	; (8009384 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	015b      	lsls	r3, r3, #5
 80092a4:	0d1b      	lsrs	r3, r3, #20
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092ae:	e054      	b.n	800935a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d050      	beq.n	800935a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092b8:	f7fa fc2e 	bl	8003b18 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d902      	bls.n	80092ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d13d      	bne.n	800934a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e6:	d111      	bne.n	800930c <SPI_WaitFlagStateUntilTimeout+0x94>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f0:	d004      	beq.n	80092fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092fa:	d107      	bne.n	800930c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d10f      	bne.n	8009336 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009334:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e017      	b.n	800937a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	3b01      	subs	r3, #1
 8009358:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4013      	ands	r3, r2
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	bf0c      	ite	eq
 800936a:	2301      	moveq	r3, #1
 800936c:	2300      	movne	r3, #0
 800936e:	b2db      	uxtb	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	429a      	cmp	r2, r3
 8009376:	d19b      	bne.n	80092b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200000f4 	.word	0x200000f4

08009388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	; 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800939a:	f7fa fbbd 	bl	8003b18 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a2:	1a9b      	subs	r3, r3, r2
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	4413      	add	r3, r2
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80093aa:	f7fa fbb5 	bl	8003b18 <HAL_GetTick>
 80093ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	330c      	adds	r3, #12
 80093b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80093b8:	4b3d      	ldr	r3, [pc, #244]	; (80094b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	00da      	lsls	r2, r3, #3
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	0d1b      	lsrs	r3, r3, #20
 80093c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
 80093ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80093d0:	e060      	b.n	8009494 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80093d8:	d107      	bne.n	80093ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f0:	d050      	beq.n	8009494 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093f2:	f7fa fb91 	bl	8003b18 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fe:	429a      	cmp	r2, r3
 8009400:	d902      	bls.n	8009408 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d13d      	bne.n	8009484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009416:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009420:	d111      	bne.n	8009446 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942a:	d004      	beq.n	8009436 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009434:	d107      	bne.n	8009446 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009444:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800944e:	d10f      	bne.n	8009470 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800946e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e010      	b.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	3b01      	subs	r3, #1
 8009492:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d196      	bne.n	80093d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3728      	adds	r7, #40	; 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	200000f4 	.word	0x200000f4

080094b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c8:	d111      	bne.n	80094ee <SPI_EndRxTransaction+0x3a>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d2:	d004      	beq.n	80094de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094dc:	d107      	bne.n	80094ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2200      	movs	r2, #0
 80094f6:	2180      	movs	r1, #128	; 0x80
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff febd 	bl	8009278 <SPI_WaitFlagStateUntilTimeout>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009508:	f043 0220 	orr.w	r2, r3, #32
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e023      	b.n	800955c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800951c:	d11d      	bne.n	800955a <SPI_EndRxTransaction+0xa6>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009526:	d004      	beq.n	8009532 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009530:	d113      	bne.n	800955a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2200      	movs	r2, #0
 800953a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff ff22 	bl	8009388 <SPI_WaitFifoStateUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e000      	b.n	800955c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af02      	add	r7, sp, #8
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7ff ff03 	bl	8009388 <SPI_WaitFifoStateUntilTimeout>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800958c:	f043 0220 	orr.w	r2, r3, #32
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e027      	b.n	80095e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	2180      	movs	r1, #128	; 0x80
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7ff fe68 	bl	8009278 <SPI_WaitFlagStateUntilTimeout>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d007      	beq.n	80095be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b2:	f043 0220 	orr.w	r2, r3, #32
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e014      	b.n	80095e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fedc 	bl	8009388 <SPI_WaitFifoStateUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095da:	f043 0220 	orr.w	r2, r3, #32
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e000      	b.n	80095e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e049      	b.n	8009696 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fa f874 	bl	8003704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3304      	adds	r3, #4
 800962c:	4619      	mov	r1, r3
 800962e:	4610      	mov	r0, r2
 8009630:	f000 fe74 	bl	800a31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1a      	ldr	r2, [r3, #32]
 80096ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10f      	bne.n	80096d6 <HAL_TIM_Base_Stop+0x38>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6a1a      	ldr	r2, [r3, #32]
 80096bc:	f244 4344 	movw	r3, #17476	; 0x4444
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d107      	bne.n	80096d6 <HAL_TIM_Base_Stop+0x38>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d001      	beq.n	8009704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e04a      	b.n	800979a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 0201 	orr.w	r2, r2, #1
 800971a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <HAL_TIM_Base_Start_IT+0xbc>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d018      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0x6c>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800972e:	d013      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0x6c>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1d      	ldr	r2, [pc, #116]	; (80097ac <HAL_TIM_Base_Start_IT+0xc0>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0x6c>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1c      	ldr	r2, [pc, #112]	; (80097b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0x6c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1a      	ldr	r2, [pc, #104]	; (80097b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0x6c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a19      	ldr	r2, [pc, #100]	; (80097b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d115      	bne.n	8009784 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	4b17      	ldr	r3, [pc, #92]	; (80097bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009760:	4013      	ands	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b06      	cmp	r3, #6
 8009768:	d015      	beq.n	8009796 <HAL_TIM_Base_Start_IT+0xaa>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009770:	d011      	beq.n	8009796 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009782:	e008      	b.n	8009796 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	e000      	b.n	8009798 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	40012c00 	.word	0x40012c00
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40013400 	.word	0x40013400
 80097b8:	40014000 	.word	0x40014000
 80097bc:	00010007 	.word	0x00010007

080097c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e049      	b.n	8009866 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f841 	bl	800986e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f000 fd8c 	bl	800a31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
	...

08009884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <HAL_TIM_PWM_Start+0x24>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	bf14      	ite	ne
 80098a0:	2301      	movne	r3, #1
 80098a2:	2300      	moveq	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	e03c      	b.n	8009922 <HAL_TIM_PWM_Start+0x9e>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d109      	bne.n	80098c2 <HAL_TIM_PWM_Start+0x3e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	e02f      	b.n	8009922 <HAL_TIM_PWM_Start+0x9e>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d109      	bne.n	80098dc <HAL_TIM_PWM_Start+0x58>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	e022      	b.n	8009922 <HAL_TIM_PWM_Start+0x9e>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b0c      	cmp	r3, #12
 80098e0:	d109      	bne.n	80098f6 <HAL_TIM_PWM_Start+0x72>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	bf14      	ite	ne
 80098ee:	2301      	movne	r3, #1
 80098f0:	2300      	moveq	r3, #0
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	e015      	b.n	8009922 <HAL_TIM_PWM_Start+0x9e>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b10      	cmp	r3, #16
 80098fa:	d109      	bne.n	8009910 <HAL_TIM_PWM_Start+0x8c>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	bf14      	ite	ne
 8009908:	2301      	movne	r3, #1
 800990a:	2300      	moveq	r3, #0
 800990c:	b2db      	uxtb	r3, r3
 800990e:	e008      	b.n	8009922 <HAL_TIM_PWM_Start+0x9e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e097      	b.n	8009a5a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <HAL_TIM_PWM_Start+0xb6>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009938:	e023      	b.n	8009982 <HAL_TIM_PWM_Start+0xfe>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b04      	cmp	r3, #4
 800993e:	d104      	bne.n	800994a <HAL_TIM_PWM_Start+0xc6>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009948:	e01b      	b.n	8009982 <HAL_TIM_PWM_Start+0xfe>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b08      	cmp	r3, #8
 800994e:	d104      	bne.n	800995a <HAL_TIM_PWM_Start+0xd6>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009958:	e013      	b.n	8009982 <HAL_TIM_PWM_Start+0xfe>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b0c      	cmp	r3, #12
 800995e:	d104      	bne.n	800996a <HAL_TIM_PWM_Start+0xe6>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009968:	e00b      	b.n	8009982 <HAL_TIM_PWM_Start+0xfe>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b10      	cmp	r3, #16
 800996e:	d104      	bne.n	800997a <HAL_TIM_PWM_Start+0xf6>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009978:	e003      	b.n	8009982 <HAL_TIM_PWM_Start+0xfe>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2202      	movs	r2, #2
 800997e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2201      	movs	r2, #1
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f001 f8e8 	bl	800ab60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a33      	ldr	r2, [pc, #204]	; (8009a64 <HAL_TIM_PWM_Start+0x1e0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <HAL_TIM_PWM_Start+0x13e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a32      	ldr	r2, [pc, #200]	; (8009a68 <HAL_TIM_PWM_Start+0x1e4>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00e      	beq.n	80099c2 <HAL_TIM_PWM_Start+0x13e>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a30      	ldr	r2, [pc, #192]	; (8009a6c <HAL_TIM_PWM_Start+0x1e8>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d009      	beq.n	80099c2 <HAL_TIM_PWM_Start+0x13e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a2f      	ldr	r2, [pc, #188]	; (8009a70 <HAL_TIM_PWM_Start+0x1ec>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d004      	beq.n	80099c2 <HAL_TIM_PWM_Start+0x13e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2d      	ldr	r2, [pc, #180]	; (8009a74 <HAL_TIM_PWM_Start+0x1f0>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d101      	bne.n	80099c6 <HAL_TIM_PWM_Start+0x142>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <HAL_TIM_PWM_Start+0x144>
 80099c6:	2300      	movs	r3, #0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d007      	beq.n	80099dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a20      	ldr	r2, [pc, #128]	; (8009a64 <HAL_TIM_PWM_Start+0x1e0>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d018      	beq.n	8009a18 <HAL_TIM_PWM_Start+0x194>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_PWM_Start+0x194>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <HAL_TIM_PWM_Start+0x1f4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00e      	beq.n	8009a18 <HAL_TIM_PWM_Start+0x194>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <HAL_TIM_PWM_Start+0x1f8>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d009      	beq.n	8009a18 <HAL_TIM_PWM_Start+0x194>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <HAL_TIM_PWM_Start+0x1e4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <HAL_TIM_PWM_Start+0x194>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a16      	ldr	r2, [pc, #88]	; (8009a6c <HAL_TIM_PWM_Start+0x1e8>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d115      	bne.n	8009a44 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	4b18      	ldr	r3, [pc, #96]	; (8009a80 <HAL_TIM_PWM_Start+0x1fc>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b06      	cmp	r3, #6
 8009a28:	d015      	beq.n	8009a56 <HAL_TIM_PWM_Start+0x1d2>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a30:	d011      	beq.n	8009a56 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0201 	orr.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	e008      	b.n	8009a56 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e000      	b.n	8009a58 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40012c00 	.word	0x40012c00
 8009a68:	40013400 	.word	0x40013400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40014400 	.word	0x40014400
 8009a74:	40014800 	.word	0x40014800
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	00010007 	.word	0x00010007

08009a84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2200      	movs	r2, #0
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 f862 	bl	800ab60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a3e      	ldr	r2, [pc, #248]	; (8009b9c <HAL_TIM_PWM_Stop+0x118>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d013      	beq.n	8009ace <HAL_TIM_PWM_Stop+0x4a>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a3d      	ldr	r2, [pc, #244]	; (8009ba0 <HAL_TIM_PWM_Stop+0x11c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d00e      	beq.n	8009ace <HAL_TIM_PWM_Stop+0x4a>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a3b      	ldr	r2, [pc, #236]	; (8009ba4 <HAL_TIM_PWM_Stop+0x120>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d009      	beq.n	8009ace <HAL_TIM_PWM_Stop+0x4a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a3a      	ldr	r2, [pc, #232]	; (8009ba8 <HAL_TIM_PWM_Stop+0x124>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d004      	beq.n	8009ace <HAL_TIM_PWM_Stop+0x4a>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a38      	ldr	r2, [pc, #224]	; (8009bac <HAL_TIM_PWM_Stop+0x128>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d101      	bne.n	8009ad2 <HAL_TIM_PWM_Stop+0x4e>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e000      	b.n	8009ad4 <HAL_TIM_PWM_Stop+0x50>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d017      	beq.n	8009b08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10f      	bne.n	8009b08 <HAL_TIM_PWM_Stop+0x84>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6a1a      	ldr	r2, [r3, #32]
 8009aee:	f244 4344 	movw	r3, #17476	; 0x4444
 8009af2:	4013      	ands	r3, r2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d107      	bne.n	8009b08 <HAL_TIM_PWM_Stop+0x84>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6a1a      	ldr	r2, [r3, #32]
 8009b0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b12:	4013      	ands	r3, r2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10f      	bne.n	8009b38 <HAL_TIM_PWM_Stop+0xb4>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	f244 4344 	movw	r3, #17476	; 0x4444
 8009b22:	4013      	ands	r3, r2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d107      	bne.n	8009b38 <HAL_TIM_PWM_Stop+0xb4>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0201 	bic.w	r2, r2, #1
 8009b36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d104      	bne.n	8009b48 <HAL_TIM_PWM_Stop+0xc4>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b46:	e023      	b.n	8009b90 <HAL_TIM_PWM_Stop+0x10c>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d104      	bne.n	8009b58 <HAL_TIM_PWM_Stop+0xd4>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b56:	e01b      	b.n	8009b90 <HAL_TIM_PWM_Stop+0x10c>
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	d104      	bne.n	8009b68 <HAL_TIM_PWM_Stop+0xe4>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b66:	e013      	b.n	8009b90 <HAL_TIM_PWM_Stop+0x10c>
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b0c      	cmp	r3, #12
 8009b6c:	d104      	bne.n	8009b78 <HAL_TIM_PWM_Stop+0xf4>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b76:	e00b      	b.n	8009b90 <HAL_TIM_PWM_Stop+0x10c>
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d104      	bne.n	8009b88 <HAL_TIM_PWM_Stop+0x104>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b86:	e003      	b.n	8009b90 <HAL_TIM_PWM_Stop+0x10c>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	40012c00 	.word	0x40012c00
 8009ba0:	40013400 	.word	0x40013400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800

08009bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0302 	and.w	r3, r3, #2
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d122      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d11b      	bne.n	8009c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f06f 0202 	mvn.w	r2, #2
 8009bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fb74 	bl	800a2e0 <HAL_TIM_IC_CaptureCallback>
 8009bf8:	e005      	b.n	8009c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fb66 	bl	800a2cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fb77 	bl	800a2f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 0304 	and.w	r3, r3, #4
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d122      	bne.n	8009c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d11b      	bne.n	8009c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0204 	mvn.w	r2, #4
 8009c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2202      	movs	r2, #2
 8009c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fb4a 	bl	800a2e0 <HAL_TIM_IC_CaptureCallback>
 8009c4c:	e005      	b.n	8009c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fb3c 	bl	800a2cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb4d 	bl	800a2f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d122      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d11b      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0208 	mvn.w	r2, #8
 8009c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2204      	movs	r2, #4
 8009c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fb20 	bl	800a2e0 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fb12 	bl	800a2cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fb23 	bl	800a2f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0310 	and.w	r3, r3, #16
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d122      	bne.n	8009d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d11b      	bne.n	8009d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0210 	mvn.w	r2, #16
 8009cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2208      	movs	r2, #8
 8009cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 faf6 	bl	800a2e0 <HAL_TIM_IC_CaptureCallback>
 8009cf4:	e005      	b.n	8009d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fae8 	bl	800a2cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 faf9 	bl	800a2f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d10e      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d107      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f06f 0201 	mvn.w	r2, #1
 8009d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7f7 fbc2 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d3e:	2b80      	cmp	r3, #128	; 0x80
 8009d40:	d10e      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d4c:	2b80      	cmp	r3, #128	; 0x80
 8009d4e:	d107      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 f964 	bl	800b028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d6e:	d10e      	bne.n	8009d8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7a:	2b80      	cmp	r3, #128	; 0x80
 8009d7c:	d107      	bne.n	8009d8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 f957 	bl	800b03c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d10e      	bne.n	8009dba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b40      	cmp	r3, #64	; 0x40
 8009da8:	d107      	bne.n	8009dba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 faa7 	bl	800a308 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d10e      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b20      	cmp	r3, #32
 8009dd4:	d107      	bne.n	8009de6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f06f 0220 	mvn.w	r2, #32
 8009dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f917 	bl	800b014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df4:	d10f      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e04:	d107      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f91d 	bl	800b050 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e24:	d10f      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e34:	d107      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 f90f 	bl	800b064 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e54:	d10f      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e64:	d107      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f901 	bl	800b078 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e84:	d10f      	bne.n	8009ea6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e94:	d107      	bne.n	8009ea6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 f8f3 	bl	800b08c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e0ff      	b.n	800a0ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b14      	cmp	r3, #20
 8009eda:	f200 80f0 	bhi.w	800a0be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	0800a0bf 	.word	0x0800a0bf
 8009eec:	0800a0bf 	.word	0x0800a0bf
 8009ef0:	0800a0bf 	.word	0x0800a0bf
 8009ef4:	08009f79 	.word	0x08009f79
 8009ef8:	0800a0bf 	.word	0x0800a0bf
 8009efc:	0800a0bf 	.word	0x0800a0bf
 8009f00:	0800a0bf 	.word	0x0800a0bf
 8009f04:	08009fbb 	.word	0x08009fbb
 8009f08:	0800a0bf 	.word	0x0800a0bf
 8009f0c:	0800a0bf 	.word	0x0800a0bf
 8009f10:	0800a0bf 	.word	0x0800a0bf
 8009f14:	08009ffb 	.word	0x08009ffb
 8009f18:	0800a0bf 	.word	0x0800a0bf
 8009f1c:	0800a0bf 	.word	0x0800a0bf
 8009f20:	0800a0bf 	.word	0x0800a0bf
 8009f24:	0800a03d 	.word	0x0800a03d
 8009f28:	0800a0bf 	.word	0x0800a0bf
 8009f2c:	0800a0bf 	.word	0x0800a0bf
 8009f30:	0800a0bf 	.word	0x0800a0bf
 8009f34:	0800a07d 	.word	0x0800a07d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fa7c 	bl	800a43c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0208 	orr.w	r2, r2, #8
 8009f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f022 0204 	bic.w	r2, r2, #4
 8009f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6999      	ldr	r1, [r3, #24]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	619a      	str	r2, [r3, #24]
      break;
 8009f76:	e0a5      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 faec 	bl	800a55c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699a      	ldr	r2, [r3, #24]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699a      	ldr	r2, [r3, #24]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6999      	ldr	r1, [r3, #24]
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	021a      	lsls	r2, r3, #8
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	619a      	str	r2, [r3, #24]
      break;
 8009fb8:	e084      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fb55 	bl	800a670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f042 0208 	orr.w	r2, r2, #8
 8009fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0204 	bic.w	r2, r2, #4
 8009fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69d9      	ldr	r1, [r3, #28]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	61da      	str	r2, [r3, #28]
      break;
 8009ff8:	e064      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fbbd 	bl	800a780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69d9      	ldr	r1, [r3, #28]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	021a      	lsls	r2, r3, #8
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	61da      	str	r2, [r3, #28]
      break;
 800a03a:	e043      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fc26 	bl	800a894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f042 0208 	orr.w	r2, r2, #8
 800a056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 0204 	bic.w	r2, r2, #4
 800a066:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	691a      	ldr	r2, [r3, #16]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a07a:	e023      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fc6a 	bl	800a95c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a096:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	021a      	lsls	r2, r3, #8
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a0bc:	e002      	b.n	800a0c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop

0800a0d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d101      	bne.n	800a0f4 <HAL_TIM_ConfigClockSource+0x1c>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	e0de      	b.n	800a2b2 <HAL_TIM_ConfigClockSource+0x1da>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a11e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a63      	ldr	r2, [pc, #396]	; (800a2bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	f000 80a9 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a134:	4a61      	ldr	r2, [pc, #388]	; (800a2bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	f200 80ae 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a13c:	4a60      	ldr	r2, [pc, #384]	; (800a2c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	f000 80a1 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a144:	4a5e      	ldr	r2, [pc, #376]	; (800a2c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	f200 80a6 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a14c:	4a5d      	ldr	r2, [pc, #372]	; (800a2c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	f000 8099 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a154:	4a5b      	ldr	r2, [pc, #364]	; (800a2c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a156:	4293      	cmp	r3, r2
 800a158:	f200 809e 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a15c:	4a5a      	ldr	r2, [pc, #360]	; (800a2c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	f000 8091 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a164:	4a58      	ldr	r2, [pc, #352]	; (800a2c8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a166:	4293      	cmp	r3, r2
 800a168:	f200 8096 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a16c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a170:	f000 8089 	beq.w	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a174:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a178:	f200 808e 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a17c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a180:	d03e      	beq.n	800a200 <HAL_TIM_ConfigClockSource+0x128>
 800a182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a186:	f200 8087 	bhi.w	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18e:	f000 8086 	beq.w	800a29e <HAL_TIM_ConfigClockSource+0x1c6>
 800a192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a196:	d87f      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a198:	2b70      	cmp	r3, #112	; 0x70
 800a19a:	d01a      	beq.n	800a1d2 <HAL_TIM_ConfigClockSource+0xfa>
 800a19c:	2b70      	cmp	r3, #112	; 0x70
 800a19e:	d87b      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1a0:	2b60      	cmp	r3, #96	; 0x60
 800a1a2:	d050      	beq.n	800a246 <HAL_TIM_ConfigClockSource+0x16e>
 800a1a4:	2b60      	cmp	r3, #96	; 0x60
 800a1a6:	d877      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1a8:	2b50      	cmp	r3, #80	; 0x50
 800a1aa:	d03c      	beq.n	800a226 <HAL_TIM_ConfigClockSource+0x14e>
 800a1ac:	2b50      	cmp	r3, #80	; 0x50
 800a1ae:	d873      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1b0:	2b40      	cmp	r3, #64	; 0x40
 800a1b2:	d058      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0x18e>
 800a1b4:	2b40      	cmp	r3, #64	; 0x40
 800a1b6:	d86f      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1b8:	2b30      	cmp	r3, #48	; 0x30
 800a1ba:	d064      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a1bc:	2b30      	cmp	r3, #48	; 0x30
 800a1be:	d86b      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d060      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	d867      	bhi.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d05c      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a1cc:	2b10      	cmp	r3, #16
 800a1ce:	d05a      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x1ae>
 800a1d0:	e062      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	6899      	ldr	r1, [r3, #8]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	f000 fc9d 	bl	800ab20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	609a      	str	r2, [r3, #8]
      break;
 800a1fe:	e04f      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	6899      	ldr	r1, [r3, #8]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f000 fc86 	bl	800ab20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a222:	609a      	str	r2, [r3, #8]
      break;
 800a224:	e03c      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6859      	ldr	r1, [r3, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	461a      	mov	r2, r3
 800a234:	f000 fbf8 	bl	800aa28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2150      	movs	r1, #80	; 0x50
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 fc51 	bl	800aae6 <TIM_ITRx_SetConfig>
      break;
 800a244:	e02c      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	6859      	ldr	r1, [r3, #4]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	461a      	mov	r2, r3
 800a254:	f000 fc17 	bl	800aa86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2160      	movs	r1, #96	; 0x60
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fc41 	bl	800aae6 <TIM_ITRx_SetConfig>
      break;
 800a264:	e01c      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6859      	ldr	r1, [r3, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	461a      	mov	r2, r3
 800a274:	f000 fbd8 	bl	800aa28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2140      	movs	r1, #64	; 0x40
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 fc31 	bl	800aae6 <TIM_ITRx_SetConfig>
      break;
 800a284:	e00c      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f000 fc28 	bl	800aae6 <TIM_ITRx_SetConfig>
      break;
 800a296:	e003      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
      break;
 800a29c:	e000      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a29e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	00100070 	.word	0x00100070
 800a2c0:	00100040 	.word	0x00100040
 800a2c4:	00100030 	.word	0x00100030
 800a2c8:	00100020 	.word	0x00100020

0800a2cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a3c      	ldr	r2, [pc, #240]	; (800a420 <TIM_Base_SetConfig+0x104>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00f      	beq.n	800a354 <TIM_Base_SetConfig+0x38>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a33a:	d00b      	beq.n	800a354 <TIM_Base_SetConfig+0x38>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a39      	ldr	r2, [pc, #228]	; (800a424 <TIM_Base_SetConfig+0x108>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d007      	beq.n	800a354 <TIM_Base_SetConfig+0x38>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a38      	ldr	r2, [pc, #224]	; (800a428 <TIM_Base_SetConfig+0x10c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_Base_SetConfig+0x38>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a37      	ldr	r2, [pc, #220]	; (800a42c <TIM_Base_SetConfig+0x110>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d108      	bne.n	800a366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4313      	orrs	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a2d      	ldr	r2, [pc, #180]	; (800a420 <TIM_Base_SetConfig+0x104>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d01b      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a374:	d017      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <TIM_Base_SetConfig+0x108>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d013      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a29      	ldr	r2, [pc, #164]	; (800a428 <TIM_Base_SetConfig+0x10c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00f      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a28      	ldr	r2, [pc, #160]	; (800a42c <TIM_Base_SetConfig+0x110>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d00b      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <TIM_Base_SetConfig+0x114>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d007      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a26      	ldr	r2, [pc, #152]	; (800a434 <TIM_Base_SetConfig+0x118>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d003      	beq.n	800a3a6 <TIM_Base_SetConfig+0x8a>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a25      	ldr	r2, [pc, #148]	; (800a438 <TIM_Base_SetConfig+0x11c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d108      	bne.n	800a3b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a10      	ldr	r2, [pc, #64]	; (800a420 <TIM_Base_SetConfig+0x104>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00f      	beq.n	800a404 <TIM_Base_SetConfig+0xe8>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a11      	ldr	r2, [pc, #68]	; (800a42c <TIM_Base_SetConfig+0x110>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00b      	beq.n	800a404 <TIM_Base_SetConfig+0xe8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a10      	ldr	r2, [pc, #64]	; (800a430 <TIM_Base_SetConfig+0x114>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d007      	beq.n	800a404 <TIM_Base_SetConfig+0xe8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a0f      	ldr	r2, [pc, #60]	; (800a434 <TIM_Base_SetConfig+0x118>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_Base_SetConfig+0xe8>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a0e      	ldr	r2, [pc, #56]	; (800a438 <TIM_Base_SetConfig+0x11c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d103      	bne.n	800a40c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	691a      	ldr	r2, [r3, #16]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	615a      	str	r2, [r3, #20]
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	40012c00 	.word	0x40012c00
 800a424:	40000400 	.word	0x40000400
 800a428:	40000800 	.word	0x40000800
 800a42c:	40013400 	.word	0x40013400
 800a430:	40014000 	.word	0x40014000
 800a434:	40014400 	.word	0x40014400
 800a438:	40014800 	.word	0x40014800

0800a43c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	f023 0201 	bic.w	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a46e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0303 	bic.w	r3, r3, #3
 800a476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f023 0302 	bic.w	r3, r3, #2
 800a488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a2c      	ldr	r2, [pc, #176]	; (800a548 <TIM_OC1_SetConfig+0x10c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00f      	beq.n	800a4bc <TIM_OC1_SetConfig+0x80>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a2b      	ldr	r2, [pc, #172]	; (800a54c <TIM_OC1_SetConfig+0x110>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d00b      	beq.n	800a4bc <TIM_OC1_SetConfig+0x80>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a2a      	ldr	r2, [pc, #168]	; (800a550 <TIM_OC1_SetConfig+0x114>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d007      	beq.n	800a4bc <TIM_OC1_SetConfig+0x80>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a29      	ldr	r2, [pc, #164]	; (800a554 <TIM_OC1_SetConfig+0x118>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d003      	beq.n	800a4bc <TIM_OC1_SetConfig+0x80>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a28      	ldr	r2, [pc, #160]	; (800a558 <TIM_OC1_SetConfig+0x11c>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d10c      	bne.n	800a4d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f023 0308 	bic.w	r3, r3, #8
 800a4c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f023 0304 	bic.w	r3, r3, #4
 800a4d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a1b      	ldr	r2, [pc, #108]	; (800a548 <TIM_OC1_SetConfig+0x10c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d00f      	beq.n	800a4fe <TIM_OC1_SetConfig+0xc2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a1a      	ldr	r2, [pc, #104]	; (800a54c <TIM_OC1_SetConfig+0x110>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d00b      	beq.n	800a4fe <TIM_OC1_SetConfig+0xc2>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a19      	ldr	r2, [pc, #100]	; (800a550 <TIM_OC1_SetConfig+0x114>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d007      	beq.n	800a4fe <TIM_OC1_SetConfig+0xc2>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a18      	ldr	r2, [pc, #96]	; (800a554 <TIM_OC1_SetConfig+0x118>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d003      	beq.n	800a4fe <TIM_OC1_SetConfig+0xc2>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a17      	ldr	r2, [pc, #92]	; (800a558 <TIM_OC1_SetConfig+0x11c>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d111      	bne.n	800a522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a50c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	621a      	str	r2, [r3, #32]
}
 800a53c:	bf00      	nop
 800a53e:	371c      	adds	r7, #28
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	40012c00 	.word	0x40012c00
 800a54c:	40013400 	.word	0x40013400
 800a550:	40014000 	.word	0x40014000
 800a554:	40014400 	.word	0x40014400
 800a558:	40014800 	.word	0x40014800

0800a55c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	f023 0210 	bic.w	r2, r3, #16
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a58a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a58e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f023 0320 	bic.w	r3, r3, #32
 800a5aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a28      	ldr	r2, [pc, #160]	; (800a65c <TIM_OC2_SetConfig+0x100>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d003      	beq.n	800a5c8 <TIM_OC2_SetConfig+0x6c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a27      	ldr	r2, [pc, #156]	; (800a660 <TIM_OC2_SetConfig+0x104>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d10d      	bne.n	800a5e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a1d      	ldr	r2, [pc, #116]	; (800a65c <TIM_OC2_SetConfig+0x100>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d00f      	beq.n	800a60c <TIM_OC2_SetConfig+0xb0>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a1c      	ldr	r2, [pc, #112]	; (800a660 <TIM_OC2_SetConfig+0x104>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00b      	beq.n	800a60c <TIM_OC2_SetConfig+0xb0>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <TIM_OC2_SetConfig+0x108>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d007      	beq.n	800a60c <TIM_OC2_SetConfig+0xb0>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	; (800a668 <TIM_OC2_SetConfig+0x10c>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_OC2_SetConfig+0xb0>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a19      	ldr	r2, [pc, #100]	; (800a66c <TIM_OC2_SetConfig+0x110>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d113      	bne.n	800a634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a61a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	4313      	orrs	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	621a      	str	r2, [r3, #32]
}
 800a64e:	bf00      	nop
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40012c00 	.word	0x40012c00
 800a660:	40013400 	.word	0x40013400
 800a664:	40014000 	.word	0x40014000
 800a668:	40014400 	.word	0x40014400
 800a66c:	40014800 	.word	0x40014800

0800a670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a670:	b480      	push	{r7}
 800a672:	b087      	sub	sp, #28
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0303 	bic.w	r3, r3, #3
 800a6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a27      	ldr	r2, [pc, #156]	; (800a76c <TIM_OC3_SetConfig+0xfc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d003      	beq.n	800a6da <TIM_OC3_SetConfig+0x6a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a26      	ldr	r2, [pc, #152]	; (800a770 <TIM_OC3_SetConfig+0x100>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d10d      	bne.n	800a6f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	021b      	lsls	r3, r3, #8
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a1c      	ldr	r2, [pc, #112]	; (800a76c <TIM_OC3_SetConfig+0xfc>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00f      	beq.n	800a71e <TIM_OC3_SetConfig+0xae>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a1b      	ldr	r2, [pc, #108]	; (800a770 <TIM_OC3_SetConfig+0x100>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d00b      	beq.n	800a71e <TIM_OC3_SetConfig+0xae>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a1a      	ldr	r2, [pc, #104]	; (800a774 <TIM_OC3_SetConfig+0x104>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d007      	beq.n	800a71e <TIM_OC3_SetConfig+0xae>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a19      	ldr	r2, [pc, #100]	; (800a778 <TIM_OC3_SetConfig+0x108>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d003      	beq.n	800a71e <TIM_OC3_SetConfig+0xae>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a18      	ldr	r2, [pc, #96]	; (800a77c <TIM_OC3_SetConfig+0x10c>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d113      	bne.n	800a746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	4313      	orrs	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	621a      	str	r2, [r3, #32]
}
 800a760:	bf00      	nop
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	40012c00 	.word	0x40012c00
 800a770:	40013400 	.word	0x40013400
 800a774:	40014000 	.word	0x40014000
 800a778:	40014400 	.word	0x40014400
 800a77c:	40014800 	.word	0x40014800

0800a780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	031b      	lsls	r3, r3, #12
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a28      	ldr	r2, [pc, #160]	; (800a880 <TIM_OC4_SetConfig+0x100>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d003      	beq.n	800a7ec <TIM_OC4_SetConfig+0x6c>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a27      	ldr	r2, [pc, #156]	; (800a884 <TIM_OC4_SetConfig+0x104>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d10d      	bne.n	800a808 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	031b      	lsls	r3, r3, #12
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a806:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a1d      	ldr	r2, [pc, #116]	; (800a880 <TIM_OC4_SetConfig+0x100>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00f      	beq.n	800a830 <TIM_OC4_SetConfig+0xb0>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a1c      	ldr	r2, [pc, #112]	; (800a884 <TIM_OC4_SetConfig+0x104>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d00b      	beq.n	800a830 <TIM_OC4_SetConfig+0xb0>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a1b      	ldr	r2, [pc, #108]	; (800a888 <TIM_OC4_SetConfig+0x108>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d007      	beq.n	800a830 <TIM_OC4_SetConfig+0xb0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a1a      	ldr	r2, [pc, #104]	; (800a88c <TIM_OC4_SetConfig+0x10c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d003      	beq.n	800a830 <TIM_OC4_SetConfig+0xb0>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a19      	ldr	r2, [pc, #100]	; (800a890 <TIM_OC4_SetConfig+0x110>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d113      	bne.n	800a858 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a836:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a83e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	019b      	lsls	r3, r3, #6
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	4313      	orrs	r3, r2
 800a84a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	019b      	lsls	r3, r3, #6
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	4313      	orrs	r3, r2
 800a856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40012c00 	.word	0x40012c00
 800a884:	40013400 	.word	0x40013400
 800a888:	40014000 	.word	0x40014000
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800

0800a894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a8d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a17      	ldr	r2, [pc, #92]	; (800a948 <TIM_OC5_SetConfig+0xb4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d00f      	beq.n	800a90e <TIM_OC5_SetConfig+0x7a>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a16      	ldr	r2, [pc, #88]	; (800a94c <TIM_OC5_SetConfig+0xb8>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00b      	beq.n	800a90e <TIM_OC5_SetConfig+0x7a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a15      	ldr	r2, [pc, #84]	; (800a950 <TIM_OC5_SetConfig+0xbc>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d007      	beq.n	800a90e <TIM_OC5_SetConfig+0x7a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a14      	ldr	r2, [pc, #80]	; (800a954 <TIM_OC5_SetConfig+0xc0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d003      	beq.n	800a90e <TIM_OC5_SetConfig+0x7a>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <TIM_OC5_SetConfig+0xc4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d109      	bne.n	800a922 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	021b      	lsls	r3, r3, #8
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	621a      	str	r2, [r3, #32]
}
 800a93c:	bf00      	nop
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40012c00 	.word	0x40012c00
 800a94c:	40013400 	.word	0x40013400
 800a950:	40014000 	.word	0x40014000
 800a954:	40014400 	.word	0x40014400
 800a958:	40014800 	.word	0x40014800

0800a95c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a98a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a98e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	051b      	lsls	r3, r3, #20
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a18      	ldr	r2, [pc, #96]	; (800aa14 <TIM_OC6_SetConfig+0xb8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00f      	beq.n	800a9d8 <TIM_OC6_SetConfig+0x7c>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <TIM_OC6_SetConfig+0xbc>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d00b      	beq.n	800a9d8 <TIM_OC6_SetConfig+0x7c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a16      	ldr	r2, [pc, #88]	; (800aa1c <TIM_OC6_SetConfig+0xc0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d007      	beq.n	800a9d8 <TIM_OC6_SetConfig+0x7c>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a15      	ldr	r2, [pc, #84]	; (800aa20 <TIM_OC6_SetConfig+0xc4>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d003      	beq.n	800a9d8 <TIM_OC6_SetConfig+0x7c>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a14      	ldr	r2, [pc, #80]	; (800aa24 <TIM_OC6_SetConfig+0xc8>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d109      	bne.n	800a9ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	029b      	lsls	r3, r3, #10
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	621a      	str	r2, [r3, #32]
}
 800aa06:	bf00      	nop
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	40012c00 	.word	0x40012c00
 800aa18:	40013400 	.word	0x40013400
 800aa1c:	40014000 	.word	0x40014000
 800aa20:	40014400 	.word	0x40014400
 800aa24:	40014800 	.word	0x40014800

0800aa28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	f023 0201 	bic.w	r2, r3, #1
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	011b      	lsls	r3, r3, #4
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f023 030a 	bic.w	r3, r3, #10
 800aa64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	621a      	str	r2, [r3, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b087      	sub	sp, #28
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0210 	bic.w	r2, r3, #16
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	031b      	lsls	r3, r3, #12
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	621a      	str	r2, [r3, #32]
}
 800aada:	bf00      	nop
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aafc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	f043 0307 	orr.w	r3, r3, #7
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	609a      	str	r2, [r3, #8]
}
 800ab14:	bf00      	nop
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	021a      	lsls	r2, r3, #8
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	431a      	orrs	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	609a      	str	r2, [r3, #8]
}
 800ab54:	bf00      	nop
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f003 031f 	and.w	r3, r3, #31
 800ab72:	2201      	movs	r2, #1
 800ab74:	fa02 f303 	lsl.w	r3, r2, r3
 800ab78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a1a      	ldr	r2, [r3, #32]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	43db      	mvns	r3, r3
 800ab82:	401a      	ands	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a1a      	ldr	r2, [r3, #32]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 031f 	and.w	r3, r3, #31
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	fa01 f303 	lsl.w	r3, r1, r3
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	621a      	str	r2, [r3, #32]
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
	...

0800abac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <HAL_TIMEx_PWMN_Start+0x24>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e022      	b.n	800ac16 <HAL_TIMEx_PWMN_Start+0x6a>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d109      	bne.n	800abea <HAL_TIMEx_PWMN_Start+0x3e>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b01      	cmp	r3, #1
 800abe0:	bf14      	ite	ne
 800abe2:	2301      	movne	r3, #1
 800abe4:	2300      	moveq	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	e015      	b.n	800ac16 <HAL_TIMEx_PWMN_Start+0x6a>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b08      	cmp	r3, #8
 800abee:	d109      	bne.n	800ac04 <HAL_TIMEx_PWMN_Start+0x58>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	e008      	b.n	800ac16 <HAL_TIMEx_PWMN_Start+0x6a>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e069      	b.n	800acf2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d104      	bne.n	800ac2e <HAL_TIMEx_PWMN_Start+0x82>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac2c:	e013      	b.n	800ac56 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d104      	bne.n	800ac3e <HAL_TIMEx_PWMN_Start+0x92>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac3c:	e00b      	b.n	800ac56 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d104      	bne.n	800ac4e <HAL_TIMEx_PWMN_Start+0xa2>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2202      	movs	r2, #2
 800ac48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac4c:	e003      	b.n	800ac56 <HAL_TIMEx_PWMN_Start+0xaa>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2202      	movs	r2, #2
 800ac52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2204      	movs	r2, #4
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fa1e 	bl	800b0a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a20      	ldr	r2, [pc, #128]	; (800acfc <HAL_TIMEx_PWMN_Start+0x150>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d018      	beq.n	800acb0 <HAL_TIMEx_PWMN_Start+0x104>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac86:	d013      	beq.n	800acb0 <HAL_TIMEx_PWMN_Start+0x104>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a1c      	ldr	r2, [pc, #112]	; (800ad00 <HAL_TIMEx_PWMN_Start+0x154>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d00e      	beq.n	800acb0 <HAL_TIMEx_PWMN_Start+0x104>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a1b      	ldr	r2, [pc, #108]	; (800ad04 <HAL_TIMEx_PWMN_Start+0x158>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d009      	beq.n	800acb0 <HAL_TIMEx_PWMN_Start+0x104>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a19      	ldr	r2, [pc, #100]	; (800ad08 <HAL_TIMEx_PWMN_Start+0x15c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d004      	beq.n	800acb0 <HAL_TIMEx_PWMN_Start+0x104>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a18      	ldr	r2, [pc, #96]	; (800ad0c <HAL_TIMEx_PWMN_Start+0x160>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d115      	bne.n	800acdc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	689a      	ldr	r2, [r3, #8]
 800acb6:	4b16      	ldr	r3, [pc, #88]	; (800ad10 <HAL_TIMEx_PWMN_Start+0x164>)
 800acb8:	4013      	ands	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b06      	cmp	r3, #6
 800acc0:	d015      	beq.n	800acee <HAL_TIMEx_PWMN_Start+0x142>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc8:	d011      	beq.n	800acee <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f042 0201 	orr.w	r2, r2, #1
 800acd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acda:	e008      	b.n	800acee <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0201 	orr.w	r2, r2, #1
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	e000      	b.n	800acf0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	40012c00 	.word	0x40012c00
 800ad00:	40000400 	.word	0x40000400
 800ad04:	40000800 	.word	0x40000800
 800ad08:	40013400 	.word	0x40013400
 800ad0c:	40014000 	.word	0x40014000
 800ad10:	00010007 	.word	0x00010007

0800ad14 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2200      	movs	r2, #0
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 f9ba 	bl	800b0a0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6a1a      	ldr	r2, [r3, #32]
 800ad32:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad36:	4013      	ands	r3, r2
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10f      	bne.n	800ad5c <HAL_TIMEx_PWMN_Stop+0x48>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6a1a      	ldr	r2, [r3, #32]
 800ad42:	f244 4344 	movw	r3, #17476	; 0x4444
 800ad46:	4013      	ands	r3, r2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d107      	bne.n	800ad5c <HAL_TIMEx_PWMN_Stop+0x48>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6a1a      	ldr	r2, [r3, #32]
 800ad62:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad66:	4013      	ands	r3, r2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10f      	bne.n	800ad8c <HAL_TIMEx_PWMN_Stop+0x78>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6a1a      	ldr	r2, [r3, #32]
 800ad72:	f244 4344 	movw	r3, #17476	; 0x4444
 800ad76:	4013      	ands	r3, r2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d107      	bne.n	800ad8c <HAL_TIMEx_PWMN_Stop+0x78>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d104      	bne.n	800ad9c <HAL_TIMEx_PWMN_Stop+0x88>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad9a:	e013      	b.n	800adc4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d104      	bne.n	800adac <HAL_TIMEx_PWMN_Stop+0x98>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adaa:	e00b      	b.n	800adc4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d104      	bne.n	800adbc <HAL_TIMEx_PWMN_Stop+0xa8>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800adba:	e003      	b.n	800adc4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d101      	bne.n	800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ade4:	2302      	movs	r3, #2
 800ade6:	e065      	b.n	800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a2c      	ldr	r2, [pc, #176]	; (800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d004      	beq.n	800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a2b      	ldr	r2, [pc, #172]	; (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d108      	bne.n	800ae2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ae34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a1b      	ldr	r2, [pc, #108]	; (800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d018      	beq.n	800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5e:	d013      	beq.n	800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a18      	ldr	r2, [pc, #96]	; (800aec8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d00e      	beq.n	800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a17      	ldr	r2, [pc, #92]	; (800aecc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d009      	beq.n	800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a12      	ldr	r2, [pc, #72]	; (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d004      	beq.n	800ae88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a13      	ldr	r2, [pc, #76]	; (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d10c      	bne.n	800aea2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	40012c00 	.word	0x40012c00
 800aec4:	40013400 	.word	0x40013400
 800aec8:	40000400 	.word	0x40000400
 800aecc:	40000800 	.word	0x40000800
 800aed0:	40014000 	.word	0x40014000

0800aed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e087      	b.n	800b000 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	4313      	orrs	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	041b      	lsls	r3, r3, #16
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a27      	ldr	r2, [pc, #156]	; (800b00c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d004      	beq.n	800af7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a25      	ldr	r2, [pc, #148]	; (800b010 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d106      	bne.n	800af8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	4313      	orrs	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a1e      	ldr	r2, [pc, #120]	; (800b00c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d004      	beq.n	800afa0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a1d      	ldr	r2, [pc, #116]	; (800b010 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d126      	bne.n	800afee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	051b      	lsls	r3, r3, #20
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0e      	ldr	r2, [pc, #56]	; (800b00c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d004      	beq.n	800afe0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a0d      	ldr	r2, [pc, #52]	; (800b010 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d106      	bne.n	800afee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afea:	4313      	orrs	r3, r2
 800afec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	40012c00 	.word	0x40012c00
 800b010:	40013400 	.word	0x40013400

0800b014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f003 031f 	and.w	r3, r3, #31
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6a1a      	ldr	r2, [r3, #32]
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	401a      	ands	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1a      	ldr	r2, [r3, #32]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	f003 031f 	and.w	r3, r3, #31
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	621a      	str	r2, [r3, #32]
}
 800b0de:	bf00      	nop
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b082      	sub	sp, #8
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e042      	b.n	800b182 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7f8 fbe6 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2224      	movs	r2, #36	; 0x24
 800b118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f022 0201 	bic.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fc01 	bl	800b934 <UART_SetConfig>
 800b132:	4603      	mov	r3, r0
 800b134:	2b01      	cmp	r3, #1
 800b136:	d101      	bne.n	800b13c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e022      	b.n	800b182 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fec1 	bl	800becc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	685a      	ldr	r2, [r3, #4]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b168:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f042 0201 	orr.w	r2, r2, #1
 800b178:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 ff48 	bl	800c010 <UART_CheckIdleState>
 800b180:	4603      	mov	r3, r0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08a      	sub	sp, #40	; 0x28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d17a      	bne.n	800b29a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <HAL_UART_Transmit_DMA+0x24>
 800b1aa:	88fb      	ldrh	r3, [r7, #6]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e073      	b.n	800b29c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UART_Transmit_DMA+0x36>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e06c      	b.n	800b29c <HAL_UART_Transmit_DMA+0x110>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	88fa      	ldrh	r2, [r7, #6]
 800b1d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	88fa      	ldrh	r2, [r7, #6]
 800b1dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2221      	movs	r2, #33	; 0x21
 800b1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02c      	beq.n	800b252 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1fc:	4a29      	ldr	r2, [pc, #164]	; (800b2a4 <HAL_UART_Transmit_DMA+0x118>)
 800b1fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b204:	4a28      	ldr	r2, [pc, #160]	; (800b2a8 <HAL_UART_Transmit_DMA+0x11c>)
 800b206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b20c:	4a27      	ldr	r2, [pc, #156]	; (800b2ac <HAL_UART_Transmit_DMA+0x120>)
 800b20e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b214:	2200      	movs	r2, #0
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b220:	4619      	mov	r1, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3328      	adds	r3, #40	; 0x28
 800b228:	461a      	mov	r2, r3
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	f7fb f8fe 	bl	800642c <HAL_DMA_Start_IT>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00d      	beq.n	800b252 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2210      	movs	r2, #16
 800b23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e024      	b.n	800b29c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2240      	movs	r2, #64	; 0x40
 800b258:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3308      	adds	r3, #8
 800b268:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	613b      	str	r3, [r7, #16]
   return(result);
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b282:	623a      	str	r2, [r7, #32]
 800b284:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	69f9      	ldr	r1, [r7, #28]
 800b288:	6a3a      	ldr	r2, [r7, #32]
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e5      	bne.n	800b262 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	e000      	b.n	800b29c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b29a:	2302      	movs	r3, #2
  }
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3728      	adds	r7, #40	; 0x28
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	0800c385 	.word	0x0800c385
 800b2a8:	0800c41f 	.word	0x0800c41f
 800b2ac:	0800c43b 	.word	0x0800c43b

0800b2b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b0ba      	sub	sp, #232	; 0xe8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b2d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b2da:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2de:	4013      	ands	r3, r2
 800b2e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b2e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d11b      	bne.n	800b324 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d015      	beq.n	800b324 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d105      	bne.n	800b310 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d009      	beq.n	800b324 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 82d6 	beq.w	800b8c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
      }
      return;
 800b322:	e2d0      	b.n	800b8c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 811f 	beq.w	800b56c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b32e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b332:	4b8b      	ldr	r3, [pc, #556]	; (800b560 <HAL_UART_IRQHandler+0x2b0>)
 800b334:	4013      	ands	r3, r2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b33a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b33e:	4b89      	ldr	r3, [pc, #548]	; (800b564 <HAL_UART_IRQHandler+0x2b4>)
 800b340:	4013      	ands	r3, r2
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8112 	beq.w	800b56c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34c:	f003 0301 	and.w	r3, r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	d011      	beq.n	800b378 <HAL_UART_IRQHandler+0xc8>
 800b354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2201      	movs	r2, #1
 800b366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b36e:	f043 0201 	orr.w	r2, r3, #1
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d011      	beq.n	800b3a8 <HAL_UART_IRQHandler+0xf8>
 800b384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2202      	movs	r2, #2
 800b396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b39e:	f043 0204 	orr.w	r2, r3, #4
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d011      	beq.n	800b3d8 <HAL_UART_IRQHandler+0x128>
 800b3b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2204      	movs	r2, #4
 800b3c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ce:	f043 0202 	orr.w	r2, r3, #2
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0308 	and.w	r3, r3, #8
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d017      	beq.n	800b414 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e8:	f003 0320 	and.w	r3, r3, #32
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d105      	bne.n	800b3fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b3f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b3f4:	4b5a      	ldr	r3, [pc, #360]	; (800b560 <HAL_UART_IRQHandler+0x2b0>)
 800b3f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2208      	movs	r2, #8
 800b402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b40a:	f043 0208 	orr.w	r2, r3, #8
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d012      	beq.n	800b446 <HAL_UART_IRQHandler+0x196>
 800b420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b424:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00c      	beq.n	800b446 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43c:	f043 0220 	orr.w	r2, r3, #32
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 823c 	beq.w	800b8ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d013      	beq.n	800b486 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b45e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b462:	f003 0320 	and.w	r3, r3, #32
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b48c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49a:	2b40      	cmp	r3, #64	; 0x40
 800b49c:	d005      	beq.n	800b4aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b49e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d04f      	beq.n	800b54a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 ff04 	bl	800c2b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ba:	2b40      	cmp	r3, #64	; 0x40
 800b4bc:	d141      	bne.n	800b542 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1d9      	bne.n	800b4be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d013      	beq.n	800b53a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b516:	4a14      	ldr	r2, [pc, #80]	; (800b568 <HAL_UART_IRQHandler+0x2b8>)
 800b518:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fb f858 	bl	80065d4 <HAL_DMA_Abort_IT>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d017      	beq.n	800b55a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b534:	4610      	mov	r0, r2
 800b536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b538:	e00f      	b.n	800b55a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f9e4 	bl	800b908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b540:	e00b      	b.n	800b55a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f9e0 	bl	800b908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b548:	e007      	b.n	800b55a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f9dc 	bl	800b908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b558:	e1b7      	b.n	800b8ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b55a:	bf00      	nop
    return;
 800b55c:	e1b5      	b.n	800b8ca <HAL_UART_IRQHandler+0x61a>
 800b55e:	bf00      	nop
 800b560:	10000001 	.word	0x10000001
 800b564:	04000120 	.word	0x04000120
 800b568:	0800c4bb 	.word	0x0800c4bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b570:	2b01      	cmp	r3, #1
 800b572:	f040 814a 	bne.w	800b80a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57a:	f003 0310 	and.w	r3, r3, #16
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 8143 	beq.w	800b80a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b588:	f003 0310 	and.w	r3, r3, #16
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 813c 	beq.w	800b80a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2210      	movs	r2, #16
 800b598:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	f040 80b5 	bne.w	800b714 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 8187 	beq.w	800b8ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	f080 817f 	bcs.w	800b8ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 8086 	bne.w	800b6f8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5f8:	e853 3f00 	ldrex	r3, [r3]
 800b5fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b61a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b62e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1da      	bne.n	800b5ec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3308      	adds	r3, #8
 800b63c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b640:	e853 3f00 	ldrex	r3, [r3]
 800b644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b648:	f023 0301 	bic.w	r3, r3, #1
 800b64c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3308      	adds	r3, #8
 800b656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b65a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b65e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b66c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e1      	bne.n	800b636 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3308      	adds	r3, #8
 800b692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b696:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b69c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e3      	bne.n	800b672 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2220      	movs	r2, #32
 800b6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c0:	e853 3f00 	ldrex	r3, [r3]
 800b6c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6c8:	f023 0310 	bic.w	r3, r3, #16
 800b6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6da:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e4      	bne.n	800b6b8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fa ff15 	bl	8006522 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b704:	b29b      	uxth	r3, r3
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	b29b      	uxth	r3, r3
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 f905 	bl	800b91c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b712:	e0dc      	b.n	800b8ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b720:	b29b      	uxth	r3, r3
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b72e:	b29b      	uxth	r3, r3
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 80ce 	beq.w	800b8d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b736:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 80c9 	beq.w	800b8d2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	461a      	mov	r2, r3
 800b75e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b762:	647b      	str	r3, [r7, #68]	; 0x44
 800b764:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e4      	bne.n	800b740 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3308      	adds	r3, #8
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	e853 3f00 	ldrex	r3, [r3]
 800b784:	623b      	str	r3, [r7, #32]
   return(result);
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b78c:	f023 0301 	bic.w	r3, r3, #1
 800b790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3308      	adds	r3, #8
 800b79a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b79e:	633a      	str	r2, [r7, #48]	; 0x30
 800b7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e1      	bne.n	800b776 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	e853 3f00 	ldrex	r3, [r3]
 800b7d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0310 	bic.w	r3, r3, #16
 800b7da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7e8:	61fb      	str	r3, [r7, #28]
 800b7ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	69b9      	ldr	r1, [r7, #24]
 800b7ee:	69fa      	ldr	r2, [r7, #28]
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e4      	bne.n	800b7c6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f88a 	bl	800b91c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b808:	e063      	b.n	800b8d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00e      	beq.n	800b834 <HAL_UART_IRQHandler+0x584>
 800b816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b81a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d008      	beq.n	800b834 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b82a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fe85 	bl	800c53c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b832:	e051      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d014      	beq.n	800b86a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d105      	bne.n	800b858 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d008      	beq.n	800b86a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d03a      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	4798      	blx	r3
    }
    return;
 800b868:	e035      	b.n	800b8d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b872:	2b00      	cmp	r3, #0
 800b874:	d009      	beq.n	800b88a <HAL_UART_IRQHandler+0x5da>
 800b876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fe2f 	bl	800c4e6 <UART_EndTransmit_IT>
    return;
 800b888:	e026      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <HAL_UART_IRQHandler+0x5fa>
 800b896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b89a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fe5e 	bl	800c564 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8a8:	e016      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b8aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d010      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x628>
 800b8b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da0c      	bge.n	800b8d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fe46 	bl	800c550 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8c4:	e008      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
      return;
 800b8c6:	bf00      	nop
 800b8c8:	e006      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
    return;
 800b8ca:	bf00      	nop
 800b8cc:	e004      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
      return;
 800b8ce:	bf00      	nop
 800b8d0:	e002      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
      return;
 800b8d2:	bf00      	nop
 800b8d4:	e000      	b.n	800b8d8 <HAL_UART_IRQHandler+0x628>
    return;
 800b8d6:	bf00      	nop
  }
}
 800b8d8:	37e8      	adds	r7, #232	; 0xe8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop

0800b8e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b938:	b08c      	sub	sp, #48	; 0x30
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	431a      	orrs	r2, r3
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	431a      	orrs	r2, r3
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	69db      	ldr	r3, [r3, #28]
 800b958:	4313      	orrs	r3, r2
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	4bab      	ldr	r3, [pc, #684]	; (800bc10 <UART_SetConfig+0x2dc>)
 800b964:	4013      	ands	r3, r2
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	68da      	ldr	r2, [r3, #12]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4aa0      	ldr	r2, [pc, #640]	; (800bc14 <UART_SetConfig+0x2e0>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d004      	beq.n	800b9a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b99c:	4313      	orrs	r3, r2
 800b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b9aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	6812      	ldr	r2, [r2, #0]
 800b9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	f023 010f 	bic.w	r1, r3, #15
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a91      	ldr	r2, [pc, #580]	; (800bc18 <UART_SetConfig+0x2e4>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d125      	bne.n	800ba24 <UART_SetConfig+0xf0>
 800b9d8:	4b90      	ldr	r3, [pc, #576]	; (800bc1c <UART_SetConfig+0x2e8>)
 800b9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9de:	f003 0303 	and.w	r3, r3, #3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d81a      	bhi.n	800ba1c <UART_SetConfig+0xe8>
 800b9e6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <UART_SetConfig+0xb8>)
 800b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ec:	0800b9fd 	.word	0x0800b9fd
 800b9f0:	0800ba0d 	.word	0x0800ba0d
 800b9f4:	0800ba05 	.word	0x0800ba05
 800b9f8:	0800ba15 	.word	0x0800ba15
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba02:	e0d6      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba04:	2302      	movs	r3, #2
 800ba06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba0a:	e0d2      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba0c:	2304      	movs	r3, #4
 800ba0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba12:	e0ce      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba14:	2308      	movs	r3, #8
 800ba16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba1a:	e0ca      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba1c:	2310      	movs	r3, #16
 800ba1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba22:	e0c6      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a7d      	ldr	r2, [pc, #500]	; (800bc20 <UART_SetConfig+0x2ec>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d138      	bne.n	800baa0 <UART_SetConfig+0x16c>
 800ba2e:	4b7b      	ldr	r3, [pc, #492]	; (800bc1c <UART_SetConfig+0x2e8>)
 800ba30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba34:	f003 030c 	and.w	r3, r3, #12
 800ba38:	2b0c      	cmp	r3, #12
 800ba3a:	d82d      	bhi.n	800ba98 <UART_SetConfig+0x164>
 800ba3c:	a201      	add	r2, pc, #4	; (adr r2, 800ba44 <UART_SetConfig+0x110>)
 800ba3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba42:	bf00      	nop
 800ba44:	0800ba79 	.word	0x0800ba79
 800ba48:	0800ba99 	.word	0x0800ba99
 800ba4c:	0800ba99 	.word	0x0800ba99
 800ba50:	0800ba99 	.word	0x0800ba99
 800ba54:	0800ba89 	.word	0x0800ba89
 800ba58:	0800ba99 	.word	0x0800ba99
 800ba5c:	0800ba99 	.word	0x0800ba99
 800ba60:	0800ba99 	.word	0x0800ba99
 800ba64:	0800ba81 	.word	0x0800ba81
 800ba68:	0800ba99 	.word	0x0800ba99
 800ba6c:	0800ba99 	.word	0x0800ba99
 800ba70:	0800ba99 	.word	0x0800ba99
 800ba74:	0800ba91 	.word	0x0800ba91
 800ba78:	2300      	movs	r3, #0
 800ba7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba7e:	e098      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba80:	2302      	movs	r3, #2
 800ba82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba86:	e094      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba88:	2304      	movs	r3, #4
 800ba8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba8e:	e090      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba90:	2308      	movs	r3, #8
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba96:	e08c      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800ba98:	2310      	movs	r3, #16
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	e088      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a5f      	ldr	r2, [pc, #380]	; (800bc24 <UART_SetConfig+0x2f0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d125      	bne.n	800baf6 <UART_SetConfig+0x1c2>
 800baaa:	4b5c      	ldr	r3, [pc, #368]	; (800bc1c <UART_SetConfig+0x2e8>)
 800baac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bab4:	2b30      	cmp	r3, #48	; 0x30
 800bab6:	d016      	beq.n	800bae6 <UART_SetConfig+0x1b2>
 800bab8:	2b30      	cmp	r3, #48	; 0x30
 800baba:	d818      	bhi.n	800baee <UART_SetConfig+0x1ba>
 800babc:	2b20      	cmp	r3, #32
 800babe:	d00a      	beq.n	800bad6 <UART_SetConfig+0x1a2>
 800bac0:	2b20      	cmp	r3, #32
 800bac2:	d814      	bhi.n	800baee <UART_SetConfig+0x1ba>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <UART_SetConfig+0x19a>
 800bac8:	2b10      	cmp	r3, #16
 800baca:	d008      	beq.n	800bade <UART_SetConfig+0x1aa>
 800bacc:	e00f      	b.n	800baee <UART_SetConfig+0x1ba>
 800bace:	2300      	movs	r3, #0
 800bad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bad4:	e06d      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bad6:	2302      	movs	r3, #2
 800bad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800badc:	e069      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bade:	2304      	movs	r3, #4
 800bae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae4:	e065      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bae6:	2308      	movs	r3, #8
 800bae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baec:	e061      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800baee:	2310      	movs	r3, #16
 800baf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf4:	e05d      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a4b      	ldr	r2, [pc, #300]	; (800bc28 <UART_SetConfig+0x2f4>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d125      	bne.n	800bb4c <UART_SetConfig+0x218>
 800bb00:	4b46      	ldr	r3, [pc, #280]	; (800bc1c <UART_SetConfig+0x2e8>)
 800bb02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb0a:	2bc0      	cmp	r3, #192	; 0xc0
 800bb0c:	d016      	beq.n	800bb3c <UART_SetConfig+0x208>
 800bb0e:	2bc0      	cmp	r3, #192	; 0xc0
 800bb10:	d818      	bhi.n	800bb44 <UART_SetConfig+0x210>
 800bb12:	2b80      	cmp	r3, #128	; 0x80
 800bb14:	d00a      	beq.n	800bb2c <UART_SetConfig+0x1f8>
 800bb16:	2b80      	cmp	r3, #128	; 0x80
 800bb18:	d814      	bhi.n	800bb44 <UART_SetConfig+0x210>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d002      	beq.n	800bb24 <UART_SetConfig+0x1f0>
 800bb1e:	2b40      	cmp	r3, #64	; 0x40
 800bb20:	d008      	beq.n	800bb34 <UART_SetConfig+0x200>
 800bb22:	e00f      	b.n	800bb44 <UART_SetConfig+0x210>
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb2a:	e042      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb32:	e03e      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb34:	2304      	movs	r3, #4
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb3a:	e03a      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb42:	e036      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb44:	2310      	movs	r3, #16
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb4a:	e032      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a30      	ldr	r2, [pc, #192]	; (800bc14 <UART_SetConfig+0x2e0>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d12a      	bne.n	800bbac <UART_SetConfig+0x278>
 800bb56:	4b31      	ldr	r3, [pc, #196]	; (800bc1c <UART_SetConfig+0x2e8>)
 800bb58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bb60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb64:	d01a      	beq.n	800bb9c <UART_SetConfig+0x268>
 800bb66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb6a:	d81b      	bhi.n	800bba4 <UART_SetConfig+0x270>
 800bb6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb70:	d00c      	beq.n	800bb8c <UART_SetConfig+0x258>
 800bb72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb76:	d815      	bhi.n	800bba4 <UART_SetConfig+0x270>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <UART_SetConfig+0x250>
 800bb7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb80:	d008      	beq.n	800bb94 <UART_SetConfig+0x260>
 800bb82:	e00f      	b.n	800bba4 <UART_SetConfig+0x270>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb8a:	e012      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb92:	e00e      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb94:	2304      	movs	r3, #4
 800bb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb9a:	e00a      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bb9c:	2308      	movs	r3, #8
 800bb9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bba2:	e006      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bba4:	2310      	movs	r3, #16
 800bba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbaa:	e002      	b.n	800bbb2 <UART_SetConfig+0x27e>
 800bbac:	2310      	movs	r3, #16
 800bbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a17      	ldr	r2, [pc, #92]	; (800bc14 <UART_SetConfig+0x2e0>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	f040 80a8 	bne.w	800bd0e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbc2:	2b08      	cmp	r3, #8
 800bbc4:	d834      	bhi.n	800bc30 <UART_SetConfig+0x2fc>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <UART_SetConfig+0x298>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbf1 	.word	0x0800bbf1
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	0800bbf9 	.word	0x0800bbf9
 800bbd8:	0800bc31 	.word	0x0800bc31
 800bbdc:	0800bbff 	.word	0x0800bbff
 800bbe0:	0800bc31 	.word	0x0800bc31
 800bbe4:	0800bc31 	.word	0x0800bc31
 800bbe8:	0800bc31 	.word	0x0800bc31
 800bbec:	0800bc07 	.word	0x0800bc07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf0:	f7fc fca0 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800bbf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbf6:	e021      	b.n	800bc3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <UART_SetConfig+0x2f8>)
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbfc:	e01e      	b.n	800bc3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbfe:	f7fc fc2d 	bl	800845c <HAL_RCC_GetSysClockFreq>
 800bc02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc04:	e01a      	b.n	800bc3c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc0c:	e016      	b.n	800bc3c <UART_SetConfig+0x308>
 800bc0e:	bf00      	nop
 800bc10:	cfff69f3 	.word	0xcfff69f3
 800bc14:	40008000 	.word	0x40008000
 800bc18:	40013800 	.word	0x40013800
 800bc1c:	40021000 	.word	0x40021000
 800bc20:	40004400 	.word	0x40004400
 800bc24:	40004800 	.word	0x40004800
 800bc28:	40004c00 	.word	0x40004c00
 800bc2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 812a 	beq.w	800be98 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	4a9e      	ldr	r2, [pc, #632]	; (800bec4 <UART_SetConfig+0x590>)
 800bc4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc56:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	4413      	add	r3, r2
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d305      	bcc.n	800bc74 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d903      	bls.n	800bc7c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc7a:	e10d      	b.n	800be98 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	2200      	movs	r2, #0
 800bc80:	60bb      	str	r3, [r7, #8]
 800bc82:	60fa      	str	r2, [r7, #12]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	4a8e      	ldr	r2, [pc, #568]	; (800bec4 <UART_SetConfig+0x590>)
 800bc8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	2200      	movs	r2, #0
 800bc92:	603b      	str	r3, [r7, #0]
 800bc94:	607a      	str	r2, [r7, #4]
 800bc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc9e:	f7f4 fb17 	bl	80002d0 <__aeabi_uldivmod>
 800bca2:	4602      	mov	r2, r0
 800bca4:	460b      	mov	r3, r1
 800bca6:	4610      	mov	r0, r2
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f04f 0200 	mov.w	r2, #0
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	020b      	lsls	r3, r1, #8
 800bcb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcb8:	0202      	lsls	r2, r0, #8
 800bcba:	6979      	ldr	r1, [r7, #20]
 800bcbc:	6849      	ldr	r1, [r1, #4]
 800bcbe:	0849      	lsrs	r1, r1, #1
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	4605      	mov	r5, r0
 800bcc6:	eb12 0804 	adds.w	r8, r2, r4
 800bcca:	eb43 0905 	adc.w	r9, r3, r5
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	469a      	mov	sl, r3
 800bcd6:	4693      	mov	fp, r2
 800bcd8:	4652      	mov	r2, sl
 800bcda:	465b      	mov	r3, fp
 800bcdc:	4640      	mov	r0, r8
 800bcde:	4649      	mov	r1, r9
 800bce0:	f7f4 faf6 	bl	80002d0 <__aeabi_uldivmod>
 800bce4:	4602      	mov	r2, r0
 800bce6:	460b      	mov	r3, r1
 800bce8:	4613      	mov	r3, r2
 800bcea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcf2:	d308      	bcc.n	800bd06 <UART_SetConfig+0x3d2>
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcfa:	d204      	bcs.n	800bd06 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6a3a      	ldr	r2, [r7, #32]
 800bd02:	60da      	str	r2, [r3, #12]
 800bd04:	e0c8      	b.n	800be98 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd0c:	e0c4      	b.n	800be98 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	69db      	ldr	r3, [r3, #28]
 800bd12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd16:	d167      	bne.n	800bde8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bd18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	d828      	bhi.n	800bd72 <UART_SetConfig+0x43e>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <UART_SetConfig+0x3f4>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd4d 	.word	0x0800bd4d
 800bd2c:	0800bd55 	.word	0x0800bd55
 800bd30:	0800bd5d 	.word	0x0800bd5d
 800bd34:	0800bd73 	.word	0x0800bd73
 800bd38:	0800bd63 	.word	0x0800bd63
 800bd3c:	0800bd73 	.word	0x0800bd73
 800bd40:	0800bd73 	.word	0x0800bd73
 800bd44:	0800bd73 	.word	0x0800bd73
 800bd48:	0800bd6b 	.word	0x0800bd6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd4c:	f7fc fbf2 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800bd50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd52:	e014      	b.n	800bd7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd54:	f7fc fc04 	bl	8008560 <HAL_RCC_GetPCLK2Freq>
 800bd58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd5a:	e010      	b.n	800bd7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd5c:	4b5a      	ldr	r3, [pc, #360]	; (800bec8 <UART_SetConfig+0x594>)
 800bd5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd60:	e00d      	b.n	800bd7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd62:	f7fc fb7b 	bl	800845c <HAL_RCC_GetSysClockFreq>
 800bd66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd68:	e009      	b.n	800bd7e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd70:	e005      	b.n	800bd7e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 8089 	beq.w	800be98 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8a:	4a4e      	ldr	r2, [pc, #312]	; (800bec4 <UART_SetConfig+0x590>)
 800bd8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd90:	461a      	mov	r2, r3
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd98:	005a      	lsls	r2, r3, #1
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	085b      	lsrs	r3, r3, #1
 800bda0:	441a      	add	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	2b0f      	cmp	r3, #15
 800bdb0:	d916      	bls.n	800bde0 <UART_SetConfig+0x4ac>
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdb8:	d212      	bcs.n	800bde0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f023 030f 	bic.w	r3, r3, #15
 800bdc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	085b      	lsrs	r3, r3, #1
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	8bfb      	ldrh	r3, [r7, #30]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	8bfa      	ldrh	r2, [r7, #30]
 800bddc:	60da      	str	r2, [r3, #12]
 800bdde:	e05b      	b.n	800be98 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bde6:	e057      	b.n	800be98 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bde8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bdec:	2b08      	cmp	r3, #8
 800bdee:	d828      	bhi.n	800be42 <UART_SetConfig+0x50e>
 800bdf0:	a201      	add	r2, pc, #4	; (adr r2, 800bdf8 <UART_SetConfig+0x4c4>)
 800bdf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf6:	bf00      	nop
 800bdf8:	0800be1d 	.word	0x0800be1d
 800bdfc:	0800be25 	.word	0x0800be25
 800be00:	0800be2d 	.word	0x0800be2d
 800be04:	0800be43 	.word	0x0800be43
 800be08:	0800be33 	.word	0x0800be33
 800be0c:	0800be43 	.word	0x0800be43
 800be10:	0800be43 	.word	0x0800be43
 800be14:	0800be43 	.word	0x0800be43
 800be18:	0800be3b 	.word	0x0800be3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be1c:	f7fc fb8a 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 800be20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be22:	e014      	b.n	800be4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be24:	f7fc fb9c 	bl	8008560 <HAL_RCC_GetPCLK2Freq>
 800be28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be2a:	e010      	b.n	800be4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be2c:	4b26      	ldr	r3, [pc, #152]	; (800bec8 <UART_SetConfig+0x594>)
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be30:	e00d      	b.n	800be4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be32:	f7fc fb13 	bl	800845c <HAL_RCC_GetSysClockFreq>
 800be36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800be38:	e009      	b.n	800be4e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be40:	e005      	b.n	800be4e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800be4c:	bf00      	nop
    }

    if (pclk != 0U)
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	2b00      	cmp	r3, #0
 800be52:	d021      	beq.n	800be98 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	4a1a      	ldr	r2, [pc, #104]	; (800bec4 <UART_SetConfig+0x590>)
 800be5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be5e:	461a      	mov	r2, r3
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	fbb3 f2f2 	udiv	r2, r3, r2
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	441a      	add	r2, r3
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	fbb2 f3f3 	udiv	r3, r2, r3
 800be76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	2b0f      	cmp	r3, #15
 800be7c:	d909      	bls.n	800be92 <UART_SetConfig+0x55e>
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be84:	d205      	bcs.n	800be92 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	b29a      	uxth	r2, r3
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60da      	str	r2, [r3, #12]
 800be90:	e002      	b.n	800be98 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	2200      	movs	r2, #0
 800beac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2200      	movs	r2, #0
 800beb2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800beb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3730      	adds	r7, #48	; 0x30
 800bebc:	46bd      	mov	sp, r7
 800bebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bec2:	bf00      	nop
 800bec4:	0800d170 	.word	0x0800d170
 800bec8:	00f42400 	.word	0x00f42400

0800becc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00a      	beq.n	800bef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befa:	f003 0302 	and.w	r3, r3, #2
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00a      	beq.n	800bf18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	430a      	orrs	r2, r1
 800bf38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	f003 0308 	and.w	r3, r3, #8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf60:	f003 0310 	and.w	r3, r3, #16
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01a      	beq.n	800bfe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfca:	d10a      	bne.n	800bfe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	430a      	orrs	r2, r1
 800c002:	605a      	str	r2, [r3, #4]
  }
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af02      	add	r7, sp, #8
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c020:	f7f7 fd7a 	bl	8003b18 <HAL_GetTick>
 800c024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0308 	and.w	r3, r3, #8
 800c030:	2b08      	cmp	r3, #8
 800c032:	d10e      	bne.n	800c052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f82f 	bl	800c0a6 <UART_WaitOnFlagUntilTimeout>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e025      	b.n	800c09e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0304 	and.w	r3, r3, #4
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d10e      	bne.n	800c07e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f819 	bl	800c0a6 <UART_WaitOnFlagUntilTimeout>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c07a:	2303      	movs	r3, #3
 800c07c:	e00f      	b.n	800c09e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b09c      	sub	sp, #112	; 0x70
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60f8      	str	r0, [r7, #12]
 800c0ae:	60b9      	str	r1, [r7, #8]
 800c0b0:	603b      	str	r3, [r7, #0]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0b6:	e0a9      	b.n	800c20c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0be:	f000 80a5 	beq.w	800c20c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c2:	f7f7 fd29 	bl	8003b18 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c0d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d140      	bne.n	800c15a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0ec:	667b      	str	r3, [r7, #100]	; 0x64
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e6      	bne.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3308      	adds	r3, #8
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	f023 0301 	bic.w	r3, r3, #1
 800c120:	663b      	str	r3, [r7, #96]	; 0x60
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3308      	adds	r3, #8
 800c128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c12a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c12c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e5      	bne.n	800c10a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e069      	b.n	800c22e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d051      	beq.n	800c20c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69db      	ldr	r3, [r3, #28]
 800c16e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c176:	d149      	bne.n	800c20c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	e853 3f00 	ldrex	r3, [r3]
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c196:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a8:	e841 2300 	strex	r3, r2, [r1]
 800c1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1e6      	bne.n	800c182 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	e853 3f00 	ldrex	r3, [r3]
 800c1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f023 0301 	bic.w	r3, r3, #1
 800c1ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1d4:	623a      	str	r2, [r7, #32]
 800c1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	6a3a      	ldr	r2, [r7, #32]
 800c1dc:	e841 2300 	strex	r3, r2, [r1]
 800c1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1e5      	bne.n	800c1b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2220      	movs	r2, #32
 800c1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e010      	b.n	800c22e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	69da      	ldr	r2, [r3, #28]
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	4013      	ands	r3, r2
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	429a      	cmp	r2, r3
 800c21a:	bf0c      	ite	eq
 800c21c:	2301      	moveq	r3, #1
 800c21e:	2300      	movne	r3, #0
 800c220:	b2db      	uxtb	r3, r3
 800c222:	461a      	mov	r2, r3
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	429a      	cmp	r2, r3
 800c228:	f43f af46 	beq.w	800c0b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3770      	adds	r7, #112	; 0x70
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c236:	b480      	push	{r7}
 800c238:	b08f      	sub	sp, #60	; 0x3c
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	e853 3f00 	ldrex	r3, [r3]
 800c24a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c252:	637b      	str	r3, [r7, #52]	; 0x34
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	461a      	mov	r2, r3
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c25e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e6      	bne.n	800c23e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	3308      	adds	r3, #8
 800c276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c286:	633b      	str	r3, [r7, #48]	; 0x30
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3308      	adds	r3, #8
 800c28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c290:	61ba      	str	r2, [r7, #24]
 800c292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6979      	ldr	r1, [r7, #20]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	613b      	str	r3, [r7, #16]
   return(result);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e5      	bne.n	800c270 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c2ac:	bf00      	nop
 800c2ae:	373c      	adds	r7, #60	; 0x3c
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b095      	sub	sp, #84	; 0x54
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c8:	e853 3f00 	ldrex	r3, [r3]
 800c2cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2de:	643b      	str	r3, [r7, #64]	; 0x40
 800c2e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2e6:	e841 2300 	strex	r3, r2, [r1]
 800c2ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e6      	bne.n	800c2c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	e853 3f00 	ldrex	r3, [r3]
 800c300:	61fb      	str	r3, [r7, #28]
   return(result);
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c308:	f023 0301 	bic.w	r3, r3, #1
 800c30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c316:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c31c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c31e:	e841 2300 	strex	r3, r2, [r1]
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1e3      	bne.n	800c2f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d118      	bne.n	800c364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f023 0310 	bic.w	r3, r3, #16
 800c346:	647b      	str	r3, [r7, #68]	; 0x44
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	6979      	ldr	r1, [r7, #20]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	613b      	str	r3, [r7, #16]
   return(result);
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e6      	bne.n	800c332 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c378:	bf00      	nop
 800c37a:	3754      	adds	r7, #84	; 0x54
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b090      	sub	sp, #64	; 0x40
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c390:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 0320 	and.w	r3, r3, #32
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d137      	bne.n	800c410 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	e853 3f00 	ldrex	r3, [r3]
 800c3b6:	623b      	str	r3, [r7, #32]
   return(result);
 800c3b8:	6a3b      	ldr	r3, [r7, #32]
 800c3ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3be:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c8:	633a      	str	r2, [r7, #48]	; 0x30
 800c3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3d0:	e841 2300 	strex	r3, r2, [r1]
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e5      	bne.n	800c3a8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fa:	61fb      	str	r3, [r7, #28]
 800c3fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	69b9      	ldr	r1, [r7, #24]
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	617b      	str	r3, [r7, #20]
   return(result);
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e6      	bne.n	800c3dc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c40e:	e002      	b.n	800c416 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c410:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c412:	f7ff fa65 	bl	800b8e0 <HAL_UART_TxCpltCallback>
}
 800c416:	bf00      	nop
 800c418:	3740      	adds	r7, #64	; 0x40
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff fa61 	bl	800b8f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c432:	bf00      	nop
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c446:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c44e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c456:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c462:	2b80      	cmp	r3, #128	; 0x80
 800c464:	d109      	bne.n	800c47a <UART_DMAError+0x40>
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b21      	cmp	r3, #33	; 0x21
 800c46a:	d106      	bne.n	800c47a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c474:	6978      	ldr	r0, [r7, #20]
 800c476:	f7ff fede 	bl	800c236 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c484:	2b40      	cmp	r3, #64	; 0x40
 800c486:	d109      	bne.n	800c49c <UART_DMAError+0x62>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b22      	cmp	r3, #34	; 0x22
 800c48c:	d106      	bne.n	800c49c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2200      	movs	r2, #0
 800c492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c496:	6978      	ldr	r0, [r7, #20]
 800c498:	f7ff ff0e 	bl	800c2b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4a2:	f043 0210 	orr.w	r2, r3, #16
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4ac:	6978      	ldr	r0, [r7, #20]
 800c4ae:	f7ff fa2b 	bl	800b908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4b2:	bf00      	nop
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7ff fa15 	bl	800b908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4de:	bf00      	nop
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b088      	sub	sp, #32
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	e853 3f00 	ldrex	r3, [r3]
 800c4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	6979      	ldr	r1, [r7, #20]
 800c512:	69ba      	ldr	r2, [r7, #24]
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	613b      	str	r3, [r7, #16]
   return(result);
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e6      	bne.n	800c4ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2220      	movs	r2, #32
 800c524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7ff f9d6 	bl	800b8e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c534:	bf00      	nop
 800c536:	3720      	adds	r7, #32
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c586:	2b01      	cmp	r3, #1
 800c588:	d101      	bne.n	800c58e <HAL_UARTEx_DisableFifoMode+0x16>
 800c58a:	2302      	movs	r3, #2
 800c58c:	e027      	b.n	800c5de <HAL_UARTEx_DisableFifoMode+0x66>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2224      	movs	r2, #36	; 0x24
 800c59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f022 0201 	bic.w	r2, r2, #1
 800c5b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d101      	bne.n	800c602 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5fe:	2302      	movs	r3, #2
 800c600:	e02d      	b.n	800c65e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2224      	movs	r2, #36	; 0x24
 800c60e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f022 0201 	bic.w	r2, r2, #1
 800c628:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	430a      	orrs	r2, r1
 800c63c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f850 	bl	800c6e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2220      	movs	r2, #32
 800c650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c676:	2b01      	cmp	r3, #1
 800c678:	d101      	bne.n	800c67e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c67a:	2302      	movs	r3, #2
 800c67c:	e02d      	b.n	800c6da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2224      	movs	r2, #36	; 0x24
 800c68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 0201 	bic.w	r2, r2, #1
 800c6a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f812 	bl	800c6e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2220      	movs	r2, #32
 800c6cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d108      	bne.n	800c706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c704:	e031      	b.n	800c76a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c706:	2308      	movs	r3, #8
 800c708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c70a:	2308      	movs	r3, #8
 800c70c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	0e5b      	lsrs	r3, r3, #25
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f003 0307 	and.w	r3, r3, #7
 800c71c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	0f5b      	lsrs	r3, r3, #29
 800c726:	b2db      	uxtb	r3, r3
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	7b3a      	ldrb	r2, [r7, #12]
 800c732:	4911      	ldr	r1, [pc, #68]	; (800c778 <UARTEx_SetNbDataToProcess+0x94>)
 800c734:	5c8a      	ldrb	r2, [r1, r2]
 800c736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c73a:	7b3a      	ldrb	r2, [r7, #12]
 800c73c:	490f      	ldr	r1, [pc, #60]	; (800c77c <UARTEx_SetNbDataToProcess+0x98>)
 800c73e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c740:	fb93 f3f2 	sdiv	r3, r3, r2
 800c744:	b29a      	uxth	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	7b7a      	ldrb	r2, [r7, #13]
 800c750:	4909      	ldr	r1, [pc, #36]	; (800c778 <UARTEx_SetNbDataToProcess+0x94>)
 800c752:	5c8a      	ldrb	r2, [r1, r2]
 800c754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c758:	7b7a      	ldrb	r2, [r7, #13]
 800c75a:	4908      	ldr	r1, [pc, #32]	; (800c77c <UARTEx_SetNbDataToProcess+0x98>)
 800c75c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c75e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c762:	b29a      	uxth	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c76a:	bf00      	nop
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	0800d188 	.word	0x0800d188
 800c77c:	0800d190 	.word	0x0800d190

0800c780 <_vsniprintf_r>:
 800c780:	b530      	push	{r4, r5, lr}
 800c782:	4614      	mov	r4, r2
 800c784:	2c00      	cmp	r4, #0
 800c786:	b09b      	sub	sp, #108	; 0x6c
 800c788:	4605      	mov	r5, r0
 800c78a:	461a      	mov	r2, r3
 800c78c:	da05      	bge.n	800c79a <_vsniprintf_r+0x1a>
 800c78e:	238b      	movs	r3, #139	; 0x8b
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	f04f 30ff 	mov.w	r0, #4294967295
 800c796:	b01b      	add	sp, #108	; 0x6c
 800c798:	bd30      	pop	{r4, r5, pc}
 800c79a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c79e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c7a2:	bf14      	ite	ne
 800c7a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c7a8:	4623      	moveq	r3, r4
 800c7aa:	9302      	str	r3, [sp, #8]
 800c7ac:	9305      	str	r3, [sp, #20]
 800c7ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7b2:	9100      	str	r1, [sp, #0]
 800c7b4:	9104      	str	r1, [sp, #16]
 800c7b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c7ba:	4669      	mov	r1, sp
 800c7bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c7be:	f000 f9ad 	bl	800cb1c <_svfiprintf_r>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	bfbc      	itt	lt
 800c7c6:	238b      	movlt	r3, #139	; 0x8b
 800c7c8:	602b      	strlt	r3, [r5, #0]
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	d0e3      	beq.n	800c796 <_vsniprintf_r+0x16>
 800c7ce:	9b00      	ldr	r3, [sp, #0]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	e7df      	b.n	800c796 <_vsniprintf_r+0x16>
	...

0800c7d8 <vsniprintf>:
 800c7d8:	b507      	push	{r0, r1, r2, lr}
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	460a      	mov	r2, r1
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	4803      	ldr	r0, [pc, #12]	; (800c7f0 <vsniprintf+0x18>)
 800c7e4:	6800      	ldr	r0, [r0, #0]
 800c7e6:	f7ff ffcb 	bl	800c780 <_vsniprintf_r>
 800c7ea:	b003      	add	sp, #12
 800c7ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7f0:	2000014c 	.word	0x2000014c

0800c7f4 <memset>:
 800c7f4:	4402      	add	r2, r0
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d100      	bne.n	800c7fe <memset+0xa>
 800c7fc:	4770      	bx	lr
 800c7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c802:	e7f9      	b.n	800c7f8 <memset+0x4>

0800c804 <__errno>:
 800c804:	4b01      	ldr	r3, [pc, #4]	; (800c80c <__errno+0x8>)
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	2000014c 	.word	0x2000014c

0800c810 <__libc_init_array>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	4d0d      	ldr	r5, [pc, #52]	; (800c848 <__libc_init_array+0x38>)
 800c814:	4c0d      	ldr	r4, [pc, #52]	; (800c84c <__libc_init_array+0x3c>)
 800c816:	1b64      	subs	r4, r4, r5
 800c818:	10a4      	asrs	r4, r4, #2
 800c81a:	2600      	movs	r6, #0
 800c81c:	42a6      	cmp	r6, r4
 800c81e:	d109      	bne.n	800c834 <__libc_init_array+0x24>
 800c820:	4d0b      	ldr	r5, [pc, #44]	; (800c850 <__libc_init_array+0x40>)
 800c822:	4c0c      	ldr	r4, [pc, #48]	; (800c854 <__libc_init_array+0x44>)
 800c824:	f000 fc6a 	bl	800d0fc <_init>
 800c828:	1b64      	subs	r4, r4, r5
 800c82a:	10a4      	asrs	r4, r4, #2
 800c82c:	2600      	movs	r6, #0
 800c82e:	42a6      	cmp	r6, r4
 800c830:	d105      	bne.n	800c83e <__libc_init_array+0x2e>
 800c832:	bd70      	pop	{r4, r5, r6, pc}
 800c834:	f855 3b04 	ldr.w	r3, [r5], #4
 800c838:	4798      	blx	r3
 800c83a:	3601      	adds	r6, #1
 800c83c:	e7ee      	b.n	800c81c <__libc_init_array+0xc>
 800c83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c842:	4798      	blx	r3
 800c844:	3601      	adds	r6, #1
 800c846:	e7f2      	b.n	800c82e <__libc_init_array+0x1e>
 800c848:	0800d1d4 	.word	0x0800d1d4
 800c84c:	0800d1d4 	.word	0x0800d1d4
 800c850:	0800d1d4 	.word	0x0800d1d4
 800c854:	0800d1d8 	.word	0x0800d1d8

0800c858 <__retarget_lock_acquire_recursive>:
 800c858:	4770      	bx	lr

0800c85a <__retarget_lock_release_recursive>:
 800c85a:	4770      	bx	lr

0800c85c <memcpy>:
 800c85c:	440a      	add	r2, r1
 800c85e:	4291      	cmp	r1, r2
 800c860:	f100 33ff 	add.w	r3, r0, #4294967295
 800c864:	d100      	bne.n	800c868 <memcpy+0xc>
 800c866:	4770      	bx	lr
 800c868:	b510      	push	{r4, lr}
 800c86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c872:	4291      	cmp	r1, r2
 800c874:	d1f9      	bne.n	800c86a <memcpy+0xe>
 800c876:	bd10      	pop	{r4, pc}

0800c878 <_free_r>:
 800c878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c87a:	2900      	cmp	r1, #0
 800c87c:	d044      	beq.n	800c908 <_free_r+0x90>
 800c87e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c882:	9001      	str	r0, [sp, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	f1a1 0404 	sub.w	r4, r1, #4
 800c88a:	bfb8      	it	lt
 800c88c:	18e4      	addlt	r4, r4, r3
 800c88e:	f000 f8df 	bl	800ca50 <__malloc_lock>
 800c892:	4a1e      	ldr	r2, [pc, #120]	; (800c90c <_free_r+0x94>)
 800c894:	9801      	ldr	r0, [sp, #4]
 800c896:	6813      	ldr	r3, [r2, #0]
 800c898:	b933      	cbnz	r3, 800c8a8 <_free_r+0x30>
 800c89a:	6063      	str	r3, [r4, #4]
 800c89c:	6014      	str	r4, [r2, #0]
 800c89e:	b003      	add	sp, #12
 800c8a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8a4:	f000 b8da 	b.w	800ca5c <__malloc_unlock>
 800c8a8:	42a3      	cmp	r3, r4
 800c8aa:	d908      	bls.n	800c8be <_free_r+0x46>
 800c8ac:	6825      	ldr	r5, [r4, #0]
 800c8ae:	1961      	adds	r1, r4, r5
 800c8b0:	428b      	cmp	r3, r1
 800c8b2:	bf01      	itttt	eq
 800c8b4:	6819      	ldreq	r1, [r3, #0]
 800c8b6:	685b      	ldreq	r3, [r3, #4]
 800c8b8:	1949      	addeq	r1, r1, r5
 800c8ba:	6021      	streq	r1, [r4, #0]
 800c8bc:	e7ed      	b.n	800c89a <_free_r+0x22>
 800c8be:	461a      	mov	r2, r3
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	b10b      	cbz	r3, 800c8c8 <_free_r+0x50>
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d9fa      	bls.n	800c8be <_free_r+0x46>
 800c8c8:	6811      	ldr	r1, [r2, #0]
 800c8ca:	1855      	adds	r5, r2, r1
 800c8cc:	42a5      	cmp	r5, r4
 800c8ce:	d10b      	bne.n	800c8e8 <_free_r+0x70>
 800c8d0:	6824      	ldr	r4, [r4, #0]
 800c8d2:	4421      	add	r1, r4
 800c8d4:	1854      	adds	r4, r2, r1
 800c8d6:	42a3      	cmp	r3, r4
 800c8d8:	6011      	str	r1, [r2, #0]
 800c8da:	d1e0      	bne.n	800c89e <_free_r+0x26>
 800c8dc:	681c      	ldr	r4, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	6053      	str	r3, [r2, #4]
 800c8e2:	440c      	add	r4, r1
 800c8e4:	6014      	str	r4, [r2, #0]
 800c8e6:	e7da      	b.n	800c89e <_free_r+0x26>
 800c8e8:	d902      	bls.n	800c8f0 <_free_r+0x78>
 800c8ea:	230c      	movs	r3, #12
 800c8ec:	6003      	str	r3, [r0, #0]
 800c8ee:	e7d6      	b.n	800c89e <_free_r+0x26>
 800c8f0:	6825      	ldr	r5, [r4, #0]
 800c8f2:	1961      	adds	r1, r4, r5
 800c8f4:	428b      	cmp	r3, r1
 800c8f6:	bf04      	itt	eq
 800c8f8:	6819      	ldreq	r1, [r3, #0]
 800c8fa:	685b      	ldreq	r3, [r3, #4]
 800c8fc:	6063      	str	r3, [r4, #4]
 800c8fe:	bf04      	itt	eq
 800c900:	1949      	addeq	r1, r1, r5
 800c902:	6021      	streq	r1, [r4, #0]
 800c904:	6054      	str	r4, [r2, #4]
 800c906:	e7ca      	b.n	800c89e <_free_r+0x26>
 800c908:	b003      	add	sp, #12
 800c90a:	bd30      	pop	{r4, r5, pc}
 800c90c:	20000d40 	.word	0x20000d40

0800c910 <sbrk_aligned>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	4e0e      	ldr	r6, [pc, #56]	; (800c94c <sbrk_aligned+0x3c>)
 800c914:	460c      	mov	r4, r1
 800c916:	6831      	ldr	r1, [r6, #0]
 800c918:	4605      	mov	r5, r0
 800c91a:	b911      	cbnz	r1, 800c922 <sbrk_aligned+0x12>
 800c91c:	f000 fba6 	bl	800d06c <_sbrk_r>
 800c920:	6030      	str	r0, [r6, #0]
 800c922:	4621      	mov	r1, r4
 800c924:	4628      	mov	r0, r5
 800c926:	f000 fba1 	bl	800d06c <_sbrk_r>
 800c92a:	1c43      	adds	r3, r0, #1
 800c92c:	d00a      	beq.n	800c944 <sbrk_aligned+0x34>
 800c92e:	1cc4      	adds	r4, r0, #3
 800c930:	f024 0403 	bic.w	r4, r4, #3
 800c934:	42a0      	cmp	r0, r4
 800c936:	d007      	beq.n	800c948 <sbrk_aligned+0x38>
 800c938:	1a21      	subs	r1, r4, r0
 800c93a:	4628      	mov	r0, r5
 800c93c:	f000 fb96 	bl	800d06c <_sbrk_r>
 800c940:	3001      	adds	r0, #1
 800c942:	d101      	bne.n	800c948 <sbrk_aligned+0x38>
 800c944:	f04f 34ff 	mov.w	r4, #4294967295
 800c948:	4620      	mov	r0, r4
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	20000d44 	.word	0x20000d44

0800c950 <_malloc_r>:
 800c950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c954:	1ccd      	adds	r5, r1, #3
 800c956:	f025 0503 	bic.w	r5, r5, #3
 800c95a:	3508      	adds	r5, #8
 800c95c:	2d0c      	cmp	r5, #12
 800c95e:	bf38      	it	cc
 800c960:	250c      	movcc	r5, #12
 800c962:	2d00      	cmp	r5, #0
 800c964:	4607      	mov	r7, r0
 800c966:	db01      	blt.n	800c96c <_malloc_r+0x1c>
 800c968:	42a9      	cmp	r1, r5
 800c96a:	d905      	bls.n	800c978 <_malloc_r+0x28>
 800c96c:	230c      	movs	r3, #12
 800c96e:	603b      	str	r3, [r7, #0]
 800c970:	2600      	movs	r6, #0
 800c972:	4630      	mov	r0, r6
 800c974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c978:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca4c <_malloc_r+0xfc>
 800c97c:	f000 f868 	bl	800ca50 <__malloc_lock>
 800c980:	f8d8 3000 	ldr.w	r3, [r8]
 800c984:	461c      	mov	r4, r3
 800c986:	bb5c      	cbnz	r4, 800c9e0 <_malloc_r+0x90>
 800c988:	4629      	mov	r1, r5
 800c98a:	4638      	mov	r0, r7
 800c98c:	f7ff ffc0 	bl	800c910 <sbrk_aligned>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	4604      	mov	r4, r0
 800c994:	d155      	bne.n	800ca42 <_malloc_r+0xf2>
 800c996:	f8d8 4000 	ldr.w	r4, [r8]
 800c99a:	4626      	mov	r6, r4
 800c99c:	2e00      	cmp	r6, #0
 800c99e:	d145      	bne.n	800ca2c <_malloc_r+0xdc>
 800c9a0:	2c00      	cmp	r4, #0
 800c9a2:	d048      	beq.n	800ca36 <_malloc_r+0xe6>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	eb04 0903 	add.w	r9, r4, r3
 800c9ae:	f000 fb5d 	bl	800d06c <_sbrk_r>
 800c9b2:	4581      	cmp	r9, r0
 800c9b4:	d13f      	bne.n	800ca36 <_malloc_r+0xe6>
 800c9b6:	6821      	ldr	r1, [r4, #0]
 800c9b8:	1a6d      	subs	r5, r5, r1
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff ffa7 	bl	800c910 <sbrk_aligned>
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d037      	beq.n	800ca36 <_malloc_r+0xe6>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	442b      	add	r3, r5
 800c9ca:	6023      	str	r3, [r4, #0]
 800c9cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d038      	beq.n	800ca46 <_malloc_r+0xf6>
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	42a2      	cmp	r2, r4
 800c9d8:	d12b      	bne.n	800ca32 <_malloc_r+0xe2>
 800c9da:	2200      	movs	r2, #0
 800c9dc:	605a      	str	r2, [r3, #4]
 800c9de:	e00f      	b.n	800ca00 <_malloc_r+0xb0>
 800c9e0:	6822      	ldr	r2, [r4, #0]
 800c9e2:	1b52      	subs	r2, r2, r5
 800c9e4:	d41f      	bmi.n	800ca26 <_malloc_r+0xd6>
 800c9e6:	2a0b      	cmp	r2, #11
 800c9e8:	d917      	bls.n	800ca1a <_malloc_r+0xca>
 800c9ea:	1961      	adds	r1, r4, r5
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	6025      	str	r5, [r4, #0]
 800c9f0:	bf18      	it	ne
 800c9f2:	6059      	strne	r1, [r3, #4]
 800c9f4:	6863      	ldr	r3, [r4, #4]
 800c9f6:	bf08      	it	eq
 800c9f8:	f8c8 1000 	streq.w	r1, [r8]
 800c9fc:	5162      	str	r2, [r4, r5]
 800c9fe:	604b      	str	r3, [r1, #4]
 800ca00:	4638      	mov	r0, r7
 800ca02:	f104 060b 	add.w	r6, r4, #11
 800ca06:	f000 f829 	bl	800ca5c <__malloc_unlock>
 800ca0a:	f026 0607 	bic.w	r6, r6, #7
 800ca0e:	1d23      	adds	r3, r4, #4
 800ca10:	1af2      	subs	r2, r6, r3
 800ca12:	d0ae      	beq.n	800c972 <_malloc_r+0x22>
 800ca14:	1b9b      	subs	r3, r3, r6
 800ca16:	50a3      	str	r3, [r4, r2]
 800ca18:	e7ab      	b.n	800c972 <_malloc_r+0x22>
 800ca1a:	42a3      	cmp	r3, r4
 800ca1c:	6862      	ldr	r2, [r4, #4]
 800ca1e:	d1dd      	bne.n	800c9dc <_malloc_r+0x8c>
 800ca20:	f8c8 2000 	str.w	r2, [r8]
 800ca24:	e7ec      	b.n	800ca00 <_malloc_r+0xb0>
 800ca26:	4623      	mov	r3, r4
 800ca28:	6864      	ldr	r4, [r4, #4]
 800ca2a:	e7ac      	b.n	800c986 <_malloc_r+0x36>
 800ca2c:	4634      	mov	r4, r6
 800ca2e:	6876      	ldr	r6, [r6, #4]
 800ca30:	e7b4      	b.n	800c99c <_malloc_r+0x4c>
 800ca32:	4613      	mov	r3, r2
 800ca34:	e7cc      	b.n	800c9d0 <_malloc_r+0x80>
 800ca36:	230c      	movs	r3, #12
 800ca38:	603b      	str	r3, [r7, #0]
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f000 f80e 	bl	800ca5c <__malloc_unlock>
 800ca40:	e797      	b.n	800c972 <_malloc_r+0x22>
 800ca42:	6025      	str	r5, [r4, #0]
 800ca44:	e7dc      	b.n	800ca00 <_malloc_r+0xb0>
 800ca46:	605b      	str	r3, [r3, #4]
 800ca48:	deff      	udf	#255	; 0xff
 800ca4a:	bf00      	nop
 800ca4c:	20000d40 	.word	0x20000d40

0800ca50 <__malloc_lock>:
 800ca50:	4801      	ldr	r0, [pc, #4]	; (800ca58 <__malloc_lock+0x8>)
 800ca52:	f7ff bf01 	b.w	800c858 <__retarget_lock_acquire_recursive>
 800ca56:	bf00      	nop
 800ca58:	20000d3c 	.word	0x20000d3c

0800ca5c <__malloc_unlock>:
 800ca5c:	4801      	ldr	r0, [pc, #4]	; (800ca64 <__malloc_unlock+0x8>)
 800ca5e:	f7ff befc 	b.w	800c85a <__retarget_lock_release_recursive>
 800ca62:	bf00      	nop
 800ca64:	20000d3c 	.word	0x20000d3c

0800ca68 <__ssputs_r>:
 800ca68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6c:	688e      	ldr	r6, [r1, #8]
 800ca6e:	461f      	mov	r7, r3
 800ca70:	42be      	cmp	r6, r7
 800ca72:	680b      	ldr	r3, [r1, #0]
 800ca74:	4682      	mov	sl, r0
 800ca76:	460c      	mov	r4, r1
 800ca78:	4690      	mov	r8, r2
 800ca7a:	d82c      	bhi.n	800cad6 <__ssputs_r+0x6e>
 800ca7c:	898a      	ldrh	r2, [r1, #12]
 800ca7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca82:	d026      	beq.n	800cad2 <__ssputs_r+0x6a>
 800ca84:	6965      	ldr	r5, [r4, #20]
 800ca86:	6909      	ldr	r1, [r1, #16]
 800ca88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca8c:	eba3 0901 	sub.w	r9, r3, r1
 800ca90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca94:	1c7b      	adds	r3, r7, #1
 800ca96:	444b      	add	r3, r9
 800ca98:	106d      	asrs	r5, r5, #1
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	bf38      	it	cc
 800ca9e:	461d      	movcc	r5, r3
 800caa0:	0553      	lsls	r3, r2, #21
 800caa2:	d527      	bpl.n	800caf4 <__ssputs_r+0x8c>
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7ff ff53 	bl	800c950 <_malloc_r>
 800caaa:	4606      	mov	r6, r0
 800caac:	b360      	cbz	r0, 800cb08 <__ssputs_r+0xa0>
 800caae:	6921      	ldr	r1, [r4, #16]
 800cab0:	464a      	mov	r2, r9
 800cab2:	f7ff fed3 	bl	800c85c <memcpy>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	6126      	str	r6, [r4, #16]
 800cac4:	6165      	str	r5, [r4, #20]
 800cac6:	444e      	add	r6, r9
 800cac8:	eba5 0509 	sub.w	r5, r5, r9
 800cacc:	6026      	str	r6, [r4, #0]
 800cace:	60a5      	str	r5, [r4, #8]
 800cad0:	463e      	mov	r6, r7
 800cad2:	42be      	cmp	r6, r7
 800cad4:	d900      	bls.n	800cad8 <__ssputs_r+0x70>
 800cad6:	463e      	mov	r6, r7
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	4632      	mov	r2, r6
 800cadc:	4641      	mov	r1, r8
 800cade:	f000 faab 	bl	800d038 <memmove>
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	1b9b      	subs	r3, r3, r6
 800cae6:	60a3      	str	r3, [r4, #8]
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	4433      	add	r3, r6
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	2000      	movs	r0, #0
 800caf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf4:	462a      	mov	r2, r5
 800caf6:	f000 fac9 	bl	800d08c <_realloc_r>
 800cafa:	4606      	mov	r6, r0
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d1e0      	bne.n	800cac2 <__ssputs_r+0x5a>
 800cb00:	6921      	ldr	r1, [r4, #16]
 800cb02:	4650      	mov	r0, sl
 800cb04:	f7ff feb8 	bl	800c878 <_free_r>
 800cb08:	230c      	movs	r3, #12
 800cb0a:	f8ca 3000 	str.w	r3, [sl]
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1a:	e7e9      	b.n	800caf0 <__ssputs_r+0x88>

0800cb1c <_svfiprintf_r>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	4698      	mov	r8, r3
 800cb22:	898b      	ldrh	r3, [r1, #12]
 800cb24:	061b      	lsls	r3, r3, #24
 800cb26:	b09d      	sub	sp, #116	; 0x74
 800cb28:	4607      	mov	r7, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	4614      	mov	r4, r2
 800cb2e:	d50e      	bpl.n	800cb4e <_svfiprintf_r+0x32>
 800cb30:	690b      	ldr	r3, [r1, #16]
 800cb32:	b963      	cbnz	r3, 800cb4e <_svfiprintf_r+0x32>
 800cb34:	2140      	movs	r1, #64	; 0x40
 800cb36:	f7ff ff0b 	bl	800c950 <_malloc_r>
 800cb3a:	6028      	str	r0, [r5, #0]
 800cb3c:	6128      	str	r0, [r5, #16]
 800cb3e:	b920      	cbnz	r0, 800cb4a <_svfiprintf_r+0x2e>
 800cb40:	230c      	movs	r3, #12
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	e0d0      	b.n	800ccec <_svfiprintf_r+0x1d0>
 800cb4a:	2340      	movs	r3, #64	; 0x40
 800cb4c:	616b      	str	r3, [r5, #20]
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9309      	str	r3, [sp, #36]	; 0x24
 800cb52:	2320      	movs	r3, #32
 800cb54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb58:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb5c:	2330      	movs	r3, #48	; 0x30
 800cb5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd04 <_svfiprintf_r+0x1e8>
 800cb62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb66:	f04f 0901 	mov.w	r9, #1
 800cb6a:	4623      	mov	r3, r4
 800cb6c:	469a      	mov	sl, r3
 800cb6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb72:	b10a      	cbz	r2, 800cb78 <_svfiprintf_r+0x5c>
 800cb74:	2a25      	cmp	r2, #37	; 0x25
 800cb76:	d1f9      	bne.n	800cb6c <_svfiprintf_r+0x50>
 800cb78:	ebba 0b04 	subs.w	fp, sl, r4
 800cb7c:	d00b      	beq.n	800cb96 <_svfiprintf_r+0x7a>
 800cb7e:	465b      	mov	r3, fp
 800cb80:	4622      	mov	r2, r4
 800cb82:	4629      	mov	r1, r5
 800cb84:	4638      	mov	r0, r7
 800cb86:	f7ff ff6f 	bl	800ca68 <__ssputs_r>
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	f000 80a9 	beq.w	800cce2 <_svfiprintf_r+0x1c6>
 800cb90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb92:	445a      	add	r2, fp
 800cb94:	9209      	str	r2, [sp, #36]	; 0x24
 800cb96:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f000 80a1 	beq.w	800cce2 <_svfiprintf_r+0x1c6>
 800cba0:	2300      	movs	r3, #0
 800cba2:	f04f 32ff 	mov.w	r2, #4294967295
 800cba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbaa:	f10a 0a01 	add.w	sl, sl, #1
 800cbae:	9304      	str	r3, [sp, #16]
 800cbb0:	9307      	str	r3, [sp, #28]
 800cbb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb6:	931a      	str	r3, [sp, #104]	; 0x68
 800cbb8:	4654      	mov	r4, sl
 800cbba:	2205      	movs	r2, #5
 800cbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc0:	4850      	ldr	r0, [pc, #320]	; (800cd04 <_svfiprintf_r+0x1e8>)
 800cbc2:	f7f3 fb35 	bl	8000230 <memchr>
 800cbc6:	9a04      	ldr	r2, [sp, #16]
 800cbc8:	b9d8      	cbnz	r0, 800cc02 <_svfiprintf_r+0xe6>
 800cbca:	06d0      	lsls	r0, r2, #27
 800cbcc:	bf44      	itt	mi
 800cbce:	2320      	movmi	r3, #32
 800cbd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd4:	0711      	lsls	r1, r2, #28
 800cbd6:	bf44      	itt	mi
 800cbd8:	232b      	movmi	r3, #43	; 0x2b
 800cbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbde:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe4:	d015      	beq.n	800cc12 <_svfiprintf_r+0xf6>
 800cbe6:	9a07      	ldr	r2, [sp, #28]
 800cbe8:	4654      	mov	r4, sl
 800cbea:	2000      	movs	r0, #0
 800cbec:	f04f 0c0a 	mov.w	ip, #10
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf6:	3b30      	subs	r3, #48	; 0x30
 800cbf8:	2b09      	cmp	r3, #9
 800cbfa:	d94d      	bls.n	800cc98 <_svfiprintf_r+0x17c>
 800cbfc:	b1b0      	cbz	r0, 800cc2c <_svfiprintf_r+0x110>
 800cbfe:	9207      	str	r2, [sp, #28]
 800cc00:	e014      	b.n	800cc2c <_svfiprintf_r+0x110>
 800cc02:	eba0 0308 	sub.w	r3, r0, r8
 800cc06:	fa09 f303 	lsl.w	r3, r9, r3
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	9304      	str	r3, [sp, #16]
 800cc0e:	46a2      	mov	sl, r4
 800cc10:	e7d2      	b.n	800cbb8 <_svfiprintf_r+0x9c>
 800cc12:	9b03      	ldr	r3, [sp, #12]
 800cc14:	1d19      	adds	r1, r3, #4
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	9103      	str	r1, [sp, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	bfbb      	ittet	lt
 800cc1e:	425b      	neglt	r3, r3
 800cc20:	f042 0202 	orrlt.w	r2, r2, #2
 800cc24:	9307      	strge	r3, [sp, #28]
 800cc26:	9307      	strlt	r3, [sp, #28]
 800cc28:	bfb8      	it	lt
 800cc2a:	9204      	strlt	r2, [sp, #16]
 800cc2c:	7823      	ldrb	r3, [r4, #0]
 800cc2e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc30:	d10c      	bne.n	800cc4c <_svfiprintf_r+0x130>
 800cc32:	7863      	ldrb	r3, [r4, #1]
 800cc34:	2b2a      	cmp	r3, #42	; 0x2a
 800cc36:	d134      	bne.n	800cca2 <_svfiprintf_r+0x186>
 800cc38:	9b03      	ldr	r3, [sp, #12]
 800cc3a:	1d1a      	adds	r2, r3, #4
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	9203      	str	r2, [sp, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bfb8      	it	lt
 800cc44:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc48:	3402      	adds	r4, #2
 800cc4a:	9305      	str	r3, [sp, #20]
 800cc4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd14 <_svfiprintf_r+0x1f8>
 800cc50:	7821      	ldrb	r1, [r4, #0]
 800cc52:	2203      	movs	r2, #3
 800cc54:	4650      	mov	r0, sl
 800cc56:	f7f3 faeb 	bl	8000230 <memchr>
 800cc5a:	b138      	cbz	r0, 800cc6c <_svfiprintf_r+0x150>
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	eba0 000a 	sub.w	r0, r0, sl
 800cc62:	2240      	movs	r2, #64	; 0x40
 800cc64:	4082      	lsls	r2, r0
 800cc66:	4313      	orrs	r3, r2
 800cc68:	3401      	adds	r4, #1
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc70:	4825      	ldr	r0, [pc, #148]	; (800cd08 <_svfiprintf_r+0x1ec>)
 800cc72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc76:	2206      	movs	r2, #6
 800cc78:	f7f3 fada 	bl	8000230 <memchr>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d038      	beq.n	800ccf2 <_svfiprintf_r+0x1d6>
 800cc80:	4b22      	ldr	r3, [pc, #136]	; (800cd0c <_svfiprintf_r+0x1f0>)
 800cc82:	bb1b      	cbnz	r3, 800cccc <_svfiprintf_r+0x1b0>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	3307      	adds	r3, #7
 800cc88:	f023 0307 	bic.w	r3, r3, #7
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	9303      	str	r3, [sp, #12]
 800cc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc92:	4433      	add	r3, r6
 800cc94:	9309      	str	r3, [sp, #36]	; 0x24
 800cc96:	e768      	b.n	800cb6a <_svfiprintf_r+0x4e>
 800cc98:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	2001      	movs	r0, #1
 800cca0:	e7a6      	b.n	800cbf0 <_svfiprintf_r+0xd4>
 800cca2:	2300      	movs	r3, #0
 800cca4:	3401      	adds	r4, #1
 800cca6:	9305      	str	r3, [sp, #20]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	f04f 0c0a 	mov.w	ip, #10
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb4:	3a30      	subs	r2, #48	; 0x30
 800ccb6:	2a09      	cmp	r2, #9
 800ccb8:	d903      	bls.n	800ccc2 <_svfiprintf_r+0x1a6>
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d0c6      	beq.n	800cc4c <_svfiprintf_r+0x130>
 800ccbe:	9105      	str	r1, [sp, #20]
 800ccc0:	e7c4      	b.n	800cc4c <_svfiprintf_r+0x130>
 800ccc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e7f0      	b.n	800ccae <_svfiprintf_r+0x192>
 800cccc:	ab03      	add	r3, sp, #12
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	462a      	mov	r2, r5
 800ccd2:	4b0f      	ldr	r3, [pc, #60]	; (800cd10 <_svfiprintf_r+0x1f4>)
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f3af 8000 	nop.w
 800ccdc:	1c42      	adds	r2, r0, #1
 800ccde:	4606      	mov	r6, r0
 800cce0:	d1d6      	bne.n	800cc90 <_svfiprintf_r+0x174>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	065b      	lsls	r3, r3, #25
 800cce6:	f53f af2d 	bmi.w	800cb44 <_svfiprintf_r+0x28>
 800ccea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccec:	b01d      	add	sp, #116	; 0x74
 800ccee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf2:	ab03      	add	r3, sp, #12
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	462a      	mov	r2, r5
 800ccf8:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <_svfiprintf_r+0x1f4>)
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f000 f879 	bl	800cdf4 <_printf_i>
 800cd02:	e7eb      	b.n	800ccdc <_svfiprintf_r+0x1c0>
 800cd04:	0800d198 	.word	0x0800d198
 800cd08:	0800d1a2 	.word	0x0800d1a2
 800cd0c:	00000000 	.word	0x00000000
 800cd10:	0800ca69 	.word	0x0800ca69
 800cd14:	0800d19e 	.word	0x0800d19e

0800cd18 <_printf_common>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	4699      	mov	r9, r3
 800cd20:	688a      	ldr	r2, [r1, #8]
 800cd22:	690b      	ldr	r3, [r1, #16]
 800cd24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	bfb8      	it	lt
 800cd2c:	4613      	movlt	r3, r2
 800cd2e:	6033      	str	r3, [r6, #0]
 800cd30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd34:	4607      	mov	r7, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	b10a      	cbz	r2, 800cd3e <_printf_common+0x26>
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	0699      	lsls	r1, r3, #26
 800cd42:	bf42      	ittt	mi
 800cd44:	6833      	ldrmi	r3, [r6, #0]
 800cd46:	3302      	addmi	r3, #2
 800cd48:	6033      	strmi	r3, [r6, #0]
 800cd4a:	6825      	ldr	r5, [r4, #0]
 800cd4c:	f015 0506 	ands.w	r5, r5, #6
 800cd50:	d106      	bne.n	800cd60 <_printf_common+0x48>
 800cd52:	f104 0a19 	add.w	sl, r4, #25
 800cd56:	68e3      	ldr	r3, [r4, #12]
 800cd58:	6832      	ldr	r2, [r6, #0]
 800cd5a:	1a9b      	subs	r3, r3, r2
 800cd5c:	42ab      	cmp	r3, r5
 800cd5e:	dc26      	bgt.n	800cdae <_printf_common+0x96>
 800cd60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd64:	1e13      	subs	r3, r2, #0
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	bf18      	it	ne
 800cd6a:	2301      	movne	r3, #1
 800cd6c:	0692      	lsls	r2, r2, #26
 800cd6e:	d42b      	bmi.n	800cdc8 <_printf_common+0xb0>
 800cd70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd74:	4649      	mov	r1, r9
 800cd76:	4638      	mov	r0, r7
 800cd78:	47c0      	blx	r8
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d01e      	beq.n	800cdbc <_printf_common+0xa4>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	6922      	ldr	r2, [r4, #16]
 800cd82:	f003 0306 	and.w	r3, r3, #6
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	bf02      	ittt	eq
 800cd8a:	68e5      	ldreq	r5, [r4, #12]
 800cd8c:	6833      	ldreq	r3, [r6, #0]
 800cd8e:	1aed      	subeq	r5, r5, r3
 800cd90:	68a3      	ldr	r3, [r4, #8]
 800cd92:	bf0c      	ite	eq
 800cd94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd98:	2500      	movne	r5, #0
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	bfc4      	itt	gt
 800cd9e:	1a9b      	subgt	r3, r3, r2
 800cda0:	18ed      	addgt	r5, r5, r3
 800cda2:	2600      	movs	r6, #0
 800cda4:	341a      	adds	r4, #26
 800cda6:	42b5      	cmp	r5, r6
 800cda8:	d11a      	bne.n	800cde0 <_printf_common+0xc8>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	e008      	b.n	800cdc0 <_printf_common+0xa8>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	4652      	mov	r2, sl
 800cdb2:	4649      	mov	r1, r9
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	47c0      	blx	r8
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d103      	bne.n	800cdc4 <_printf_common+0xac>
 800cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc4:	3501      	adds	r5, #1
 800cdc6:	e7c6      	b.n	800cd56 <_printf_common+0x3e>
 800cdc8:	18e1      	adds	r1, r4, r3
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	2030      	movs	r0, #48	; 0x30
 800cdce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd2:	4422      	add	r2, r4
 800cdd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cddc:	3302      	adds	r3, #2
 800cdde:	e7c7      	b.n	800cd70 <_printf_common+0x58>
 800cde0:	2301      	movs	r3, #1
 800cde2:	4622      	mov	r2, r4
 800cde4:	4649      	mov	r1, r9
 800cde6:	4638      	mov	r0, r7
 800cde8:	47c0      	blx	r8
 800cdea:	3001      	adds	r0, #1
 800cdec:	d0e6      	beq.n	800cdbc <_printf_common+0xa4>
 800cdee:	3601      	adds	r6, #1
 800cdf0:	e7d9      	b.n	800cda6 <_printf_common+0x8e>
	...

0800cdf4 <_printf_i>:
 800cdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf8:	7e0f      	ldrb	r7, [r1, #24]
 800cdfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdfc:	2f78      	cmp	r7, #120	; 0x78
 800cdfe:	4691      	mov	r9, r2
 800ce00:	4680      	mov	r8, r0
 800ce02:	460c      	mov	r4, r1
 800ce04:	469a      	mov	sl, r3
 800ce06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce0a:	d807      	bhi.n	800ce1c <_printf_i+0x28>
 800ce0c:	2f62      	cmp	r7, #98	; 0x62
 800ce0e:	d80a      	bhi.n	800ce26 <_printf_i+0x32>
 800ce10:	2f00      	cmp	r7, #0
 800ce12:	f000 80d4 	beq.w	800cfbe <_printf_i+0x1ca>
 800ce16:	2f58      	cmp	r7, #88	; 0x58
 800ce18:	f000 80c0 	beq.w	800cf9c <_printf_i+0x1a8>
 800ce1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce24:	e03a      	b.n	800ce9c <_printf_i+0xa8>
 800ce26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce2a:	2b15      	cmp	r3, #21
 800ce2c:	d8f6      	bhi.n	800ce1c <_printf_i+0x28>
 800ce2e:	a101      	add	r1, pc, #4	; (adr r1, 800ce34 <_printf_i+0x40>)
 800ce30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce34:	0800ce8d 	.word	0x0800ce8d
 800ce38:	0800cea1 	.word	0x0800cea1
 800ce3c:	0800ce1d 	.word	0x0800ce1d
 800ce40:	0800ce1d 	.word	0x0800ce1d
 800ce44:	0800ce1d 	.word	0x0800ce1d
 800ce48:	0800ce1d 	.word	0x0800ce1d
 800ce4c:	0800cea1 	.word	0x0800cea1
 800ce50:	0800ce1d 	.word	0x0800ce1d
 800ce54:	0800ce1d 	.word	0x0800ce1d
 800ce58:	0800ce1d 	.word	0x0800ce1d
 800ce5c:	0800ce1d 	.word	0x0800ce1d
 800ce60:	0800cfa5 	.word	0x0800cfa5
 800ce64:	0800cecd 	.word	0x0800cecd
 800ce68:	0800cf5f 	.word	0x0800cf5f
 800ce6c:	0800ce1d 	.word	0x0800ce1d
 800ce70:	0800ce1d 	.word	0x0800ce1d
 800ce74:	0800cfc7 	.word	0x0800cfc7
 800ce78:	0800ce1d 	.word	0x0800ce1d
 800ce7c:	0800cecd 	.word	0x0800cecd
 800ce80:	0800ce1d 	.word	0x0800ce1d
 800ce84:	0800ce1d 	.word	0x0800ce1d
 800ce88:	0800cf67 	.word	0x0800cf67
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	1d1a      	adds	r2, r3, #4
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	602a      	str	r2, [r5, #0]
 800ce94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e09f      	b.n	800cfe0 <_printf_i+0x1ec>
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	682b      	ldr	r3, [r5, #0]
 800cea4:	0607      	lsls	r7, r0, #24
 800cea6:	f103 0104 	add.w	r1, r3, #4
 800ceaa:	6029      	str	r1, [r5, #0]
 800ceac:	d501      	bpl.n	800ceb2 <_printf_i+0xbe>
 800ceae:	681e      	ldr	r6, [r3, #0]
 800ceb0:	e003      	b.n	800ceba <_printf_i+0xc6>
 800ceb2:	0646      	lsls	r6, r0, #25
 800ceb4:	d5fb      	bpl.n	800ceae <_printf_i+0xba>
 800ceb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	da03      	bge.n	800cec6 <_printf_i+0xd2>
 800cebe:	232d      	movs	r3, #45	; 0x2d
 800cec0:	4276      	negs	r6, r6
 800cec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec6:	485a      	ldr	r0, [pc, #360]	; (800d030 <_printf_i+0x23c>)
 800cec8:	230a      	movs	r3, #10
 800ceca:	e012      	b.n	800cef2 <_printf_i+0xfe>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	1d19      	adds	r1, r3, #4
 800ced2:	6029      	str	r1, [r5, #0]
 800ced4:	0605      	lsls	r5, r0, #24
 800ced6:	d501      	bpl.n	800cedc <_printf_i+0xe8>
 800ced8:	681e      	ldr	r6, [r3, #0]
 800ceda:	e002      	b.n	800cee2 <_printf_i+0xee>
 800cedc:	0641      	lsls	r1, r0, #25
 800cede:	d5fb      	bpl.n	800ced8 <_printf_i+0xe4>
 800cee0:	881e      	ldrh	r6, [r3, #0]
 800cee2:	4853      	ldr	r0, [pc, #332]	; (800d030 <_printf_i+0x23c>)
 800cee4:	2f6f      	cmp	r7, #111	; 0x6f
 800cee6:	bf0c      	ite	eq
 800cee8:	2308      	moveq	r3, #8
 800ceea:	230a      	movne	r3, #10
 800ceec:	2100      	movs	r1, #0
 800ceee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cef2:	6865      	ldr	r5, [r4, #4]
 800cef4:	60a5      	str	r5, [r4, #8]
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	bfa2      	ittt	ge
 800cefa:	6821      	ldrge	r1, [r4, #0]
 800cefc:	f021 0104 	bicge.w	r1, r1, #4
 800cf00:	6021      	strge	r1, [r4, #0]
 800cf02:	b90e      	cbnz	r6, 800cf08 <_printf_i+0x114>
 800cf04:	2d00      	cmp	r5, #0
 800cf06:	d04b      	beq.n	800cfa0 <_printf_i+0x1ac>
 800cf08:	4615      	mov	r5, r2
 800cf0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf0e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf12:	5dc7      	ldrb	r7, [r0, r7]
 800cf14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf18:	4637      	mov	r7, r6
 800cf1a:	42bb      	cmp	r3, r7
 800cf1c:	460e      	mov	r6, r1
 800cf1e:	d9f4      	bls.n	800cf0a <_printf_i+0x116>
 800cf20:	2b08      	cmp	r3, #8
 800cf22:	d10b      	bne.n	800cf3c <_printf_i+0x148>
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	07de      	lsls	r6, r3, #31
 800cf28:	d508      	bpl.n	800cf3c <_printf_i+0x148>
 800cf2a:	6923      	ldr	r3, [r4, #16]
 800cf2c:	6861      	ldr	r1, [r4, #4]
 800cf2e:	4299      	cmp	r1, r3
 800cf30:	bfde      	ittt	le
 800cf32:	2330      	movle	r3, #48	; 0x30
 800cf34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf3c:	1b52      	subs	r2, r2, r5
 800cf3e:	6122      	str	r2, [r4, #16]
 800cf40:	f8cd a000 	str.w	sl, [sp]
 800cf44:	464b      	mov	r3, r9
 800cf46:	aa03      	add	r2, sp, #12
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	f7ff fee4 	bl	800cd18 <_printf_common>
 800cf50:	3001      	adds	r0, #1
 800cf52:	d14a      	bne.n	800cfea <_printf_i+0x1f6>
 800cf54:	f04f 30ff 	mov.w	r0, #4294967295
 800cf58:	b004      	add	sp, #16
 800cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f043 0320 	orr.w	r3, r3, #32
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	4833      	ldr	r0, [pc, #204]	; (800d034 <_printf_i+0x240>)
 800cf68:	2778      	movs	r7, #120	; 0x78
 800cf6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	6829      	ldr	r1, [r5, #0]
 800cf72:	061f      	lsls	r7, r3, #24
 800cf74:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf78:	d402      	bmi.n	800cf80 <_printf_i+0x18c>
 800cf7a:	065f      	lsls	r7, r3, #25
 800cf7c:	bf48      	it	mi
 800cf7e:	b2b6      	uxthmi	r6, r6
 800cf80:	07df      	lsls	r7, r3, #31
 800cf82:	bf48      	it	mi
 800cf84:	f043 0320 	orrmi.w	r3, r3, #32
 800cf88:	6029      	str	r1, [r5, #0]
 800cf8a:	bf48      	it	mi
 800cf8c:	6023      	strmi	r3, [r4, #0]
 800cf8e:	b91e      	cbnz	r6, 800cf98 <_printf_i+0x1a4>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	f023 0320 	bic.w	r3, r3, #32
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	2310      	movs	r3, #16
 800cf9a:	e7a7      	b.n	800ceec <_printf_i+0xf8>
 800cf9c:	4824      	ldr	r0, [pc, #144]	; (800d030 <_printf_i+0x23c>)
 800cf9e:	e7e4      	b.n	800cf6a <_printf_i+0x176>
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	e7bd      	b.n	800cf20 <_printf_i+0x12c>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	6826      	ldr	r6, [r4, #0]
 800cfa8:	6961      	ldr	r1, [r4, #20]
 800cfaa:	1d18      	adds	r0, r3, #4
 800cfac:	6028      	str	r0, [r5, #0]
 800cfae:	0635      	lsls	r5, r6, #24
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	d501      	bpl.n	800cfb8 <_printf_i+0x1c4>
 800cfb4:	6019      	str	r1, [r3, #0]
 800cfb6:	e002      	b.n	800cfbe <_printf_i+0x1ca>
 800cfb8:	0670      	lsls	r0, r6, #25
 800cfba:	d5fb      	bpl.n	800cfb4 <_printf_i+0x1c0>
 800cfbc:	8019      	strh	r1, [r3, #0]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	6123      	str	r3, [r4, #16]
 800cfc2:	4615      	mov	r5, r2
 800cfc4:	e7bc      	b.n	800cf40 <_printf_i+0x14c>
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	1d1a      	adds	r2, r3, #4
 800cfca:	602a      	str	r2, [r5, #0]
 800cfcc:	681d      	ldr	r5, [r3, #0]
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f7f3 f92c 	bl	8000230 <memchr>
 800cfd8:	b108      	cbz	r0, 800cfde <_printf_i+0x1ea>
 800cfda:	1b40      	subs	r0, r0, r5
 800cfdc:	6060      	str	r0, [r4, #4]
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	6123      	str	r3, [r4, #16]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe8:	e7aa      	b.n	800cf40 <_printf_i+0x14c>
 800cfea:	6923      	ldr	r3, [r4, #16]
 800cfec:	462a      	mov	r2, r5
 800cfee:	4649      	mov	r1, r9
 800cff0:	4640      	mov	r0, r8
 800cff2:	47d0      	blx	sl
 800cff4:	3001      	adds	r0, #1
 800cff6:	d0ad      	beq.n	800cf54 <_printf_i+0x160>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	079b      	lsls	r3, r3, #30
 800cffc:	d413      	bmi.n	800d026 <_printf_i+0x232>
 800cffe:	68e0      	ldr	r0, [r4, #12]
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	4298      	cmp	r0, r3
 800d004:	bfb8      	it	lt
 800d006:	4618      	movlt	r0, r3
 800d008:	e7a6      	b.n	800cf58 <_printf_i+0x164>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4632      	mov	r2, r6
 800d00e:	4649      	mov	r1, r9
 800d010:	4640      	mov	r0, r8
 800d012:	47d0      	blx	sl
 800d014:	3001      	adds	r0, #1
 800d016:	d09d      	beq.n	800cf54 <_printf_i+0x160>
 800d018:	3501      	adds	r5, #1
 800d01a:	68e3      	ldr	r3, [r4, #12]
 800d01c:	9903      	ldr	r1, [sp, #12]
 800d01e:	1a5b      	subs	r3, r3, r1
 800d020:	42ab      	cmp	r3, r5
 800d022:	dcf2      	bgt.n	800d00a <_printf_i+0x216>
 800d024:	e7eb      	b.n	800cffe <_printf_i+0x20a>
 800d026:	2500      	movs	r5, #0
 800d028:	f104 0619 	add.w	r6, r4, #25
 800d02c:	e7f5      	b.n	800d01a <_printf_i+0x226>
 800d02e:	bf00      	nop
 800d030:	0800d1a9 	.word	0x0800d1a9
 800d034:	0800d1ba 	.word	0x0800d1ba

0800d038 <memmove>:
 800d038:	4288      	cmp	r0, r1
 800d03a:	b510      	push	{r4, lr}
 800d03c:	eb01 0402 	add.w	r4, r1, r2
 800d040:	d902      	bls.n	800d048 <memmove+0x10>
 800d042:	4284      	cmp	r4, r0
 800d044:	4623      	mov	r3, r4
 800d046:	d807      	bhi.n	800d058 <memmove+0x20>
 800d048:	1e43      	subs	r3, r0, #1
 800d04a:	42a1      	cmp	r1, r4
 800d04c:	d008      	beq.n	800d060 <memmove+0x28>
 800d04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d056:	e7f8      	b.n	800d04a <memmove+0x12>
 800d058:	4402      	add	r2, r0
 800d05a:	4601      	mov	r1, r0
 800d05c:	428a      	cmp	r2, r1
 800d05e:	d100      	bne.n	800d062 <memmove+0x2a>
 800d060:	bd10      	pop	{r4, pc}
 800d062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d06a:	e7f7      	b.n	800d05c <memmove+0x24>

0800d06c <_sbrk_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d06      	ldr	r5, [pc, #24]	; (800d088 <_sbrk_r+0x1c>)
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	602b      	str	r3, [r5, #0]
 800d078:	f7f6 f9e6 	bl	8003448 <_sbrk>
 800d07c:	1c43      	adds	r3, r0, #1
 800d07e:	d102      	bne.n	800d086 <_sbrk_r+0x1a>
 800d080:	682b      	ldr	r3, [r5, #0]
 800d082:	b103      	cbz	r3, 800d086 <_sbrk_r+0x1a>
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	20000d38 	.word	0x20000d38

0800d08c <_realloc_r>:
 800d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	4680      	mov	r8, r0
 800d092:	4614      	mov	r4, r2
 800d094:	460e      	mov	r6, r1
 800d096:	b921      	cbnz	r1, 800d0a2 <_realloc_r+0x16>
 800d098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09c:	4611      	mov	r1, r2
 800d09e:	f7ff bc57 	b.w	800c950 <_malloc_r>
 800d0a2:	b92a      	cbnz	r2, 800d0b0 <_realloc_r+0x24>
 800d0a4:	f7ff fbe8 	bl	800c878 <_free_r>
 800d0a8:	4625      	mov	r5, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	f000 f81b 	bl	800d0ea <_malloc_usable_size_r>
 800d0b4:	4284      	cmp	r4, r0
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	d802      	bhi.n	800d0c0 <_realloc_r+0x34>
 800d0ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0be:	d812      	bhi.n	800d0e6 <_realloc_r+0x5a>
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7ff fc44 	bl	800c950 <_malloc_r>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d0ed      	beq.n	800d0aa <_realloc_r+0x1e>
 800d0ce:	42bc      	cmp	r4, r7
 800d0d0:	4622      	mov	r2, r4
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	bf28      	it	cs
 800d0d6:	463a      	movcs	r2, r7
 800d0d8:	f7ff fbc0 	bl	800c85c <memcpy>
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4640      	mov	r0, r8
 800d0e0:	f7ff fbca 	bl	800c878 <_free_r>
 800d0e4:	e7e1      	b.n	800d0aa <_realloc_r+0x1e>
 800d0e6:	4635      	mov	r5, r6
 800d0e8:	e7df      	b.n	800d0aa <_realloc_r+0x1e>

0800d0ea <_malloc_usable_size_r>:
 800d0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0ee:	1f18      	subs	r0, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	bfbc      	itt	lt
 800d0f4:	580b      	ldrlt	r3, [r1, r0]
 800d0f6:	18c0      	addlt	r0, r0, r3
 800d0f8:	4770      	bx	lr
	...

0800d0fc <_init>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	bf00      	nop
 800d100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d102:	bc08      	pop	{r3}
 800d104:	469e      	mov	lr, r3
 800d106:	4770      	bx	lr

0800d108 <_fini>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr
