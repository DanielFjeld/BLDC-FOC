
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c254  0800c254  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c25c  0800c25c  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c25c  0800c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800c264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  20000124  0800c388  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  0800c388  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   000227d0  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047fc  00000000  00000000  00042967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00047168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001579  00000000  00000000  00048d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a78  00000000  00000000  0004a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e7d  00000000  00000000  0006ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6e17  00000000  00000000  00095bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a7c  00000000  00000000  0017c9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018445c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c138 	.word	0x0800c138

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	0800c138 	.word	0x0800c138

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <Current_IRQ+0x20>
 80005da:	2210      	movs	r2, #16
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <Current_IRQ+0x28>)
 80005e0:	f00b f95a 	bl	800b898 <memcpy>
    else return;
    Current_Callback_flag = 1;
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <Current_IRQ+0x2c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e000      	b.n	80005ee <Current_IRQ+0x22>
    else return;
 80005ec:	bf00      	nop
}
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000150 	.word	0x20000150
 80005f8:	20000140 	.word	0x20000140

080005fc <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000604:	2208      	movs	r2, #8
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <Voltage_Temp_IRQ+0x1c>)
 800060a:	f00b f945 	bl	800b898 <memcpy>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000160 	.word	0x20000160

0800061c <Can_RX_Status_IRQ>:
void Encoders_IRQ(Encoders* ptr){
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
}

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8000624:	220c      	movs	r2, #12
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <Can_RX_Status_IRQ+0x1c>)
 800062a:	f00b f935 	bl	800b898 <memcpy>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000178 	.word	0x20000178

0800063c <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	edd3 7a05 	vldr	s15, [r3, #20]
 800064e:	ed97 7a00 	vldr	s14, [r7]
 8000652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065a:	da09      	bge.n	8000670 <check_value+0x34>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000662:	ed97 7a00 	vldr	s14, [r7]
 8000666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d801      	bhi.n	8000674 <check_value+0x38>
 8000670:	2302      	movs	r3, #2
 8000672:	e016      	b.n	80006a2 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	edd3 7a04 	vldr	s15, [r3, #16]
 800067a:	ed97 7a00 	vldr	s14, [r7]
 800067e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000686:	da09      	bge.n	800069c <check_value+0x60>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	edd3 7a01 	vldr	s15, [r3, #4]
 800068e:	ed97 7a00 	vldr	s14, [r7]
 8000692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d801      	bhi.n	80006a0 <check_value+0x64>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <check_value+0x66>
	return LIMIT_OK;																	//OK
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <Limit>:
float Limit(CAN_LIMITS* ptr, float value){
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	ed87 0a00 	vstr	s0, [r7]
	if(value > ptr->max)return ptr->max;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80006c0:	ed97 7a00 	vldr	s14, [r7]
 80006c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006cc:	dd02      	ble.n	80006d4 <Limit+0x26>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	e00d      	b.n	80006f0 <Limit+0x42>
	if(value < ptr->min)return ptr->min;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	edd3 7a00 	vldr	s15, [r3]
 80006da:	ed97 7a00 	vldr	s14, [r7]
 80006de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	d502      	bpl.n	80006ee <Limit+0x40>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	e000      	b.n	80006f0 <Limit+0x42>
	return value;
 80006ee:	683b      	ldr	r3, [r7, #0]
}
 80006f0:	ee07 3a90 	vmov	s15, r3
 80006f4:	eeb0 0a67 	vmov.f32	s0, s15
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <BLDC_main>:

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	; 0x74
 8000708:	af08      	add	r7, sp, #32
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 800070a:	2128      	movs	r1, #40	; 0x28
 800070c:	48c8      	ldr	r0, [pc, #800]	; (8000a30 <BLDC_main+0x32c>)
 800070e:	f000 fe23 	bl	8001358 <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 10.0f, 0.0f, 1);
 8000712:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000716:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8000a34 <BLDC_main+0x330>
 800071a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800071e:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8000a38 <BLDC_main+0x334>
 8000722:	48c3      	ldr	r0, [pc, #780]	; (8000a30 <BLDC_main+0x32c>)
 8000724:	f000 fd5e 	bl	80011e4 <SetTunings>
	SetOutputLimits(&Current_PID, 0, 10);
 8000728:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800072c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8000a34 <BLDC_main+0x330>
 8000730:	48bf      	ldr	r0, [pc, #764]	; (8000a30 <BLDC_main+0x32c>)
 8000732:	f000 fe45 	bl	80013c0 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8000736:	2100      	movs	r1, #0
 8000738:	48bd      	ldr	r0, [pc, #756]	; (8000a30 <BLDC_main+0x32c>)
 800073a:	f000 fef1 	bl	8001520 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800073e:	2101      	movs	r1, #1
 8000740:	48bb      	ldr	r0, [pc, #748]	; (8000a30 <BLDC_main+0x32c>)
 8000742:	f000 fe99 	bl	8001478 <SetMode>
	Initialize(&Current_PID);
 8000746:	48ba      	ldr	r0, [pc, #744]	; (8000a30 <BLDC_main+0x32c>)
 8000748:	f000 feb8 	bl	80014bc <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 800074c:	2164      	movs	r1, #100	; 0x64
 800074e:	48bb      	ldr	r0, [pc, #748]	; (8000a3c <BLDC_main+0x338>)
 8000750:	f000 fe02 	bl	8001358 <SetSampleTime>
	SetTunings(&Velocity_PID, 1.0f, 0.1f, 0.0f, 1);
 8000754:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000758:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8000a34 <BLDC_main+0x330>
 800075c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8000a40 <BLDC_main+0x33c>
 8000760:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000764:	48b5      	ldr	r0, [pc, #724]	; (8000a3c <BLDC_main+0x338>)
 8000766:	f000 fd3d 	bl	80011e4 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 10);
 800076a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800076e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8000a34 <BLDC_main+0x330>
 8000772:	48b2      	ldr	r0, [pc, #712]	; (8000a3c <BLDC_main+0x338>)
 8000774:	f000 fe24 	bl	80013c0 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 8000778:	2100      	movs	r1, #0
 800077a:	48b0      	ldr	r0, [pc, #704]	; (8000a3c <BLDC_main+0x338>)
 800077c:	f000 fed0 	bl	8001520 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 8000780:	2101      	movs	r1, #1
 8000782:	48ae      	ldr	r0, [pc, #696]	; (8000a3c <BLDC_main+0x338>)
 8000784:	f000 fe78 	bl	8001478 <SetMode>
	Initialize(&Velocity_PID);
 8000788:	48ac      	ldr	r0, [pc, #688]	; (8000a3c <BLDC_main+0x338>)
 800078a:	f000 fe97 	bl	80014bc <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	48ac      	ldr	r0, [pc, #688]	; (8000a44 <BLDC_main+0x340>)
 8000792:	f000 fde1 	bl	8001358 <SetSampleTime>
	SetTunings(&Angle_PID, 1.0f, 0.0f, 0.0f, 1);
 8000796:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800079a:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8000a34 <BLDC_main+0x330>
 800079e:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8000a34 <BLDC_main+0x330>
 80007a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80007a6:	48a7      	ldr	r0, [pc, #668]	; (8000a44 <BLDC_main+0x340>)
 80007a8:	f000 fd1c 	bl	80011e4 <SetTunings>
	SetOutputLimits(&Angle_PID, 0, 10);
 80007ac:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80007b0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8000a34 <BLDC_main+0x330>
 80007b4:	48a3      	ldr	r0, [pc, #652]	; (8000a44 <BLDC_main+0x340>)
 80007b6:	f000 fe03 	bl	80013c0 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 80007ba:	2100      	movs	r1, #0
 80007bc:	48a1      	ldr	r0, [pc, #644]	; (8000a44 <BLDC_main+0x340>)
 80007be:	f000 feaf 	bl	8001520 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 80007c2:	2101      	movs	r1, #1
 80007c4:	489f      	ldr	r0, [pc, #636]	; (8000a44 <BLDC_main+0x340>)
 80007c6:	f000 fe57 	bl	8001478 <SetMode>
	Initialize(&Angle_PID);
 80007ca:	489e      	ldr	r0, [pc, #632]	; (8000a44 <BLDC_main+0x340>)
 80007cc:	f000 fe76 	bl	80014bc <Initialize>

	//setup encoder
	//encoder_init((void*)&Encoders_IRQ);

	//setup current
	current_init((void*)&Current_IRQ);
 80007d0:	489d      	ldr	r0, [pc, #628]	; (8000a48 <BLDC_main+0x344>)
 80007d2:	f001 f8c1 	bl	8001958 <current_init>
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80007d6:	489d      	ldr	r0, [pc, #628]	; (8000a4c <BLDC_main+0x348>)
 80007d8:	f001 f8d8 	bl	800198c <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80007dc:	4a9c      	ldr	r2, [pc, #624]	; (8000a50 <BLDC_main+0x34c>)
 80007de:	2136      	movs	r1, #54	; 0x36
 80007e0:	489c      	ldr	r0, [pc, #624]	; (8000a54 <BLDC_main+0x350>)
 80007e2:	f001 fb29 	bl	8001e38 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80007e6:	489b      	ldr	r0, [pc, #620]	; (8000a54 <BLDC_main+0x350>)
 80007e8:	f001 fb0a 	bl	8001e00 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80007ec:	f000 faa2 	bl	8000d34 <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80007f0:	2064      	movs	r0, #100	; 0x64
 80007f2:	f002 fefb 	bl	80035ec <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80007f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 8000804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8000828:	bf00      	nop
 800082a:	4b8b      	ldr	r3, [pc, #556]	; (8000a58 <BLDC_main+0x354>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0fb      	beq.n	800082a <BLDC_main+0x126>



		Current_Callback_flag = 0;
 8000832:	4b89      	ldr	r3, [pc, #548]	; (8000a58 <BLDC_main+0x354>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 8000838:	4b88      	ldr	r3, [pc, #544]	; (8000a5c <BLDC_main+0x358>)
 800083a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800083e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000844:	4a86      	ldr	r2, [pc, #536]	; (8000a60 <BLDC_main+0x35c>)
 8000846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084e:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000852:	4b84      	ldr	r3, [pc, #528]	; (8000a64 <BLDC_main+0x360>)
 8000854:	f107 0420 	add.w	r4, r7, #32
 8000858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 800085e:	4a82      	ldr	r2, [pc, #520]	; (8000a68 <BLDC_main+0x364>)
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		//time keepers
		timing_CAN_feedback++;
 800086a:	4b80      	ldr	r3, [pc, #512]	; (8000a6c <BLDC_main+0x368>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	4a7e      	ldr	r2, [pc, #504]	; (8000a6c <BLDC_main+0x368>)
 8000872:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000874:	4b7e      	ldr	r3, [pc, #504]	; (8000a70 <BLDC_main+0x36c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	4a7d      	ldr	r2, [pc, #500]	; (8000a70 <BLDC_main+0x36c>)
 800087c:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	eeb0 0a67 	vmov.f32	s0, s15
 8000890:	4878      	ldr	r0, [pc, #480]	; (8000a74 <BLDC_main+0x370>)
 8000892:	f7ff fed3 	bl	800063c <check_value>
 8000896:	4603      	mov	r3, r0
 8000898:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 0; //warning
 800089c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008a6:	4313      	orrs	r3, r2
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 0; //error
 80008aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008ae:	105b      	asrs	r3, r3, #1
 80008b0:	f003 0201 	and.w	r2, r3, #1
 80008b4:	4b70      	ldr	r3, [pc, #448]	; (8000a78 <BLDC_main+0x374>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	4a6f      	ldr	r2, [pc, #444]	; (8000a78 <BLDC_main+0x374>)
 80008bc:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	ee07 3a90 	vmov	s15, r3
 80008c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008c8:	eeb0 0a67 	vmov.f32	s0, s15
 80008cc:	486b      	ldr	r0, [pc, #428]	; (8000a7c <BLDC_main+0x378>)
 80008ce:	f7ff feb5 	bl	800063c <check_value>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 1; //warning
 80008d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008e4:	4313      	orrs	r3, r2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 1; //error
 80008e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008ec:	f003 0202 	and.w	r2, r3, #2
 80008f0:	4b61      	ldr	r3, [pc, #388]	; (8000a78 <BLDC_main+0x374>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	4a60      	ldr	r2, [pc, #384]	; (8000a78 <BLDC_main+0x374>)
 80008f8:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	ee07 3a90 	vmov	s15, r3
 8000900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000904:	eeb0 0a67 	vmov.f32	s0, s15
 8000908:	485d      	ldr	r0, [pc, #372]	; (8000a80 <BLDC_main+0x37c>)
 800090a:	f7ff fe97 	bl	800063c <check_value>
 800090e:	4603      	mov	r3, r0
 8000910:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 2; //warning
 8000914:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000920:	4313      	orrs	r3, r2
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000924:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000928:	105b      	asrs	r3, r3, #1
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	f003 0204 	and.w	r2, r3, #4
 8000930:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <BLDC_main+0x374>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4313      	orrs	r3, r2
 8000936:	4a50      	ldr	r2, [pc, #320]	; (8000a78 <BLDC_main+0x374>)
 8000938:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 800093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000944:	eeb0 0a67 	vmov.f32	s0, s15
 8000948:	484e      	ldr	r0, [pc, #312]	; (8000a84 <BLDC_main+0x380>)
 800094a:	f7ff fe77 	bl	800063c <check_value>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 3; //warning
 8000954:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000960:	4313      	orrs	r3, r2
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000964:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000968:	105b      	asrs	r3, r3, #1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	f003 0208 	and.w	r2, r3, #8
 8000970:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <BLDC_main+0x374>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4313      	orrs	r3, r2
 8000976:	4a40      	ldr	r2, [pc, #256]	; (8000a78 <BLDC_main+0x374>)
 8000978:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 800097a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	483f      	ldr	r0, [pc, #252]	; (8000a88 <BLDC_main+0x384>)
 800098a:	f7ff fe57 	bl	800063c <check_value>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 4; //warning
 8000994:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009a0:	4313      	orrs	r3, r2
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 4; //error
 80009a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009a8:	105b      	asrs	r3, r3, #1
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	f003 0210 	and.w	r2, r3, #16
 80009b0:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <BLDC_main+0x374>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	4a30      	ldr	r2, [pc, #192]	; (8000a78 <BLDC_main+0x374>)
 80009b8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 80009ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009bc:	ee07 3a90 	vmov	s15, r3
 80009c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009c4:	eeb0 0a67 	vmov.f32	s0, s15
 80009c8:	4830      	ldr	r0, [pc, #192]	; (8000a8c <BLDC_main+0x388>)
 80009ca:	f7ff fe37 	bl	800063c <check_value>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 5; //warning
 80009d4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009d8:	015b      	lsls	r3, r3, #5
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009e0:	4313      	orrs	r3, r2
 80009e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 5; //error
 80009e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009e8:	105b      	asrs	r3, r3, #1
 80009ea:	015b      	lsls	r3, r3, #5
 80009ec:	f003 0220 	and.w	r2, r3, #32
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <BLDC_main+0x374>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <BLDC_main+0x374>)
 80009f8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 80009fa:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a06:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0a:	4821      	ldr	r0, [pc, #132]	; (8000a90 <BLDC_main+0x38c>)
 8000a0c:	f7ff fe16 	bl	800063c <check_value>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 6; //warning
 8000a16:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a1a:	019b      	lsls	r3, r3, #6
 8000a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a22:	4313      	orrs	r3, r2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000a26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a2a:	105b      	asrs	r3, r3, #1
 8000a2c:	e032      	b.n	8000a94 <BLDC_main+0x390>
 8000a2e:	bf00      	nop
 8000a30:	200001c4 	.word	0x200001c4
 8000a34:	00000000 	.word	0x00000000
 8000a38:	3ba3d70a 	.word	0x3ba3d70a
 8000a3c:	20000204 	.word	0x20000204
 8000a40:	3dcccccd 	.word	0x3dcccccd
 8000a44:	20000244 	.word	0x20000244
 8000a48:	080005cd 	.word	0x080005cd
 8000a4c:	080005fd 	.word	0x080005fd
 8000a50:	0800061d 	.word	0x0800061d
 8000a54:	200005f8 	.word	0x200005f8
 8000a58:	20000140 	.word	0x20000140
 8000a5c:	20000150 	.word	0x20000150
 8000a60:	20000160 	.word	0x20000160
 8000a64:	20000168 	.word	0x20000168
 8000a68:	20000178 	.word	0x20000178
 8000a6c:	20000144 	.word	0x20000144
 8000a70:	20000148 	.word	0x20000148
 8000a74:	20000090 	.word	0x20000090
 8000a78:	2000014c 	.word	0x2000014c
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000018 	.word	0x20000018
 8000a84:	200000a8 	.word	0x200000a8
 8000a88:	20000048 	.word	0x20000048
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	20000060 	.word	0x20000060
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000a9a:	4b96      	ldr	r3, [pc, #600]	; (8000cf4 <BLDC_main+0x5f0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	4a94      	ldr	r2, [pc, #592]	; (8000cf4 <BLDC_main+0x5f0>)
 8000aa2:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000aa4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	4890      	ldr	r0, [pc, #576]	; (8000cf8 <BLDC_main+0x5f4>)
 8000ab6:	f7ff fdc1 	bl	800063c <check_value>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		warning |= (Limit_callback&1)      << 7; //warning
 8000ac0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ac4:	01db      	lsls	r3, r3, #7
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000aca:	4313      	orrs	r3, r2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000ace:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ad2:	105b      	asrs	r3, r3, #1
 8000ad4:	01db      	lsls	r3, r3, #7
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b86      	ldr	r3, [pc, #536]	; (8000cf4 <BLDC_main+0x5f0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	4a85      	ldr	r2, [pc, #532]	; (8000cf4 <BLDC_main+0x5f0>)
 8000ae0:	6013      	str	r3, [r2, #0]
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Calculated_pos;
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	4b83      	ldr	r3, [pc, #524]	; (8000cfc <BLDC_main+0x5f8>)
 8000aee:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)IRQ_Encoders_BUFF.Velocity;
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	ee07 3a90 	vmov	s15, r3
 8000af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afc:	4b80      	ldr	r3, [pc, #512]	; (8000d00 <BLDC_main+0x5fc>)
 8000afe:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = (float)IRQ_Current_BUFF.Current_DC;
 8000b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0c:	4b7d      	ldr	r3, [pc, #500]	; (8000d04 <BLDC_main+0x600>)
 8000b0e:	edc3 7a00 	vstr	s15, [r3]

		Angle_PID.Setpoint = Limit(&LIMIT_Encoder_2, IRQ_STATUS_BUFF.setpoint);
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b20:	4879      	ldr	r0, [pc, #484]	; (8000d08 <BLDC_main+0x604>)
 8000b22:	f7ff fdc4 	bl	80006ae <Limit>
 8000b26:	eef0 7a40 	vmov.f32	s15, s0
 8000b2a:	4b74      	ldr	r3, [pc, #464]	; (8000cfc <BLDC_main+0x5f8>)
 8000b2c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 8000b30:	4872      	ldr	r0, [pc, #456]	; (8000cfc <BLDC_main+0x5f8>)
 8000b32:	f000 faa5 	bl	8001080 <Compute>

		Velocity_PID.Setpoint =  Limit(&LIMIT_Velocity, Angle_PID.Output);
 8000b36:	4b71      	ldr	r3, [pc, #452]	; (8000cfc <BLDC_main+0x5f8>)
 8000b38:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b40:	4872      	ldr	r0, [pc, #456]	; (8000d0c <BLDC_main+0x608>)
 8000b42:	f7ff fdb4 	bl	80006ae <Limit>
 8000b46:	eef0 7a40 	vmov.f32	s15, s0
 8000b4a:	4b6d      	ldr	r3, [pc, #436]	; (8000d00 <BLDC_main+0x5fc>)
 8000b4c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Velocity_PID);
 8000b50:	486b      	ldr	r0, [pc, #428]	; (8000d00 <BLDC_main+0x5fc>)
 8000b52:	f000 fa95 	bl	8001080 <Compute>

		Current_PID.Setpoint = Limit(&LIMIT_Current, Velocity_PID.Output);
 8000b56:	4b6a      	ldr	r3, [pc, #424]	; (8000d00 <BLDC_main+0x5fc>)
 8000b58:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	486b      	ldr	r0, [pc, #428]	; (8000d10 <BLDC_main+0x60c>)
 8000b62:	f7ff fda4 	bl	80006ae <Limit>
 8000b66:	eef0 7a40 	vmov.f32	s15, s0
 8000b6a:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <BLDC_main+0x600>)
 8000b6c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Current_PID);
 8000b70:	4864      	ldr	r0, [pc, #400]	; (8000d04 <BLDC_main+0x600>)
 8000b72:	f000 fa85 	bl	8001080 <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000b76:	4b5f      	ldr	r3, [pc, #380]	; (8000cf4 <BLDC_main+0x5f0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <BLDC_main+0x484>
			shutoff();
 8000b7e:	f000 fa4b 	bl	8001018 <shutoff>
			shutdown();
 8000b82:	f000 fa5b 	bl	800103c <shutdown>
 8000b86:	e01c      	b.n	8000bc2 <BLDC_main+0x4be>
		}
		else{
			inverter((IRQ_Encoders_BUFF.Encoder1_pos+90000)/1000, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8000b8e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000b92:	4a60      	ldr	r2, [pc, #384]	; (8000d14 <BLDC_main+0x610>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	099b      	lsrs	r3, r3, #6
 8000b9a:	b29c      	uxth	r4, r3
 8000b9c:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <BLDC_main+0x5fc>)
 8000b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	485c      	ldr	r0, [pc, #368]	; (8000d18 <BLDC_main+0x614>)
 8000ba8:	f7ff fd81 	bl	80006ae <Limit>
 8000bac:	eef0 7a40 	vmov.f32	s15, s0
 8000bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bb4:	ee17 3a90 	vmov	r3, s15
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f000 f905 	bl	8000dcc <inverter>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000bc2:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <BLDC_main+0x618>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b95      	cmp	r3, #149	; 0x95
 8000bc8:	d963      	bls.n	8000c92 <BLDC_main+0x58e>
			timing_CAN_feedback = 0;
 8000bca:	4b54      	ldr	r3, [pc, #336]	; (8000d1c <BLDC_main+0x618>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000bd0:	4a53      	ldr	r2, [pc, #332]	; (8000d20 <BLDC_main+0x61c>)
 8000bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd4:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <BLDC_main+0x5f0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <BLDC_main+0x61c>)
 8000bdc:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4a4f      	ldr	r2, [pc, #316]	; (8000d20 <BLDC_main+0x61c>)
 8000be2:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = IRQ_STATUS_BUFF.status;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <BLDC_main+0x61c>)
 8000be8:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <BLDC_main+0x61c>)
 8000bf0:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bf4:	4a4a      	ldr	r2, [pc, #296]	; (8000d20 <BLDC_main+0x61c>)
 8000bf6:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bfa:	4a49      	ldr	r2, [pc, #292]	; (8000d20 <BLDC_main+0x61c>)
 8000bfc:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c00:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <BLDC_main+0x61c>)
 8000c02:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000c04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <BLDC_main+0x61c>)
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <BLDC_main+0x61c>)
 8000c10:	6353      	str	r3, [r2, #52]	; 0x34
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8000c12:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <BLDC_main+0x61c>)
 8000c1a:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8000c1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <BLDC_main+0x61c>)
 8000c24:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <BLDC_main+0x61c>)
 8000c2a:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	4a3c      	ldr	r2, [pc, #240]	; (8000d20 <BLDC_main+0x61c>)
 8000c30:	6153      	str	r3, [r2, #20]
			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	4a3a      	ldr	r2, [pc, #232]	; (8000d20 <BLDC_main+0x61c>)
 8000c36:	6193      	str	r3, [r2, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8000c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3a:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <BLDC_main+0x61c>)
 8000c3c:	61d3      	str	r3, [r2, #28]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8000c3e:	4a38      	ldr	r2, [pc, #224]	; (8000d20 <BLDC_main+0x61c>)
 8000c40:	f240 4136 	movw	r1, #1078	; 0x436
 8000c44:	4837      	ldr	r0, [pc, #220]	; (8000d24 <BLDC_main+0x620>)
 8000c46:	f001 f933 	bl	8001eb0 <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf( "UART DEBUG:"
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <BLDC_main+0x61c>)
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <BLDC_main+0x61c>)
 8000c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <BLDC_main+0x61c>)
 8000c58:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <BLDC_main+0x61c>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <BLDC_main+0x61c>)
 8000c62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000c64:	492e      	ldr	r1, [pc, #184]	; (8000d20 <BLDC_main+0x61c>)
 8000c66:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8000c68:	482d      	ldr	r0, [pc, #180]	; (8000d20 <BLDC_main+0x61c>)
 8000c6a:	6800      	ldr	r0, [r0, #0]
 8000c6c:	4c2c      	ldr	r4, [pc, #176]	; (8000d20 <BLDC_main+0x61c>)
 8000c6e:	68e4      	ldr	r4, [r4, #12]
 8000c70:	4d2b      	ldr	r5, [pc, #172]	; (8000d20 <BLDC_main+0x61c>)
 8000c72:	686d      	ldr	r5, [r5, #4]
 8000c74:	4e2a      	ldr	r6, [pc, #168]	; (8000d20 <BLDC_main+0x61c>)
 8000c76:	68b6      	ldr	r6, [r6, #8]
 8000c78:	9606      	str	r6, [sp, #24]
 8000c7a:	9505      	str	r5, [sp, #20]
 8000c7c:	9404      	str	r4, [sp, #16]
 8000c7e:	9003      	str	r0, [sp, #12]
 8000c80:	9102      	str	r1, [sp, #8]
 8000c82:	9201      	str	r2, [sp, #4]
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	68f9      	ldr	r1, [r7, #12]
 8000c8c:	4826      	ldr	r0, [pc, #152]	; (8000d28 <BLDC_main+0x624>)
 8000c8e:	f000 fc55 	bl	800153c <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <BLDC_main+0x5f0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <BLDC_main+0x5a6>
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f006 faac 	bl	8007200 <HAL_GPIO_WritePin>
 8000ca8:	e006      	b.n	8000cb8 <BLDC_main+0x5b4>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f006 faa4 	bl	8007200 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8000cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <BLDC_main+0x5c6>
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <BLDC_main+0x628>)
 8000cc4:	f006 fa9c 	bl	8007200 <HAL_GPIO_WritePin>
 8000cc8:	e004      	b.n	8000cd4 <BLDC_main+0x5d0>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <BLDC_main+0x628>)
 8000cd0:	f006 fa96 	bl	8007200 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <BLDC_main+0x62c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	f67f ada3 	bls.w	8000828 <BLDC_main+0x124>
			running_LED_timing = 0;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <BLDC_main+0x62c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 8000ce8:	2140      	movs	r1, #64	; 0x40
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <BLDC_main+0x628>)
 8000cec:	f006 faa0 	bl	8007230 <HAL_GPIO_TogglePin>
	while(1){
 8000cf0:	e59a      	b.n	8000828 <BLDC_main+0x124>
 8000cf2:	bf00      	nop
 8000cf4:	2000014c 	.word	0x2000014c
 8000cf8:	20000060 	.word	0x20000060
 8000cfc:	20000244 	.word	0x20000244
 8000d00:	20000204 	.word	0x20000204
 8000d04:	200001c4 	.word	0x200001c4
 8000d08:	20000018 	.word	0x20000018
 8000d0c:	200000a8 	.word	0x200000a8
 8000d10:	20000090 	.word	0x20000090
 8000d14:	10624dd3 	.word	0x10624dd3
 8000d18:	20000078 	.word	0x20000078
 8000d1c:	20000144 	.word	0x20000144
 8000d20:	20000184 	.word	0x20000184
 8000d24:	200005f8 	.word	0x200005f8
 8000d28:	0800c150 	.word	0x0800c150
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	20000148 	.word	0x20000148

08000d34 <CTRL_init_PWM>:
//	CTRL_attr.priority = 8;
//	CTRL_thread_id = osThreadNew((void *)CTRL_thread, NULL, &CTRL_attr);
}

//thread
void CTRL_init_PWM(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d3c:	f007 fdb6 	bl	80088ac <HAL_TIM_PWM_Start>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <CTRL_init_PWM+0x16>
 8000d46:	f001 fe4b 	bl	80029e0 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d4e:	f008 ff4b 	bl	8009be8 <HAL_TIMEx_PWMN_Start>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <CTRL_init_PWM+0x28>
 8000d58:	f001 fe42 	bl	80029e0 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d60:	f007 fda4 	bl	80088ac <HAL_TIM_PWM_Start>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <CTRL_init_PWM+0x3a>
 8000d6a:	f001 fe39 	bl	80029e0 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d72:	f008 ff39 	bl	8009be8 <HAL_TIMEx_PWMN_Start>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <CTRL_init_PWM+0x4c>
 8000d7c:	f001 fe30 	bl	80029e0 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000d80:	2108      	movs	r1, #8
 8000d82:	480f      	ldr	r0, [pc, #60]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d84:	f007 fd92 	bl	80088ac <HAL_TIM_PWM_Start>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <CTRL_init_PWM+0x5e>
 8000d8e:	f001 fe27 	bl	80029e0 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000d92:	2108      	movs	r1, #8
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <CTRL_init_PWM+0x8c>)
 8000d96:	f008 ff27 	bl	8009be8 <HAL_TIMEx_PWMN_Start>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <CTRL_init_PWM+0x70>
 8000da0:	f001 fe1e 	bl	80029e0 <Error_Handler>

	TIM1->CCR1 = 0;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <CTRL_init_PWM+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <CTRL_init_PWM+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <CTRL_init_PWM+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <CTRL_init_PWM+0x94>)
 8000db8:	f007 fcac 	bl	8008714 <HAL_TIM_Base_Start_IT>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200008a8 	.word	0x200008a8
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	200008f4 	.word	0x200008f4

08000dcc <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(uint16_t angle, uint16_t voltage){
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	80fb      	strh	r3, [r7, #6]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	80bb      	strh	r3, [r7, #4]

	angle = angle%360;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	4987      	ldr	r1, [pc, #540]	; (8001000 <inverter+0x234>)
 8000de2:	fba1 1202 	umull	r1, r2, r1, r2
 8000de6:	0892      	lsrs	r2, r2, #2
 8000de8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000dec:	fb01 f202 	mul.w	r2, r1, r2
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	4b80      	ldr	r3, [pc, #512]	; (8001004 <inverter+0x238>)
 8000e04:	fba3 1302 	umull	r1, r3, r3, r2
 8000e08:	0959      	lsrs	r1, r3, #5
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	1a5b      	subs	r3, r3, r1
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	ee07 3a90 	vmov	s15, r3
 8000e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1e:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e2c:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001008 <inverter+0x23c>
 8000e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e38:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000e3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e40:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8001008 <inverter+0x23c>
 8000e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e4c:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 800100c <inverter+0x240>
 8000e50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e54:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000e58:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001008 <inverter+0x23c>
 8000e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e64:	eddf 5a68 	vldr	s11, [pc, #416]	; 8001008 <inverter+0x23c>
 8000e68:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000e70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800100c <inverter+0x240>
 8000e74:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001010 <inverter+0x244>
 8000e80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e84:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e90:	ee17 3a90 	vmov	r3, s15
 8000e94:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))) );
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000ea8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000eac:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800100c <inverter+0x240>
 8000eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000eb8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ebc:	eddf 6a53 	vldr	s13, [pc, #332]	; 800100c <inverter+0x240>
 8000ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ec4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ec8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001010 <inverter+0x244>
 8000ed4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ed8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee4:	ee17 3a90 	vmov	r3, s15
 8000ee8:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	89ba      	ldrh	r2, [r7, #12]
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	0fda      	lsrs	r2, r3, #31
 8000ef8:	4413      	add	r3, r2
 8000efa:	105b      	asrs	r3, r3, #1
 8000efc:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2b3b      	cmp	r3, #59	; 0x3b
 8000f02:	d80c      	bhi.n	8000f1e <inverter+0x152>
		compare_M1 = T0;
 8000f04:	897b      	ldrh	r3, [r7, #10]
 8000f06:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8000f08:	897a      	ldrh	r2, [r7, #10]
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8000f10:	897a      	ldrh	r2, [r7, #10]
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	441a      	add	r2, r3
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	4413      	add	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e060      	b.n	8000fe0 <inverter+0x214>
		}
	else if(angle >= 60 && angle < 120){
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	2b3b      	cmp	r3, #59	; 0x3b
 8000f22:	d90f      	bls.n	8000f44 <inverter+0x178>
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	2b77      	cmp	r3, #119	; 0x77
 8000f28:	d80c      	bhi.n	8000f44 <inverter+0x178>
		compare_M1 = T0;
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8000f2e:	897a      	ldrh	r2, [r7, #10]
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	441a      	add	r2, r3
 8000f34:	89bb      	ldrh	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 8000f3a:	897a      	ldrh	r2, [r7, #10]
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e04d      	b.n	8000fe0 <inverter+0x214>
		}
	else if(angle >= 120 && angle < 180){
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	2b77      	cmp	r3, #119	; 0x77
 8000f48:	d90f      	bls.n	8000f6a <inverter+0x19e>
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2bb3      	cmp	r3, #179	; 0xb3
 8000f4e:	d80c      	bhi.n	8000f6a <inverter+0x19e>
		compare_M1 = T0+T2;
 8000f50:	897a      	ldrh	r2, [r7, #10]
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8000f58:	897a      	ldrh	r2, [r7, #10]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	89bb      	ldrh	r3, [r7, #12]
 8000f60:	4413      	add	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e03a      	b.n	8000fe0 <inverter+0x214>
		}
	else if(angle >= 180 && angle < 240){
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2bb3      	cmp	r3, #179	; 0xb3
 8000f6e:	d90f      	bls.n	8000f90 <inverter+0x1c4>
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2bef      	cmp	r3, #239	; 0xef
 8000f74:	d80c      	bhi.n	8000f90 <inverter+0x1c4>
		compare_M1 = T0+T1+T2;
 8000f76:	897a      	ldrh	r2, [r7, #10]
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	441a      	add	r2, r3
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8000f82:	897a      	ldrh	r2, [r7, #10]
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	4413      	add	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8000f8a:	897b      	ldrh	r3, [r7, #10]
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e027      	b.n	8000fe0 <inverter+0x214>
		}
	else if(angle >= 240 && angle < 300){
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	2bef      	cmp	r3, #239	; 0xef
 8000f94:	d910      	bls.n	8000fb8 <inverter+0x1ec>
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f9c:	d20c      	bcs.n	8000fb8 <inverter+0x1ec>
		compare_M1 = T0+T1+T2;
 8000f9e:	897a      	ldrh	r2, [r7, #10]
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	441a      	add	r2, r3
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8000faa:	897b      	ldrh	r3, [r7, #10]
 8000fac:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8000fae:	897a      	ldrh	r2, [r7, #10]
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e013      	b.n	8000fe0 <inverter+0x214>
		}
	else if(angle >= 300 && angle < 360){
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fbe:	d30f      	bcc.n	8000fe0 <inverter+0x214>
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fc6:	d20b      	bcs.n	8000fe0 <inverter+0x214>
		compare_M1 = T0+T1;
 8000fc8:	897a      	ldrh	r2, [r7, #10]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	4413      	add	r3, r2
 8000fce:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8000fd0:	897b      	ldrh	r3, [r7, #10]
 8000fd2:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8000fd4:	897a      	ldrh	r2, [r7, #10]
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	441a      	add	r2, r3
 8000fda:	89bb      	ldrh	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]
		}

	//PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <inverter+0x248>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <inverter+0x248>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 8000fec:	4a09      	ldr	r2, [pc, #36]	; (8001014 <inverter+0x248>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	16c16c17 	.word	0x16c16c17
 8001004:	88888889 	.word	0x88888889
 8001008:	42700000 	.word	0x42700000
 800100c:	43340000 	.word	0x43340000
 8001010:	471e3400 	.word	0x471e3400
 8001014:	40012c00 	.word	0x40012c00

08001018 <shutoff>:
void shutoff(void){
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <shutoff+0x20>)
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <shutoff+0x20>)
 8001024:	2200      	movs	r2, #0
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <shutoff+0x20>)
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40012c00 	.word	0x40012c00

0800103c <shutdown>:
void shutdown(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001040:	2100      	movs	r1, #0
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <shutdown+0x40>)
 8001044:	f007 fd32 	bl	8008aac <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8001048:	2100      	movs	r1, #0
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <shutdown+0x40>)
 800104c:	f008 fe80 	bl	8009d50 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001050:	2104      	movs	r1, #4
 8001052:	480a      	ldr	r0, [pc, #40]	; (800107c <shutdown+0x40>)
 8001054:	f007 fd2a 	bl	8008aac <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001058:	2104      	movs	r1, #4
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <shutdown+0x40>)
 800105c:	f008 fe78 	bl	8009d50 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001060:	2108      	movs	r1, #8
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <shutdown+0x40>)
 8001064:	f007 fd22 	bl	8008aac <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001068:	2108      	movs	r1, #8
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <shutdown+0x40>)
 800106c:	f008 fe70 	bl	8009d50 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <shutdown+0x40>)
 8001072:	f007 fb27 	bl	80086c4 <HAL_TIM_Base_Stop>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200008a8 	.word	0x200008a8

08001080 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80a2 	beq.w	80011d8 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 7a02 	vldr	s14, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	edd3 7a00 	vldr	s15, [r3]
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ed93 7a03 	vldr	s14, [r3, #12]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	edd3 6a06 	vldr	s13, [r3, #24]
 80010c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00e      	beq.n	8001102 <Compute+0x82>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80010f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed93 7a03 	vldr	s14, [r3, #12]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800110e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd04      	ble.n	8001122 <Compute+0xa2>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	e00e      	b.n	8001140 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	ed93 7a03 	vldr	s14, [r3, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a08 	vldr	s15, [r3, #32]
 800112e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d503      	bpl.n	8001140 <Compute+0xc0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a1a      	ldr	r2, [r3, #32]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <Compute+0xe0>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001150:	edd7 7a03 	vldr	s15, [r7, #12]
 8001154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edc3 7a01 	vstr	s15, [r3, #4]
 800115e:	e003      	b.n	8001168 <Compute+0xe8>
	else val->Output = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	ed93 7a01 	vldr	s14, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edd3 6a03 	vldr	s13, [r3, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	ed93 6a07 	vldr	s12, [r3, #28]
 800117a:	edd7 7a02 	vldr	s15, [r7, #8]
 800117e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001182:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	ed93 7a01 	vldr	s14, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800119c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	dd04      	ble.n	80011b0 <Compute+0x130>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	e00e      	b.n	80011ce <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80011bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	d503      	bpl.n	80011ce <Compute+0x14e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	e000      	b.n	80011da <Compute+0x15a>
	if(!val->inAuto) return;
 80011d8:	bf00      	nop
}
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6178      	str	r0, [r7, #20]
 80011ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80011f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80011f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80011f8:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80011fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	f100 809b 	bmi.w	8001342 <SetTunings+0x15e>
 800120c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	f100 8093 	bmi.w	8001342 <SetTunings+0x15e>
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	f100 808b 	bmi.w	8001342 <SetTunings+0x15e>
 800122c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001230:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	f100 8083 	bmi.w	8001342 <SetTunings+0x15e>
 800123c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	dc79      	bgt.n	8001342 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 800124e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	bfcc      	ite	gt
 800125c:	2301      	movgt	r3, #1
 800125e:	2300      	movle	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 800126a:	edd7 7a01 	vldr	s15, [r7, #4]
 800126e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	bf4c      	ite	mi
 800127c:	2301      	movmi	r3, #1
 800127e:	2300      	movpl	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001296:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001350 <SetTunings+0x16c>
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 80012a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 80012ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80012be:	ed97 7a07 	vldr	s14, [r7, #28]
 80012c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d11d      	bne.n	8001310 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80012da:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001354 <SetTunings+0x170>
 80012de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001354 <SetTunings+0x170>
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001302:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001354 <SetTunings+0x170>
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	ed93 7a05 	vldr	s14, [r3, #20]
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001328:	edd7 7a01 	vldr	s15, [r7, #4]
 800132c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	edd3 7a05 	vldr	s15, [r3, #20]
 8001336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001340:	e000      	b.n	8001344 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001342:	bf00      	nop
}
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	49742400 	.word	0x49742400
 8001354:	00000000 	.word	0x00000000

08001358 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd25      	ble.n	80013b4 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 800137e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001382:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a06 	vldr	s14, [r3, #24]
 800138c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	edd3 6a07 	vldr	s13, [r3, #28]
 80013a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80013cc:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 80013d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	dc44      	bgt.n	800146c <SetOutputLimits+0xac>
   val->outMin = Min;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd04      	ble.n	800140e <SetOutputLimits+0x4e>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	e00e      	b.n	800142c <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	ed93 7a01 	vldr	s14, [r3, #4]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edd3 7a08 	vldr	s15, [r3, #32]
 800141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d503      	bpl.n	800142c <SetOutputLimits+0x6c>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd04      	ble.n	800144c <SetOutputLimits+0x8c>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	e010      	b.n	800146e <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	edd3 7a08 	vldr	s15, [r3, #32]
 8001458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d505      	bpl.n	800146e <SetOutputLimits+0xae>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e000      	b.n	800146e <SetOutputLimits+0xae>
   if(Min > Max) return;
 800146c:	bf00      	nop
}
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001498:	2a00      	cmp	r2, #0
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d102      	bne.n	80014ac <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f808 	bl	80014bc <Initialize>
    }
    val->inAuto = newAuto;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <Initialize>:

void Initialize(PID_instance *val)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	dd04      	ble.n	80014f4 <Initialize+0x38>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 80014f2:	e00f      	b.n	8001514 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d400      	bmi.n	800150c <Initialize+0x50>
}
 800150a:	e003      	b.n	8001514 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1a      	ldr	r2, [r3, #32]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60da      	str	r2, [r3, #12]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 800153c:	b40f      	push	{r0, r1, r2, r3}
 800153e:	b590      	push	{r4, r7, lr}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <PrintServerPrintf+0x44>)
 8001554:	f00a f95e 	bl	800b814 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <PrintServerPrintf+0x48>)
 800155a:	681c      	ldr	r4, [r3, #0]
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <PrintServerPrintf+0x44>)
 800155e:	f7fe fe5f 	bl	8000220 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29b      	uxth	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	4905      	ldr	r1, [pc, #20]	; (8001580 <PrintServerPrintf+0x44>)
 800156a:	4620      	mov	r0, r4
 800156c:	f008 fe2c 	bl	800a1c8 <HAL_UART_Transmit_DMA>
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800157a:	b004      	add	sp, #16
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000284 	.word	0x20000284
 8001584:	200000c0 	.word	0x200000c0

08001588 <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <ADC_CAL_init+0x14>
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e1c6      	b.n	800192a <ADC_CAL_init+0x3a2>

	//copy pointer
	adc_handle_CAL = hadc;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 80015a0:	217f      	movs	r1, #127	; 0x7f
 80015a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015a4:	f003 ff6c 	bl	8005480 <HAL_ADCEx_Calibration_Start>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 80015ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <ADC_CAL_init+0x34>
 80015b6:	f06f 0301 	mvn.w	r3, #1
 80015ba:	e1b6      	b.n	800192a <ADC_CAL_init+0x3a2>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 80015c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00a f929 	bl	800b830 <memset>
	while(calibrating){
 80015de:	e19c      	b.n	800191a <ADC_CAL_init+0x392>
		sConfig.Channel = ADC_CHANNEL_0;
 80015e0:	2301      	movs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015ec:	f003 f8f4 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80015f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <ADC_CAL_init+0x7c>
 80015fe:	f06f 0302 	mvn.w	r3, #2
 8001602:	e192      	b.n	800192a <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001604:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001606:	f002 fc2f 	bl	8003e68 <HAL_ADC_Start>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001610:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <ADC_CAL_init+0x96>
 8001618:	f06f 0302 	mvn.w	r3, #2
 800161c:	e185      	b.n	800192a <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 800161e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001622:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001624:	f002 fd10 	bl	8004048 <HAL_ADC_PollForConversion>
 8001628:	4603      	mov	r3, r0
 800162a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 800162e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001632:	2b03      	cmp	r3, #3
 8001634:	d102      	bne.n	800163c <ADC_CAL_init+0xb4>
 8001636:	f06f 0303 	mvn.w	r3, #3
 800163a:	e176      	b.n	800192a <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 800163c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <ADC_CAL_init+0xc2>
 8001644:	f06f 0304 	mvn.w	r3, #4
 8001648:	e16f      	b.n	800192a <ADC_CAL_init+0x3a2>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 800164a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800164c:	f002 fe88 	bl	8004360 <HAL_ADC_GetValue>
 8001650:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001652:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001654:	f002 fcc4 	bl	8003fe0 <HAL_ADC_Stop>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 800165e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <ADC_CAL_init+0xe4>
 8001666:	f06f 0305 	mvn.w	r3, #5
 800166a:	e15e      	b.n	800192a <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_1;
 800166c:	4bb1      	ldr	r3, [pc, #708]	; (8001934 <ADC_CAL_init+0x3ac>)
 800166e:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4619      	mov	r1, r3
 8001676:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001678:	f003 f8ae 	bl	80047d8 <HAL_ADC_ConfigChannel>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <ADC_CAL_init+0x108>
 800168a:	f06f 0302 	mvn.w	r3, #2
 800168e:	e14c      	b.n	800192a <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001690:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001692:	f002 fbe9 	bl	8003e68 <HAL_ADC_Start>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800169c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <ADC_CAL_init+0x122>
 80016a4:	f06f 0302 	mvn.w	r3, #2
 80016a8:	e13f      	b.n	800192a <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 80016aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016b0:	f002 fcca 	bl	8004048 <HAL_ADC_PollForConversion>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80016ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d102      	bne.n	80016c8 <ADC_CAL_init+0x140>
 80016c2:	f06f 0303 	mvn.w	r3, #3
 80016c6:	e130      	b.n	800192a <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80016c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <ADC_CAL_init+0x14e>
 80016d0:	f06f 0304 	mvn.w	r3, #4
 80016d4:	e129      	b.n	800192a <ADC_CAL_init+0x3a2>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80016d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016d8:	f002 fe42 	bl	8004360 <HAL_ADC_GetValue>
 80016dc:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80016de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016e0:	f002 fc7e 	bl	8003fe0 <HAL_ADC_Stop>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80016ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <ADC_CAL_init+0x170>
 80016f2:	f06f 0305 	mvn.w	r3, #5
 80016f6:	e118      	b.n	800192a <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_2;
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <ADC_CAL_init+0x3b0>)
 80016fa:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	4619      	mov	r1, r3
 8001702:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001704:	f003 f868 	bl	80047d8 <HAL_ADC_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800170e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <ADC_CAL_init+0x194>
 8001716:	f06f 0302 	mvn.w	r3, #2
 800171a:	e106      	b.n	800192a <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 800171c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800171e:	f002 fba3 	bl	8003e68 <HAL_ADC_Start>
 8001722:	4603      	mov	r3, r0
 8001724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <ADC_CAL_init+0x1ae>
 8001730:	f06f 0302 	mvn.w	r3, #2
 8001734:	e0f9      	b.n	800192a <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001736:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800173a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800173c:	f002 fc84 	bl	8004048 <HAL_ADC_PollForConversion>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800174a:	2b03      	cmp	r3, #3
 800174c:	d102      	bne.n	8001754 <ADC_CAL_init+0x1cc>
 800174e:	f06f 0303 	mvn.w	r3, #3
 8001752:	e0ea      	b.n	800192a <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <ADC_CAL_init+0x1da>
 800175c:	f06f 0304 	mvn.w	r3, #4
 8001760:	e0e3      	b.n	800192a <ADC_CAL_init+0x3a2>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001762:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001764:	f002 fdfc 	bl	8004360 <HAL_ADC_GetValue>
 8001768:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 800176a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800176c:	f002 fc38 	bl	8003fe0 <HAL_ADC_Stop>
 8001770:	4603      	mov	r3, r0
 8001772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001776:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <ADC_CAL_init+0x1fc>
 800177e:	f06f 0305 	mvn.w	r3, #5
 8001782:	e0d2      	b.n	800192a <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_3;
 8001784:	4b6d      	ldr	r3, [pc, #436]	; (800193c <ADC_CAL_init+0x3b4>)
 8001786:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001790:	f003 f822 	bl	80047d8 <HAL_ADC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800179a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <ADC_CAL_init+0x220>
 80017a2:	f06f 0302 	mvn.w	r3, #2
 80017a6:	e0c0      	b.n	800192a <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 80017a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017aa:	f002 fb5d 	bl	8003e68 <HAL_ADC_Start>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80017b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <ADC_CAL_init+0x23a>
 80017bc:	f06f 0302 	mvn.w	r3, #2
 80017c0:	e0b3      	b.n	800192a <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 80017c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017c8:	f002 fc3e 	bl	8004048 <HAL_ADC_PollForConversion>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80017d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d102      	bne.n	80017e0 <ADC_CAL_init+0x258>
 80017da:	f06f 0303 	mvn.w	r3, #3
 80017de:	e0a4      	b.n	800192a <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80017e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <ADC_CAL_init+0x266>
 80017e8:	f06f 0304 	mvn.w	r3, #4
 80017ec:	e09d      	b.n	800192a <ADC_CAL_init+0x3a2>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80017ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f0:	f002 fdb6 	bl	8004360 <HAL_ADC_GetValue>
 80017f4:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80017f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f8:	f002 fbf2 	bl	8003fe0 <HAL_ADC_Stop>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001802:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <ADC_CAL_init+0x288>
 800180a:	f06f 0305 	mvn.w	r3, #5
 800180e:	e08c      	b.n	800192a <ADC_CAL_init+0x3a2>
		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <ADC_CAL_init+0x3b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800181c:	fb02 f303 	mul.w	r3, r2, r3
 8001820:	461a      	mov	r2, r3
 8001822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b45      	ldr	r3, [pc, #276]	; (8001944 <ADC_CAL_init+0x3bc>)
 800182e:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <ADC_CAL_init+0x3bc>)
 8001836:	8812      	ldrh	r2, [r2, #0]
 8001838:	b212      	sxth	r2, r2
 800183a:	fb03 f202 	mul.w	r2, r3, r2
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <ADC_CAL_init+0x3c0>)
 8001840:	fba3 1302 	umull	r1, r3, r3, r2
 8001844:	1ad2      	subs	r2, r2, r3
 8001846:	0852      	lsrs	r2, r2, #1
 8001848:	4413      	add	r3, r2
 800184a:	0adb      	lsrs	r3, r3, #11
 800184c:	461a      	mov	r2, r3
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	011a      	lsls	r2, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	4a3c      	ldr	r2, [pc, #240]	; (800194c <ADC_CAL_init+0x3c4>)
 800185a:	fb82 1203 	smull	r1, r2, r2, r3
 800185e:	1152      	asrs	r2, r2, #5
 8001860:	17db      	asrs	r3, r3, #31
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	4413      	add	r3, r2
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	4a35      	ldr	r2, [pc, #212]	; (8001944 <ADC_CAL_init+0x3bc>)
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	b212      	sxth	r2, r2
 8001874:	fb03 f202 	mul.w	r2, r3, r2
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <ADC_CAL_init+0x3c0>)
 800187a:	fba3 1302 	umull	r1, r3, r3, r2
 800187e:	1ad2      	subs	r2, r2, r3
 8001880:	0852      	lsrs	r2, r2, #1
 8001882:	4413      	add	r3, r2
 8001884:	0adb      	lsrs	r3, r3, #11
 8001886:	461a      	mov	r2, r3
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	011a      	lsls	r2, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	4a2e      	ldr	r2, [pc, #184]	; (800194c <ADC_CAL_init+0x3c4>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1152      	asrs	r2, r2, #5
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad2      	subs	r2, r2, r3
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	4413      	add	r3, r2
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 80018a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <ADC_CAL_init+0x3bc>)
 80018aa:	8812      	ldrh	r2, [r2, #0]
 80018ac:	b212      	sxth	r2, r2
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <ADC_CAL_init+0x3c0>)
 80018b4:	fba3 1302 	umull	r1, r3, r3, r2
 80018b8:	1ad2      	subs	r2, r2, r3
 80018ba:	0852      	lsrs	r2, r2, #1
 80018bc:	4413      	add	r3, r2
 80018be:	0adb      	lsrs	r3, r3, #11
 80018c0:	461a      	mov	r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	011a      	lsls	r2, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	4a1f      	ldr	r2, [pc, #124]	; (800194c <ADC_CAL_init+0x3c4>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad2      	subs	r2, r2, r3
 80018d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018da:	4413      	add	r3, r2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30

		calibrating--;
 80018de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 80018e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d114      	bne.n	800191a <ADC_CAL_init+0x392>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <ADC_CAL_init+0x3c8>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	4a16      	ldr	r2, [pc, #88]	; (8001954 <ADC_CAL_init+0x3cc>)
 80018fc:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <ADC_CAL_init+0x3c8>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <ADC_CAL_init+0x3cc>)
 800190a:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 800190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <ADC_CAL_init+0x3c8>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <ADC_CAL_init+0x3cc>)
 8001918:	6093      	str	r3, [r2, #8]
	while(calibrating){
 800191a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae5e 	bne.w	80015e0 <ADC_CAL_init+0x58>
		}
	}
	return VDDA; //success
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <ADC_CAL_init+0x3bc>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b21b      	sxth	r3, r3
}
 800192a:	4618      	mov	r0, r3
 800192c:	3750      	adds	r7, #80	; 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	04300002 	.word	0x04300002
 8001938:	08600004 	.word	0x08600004
 800193c:	0c900008 	.word	0x0c900008
 8001940:	200000c4 	.word	0x200000c4
 8001944:	200003d0 	.word	0x200003d0
 8001948:	00100101 	.word	0x00100101
 800194c:	51eb851f 	.word	0x51eb851f
 8001950:	10624dd3 	.word	0x10624dd3
 8001954:	200003c4 	.word	0x200003c4

08001958 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 8001960:	4807      	ldr	r0, [pc, #28]	; (8001980 <current_init+0x28>)
 8001962:	f7ff fe11 	bl	8001588 <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <current_init+0x2c>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 800196c:	2208      	movs	r2, #8
 800196e:	4906      	ldr	r1, [pc, #24]	; (8001988 <current_init+0x30>)
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <current_init+0x28>)
 8001972:	f002 fc41 	bl	80041f8 <HAL_ADC_Start_DMA>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000448 	.word	0x20000448
 8001984:	200003d4 	.word	0x200003d4
 8001988:	20000384 	.word	0x20000384

0800198c <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <voltage_temperature_init+0x20>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 800199a:	2208      	movs	r2, #8
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <voltage_temperature_init+0x24>)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <voltage_temperature_init+0x28>)
 80019a0:	f002 fc2a 	bl	80041f8 <HAL_ADC_Start_DMA>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200003e8 	.word	0x200003e8
 80019b0:	200003a4 	.word	0x200003a4
 80019b4:	200004b4 	.word	0x200004b4

080019b8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a78      	ldr	r2, [pc, #480]	; (8001ba4 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	f040 8093 	bne.w	8001af0 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	b21a      	sxth	r2, r3
 80019e8:	4b71      	ldr	r3, [pc, #452]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80019ea:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80019f4:	8812      	ldrh	r2, [r2, #0]
 80019f6:	b212      	sxth	r2, r2
 80019f8:	fb03 f202 	mul.w	r2, r3, r2
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80019fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0852      	lsrs	r2, r2, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	0ada      	lsrs	r2, r3, #11
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	011a      	lsls	r2, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	4a68      	ldr	r2, [pc, #416]	; (8001bb8 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095a      	lsrs	r2, r3, #5
 8001a1c:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	4a64      	ldr	r2, [pc, #400]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001a2e:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	4a5e      	ldr	r2, [pc, #376]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001a38:	8812      	ldrh	r2, [r2, #0]
 8001a3a:	b212      	sxth	r2, r2
 8001a3c:	fb03 f202 	mul.w	r2, r3, r2
 8001a40:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001a42:	fba3 1302 	umull	r1, r3, r3, r2
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	0852      	lsrs	r2, r2, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	0ada      	lsrs	r2, r3, #11
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	011a      	lsls	r2, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	095a      	lsrs	r2, r3, #5
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	4a53      	ldr	r2, [pc, #332]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001a72:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8001a74:	4b4d      	ldr	r3, [pc, #308]	; (8001bac <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	4a4d      	ldr	r2, [pc, #308]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	b212      	sxth	r2, r2
 8001a80:	fb03 f202 	mul.w	r2, r3, r2
 8001a84:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001a86:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8a:	1ad2      	subs	r2, r2, r3
 8001a8c:	0852      	lsrs	r2, r2, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	0ada      	lsrs	r2, r3, #11
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	011a      	lsls	r2, r3, #4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	095a      	lsrs	r2, r3, #5
 8001aa4:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	4a42      	ldr	r2, [pc, #264]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001ab6:	6093      	str	r3, [r2, #8]
		data.Current_DC = (uint32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ac0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ac4:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bfb8      	it	lt
 8001acc:	425b      	neglt	r3, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bfb8      	it	lt
 8001ad8:	425b      	neglt	r3, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	0fda      	lsrs	r2, r3, #31
 8001ade:	4413      	add	r3, r2
 8001ae0:	105b      	asrs	r3, r3, #1
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001ae6:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <HAL_ADC_ConvHalfCpltCallback+0x20c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4834      	ldr	r0, [pc, #208]	; (8001bc0 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8001aee:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d151      	bne.n	8001b9c <HAL_ADC_ConvHalfCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	b212      	sxth	r2, r2
 8001b04:	fb03 f202 	mul.w	r2, r3, r2
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	0852      	lsrs	r2, r2, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	0adb      	lsrs	r3, r3, #11
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001b1a:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001b24:	8812      	ldrh	r2, [r2, #0]
 8001b26:	b212      	sxth	r2, r2
 8001b28:	fb03 f202 	mul.w	r2, r3, r2
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	0852      	lsrs	r2, r2, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	0adb      	lsrs	r3, r3, #11
 8001b3a:	b25a      	sxtb	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001b3e:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001b48:	8812      	ldrh	r2, [r2, #0]
 8001b4a:	b212      	sxth	r2, r2
 8001b4c:	fb03 f202 	mul.w	r2, r3, r2
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8001b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	0852      	lsrs	r2, r2, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001b6a:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8001b74:	8812      	ldrh	r2, [r2, #0]
 8001b76:	b212      	sxth	r2, r2
 8001b78:	fb03 f202 	mul.w	r2, r3, r2
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0bdb      	lsrs	r3, r3, #15
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001b92:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001b9a:	4798      	blx	r3
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000448 	.word	0x20000448
 8001ba8:	200000c4 	.word	0x200000c4
 8001bac:	20000384 	.word	0x20000384
 8001bb0:	200003d0 	.word	0x200003d0
 8001bb4:	00100101 	.word	0x00100101
 8001bb8:	51eb851f 	.word	0x51eb851f
 8001bbc:	200003c4 	.word	0x200003c4
 8001bc0:	200003d8 	.word	0x200003d8
 8001bc4:	200003d4 	.word	0x200003d4
 8001bc8:	200004b4 	.word	0x200004b4
 8001bcc:	200003a4 	.word	0x200003a4
 8001bd0:	200003ec 	.word	0x200003ec
 8001bd4:	ccd99a67 	.word	0xccd99a67
 8001bd8:	200003e8 	.word	0x200003e8

08001bdc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a78      	ldr	r2, [pc, #480]	; (8001dc8 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f040 8093 	bne.w	8001d14 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001c0e:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	4a6f      	ldr	r2, [pc, #444]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001c18:	8812      	ldrh	r2, [r2, #0]
 8001c1a:	b212      	sxth	r2, r2
 8001c1c:	fb03 f202 	mul.w	r2, r3, r2
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001c22:	fba3 1302 	umull	r1, r3, r3, r2
 8001c26:	1ad2      	subs	r2, r2, r3
 8001c28:	0852      	lsrs	r2, r2, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	0ada      	lsrs	r2, r3, #11
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	011a      	lsls	r2, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	4a68      	ldr	r2, [pc, #416]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x200>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	095a      	lsrs	r2, r3, #5
 8001c40:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	4a64      	ldr	r2, [pc, #400]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001c52:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001c5c:	8812      	ldrh	r2, [r2, #0]
 8001c5e:	b212      	sxth	r2, r2
 8001c60:	fb03 f202 	mul.w	r2, r3, r2
 8001c64:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001c66:	fba3 1302 	umull	r1, r3, r3, r2
 8001c6a:	1ad2      	subs	r2, r2, r3
 8001c6c:	0852      	lsrs	r2, r2, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	0ada      	lsrs	r2, r3, #11
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	011a      	lsls	r2, r3, #4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a57      	ldr	r2, [pc, #348]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x200>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095a      	lsrs	r2, r3, #5
 8001c84:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001c96:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	b212      	sxth	r2, r2
 8001ca4:	fb03 f202 	mul.w	r2, r3, r2
 8001ca8:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001caa:	fba3 1302 	umull	r1, r3, r3, r2
 8001cae:	1ad2      	subs	r2, r2, r3
 8001cb0:	0852      	lsrs	r2, r2, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	0ada      	lsrs	r2, r3, #11
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	011a      	lsls	r2, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x200>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	095a      	lsrs	r2, r3, #5
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_ADC_ConvCpltCallback+0x204>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001cda:	6093      	str	r3, [r2, #8]
		data.Current_DC = (uint32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ce4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bfb8      	it	lt
 8001cf0:	425b      	neglt	r3, r3
 8001cf2:	441a      	add	r2, r3
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bfb8      	it	lt
 8001cfc:	425b      	neglt	r3, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	0fda      	lsrs	r2, r3, #31
 8001d02:	4413      	add	r3, r2
 8001d04:	105b      	asrs	r3, r3, #1
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001d0a:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8001d0c:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <HAL_ADC_ConvCpltCallback+0x20c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4834      	ldr	r0, [pc, #208]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x208>)
 8001d12:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a35      	ldr	r2, [pc, #212]	; (8001dec <HAL_ADC_ConvCpltCallback+0x210>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d151      	bne.n	8001dc0 <HAL_ADC_ConvCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x214>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001d24:	8812      	ldrh	r2, [r2, #0]
 8001d26:	b212      	sxth	r2, r2
 8001d28:	fb03 f202 	mul.w	r2, r3, r2
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d32:	1ad2      	subs	r2, r2, r3
 8001d34:	0852      	lsrs	r2, r2, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	0adb      	lsrs	r3, r3, #11
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x218>)
 8001d3e:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x214>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001d48:	8812      	ldrh	r2, [r2, #0]
 8001d4a:	b212      	sxth	r2, r2
 8001d4c:	fb03 f202 	mul.w	r2, r3, r2
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001d52:	fba3 1302 	umull	r1, r3, r3, r2
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	0852      	lsrs	r2, r2, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	0adb      	lsrs	r3, r3, #11
 8001d5e:	b25a      	sxtb	r2, r3
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x218>)
 8001d62:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x214>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001d6c:	8812      	ldrh	r2, [r2, #0]
 8001d6e:	b212      	sxth	r2, r2
 8001d70:	fb03 f202 	mul.w	r2, r3, r2
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001d80:	fba3 1302 	umull	r1, r3, r3, r2
 8001d84:	1ad2      	subs	r2, r2, r3
 8001d86:	0852      	lsrs	r2, r2, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	0adb      	lsrs	r3, r3, #11
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x218>)
 8001d8e:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x214>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	fb03 f202 	mul.w	r2, r3, r2
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_ADC_ConvCpltCallback+0x21c>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	0bdb      	lsrs	r3, r3, #15
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x218>)
 8001db6:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_ADC_ConvCpltCallback+0x220>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x218>)
 8001dbe:	4798      	blx	r3
	}

}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000448 	.word	0x20000448
 8001dcc:	200000c4 	.word	0x200000c4
 8001dd0:	20000384 	.word	0x20000384
 8001dd4:	200003d0 	.word	0x200003d0
 8001dd8:	00100101 	.word	0x00100101
 8001ddc:	51eb851f 	.word	0x51eb851f
 8001de0:	200003c4 	.word	0x200003c4
 8001de4:	200003d8 	.word	0x200003d8
 8001de8:	200003d4 	.word	0x200003d4
 8001dec:	200004b4 	.word	0x200004b4
 8001df0:	200003a4 	.word	0x200003a4
 8001df4:	200003ec 	.word	0x200003ec
 8001df8:	ccd99a67 	.word	0xccd99a67
 8001dfc:	200003e8 	.word	0x200003e8

08001e00 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f004 fbd7 	bl	80065bc <HAL_FDCAN_Start>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e00a      	b.n	8001e2e <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f004 fd13 	bl	8006848 <HAL_FDCAN_ActivateNotification>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <FDCAN_addCallback+0x70>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d901      	bls.n	8001e50 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e025      	b.n	8001e9c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	e00c      	b.n	8001e70 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <FDCAN_addCallback+0x74>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d101      	bne.n	8001e6a <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e018      	b.n	8001e9c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <FDCAN_addCallback+0x70>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3ed      	bcc.n	8001e56 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <FDCAN_addCallback+0x70>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	490a      	ldr	r1, [pc, #40]	; (8001eac <FDCAN_addCallback+0x74>)
 8001e82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <FDCAN_addCallback+0x74>)
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <FDCAN_addCallback+0x70>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <FDCAN_addCallback+0x70>)
 8001e98:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	; 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20000444 	.word	0x20000444
 8001eac:	200003f4 	.word	0x200003f4

08001eb0 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	; 0x38
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8001ec0:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8001ec4:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001ed2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8001ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4619      	mov	r1, r3
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f004 fb8c 	bl	800660c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3738      	adds	r7, #56	; 0x38
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	; 0x78
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f004 fbb9 	bl	8006694 <HAL_FDCAN_GetRxMessage>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8001f28:	f000 fd5a 	bl	80029e0 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8001f30:	e012      	b.n	8001f58 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d107      	bne.n	8001f52 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f54:	3301      	adds	r3, #1
 8001f56:	677b      	str	r3, [r7, #116]	; 0x74
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3e7      	bcc.n	8001f32 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	3778      	adds	r7, #120	; 0x78
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200003f4 	.word	0x200003f4
 8001f70:	20000444 	.word	0x20000444

08001f74 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	; 0x30
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f009 fc4f 	bl	800b830 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f92:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001f94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001f9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fa2:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa8:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fe6:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <MX_ADC1_Init+0x154>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002000:	220c      	movs	r2, #12
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002006:	2200      	movs	r2, #0
 8002008:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_ADC1_Init+0x154>)
 800200c:	2200      	movs	r2, #0
 800200e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002012:	2201      	movs	r2, #1
 8002014:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002016:	482c      	ldr	r0, [pc, #176]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002018:	f001 fd9c 	bl	8003b54 <HAL_ADC_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002022:	f000 fcdd 	bl	80029e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	4619      	mov	r1, r3
 8002030:	4825      	ldr	r0, [pc, #148]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002032:	f003 fab9 	bl	80055a8 <HAL_ADCEx_MultiModeConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800203c:	f000 fcd0 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <MX_ADC1_Init+0x158>)
 8002042:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002044:	2306      	movs	r3, #6
 8002046:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002048:	2303      	movs	r3, #3
 800204a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800204c:	237f      	movs	r3, #127	; 0x7f
 800204e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002050:	2304      	movs	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	481a      	ldr	r0, [pc, #104]	; (80020c8 <MX_ADC1_Init+0x154>)
 800205e:	f002 fbbb 	bl	80047d8 <HAL_ADC_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002068:	f000 fcba 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_ADC1_Init+0x15c>)
 800206e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002070:	230c      	movs	r3, #12
 8002072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4813      	ldr	r0, [pc, #76]	; (80020c8 <MX_ADC1_Init+0x154>)
 800207a:	f002 fbad 	bl	80047d8 <HAL_ADC_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002084:	f000 fcac 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_ADC1_Init+0x160>)
 800208a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800208c:	2312      	movs	r3, #18
 800208e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <MX_ADC1_Init+0x154>)
 8002096:	f002 fb9f 	bl	80047d8 <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80020a0:	f000 fc9e 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_ADC1_Init+0x164>)
 80020a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80020a8:	2318      	movs	r3, #24
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_ADC1_Init+0x154>)
 80020b2:	f002 fb91 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80020bc:	f000 fc90 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000448 	.word	0x20000448
 80020cc:	04300002 	.word	0x04300002
 80020d0:	08600004 	.word	0x08600004
 80020d4:	0c900008 	.word	0x0c900008
 80020d8:	cb840000 	.word	0xcb840000

080020dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020e2:	463b      	mov	r3, r7
 80020e4:	2220      	movs	r2, #32
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 fba1 	bl	800b830 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <MX_ADC2_Init+0x130>)
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <MX_ADC2_Init+0x134>)
 80020f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020f4:	4b45      	ldr	r3, [pc, #276]	; (800220c <MX_ADC2_Init+0x130>)
 80020f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <MX_ADC2_Init+0x130>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002102:	4b42      	ldr	r3, [pc, #264]	; (800220c <MX_ADC2_Init+0x130>)
 8002104:	2200      	movs	r2, #0
 8002106:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002108:	4b40      	ldr	r3, [pc, #256]	; (800220c <MX_ADC2_Init+0x130>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800210e:	4b3f      	ldr	r3, [pc, #252]	; (800220c <MX_ADC2_Init+0x130>)
 8002110:	2201      	movs	r2, #1
 8002112:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <MX_ADC2_Init+0x130>)
 8002116:	2204      	movs	r2, #4
 8002118:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800211a:	4b3c      	ldr	r3, [pc, #240]	; (800220c <MX_ADC2_Init+0x130>)
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <MX_ADC2_Init+0x130>)
 8002122:	2201      	movs	r2, #1
 8002124:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <MX_ADC2_Init+0x130>)
 8002128:	2204      	movs	r2, #4
 800212a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <MX_ADC2_Init+0x130>)
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <MX_ADC2_Init+0x130>)
 8002136:	2200      	movs	r2, #0
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <MX_ADC2_Init+0x130>)
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <MX_ADC2_Init+0x130>)
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <MX_ADC2_Init+0x130>)
 800214a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <MX_ADC2_Init+0x130>)
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <MX_ADC2_Init+0x130>)
 800215a:	220c      	movs	r2, #12
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <MX_ADC2_Init+0x130>)
 8002160:	2200      	movs	r2, #0
 8002162:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <MX_ADC2_Init+0x130>)
 8002166:	2200      	movs	r2, #0
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800216a:	4b28      	ldr	r3, [pc, #160]	; (800220c <MX_ADC2_Init+0x130>)
 800216c:	2201      	movs	r2, #1
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002170:	4826      	ldr	r0, [pc, #152]	; (800220c <MX_ADC2_Init+0x130>)
 8002172:	f001 fcef 	bl	8003b54 <HAL_ADC_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 800217c:	f000 fc30 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <MX_ADC2_Init+0x138>)
 8002182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002184:	2306      	movs	r3, #6
 8002186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002188:	2307      	movs	r3, #7
 800218a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800218c:	237f      	movs	r3, #127	; 0x7f
 800218e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002190:	2304      	movs	r3, #4
 8002192:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <MX_ADC2_Init+0x130>)
 800219e:	f002 fb1b 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80021a8:	f000 fc1a 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_ADC2_Init+0x13c>)
 80021ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021b0:	230c      	movs	r3, #12
 80021b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	4619      	mov	r1, r3
 80021bc:	4813      	ldr	r0, [pc, #76]	; (800220c <MX_ADC2_Init+0x130>)
 80021be:	f002 fb0b 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80021c8:	f000 fc0a 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <MX_ADC2_Init+0x140>)
 80021ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021d0:	2312      	movs	r3, #18
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <MX_ADC2_Init+0x130>)
 80021da:	f002 fafd 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 80021e4:	f000 fbfc 	bl	80029e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <MX_ADC2_Init+0x144>)
 80021ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80021ec:	2318      	movs	r3, #24
 80021ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021f0:	463b      	mov	r3, r7
 80021f2:	4619      	mov	r1, r3
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_ADC2_Init+0x130>)
 80021f6:	f002 faef 	bl	80047d8 <HAL_ADC_ConfigChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8002200:	f000 fbee 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200004b4 	.word	0x200004b4
 8002210:	50000100 	.word	0x50000100
 8002214:	32601000 	.word	0x32601000
 8002218:	3ac04000 	.word	0x3ac04000
 800221c:	36902000 	.word	0x36902000
 8002220:	0c900008 	.word	0x0c900008

08002224 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b09e      	sub	sp, #120	; 0x78
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	2244      	movs	r2, #68	; 0x44
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f009 faf3 	bl	800b830 <memset>
  if(adcHandle->Instance==ADC1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002252:	d171      	bne.n	8002338 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800225a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800225e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fe27 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002270:	f000 fbb6 	bl	80029e0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002274:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	4a79      	ldr	r2, [pc, #484]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 800227c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800227e:	4b78      	ldr	r3, [pc, #480]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10b      	bne.n	800229e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002286:	4b77      	ldr	r3, [pc, #476]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a76      	ldr	r2, [pc, #472]	; (8002464 <HAL_ADC_MspInit+0x240>)
 800228c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b74      	ldr	r3, [pc, #464]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b71      	ldr	r3, [pc, #452]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a70      	ldr	r2, [pc, #448]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b6e      	ldr	r3, [pc, #440]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80022b6:	2307      	movs	r3, #7
 80022b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ba:	2303      	movs	r3, #3
 80022bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f004 fe16 	bl	8006efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022d0:	4b65      	ldr	r3, [pc, #404]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022d2:	4a66      	ldr	r2, [pc, #408]	; (800246c <HAL_ADC_MspInit+0x248>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022d6:	4b64      	ldr	r3, [pc, #400]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022d8:	2205      	movs	r2, #5
 80022da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022dc:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f6:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <HAL_ADC_MspInit+0x244>)
 80022f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022fe:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_ADC_MspInit+0x244>)
 8002300:	2220      	movs	r2, #32
 8002302:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002304:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_ADC_MspInit+0x244>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800230a:	4857      	ldr	r0, [pc, #348]	; (8002468 <HAL_ADC_MspInit+0x244>)
 800230c:	f003 fcca 	bl	8005ca4 <HAL_DMA_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002316:	f000 fb63 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_ADC_MspInit+0x244>)
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_ADC_MspInit+0x244>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2012      	movs	r0, #18
 800232c:	f003 fabb 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002330:	2012      	movs	r0, #18
 8002332:	f003 fad2 	bl	80058da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002336:	e08f      	b.n	8002458 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a4c      	ldr	r2, [pc, #304]	; (8002470 <HAL_ADC_MspInit+0x24c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	f040 808a 	bne.w	8002458 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002348:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800234a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800234e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	4618      	mov	r0, r3
 8002356:	f005 fdaf 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002360:	f000 fb3e 	bl	80029e0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002364:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 800236c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <HAL_ADC_MspInit+0x23c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10b      	bne.n	800238e <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a3a      	ldr	r2, [pc, #232]	; (8002464 <HAL_ADC_MspInit+0x240>)
 800237c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_ADC_MspInit+0x240>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <HAL_ADC_MspInit+0x240>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_ADC_MspInit+0x240>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80023be:	2360      	movs	r3, #96	; 0x60
 80023c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c2:	2303      	movs	r3, #3
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023ce:	4619      	mov	r1, r3
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f004 fd92 	bl	8006efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80023d8:	f640 0304 	movw	r3, #2052	; 0x804
 80023dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023de:	2303      	movs	r3, #3
 80023e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023ea:	4619      	mov	r1, r3
 80023ec:	4821      	ldr	r0, [pc, #132]	; (8002474 <HAL_ADC_MspInit+0x250>)
 80023ee:	f004 fd85 	bl	8006efc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_ADC_MspInit+0x254>)
 80023f4:	4a21      	ldr	r2, [pc, #132]	; (800247c <HAL_ADC_MspInit+0x258>)
 80023f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80023f8:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <HAL_ADC_MspInit+0x254>)
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_ADC_MspInit+0x254>)
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_ADC_MspInit+0x254>)
 800241a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800241e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002422:	2220      	movs	r2, #32
 8002424:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800242c:	4812      	ldr	r0, [pc, #72]	; (8002478 <HAL_ADC_MspInit+0x254>)
 800242e:	f003 fc39 	bl	8005ca4 <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002438:	f000 fad2 	bl	80029e0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_ADC_MspInit+0x254>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2012      	movs	r0, #18
 800244e:	f003 fa2a 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002452:	2012      	movs	r0, #18
 8002454:	f003 fa41 	bl	80058da <HAL_NVIC_EnableIRQ>
}
 8002458:	bf00      	nop
 800245a:	3778      	adds	r7, #120	; 0x78
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200005e0 	.word	0x200005e0
 8002464:	40021000 	.word	0x40021000
 8002468:	20000520 	.word	0x20000520
 800246c:	40020008 	.word	0x40020008
 8002470:	50000100 	.word	0x50000100
 8002474:	48000400 	.word	0x48000400
 8002478:	20000580 	.word	0x20000580
 800247c:	4002001c 	.word	0x4002001c

08002480 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2230      	movs	r2, #48	; 0x30
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f009 f9cf 	bl	800b830 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_DAC1_Init+0x6c>)
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <MX_DAC1_Init+0x70>)
 8002496:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002498:	4814      	ldr	r0, [pc, #80]	; (80024ec <MX_DAC1_Init+0x6c>)
 800249a:	f003 fa38 	bl	800590e <HAL_DAC_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80024a4:	f000 fa9c 	bl	80029e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_DAC1_Init+0x6c>)
 80024d4:	f003 fa3e 	bl	8005954 <HAL_DAC_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80024de:	f000 fa7f 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3730      	adds	r7, #48	; 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200005e4 	.word	0x200005e4
 80024f0:	50000800 	.word	0x50000800

080024f4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <HAL_DAC_MspInit+0x74>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d124      	bne.n	8002560 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_DAC_MspInit+0x78>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_DAC_MspInit+0x78>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002546:	2310      	movs	r3, #16
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254a:	2303      	movs	r3, #3
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f004 fcce 	bl	8006efc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	50000800 	.word	0x50000800
 800256c:	40021000 	.word	0x40021000

08002570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002576:	4b30      	ldr	r3, [pc, #192]	; (8002638 <MX_DMA_Init+0xc8>)
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <MX_DMA_Init+0xc8>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6493      	str	r3, [r2, #72]	; 0x48
 8002582:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <MX_DMA_Init+0xc8>)
 8002584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <MX_DMA_Init+0xc8>)
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	4a29      	ldr	r2, [pc, #164]	; (8002638 <MX_DMA_Init+0xc8>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6493      	str	r3, [r2, #72]	; 0x48
 800259a:	4b27      	ldr	r3, [pc, #156]	; (8002638 <MX_DMA_Init+0xc8>)
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <MX_DMA_Init+0xc8>)
 80025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025aa:	4a23      	ldr	r2, [pc, #140]	; (8002638 <MX_DMA_Init+0xc8>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6493      	str	r3, [r2, #72]	; 0x48
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <MX_DMA_Init+0xc8>)
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	200b      	movs	r0, #11
 80025c4:	f003 f96f 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025c8:	200b      	movs	r0, #11
 80025ca:	f003 f986 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	200c      	movs	r0, #12
 80025d4:	f003 f967 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80025d8:	200c      	movs	r0, #12
 80025da:	f003 f97e 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	200d      	movs	r0, #13
 80025e4:	f003 f95f 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025e8:	200d      	movs	r0, #13
 80025ea:	f003 f976 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	200e      	movs	r0, #14
 80025f4:	f003 f957 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025f8:	200e      	movs	r0, #14
 80025fa:	f003 f96e 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2038      	movs	r0, #56	; 0x38
 8002604:	f003 f94f 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002608:	2038      	movs	r0, #56	; 0x38
 800260a:	f003 f966 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	2039      	movs	r0, #57	; 0x39
 8002614:	f003 f947 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002618:	2039      	movs	r0, #57	; 0x39
 800261a:	f003 f95e 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	203a      	movs	r0, #58	; 0x3a
 8002624:	f003 f93f 	bl	80058a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002628:	203a      	movs	r0, #58	; 0x3a
 800262a:	f003 f956 	bl	80058da <HAL_NVIC_EnableIRQ>

}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002640:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002642:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <MX_FDCAN1_Init+0x8c>)
 8002644:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002646:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800264e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002652:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800265c:	2200      	movs	r2, #0
 800265e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002660:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002662:	2200      	movs	r2, #0
 8002664:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002668:	2200      	movs	r2, #0
 800266a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002674:	220d      	movs	r2, #13
 8002676:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800267a:	2256      	movs	r2, #86	; 0x56
 800267c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002680:	220d      	movs	r2, #13
 8002682:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002686:	2219      	movs	r2, #25
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800268c:	2201      	movs	r2, #1
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002692:	2202      	movs	r2, #2
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 8002698:	2201      	movs	r2, #1
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 800269e:	2200      	movs	r2, #0
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_FDCAN1_Init+0x88>)
 80026b0:	f003 fe2a 	bl	8006308 <HAL_FDCAN_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80026ba:	f000 f991 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200005f8 	.word	0x200005f8
 80026c8:	40006400 	.word	0x40006400

080026cc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b09a      	sub	sp, #104	; 0x68
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	2244      	movs	r2, #68	; 0x44
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f009 f89f 	bl	800b830 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_FDCAN_MspInit+0xbc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d141      	bne.n	8002780 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4618      	mov	r0, r3
 800270e:	f005 fbd3 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002718:	f000 f962 	bl	80029e0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 8002722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_FDCAN_MspInit+0xc0>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800274c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800275e:	2309      	movs	r3, #9
 8002760:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002766:	4619      	mov	r1, r3
 8002768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276c:	f004 fbc6 	bl	8006efc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	2015      	movs	r0, #21
 8002776:	f003 f896 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800277a:	2015      	movs	r0, #21
 800277c:	f003 f8ad 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002780:	bf00      	nop
 8002782:	3768      	adds	r7, #104	; 0x68
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40006400 	.word	0x40006400
 800278c:	40021000 	.word	0x40021000

08002790 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	4a50      	ldr	r2, [pc, #320]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027ac:	f043 0320 	orr.w	r3, r3, #32
 80027b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b2:	4b4e      	ldr	r3, [pc, #312]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ca:	4b48      	ldr	r3, [pc, #288]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a44      	ldr	r2, [pc, #272]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e2:	4b42      	ldr	r3, [pc, #264]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a3e      	ldr	r2, [pc, #248]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b3c      	ldr	r3, [pc, #240]	; (80028ec <MX_GPIO_Init+0x15c>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <MX_GPIO_Init+0x15c>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <MX_GPIO_Init+0x15c>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <MX_GPIO_Init+0x15c>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	21c0      	movs	r1, #192	; 0xc0
 8002822:	4833      	ldr	r0, [pc, #204]	; (80028f0 <MX_GPIO_Init+0x160>)
 8002824:	f004 fcec 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f004 fce5 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002836:	2200      	movs	r2, #0
 8002838:	2104      	movs	r1, #4
 800283a:	482e      	ldr	r0, [pc, #184]	; (80028f4 <MX_GPIO_Init+0x164>)
 800283c:	f004 fce0 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	482c      	ldr	r0, [pc, #176]	; (80028f8 <MX_GPIO_Init+0x168>)
 8002846:	f004 fcdb 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 800284a:	23c0      	movs	r3, #192	; 0xc0
 800284c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4823      	ldr	r0, [pc, #140]	; (80028f0 <MX_GPIO_Init+0x160>)
 8002862:	f004 fb4b 	bl	8006efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002886:	f004 fb39 	bl	8006efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 800288a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002890:	2301      	movs	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f004 fb29 	bl	8006efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 80028aa:	2304      	movs	r3, #4
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <MX_GPIO_Init+0x164>)
 80028c2:	f004 fb1b 	bl	8006efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 80028c6:	2340      	movs	r3, #64	; 0x40
 80028c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	4806      	ldr	r0, [pc, #24]	; (80028f8 <MX_GPIO_Init+0x168>)
 80028de:	f004 fb0d 	bl	8006efc <HAL_GPIO_Init>

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	; 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000800 	.word	0x48000800
 80028f4:	48000c00 	.word	0x48000c00
 80028f8:	48000400 	.word	0x48000400

080028fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002900:	f000 fe03 	bl	800350a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002904:	f000 f819 	bl	800293a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002908:	f7ff ff42 	bl	8002790 <MX_GPIO_Init>
  MX_DMA_Init();
 800290c:	f7ff fe30 	bl	8002570 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002910:	f7ff fe94 	bl	800263c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002914:	f000 f86a 	bl	80029ec <MX_SPI1_Init>
  MX_SPI3_Init();
 8002918:	f000 f8a6 	bl	8002a68 <MX_SPI3_Init>
  MX_TIM1_Init();
 800291c:	f000 fb3a 	bl	8002f94 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002920:	f7ff fb28 	bl	8001f74 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002924:	f7ff fbda 	bl	80020dc <MX_ADC2_Init>
  MX_DAC1_Init();
 8002928:	f7ff fdaa 	bl	8002480 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800292c:	f000 fcea 	bl	8003304 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002930:	f000 fbf8 	bl	8003124 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8002934:	f7fd fee6 	bl	8000704 <BLDC_main>
 8002938:	e7fc      	b.n	8002934 <main+0x38>

0800293a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b094      	sub	sp, #80	; 0x50
 800293e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	2238      	movs	r2, #56	; 0x38
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f008 ff71 	bl	800b830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800295c:	2000      	movs	r0, #0
 800295e:	f004 fc81 	bl	8007264 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800296c:	2340      	movs	r3, #64	; 0x40
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002970:	2302      	movs	r3, #2
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002974:	2302      	movs	r3, #2
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002978:	2304      	movs	r3, #4
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800297c:	2350      	movs	r3, #80	; 0x50
 800297e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002980:	2302      	movs	r3, #2
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002984:	2308      	movs	r3, #8
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002988:	2302      	movs	r3, #2
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	4618      	mov	r0, r3
 8002992:	f004 fd1b 	bl	80073cc <HAL_RCC_OscConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800299c:	f000 f820 	bl	80029e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a0:	230f      	movs	r3, #15
 80029a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a4:	2303      	movs	r3, #3
 80029a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	2104      	movs	r1, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f005 f81f 	bl	80079fc <HAL_RCC_ClockConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029c4:	f000 f80c 	bl	80029e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 80029c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029cc:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80029d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029d4:	f005 f94e 	bl	8007c74 <HAL_RCC_MCOConfig>
}
 80029d8:	bf00      	nop
 80029da:	3750      	adds	r7, #80	; 0x50
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e4:	b672      	cpsid	i
}
 80029e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <Error_Handler+0x8>
	...

080029ec <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <MX_SPI1_Init+0x74>)
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <MX_SPI1_Init+0x78>)
 80029f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_SPI1_Init+0x74>)
 80029f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a22:	2220      	movs	r2, #32
 8002a24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a46:	2208      	movs	r2, #8
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_SPI1_Init+0x74>)
 8002a4c:	f005 fc24 	bl	8008298 <HAL_SPI_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a56:	f7ff ffc3 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000065c 	.word	0x2000065c
 8002a64:	40013000 	.word	0x40013000

08002a68 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <MX_SPI3_Init+0x78>)
 8002a70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MX_SPI3_Init+0x74>)
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_SPI3_Init+0x74>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_SPI3_Init+0x74>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_SPI3_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_SPI3_Init+0x74>)
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <MX_SPI3_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_SPI3_Init+0x74>)
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_SPI3_Init+0x74>)
 8002ac8:	f005 fbe6 	bl	8008298 <HAL_SPI_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002ad2:	f7ff ff85 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200006c0 	.word	0x200006c0
 8002ae0:	40003c00 	.word	0x40003c00

08002ae4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 031c 	add.w	r3, r7, #28
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a89      	ldr	r2, [pc, #548]	; (8002d28 <HAL_SPI_MspInit+0x244>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	f040 8083 	bne.w	8002c0e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b08:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b12:	6613      	str	r3, [r2, #96]	; 0x60
 8002b14:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4a81      	ldr	r2, [pc, #516]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2c:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b38:	2338      	movs	r3, #56	; 0x38
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b48:	2305      	movs	r3, #5
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4877      	ldr	r0, [pc, #476]	; (8002d30 <HAL_SPI_MspInit+0x24c>)
 8002b54:	f004 f9d2 	bl	8006efc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8002b58:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b5a:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_SPI_MspInit+0x254>)
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002b5e:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b60:	220a      	movs	r2, #10
 8002b62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b70:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b76:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b8e:	4869      	ldr	r0, [pc, #420]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002b90:	f003 f888 	bl	8005ca4 <HAL_DMA_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002b9a:	f7ff ff21 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a64      	ldr	r2, [pc, #400]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba4:	4a63      	ldr	r2, [pc, #396]	; (8002d34 <HAL_SPI_MspInit+0x250>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8002baa:	4b64      	ldr	r3, [pc, #400]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bac:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <HAL_SPI_MspInit+0x25c>)
 8002bae:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002bb0:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bb2:	220b      	movs	r2, #11
 8002bb4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bb6:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc2:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc8:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002be0:	4856      	ldr	r0, [pc, #344]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002be2:	f003 f85f 	bl	8005ca4 <HAL_DMA_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002bec:	f7ff fef8 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf6:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_SPI_MspInit+0x258>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2023      	movs	r0, #35	; 0x23
 8002c02:	f002 fe50 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c06:	2023      	movs	r0, #35	; 0x23
 8002c08:	f002 fe67 	bl	80058da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002c0c:	e088      	b.n	8002d20 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4c      	ldr	r2, [pc, #304]	; (8002d44 <HAL_SPI_MspInit+0x260>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	f040 8083 	bne.w	8002d20 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4a43      	ldr	r2, [pc, #268]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	4a3d      	ldr	r2, [pc, #244]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_SPI_MspInit+0x248>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c5c:	2306      	movs	r3, #6
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	4619      	mov	r1, r3
 8002c66:	4838      	ldr	r0, [pc, #224]	; (8002d48 <HAL_SPI_MspInit+0x264>)
 8002c68:	f004 f948 	bl	8006efc <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c6e:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_SPI_MspInit+0x26c>)
 8002c70:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c74:	220e      	movs	r2, #14
 8002c76:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002ca2:	482a      	ldr	r0, [pc, #168]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002ca4:	f002 fffe 	bl	8005ca4 <HAL_DMA_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8002cae:	f7ff fe97 	bl	80029e0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_SPI_MspInit+0x268>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8002cbe:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <HAL_SPI_MspInit+0x274>)
 8002cc2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002ccc:	2210      	movs	r2, #16
 8002cce:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd0:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002cf4:	4817      	ldr	r0, [pc, #92]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002cf6:	f002 ffd5 	bl	8005ca4 <HAL_DMA_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8002d00:	f7ff fe6e 	bl	80029e0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_SPI_MspInit+0x270>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	2033      	movs	r0, #51	; 0x33
 8002d16:	f002 fdc6 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002d1a:	2033      	movs	r0, #51	; 0x33
 8002d1c:	f002 fddd 	bl	80058da <HAL_NVIC_EnableIRQ>
}
 8002d20:	bf00      	nop
 8002d22:	3730      	adds	r7, #48	; 0x30
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40013000 	.word	0x40013000
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400
 8002d34:	20000724 	.word	0x20000724
 8002d38:	40020030 	.word	0x40020030
 8002d3c:	20000784 	.word	0x20000784
 8002d40:	40020044 	.word	0x40020044
 8002d44:	40003c00 	.word	0x40003c00
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	200007e4 	.word	0x200007e4
 8002d50:	40020408 	.word	0x40020408
 8002d54:	20000844 	.word	0x20000844
 8002d58:	4002041c 	.word	0x4002041c

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_MspInit+0x44>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <HAL_MspInit+0x44>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_MspInit+0x44>)
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_MspInit+0x44>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_MspInit+0x44>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_MspInit+0x44>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d92:	f004 fb0b 	bl	80073ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <NMI_Handler+0x4>

08002daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <MemManage_Handler+0x4>

08002db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <BusFault_Handler+0x4>

08002dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <UsageFault_Handler+0x4>

08002dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df0:	f000 fbde 	bl	80035b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <DMA1_Channel1_IRQHandler+0x10>)
 8002dfe:	f003 f934 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000520 	.word	0x20000520

08002e0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <DMA1_Channel2_IRQHandler+0x10>)
 8002e12:	f003 f92a 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000580 	.word	0x20000580

08002e20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <DMA1_Channel3_IRQHandler+0x10>)
 8002e26:	f003 f920 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000724 	.word	0x20000724

08002e34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <DMA1_Channel4_IRQHandler+0x10>)
 8002e3a:	f003 f916 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000784 	.word	0x20000784

08002e48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <ADC1_2_IRQHandler+0x14>)
 8002e4e:	f001 fa95 	bl	800437c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e52:	4803      	ldr	r0, [pc, #12]	; (8002e60 <ADC1_2_IRQHandler+0x18>)
 8002e54:	f001 fa92 	bl	800437c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000448 	.word	0x20000448
 8002e60:	200004b4 	.word	0x200004b4

08002e64 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <FDCAN1_IT0_IRQHandler+0x10>)
 8002e6a:	f003 fdd3 	bl	8006a14 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200005f8 	.word	0x200005f8

08002e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <TIM3_IRQHandler+0x10>)
 8002e7e:	f005 feab 	bl	8008bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200008f4 	.word	0x200008f4

08002e8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <SPI1_IRQHandler+0x10>)
 8002e92:	f005 faad 	bl	80083f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000065c 	.word	0x2000065c

08002ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <USART1_IRQHandler+0x10>)
 8002ea6:	f007 fa21 	bl	800a2ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000940 	.word	0x20000940

08002eb4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <SPI3_IRQHandler+0x10>)
 8002eba:	f005 fa99 	bl	80083f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200006c0 	.word	0x200006c0

08002ec8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <DMA2_Channel1_IRQHandler+0x10>)
 8002ece:	f003 f8cc 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200007e4 	.word	0x200007e4

08002edc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <DMA2_Channel2_IRQHandler+0x10>)
 8002ee2:	f003 f8c2 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000844 	.word	0x20000844

08002ef0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <DMA2_Channel3_IRQHandler+0x10>)
 8002ef6:	f003 f8b8 	bl	800606a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200009d0 	.word	0x200009d0

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f008 fc84 	bl	800b840 <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20008000 	.word	0x20008000
 8002f64:	00000400 	.word	0x00000400
 8002f68:	200008a4 	.word	0x200008a4
 8002f6c:	20000b80 	.word	0x20000b80

08002f70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SystemInit+0x20>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SystemInit+0x20>)
 8002f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b09c      	sub	sp, #112	; 0x70
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
 8002fc4:	615a      	str	r2, [r3, #20]
 8002fc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2234      	movs	r2, #52	; 0x34
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f008 fc2e 	bl	800b830 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fd4:	4b51      	ldr	r3, [pc, #324]	; (800311c <MX_TIM1_Init+0x188>)
 8002fd6:	4a52      	ldr	r2, [pc, #328]	; (8003120 <MX_TIM1_Init+0x18c>)
 8002fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fda:	4b50      	ldr	r3, [pc, #320]	; (800311c <MX_TIM1_Init+0x188>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	; (800311c <MX_TIM1_Init+0x188>)
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8002fe6:	4b4d      	ldr	r3, [pc, #308]	; (800311c <MX_TIM1_Init+0x188>)
 8002fe8:	f240 52db 	movw	r2, #1499	; 0x5db
 8002fec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fee:	4b4b      	ldr	r3, [pc, #300]	; (800311c <MX_TIM1_Init+0x188>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ff4:	4b49      	ldr	r3, [pc, #292]	; (800311c <MX_TIM1_Init+0x188>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ffa:	4b48      	ldr	r3, [pc, #288]	; (800311c <MX_TIM1_Init+0x188>)
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003000:	4846      	ldr	r0, [pc, #280]	; (800311c <MX_TIM1_Init+0x188>)
 8003002:	f005 fb08 	bl	8008616 <HAL_TIM_Base_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800300c:	f7ff fce8 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003014:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003016:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800301a:	4619      	mov	r1, r3
 800301c:	483f      	ldr	r0, [pc, #252]	; (800311c <MX_TIM1_Init+0x188>)
 800301e:	f006 f86f 	bl	8009100 <HAL_TIM_ConfigClockSource>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003028:	f7ff fcda 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800302c:	483b      	ldr	r0, [pc, #236]	; (800311c <MX_TIM1_Init+0x188>)
 800302e:	f005 fbdb 	bl	80087e8 <HAL_TIM_PWM_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003038:	f7ff fcd2 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003048:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800304c:	4619      	mov	r1, r3
 800304e:	4833      	ldr	r0, [pc, #204]	; (800311c <MX_TIM1_Init+0x188>)
 8003050:	f006 fedc 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800305a:	f7ff fcc1 	bl	80029e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305e:	2360      	movs	r3, #96	; 0x60
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003066:	2302      	movs	r3, #2
 8003068:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800306a:	2308      	movs	r3, #8
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	4826      	ldr	r0, [pc, #152]	; (800311c <MX_TIM1_Init+0x188>)
 8003084:	f005 ff28 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800308e:	f7ff fca7 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003096:	2204      	movs	r2, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4820      	ldr	r0, [pc, #128]	; (800311c <MX_TIM1_Init+0x188>)
 800309c:	f005 ff1c 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80030a6:	f7ff fc9b 	bl	80029e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030ae:	2208      	movs	r2, #8
 80030b0:	4619      	mov	r1, r3
 80030b2:	481a      	ldr	r0, [pc, #104]	; (800311c <MX_TIM1_Init+0x188>)
 80030b4:	f005 ff10 	bl	8008ed8 <HAL_TIM_PWM_ConfigChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80030be:	f7ff fc8f 	bl	80029e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80030e0:	2300      	movs	r3, #0
 80030e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4807      	ldr	r0, [pc, #28]	; (800311c <MX_TIM1_Init+0x188>)
 8003100:	f006 ff06 	bl	8009f10 <HAL_TIMEx_ConfigBreakDeadTime>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800310a:	f7ff fc69 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800310e:	4803      	ldr	r0, [pc, #12]	; (800311c <MX_TIM1_Init+0x188>)
 8003110:	f000 f890 	bl	8003234 <HAL_TIM_MspPostInit>

}
 8003114:	bf00      	nop
 8003116:	3770      	adds	r7, #112	; 0x70
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200008a8 	.word	0x200008a8
 8003120:	40012c00 	.word	0x40012c00

08003124 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003142:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <MX_TIM3_Init+0x94>)
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <MX_TIM3_Init+0x98>)
 8003146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <MX_TIM3_Init+0x94>)
 800314a:	2204      	movs	r2, #4
 800314c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <MX_TIM3_Init+0x94>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <MX_TIM3_Init+0x94>)
 8003156:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800315a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <MX_TIM3_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <MX_TIM3_Init+0x94>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003168:	4813      	ldr	r0, [pc, #76]	; (80031b8 <MX_TIM3_Init+0x94>)
 800316a:	f005 fa54 	bl	8008616 <HAL_TIM_Base_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003174:	f7ff fc34 	bl	80029e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800317c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	4619      	mov	r1, r3
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <MX_TIM3_Init+0x94>)
 8003186:	f005 ffbb 	bl	8009100 <HAL_TIM_ConfigClockSource>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003190:	f7ff fc26 	bl	80029e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_TIM3_Init+0x94>)
 80031a2:	f006 fe33 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80031ac:	f7ff fc18 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200008f4 	.word	0x200008f4
 80031bc:	40000400 	.word	0x40000400

080031c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <HAL_TIM_Base_MspInit+0x68>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10c      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d6:	4a15      	ldr	r2, [pc, #84]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 80031d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031dc:	6613      	str	r3, [r2, #96]	; 0x60
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80031ea:	e018      	b.n	800321e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_TIM_Base_MspInit+0x70>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_TIM_Base_MspInit+0x6c>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	201d      	movs	r0, #29
 8003214:	f002 fb47 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003218:	201d      	movs	r0, #29
 800321a:	f002 fb5e 	bl	80058da <HAL_NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40000400 	.word	0x40000400

08003234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_TIM_MspPostInit+0xc0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d149      	bne.n	80032ea <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_TIM_MspPostInit+0xc4>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003286:	2307      	movs	r3, #7
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003296:	2302      	movs	r3, #2
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	4619      	mov	r1, r3
 80032a0:	4816      	ldr	r0, [pc, #88]	; (80032fc <HAL_TIM_MspPostInit+0xc8>)
 80032a2:	f003 fe2b 	bl	8006efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80032a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80032aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80032b8:	2306      	movs	r3, #6
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	480f      	ldr	r0, [pc, #60]	; (8003300 <HAL_TIM_MspPostInit+0xcc>)
 80032c4:	f003 fe1a 	bl	8006efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80032da:	2304      	movs	r3, #4
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	4806      	ldr	r0, [pc, #24]	; (8003300 <HAL_TIM_MspPostInit+0xcc>)
 80032e6:	f003 fe09 	bl	8006efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032ea:	bf00      	nop
 80032ec:	3728      	adds	r7, #40	; 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	48000800 	.word	0x48000800
 8003300:	48000400 	.word	0x48000400

08003304 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <MX_USART1_UART_Init+0x90>)
 800330a:	4a23      	ldr	r2, [pc, #140]	; (8003398 <MX_USART1_UART_Init+0x94>)
 800330c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003310:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <MX_USART1_UART_Init+0x90>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_USART1_UART_Init+0x90>)
 800332a:	220c      	movs	r2, #12
 800332c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <MX_USART1_UART_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800334c:	4811      	ldr	r0, [pc, #68]	; (8003394 <MX_USART1_UART_Init+0x90>)
 800334e:	f006 feea 	bl	800a126 <HAL_UART_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003358:	f7ff fb42 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800335c:	2100      	movs	r1, #0
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003360:	f008 f961 	bl	800b626 <HAL_UARTEx_SetTxFifoThreshold>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800336a:	f7ff fb39 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800336e:	2100      	movs	r1, #0
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003372:	f008 f996 	bl	800b6a2 <HAL_UARTEx_SetRxFifoThreshold>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800337c:	f7ff fb30 	bl	80029e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <MX_USART1_UART_Init+0x90>)
 8003382:	f008 f917 	bl	800b5b4 <HAL_UARTEx_DisableFifoMode>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800338c:	f7ff fb28 	bl	80029e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000940 	.word	0x20000940
 8003398:	40013800 	.word	0x40013800

0800339c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b09a      	sub	sp, #104	; 0x68
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033b4:	f107 0310 	add.w	r3, r7, #16
 80033b8:	2244      	movs	r2, #68	; 0x44
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f008 fa37 	bl	800b830 <memset>
  if(uartHandle->Instance==USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <HAL_UART_MspInit+0x108>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d166      	bne.n	800349a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033cc:	2301      	movs	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 fd6d 	bl	8007eb8 <HAL_RCCEx_PeriphCLKConfig>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033e4:	f7ff fafc 	bl	80029e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 80033ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f2:	6613      	str	r3, [r2, #96]	; 0x60
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340c:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_UART_MspInit+0x10c>)
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003418:	2330      	movs	r3, #48	; 0x30
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003428:	2307      	movs	r3, #7
 800342a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003430:	4619      	mov	r1, r3
 8003432:	481e      	ldr	r0, [pc, #120]	; (80034ac <HAL_UART_MspInit+0x110>)
 8003434:	f003 fd62 	bl	8006efc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_UART_MspInit+0x114>)
 800343a:	4a1e      	ldr	r2, [pc, #120]	; (80034b4 <HAL_UART_MspInit+0x118>)
 800343c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800343e:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003440:	2219      	movs	r2, #25
 8003442:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003446:	2210      	movs	r2, #16
 8003448:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_UART_MspInit+0x114>)
 800344c:	2200      	movs	r2, #0
 800344e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003456:	4b16      	ldr	r3, [pc, #88]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003458:	2200      	movs	r2, #0
 800345a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_UART_MspInit+0x114>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003464:	2200      	movs	r2, #0
 8003466:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_UART_MspInit+0x114>)
 800346a:	2200      	movs	r2, #0
 800346c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800346e:	4810      	ldr	r0, [pc, #64]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003470:	f002 fc18 	bl	8005ca4 <HAL_DMA_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800347a:	f7ff fab1 	bl	80029e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003482:	679a      	str	r2, [r3, #120]	; 0x78
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_UART_MspInit+0x114>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2025      	movs	r0, #37	; 0x25
 8003490:	f002 fa09 	bl	80058a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003494:	2025      	movs	r0, #37	; 0x25
 8003496:	f002 fa20 	bl	80058da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800349a:	bf00      	nop
 800349c:	3768      	adds	r7, #104	; 0x68
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40013800 	.word	0x40013800
 80034a8:	40021000 	.word	0x40021000
 80034ac:	48000800 	.word	0x48000800
 80034b0:	200009d0 	.word	0x200009d0
 80034b4:	40020430 	.word	0x40020430

080034b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034bc:	480d      	ldr	r0, [pc, #52]	; (80034f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80034be:	490e      	ldr	r1, [pc, #56]	; (80034f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034c0:	4a0e      	ldr	r2, [pc, #56]	; (80034fc <LoopForever+0xe>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80034c4:	e002      	b.n	80034cc <LoopCopyDataInit>

080034c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ca:	3304      	adds	r3, #4

080034cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d0:	d3f9      	bcc.n	80034c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034d4:	4c0b      	ldr	r4, [pc, #44]	; (8003504 <LoopForever+0x16>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d8:	e001      	b.n	80034de <LoopFillZerobss>

080034da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034dc:	3204      	adds	r2, #4

080034de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e0:	d3fb      	bcc.n	80034da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034e2:	f7ff fd45 	bl	8002f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e6:	f008 f9b1 	bl	800b84c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ea:	f7ff fa07 	bl	80028fc <main>

080034ee <LoopForever>:

LoopForever:
    b LoopForever
 80034ee:	e7fe      	b.n	80034ee <LoopForever>
  ldr   r0, =_estack
 80034f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80034fc:	0800c264 	.word	0x0800c264
  ldr r2, =_sbss
 8003500:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8003504:	20000b7c 	.word	0x20000b7c

08003508 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <COMP1_2_3_IRQHandler>

0800350a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003514:	2003      	movs	r0, #3
 8003516:	f002 f9bb 	bl	8005890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800351a:	200f      	movs	r0, #15
 800351c:	f000 f80e 	bl	800353c <HAL_InitTick>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	e001      	b.n	8003530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800352c:	f7ff fc16 	bl	8002d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003530:	79fb      	ldrb	r3, [r7, #7]

}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_InitTick+0x68>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d022      	beq.n	8003596 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_InitTick+0x6c>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_InitTick+0x68>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800355c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f002 f9c6 	bl	80058f6 <HAL_SYSTICK_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	d809      	bhi.n	800358a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003576:	2200      	movs	r2, #0
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	f002 f992 	bl	80058a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_InitTick+0x70>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e007      	b.n	800359a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e004      	b.n	800359a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e001      	b.n	800359a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200000d0 	.word	0x200000d0
 80035a8:	200000c8 	.word	0x200000c8
 80035ac:	200000cc 	.word	0x200000cc

080035b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_IncTick+0x1c>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_IncTick+0x20>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	4a03      	ldr	r2, [pc, #12]	; (80035cc <HAL_IncTick+0x1c>)
 80035c0:	6013      	str	r3, [r2, #0]
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	20000a30 	.word	0x20000a30
 80035d0:	200000d0 	.word	0x200000d0

080035d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return uwTick;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_GetTick+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000a30 	.word	0x20000a30

080035ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff ffee 	bl	80035d4 <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d004      	beq.n	8003610 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_Delay+0x40>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003610:	bf00      	nop
 8003612:	f7ff ffdf 	bl	80035d4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	429a      	cmp	r2, r3
 8003620:	d8f7      	bhi.n	8003612 <HAL_Delay+0x26>
  {
  }
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200000d0 	.word	0x200000d0

08003630 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3360      	adds	r3, #96	; 0x60
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <LL_ADC_SetOffset+0x44>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	03fff000 	.word	0x03fff000

080036e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3360      	adds	r3, #96	; 0x60
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3360      	adds	r3, #96	; 0x60
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3360      	adds	r3, #96	; 0x60
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3360      	adds	r3, #96	; 0x60
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	431a      	orrs	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	615a      	str	r2, [r3, #20]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b087      	sub	sp, #28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3330      	adds	r3, #48	; 0x30
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	4413      	add	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	211f      	movs	r1, #31
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	401a      	ands	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	f003 011f 	and.w	r1, r3, #31
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	431a      	orrs	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3314      	adds	r3, #20
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	0e5b      	lsrs	r3, r3, #25
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	4413      	add	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	0d1b      	lsrs	r3, r3, #20
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2107      	movs	r1, #7
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	401a      	ands	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	0d1b      	lsrs	r3, r3, #20
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	431a      	orrs	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0f      	ldr	r2, [pc, #60]	; (800391c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10a      	bne.n	80038fa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80038f8:	e00a      	b.n	8003910 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	407f0000 	.word	0x407f0000

08003920 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 031f 	and.w	r3, r3, #31
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003990:	d101      	bne.n	8003996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e0:	d101      	bne.n	80039e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a30:	f043 0202 	orr.w	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <LL_ADC_IsEnabled+0x18>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <LL_ADC_IsEnabled+0x1a>
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_IsDisableOngoing+0x18>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_IsDisableOngoing+0x1a>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003acc:	f043 0210 	orr.w	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d101      	bne.n	8003af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b1a:	f043 0220 	orr.w	r2, r3, #32
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d101      	bne.n	8003b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b089      	sub	sp, #36	; 0x24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e177      	b.n	8003e5e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fe fb51 	bl	8002224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fef1 	bl	800397c <LL_ADC_IsDeepPowerDownEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fed7 	bl	8003958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff0c 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d115      	bne.n	8003be6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fef0 	bl	80039a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc4:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <HAL_ADC_Init+0x2e4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	4a9c      	ldr	r2, [pc, #624]	; (8003e3c <HAL_ADC_Init+0x2e8>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bd8:	e002      	b.n	8003be0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f9      	bne.n	8003bda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff feee 	bl	80039cc <LL_ADC_IsInternalRegulatorEnabled>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff62 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8003c1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 8110 	bne.w	8003e4c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 810c 	bne.w	8003e4c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fefb 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c58:	f7ff fef4 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	4878      	ldr	r0, [pc, #480]	; (8003e40 <HAL_ADC_Init+0x2ec>)
 8003c60:	f7ff fef0 	bl	8003a44 <LL_ADC_IsEnabled>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4323      	orrs	r3, r4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4874      	ldr	r0, [pc, #464]	; (8003e44 <HAL_ADC_Init+0x2f0>)
 8003c74:	f7ff fcdc 	bl	8003630 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7f5b      	ldrb	r3, [r3, #29]
 8003c7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c82:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003c88:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003c8e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d106      	bne.n	8003cb4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	045b      	lsls	r3, r3, #17
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_ADC_Init+0x2f4>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff feee 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8003d04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff0f 	bl	8003b2e <LL_ADC_INJ_IsConversionOngoing>
 8003d10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d16d      	bne.n	8003df4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d16a      	bne.n	8003df4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d2a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3a:	f023 0302 	bic.w	r3, r3, #2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003d5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6911      	ldr	r1, [r2, #16]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003d7e:	e013      	b.n	8003da8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d118      	bne.n	8003de4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	611a      	str	r2, [r3, #16]
 8003de2:	e007      	b.n	8003df4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10c      	bne.n	8003e16 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f023 010f 	bic.w	r1, r3, #15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	1e5a      	subs	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
 8003e14:	e007      	b.n	8003e26 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 020f 	bic.w	r2, r2, #15
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e36:	e011      	b.n	8003e5c <HAL_ADC_Init+0x308>
 8003e38:	200000c8 	.word	0x200000c8
 8003e3c:	053e2d63 	.word	0x053e2d63
 8003e40:	50000100 	.word	0x50000100
 8003e44:	50000300 	.word	0x50000300
 8003e48:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	; 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop

08003e68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e70:	4859      	ldr	r0, [pc, #356]	; (8003fd8 <HAL_ADC_Start+0x170>)
 8003e72:	f7ff fd55 	bl	8003920 <LL_ADC_GetMultimode>
 8003e76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fe2f 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 809f 	bne.w	8003fc8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_Start+0x30>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e09a      	b.n	8003fce <HAL_ADC_Start+0x166>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 f945 	bl	8005130 <ADC_Enable>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 8086 	bne.w	8003fbe <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <HAL_ADC_Start+0x174>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_ADC_Start+0x6e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e001      	b.n	8003eda <HAL_ADC_Start+0x72>
 8003ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d002      	beq.n	8003ee8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d106      	bne.n	8003f10 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f06:	f023 0206 	bic.w	r2, r3, #6
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f0e:	e002      	b.n	8003f16 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	221c      	movs	r2, #28
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <HAL_ADC_Start+0x174>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d002      	beq.n	8003f36 <HAL_ADC_Start+0xce>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e001      	b.n	8003f3a <HAL_ADC_Start+0xd2>
 8003f36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d008      	beq.n	8003f54 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d002      	beq.n	8003f54 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d114      	bne.n	8003f7e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fd8a 	bl	8003a90 <LL_ADC_REG_StartConversion>
 8003f7c:	e026      	b.n	8003fcc <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <HAL_ADC_Start+0x174>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d002      	beq.n	8003f9a <HAL_ADC_Start+0x132>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	e001      	b.n	8003f9e <HAL_ADC_Start+0x136>
 8003f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f9e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00f      	beq.n	8003fcc <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fbc:	e006      	b.n	8003fcc <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003fc6:	e001      	b.n	8003fcc <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	50000300 	.word	0x50000300
 8003fdc:	50000100 	.word	0x50000100

08003fe0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Stop+0x16>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e023      	b.n	800403e <HAL_ADC_Stop+0x5e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ffe:	2103      	movs	r1, #3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ffd9 	bl	8004fb8 <ADC_ConversionStop>
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f001 f8ef 	bl	80051f4 <ADC_Disable>
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004052:	4867      	ldr	r0, [pc, #412]	; (80041f0 <HAL_ADC_PollForConversion+0x1a8>)
 8004054:	f7ff fc64 	bl	8003920 <LL_ADC_GetMultimode>
 8004058:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d102      	bne.n	8004068 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004062:	2308      	movs	r3, #8
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e02a      	b.n	80040be <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d002      	beq.n	800407a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b09      	cmp	r3, #9
 8004078:	d111      	bne.n	800409e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0a6      	b.n	80041e6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004098:	2304      	movs	r3, #4
 800409a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800409c:	e00f      	b.n	80040be <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800409e:	4854      	ldr	r0, [pc, #336]	; (80041f0 <HAL_ADC_PollForConversion+0x1a8>)
 80040a0:	f7ff fc4c 	bl	800393c <LL_ADC_GetMultiDMATransfer>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e095      	b.n	80041e6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80040ba:	2304      	movs	r3, #4
 80040bc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040be:	f7ff fa89 	bl	80035d4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040c4:	e021      	b.n	800410a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d01d      	beq.n	800410a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80040ce:	f7ff fa81 	bl	80035d4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <HAL_ADC_PollForConversion+0x9c>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d112      	bne.n	800410a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e06d      	b.n	80041e6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0d6      	beq.n	80040c6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fb53 	bl	80037d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7f5b      	ldrb	r3, [r3, #29]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d118      	bne.n	800416e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d111      	bne.n	800416e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <HAL_ADC_PollForConversion+0x1ac>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d002      	beq.n	800417e <HAL_ADC_PollForConversion+0x136>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	e001      	b.n	8004182 <HAL_ADC_PollForConversion+0x13a>
 800417e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	4293      	cmp	r3, r2
 8004188:	d008      	beq.n	800419c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d002      	beq.n	800419c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b09      	cmp	r3, #9
 800419a:	d104      	bne.n	80041a6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e00d      	b.n	80041c2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_ADC_PollForConversion+0x1ac>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d002      	beq.n	80041b6 <HAL_ADC_PollForConversion+0x16e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	e001      	b.n	80041ba <HAL_ADC_PollForConversion+0x172>
 80041b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041ba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d104      	bne.n	80041d2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e008      	b.n	80041e4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	220c      	movs	r2, #12
 80041e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	50000300 	.word	0x50000300
 80041f4:	50000100 	.word	0x50000100

080041f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004204:	4851      	ldr	r0, [pc, #324]	; (800434c <HAL_ADC_Start_DMA+0x154>)
 8004206:	f7ff fb8b 	bl	8003920 <LL_ADC_GetMultimode>
 800420a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fc65 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 808f 	bne.w	800433c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_ADC_Start_DMA+0x34>
 8004228:	2302      	movs	r3, #2
 800422a:	e08a      	b.n	8004342 <HAL_ADC_Start_DMA+0x14a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b05      	cmp	r3, #5
 800423e:	d002      	beq.n	8004246 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b09      	cmp	r3, #9
 8004244:	d173      	bne.n	800432e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 ff72 	bl	8005130 <ADC_Enable>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d166      	bne.n	8004324 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a38      	ldr	r2, [pc, #224]	; (8004350 <HAL_ADC_Start_DMA+0x158>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d002      	beq.n	800427a <HAL_ADC_Start_DMA+0x82>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	e001      	b.n	800427e <HAL_ADC_Start_DMA+0x86>
 800427a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	4293      	cmp	r3, r2
 8004284:	d002      	beq.n	800428c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	f023 0206 	bic.w	r2, r3, #6
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
 80042b0:	e002      	b.n	80042b8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_ADC_Start_DMA+0x15c>)
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_ADC_Start_DMA+0x160>)
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <HAL_ADC_Start_DMA+0x164>)
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	221c      	movs	r2, #28
 80042d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0210 	orr.w	r2, r2, #16
 80042ee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3340      	adds	r3, #64	; 0x40
 800430a:	4619      	mov	r1, r3
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f001 fd70 	bl	8005df4 <HAL_DMA_Start_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fbb7 	bl	8003a90 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004322:	e00d      	b.n	8004340 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800432c:	e008      	b.n	8004340 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800433a:	e001      	b.n	8004340 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800433c:	2302      	movs	r3, #2
 800433e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	50000300 	.word	0x50000300
 8004350:	50000100 	.word	0x50000100
 8004354:	080052b3 	.word	0x080052b3
 8004358:	0800538b 	.word	0x0800538b
 800435c:	080053a7 	.word	0x080053a7

08004360 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004398:	4883      	ldr	r0, [pc, #524]	; (80045a8 <HAL_ADC_IRQHandler+0x22c>)
 800439a:	f7ff fac1 	bl	8003920 <LL_ADC_GetMultimode>
 800439e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_ADC_IRQHandler+0x5e>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f001 f8e1 	bl	8005594 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2202      	movs	r2, #2
 80043d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_ADC_IRQHandler+0x72>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8085 	beq.w	8004504 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d07f      	beq.n	8004504 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f9d7 	bl	80037d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d064      	beq.n	80044f6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5e      	ldr	r2, [pc, #376]	; (80045ac <HAL_ADC_IRQHandler+0x230>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d002      	beq.n	800443c <HAL_ADC_IRQHandler+0xc0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	e001      	b.n	8004440 <HAL_ADC_IRQHandler+0xc4>
 800443c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	4293      	cmp	r3, r2
 8004446:	d008      	beq.n	800445a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b05      	cmp	r3, #5
 8004452:	d002      	beq.n	800445a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b09      	cmp	r3, #9
 8004458:	d104      	bne.n	8004464 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	e00d      	b.n	8004480 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a50      	ldr	r2, [pc, #320]	; (80045ac <HAL_ADC_IRQHandler+0x230>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d002      	beq.n	8004474 <HAL_ADC_IRQHandler+0xf8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	e001      	b.n	8004478 <HAL_ADC_IRQHandler+0xfc>
 8004474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004478:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d135      	bne.n	80044f6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b08      	cmp	r3, #8
 8004496:	d12e      	bne.n	80044f6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fb1f 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11a      	bne.n	80044de <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 020c 	bic.w	r2, r2, #12
 80044b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d112      	bne.n	80044f6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	65da      	str	r2, [r3, #92]	; 0x5c
 80044dc:	e00b      	b.n	80044f6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fb70 	bl	8001bdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	220c      	movs	r2, #12
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <HAL_ADC_IRQHandler+0x19c>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10b      	bne.n	8004530 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 809e 	beq.w	8004660 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8098 	beq.w	8004660 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff f980 	bl	8003852 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004552:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f93b 	bl	80037d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800455e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a11      	ldr	r2, [pc, #68]	; (80045ac <HAL_ADC_IRQHandler+0x230>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d002      	beq.n	8004570 <HAL_ADC_IRQHandler+0x1f4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e001      	b.n	8004574 <HAL_ADC_IRQHandler+0x1f8>
 8004570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4293      	cmp	r3, r2
 800457a:	d008      	beq.n	800458e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b06      	cmp	r3, #6
 8004586:	d002      	beq.n	800458e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b07      	cmp	r3, #7
 800458c:	d104      	bne.n	8004598 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	e011      	b.n	80045bc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a03      	ldr	r2, [pc, #12]	; (80045ac <HAL_ADC_IRQHandler+0x230>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d006      	beq.n	80045b0 <HAL_ADC_IRQHandler+0x234>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	e005      	b.n	80045b4 <HAL_ADC_IRQHandler+0x238>
 80045a8:	50000300 	.word	0x50000300
 80045ac:	50000100 	.word	0x50000100
 80045b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80045b4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d047      	beq.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_ADC_IRQHandler+0x260>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03f      	beq.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d13a      	bne.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d133      	bne.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d12e      	bne.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fa98 	bl	8003b2e <LL_ADC_INJ_IsConversionOngoing>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11a      	bne.n	800463a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004612:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d112      	bne.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	f043 0201 	orr.w	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	65da      	str	r2, [r3, #92]	; 0x5c
 8004638:	e00b      	b.n	8004652 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff76 	bl	8005544 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2260      	movs	r2, #96	; 0x60
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_ADC_IRQHandler+0x312>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f895 	bl	80047b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_ADC_IRQHandler+0x342>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 ff5c 	bl	800556c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_ADC_IRQHandler+0x372>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 ff4e 	bl	8005580 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d036      	beq.n	8004766 <HAL_ADC_IRQHandler+0x3ea>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d031      	beq.n	8004766 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800470a:	2301      	movs	r3, #1
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	e014      	b.n	800473a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004716:	4825      	ldr	r0, [pc, #148]	; (80047ac <HAL_ADC_IRQHandler+0x430>)
 8004718:	f7ff f910 	bl	800393c <LL_ADC_GetMultiDMATransfer>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004722:	2301      	movs	r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
 8004726:	e008      	b.n	800473a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004736:	2301      	movs	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10e      	bne.n	800475e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	f043 0202 	orr.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f833 	bl	80047c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2210      	movs	r2, #16
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d018      	beq.n	80047a2 <HAL_ADC_IRQHandler+0x426>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004776:	2b00      	cmp	r3, #0
 8004778:	d013      	beq.n	80047a2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	f043 0208 	orr.w	r2, r3, #8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fedb 	bl	8005558 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80047a2:	bf00      	nop
 80047a4:	3728      	adds	r7, #40	; 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	50000300 	.word	0x50000300

080047b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b0b6      	sub	sp, #216	; 0xd8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x22>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e3c8      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x7b4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff f96a 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 83ad 	bne.w	8004f6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	f7fe ffea 	bl	80037fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f958 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8004830:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff f978 	bl	8003b2e <LL_ADC_INJ_IsConversionOngoing>
 800483e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004842:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 81d9 	bne.w	8004bfe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800484c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 81d4 	bne.w	8004bfe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485e:	d10f      	bne.n	8004880 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	4619      	mov	r1, r3
 800486c:	f7ff f804 	bl	8003878 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe ff98 	bl	80037ae <LL_ADC_SetSamplingTimeCommonConfig>
 800487e:	e00e      	b.n	800489e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	461a      	mov	r2, r3
 800488e:	f7fe fff3 	bl	8003878 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe ff88 	bl	80037ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d022      	beq.n	8004906 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6919      	ldr	r1, [r3, #16]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048d0:	f7fe fee2 	bl	8003698 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6919      	ldr	r1, [r3, #16]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f7fe ff2e 	bl	8003742 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	7f1b      	ldrb	r3, [r3, #28]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x124>
 80048f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048fa:	e000      	b.n	80048fe <HAL_ADC_ConfigChannel+0x126>
 80048fc:	2300      	movs	r3, #0
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fe ff3a 	bl	8003778 <LL_ADC_SetOffsetSaturation>
 8004904:	e17b      	b.n	8004bfe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fee7 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x15a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fedc 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004928:	4603      	mov	r3, r0
 800492a:	0e9b      	lsrs	r3, r3, #26
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	e01e      	b.n	8004970 <HAL_ADC_ConfigChannel+0x198>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fed1 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 800493e:	4603      	mov	r3, r0
 8004940:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004960:	2320      	movs	r3, #32
 8004962:	e004      	b.n	800496e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1b0>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	0e9b      	lsrs	r3, r3, #26
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	e018      	b.n	80049ba <HAL_ADC_ConfigChannel+0x1e2>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800499c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80049a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e004      	b.n	80049ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80049b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80049b4:	fab3 f383 	clz	r3, r3
 80049b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d106      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fea0 	bl	800370c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fe84 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 80049d8:	4603      	mov	r3, r0
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x220>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe fe79 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 80049ee:	4603      	mov	r3, r0
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	f003 021f 	and.w	r2, r3, #31
 80049f6:	e01e      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x25e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe fe6e 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004a26:	2320      	movs	r3, #32
 8004a28:	e004      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d105      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x276>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	e018      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x2a8>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5a:	fa93 f3a3 	rbit	r3, r3
 8004a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004a72:	2320      	movs	r3, #32
 8004a74:	e004      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d106      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fe3d 	bl	800370c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fe21 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x2e6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fe16 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	0e9b      	lsrs	r3, r3, #26
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	e01e      	b.n	8004afc <HAL_ADC_ConfigChannel+0x324>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe fe0b 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004aec:	2320      	movs	r3, #32
 8004aee:	e004      	b.n	8004afa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x33c>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	0e9b      	lsrs	r3, r3, #26
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	e016      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x36a>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004b34:	2320      	movs	r3, #32
 8004b36:	e004      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d106      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fddc 	bl	800370c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2103      	movs	r1, #3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fdc0 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x3a8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2103      	movs	r1, #3
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fdb5 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004b76:	4603      	mov	r3, r0
 8004b78:	0e9b      	lsrs	r3, r3, #26
 8004b7a:	f003 021f 	and.w	r2, r3, #31
 8004b7e:	e017      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x3d8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2103      	movs	r1, #3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fdaa 	bl	80036e0 <LL_ADC_GetOffsetChannel>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	e003      	b.n	8004bae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x3f0>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	0e9b      	lsrs	r3, r3, #26
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	e011      	b.n	8004bec <HAL_ADC_ConfigChannel+0x414>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bd0:	fa93 f3a3 	rbit	r3, r3
 8004bd4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004be0:	2320      	movs	r3, #32
 8004be2:	e003      	b.n	8004bec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d106      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fd87 	bl	800370c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe ff1e 	bl	8003a44 <LL_ADC_IsEnabled>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 8140 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6819      	ldr	r1, [r3, #0]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f7fe fe57 	bl	80038d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a8f      	ldr	r2, [pc, #572]	; (8004e64 <HAL_ADC_ConfigChannel+0x68c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	f040 8131 	bne.w	8004e90 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x47e>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	0e9b      	lsrs	r3, r3, #26
 8004c44:	3301      	adds	r3, #1
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	bf94      	ite	ls
 8004c4e:	2301      	movls	r3, #1
 8004c50:	2300      	movhi	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e019      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x4b2>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004c6e:	2320      	movs	r3, #32
 8004c70:	e003      	b.n	8004c7a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c74:	fab3 f383 	clz	r3, r3
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2b09      	cmp	r3, #9
 8004c82:	bf94      	ite	ls
 8004c84:	2301      	movls	r3, #1
 8004c86:	2300      	movhi	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d079      	beq.n	8004d82 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d107      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x4d2>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	0e9b      	lsrs	r3, r3, #26
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	069b      	lsls	r3, r3, #26
 8004ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca8:	e015      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x4fe>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	e003      	b.n	8004cce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc8:	fab3 f383 	clz	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	069b      	lsls	r3, r3, #26
 8004cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x51e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0e9b      	lsrs	r3, r3, #26
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	e017      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x54e>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfe:	fa93 f3a3 	rbit	r3, r3
 8004d02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004d0e:	2320      	movs	r3, #32
 8004d10:	e003      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f303 	lsl.w	r3, r1, r3
 8004d26:	ea42 0103 	orr.w	r1, r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x574>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	0e9b      	lsrs	r3, r3, #26
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f003 021f 	and.w	r2, r3, #31
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	051b      	lsls	r3, r3, #20
 8004d4a:	e018      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x5a6>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004d64:	2320      	movs	r3, #32
 8004d66:	e003      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 021f 	and.w	r2, r3, #31
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	e081      	b.n	8004e86 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d107      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x5c6>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	0e9b      	lsrs	r3, r3, #26
 8004d94:	3301      	adds	r3, #1
 8004d96:	069b      	lsls	r3, r3, #26
 8004d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9c:	e015      	b.n	8004dca <HAL_ADC_ConfigChannel+0x5f2>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004db6:	2320      	movs	r3, #32
 8004db8:	e003      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	fab3 f383 	clz	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	069b      	lsls	r3, r3, #26
 8004dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x612>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	0e9b      	lsrs	r3, r3, #26
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	2101      	movs	r1, #1
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	e017      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x642>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	61fb      	str	r3, [r7, #28]
  return result;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004e02:	2320      	movs	r3, #32
 8004e04:	e003      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	fab3 f383 	clz	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	ea42 0103 	orr.w	r1, r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x66e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0e9b      	lsrs	r3, r3, #26
 8004e30:	3301      	adds	r3, #1
 8004e32:	f003 021f 	and.w	r2, r3, #31
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3b1e      	subs	r3, #30
 8004e3e:	051b      	lsls	r3, r3, #20
 8004e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e44:	e01e      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x6ac>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	613b      	str	r3, [r7, #16]
  return result;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d104      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e006      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x698>
 8004e62:	bf00      	nop
 8004e64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	3301      	adds	r3, #1
 8004e72:	f003 021f 	and.w	r2, r3, #31
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3b1e      	subs	r3, #30
 8004e7e:	051b      	lsls	r3, r3, #20
 8004e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e84:	430b      	orrs	r3, r1
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f7fe fcf4 	bl	8003878 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d071      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e9c:	483e      	ldr	r0, [pc, #248]	; (8004f98 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e9e:	f7fe fbed 	bl	800367c <LL_ADC_GetCommonPathInternalCh>
 8004ea2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3c      	ldr	r2, [pc, #240]	; (8004f9c <HAL_ADC_ConfigChannel+0x7c4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_ConfigChannel+0x6e2>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d127      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d121      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ece:	d157      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed8:	4619      	mov	r1, r3
 8004eda:	482f      	ldr	r0, [pc, #188]	; (8004f98 <HAL_ADC_ConfigChannel+0x7c0>)
 8004edc:	f7fe fbbb 	bl	8003656 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	4a30      	ldr	r2, [pc, #192]	; (8004fa8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	099b      	lsrs	r3, r3, #6
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004efa:	e002      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f9      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f08:	e03a      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a27      	ldr	r2, [pc, #156]	; (8004fac <HAL_ADC_ConfigChannel+0x7d4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d113      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x764>
 8004f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10d      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02a      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	4619      	mov	r1, r3
 8004f34:	4818      	ldr	r0, [pc, #96]	; (8004f98 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f36:	f7fe fb8e 	bl	8003656 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f3a:	e021      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1c      	ldr	r2, [pc, #112]	; (8004fb4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d11c      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d116      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d011      	beq.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f64:	4619      	mov	r1, r3
 8004f66:	480c      	ldr	r0, [pc, #48]	; (8004f98 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f68:	f7fe fb75 	bl	8003656 <LL_ADC_SetCommonPathInternalCh>
 8004f6c:	e008      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f88:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	37d8      	adds	r7, #216	; 0xd8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	80080000 	.word	0x80080000
 8004f98:	50000300 	.word	0x50000300
 8004f9c:	c3210000 	.word	0xc3210000
 8004fa0:	90c00010 	.word	0x90c00010
 8004fa4:	200000c8 	.word	0x200000c8
 8004fa8:	053e2d63 	.word	0x053e2d63
 8004fac:	c7520000 	.word	0xc7520000
 8004fb0:	50000100 	.word	0x50000100
 8004fb4:	cb840000 	.word	0xcb840000

08004fb8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fd86 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8004fd4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fda7 	bl	8003b2e <LL_ADC_INJ_IsConversionOngoing>
 8004fe0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8098 	beq.w	8005120 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d02a      	beq.n	8005054 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	7f5b      	ldrb	r3, [r3, #29]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d126      	bne.n	8005054 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7f1b      	ldrb	r3, [r3, #28]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d122      	bne.n	8005054 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800500e:	2301      	movs	r3, #1
 8005010:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005012:	e014      	b.n	800503e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4a45      	ldr	r2, [pc, #276]	; (800512c <ADC_ConversionStop+0x174>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d90d      	bls.n	8005038 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005020:	f043 0210 	orr.w	r2, r3, #16
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502c:	f043 0201 	orr.w	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e074      	b.n	8005122 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3301      	adds	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d1e3      	bne.n	8005014 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2240      	movs	r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d014      	beq.n	8005084 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fd3e 	bl	8003ae0 <LL_ADC_REG_IsConversionOngoing>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe fcfb 	bl	8003a6a <LL_ADC_IsDisableOngoing>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fd1a 	bl	8003ab8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d014      	beq.n	80050b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fd4d 	bl	8003b2e <LL_ADC_INJ_IsConversionOngoing>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe fce3 	bl	8003a6a <LL_ADC_IsDisableOngoing>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fd29 	bl	8003b06 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d005      	beq.n	80050c6 <ADC_ConversionStop+0x10e>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d105      	bne.n	80050cc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80050c0:	230c      	movs	r3, #12
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e005      	b.n	80050d2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80050c6:	2308      	movs	r3, #8
 80050c8:	617b      	str	r3, [r7, #20]
        break;
 80050ca:	e002      	b.n	80050d2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80050cc:	2304      	movs	r3, #4
 80050ce:	617b      	str	r3, [r7, #20]
        break;
 80050d0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80050d2:	f7fe fa7f 	bl	80035d4 <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80050d8:	e01b      	b.n	8005112 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80050da:	f7fe fa7b 	bl	80035d4 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d914      	bls.n	8005112 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	f043 0210 	orr.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e007      	b.n	8005122 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1dc      	bne.n	80050da <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	a33fffff 	.word	0xa33fffff

08005130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fc81 	bl	8003a44 <LL_ADC_IsEnabled>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d14d      	bne.n	80051e4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <ADC_Enable+0xc0>)
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515a:	f043 0210 	orr.w	r2, r3, #16
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e039      	b.n	80051e6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fc3c 	bl	80039f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800517c:	f7fe fa2a 	bl	80035d4 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005182:	e028      	b.n	80051d6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fc5b 	bl	8003a44 <LL_ADC_IsEnabled>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe fc2b 	bl	80039f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800519e:	f7fe fa19 	bl	80035d4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d914      	bls.n	80051d6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d00d      	beq.n	80051d6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	f043 0210 	orr.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e007      	b.n	80051e6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d1cf      	bne.n	8005184 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	8000003f 	.word	0x8000003f

080051f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fc32 	bl	8003a6a <LL_ADC_IsDisableOngoing>
 8005206:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fc19 	bl	8003a44 <LL_ADC_IsEnabled>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d047      	beq.n	80052a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d144      	bne.n	80052a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 030d 	and.w	r3, r3, #13
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10c      	bne.n	8005246 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fbf3 	bl	8003a1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2203      	movs	r2, #3
 800523c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800523e:	f7fe f9c9 	bl	80035d4 <HAL_GetTick>
 8005242:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005244:	e029      	b.n	800529a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	f043 0210 	orr.w	r2, r3, #16
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005256:	f043 0201 	orr.w	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e023      	b.n	80052aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005262:	f7fe f9b7 	bl	80035d4 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d914      	bls.n	800529a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	f043 0210 	orr.w	r2, r3, #16
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1dc      	bne.n	8005262 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d14b      	bne.n	8005364 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d021      	beq.n	800532a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fa72 	bl	80037d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d032      	beq.n	800535c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d12b      	bne.n	800535c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11f      	bne.n	800535c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c
 8005328:	e018      	b.n	800535c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7fc fc3d 	bl	8001bdc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005362:	e00e      	b.n	8005382 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fa27 	bl	80047c4 <HAL_ADC_ErrorCallback>
}
 8005376:	e004      	b.n	8005382 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fc fb0d 	bl	80019b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c4:	f043 0204 	orr.w	r2, r3, #4
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff f9f9 	bl	80047c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <LL_ADC_IsEnabled>:
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <LL_ADC_IsEnabled+0x18>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <LL_ADC_IsEnabled+0x1a>
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_ADC_StartCalibration>:
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005412:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800541c:	4313      	orrs	r3, r2
 800541e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <LL_ADC_IsCalibrationOnGoing>:
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005446:	d101      	bne.n	800544c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <LL_ADC_REG_IsConversionOngoing>:
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b04      	cmp	r3, #4
 800546c:	d101      	bne.n	8005472 <LL_ADC_REG_IsConversionOngoing+0x18>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_ADCEx_Calibration_Start+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e04d      	b.n	8005538 <HAL_ADCEx_Calibration_Start+0xb8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7ff fea5 	bl	80051f4 <ADC_Disable>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d136      	bne.n	8005522 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	f043 0202 	orr.w	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ff96 	bl	8005400 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80054d4:	e014      	b.n	8005500 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	3301      	adds	r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_ADCEx_Calibration_Start+0xc0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d90d      	bls.n	8005500 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	f023 0312 	bic.w	r3, r3, #18
 80054ec:	f043 0210 	orr.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e01b      	b.n	8005538 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff94 	bl	8005432 <LL_ADC_IsCalibrationOnGoing>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e2      	bne.n	80054d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005520:	e005      	b.n	800552e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	0004de01 	.word	0x0004de01

08005544 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b0a1      	sub	sp, #132	; 0x84
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e08b      	b.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80055ce:	2300      	movs	r3, #0
 80055d0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80055d2:	2300      	movs	r3, #0
 80055d4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055de:	d102      	bne.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	e001      	b.n	80055ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e06a      	b.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff25 	bl	800545a <LL_ADC_REG_IsConversionOngoing>
 8005610:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff1f 	bl	800545a <LL_ADC_REG_IsConversionOngoing>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d14c      	bne.n	80056bc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005624:	2b00      	cmp	r3, #0
 8005626:	d149      	bne.n	80056bc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800562a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d028      	beq.n	8005686 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005646:	035b      	lsls	r3, r3, #13
 8005648:	430b      	orrs	r3, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005650:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005654:	f7ff fec1 	bl	80053da <LL_ADC_IsEnabled>
 8005658:	4604      	mov	r4, r0
 800565a:	4823      	ldr	r0, [pc, #140]	; (80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800565c:	f7ff febd 	bl	80053da <LL_ADC_IsEnabled>
 8005660:	4603      	mov	r3, r0
 8005662:	4323      	orrs	r3, r4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d133      	bne.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005670:	f023 030f 	bic.w	r3, r3, #15
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	6811      	ldr	r1, [r2, #0]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	6892      	ldr	r2, [r2, #8]
 800567c:	430a      	orrs	r2, r1
 800567e:	431a      	orrs	r2, r3
 8005680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005682:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005684:	e024      	b.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005692:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005696:	f7ff fea0 	bl	80053da <LL_ADC_IsEnabled>
 800569a:	4604      	mov	r4, r0
 800569c:	4812      	ldr	r0, [pc, #72]	; (80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800569e:	f7ff fe9c 	bl	80053da <LL_ADC_IsEnabled>
 80056a2:	4603      	mov	r3, r0
 80056a4:	4323      	orrs	r3, r4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d112      	bne.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80056b2:	f023 030f 	bic.w	r3, r3, #15
 80056b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80056b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056ba:	e009      	b.n	80056d0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	f043 0220 	orr.w	r2, r3, #32
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80056ce:	e000      	b.n	80056d2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3784      	adds	r7, #132	; 0x84
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd90      	pop	{r4, r7, pc}
 80056e6:	bf00      	nop
 80056e8:	50000100 	.word	0x50000100
 80056ec:	50000300 	.word	0x50000300

080056f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <__NVIC_SetPriorityGrouping+0x44>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800570c:	4013      	ands	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800571c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005722:	4a04      	ldr	r2, [pc, #16]	; (8005734 <__NVIC_SetPriorityGrouping+0x44>)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	60d3      	str	r3, [r2, #12]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000ed00 	.word	0xe000ed00

08005738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <__NVIC_GetPriorityGrouping+0x18>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 0307 	and.w	r3, r3, #7
}
 8005746:	4618      	mov	r0, r3
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db0b      	blt.n	800577e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	f003 021f 	and.w	r2, r3, #31
 800576c:	4907      	ldr	r1, [pc, #28]	; (800578c <__NVIC_EnableIRQ+0x38>)
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2001      	movs	r0, #1
 8005776:	fa00 f202 	lsl.w	r2, r0, r2
 800577a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000e100 	.word	0xe000e100

08005790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	6039      	str	r1, [r7, #0]
 800579a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800579c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	db0a      	blt.n	80057ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	490c      	ldr	r1, [pc, #48]	; (80057dc <__NVIC_SetPriority+0x4c>)
 80057aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ae:	0112      	lsls	r2, r2, #4
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	440b      	add	r3, r1
 80057b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057b8:	e00a      	b.n	80057d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4908      	ldr	r1, [pc, #32]	; (80057e0 <__NVIC_SetPriority+0x50>)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	3b04      	subs	r3, #4
 80057c8:	0112      	lsls	r2, r2, #4
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	440b      	add	r3, r1
 80057ce:	761a      	strb	r2, [r3, #24]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	e000e100 	.word	0xe000e100
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	; 0x24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f1c3 0307 	rsb	r3, r3, #7
 80057fe:	2b04      	cmp	r3, #4
 8005800:	bf28      	it	cs
 8005802:	2304      	movcs	r3, #4
 8005804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3304      	adds	r3, #4
 800580a:	2b06      	cmp	r3, #6
 800580c:	d902      	bls.n	8005814 <NVIC_EncodePriority+0x30>
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3b03      	subs	r3, #3
 8005812:	e000      	b.n	8005816 <NVIC_EncodePriority+0x32>
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43da      	mvns	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	401a      	ands	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800582c:	f04f 31ff 	mov.w	r1, #4294967295
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	43d9      	mvns	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800583c:	4313      	orrs	r3, r2
         );
}
 800583e:	4618      	mov	r0, r3
 8005840:	3724      	adds	r7, #36	; 0x24
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3b01      	subs	r3, #1
 8005858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800585c:	d301      	bcc.n	8005862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800585e:	2301      	movs	r3, #1
 8005860:	e00f      	b.n	8005882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <SysTick_Config+0x40>)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800586a:	210f      	movs	r1, #15
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	f7ff ff8e 	bl	8005790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <SysTick_Config+0x40>)
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800587a:	4b04      	ldr	r3, [pc, #16]	; (800588c <SysTick_Config+0x40>)
 800587c:	2207      	movs	r2, #7
 800587e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	e000e010 	.word	0xe000e010

08005890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff29 	bl	80056f0 <__NVIC_SetPriorityGrouping>
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	4603      	mov	r3, r0
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058b4:	f7ff ff40 	bl	8005738 <__NVIC_GetPriorityGrouping>
 80058b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	6978      	ldr	r0, [r7, #20]
 80058c0:	f7ff ff90 	bl	80057e4 <NVIC_EncodePriority>
 80058c4:	4602      	mov	r2, r0
 80058c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff5f 	bl	8005790 <__NVIC_SetPriority>
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	4603      	mov	r3, r0
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff33 	bl	8005754 <__NVIC_EnableIRQ>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ffa4 	bl	800584c <SysTick_Config>
 8005904:	4603      	mov	r3, r0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e014      	b.n	800594a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fc fddf 	bl	80024f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	795b      	ldrb	r3, [r3, #5]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_DAC_ConfigChannel+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e192      	b.n	8005c92 <HAL_DAC_ConfigChannel+0x33e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b04      	cmp	r3, #4
 800597e:	d174      	bne.n	8005a6a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005980:	f7fd fe28 	bl	80035d4 <HAL_GetTick>
 8005984:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d134      	bne.n	80059f6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800598c:	e011      	b.n	80059b2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800598e:	f7fd fe21 	bl	80035d4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d90a      	bls.n	80059b2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f043 0208 	orr.w	r2, r3, #8
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2203      	movs	r2, #3
 80059ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e16f      	b.n	8005c92 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80059c0:	2001      	movs	r0, #1
 80059c2:	f7fd fe13 	bl	80035ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
 80059d0:	e01e      	b.n	8005a10 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059d2:	f7fd fdff 	bl	80035d4 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d90a      	bls.n	80059f6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f043 0208 	orr.w	r2, r3, #8
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2203      	movs	r2, #3
 80059f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e14d      	b.n	8005c92 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dbe8      	blt.n	80059d2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7fd fdf3 	bl	80035ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	ea02 0103 	and.w	r1, r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	409a      	lsls	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	21ff      	movs	r1, #255	; 0xff
 8005a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	ea02 0103 	and.w	r1, r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	409a      	lsls	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11d      	bne.n	8005aae <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	221f      	movs	r2, #31
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2207      	movs	r2, #7
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d102      	bne.n	8005ad8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	e00f      	b.n	8005af8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d102      	bne.n	8005ae6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	e008      	b.n	8005af8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005aee:	2301      	movs	r3, #1
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	e001      	b.n	8005af8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_DAC_ConfigChannel+0x1d8>
 8005b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b2a:	e000      	b.n	8005b2e <HAL_DAC_ConfigChannel+0x1da>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	4013      	ands	r3, r2
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	795b      	ldrb	r3, [r3, #5]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d102      	bne.n	8005b58 <HAL_DAC_ConfigChannel+0x204>
 8005b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b56:	e000      	b.n	8005b5a <HAL_DAC_ConfigChannel+0x206>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d114      	bne.n	8005b9a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005b70:	f002 f926 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8005b74:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a48      	ldr	r2, [pc, #288]	; (8005c9c <HAL_DAC_ConfigChannel+0x348>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d904      	bls.n	8005b88 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
 8005b86:	e00f      	b.n	8005ba8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4a45      	ldr	r2, [pc, #276]	; (8005ca0 <HAL_DAC_ConfigChannel+0x34c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d90a      	bls.n	8005ba6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	e006      	b.n	8005ba8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	e000      	b.n	8005ba8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005ba6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	400a      	ands	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c12:	4313      	orrs	r3, r2
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	22c0      	movs	r2, #192	; 0xc0
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	400a      	ands	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005c68:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	ea02 0103 	and.w	r1, r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	409a      	lsls	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3728      	adds	r7, #40	; 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	09896800 	.word	0x09896800
 8005ca0:	04c4b400 	.word	0x04c4b400

08005ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e08d      	b.n	8005dd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <HAL_DMA_Init+0x138>)
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d80f      	bhi.n	8005ce2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <HAL_DMA_Init+0x13c>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	4a45      	ldr	r2, [pc, #276]	; (8005de4 <HAL_DMA_Init+0x140>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	091b      	lsrs	r3, r3, #4
 8005cd4:	009a      	lsls	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a42      	ldr	r2, [pc, #264]	; (8005de8 <HAL_DMA_Init+0x144>)
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40
 8005ce0:	e00e      	b.n	8005d00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b40      	ldr	r3, [pc, #256]	; (8005dec <HAL_DMA_Init+0x148>)
 8005cea:	4413      	add	r3, r2
 8005cec:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <HAL_DMA_Init+0x140>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	091b      	lsrs	r3, r3, #4
 8005cf4:	009a      	lsls	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <HAL_DMA_Init+0x14c>)
 8005cfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa76 	bl	8006244 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d60:	d102      	bne.n	8005d68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <HAL_DMA_Init+0x104>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d80c      	bhi.n	8005da8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa96 	bl	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e008      	b.n	8005dba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40020407 	.word	0x40020407
 8005de0:	bffdfff8 	.word	0xbffdfff8
 8005de4:	cccccccd 	.word	0xcccccccd
 8005de8:	40020000 	.word	0x40020000
 8005dec:	bffdfbf8 	.word	0xbffdfbf8
 8005df0:	40020400 	.word	0x40020400

08005df4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_DMA_Start_IT+0x20>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e066      	b.n	8005ee2 <HAL_DMA_Start_IT+0xee>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d155      	bne.n	8005ed4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	68b9      	ldr	r1, [r7, #8]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f9bb 	bl	80061c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 020e 	orr.w	r2, r2, #14
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e00f      	b.n	8005e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0204 	bic.w	r2, r2, #4
 8005e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 020a 	orr.w	r2, r2, #10
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e005      	b.n	8005ee0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
 8005ede:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d005      	beq.n	8005f0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2204      	movs	r2, #4
 8005f06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
 8005f0c:	e037      	b.n	8005f7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 020e 	bic.w	r2, r2, #14
 8005f1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f003 021f 	and.w	r2, r3, #31
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00c      	beq.n	8005f7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005f7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
 8005fce:	e047      	b.n	8006060 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 020e 	bic.w	r2, r2, #14
 8005fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f003 021f 	and.w	r2, r3, #31
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f202 	lsl.w	r2, r1, r2
 8006012:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800601c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006034:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800603e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
    }
  }
  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006086:	f003 031f 	and.w	r3, r3, #31
 800608a:	2204      	movs	r2, #4
 800608c:	409a      	lsls	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4013      	ands	r3, r2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d026      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7a>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d021      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0204 	bic.w	r2, r2, #4
 80060bc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	f003 021f 	and.w	r2, r3, #31
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2104      	movs	r1, #4
 80060cc:	fa01 f202 	lsl.w	r2, r1, r2
 80060d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d071      	beq.n	80061be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060e2:	e06c      	b.n	80061be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2202      	movs	r2, #2
 80060ee:	409a      	lsls	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02e      	beq.n	8006156 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d029      	beq.n	8006156 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 020a 	bic.w	r2, r2, #10
 800611e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	f003 021f 	and.w	r2, r3, #31
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	2102      	movs	r1, #2
 8006136:	fa01 f202 	lsl.w	r2, r1, r2
 800613a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d038      	beq.n	80061be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006154:	e033      	b.n	80061be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2208      	movs	r2, #8
 8006160:	409a      	lsls	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d02a      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d025      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 020e 	bic.w	r2, r2, #14
 8006182:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f202 	lsl.w	r2, r1, r2
 8006196:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d004      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
}
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f003 021f 	and.w	r2, r3, #31
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2101      	movs	r1, #1
 8006200:	fa01 f202 	lsl.w	r2, r1, r2
 8006204:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b10      	cmp	r3, #16
 8006214:	d108      	bne.n	8006228 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006226:	e007      	b.n	8006238 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006254:	429a      	cmp	r2, r3
 8006256:	d802      	bhi.n	800625e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e001      	b.n	8006262 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800625e:	4b15      	ldr	r3, [pc, #84]	; (80062b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006260:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	3b08      	subs	r3, #8
 800626e:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800628e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2201      	movs	r2, #1
 8006298:	409a      	lsls	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40020407 	.word	0x40020407
 80062b0:	40020800 	.word	0x40020800
 80062b4:	40020820 	.word	0x40020820
 80062b8:	cccccccd 	.word	0xcccccccd
 80062bc:	40020880 	.word	0x40020880

080062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	461a      	mov	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a08      	ldr	r2, [pc, #32]	; (8006304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80062f4:	bf00      	nop
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	1000823f 	.word	0x1000823f
 8006304:	40020940 	.word	0x40020940

08006308 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e147      	b.n	80065aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fc f9cc 	bl	80026cc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699a      	ldr	r2, [r3, #24]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0210 	bic.w	r2, r2, #16
 8006342:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006344:	f7fd f946 	bl	80035d4 <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800634a:	e012      	b.n	8006372 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800634c:	f7fd f942 	bl	80035d4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b0a      	cmp	r3, #10
 8006358:	d90b      	bls.n	8006372 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2203      	movs	r2, #3
 800636a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e11b      	b.n	80065aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d0e5      	beq.n	800634c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006390:	f7fd f920 	bl	80035d4 <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006396:	e012      	b.n	80063be <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006398:	f7fd f91c 	bl	80035d4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b0a      	cmp	r3, #10
 80063a4:	d90b      	bls.n	80063be <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063aa:	f043 0201 	orr.w	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2203      	movs	r2, #3
 80063b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e0f5      	b.n	80065aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0e5      	beq.n	8006398 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0202 	orr.w	r2, r2, #2
 80063da:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a74      	ldr	r2, [pc, #464]	; (80065b4 <HAL_FDCAN_Init+0x2ac>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d103      	bne.n	80063ee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80063e6:	4a74      	ldr	r2, [pc, #464]	; (80065b8 <HAL_FDCAN_Init+0x2b0>)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7c1b      	ldrb	r3, [r3, #16]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d108      	bne.n	8006408 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006404:	619a      	str	r2, [r3, #24]
 8006406:	e007      	b.n	8006418 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006416:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7c5b      	ldrb	r3, [r3, #17]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d108      	bne.n	8006432 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642e:	619a      	str	r2, [r3, #24]
 8006430:	e007      	b.n	8006442 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006440:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7c9b      	ldrb	r3, [r3, #18]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d108      	bne.n	800645c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006458:	619a      	str	r2, [r3, #24]
 800645a:	e007      	b.n	800646c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800646a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006490:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0210 	bic.w	r2, r2, #16
 80064a0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d108      	bne.n	80064bc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0204 	orr.w	r2, r2, #4
 80064b8:	619a      	str	r2, [r3, #24]
 80064ba:	e02c      	b.n	8006516 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d028      	beq.n	8006516 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d01c      	beq.n	8006506 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064da:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0210 	orr.w	r2, r2, #16
 80064ea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d110      	bne.n	8006516 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0220 	orr.w	r2, r2, #32
 8006502:	619a      	str	r2, [r3, #24]
 8006504:	e007      	b.n	8006516 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0220 	orr.w	r2, r2, #32
 8006514:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	3b01      	subs	r3, #1
 800651c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	3b01      	subs	r3, #1
 8006524:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006526:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800652e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	3b01      	subs	r3, #1
 8006538:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800653e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006540:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800654a:	d115      	bne.n	8006578 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	3b01      	subs	r3, #1
 8006558:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800655a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	3b01      	subs	r3, #1
 8006562:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006564:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	3b01      	subs	r3, #1
 800656e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006574:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006576:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fbe2 	bl	8006d58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40006400 	.word	0x40006400
 80065b8:	40006500 	.word	0x40006500

080065bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d110      	bne.n	80065f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e006      	b.n	8006600 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d12c      	bne.n	800667e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800662c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e023      	b.n	800668c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800664c:	0c1b      	lsrs	r3, r3, #16
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fbd2 	bl	8006e04 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2101      	movs	r1, #1
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	fa01 f202 	lsl.w	r2, r1, r2
 800666c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006670:	2201      	movs	r2, #1
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	409a      	lsls	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e006      	b.n	800668c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
  }
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006694:	b480      	push	{r7}
 8006696:	b08b      	sub	sp, #44	; 0x2c
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80066a8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80066aa:	7efb      	ldrb	r3, [r7, #27]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	f040 80bc 	bne.w	800682a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b40      	cmp	r3, #64	; 0x40
 80066b6:	d121      	bne.n	80066fc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d107      	bne.n	80066d8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0af      	b.n	8006838 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	440b      	add	r3, r1
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
 80066fa:	e020      	b.n	800673e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2b00      	cmp	r3, #0
 800670a:	d107      	bne.n	800671c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e08d      	b.n	8006838 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	440b      	add	r3, r1
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	0c9b      	lsrs	r3, r3, #18
 8006758:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e005      	b.n	800676e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	3304      	adds	r3, #4
 800678a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	0e1b      	lsrs	r3, r3, #24
 80067c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	0fda      	lsrs	r2, r3, #31
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	3304      	adds	r3, #4
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80067dc:	2300      	movs	r3, #0
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	e00a      	b.n	80067f8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	441a      	add	r2, r3
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	440b      	add	r3, r1
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	3301      	adds	r3, #1
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006800:	5cd3      	ldrb	r3, [r2, r3]
 8006802:	461a      	mov	r2, r3
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	4293      	cmp	r3, r2
 8006808:	d3eb      	bcc.n	80067e2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d105      	bne.n	800681c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800681a:	e004      	b.n	8006826 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e006      	b.n	8006838 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682e:	f043 0208 	orr.w	r2, r3, #8
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	372c      	adds	r7, #44	; 0x2c
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	0800c1e8 	.word	0x0800c1e8

08006848 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800685a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d003      	beq.n	800686a <HAL_FDCAN_ActivateNotification+0x22>
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	2b02      	cmp	r3, #2
 8006866:	f040 80c8 	bne.w	80069fa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d03b      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d031      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d027      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d004      	beq.n	80068c2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01d      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d107      	bne.n	800690e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d13b      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d131      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	d127      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11d      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b00      	cmp	r3, #0
 8006970:	d113      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006978:	2b00      	cmp	r3, #0
 800697a:	d004      	beq.n	8006986 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0202 	orr.w	r2, r2, #2
 80069a8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e006      	b.n	8006a08 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069fe:	f043 0202 	orr.w	r2, r3, #2
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a30:	4013      	ands	r3, r2
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	6a3a      	ldr	r2, [r7, #32]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a56:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	4013      	ands	r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006a6e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006a86:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4013      	ands	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d006      	beq.n	8006abe <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2240      	movs	r2, #64	; 0x40
 8006ab6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f92e 	bl	8006d1a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01b      	beq.n	8006b04 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ae2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4013      	ands	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006afa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006afc:	6939      	ldr	r1, [r7, #16]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f8ec 	bl	8006cdc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f8b6 	bl	8006c86 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006b28:	6a39      	ldr	r1, [r7, #32]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fb f9ec 	bl	8001f08 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006b3e:	69f9      	ldr	r1, [r7, #28]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8ab 	bl	8006c9c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00e      	beq.n	8006b72 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8a0 	bl	8006cb2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d013      	beq.n	8006bb6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006b96:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2280      	movs	r2, #128	; 0x80
 8006bac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f888 	bl	8006cc6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bda:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f888 	bl	8006cf2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c06:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f87c 	bl	8006d06 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d011      	beq.n	8006c40 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006c4e:	6979      	ldr	r1, [r7, #20]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f876 	bl	8006d42 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f858 	bl	8006d2e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006c7e:	bf00      	nop
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006ca6:	bf00      	nop
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006d62:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d72:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	041a      	lsls	r2, r3, #16
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	061a      	lsls	r2, r3, #24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	e005      	b.n	8006de6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3304      	adds	r3, #4
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3f3      	bcc.n	8006dda <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	4000a400 	.word	0x4000a400

08006e04 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006e22:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e00a      	b.n	8006e46 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006e38:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006e3e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e50:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006e56:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006e5c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	440b      	add	r3, r1
 8006e76:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	3304      	adds	r3, #4
 8006e82:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e020      	b.n	8006ed8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	3303      	adds	r3, #3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	440b      	add	r3, r1
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006eae:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	440b      	add	r3, r1
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ebc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006ec6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	4a06      	ldr	r2, [pc, #24]	; (8006ef8 <FDCAN_CopyMessageToRAM+0xf4>)
 8006ee0:	5cd3      	ldrb	r3, [r2, r3]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d3d5      	bcc.n	8006e96 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	3724      	adds	r7, #36	; 0x24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	0800c1e8 	.word	0x0800c1e8

08006efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f0a:	e15a      	b.n	80071c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	2101      	movs	r1, #1
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	4013      	ands	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 814c 	beq.w	80071bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d005      	beq.n	8006f3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d130      	bne.n	8006f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4013      	ands	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f72:	2201      	movs	r2, #1
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	091b      	lsrs	r3, r3, #4
 8006f88:	f003 0201 	and.w	r2, r3, #1
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d017      	beq.n	8006fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d123      	bne.n	800702e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	08da      	lsrs	r2, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3208      	adds	r2, #8
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	220f      	movs	r2, #15
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4013      	ands	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	08da      	lsrs	r2, r3, #3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3208      	adds	r2, #8
 8007028:	6939      	ldr	r1, [r7, #16]
 800702a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	2203      	movs	r2, #3
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f003 0203 	and.w	r2, r3, #3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80a6 	beq.w	80071bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007070:	4b5b      	ldr	r3, [pc, #364]	; (80071e0 <HAL_GPIO_Init+0x2e4>)
 8007072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007074:	4a5a      	ldr	r2, [pc, #360]	; (80071e0 <HAL_GPIO_Init+0x2e4>)
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	6613      	str	r3, [r2, #96]	; 0x60
 800707c:	4b58      	ldr	r3, [pc, #352]	; (80071e0 <HAL_GPIO_Init+0x2e4>)
 800707e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007088:	4a56      	ldr	r2, [pc, #344]	; (80071e4 <HAL_GPIO_Init+0x2e8>)
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	089b      	lsrs	r3, r3, #2
 800708e:	3302      	adds	r3, #2
 8007090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	220f      	movs	r2, #15
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	43db      	mvns	r3, r3
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4013      	ands	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80070b2:	d01f      	beq.n	80070f4 <HAL_GPIO_Init+0x1f8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a4c      	ldr	r2, [pc, #304]	; (80071e8 <HAL_GPIO_Init+0x2ec>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d019      	beq.n	80070f0 <HAL_GPIO_Init+0x1f4>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a4b      	ldr	r2, [pc, #300]	; (80071ec <HAL_GPIO_Init+0x2f0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_GPIO_Init+0x1f0>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a4a      	ldr	r2, [pc, #296]	; (80071f0 <HAL_GPIO_Init+0x2f4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00d      	beq.n	80070e8 <HAL_GPIO_Init+0x1ec>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a49      	ldr	r2, [pc, #292]	; (80071f4 <HAL_GPIO_Init+0x2f8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d007      	beq.n	80070e4 <HAL_GPIO_Init+0x1e8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a48      	ldr	r2, [pc, #288]	; (80071f8 <HAL_GPIO_Init+0x2fc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d101      	bne.n	80070e0 <HAL_GPIO_Init+0x1e4>
 80070dc:	2305      	movs	r3, #5
 80070de:	e00a      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070e0:	2306      	movs	r3, #6
 80070e2:	e008      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070e4:	2304      	movs	r3, #4
 80070e6:	e006      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070e8:	2303      	movs	r3, #3
 80070ea:	e004      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e002      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <HAL_GPIO_Init+0x1fa>
 80070f4:	2300      	movs	r3, #0
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	f002 0203 	and.w	r2, r2, #3
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	4093      	lsls	r3, r2
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007106:	4937      	ldr	r1, [pc, #220]	; (80071e4 <HAL_GPIO_Init+0x2e8>)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	089b      	lsrs	r3, r3, #2
 800710c:	3302      	adds	r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007114:	4b39      	ldr	r3, [pc, #228]	; (80071fc <HAL_GPIO_Init+0x300>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	43db      	mvns	r3, r3
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4013      	ands	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007138:	4a30      	ldr	r2, [pc, #192]	; (80071fc <HAL_GPIO_Init+0x300>)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800713e:	4b2f      	ldr	r3, [pc, #188]	; (80071fc <HAL_GPIO_Init+0x300>)
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	43db      	mvns	r3, r3
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4013      	ands	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <HAL_GPIO_Init+0x300>)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007168:	4b24      	ldr	r3, [pc, #144]	; (80071fc <HAL_GPIO_Init+0x300>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	43db      	mvns	r3, r3
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4013      	ands	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800718c:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <HAL_GPIO_Init+0x300>)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007192:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <HAL_GPIO_Init+0x300>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	43db      	mvns	r3, r3
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4013      	ands	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80071b6:	4a11      	ldr	r2, [pc, #68]	; (80071fc <HAL_GPIO_Init+0x300>)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	3301      	adds	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f47f ae9d 	bne.w	8006f0c <HAL_GPIO_Init+0x10>
  }
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	40021000 	.word	0x40021000
 80071e4:	40010000 	.word	0x40010000
 80071e8:	48000400 	.word	0x48000400
 80071ec:	48000800 	.word	0x48000800
 80071f0:	48000c00 	.word	0x48000c00
 80071f4:	48001000 	.word	0x48001000
 80071f8:	48001400 	.word	0x48001400
 80071fc:	40010400 	.word	0x40010400

08007200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	807b      	strh	r3, [r7, #2]
 800720c:	4613      	mov	r3, r2
 800720e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007210:	787b      	ldrb	r3, [r7, #1]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800721c:	e002      	b.n	8007224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800721e:	887a      	ldrh	r2, [r7, #2]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007242:	887a      	ldrh	r2, [r7, #2]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4013      	ands	r3, r2
 8007248:	041a      	lsls	r2, r3, #16
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	43d9      	mvns	r1, r3
 800724e:	887b      	ldrh	r3, [r7, #2]
 8007250:	400b      	ands	r3, r1
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	619a      	str	r2, [r3, #24]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d141      	bne.n	80072f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007272:	4b4b      	ldr	r3, [pc, #300]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727e:	d131      	bne.n	80072e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007280:	4b47      	ldr	r3, [pc, #284]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007286:	4a46      	ldr	r2, [pc, #280]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007290:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007298:	4a41      	ldr	r2, [pc, #260]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800729a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800729e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072a0:	4b40      	ldr	r3, [pc, #256]	; (80073a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2232      	movs	r2, #50	; 0x32
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	4a3f      	ldr	r2, [pc, #252]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	0c9b      	lsrs	r3, r3, #18
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072b6:	e002      	b.n	80072be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80072be:	4b38      	ldr	r3, [pc, #224]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ca:	d102      	bne.n	80072d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f2      	bne.n	80072b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80072d2:	4b33      	ldr	r3, [pc, #204]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072de:	d158      	bne.n	8007392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e057      	b.n	8007394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072e4:	4b2e      	ldr	r3, [pc, #184]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ea:	4a2d      	ldr	r2, [pc, #180]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80072ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80072f4:	e04d      	b.n	8007392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072fc:	d141      	bne.n	8007382 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072fe:	4b28      	ldr	r3, [pc, #160]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730a:	d131      	bne.n	8007370 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800730c:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800730e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007312:	4a23      	ldr	r2, [pc, #140]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800731c:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007324:	4a1e      	ldr	r2, [pc, #120]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800732a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800732c:	4b1d      	ldr	r3, [pc, #116]	; (80073a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2232      	movs	r2, #50	; 0x32
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	4a1c      	ldr	r2, [pc, #112]	; (80073a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007338:	fba2 2303 	umull	r2, r3, r2, r3
 800733c:	0c9b      	lsrs	r3, r3, #18
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007342:	e002      	b.n	800734a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3b01      	subs	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007356:	d102      	bne.n	800735e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f2      	bne.n	8007344 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736a:	d112      	bne.n	8007392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e011      	b.n	8007394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007376:	4a0a      	ldr	r2, [pc, #40]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007380:	e007      	b.n	8007392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800738a:	4a05      	ldr	r2, [pc, #20]	; (80073a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800738c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007390:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40007000 	.word	0x40007000
 80073a4:	200000c8 	.word	0x200000c8
 80073a8:	431bde83 	.word	0x431bde83

080073ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80073b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073ba:	6093      	str	r3, [r2, #8]
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40007000 	.word	0x40007000

080073cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e306      	b.n	80079ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d075      	beq.n	80074d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ea:	4b97      	ldr	r3, [pc, #604]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
 80073f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073f4:	4b94      	ldr	r3, [pc, #592]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b0c      	cmp	r3, #12
 8007402:	d102      	bne.n	800740a <HAL_RCC_OscConfig+0x3e>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d002      	beq.n	8007410 <HAL_RCC_OscConfig+0x44>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10b      	bne.n	8007428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007410:	4b8d      	ldr	r3, [pc, #564]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d05b      	beq.n	80074d4 <HAL_RCC_OscConfig+0x108>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d157      	bne.n	80074d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e2e1      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007430:	d106      	bne.n	8007440 <HAL_RCC_OscConfig+0x74>
 8007432:	4b85      	ldr	r3, [pc, #532]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a84      	ldr	r2, [pc, #528]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e01d      	b.n	800747c <HAL_RCC_OscConfig+0xb0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007448:	d10c      	bne.n	8007464 <HAL_RCC_OscConfig+0x98>
 800744a:	4b7f      	ldr	r3, [pc, #508]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a7e      	ldr	r2, [pc, #504]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	4b7c      	ldr	r3, [pc, #496]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a7b      	ldr	r2, [pc, #492]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e00b      	b.n	800747c <HAL_RCC_OscConfig+0xb0>
 8007464:	4b78      	ldr	r3, [pc, #480]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800746a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4b75      	ldr	r3, [pc, #468]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a74      	ldr	r2, [pc, #464]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800747a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007484:	f7fc f8a6 	bl	80035d4 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800748c:	f7fc f8a2 	bl	80035d4 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b64      	cmp	r3, #100	; 0x64
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e2a6      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800749e:	4b6a      	ldr	r3, [pc, #424]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0f0      	beq.n	800748c <HAL_RCC_OscConfig+0xc0>
 80074aa:	e014      	b.n	80074d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fc f892 	bl	80035d4 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b4:	f7fc f88e 	bl	80035d4 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	; 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e292      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074c6:	4b60      	ldr	r3, [pc, #384]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0xe8>
 80074d2:	e000      	b.n	80074d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d075      	beq.n	80075ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074e2:	4b59      	ldr	r3, [pc, #356]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
 80074ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074ec:	4b56      	ldr	r3, [pc, #344]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b0c      	cmp	r3, #12
 80074fa:	d102      	bne.n	8007502 <HAL_RCC_OscConfig+0x136>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d002      	beq.n	8007508 <HAL_RCC_OscConfig+0x13c>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d11f      	bne.n	8007548 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007508:	4b4f      	ldr	r3, [pc, #316]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_OscConfig+0x154>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e265      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007520:	4b49      	ldr	r3, [pc, #292]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	061b      	lsls	r3, r3, #24
 800752e:	4946      	ldr	r1, [pc, #280]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007530:	4313      	orrs	r3, r2
 8007532:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007534:	4b45      	ldr	r3, [pc, #276]	; (800764c <HAL_RCC_OscConfig+0x280>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f7fb ffff 	bl	800353c <HAL_InitTick>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d043      	beq.n	80075cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e251      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d023      	beq.n	8007598 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007550:	4b3d      	ldr	r3, [pc, #244]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a3c      	ldr	r2, [pc, #240]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800755a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fc f83a 	bl	80035d4 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007564:	f7fc f836 	bl	80035d4 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e23a      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007576:	4b34      	ldr	r3, [pc, #208]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0f0      	beq.n	8007564 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	061b      	lsls	r3, r3, #24
 8007590:	492d      	ldr	r1, [pc, #180]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	604b      	str	r3, [r1, #4]
 8007596:	e01a      	b.n	80075ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2a      	ldr	r2, [pc, #168]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800759e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a4:	f7fc f816 	bl	80035d4 <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ac:	f7fc f812 	bl	80035d4 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e216      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075be:	4b22      	ldr	r3, [pc, #136]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f0      	bne.n	80075ac <HAL_RCC_OscConfig+0x1e0>
 80075ca:	e000      	b.n	80075ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d041      	beq.n	800765e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01c      	beq.n	800761c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075e2:	4b19      	ldr	r3, [pc, #100]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80075e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075e8:	4a17      	ldr	r2, [pc, #92]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f2:	f7fb ffef 	bl	80035d4 <HAL_GetTick>
 80075f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075f8:	e008      	b.n	800760c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075fa:	f7fb ffeb 	bl	80035d4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d901      	bls.n	800760c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e1ef      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800760e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0ef      	beq.n	80075fa <HAL_RCC_OscConfig+0x22e>
 800761a:	e020      	b.n	800765e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 800761e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007622:	4a09      	ldr	r2, [pc, #36]	; (8007648 <HAL_RCC_OscConfig+0x27c>)
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762c:	f7fb ffd2 	bl	80035d4 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007632:	e00d      	b.n	8007650 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007634:	f7fb ffce 	bl	80035d4 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d906      	bls.n	8007650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e1d2      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
 8007646:	bf00      	nop
 8007648:	40021000 	.word	0x40021000
 800764c:	200000cc 	.word	0x200000cc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007650:	4b8c      	ldr	r3, [pc, #560]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1ea      	bne.n	8007634 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80a6 	beq.w	80077b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800766c:	2300      	movs	r3, #0
 800766e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007670:	4b84      	ldr	r3, [pc, #528]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_RCC_OscConfig+0x2b4>
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <HAL_RCC_OscConfig+0x2b6>
 8007680:	2300      	movs	r3, #0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007686:	4b7f      	ldr	r3, [pc, #508]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768a:	4a7e      	ldr	r2, [pc, #504]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800768c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007690:	6593      	str	r3, [r2, #88]	; 0x58
 8007692:	4b7c      	ldr	r3, [pc, #496]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800769e:	2301      	movs	r3, #1
 80076a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076a2:	4b79      	ldr	r3, [pc, #484]	; (8007888 <HAL_RCC_OscConfig+0x4bc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d118      	bne.n	80076e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076ae:	4b76      	ldr	r3, [pc, #472]	; (8007888 <HAL_RCC_OscConfig+0x4bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a75      	ldr	r2, [pc, #468]	; (8007888 <HAL_RCC_OscConfig+0x4bc>)
 80076b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076ba:	f7fb ff8b 	bl	80035d4 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c2:	f7fb ff87 	bl	80035d4 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e18b      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076d4:	4b6c      	ldr	r3, [pc, #432]	; (8007888 <HAL_RCC_OscConfig+0x4bc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d108      	bne.n	80076fa <HAL_RCC_OscConfig+0x32e>
 80076e8:	4b66      	ldr	r3, [pc, #408]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	4a65      	ldr	r2, [pc, #404]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80076f8:	e024      	b.n	8007744 <HAL_RCC_OscConfig+0x378>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	2b05      	cmp	r3, #5
 8007700:	d110      	bne.n	8007724 <HAL_RCC_OscConfig+0x358>
 8007702:	4b60      	ldr	r3, [pc, #384]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007708:	4a5e      	ldr	r2, [pc, #376]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800770a:	f043 0304 	orr.w	r3, r3, #4
 800770e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007712:	4b5c      	ldr	r3, [pc, #368]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007718:	4a5a      	ldr	r2, [pc, #360]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007722:	e00f      	b.n	8007744 <HAL_RCC_OscConfig+0x378>
 8007724:	4b57      	ldr	r3, [pc, #348]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	4a56      	ldr	r2, [pc, #344]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007734:	4b53      	ldr	r3, [pc, #332]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773a:	4a52      	ldr	r2, [pc, #328]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800773c:	f023 0304 	bic.w	r3, r3, #4
 8007740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d016      	beq.n	800777a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774c:	f7fb ff42 	bl	80035d4 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007752:	e00a      	b.n	800776a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007754:	f7fb ff3e 	bl	80035d4 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007762:	4293      	cmp	r3, r2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e140      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800776a:	4b46      	ldr	r3, [pc, #280]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0ed      	beq.n	8007754 <HAL_RCC_OscConfig+0x388>
 8007778:	e015      	b.n	80077a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777a:	f7fb ff2b 	bl	80035d4 <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007780:	e00a      	b.n	8007798 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007782:	f7fb ff27 	bl	80035d4 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007790:	4293      	cmp	r3, r2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e129      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007798:	4b3a      	ldr	r3, [pc, #232]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ed      	bne.n	8007782 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d105      	bne.n	80077b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ac:	4b35      	ldr	r3, [pc, #212]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	4a34      	ldr	r2, [pc, #208]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80077b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d03c      	beq.n	800783e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01c      	beq.n	8007806 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077cc:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80077ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077d2:	4a2c      	ldr	r2, [pc, #176]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077dc:	f7fb fefa 	bl	80035d4 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077e4:	f7fb fef6 	bl	80035d4 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e0fa      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077f6:	4b23      	ldr	r3, [pc, #140]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 80077f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0ef      	beq.n	80077e4 <HAL_RCC_OscConfig+0x418>
 8007804:	e01b      	b.n	800783e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007806:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800780c:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007816:	f7fb fedd 	bl	80035d4 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800781e:	f7fb fed9 	bl	80035d4 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e0dd      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007830:	4b14      	ldr	r3, [pc, #80]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1ef      	bne.n	800781e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80d1 	beq.w	80079ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007848:	4b0e      	ldr	r3, [pc, #56]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 030c 	and.w	r3, r3, #12
 8007850:	2b0c      	cmp	r3, #12
 8007852:	f000 808b 	beq.w	800796c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d15e      	bne.n	800791c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a08      	ldr	r2, [pc, #32]	; (8007884 <HAL_RCC_OscConfig+0x4b8>)
 8007864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786a:	f7fb feb3 	bl	80035d4 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007870:	e00c      	b.n	800788c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007872:	f7fb feaf 	bl	80035d4 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d905      	bls.n	800788c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e0b3      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
 8007884:	40021000 	.word	0x40021000
 8007888:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800788c:	4b59      	ldr	r3, [pc, #356]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1ec      	bne.n	8007872 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007898:	4b56      	ldr	r3, [pc, #344]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	4b56      	ldr	r3, [pc, #344]	; (80079f8 <HAL_RCC_OscConfig+0x62c>)
 800789e:	4013      	ands	r3, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6a11      	ldr	r1, [r2, #32]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078a8:	3a01      	subs	r2, #1
 80078aa:	0112      	lsls	r2, r2, #4
 80078ac:	4311      	orrs	r1, r2
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80078b2:	0212      	lsls	r2, r2, #8
 80078b4:	4311      	orrs	r1, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80078ba:	0852      	lsrs	r2, r2, #1
 80078bc:	3a01      	subs	r2, #1
 80078be:	0552      	lsls	r2, r2, #21
 80078c0:	4311      	orrs	r1, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078c6:	0852      	lsrs	r2, r2, #1
 80078c8:	3a01      	subs	r2, #1
 80078ca:	0652      	lsls	r2, r2, #25
 80078cc:	4311      	orrs	r1, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078d2:	06d2      	lsls	r2, r2, #27
 80078d4:	430a      	orrs	r2, r1
 80078d6:	4947      	ldr	r1, [pc, #284]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078dc:	4b45      	ldr	r3, [pc, #276]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a44      	ldr	r2, [pc, #272]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 80078e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078e8:	4b42      	ldr	r3, [pc, #264]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4a41      	ldr	r2, [pc, #260]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 80078ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f4:	f7fb fe6e 	bl	80035d4 <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078fc:	f7fb fe6a 	bl	80035d4 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e06e      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800790e:	4b39      	ldr	r3, [pc, #228]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0x530>
 800791a:	e066      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791c:	4b35      	ldr	r3, [pc, #212]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a34      	ldr	r2, [pc, #208]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 8007922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007926:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007928:	4b32      	ldr	r3, [pc, #200]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a31      	ldr	r2, [pc, #196]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007934:	4b2f      	ldr	r3, [pc, #188]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800793a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800793e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007942:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fb fe46 	bl	80035d4 <HAL_GetTick>
 8007948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794c:	f7fb fe42 	bl	80035d4 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e046      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800795e:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f0      	bne.n	800794c <HAL_RCC_OscConfig+0x580>
 800796a:	e03e      	b.n	80079ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e039      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007978:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <HAL_RCC_OscConfig+0x628>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f003 0203 	and.w	r2, r3, #3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	429a      	cmp	r2, r3
 800798a:	d12c      	bne.n	80079e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	3b01      	subs	r3, #1
 8007998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d123      	bne.n	80079e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d11b      	bne.n	80079e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d113      	bne.n	80079e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	085b      	lsrs	r3, r3, #1
 80079ca:	3b01      	subs	r3, #1
 80079cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d109      	bne.n	80079e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079dc:	085b      	lsrs	r3, r3, #1
 80079de:	3b01      	subs	r3, #1
 80079e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d001      	beq.n	80079ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40021000 	.word	0x40021000
 80079f8:	019f800c 	.word	0x019f800c

080079fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e11e      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a14:	4b91      	ldr	r3, [pc, #580]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d910      	bls.n	8007a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a22:	4b8e      	ldr	r3, [pc, #568]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f023 020f 	bic.w	r2, r3, #15
 8007a2a:	498c      	ldr	r1, [pc, #560]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a32:	4b8a      	ldr	r3, [pc, #552]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d001      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e106      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d073      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d129      	bne.n	8007aac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a58:	4b81      	ldr	r3, [pc, #516]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e0f4      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007a68:	f000 f9e2 	bl	8007e30 <RCC_GetSysClockFreqFromPLLSource>
 8007a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4a7c      	ldr	r2, [pc, #496]	; (8007c64 <HAL_RCC_ClockConfig+0x268>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d93f      	bls.n	8007af6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a76:	4b7a      	ldr	r3, [pc, #488]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d033      	beq.n	8007af6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d12f      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a96:	4b72      	ldr	r3, [pc, #456]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a9e:	4a70      	ldr	r2, [pc, #448]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007aa6:	2380      	movs	r3, #128	; 0x80
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e024      	b.n	8007af6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ab4:	4b6a      	ldr	r3, [pc, #424]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e0c6      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ac4:	4b66      	ldr	r3, [pc, #408]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0be      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007ad4:	f000 f914 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007ad8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	4a61      	ldr	r2, [pc, #388]	; (8007c64 <HAL_RCC_ClockConfig+0x268>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d909      	bls.n	8007af6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007ae2:	4b5f      	ldr	r3, [pc, #380]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aea:	4a5d      	ldr	r2, [pc, #372]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007af6:	4b5a      	ldr	r3, [pc, #360]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 0203 	bic.w	r2, r3, #3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	4957      	ldr	r1, [pc, #348]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b08:	f7fb fd64 	bl	80035d4 <HAL_GetTick>
 8007b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b10:	f7fb fd60 	bl	80035d4 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e095      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b26:	4b4e      	ldr	r3, [pc, #312]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 020c 	and.w	r2, r3, #12
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d1eb      	bne.n	8007b10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d023      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b50:	4b43      	ldr	r3, [pc, #268]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	4a42      	ldr	r2, [pc, #264]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007b68:	4b3d      	ldr	r3, [pc, #244]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b70:	4a3b      	ldr	r2, [pc, #236]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b78:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	4936      	ldr	r1, [pc, #216]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d105      	bne.n	8007b9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b92:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	4a32      	ldr	r2, [pc, #200]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b9e:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d21d      	bcs.n	8007be8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f023 020f 	bic.w	r2, r3, #15
 8007bb4:	4929      	ldr	r1, [pc, #164]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007bbc:	f7fb fd0a 	bl	80035d4 <HAL_GetTick>
 8007bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc2:	e00a      	b.n	8007bda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bc4:	f7fb fd06 	bl	80035d4 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e03b      	b.n	8007c52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bda:	4b20      	ldr	r3, [pc, #128]	; (8007c5c <HAL_RCC_ClockConfig+0x260>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1ed      	bne.n	8007bc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4917      	ldr	r1, [pc, #92]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	490f      	ldr	r1, [pc, #60]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c26:	f000 f86b 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <HAL_RCC_ClockConfig+0x264>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	490c      	ldr	r1, [pc, #48]	; (8007c68 <HAL_RCC_ClockConfig+0x26c>)
 8007c38:	5ccb      	ldrb	r3, [r1, r3]
 8007c3a:	f003 031f 	and.w	r3, r3, #31
 8007c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c42:	4a0a      	ldr	r2, [pc, #40]	; (8007c6c <HAL_RCC_ClockConfig+0x270>)
 8007c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <HAL_RCC_ClockConfig+0x274>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fb fc76 	bl	800353c <HAL_InitTick>
 8007c50:	4603      	mov	r3, r0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40022000 	.word	0x40022000
 8007c60:	40021000 	.word	0x40021000
 8007c64:	04c4b400 	.word	0x04c4b400
 8007c68:	0800c1d0 	.word	0x0800c1d0
 8007c6c:	200000c8 	.word	0x200000c8
 8007c70:	200000cc 	.word	0x200000cc

08007c74 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08c      	sub	sp, #48	; 0x30
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007c80:	2302      	movs	r3, #2
 8007c82:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c84:	2303      	movs	r3, #3
 8007c86:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	0c1b      	lsrs	r3, r3, #16
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007ca0:	029b      	lsls	r3, r3, #10
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	f003 030f 	and.w	r3, r3, #15
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <HAL_RCC_MCOConfig+0x88>)
 8007cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cba:	4910      	ldr	r1, [pc, #64]	; (8007cfc <HAL_RCC_MCOConfig+0x88>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	0d1b      	lsrs	r3, r3, #20
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007cce:	f107 0310 	add.w	r3, r7, #16
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd6:	f7ff f911 	bl	8006efc <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <HAL_RCC_MCOConfig+0x88>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	430b      	orrs	r3, r1
 8007cee:	4903      	ldr	r1, [pc, #12]	; (8007cfc <HAL_RCC_MCOConfig+0x88>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	608b      	str	r3, [r1, #8]
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	3730      	adds	r7, #48	; 0x30
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40021000 	.word	0x40021000

08007d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d06:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f003 030c 	and.w	r3, r3, #12
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d102      	bne.n	8007d18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d12:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	e047      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f003 030c 	and.w	r3, r3, #12
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d102      	bne.n	8007d2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d26:	613b      	str	r3, [r7, #16]
 8007d28:	e03e      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d2a:	4b23      	ldr	r3, [pc, #140]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
 8007d32:	2b0c      	cmp	r3, #12
 8007d34:	d136      	bne.n	8007da4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d40:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	091b      	lsrs	r3, r3, #4
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d10c      	bne.n	8007d6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d54:	4a19      	ldr	r2, [pc, #100]	; (8007dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	4a16      	ldr	r2, [pc, #88]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d5e:	68d2      	ldr	r2, [r2, #12]
 8007d60:	0a12      	lsrs	r2, r2, #8
 8007d62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	617b      	str	r3, [r7, #20]
      break;
 8007d6c:	e00c      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d6e:	4a13      	ldr	r2, [pc, #76]	; (8007dbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d76:	4a10      	ldr	r2, [pc, #64]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d78:	68d2      	ldr	r2, [r2, #12]
 8007d7a:	0a12      	lsrs	r2, r2, #8
 8007d7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d80:	fb02 f303 	mul.w	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]
      break;
 8007d86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d88:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	0e5b      	lsrs	r3, r3, #25
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	3301      	adds	r3, #1
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e001      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007da8:	693b      	ldr	r3, [r7, #16]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	00f42400 	.word	0x00f42400

08007dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	200000c8 	.word	0x200000c8

08007dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ddc:	f7ff fff0 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8007de0:	4602      	mov	r2, r0
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	4904      	ldr	r1, [pc, #16]	; (8007e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dee:	5ccb      	ldrb	r3, [r1, r3]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	0800c1e0 	.word	0x0800c1e0

08007e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e08:	f7ff ffda 	bl	8007dc0 <HAL_RCC_GetHCLKFreq>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	0adb      	lsrs	r3, r3, #11
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e1a:	5ccb      	ldrb	r3, [r1, r3]
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	0800c1e0 	.word	0x0800c1e0

08007e30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e36:	4b1e      	ldr	r3, [pc, #120]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e40:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	091b      	lsrs	r3, r3, #4
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d10c      	bne.n	8007e6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e54:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5c:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e5e:	68d2      	ldr	r2, [r2, #12]
 8007e60:	0a12      	lsrs	r2, r2, #8
 8007e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e66:	fb02 f303 	mul.w	r3, r2, r3
 8007e6a:	617b      	str	r3, [r7, #20]
    break;
 8007e6c:	e00c      	b.n	8007e88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e6e:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	4a0e      	ldr	r2, [pc, #56]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e78:	68d2      	ldr	r2, [r2, #12]
 8007e7a:	0a12      	lsrs	r2, r2, #8
 8007e7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
    break;
 8007e86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	0e5b      	lsrs	r3, r3, #25
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	3301      	adds	r3, #1
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007ea2:	687b      	ldr	r3, [r7, #4]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	00f42400 	.word	0x00f42400

08007eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8098 	beq.w	8008006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eda:	4b43      	ldr	r3, [pc, #268]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10d      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ee6:	4b40      	ldr	r3, [pc, #256]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ef2:	4b3d      	ldr	r3, [pc, #244]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efa:	60bb      	str	r3, [r7, #8]
 8007efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007efe:	2301      	movs	r3, #1
 8007f00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f02:	4b3a      	ldr	r3, [pc, #232]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a39      	ldr	r2, [pc, #228]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f0e:	f7fb fb61 	bl	80035d4 <HAL_GetTick>
 8007f12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f14:	e009      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f16:	f7fb fb5d 	bl	80035d4 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d902      	bls.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	74fb      	strb	r3, [r7, #19]
        break;
 8007f28:	e005      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f2a:	4b30      	ldr	r3, [pc, #192]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0ef      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007f36:	7cfb      	ldrb	r3, [r7, #19]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d159      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01e      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d019      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f58:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f64:	4b20      	ldr	r3, [pc, #128]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f74:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f96:	f7fb fb1d 	bl	80035d4 <HAL_GetTick>
 8007f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f9c:	e00b      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9e:	f7fb fb19 	bl	80035d4 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d902      	bls.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8007fb4:	e006      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0ec      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	4903      	ldr	r1, [pc, #12]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007fe0:	e008      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fe2:	7cfb      	ldrb	r3, [r7, #19]
 8007fe4:	74bb      	strb	r3, [r7, #18]
 8007fe6:	e005      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007fe8:	40021000 	.word	0x40021000
 8007fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	7cfb      	ldrb	r3, [r7, #19]
 8007ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ff4:	7c7b      	ldrb	r3, [r7, #17]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d105      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffa:	4ba6      	ldr	r3, [pc, #664]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	4aa5      	ldr	r2, [pc, #660]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008012:	4ba0      	ldr	r3, [pc, #640]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008018:	f023 0203 	bic.w	r2, r3, #3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	499c      	ldr	r1, [pc, #624]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008034:	4b97      	ldr	r3, [pc, #604]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f023 020c 	bic.w	r2, r3, #12
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	4994      	ldr	r1, [pc, #592]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008056:	4b8f      	ldr	r3, [pc, #572]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	498b      	ldr	r1, [pc, #556]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008078:	4b86      	ldr	r3, [pc, #536]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	4983      	ldr	r1, [pc, #524]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800809a:	4b7e      	ldr	r3, [pc, #504]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	497a      	ldr	r1, [pc, #488]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080bc:	4b75      	ldr	r3, [pc, #468]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	4972      	ldr	r1, [pc, #456]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080de:	4b6d      	ldr	r3, [pc, #436]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	4969      	ldr	r1, [pc, #420]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008100:	4b64      	ldr	r3, [pc, #400]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4961      	ldr	r1, [pc, #388]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008122:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	4958      	ldr	r1, [pc, #352]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008144:	4b53      	ldr	r3, [pc, #332]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	4950      	ldr	r1, [pc, #320]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008162:	d105      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008164:	4b4b      	ldr	r3, [pc, #300]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	4a4a      	ldr	r2, [pc, #296]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008178:	2b00      	cmp	r3, #0
 800817a:	d015      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800817c:	4b45      	ldr	r3, [pc, #276]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818a:	4942      	ldr	r1, [pc, #264]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800818c:	4313      	orrs	r3, r2
 800818e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800819a:	d105      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800819c:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4a3c      	ldr	r2, [pc, #240]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d015      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80081b4:	4b37      	ldr	r3, [pc, #220]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	4934      	ldr	r1, [pc, #208]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081d2:	d105      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80081d4:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a2e      	ldr	r2, [pc, #184]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d015      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80081ec:	4b29      	ldr	r3, [pc, #164]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fa:	4926      	ldr	r1, [pc, #152]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800820a:	d105      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800820c:	4b21      	ldr	r3, [pc, #132]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008216:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d015      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	4918      	ldr	r1, [pc, #96]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008242:	d105      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008244:	4b13      	ldr	r3, [pc, #76]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	4a12      	ldr	r2, [pc, #72]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800824a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800824e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d015      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	490a      	ldr	r1, [pc, #40]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800826c:	4313      	orrs	r3, r2
 800826e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800827a:	d105      	bne.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a04      	ldr	r2, [pc, #16]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008286:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008288:	7cbb      	ldrb	r3, [r7, #18]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	40021000 	.word	0x40021000

08008298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e09d      	b.n	80083e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d108      	bne.n	80082c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082ba:	d009      	beq.n	80082d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	61da      	str	r2, [r3, #28]
 80082c2:	e005      	b.n	80082d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fa fbfa 	bl	8002ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008310:	d902      	bls.n	8008318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e002      	b.n	800831e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008326:	d007      	beq.n	8008338 <HAL_SPI_Init+0xa0>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008330:	d002      	beq.n	8008338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837a:	ea42 0103 	orr.w	r1, r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	f003 0204 	and.w	r2, r3, #4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083b4:	ea42 0103 	orr.w	r1, r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10e      	bne.n	8008430 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d004      	beq.n	8008430 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
    return;
 800842e:	e0ce      	b.n	80085ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <HAL_SPI_IRQHandler+0x5e>
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
    return;
 800844c:	e0bf      	b.n	80085ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <HAL_SPI_IRQHandler+0x7e>
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80b0 	beq.w	80085ce <HAL_SPI_IRQHandler+0x1de>
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80aa 	beq.w	80085ce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d023      	beq.n	80084cc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b03      	cmp	r3, #3
 800848e:	d011      	beq.n	80084b4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008494:	f043 0204 	orr.w	r2, r3, #4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	e00b      	b.n	80084cc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
        return;
 80084ca:	e080      	b.n	80085ce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d014      	beq.n	8008500 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	f043 0201 	orr.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00c      	beq.n	8008524 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	f043 0208 	orr.w	r2, r3, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008528:	2b00      	cmp	r3, #0
 800852a:	d04f      	beq.n	80085cc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800853a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <HAL_SPI_IRQHandler+0x168>
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d034      	beq.n	80085c2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0203 	bic.w	r2, r2, #3
 8008566:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856c:	2b00      	cmp	r3, #0
 800856e:	d011      	beq.n	8008594 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008574:	4a17      	ldr	r2, [pc, #92]	; (80085d4 <HAL_SPI_IRQHandler+0x1e4>)
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fd0d 	bl	8005f9c <HAL_DMA_Abort_IT>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	2b00      	cmp	r3, #0
 800859a:	d016      	beq.n	80085ca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a0:	4a0c      	ldr	r2, [pc, #48]	; (80085d4 <HAL_SPI_IRQHandler+0x1e4>)
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fd fcf7 	bl	8005f9c <HAL_DMA_Abort_IT>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80085c0:	e003      	b.n	80085ca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f808 	bl	80085d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80085c8:	e000      	b.n	80085cc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80085ca:	bf00      	nop
    return;
 80085cc:	bf00      	nop
  }
}
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	080085ed 	.word	0x080085ed

080085d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff ffe5 	bl	80085d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e049      	b.n	80086bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7fa fdbf 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f000 fe7f 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10f      	bne.n	80086fc <HAL_TIM_Base_Stop+0x38>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	f244 4344 	movw	r3, #17476	; 0x4444
 80086e6:	4013      	ands	r3, r2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <HAL_TIM_Base_Stop+0x38>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0201 	bic.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b01      	cmp	r3, #1
 8008726:	d001      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e04a      	b.n	80087c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a21      	ldr	r2, [pc, #132]	; (80087d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d018      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x6c>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	d013      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x6c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00e      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x6c>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d009      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x6c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1a      	ldr	r2, [pc, #104]	; (80087dc <HAL_TIM_Base_Start_IT+0xc8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x6c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a19      	ldr	r2, [pc, #100]	; (80087e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d115      	bne.n	80087ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008788:	4013      	ands	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b06      	cmp	r3, #6
 8008790:	d015      	beq.n	80087be <HAL_TIM_Base_Start_IT+0xaa>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008798:	d011      	beq.n	80087be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0201 	orr.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087aa:	e008      	b.n	80087be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e000      	b.n	80087c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40013400 	.word	0x40013400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	00010007 	.word	0x00010007

080087e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e049      	b.n	800888e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f841 	bl	8008896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3304      	adds	r3, #4
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f000 fd96 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
	...

080088ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d109      	bne.n	80088d0 <HAL_TIM_PWM_Start+0x24>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	e03c      	b.n	800894a <HAL_TIM_PWM_Start+0x9e>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d109      	bne.n	80088ea <HAL_TIM_PWM_Start+0x3e>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b01      	cmp	r3, #1
 80088e0:	bf14      	ite	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	2300      	moveq	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	e02f      	b.n	800894a <HAL_TIM_PWM_Start+0x9e>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d109      	bne.n	8008904 <HAL_TIM_PWM_Start+0x58>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	bf14      	ite	ne
 80088fc:	2301      	movne	r3, #1
 80088fe:	2300      	moveq	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	e022      	b.n	800894a <HAL_TIM_PWM_Start+0x9e>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	2b0c      	cmp	r3, #12
 8008908:	d109      	bne.n	800891e <HAL_TIM_PWM_Start+0x72>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	bf14      	ite	ne
 8008916:	2301      	movne	r3, #1
 8008918:	2300      	moveq	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	e015      	b.n	800894a <HAL_TIM_PWM_Start+0x9e>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b10      	cmp	r3, #16
 8008922:	d109      	bne.n	8008938 <HAL_TIM_PWM_Start+0x8c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	bf14      	ite	ne
 8008930:	2301      	movne	r3, #1
 8008932:	2300      	moveq	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	e008      	b.n	800894a <HAL_TIM_PWM_Start+0x9e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b01      	cmp	r3, #1
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e097      	b.n	8008a82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <HAL_TIM_PWM_Start+0xb6>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008960:	e023      	b.n	80089aa <HAL_TIM_PWM_Start+0xfe>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b04      	cmp	r3, #4
 8008966:	d104      	bne.n	8008972 <HAL_TIM_PWM_Start+0xc6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008970:	e01b      	b.n	80089aa <HAL_TIM_PWM_Start+0xfe>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b08      	cmp	r3, #8
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start+0xd6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008980:	e013      	b.n	80089aa <HAL_TIM_PWM_Start+0xfe>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b0c      	cmp	r3, #12
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start+0xe6>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008990:	e00b      	b.n	80089aa <HAL_TIM_PWM_Start+0xfe>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b10      	cmp	r3, #16
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0xf6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089a0:	e003      	b.n	80089aa <HAL_TIM_PWM_Start+0xfe>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2202      	movs	r2, #2
 80089a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 f8f2 	bl	8009b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a33      	ldr	r2, [pc, #204]	; (8008a8c <HAL_TIM_PWM_Start+0x1e0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d013      	beq.n	80089ea <HAL_TIM_PWM_Start+0x13e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a32      	ldr	r2, [pc, #200]	; (8008a90 <HAL_TIM_PWM_Start+0x1e4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d00e      	beq.n	80089ea <HAL_TIM_PWM_Start+0x13e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a30      	ldr	r2, [pc, #192]	; (8008a94 <HAL_TIM_PWM_Start+0x1e8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d009      	beq.n	80089ea <HAL_TIM_PWM_Start+0x13e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a2f      	ldr	r2, [pc, #188]	; (8008a98 <HAL_TIM_PWM_Start+0x1ec>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d004      	beq.n	80089ea <HAL_TIM_PWM_Start+0x13e>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a2d      	ldr	r2, [pc, #180]	; (8008a9c <HAL_TIM_PWM_Start+0x1f0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <HAL_TIM_PWM_Start+0x142>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_TIM_PWM_Start+0x144>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d007      	beq.n	8008a04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <HAL_TIM_PWM_Start+0x1e0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d018      	beq.n	8008a40 <HAL_TIM_PWM_Start+0x194>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d013      	beq.n	8008a40 <HAL_TIM_PWM_Start+0x194>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a20      	ldr	r2, [pc, #128]	; (8008aa0 <HAL_TIM_PWM_Start+0x1f4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00e      	beq.n	8008a40 <HAL_TIM_PWM_Start+0x194>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <HAL_TIM_PWM_Start+0x1f8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_TIM_PWM_Start+0x194>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <HAL_TIM_PWM_Start+0x1e4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_TIM_PWM_Start+0x194>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a16      	ldr	r2, [pc, #88]	; (8008a94 <HAL_TIM_PWM_Start+0x1e8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d115      	bne.n	8008a6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <HAL_TIM_PWM_Start+0x1fc>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d015      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x1d2>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a58:	d011      	beq.n	8008a7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0201 	orr.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a6a:	e008      	b.n	8008a7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e000      	b.n	8008a80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	40013400 	.word	0x40013400
 8008a94:	40014000 	.word	0x40014000
 8008a98:	40014400 	.word	0x40014400
 8008a9c:	40014800 	.word	0x40014800
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	40000800 	.word	0x40000800
 8008aa8:	00010007 	.word	0x00010007

08008aac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2200      	movs	r2, #0
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 f86c 	bl	8009b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a3e      	ldr	r2, [pc, #248]	; (8008bc4 <HAL_TIM_PWM_Stop+0x118>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d013      	beq.n	8008af6 <HAL_TIM_PWM_Stop+0x4a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a3d      	ldr	r2, [pc, #244]	; (8008bc8 <HAL_TIM_PWM_Stop+0x11c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00e      	beq.n	8008af6 <HAL_TIM_PWM_Stop+0x4a>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a3b      	ldr	r2, [pc, #236]	; (8008bcc <HAL_TIM_PWM_Stop+0x120>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d009      	beq.n	8008af6 <HAL_TIM_PWM_Stop+0x4a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a3a      	ldr	r2, [pc, #232]	; (8008bd0 <HAL_TIM_PWM_Stop+0x124>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d004      	beq.n	8008af6 <HAL_TIM_PWM_Stop+0x4a>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a38      	ldr	r2, [pc, #224]	; (8008bd4 <HAL_TIM_PWM_Stop+0x128>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_PWM_Stop+0x4e>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <HAL_TIM_PWM_Stop+0x50>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d017      	beq.n	8008b30 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6a1a      	ldr	r2, [r3, #32]
 8008b06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10f      	bne.n	8008b30 <HAL_TIM_PWM_Stop+0x84>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	f244 4344 	movw	r3, #17476	; 0x4444
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <HAL_TIM_PWM_Stop+0x84>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6a1a      	ldr	r2, [r3, #32]
 8008b36:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10f      	bne.n	8008b60 <HAL_TIM_PWM_Stop+0xb4>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	f244 4344 	movw	r3, #17476	; 0x4444
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d107      	bne.n	8008b60 <HAL_TIM_PWM_Stop+0xb4>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0201 	bic.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <HAL_TIM_PWM_Stop+0xc4>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b6e:	e023      	b.n	8008bb8 <HAL_TIM_PWM_Stop+0x10c>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d104      	bne.n	8008b80 <HAL_TIM_PWM_Stop+0xd4>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b7e:	e01b      	b.n	8008bb8 <HAL_TIM_PWM_Stop+0x10c>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d104      	bne.n	8008b90 <HAL_TIM_PWM_Stop+0xe4>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b8e:	e013      	b.n	8008bb8 <HAL_TIM_PWM_Stop+0x10c>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b0c      	cmp	r3, #12
 8008b94:	d104      	bne.n	8008ba0 <HAL_TIM_PWM_Stop+0xf4>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b9e:	e00b      	b.n	8008bb8 <HAL_TIM_PWM_Stop+0x10c>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d104      	bne.n	8008bb0 <HAL_TIM_PWM_Stop+0x104>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bae:	e003      	b.n	8008bb8 <HAL_TIM_PWM_Stop+0x10c>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40012c00 	.word	0x40012c00
 8008bc8:	40013400 	.word	0x40013400
 8008bcc:	40014000 	.word	0x40014000
 8008bd0:	40014400 	.word	0x40014400
 8008bd4:	40014800 	.word	0x40014800

08008bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d122      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d11b      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0202 	mvn.w	r2, #2
 8008c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fb7e 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8008c20:	e005      	b.n	8008c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fb70 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fb81 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d122      	bne.n	8008c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	d11b      	bne.n	8008c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f06f 0204 	mvn.w	r2, #4
 8008c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb54 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8008c74:	e005      	b.n	8008c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fb46 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fb57 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d122      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d11b      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f06f 0208 	mvn.w	r2, #8
 8008cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb2a 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8008cc8:	e005      	b.n	8008cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb1c 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fb2d 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f003 0310 	and.w	r3, r3, #16
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d122      	bne.n	8008d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0310 	and.w	r3, r3, #16
 8008cf4:	2b10      	cmp	r3, #16
 8008cf6:	d11b      	bne.n	8008d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f06f 0210 	mvn.w	r2, #16
 8008d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2208      	movs	r2, #8
 8008d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fb00 	bl	800931c <HAL_TIM_IC_CaptureCallback>
 8008d1c:	e005      	b.n	8008d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 faf2 	bl	8009308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb03 	bl	8009330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d10e      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d107      	bne.n	8008d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f06f 0201 	mvn.w	r2, #1
 8008d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 facc 	bl	80092f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d66:	2b80      	cmp	r3, #128	; 0x80
 8008d68:	d10e      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d74:	2b80      	cmp	r3, #128	; 0x80
 8008d76:	d107      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f96e 	bl	800a064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d96:	d10e      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d107      	bne.n	8008db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 f961 	bl	800a078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b40      	cmp	r3, #64	; 0x40
 8008dc2:	d10e      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d107      	bne.n	8008de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fab1 	bl	8009344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d10e      	bne.n	8008e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d107      	bne.n	8008e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f06f 0220 	mvn.w	r2, #32
 8008e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f921 	bl	800a050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1c:	d10f      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2c:	d107      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f927 	bl	800a08c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e4c:	d10f      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e5c:	d107      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 f919 	bl	800a0a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e7c:	d10f      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e8c:	d107      	bne.n	8008e9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f90b 	bl	800a0b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ea8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008eac:	d10f      	bne.n	8008ece <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ebc:	d107      	bne.n	8008ece <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f8fd 	bl	800a0c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d101      	bne.n	8008ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0ff      	b.n	80090f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b14      	cmp	r3, #20
 8008f02:	f200 80f0 	bhi.w	80090e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008f06:	a201      	add	r2, pc, #4	; (adr r2, 8008f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0c:	08008f61 	.word	0x08008f61
 8008f10:	080090e7 	.word	0x080090e7
 8008f14:	080090e7 	.word	0x080090e7
 8008f18:	080090e7 	.word	0x080090e7
 8008f1c:	08008fa1 	.word	0x08008fa1
 8008f20:	080090e7 	.word	0x080090e7
 8008f24:	080090e7 	.word	0x080090e7
 8008f28:	080090e7 	.word	0x080090e7
 8008f2c:	08008fe3 	.word	0x08008fe3
 8008f30:	080090e7 	.word	0x080090e7
 8008f34:	080090e7 	.word	0x080090e7
 8008f38:	080090e7 	.word	0x080090e7
 8008f3c:	08009023 	.word	0x08009023
 8008f40:	080090e7 	.word	0x080090e7
 8008f44:	080090e7 	.word	0x080090e7
 8008f48:	080090e7 	.word	0x080090e7
 8008f4c:	08009065 	.word	0x08009065
 8008f50:	080090e7 	.word	0x080090e7
 8008f54:	080090e7 	.word	0x080090e7
 8008f58:	080090e7 	.word	0x080090e7
 8008f5c:	080090a5 	.word	0x080090a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fa86 	bl	8009478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699a      	ldr	r2, [r3, #24]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0208 	orr.w	r2, r2, #8
 8008f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0204 	bic.w	r2, r2, #4
 8008f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	619a      	str	r2, [r3, #24]
      break;
 8008f9e:	e0a5      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 faf6 	bl	8009598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6999      	ldr	r1, [r3, #24]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	021a      	lsls	r2, r3, #8
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	619a      	str	r2, [r3, #24]
      break;
 8008fe0:	e084      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb5f 	bl	80096ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0208 	orr.w	r2, r2, #8
 8008ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0204 	bic.w	r2, r2, #4
 800900c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69d9      	ldr	r1, [r3, #28]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	430a      	orrs	r2, r1
 800901e:	61da      	str	r2, [r3, #28]
      break;
 8009020:	e064      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fbc7 	bl	80097bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800903c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69da      	ldr	r2, [r3, #28]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800904c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69d9      	ldr	r1, [r3, #28]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	021a      	lsls	r2, r3, #8
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	61da      	str	r2, [r3, #28]
      break;
 8009062:	e043      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fc30 	bl	80098d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0208 	orr.w	r2, r2, #8
 800907e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0204 	bic.w	r2, r2, #4
 800908e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80090a2:	e023      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fc74 	bl	8009998 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80090e4:	e002      	b.n	80090ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop

08009100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009114:	2b01      	cmp	r3, #1
 8009116:	d101      	bne.n	800911c <HAL_TIM_ConfigClockSource+0x1c>
 8009118:	2302      	movs	r3, #2
 800911a:	e0de      	b.n	80092da <HAL_TIM_ConfigClockSource+0x1da>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800913a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800913e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009146:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a63      	ldr	r2, [pc, #396]	; (80092e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009156:	4293      	cmp	r3, r2
 8009158:	f000 80a9 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 800915c:	4a61      	ldr	r2, [pc, #388]	; (80092e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800915e:	4293      	cmp	r3, r2
 8009160:	f200 80ae 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009164:	4a60      	ldr	r2, [pc, #384]	; (80092e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	f000 80a1 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 800916c:	4a5e      	ldr	r2, [pc, #376]	; (80092e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	f200 80a6 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009174:	4a5d      	ldr	r2, [pc, #372]	; (80092ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8009176:	4293      	cmp	r3, r2
 8009178:	f000 8099 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 800917c:	4a5b      	ldr	r2, [pc, #364]	; (80092ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800917e:	4293      	cmp	r3, r2
 8009180:	f200 809e 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009184:	4a5a      	ldr	r2, [pc, #360]	; (80092f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	f000 8091 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 800918c:	4a58      	ldr	r2, [pc, #352]	; (80092f0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800918e:	4293      	cmp	r3, r2
 8009190:	f200 8096 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009194:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009198:	f000 8089 	beq.w	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 800919c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091a0:	f200 808e 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091a8:	d03e      	beq.n	8009228 <HAL_TIM_ConfigClockSource+0x128>
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ae:	f200 8087 	bhi.w	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	f000 8086 	beq.w	80092c6 <HAL_TIM_ConfigClockSource+0x1c6>
 80091ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091be:	d87f      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091c0:	2b70      	cmp	r3, #112	; 0x70
 80091c2:	d01a      	beq.n	80091fa <HAL_TIM_ConfigClockSource+0xfa>
 80091c4:	2b70      	cmp	r3, #112	; 0x70
 80091c6:	d87b      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091c8:	2b60      	cmp	r3, #96	; 0x60
 80091ca:	d050      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x16e>
 80091cc:	2b60      	cmp	r3, #96	; 0x60
 80091ce:	d877      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091d0:	2b50      	cmp	r3, #80	; 0x50
 80091d2:	d03c      	beq.n	800924e <HAL_TIM_ConfigClockSource+0x14e>
 80091d4:	2b50      	cmp	r3, #80	; 0x50
 80091d6:	d873      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091d8:	2b40      	cmp	r3, #64	; 0x40
 80091da:	d058      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x18e>
 80091dc:	2b40      	cmp	r3, #64	; 0x40
 80091de:	d86f      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091e0:	2b30      	cmp	r3, #48	; 0x30
 80091e2:	d064      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 80091e4:	2b30      	cmp	r3, #48	; 0x30
 80091e6:	d86b      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091e8:	2b20      	cmp	r3, #32
 80091ea:	d060      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d867      	bhi.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d05c      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 80091f4:	2b10      	cmp	r3, #16
 80091f6:	d05a      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x1ae>
 80091f8:	e062      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	6899      	ldr	r1, [r3, #8]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	f000 fca7 	bl	8009b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800921c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	609a      	str	r2, [r3, #8]
      break;
 8009226:	e04f      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	6899      	ldr	r1, [r3, #8]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f000 fc90 	bl	8009b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800924a:	609a      	str	r2, [r3, #8]
      break;
 800924c:	e03c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	461a      	mov	r2, r3
 800925c:	f000 fc02 	bl	8009a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2150      	movs	r1, #80	; 0x50
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fc5b 	bl	8009b22 <TIM_ITRx_SetConfig>
      break;
 800926c:	e02c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	461a      	mov	r2, r3
 800927c:	f000 fc21 	bl	8009ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2160      	movs	r1, #96	; 0x60
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fc4b 	bl	8009b22 <TIM_ITRx_SetConfig>
      break;
 800928c:	e01c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	461a      	mov	r2, r3
 800929c:	f000 fbe2 	bl	8009a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2140      	movs	r1, #64	; 0x40
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fc3b 	bl	8009b22 <TIM_ITRx_SetConfig>
      break;
 80092ac:	e00c      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f000 fc32 	bl	8009b22 <TIM_ITRx_SetConfig>
      break;
 80092be:	e003      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
      break;
 80092c4:	e000      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80092c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	00100070 	.word	0x00100070
 80092e8:	00100040 	.word	0x00100040
 80092ec:	00100030 	.word	0x00100030
 80092f0:	00100020 	.word	0x00100020

080092f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a3c      	ldr	r2, [pc, #240]	; (800945c <TIM_Base_SetConfig+0x104>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00f      	beq.n	8009390 <TIM_Base_SetConfig+0x38>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009376:	d00b      	beq.n	8009390 <TIM_Base_SetConfig+0x38>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a39      	ldr	r2, [pc, #228]	; (8009460 <TIM_Base_SetConfig+0x108>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d007      	beq.n	8009390 <TIM_Base_SetConfig+0x38>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a38      	ldr	r2, [pc, #224]	; (8009464 <TIM_Base_SetConfig+0x10c>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d003      	beq.n	8009390 <TIM_Base_SetConfig+0x38>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a37      	ldr	r2, [pc, #220]	; (8009468 <TIM_Base_SetConfig+0x110>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d108      	bne.n	80093a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2d      	ldr	r2, [pc, #180]	; (800945c <TIM_Base_SetConfig+0x104>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d01b      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b0:	d017      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2a      	ldr	r2, [pc, #168]	; (8009460 <TIM_Base_SetConfig+0x108>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d013      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a29      	ldr	r2, [pc, #164]	; (8009464 <TIM_Base_SetConfig+0x10c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00f      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a28      	ldr	r2, [pc, #160]	; (8009468 <TIM_Base_SetConfig+0x110>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00b      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <TIM_Base_SetConfig+0x114>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d007      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a26      	ldr	r2, [pc, #152]	; (8009470 <TIM_Base_SetConfig+0x118>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d003      	beq.n	80093e2 <TIM_Base_SetConfig+0x8a>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a25      	ldr	r2, [pc, #148]	; (8009474 <TIM_Base_SetConfig+0x11c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d108      	bne.n	80093f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a10      	ldr	r2, [pc, #64]	; (800945c <TIM_Base_SetConfig+0x104>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00f      	beq.n	8009440 <TIM_Base_SetConfig+0xe8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a11      	ldr	r2, [pc, #68]	; (8009468 <TIM_Base_SetConfig+0x110>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d00b      	beq.n	8009440 <TIM_Base_SetConfig+0xe8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a10      	ldr	r2, [pc, #64]	; (800946c <TIM_Base_SetConfig+0x114>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d007      	beq.n	8009440 <TIM_Base_SetConfig+0xe8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <TIM_Base_SetConfig+0x118>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d003      	beq.n	8009440 <TIM_Base_SetConfig+0xe8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <TIM_Base_SetConfig+0x11c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d103      	bne.n	8009448 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	615a      	str	r2, [r3, #20]
}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40012c00 	.word	0x40012c00
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40013400 	.word	0x40013400
 800946c:	40014000 	.word	0x40014000
 8009470:	40014400 	.word	0x40014400
 8009474:	40014800 	.word	0x40014800

08009478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f023 0302 	bic.w	r3, r3, #2
 80094c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a2c      	ldr	r2, [pc, #176]	; (8009584 <TIM_OC1_SetConfig+0x10c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00f      	beq.n	80094f8 <TIM_OC1_SetConfig+0x80>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a2b      	ldr	r2, [pc, #172]	; (8009588 <TIM_OC1_SetConfig+0x110>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00b      	beq.n	80094f8 <TIM_OC1_SetConfig+0x80>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a2a      	ldr	r2, [pc, #168]	; (800958c <TIM_OC1_SetConfig+0x114>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d007      	beq.n	80094f8 <TIM_OC1_SetConfig+0x80>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a29      	ldr	r2, [pc, #164]	; (8009590 <TIM_OC1_SetConfig+0x118>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <TIM_OC1_SetConfig+0x80>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a28      	ldr	r2, [pc, #160]	; (8009594 <TIM_OC1_SetConfig+0x11c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d10c      	bne.n	8009512 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 0308 	bic.w	r3, r3, #8
 80094fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f023 0304 	bic.w	r3, r3, #4
 8009510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <TIM_OC1_SetConfig+0x10c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00f      	beq.n	800953a <TIM_OC1_SetConfig+0xc2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <TIM_OC1_SetConfig+0x110>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d00b      	beq.n	800953a <TIM_OC1_SetConfig+0xc2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <TIM_OC1_SetConfig+0x114>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d007      	beq.n	800953a <TIM_OC1_SetConfig+0xc2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <TIM_OC1_SetConfig+0x118>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d003      	beq.n	800953a <TIM_OC1_SetConfig+0xc2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a17      	ldr	r2, [pc, #92]	; (8009594 <TIM_OC1_SetConfig+0x11c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d111      	bne.n	800955e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	693a      	ldr	r2, [r7, #16]
 8009562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	621a      	str	r2, [r3, #32]
}
 8009578:	bf00      	nop
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	40012c00 	.word	0x40012c00
 8009588:	40013400 	.word	0x40013400
 800958c:	40014000 	.word	0x40014000
 8009590:	40014400 	.word	0x40014400
 8009594:	40014800 	.word	0x40014800

08009598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	f023 0210 	bic.w	r2, r3, #16
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f023 0320 	bic.w	r3, r3, #32
 80095e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a28      	ldr	r2, [pc, #160]	; (8009698 <TIM_OC2_SetConfig+0x100>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d003      	beq.n	8009604 <TIM_OC2_SetConfig+0x6c>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a27      	ldr	r2, [pc, #156]	; (800969c <TIM_OC2_SetConfig+0x104>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d10d      	bne.n	8009620 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800960a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800961e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <TIM_OC2_SetConfig+0x100>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00f      	beq.n	8009648 <TIM_OC2_SetConfig+0xb0>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a1c      	ldr	r2, [pc, #112]	; (800969c <TIM_OC2_SetConfig+0x104>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00b      	beq.n	8009648 <TIM_OC2_SetConfig+0xb0>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a1b      	ldr	r2, [pc, #108]	; (80096a0 <TIM_OC2_SetConfig+0x108>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d007      	beq.n	8009648 <TIM_OC2_SetConfig+0xb0>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <TIM_OC2_SetConfig+0x10c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d003      	beq.n	8009648 <TIM_OC2_SetConfig+0xb0>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a19      	ldr	r2, [pc, #100]	; (80096a8 <TIM_OC2_SetConfig+0x110>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d113      	bne.n	8009670 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800964e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	40012c00 	.word	0x40012c00
 800969c:	40013400 	.word	0x40013400
 80096a0:	40014000 	.word	0x40014000
 80096a4:	40014400 	.word	0x40014400
 80096a8:	40014800 	.word	0x40014800

080096ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0303 	bic.w	r3, r3, #3
 80096e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a27      	ldr	r2, [pc, #156]	; (80097a8 <TIM_OC3_SetConfig+0xfc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d003      	beq.n	8009716 <TIM_OC3_SetConfig+0x6a>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a26      	ldr	r2, [pc, #152]	; (80097ac <TIM_OC3_SetConfig+0x100>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d10d      	bne.n	8009732 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800971c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <TIM_OC3_SetConfig+0xfc>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00f      	beq.n	800975a <TIM_OC3_SetConfig+0xae>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <TIM_OC3_SetConfig+0x100>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00b      	beq.n	800975a <TIM_OC3_SetConfig+0xae>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <TIM_OC3_SetConfig+0x104>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d007      	beq.n	800975a <TIM_OC3_SetConfig+0xae>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a19      	ldr	r2, [pc, #100]	; (80097b4 <TIM_OC3_SetConfig+0x108>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d003      	beq.n	800975a <TIM_OC3_SetConfig+0xae>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <TIM_OC3_SetConfig+0x10c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d113      	bne.n	8009782 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4313      	orrs	r3, r2
 8009774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	621a      	str	r2, [r3, #32]
}
 800979c:	bf00      	nop
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	40012c00 	.word	0x40012c00
 80097ac:	40013400 	.word	0x40013400
 80097b0:	40014000 	.word	0x40014000
 80097b4:	40014400 	.word	0x40014400
 80097b8:	40014800 	.word	0x40014800

080097bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800980a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	031b      	lsls	r3, r3, #12
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a28      	ldr	r2, [pc, #160]	; (80098bc <TIM_OC4_SetConfig+0x100>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_OC4_SetConfig+0x6c>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a27      	ldr	r2, [pc, #156]	; (80098c0 <TIM_OC4_SetConfig+0x104>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d10d      	bne.n	8009844 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800982e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	031b      	lsls	r3, r3, #12
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <TIM_OC4_SetConfig+0x100>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00f      	beq.n	800986c <TIM_OC4_SetConfig+0xb0>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <TIM_OC4_SetConfig+0x104>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00b      	beq.n	800986c <TIM_OC4_SetConfig+0xb0>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <TIM_OC4_SetConfig+0x108>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d007      	beq.n	800986c <TIM_OC4_SetConfig+0xb0>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <TIM_OC4_SetConfig+0x10c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d003      	beq.n	800986c <TIM_OC4_SetConfig+0xb0>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a19      	ldr	r2, [pc, #100]	; (80098cc <TIM_OC4_SetConfig+0x110>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d113      	bne.n	8009894 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009872:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800987a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	019b      	lsls	r3, r3, #6
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	4313      	orrs	r3, r2
 8009886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	019b      	lsls	r3, r3, #6
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40012c00 	.word	0x40012c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40014400 	.word	0x40014400
 80098cc:	40014800 	.word	0x40014800

080098d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a17      	ldr	r2, [pc, #92]	; (8009984 <TIM_OC5_SetConfig+0xb4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00f      	beq.n	800994a <TIM_OC5_SetConfig+0x7a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a16      	ldr	r2, [pc, #88]	; (8009988 <TIM_OC5_SetConfig+0xb8>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00b      	beq.n	800994a <TIM_OC5_SetConfig+0x7a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a15      	ldr	r2, [pc, #84]	; (800998c <TIM_OC5_SetConfig+0xbc>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d007      	beq.n	800994a <TIM_OC5_SetConfig+0x7a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a14      	ldr	r2, [pc, #80]	; (8009990 <TIM_OC5_SetConfig+0xc0>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d003      	beq.n	800994a <TIM_OC5_SetConfig+0x7a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a13      	ldr	r2, [pc, #76]	; (8009994 <TIM_OC5_SetConfig+0xc4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d109      	bne.n	800995e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	021b      	lsls	r3, r3, #8
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	4313      	orrs	r3, r2
 800995c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	621a      	str	r2, [r3, #32]
}
 8009978:	bf00      	nop
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	40012c00 	.word	0x40012c00
 8009988:	40013400 	.word	0x40013400
 800998c:	40014000 	.word	0x40014000
 8009990:	40014400 	.word	0x40014400
 8009994:	40014800 	.word	0x40014800

08009998 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	051b      	lsls	r3, r3, #20
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a18      	ldr	r2, [pc, #96]	; (8009a50 <TIM_OC6_SetConfig+0xb8>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00f      	beq.n	8009a14 <TIM_OC6_SetConfig+0x7c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <TIM_OC6_SetConfig+0xbc>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00b      	beq.n	8009a14 <TIM_OC6_SetConfig+0x7c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <TIM_OC6_SetConfig+0xc0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d007      	beq.n	8009a14 <TIM_OC6_SetConfig+0x7c>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a15      	ldr	r2, [pc, #84]	; (8009a5c <TIM_OC6_SetConfig+0xc4>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_OC6_SetConfig+0x7c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <TIM_OC6_SetConfig+0xc8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d109      	bne.n	8009a28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	029b      	lsls	r3, r3, #10
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	621a      	str	r2, [r3, #32]
}
 8009a42:	bf00      	nop
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40012c00 	.word	0x40012c00
 8009a54:	40013400 	.word	0x40013400
 8009a58:	40014000 	.word	0x40014000
 8009a5c:	40014400 	.word	0x40014400
 8009a60:	40014800 	.word	0x40014800

08009a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	f023 0201 	bic.w	r2, r3, #1
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f023 030a 	bic.w	r3, r3, #10
 8009aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	621a      	str	r2, [r3, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b087      	sub	sp, #28
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	f023 0210 	bic.w	r2, r3, #16
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	031b      	lsls	r3, r3, #12
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	621a      	str	r2, [r3, #32]
}
 8009b16:	bf00      	nop
 8009b18:	371c      	adds	r7, #28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	f043 0307 	orr.w	r3, r3, #7
 8009b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	609a      	str	r2, [r3, #8]
}
 8009b50:	bf00      	nop
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	021a      	lsls	r2, r3, #8
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	609a      	str	r2, [r3, #8]
}
 8009b90:	bf00      	nop
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f003 031f 	and.w	r3, r3, #31
 8009bae:	2201      	movs	r2, #1
 8009bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a1a      	ldr	r2, [r3, #32]
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	401a      	ands	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f003 031f 	and.w	r3, r3, #31
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	621a      	str	r2, [r3, #32]
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
	...

08009be8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d109      	bne.n	8009c0c <HAL_TIMEx_PWMN_Start+0x24>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	bf14      	ite	ne
 8009c04:	2301      	movne	r3, #1
 8009c06:	2300      	moveq	r3, #0
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	e022      	b.n	8009c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d109      	bne.n	8009c26 <HAL_TIMEx_PWMN_Start+0x3e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	bf14      	ite	ne
 8009c1e:	2301      	movne	r3, #1
 8009c20:	2300      	moveq	r3, #0
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	e015      	b.n	8009c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d109      	bne.n	8009c40 <HAL_TIMEx_PWMN_Start+0x58>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	bf14      	ite	ne
 8009c38:	2301      	movne	r3, #1
 8009c3a:	2300      	moveq	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	e008      	b.n	8009c52 <HAL_TIMEx_PWMN_Start+0x6a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	bf14      	ite	ne
 8009c4c:	2301      	movne	r3, #1
 8009c4e:	2300      	moveq	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e069      	b.n	8009d2e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d104      	bne.n	8009c6a <HAL_TIMEx_PWMN_Start+0x82>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c68:	e013      	b.n	8009c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b04      	cmp	r3, #4
 8009c6e:	d104      	bne.n	8009c7a <HAL_TIMEx_PWMN_Start+0x92>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2202      	movs	r2, #2
 8009c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c78:	e00b      	b.n	8009c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d104      	bne.n	8009c8a <HAL_TIMEx_PWMN_Start+0xa2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c88:	e003      	b.n	8009c92 <HAL_TIMEx_PWMN_Start+0xaa>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2204      	movs	r2, #4
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fa1e 	bl	800a0dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a20      	ldr	r2, [pc, #128]	; (8009d38 <HAL_TIMEx_PWMN_Start+0x150>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d018      	beq.n	8009cec <HAL_TIMEx_PWMN_Start+0x104>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc2:	d013      	beq.n	8009cec <HAL_TIMEx_PWMN_Start+0x104>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1c      	ldr	r2, [pc, #112]	; (8009d3c <HAL_TIMEx_PWMN_Start+0x154>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d00e      	beq.n	8009cec <HAL_TIMEx_PWMN_Start+0x104>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a1b      	ldr	r2, [pc, #108]	; (8009d40 <HAL_TIMEx_PWMN_Start+0x158>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d009      	beq.n	8009cec <HAL_TIMEx_PWMN_Start+0x104>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a19      	ldr	r2, [pc, #100]	; (8009d44 <HAL_TIMEx_PWMN_Start+0x15c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d004      	beq.n	8009cec <HAL_TIMEx_PWMN_Start+0x104>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a18      	ldr	r2, [pc, #96]	; (8009d48 <HAL_TIMEx_PWMN_Start+0x160>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d115      	bne.n	8009d18 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	4b16      	ldr	r3, [pc, #88]	; (8009d4c <HAL_TIMEx_PWMN_Start+0x164>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b06      	cmp	r3, #6
 8009cfc:	d015      	beq.n	8009d2a <HAL_TIMEx_PWMN_Start+0x142>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d04:	d011      	beq.n	8009d2a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0201 	orr.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d16:	e008      	b.n	8009d2a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0201 	orr.w	r2, r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	e000      	b.n	8009d2c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40000400 	.word	0x40000400
 8009d40:	40000800 	.word	0x40000800
 8009d44:	40013400 	.word	0x40013400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	00010007 	.word	0x00010007

08009d50 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 f9ba 	bl	800a0dc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6a1a      	ldr	r2, [r3, #32]
 8009d6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d72:	4013      	ands	r3, r2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10f      	bne.n	8009d98 <HAL_TIMEx_PWMN_Stop+0x48>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	f244 4344 	movw	r3, #17476	; 0x4444
 8009d82:	4013      	ands	r3, r2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d107      	bne.n	8009d98 <HAL_TIMEx_PWMN_Stop+0x48>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6a1a      	ldr	r2, [r3, #32]
 8009d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10f      	bne.n	8009dc8 <HAL_TIMEx_PWMN_Stop+0x78>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6a1a      	ldr	r2, [r3, #32]
 8009dae:	f244 4344 	movw	r3, #17476	; 0x4444
 8009db2:	4013      	ands	r3, r2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d107      	bne.n	8009dc8 <HAL_TIMEx_PWMN_Stop+0x78>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0201 	bic.w	r2, r2, #1
 8009dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <HAL_TIMEx_PWMN_Stop+0x88>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dd6:	e013      	b.n	8009e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d104      	bne.n	8009de8 <HAL_TIMEx_PWMN_Stop+0x98>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009de6:	e00b      	b.n	8009e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b08      	cmp	r3, #8
 8009dec:	d104      	bne.n	8009df8 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009df6:	e003      	b.n	8009e00 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e065      	b.n	8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a2c      	ldr	r2, [pc, #176]	; (8009efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d004      	beq.n	8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2b      	ldr	r2, [pc, #172]	; (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d108      	bne.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1b      	ldr	r2, [pc, #108]	; (8009efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e9a:	d013      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a18      	ldr	r2, [pc, #96]	; (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a17      	ldr	r2, [pc, #92]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a12      	ldr	r2, [pc, #72]	; (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d10c      	bne.n	8009ede <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	40012c00 	.word	0x40012c00
 8009f00:	40013400 	.word	0x40013400
 8009f04:	40000400 	.word	0x40000400
 8009f08:	40000800 	.word	0x40000800
 8009f0c:	40014000 	.word	0x40014000

08009f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e087      	b.n	800a03c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	041b      	lsls	r3, r3, #16
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a27      	ldr	r2, [pc, #156]	; (800a048 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d004      	beq.n	8009fba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a25      	ldr	r2, [pc, #148]	; (800a04c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d106      	bne.n	8009fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a1e      	ldr	r2, [pc, #120]	; (800a048 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1d      	ldr	r2, [pc, #116]	; (800a04c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d126      	bne.n	800a02a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe6:	051b      	lsls	r3, r3, #20
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	4313      	orrs	r3, r2
 800a006:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a0e      	ldr	r2, [pc, #56]	; (800a048 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d004      	beq.n	800a01c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a0d      	ldr	r2, [pc, #52]	; (800a04c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d106      	bne.n	800a02a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	40012c00 	.word	0x40012c00
 800a04c:	40013400 	.word	0x40013400

0800a050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f003 031f 	and.w	r3, r3, #31
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a1a      	ldr	r2, [r3, #32]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	43db      	mvns	r3, r3
 800a0fe:	401a      	ands	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a1a      	ldr	r2, [r3, #32]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f003 031f 	and.w	r3, r3, #31
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	fa01 f303 	lsl.w	r3, r1, r3
 800a114:	431a      	orrs	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	621a      	str	r2, [r3, #32]
}
 800a11a:	bf00      	nop
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d101      	bne.n	800a138 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e042      	b.n	800a1be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7f9 f926 	bl	800339c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2224      	movs	r2, #36	; 0x24
 800a154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0201 	bic.w	r2, r2, #1
 800a166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc01 	bl	800a970 <UART_SetConfig>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e022      	b.n	800a1be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fec1 	bl	800af08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	685a      	ldr	r2, [r3, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a194:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0201 	orr.w	r2, r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 ff48 	bl	800b04c <UART_CheckIdleState>
 800a1bc:	4603      	mov	r3, r0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08a      	sub	sp, #40	; 0x28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1dc:	2b20      	cmp	r3, #32
 800a1de:	d17a      	bne.n	800a2d6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_UART_Transmit_DMA+0x24>
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e073      	b.n	800a2d8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d101      	bne.n	800a1fe <HAL_UART_Transmit_DMA+0x36>
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e06c      	b.n	800a2d8 <HAL_UART_Transmit_DMA+0x110>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	88fa      	ldrh	r2, [r7, #6]
 800a210:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2221      	movs	r2, #33	; 0x21
 800a228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02c      	beq.n	800a28e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a238:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <HAL_UART_Transmit_DMA+0x118>)
 800a23a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a240:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <HAL_UART_Transmit_DMA+0x11c>)
 800a242:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a248:	4a27      	ldr	r2, [pc, #156]	; (800a2e8 <HAL_UART_Transmit_DMA+0x120>)
 800a24a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a250:	2200      	movs	r2, #0
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25c:	4619      	mov	r1, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3328      	adds	r3, #40	; 0x28
 800a264:	461a      	mov	r2, r3
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	f7fb fdc4 	bl	8005df4 <HAL_DMA_Start_IT>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00d      	beq.n	800a28e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2210      	movs	r2, #16
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e024      	b.n	800a2d8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2240      	movs	r2, #64	; 0x40
 800a294:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2be:	623a      	str	r2, [r7, #32]
 800a2c0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	69f9      	ldr	r1, [r7, #28]
 800a2c4:	6a3a      	ldr	r2, [r7, #32]
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e5      	bne.n	800a29e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e000      	b.n	800a2d8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
  }
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3728      	adds	r7, #40	; 0x28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0800b3c1 	.word	0x0800b3c1
 800a2e4:	0800b45b 	.word	0x0800b45b
 800a2e8:	0800b477 	.word	0x0800b477

0800a2ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b0ba      	sub	sp, #232	; 0xe8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a312:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a316:	f640 030f 	movw	r3, #2063	; 0x80f
 800a31a:	4013      	ands	r3, r2
 800a31c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11b      	bne.n	800a360 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a32c:	f003 0320 	and.w	r3, r3, #32
 800a330:	2b00      	cmp	r3, #0
 800a332:	d015      	beq.n	800a360 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a338:	f003 0320 	and.w	r3, r3, #32
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d105      	bne.n	800a34c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d009      	beq.n	800a360 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 82d6 	beq.w	800a902 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
      }
      return;
 800a35e:	e2d0      	b.n	800a902 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 811f 	beq.w	800a5a8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a36a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a36e:	4b8b      	ldr	r3, [pc, #556]	; (800a59c <HAL_UART_IRQHandler+0x2b0>)
 800a370:	4013      	ands	r3, r2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a376:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a37a:	4b89      	ldr	r3, [pc, #548]	; (800a5a0 <HAL_UART_IRQHandler+0x2b4>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 8112 	beq.w	800a5a8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d011      	beq.n	800a3b4 <HAL_UART_IRQHandler+0xc8>
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3aa:	f043 0201 	orr.w	r2, r3, #1
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d011      	beq.n	800a3e4 <HAL_UART_IRQHandler+0xf8>
 800a3c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3da:	f043 0204 	orr.w	r2, r3, #4
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d011      	beq.n	800a414 <HAL_UART_IRQHandler+0x128>
 800a3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2204      	movs	r2, #4
 800a402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a40a:	f043 0202 	orr.w	r2, r3, #2
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d017      	beq.n	800a450 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a424:	f003 0320 	and.w	r3, r3, #32
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d105      	bne.n	800a438 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a42c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a430:	4b5a      	ldr	r3, [pc, #360]	; (800a59c <HAL_UART_IRQHandler+0x2b0>)
 800a432:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2208      	movs	r2, #8
 800a43e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a446:	f043 0208 	orr.w	r2, r3, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d012      	beq.n	800a482 <HAL_UART_IRQHandler+0x196>
 800a45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00c      	beq.n	800a482 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a478:	f043 0220 	orr.w	r2, r3, #32
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 823c 	beq.w	800a906 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a492:	f003 0320 	and.w	r3, r3, #32
 800a496:	2b00      	cmp	r3, #0
 800a498:	d013      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a49a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d005      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d04f      	beq.n	800a586 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 ff04 	bl	800b2f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d141      	bne.n	800a57e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3308      	adds	r3, #8
 800a500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a504:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3308      	adds	r3, #8
 800a522:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a526:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a52a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a53e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1d9      	bne.n	800a4fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d013      	beq.n	800a576 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a552:	4a14      	ldr	r2, [pc, #80]	; (800a5a4 <HAL_UART_IRQHandler+0x2b8>)
 800a554:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fb fd1e 	bl	8005f9c <HAL_DMA_Abort_IT>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d017      	beq.n	800a596 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a574:	e00f      	b.n	800a596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f9e4 	bl	800a944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a57c:	e00b      	b.n	800a596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f9e0 	bl	800a944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a584:	e007      	b.n	800a596 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f9dc 	bl	800a944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a594:	e1b7      	b.n	800a906 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a596:	bf00      	nop
    return;
 800a598:	e1b5      	b.n	800a906 <HAL_UART_IRQHandler+0x61a>
 800a59a:	bf00      	nop
 800a59c:	10000001 	.word	0x10000001
 800a5a0:	04000120 	.word	0x04000120
 800a5a4:	0800b4f7 	.word	0x0800b4f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	f040 814a 	bne.w	800a846 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b6:	f003 0310 	and.w	r3, r3, #16
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 8143 	beq.w	800a846 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 813c 	beq.w	800a846 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2210      	movs	r2, #16
 800a5d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e0:	2b40      	cmp	r3, #64	; 0x40
 800a5e2:	f040 80b5 	bne.w	800a750 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a5f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8187 	beq.w	800a90a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a606:	429a      	cmp	r2, r3
 800a608:	f080 817f 	bcs.w	800a90a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a612:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	f040 8086 	bne.w	800a734 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a634:	e853 3f00 	ldrex	r3, [r3]
 800a638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a63c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	461a      	mov	r2, r3
 800a64e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a656:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a65e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a66a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1da      	bne.n	800a628 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a684:	f023 0301 	bic.w	r3, r3, #1
 800a688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3308      	adds	r3, #8
 800a692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a696:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a69a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a69e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e1      	bne.n	800a672 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a6be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a6d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a6d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a6d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e3      	bne.n	800a6ae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a704:	f023 0310 	bic.w	r3, r3, #16
 800a708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a716:	65bb      	str	r3, [r7, #88]	; 0x58
 800a718:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a71c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a71e:	e841 2300 	strex	r3, r2, [r1]
 800a722:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1e4      	bne.n	800a6f4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb fbdb 	bl	8005eea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a740:	b29b      	uxth	r3, r3
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	b29b      	uxth	r3, r3
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f905 	bl	800a958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a74e:	e0dc      	b.n	800a90a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 80ce 	beq.w	800a90e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 80c9 	beq.w	800a90e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a79e:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e4      	bne.n	800a77c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a7da:	633a      	str	r2, [r7, #48]	; 0x30
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e2:	e841 2300 	strex	r3, r2, [r1]
 800a7e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1e1      	bne.n	800a7b2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0310 	bic.w	r3, r3, #16
 800a816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	69b9      	ldr	r1, [r7, #24]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	617b      	str	r3, [r7, #20]
   return(result);
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e4      	bne.n	800a802 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f88a 	bl	800a958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a844:	e063      	b.n	800a90e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a84a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00e      	beq.n	800a870 <HAL_UART_IRQHandler+0x584>
 800a852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d008      	beq.n	800a870 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fe85 	bl	800b578 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a86e:	e051      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d014      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a884:	2b00      	cmp	r3, #0
 800a886:	d105      	bne.n	800a894 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a88c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d008      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d03a      	beq.n	800a912 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
    }
    return;
 800a8a4:	e035      	b.n	800a912 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d009      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x5da>
 800a8b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fe2f 	bl	800b522 <UART_EndTransmit_IT>
    return;
 800a8c4:	e026      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x5fa>
 800a8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fe5e 	bl	800b5a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8e4:	e016      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d010      	beq.n	800a914 <HAL_UART_IRQHandler+0x628>
 800a8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da0c      	bge.n	800a914 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fe46 	bl	800b58c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a900:	e008      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
      return;
 800a902:	bf00      	nop
 800a904:	e006      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
    return;
 800a906:	bf00      	nop
 800a908:	e004      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
      return;
 800a90a:	bf00      	nop
 800a90c:	e002      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
      return;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <HAL_UART_IRQHandler+0x628>
    return;
 800a912:	bf00      	nop
  }
}
 800a914:	37e8      	adds	r7, #232	; 0xe8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop

0800a91c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a974:	b08c      	sub	sp, #48	; 0x30
 800a976:	af00      	add	r7, sp, #0
 800a978:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	431a      	orrs	r2, r3
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	431a      	orrs	r2, r3
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	4313      	orrs	r3, r2
 800a996:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4bab      	ldr	r3, [pc, #684]	; (800ac4c <UART_SetConfig+0x2dc>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	6812      	ldr	r2, [r2, #0]
 800a9a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4aa0      	ldr	r2, [pc, #640]	; (800ac50 <UART_SetConfig+0x2e0>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d004      	beq.n	800a9dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a9e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	f023 010f 	bic.w	r1, r3, #15
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a91      	ldr	r2, [pc, #580]	; (800ac54 <UART_SetConfig+0x2e4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d125      	bne.n	800aa60 <UART_SetConfig+0xf0>
 800aa14:	4b90      	ldr	r3, [pc, #576]	; (800ac58 <UART_SetConfig+0x2e8>)
 800aa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d81a      	bhi.n	800aa58 <UART_SetConfig+0xe8>
 800aa22:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <UART_SetConfig+0xb8>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aa49 	.word	0x0800aa49
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa51 	.word	0x0800aa51
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa3e:	e0d6      	b.n	800abee <UART_SetConfig+0x27e>
 800aa40:	2302      	movs	r3, #2
 800aa42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa46:	e0d2      	b.n	800abee <UART_SetConfig+0x27e>
 800aa48:	2304      	movs	r3, #4
 800aa4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa4e:	e0ce      	b.n	800abee <UART_SetConfig+0x27e>
 800aa50:	2308      	movs	r3, #8
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa56:	e0ca      	b.n	800abee <UART_SetConfig+0x27e>
 800aa58:	2310      	movs	r3, #16
 800aa5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa5e:	e0c6      	b.n	800abee <UART_SetConfig+0x27e>
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a7d      	ldr	r2, [pc, #500]	; (800ac5c <UART_SetConfig+0x2ec>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d138      	bne.n	800aadc <UART_SetConfig+0x16c>
 800aa6a:	4b7b      	ldr	r3, [pc, #492]	; (800ac58 <UART_SetConfig+0x2e8>)
 800aa6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa70:	f003 030c 	and.w	r3, r3, #12
 800aa74:	2b0c      	cmp	r3, #12
 800aa76:	d82d      	bhi.n	800aad4 <UART_SetConfig+0x164>
 800aa78:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <UART_SetConfig+0x110>)
 800aa7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7e:	bf00      	nop
 800aa80:	0800aab5 	.word	0x0800aab5
 800aa84:	0800aad5 	.word	0x0800aad5
 800aa88:	0800aad5 	.word	0x0800aad5
 800aa8c:	0800aad5 	.word	0x0800aad5
 800aa90:	0800aac5 	.word	0x0800aac5
 800aa94:	0800aad5 	.word	0x0800aad5
 800aa98:	0800aad5 	.word	0x0800aad5
 800aa9c:	0800aad5 	.word	0x0800aad5
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aad5 	.word	0x0800aad5
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	0800aad5 	.word	0x0800aad5
 800aab0:	0800aacd 	.word	0x0800aacd
 800aab4:	2300      	movs	r3, #0
 800aab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaba:	e098      	b.n	800abee <UART_SetConfig+0x27e>
 800aabc:	2302      	movs	r3, #2
 800aabe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac2:	e094      	b.n	800abee <UART_SetConfig+0x27e>
 800aac4:	2304      	movs	r3, #4
 800aac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaca:	e090      	b.n	800abee <UART_SetConfig+0x27e>
 800aacc:	2308      	movs	r3, #8
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad2:	e08c      	b.n	800abee <UART_SetConfig+0x27e>
 800aad4:	2310      	movs	r3, #16
 800aad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aada:	e088      	b.n	800abee <UART_SetConfig+0x27e>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a5f      	ldr	r2, [pc, #380]	; (800ac60 <UART_SetConfig+0x2f0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d125      	bne.n	800ab32 <UART_SetConfig+0x1c2>
 800aae6:	4b5c      	ldr	r3, [pc, #368]	; (800ac58 <UART_SetConfig+0x2e8>)
 800aae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aaf0:	2b30      	cmp	r3, #48	; 0x30
 800aaf2:	d016      	beq.n	800ab22 <UART_SetConfig+0x1b2>
 800aaf4:	2b30      	cmp	r3, #48	; 0x30
 800aaf6:	d818      	bhi.n	800ab2a <UART_SetConfig+0x1ba>
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	d00a      	beq.n	800ab12 <UART_SetConfig+0x1a2>
 800aafc:	2b20      	cmp	r3, #32
 800aafe:	d814      	bhi.n	800ab2a <UART_SetConfig+0x1ba>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <UART_SetConfig+0x19a>
 800ab04:	2b10      	cmp	r3, #16
 800ab06:	d008      	beq.n	800ab1a <UART_SetConfig+0x1aa>
 800ab08:	e00f      	b.n	800ab2a <UART_SetConfig+0x1ba>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab10:	e06d      	b.n	800abee <UART_SetConfig+0x27e>
 800ab12:	2302      	movs	r3, #2
 800ab14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab18:	e069      	b.n	800abee <UART_SetConfig+0x27e>
 800ab1a:	2304      	movs	r3, #4
 800ab1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab20:	e065      	b.n	800abee <UART_SetConfig+0x27e>
 800ab22:	2308      	movs	r3, #8
 800ab24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab28:	e061      	b.n	800abee <UART_SetConfig+0x27e>
 800ab2a:	2310      	movs	r3, #16
 800ab2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab30:	e05d      	b.n	800abee <UART_SetConfig+0x27e>
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a4b      	ldr	r2, [pc, #300]	; (800ac64 <UART_SetConfig+0x2f4>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d125      	bne.n	800ab88 <UART_SetConfig+0x218>
 800ab3c:	4b46      	ldr	r3, [pc, #280]	; (800ac58 <UART_SetConfig+0x2e8>)
 800ab3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab46:	2bc0      	cmp	r3, #192	; 0xc0
 800ab48:	d016      	beq.n	800ab78 <UART_SetConfig+0x208>
 800ab4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ab4c:	d818      	bhi.n	800ab80 <UART_SetConfig+0x210>
 800ab4e:	2b80      	cmp	r3, #128	; 0x80
 800ab50:	d00a      	beq.n	800ab68 <UART_SetConfig+0x1f8>
 800ab52:	2b80      	cmp	r3, #128	; 0x80
 800ab54:	d814      	bhi.n	800ab80 <UART_SetConfig+0x210>
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <UART_SetConfig+0x1f0>
 800ab5a:	2b40      	cmp	r3, #64	; 0x40
 800ab5c:	d008      	beq.n	800ab70 <UART_SetConfig+0x200>
 800ab5e:	e00f      	b.n	800ab80 <UART_SetConfig+0x210>
 800ab60:	2300      	movs	r3, #0
 800ab62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab66:	e042      	b.n	800abee <UART_SetConfig+0x27e>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab6e:	e03e      	b.n	800abee <UART_SetConfig+0x27e>
 800ab70:	2304      	movs	r3, #4
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab76:	e03a      	b.n	800abee <UART_SetConfig+0x27e>
 800ab78:	2308      	movs	r3, #8
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab7e:	e036      	b.n	800abee <UART_SetConfig+0x27e>
 800ab80:	2310      	movs	r3, #16
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab86:	e032      	b.n	800abee <UART_SetConfig+0x27e>
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a30      	ldr	r2, [pc, #192]	; (800ac50 <UART_SetConfig+0x2e0>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d12a      	bne.n	800abe8 <UART_SetConfig+0x278>
 800ab92:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <UART_SetConfig+0x2e8>)
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aba0:	d01a      	beq.n	800abd8 <UART_SetConfig+0x268>
 800aba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aba6:	d81b      	bhi.n	800abe0 <UART_SetConfig+0x270>
 800aba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abac:	d00c      	beq.n	800abc8 <UART_SetConfig+0x258>
 800abae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abb2:	d815      	bhi.n	800abe0 <UART_SetConfig+0x270>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <UART_SetConfig+0x250>
 800abb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abbc:	d008      	beq.n	800abd0 <UART_SetConfig+0x260>
 800abbe:	e00f      	b.n	800abe0 <UART_SetConfig+0x270>
 800abc0:	2300      	movs	r3, #0
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc6:	e012      	b.n	800abee <UART_SetConfig+0x27e>
 800abc8:	2302      	movs	r3, #2
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abce:	e00e      	b.n	800abee <UART_SetConfig+0x27e>
 800abd0:	2304      	movs	r3, #4
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd6:	e00a      	b.n	800abee <UART_SetConfig+0x27e>
 800abd8:	2308      	movs	r3, #8
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abde:	e006      	b.n	800abee <UART_SetConfig+0x27e>
 800abe0:	2310      	movs	r3, #16
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abe6:	e002      	b.n	800abee <UART_SetConfig+0x27e>
 800abe8:	2310      	movs	r3, #16
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a17      	ldr	r2, [pc, #92]	; (800ac50 <UART_SetConfig+0x2e0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	f040 80a8 	bne.w	800ad4a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d834      	bhi.n	800ac6c <UART_SetConfig+0x2fc>
 800ac02:	a201      	add	r2, pc, #4	; (adr r2, 800ac08 <UART_SetConfig+0x298>)
 800ac04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac08:	0800ac2d 	.word	0x0800ac2d
 800ac0c:	0800ac6d 	.word	0x0800ac6d
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac6d 	.word	0x0800ac6d
 800ac18:	0800ac3b 	.word	0x0800ac3b
 800ac1c:	0800ac6d 	.word	0x0800ac6d
 800ac20:	0800ac6d 	.word	0x0800ac6d
 800ac24:	0800ac6d 	.word	0x0800ac6d
 800ac28:	0800ac43 	.word	0x0800ac43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac2c:	f7fd f8d4 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 800ac30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac32:	e021      	b.n	800ac78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac34:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <UART_SetConfig+0x2f8>)
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac38:	e01e      	b.n	800ac78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac3a:	f7fd f861 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800ac3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac40:	e01a      	b.n	800ac78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac48:	e016      	b.n	800ac78 <UART_SetConfig+0x308>
 800ac4a:	bf00      	nop
 800ac4c:	cfff69f3 	.word	0xcfff69f3
 800ac50:	40008000 	.word	0x40008000
 800ac54:	40013800 	.word	0x40013800
 800ac58:	40021000 	.word	0x40021000
 800ac5c:	40004400 	.word	0x40004400
 800ac60:	40004800 	.word	0x40004800
 800ac64:	40004c00 	.word	0x40004c00
 800ac68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ac76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 812a 	beq.w	800aed4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	4a9e      	ldr	r2, [pc, #632]	; (800af00 <UART_SetConfig+0x590>)
 800ac86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac92:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	4413      	add	r3, r2
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d305      	bcc.n	800acb0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d903      	bls.n	800acb8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800acb6:	e10d      	b.n	800aed4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	2200      	movs	r2, #0
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	60fa      	str	r2, [r7, #12]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	4a8e      	ldr	r2, [pc, #568]	; (800af00 <UART_SetConfig+0x590>)
 800acc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acca:	b29b      	uxth	r3, r3
 800accc:	2200      	movs	r2, #0
 800acce:	603b      	str	r3, [r7, #0]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acda:	f7f5 faf9 	bl	80002d0 <__aeabi_uldivmod>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4610      	mov	r0, r2
 800ace4:	4619      	mov	r1, r3
 800ace6:	f04f 0200 	mov.w	r2, #0
 800acea:	f04f 0300 	mov.w	r3, #0
 800acee:	020b      	lsls	r3, r1, #8
 800acf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acf4:	0202      	lsls	r2, r0, #8
 800acf6:	6979      	ldr	r1, [r7, #20]
 800acf8:	6849      	ldr	r1, [r1, #4]
 800acfa:	0849      	lsrs	r1, r1, #1
 800acfc:	2000      	movs	r0, #0
 800acfe:	460c      	mov	r4, r1
 800ad00:	4605      	mov	r5, r0
 800ad02:	eb12 0804 	adds.w	r8, r2, r4
 800ad06:	eb43 0905 	adc.w	r9, r3, r5
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	469a      	mov	sl, r3
 800ad12:	4693      	mov	fp, r2
 800ad14:	4652      	mov	r2, sl
 800ad16:	465b      	mov	r3, fp
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	f7f5 fad8 	bl	80002d0 <__aeabi_uldivmod>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4613      	mov	r3, r2
 800ad26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad2e:	d308      	bcc.n	800ad42 <UART_SetConfig+0x3d2>
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad36:	d204      	bcs.n	800ad42 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6a3a      	ldr	r2, [r7, #32]
 800ad3e:	60da      	str	r2, [r3, #12]
 800ad40:	e0c8      	b.n	800aed4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad48:	e0c4      	b.n	800aed4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad52:	d167      	bne.n	800ae24 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800ad54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad58:	2b08      	cmp	r3, #8
 800ad5a:	d828      	bhi.n	800adae <UART_SetConfig+0x43e>
 800ad5c:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <UART_SetConfig+0x3f4>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800ad89 	.word	0x0800ad89
 800ad68:	0800ad91 	.word	0x0800ad91
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	0800adaf 	.word	0x0800adaf
 800ad74:	0800ad9f 	.word	0x0800ad9f
 800ad78:	0800adaf 	.word	0x0800adaf
 800ad7c:	0800adaf 	.word	0x0800adaf
 800ad80:	0800adaf 	.word	0x0800adaf
 800ad84:	0800ada7 	.word	0x0800ada7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad88:	f7fd f826 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 800ad8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad8e:	e014      	b.n	800adba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad90:	f7fd f838 	bl	8007e04 <HAL_RCC_GetPCLK2Freq>
 800ad94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad96:	e010      	b.n	800adba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad98:	4b5a      	ldr	r3, [pc, #360]	; (800af04 <UART_SetConfig+0x594>)
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad9c:	e00d      	b.n	800adba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad9e:	f7fc ffaf 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800ada2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ada4:	e009      	b.n	800adba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ada6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adac:	e005      	b.n	800adba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800adae:	2300      	movs	r3, #0
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800adb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8089 	beq.w	800aed4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	4a4e      	ldr	r2, [pc, #312]	; (800af00 <UART_SetConfig+0x590>)
 800adc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adcc:	461a      	mov	r2, r3
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	fbb3 f3f2 	udiv	r3, r3, r2
 800add4:	005a      	lsls	r2, r3, #1
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	085b      	lsrs	r3, r3, #1
 800addc:	441a      	add	r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	d916      	bls.n	800ae1c <UART_SetConfig+0x4ac>
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf4:	d212      	bcs.n	800ae1c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	f023 030f 	bic.w	r3, r3, #15
 800adfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f003 0307 	and.w	r3, r3, #7
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	8bfb      	ldrh	r3, [r7, #30]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	8bfa      	ldrh	r2, [r7, #30]
 800ae18:	60da      	str	r2, [r3, #12]
 800ae1a:	e05b      	b.n	800aed4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae22:	e057      	b.n	800aed4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d828      	bhi.n	800ae7e <UART_SetConfig+0x50e>
 800ae2c:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <UART_SetConfig+0x4c4>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800ae59 	.word	0x0800ae59
 800ae38:	0800ae61 	.word	0x0800ae61
 800ae3c:	0800ae69 	.word	0x0800ae69
 800ae40:	0800ae7f 	.word	0x0800ae7f
 800ae44:	0800ae6f 	.word	0x0800ae6f
 800ae48:	0800ae7f 	.word	0x0800ae7f
 800ae4c:	0800ae7f 	.word	0x0800ae7f
 800ae50:	0800ae7f 	.word	0x0800ae7f
 800ae54:	0800ae77 	.word	0x0800ae77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae58:	f7fc ffbe 	bl	8007dd8 <HAL_RCC_GetPCLK1Freq>
 800ae5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae5e:	e014      	b.n	800ae8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae60:	f7fc ffd0 	bl	8007e04 <HAL_RCC_GetPCLK2Freq>
 800ae64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae66:	e010      	b.n	800ae8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae68:	4b26      	ldr	r3, [pc, #152]	; (800af04 <UART_SetConfig+0x594>)
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae6c:	e00d      	b.n	800ae8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae6e:	f7fc ff47 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800ae72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae74:	e009      	b.n	800ae8a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae7c:	e005      	b.n	800ae8a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae88:	bf00      	nop
    }

    if (pclk != 0U)
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d021      	beq.n	800aed4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae94:	4a1a      	ldr	r2, [pc, #104]	; (800af00 <UART_SetConfig+0x590>)
 800ae96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	085b      	lsrs	r3, r3, #1
 800aea8:	441a      	add	r2, r3
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	2b0f      	cmp	r3, #15
 800aeb8:	d909      	bls.n	800aece <UART_SetConfig+0x55e>
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec0:	d205      	bcs.n	800aece <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60da      	str	r2, [r3, #12]
 800aecc:	e002      	b.n	800aed4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2201      	movs	r2, #1
 800aee0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2200      	movs	r2, #0
 800aee8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2200      	movs	r2, #0
 800aeee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aef0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3730      	adds	r7, #48	; 0x30
 800aef8:	46bd      	mov	sp, r7
 800aefa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aefe:	bf00      	nop
 800af00:	0800c1f8 	.word	0x0800c1f8
 800af04:	00f42400 	.word	0x00f42400

0800af08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00a      	beq.n	800af32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af58:	f003 0304 	and.w	r3, r3, #4
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	f003 0310 	and.w	r3, r3, #16
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00a      	beq.n	800afba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01a      	beq.n	800b01e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b006:	d10a      	bne.n	800b01e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00a      	beq.n	800b040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	605a      	str	r2, [r3, #4]
  }
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b086      	sub	sp, #24
 800b050:	af02      	add	r7, sp, #8
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b05c:	f7f8 faba 	bl	80035d4 <HAL_GetTick>
 800b060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d10e      	bne.n	800b08e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f82f 	bl	800b0e2 <UART_WaitOnFlagUntilTimeout>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e025      	b.n	800b0da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d10e      	bne.n	800b0ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b09c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f819 	bl	800b0e2 <UART_WaitOnFlagUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e00f      	b.n	800b0da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b09c      	sub	sp, #112	; 0x70
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	603b      	str	r3, [r7, #0]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f2:	e0a9      	b.n	800b248 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	f000 80a5 	beq.w	800b248 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0fe:	f7f8 fa69 	bl	80035d4 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d302      	bcc.n	800b114 <UART_WaitOnFlagUntilTimeout+0x32>
 800b10e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b110:	2b00      	cmp	r3, #0
 800b112:	d140      	bne.n	800b196 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b124:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b128:	667b      	str	r3, [r7, #100]	; 0x64
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b132:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b134:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b138:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e6      	bne.n	800b114 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b158:	f023 0301 	bic.w	r3, r3, #1
 800b15c:	663b      	str	r3, [r7, #96]	; 0x60
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b166:	64ba      	str	r2, [r7, #72]	; 0x48
 800b168:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b16c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e5      	bne.n	800b146 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e069      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0304 	and.w	r3, r3, #4
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d051      	beq.n	800b248 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b2:	d149      	bne.n	800b248 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1e4:	e841 2300 	strex	r3, r2, [r1]
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1e6      	bne.n	800b1be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	f023 0301 	bic.w	r3, r3, #1
 800b206:	66bb      	str	r3, [r7, #104]	; 0x68
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	3308      	adds	r3, #8
 800b20e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b210:	623a      	str	r2, [r7, #32]
 800b212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	69f9      	ldr	r1, [r7, #28]
 800b216:	6a3a      	ldr	r2, [r7, #32]
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e5      	bne.n	800b1f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2220      	movs	r2, #32
 800b228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2220      	movs	r2, #32
 800b230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2220      	movs	r2, #32
 800b238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b244:	2303      	movs	r3, #3
 800b246:	e010      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	69da      	ldr	r2, [r3, #28]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4013      	ands	r3, r2
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	429a      	cmp	r2, r3
 800b256:	bf0c      	ite	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	2300      	movne	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	461a      	mov	r2, r3
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	429a      	cmp	r2, r3
 800b264:	f43f af46 	beq.w	800b0f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3770      	adds	r7, #112	; 0x70
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b272:	b480      	push	{r7}
 800b274:	b08f      	sub	sp, #60	; 0x3c
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	e853 3f00 	ldrex	r3, [r3]
 800b286:	61fb      	str	r3, [r7, #28]
   return(result);
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	461a      	mov	r2, r3
 800b296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b29a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a0:	e841 2300 	strex	r3, r2, [r1]
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1e6      	bne.n	800b27a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	e853 3f00 	ldrex	r3, [r3]
 800b2ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b2c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2cc:	61ba      	str	r2, [r7, #24]
 800b2ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d0:	6979      	ldr	r1, [r7, #20]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	e841 2300 	strex	r3, r2, [r1]
 800b2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e5      	bne.n	800b2ac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b2e8:	bf00      	nop
 800b2ea:	373c      	adds	r7, #60	; 0x3c
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b095      	sub	sp, #84	; 0x54
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b304:	e853 3f00 	ldrex	r3, [r3]
 800b308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b310:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b31a:	643b      	str	r3, [r7, #64]	; 0x40
 800b31c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1e6      	bne.n	800b2fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3308      	adds	r3, #8
 800b334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	e853 3f00 	ldrex	r3, [r3]
 800b33c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	64bb      	str	r3, [r7, #72]	; 0x48
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3308      	adds	r3, #8
 800b350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b352:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e3      	bne.n	800b32e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d118      	bne.n	800b3a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f023 0310 	bic.w	r3, r3, #16
 800b382:	647b      	str	r3, [r7, #68]	; 0x44
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38c:	61bb      	str	r3, [r7, #24]
 800b38e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6979      	ldr	r1, [r7, #20]
 800b392:	69ba      	ldr	r2, [r7, #24]
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	613b      	str	r3, [r7, #16]
   return(result);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e6      	bne.n	800b36e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b3b4:	bf00      	nop
 800b3b6:	3754      	adds	r7, #84	; 0x54
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b090      	sub	sp, #64	; 0x40
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0320 	and.w	r3, r3, #32
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d137      	bne.n	800b44c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b404:	633a      	str	r2, [r7, #48]	; 0x30
 800b406:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b40a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e5      	bne.n	800b3e4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	60fb      	str	r3, [r7, #12]
   return(result);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42c:	637b      	str	r3, [r7, #52]	; 0x34
 800b42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b436:	61fb      	str	r3, [r7, #28]
 800b438:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	69b9      	ldr	r1, [r7, #24]
 800b43c:	69fa      	ldr	r2, [r7, #28]
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	617b      	str	r3, [r7, #20]
   return(result);
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e6      	bne.n	800b418 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b44a:	e002      	b.n	800b452 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b44c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b44e:	f7ff fa65 	bl	800a91c <HAL_UART_TxCpltCallback>
}
 800b452:	bf00      	nop
 800b454:	3740      	adds	r7, #64	; 0x40
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fa61 	bl	800a930 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b086      	sub	sp, #24
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b482:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b48a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b492:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b49e:	2b80      	cmp	r3, #128	; 0x80
 800b4a0:	d109      	bne.n	800b4b6 <UART_DMAError+0x40>
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b21      	cmp	r3, #33	; 0x21
 800b4a6:	d106      	bne.n	800b4b6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b4b0:	6978      	ldr	r0, [r7, #20]
 800b4b2:	f7ff fede 	bl	800b272 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c0:	2b40      	cmp	r3, #64	; 0x40
 800b4c2:	d109      	bne.n	800b4d8 <UART_DMAError+0x62>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b22      	cmp	r3, #34	; 0x22
 800b4c8:	d106      	bne.n	800b4d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b4d2:	6978      	ldr	r0, [r7, #20]
 800b4d4:	f7ff ff0e 	bl	800b2f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4de:	f043 0210 	orr.w	r2, r3, #16
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4e8:	6978      	ldr	r0, [r7, #20]
 800b4ea:	f7ff fa2b 	bl	800a944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4ee:	bf00      	nop
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7ff fa15 	bl	800a944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	60bb      	str	r3, [r7, #8]
   return(result);
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	461a      	mov	r2, r3
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	61bb      	str	r3, [r7, #24]
 800b54a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54c:	6979      	ldr	r1, [r7, #20]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	e841 2300 	strex	r3, r2, [r1]
 800b554:	613b      	str	r3, [r7, #16]
   return(result);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1e6      	bne.n	800b52a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff f9d6 	bl	800a91c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b570:	bf00      	nop
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d101      	bne.n	800b5ca <HAL_UARTEx_DisableFifoMode+0x16>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e027      	b.n	800b61a <HAL_UARTEx_DisableFifoMode+0x66>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2224      	movs	r2, #36	; 0x24
 800b5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0201 	bic.w	r2, r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b5f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2220      	movs	r2, #32
 800b60c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e02d      	b.n	800b69a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2224      	movs	r2, #36	; 0x24
 800b64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0201 	bic.w	r2, r2, #1
 800b664:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f850 	bl	800b720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2220      	movs	r2, #32
 800b68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e02d      	b.n	800b716 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2224      	movs	r2, #36	; 0x24
 800b6c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f022 0201 	bic.w	r2, r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f812 	bl	800b720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2220      	movs	r2, #32
 800b708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d108      	bne.n	800b742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b740:	e031      	b.n	800b7a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b742:	2308      	movs	r3, #8
 800b744:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b746:	2308      	movs	r3, #8
 800b748:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	0e5b      	lsrs	r3, r3, #25
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	0f5b      	lsrs	r3, r3, #29
 800b762:	b2db      	uxtb	r3, r3
 800b764:	f003 0307 	and.w	r3, r3, #7
 800b768:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	7b3a      	ldrb	r2, [r7, #12]
 800b76e:	4911      	ldr	r1, [pc, #68]	; (800b7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b770:	5c8a      	ldrb	r2, [r1, r2]
 800b772:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b776:	7b3a      	ldrb	r2, [r7, #12]
 800b778:	490f      	ldr	r1, [pc, #60]	; (800b7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b77a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b77c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b788:	7bfb      	ldrb	r3, [r7, #15]
 800b78a:	7b7a      	ldrb	r2, [r7, #13]
 800b78c:	4909      	ldr	r1, [pc, #36]	; (800b7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b78e:	5c8a      	ldrb	r2, [r1, r2]
 800b790:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b794:	7b7a      	ldrb	r2, [r7, #13]
 800b796:	4908      	ldr	r1, [pc, #32]	; (800b7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b798:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b79a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7a6:	bf00      	nop
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	0800c210 	.word	0x0800c210
 800b7b8:	0800c218 	.word	0x0800c218

0800b7bc <_vsniprintf_r>:
 800b7bc:	b530      	push	{r4, r5, lr}
 800b7be:	4614      	mov	r4, r2
 800b7c0:	2c00      	cmp	r4, #0
 800b7c2:	b09b      	sub	sp, #108	; 0x6c
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	da05      	bge.n	800b7d6 <_vsniprintf_r+0x1a>
 800b7ca:	238b      	movs	r3, #139	; 0x8b
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d2:	b01b      	add	sp, #108	; 0x6c
 800b7d4:	bd30      	pop	{r4, r5, pc}
 800b7d6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b7da:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7de:	bf14      	ite	ne
 800b7e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7e4:	4623      	moveq	r3, r4
 800b7e6:	9302      	str	r3, [sp, #8]
 800b7e8:	9305      	str	r3, [sp, #20]
 800b7ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ee:	9100      	str	r1, [sp, #0]
 800b7f0:	9104      	str	r1, [sp, #16]
 800b7f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b7f6:	4669      	mov	r1, sp
 800b7f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b7fa:	f000 f9ad 	bl	800bb58 <_svfiprintf_r>
 800b7fe:	1c43      	adds	r3, r0, #1
 800b800:	bfbc      	itt	lt
 800b802:	238b      	movlt	r3, #139	; 0x8b
 800b804:	602b      	strlt	r3, [r5, #0]
 800b806:	2c00      	cmp	r4, #0
 800b808:	d0e3      	beq.n	800b7d2 <_vsniprintf_r+0x16>
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	2200      	movs	r2, #0
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e7df      	b.n	800b7d2 <_vsniprintf_r+0x16>
	...

0800b814 <vsniprintf>:
 800b814:	b507      	push	{r0, r1, r2, lr}
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	4613      	mov	r3, r2
 800b81a:	460a      	mov	r2, r1
 800b81c:	4601      	mov	r1, r0
 800b81e:	4803      	ldr	r0, [pc, #12]	; (800b82c <vsniprintf+0x18>)
 800b820:	6800      	ldr	r0, [r0, #0]
 800b822:	f7ff ffcb 	bl	800b7bc <_vsniprintf_r>
 800b826:	b003      	add	sp, #12
 800b828:	f85d fb04 	ldr.w	pc, [sp], #4
 800b82c:	20000120 	.word	0x20000120

0800b830 <memset>:
 800b830:	4402      	add	r2, r0
 800b832:	4603      	mov	r3, r0
 800b834:	4293      	cmp	r3, r2
 800b836:	d100      	bne.n	800b83a <memset+0xa>
 800b838:	4770      	bx	lr
 800b83a:	f803 1b01 	strb.w	r1, [r3], #1
 800b83e:	e7f9      	b.n	800b834 <memset+0x4>

0800b840 <__errno>:
 800b840:	4b01      	ldr	r3, [pc, #4]	; (800b848 <__errno+0x8>)
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000120 	.word	0x20000120

0800b84c <__libc_init_array>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	4d0d      	ldr	r5, [pc, #52]	; (800b884 <__libc_init_array+0x38>)
 800b850:	4c0d      	ldr	r4, [pc, #52]	; (800b888 <__libc_init_array+0x3c>)
 800b852:	1b64      	subs	r4, r4, r5
 800b854:	10a4      	asrs	r4, r4, #2
 800b856:	2600      	movs	r6, #0
 800b858:	42a6      	cmp	r6, r4
 800b85a:	d109      	bne.n	800b870 <__libc_init_array+0x24>
 800b85c:	4d0b      	ldr	r5, [pc, #44]	; (800b88c <__libc_init_array+0x40>)
 800b85e:	4c0c      	ldr	r4, [pc, #48]	; (800b890 <__libc_init_array+0x44>)
 800b860:	f000 fc6a 	bl	800c138 <_init>
 800b864:	1b64      	subs	r4, r4, r5
 800b866:	10a4      	asrs	r4, r4, #2
 800b868:	2600      	movs	r6, #0
 800b86a:	42a6      	cmp	r6, r4
 800b86c:	d105      	bne.n	800b87a <__libc_init_array+0x2e>
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	f855 3b04 	ldr.w	r3, [r5], #4
 800b874:	4798      	blx	r3
 800b876:	3601      	adds	r6, #1
 800b878:	e7ee      	b.n	800b858 <__libc_init_array+0xc>
 800b87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b87e:	4798      	blx	r3
 800b880:	3601      	adds	r6, #1
 800b882:	e7f2      	b.n	800b86a <__libc_init_array+0x1e>
 800b884:	0800c25c 	.word	0x0800c25c
 800b888:	0800c25c 	.word	0x0800c25c
 800b88c:	0800c25c 	.word	0x0800c25c
 800b890:	0800c260 	.word	0x0800c260

0800b894 <__retarget_lock_acquire_recursive>:
 800b894:	4770      	bx	lr

0800b896 <__retarget_lock_release_recursive>:
 800b896:	4770      	bx	lr

0800b898 <memcpy>:
 800b898:	440a      	add	r2, r1
 800b89a:	4291      	cmp	r1, r2
 800b89c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8a0:	d100      	bne.n	800b8a4 <memcpy+0xc>
 800b8a2:	4770      	bx	lr
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ae:	4291      	cmp	r1, r2
 800b8b0:	d1f9      	bne.n	800b8a6 <memcpy+0xe>
 800b8b2:	bd10      	pop	{r4, pc}

0800b8b4 <_free_r>:
 800b8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8b6:	2900      	cmp	r1, #0
 800b8b8:	d044      	beq.n	800b944 <_free_r+0x90>
 800b8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8be:	9001      	str	r0, [sp, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8c6:	bfb8      	it	lt
 800b8c8:	18e4      	addlt	r4, r4, r3
 800b8ca:	f000 f8df 	bl	800ba8c <__malloc_lock>
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	; (800b948 <_free_r+0x94>)
 800b8d0:	9801      	ldr	r0, [sp, #4]
 800b8d2:	6813      	ldr	r3, [r2, #0]
 800b8d4:	b933      	cbnz	r3, 800b8e4 <_free_r+0x30>
 800b8d6:	6063      	str	r3, [r4, #4]
 800b8d8:	6014      	str	r4, [r2, #0]
 800b8da:	b003      	add	sp, #12
 800b8dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8e0:	f000 b8da 	b.w	800ba98 <__malloc_unlock>
 800b8e4:	42a3      	cmp	r3, r4
 800b8e6:	d908      	bls.n	800b8fa <_free_r+0x46>
 800b8e8:	6825      	ldr	r5, [r4, #0]
 800b8ea:	1961      	adds	r1, r4, r5
 800b8ec:	428b      	cmp	r3, r1
 800b8ee:	bf01      	itttt	eq
 800b8f0:	6819      	ldreq	r1, [r3, #0]
 800b8f2:	685b      	ldreq	r3, [r3, #4]
 800b8f4:	1949      	addeq	r1, r1, r5
 800b8f6:	6021      	streq	r1, [r4, #0]
 800b8f8:	e7ed      	b.n	800b8d6 <_free_r+0x22>
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	b10b      	cbz	r3, 800b904 <_free_r+0x50>
 800b900:	42a3      	cmp	r3, r4
 800b902:	d9fa      	bls.n	800b8fa <_free_r+0x46>
 800b904:	6811      	ldr	r1, [r2, #0]
 800b906:	1855      	adds	r5, r2, r1
 800b908:	42a5      	cmp	r5, r4
 800b90a:	d10b      	bne.n	800b924 <_free_r+0x70>
 800b90c:	6824      	ldr	r4, [r4, #0]
 800b90e:	4421      	add	r1, r4
 800b910:	1854      	adds	r4, r2, r1
 800b912:	42a3      	cmp	r3, r4
 800b914:	6011      	str	r1, [r2, #0]
 800b916:	d1e0      	bne.n	800b8da <_free_r+0x26>
 800b918:	681c      	ldr	r4, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	6053      	str	r3, [r2, #4]
 800b91e:	440c      	add	r4, r1
 800b920:	6014      	str	r4, [r2, #0]
 800b922:	e7da      	b.n	800b8da <_free_r+0x26>
 800b924:	d902      	bls.n	800b92c <_free_r+0x78>
 800b926:	230c      	movs	r3, #12
 800b928:	6003      	str	r3, [r0, #0]
 800b92a:	e7d6      	b.n	800b8da <_free_r+0x26>
 800b92c:	6825      	ldr	r5, [r4, #0]
 800b92e:	1961      	adds	r1, r4, r5
 800b930:	428b      	cmp	r3, r1
 800b932:	bf04      	itt	eq
 800b934:	6819      	ldreq	r1, [r3, #0]
 800b936:	685b      	ldreq	r3, [r3, #4]
 800b938:	6063      	str	r3, [r4, #4]
 800b93a:	bf04      	itt	eq
 800b93c:	1949      	addeq	r1, r1, r5
 800b93e:	6021      	streq	r1, [r4, #0]
 800b940:	6054      	str	r4, [r2, #4]
 800b942:	e7ca      	b.n	800b8da <_free_r+0x26>
 800b944:	b003      	add	sp, #12
 800b946:	bd30      	pop	{r4, r5, pc}
 800b948:	20000b74 	.word	0x20000b74

0800b94c <sbrk_aligned>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4e0e      	ldr	r6, [pc, #56]	; (800b988 <sbrk_aligned+0x3c>)
 800b950:	460c      	mov	r4, r1
 800b952:	6831      	ldr	r1, [r6, #0]
 800b954:	4605      	mov	r5, r0
 800b956:	b911      	cbnz	r1, 800b95e <sbrk_aligned+0x12>
 800b958:	f000 fba6 	bl	800c0a8 <_sbrk_r>
 800b95c:	6030      	str	r0, [r6, #0]
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 fba1 	bl	800c0a8 <_sbrk_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	d00a      	beq.n	800b980 <sbrk_aligned+0x34>
 800b96a:	1cc4      	adds	r4, r0, #3
 800b96c:	f024 0403 	bic.w	r4, r4, #3
 800b970:	42a0      	cmp	r0, r4
 800b972:	d007      	beq.n	800b984 <sbrk_aligned+0x38>
 800b974:	1a21      	subs	r1, r4, r0
 800b976:	4628      	mov	r0, r5
 800b978:	f000 fb96 	bl	800c0a8 <_sbrk_r>
 800b97c:	3001      	adds	r0, #1
 800b97e:	d101      	bne.n	800b984 <sbrk_aligned+0x38>
 800b980:	f04f 34ff 	mov.w	r4, #4294967295
 800b984:	4620      	mov	r0, r4
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	20000b78 	.word	0x20000b78

0800b98c <_malloc_r>:
 800b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b990:	1ccd      	adds	r5, r1, #3
 800b992:	f025 0503 	bic.w	r5, r5, #3
 800b996:	3508      	adds	r5, #8
 800b998:	2d0c      	cmp	r5, #12
 800b99a:	bf38      	it	cc
 800b99c:	250c      	movcc	r5, #12
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	db01      	blt.n	800b9a8 <_malloc_r+0x1c>
 800b9a4:	42a9      	cmp	r1, r5
 800b9a6:	d905      	bls.n	800b9b4 <_malloc_r+0x28>
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba88 <_malloc_r+0xfc>
 800b9b8:	f000 f868 	bl	800ba8c <__malloc_lock>
 800b9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c0:	461c      	mov	r4, r3
 800b9c2:	bb5c      	cbnz	r4, 800ba1c <_malloc_r+0x90>
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7ff ffc0 	bl	800b94c <sbrk_aligned>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	d155      	bne.n	800ba7e <_malloc_r+0xf2>
 800b9d2:	f8d8 4000 	ldr.w	r4, [r8]
 800b9d6:	4626      	mov	r6, r4
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d145      	bne.n	800ba68 <_malloc_r+0xdc>
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	d048      	beq.n	800ba72 <_malloc_r+0xe6>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	eb04 0903 	add.w	r9, r4, r3
 800b9ea:	f000 fb5d 	bl	800c0a8 <_sbrk_r>
 800b9ee:	4581      	cmp	r9, r0
 800b9f0:	d13f      	bne.n	800ba72 <_malloc_r+0xe6>
 800b9f2:	6821      	ldr	r1, [r4, #0]
 800b9f4:	1a6d      	subs	r5, r5, r1
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f7ff ffa7 	bl	800b94c <sbrk_aligned>
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d037      	beq.n	800ba72 <_malloc_r+0xe6>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	442b      	add	r3, r5
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d038      	beq.n	800ba82 <_malloc_r+0xf6>
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	d12b      	bne.n	800ba6e <_malloc_r+0xe2>
 800ba16:	2200      	movs	r2, #0
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	e00f      	b.n	800ba3c <_malloc_r+0xb0>
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	1b52      	subs	r2, r2, r5
 800ba20:	d41f      	bmi.n	800ba62 <_malloc_r+0xd6>
 800ba22:	2a0b      	cmp	r2, #11
 800ba24:	d917      	bls.n	800ba56 <_malloc_r+0xca>
 800ba26:	1961      	adds	r1, r4, r5
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	bf18      	it	ne
 800ba2e:	6059      	strne	r1, [r3, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	bf08      	it	eq
 800ba34:	f8c8 1000 	streq.w	r1, [r8]
 800ba38:	5162      	str	r2, [r4, r5]
 800ba3a:	604b      	str	r3, [r1, #4]
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f104 060b 	add.w	r6, r4, #11
 800ba42:	f000 f829 	bl	800ba98 <__malloc_unlock>
 800ba46:	f026 0607 	bic.w	r6, r6, #7
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	1af2      	subs	r2, r6, r3
 800ba4e:	d0ae      	beq.n	800b9ae <_malloc_r+0x22>
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	50a3      	str	r3, [r4, r2]
 800ba54:	e7ab      	b.n	800b9ae <_malloc_r+0x22>
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	6862      	ldr	r2, [r4, #4]
 800ba5a:	d1dd      	bne.n	800ba18 <_malloc_r+0x8c>
 800ba5c:	f8c8 2000 	str.w	r2, [r8]
 800ba60:	e7ec      	b.n	800ba3c <_malloc_r+0xb0>
 800ba62:	4623      	mov	r3, r4
 800ba64:	6864      	ldr	r4, [r4, #4]
 800ba66:	e7ac      	b.n	800b9c2 <_malloc_r+0x36>
 800ba68:	4634      	mov	r4, r6
 800ba6a:	6876      	ldr	r6, [r6, #4]
 800ba6c:	e7b4      	b.n	800b9d8 <_malloc_r+0x4c>
 800ba6e:	4613      	mov	r3, r2
 800ba70:	e7cc      	b.n	800ba0c <_malloc_r+0x80>
 800ba72:	230c      	movs	r3, #12
 800ba74:	603b      	str	r3, [r7, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f000 f80e 	bl	800ba98 <__malloc_unlock>
 800ba7c:	e797      	b.n	800b9ae <_malloc_r+0x22>
 800ba7e:	6025      	str	r5, [r4, #0]
 800ba80:	e7dc      	b.n	800ba3c <_malloc_r+0xb0>
 800ba82:	605b      	str	r3, [r3, #4]
 800ba84:	deff      	udf	#255	; 0xff
 800ba86:	bf00      	nop
 800ba88:	20000b74 	.word	0x20000b74

0800ba8c <__malloc_lock>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	; (800ba94 <__malloc_lock+0x8>)
 800ba8e:	f7ff bf01 	b.w	800b894 <__retarget_lock_acquire_recursive>
 800ba92:	bf00      	nop
 800ba94:	20000b70 	.word	0x20000b70

0800ba98 <__malloc_unlock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	; (800baa0 <__malloc_unlock+0x8>)
 800ba9a:	f7ff befc 	b.w	800b896 <__retarget_lock_release_recursive>
 800ba9e:	bf00      	nop
 800baa0:	20000b70 	.word	0x20000b70

0800baa4 <__ssputs_r>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	688e      	ldr	r6, [r1, #8]
 800baaa:	461f      	mov	r7, r3
 800baac:	42be      	cmp	r6, r7
 800baae:	680b      	ldr	r3, [r1, #0]
 800bab0:	4682      	mov	sl, r0
 800bab2:	460c      	mov	r4, r1
 800bab4:	4690      	mov	r8, r2
 800bab6:	d82c      	bhi.n	800bb12 <__ssputs_r+0x6e>
 800bab8:	898a      	ldrh	r2, [r1, #12]
 800baba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800babe:	d026      	beq.n	800bb0e <__ssputs_r+0x6a>
 800bac0:	6965      	ldr	r5, [r4, #20]
 800bac2:	6909      	ldr	r1, [r1, #16]
 800bac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bac8:	eba3 0901 	sub.w	r9, r3, r1
 800bacc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bad0:	1c7b      	adds	r3, r7, #1
 800bad2:	444b      	add	r3, r9
 800bad4:	106d      	asrs	r5, r5, #1
 800bad6:	429d      	cmp	r5, r3
 800bad8:	bf38      	it	cc
 800bada:	461d      	movcc	r5, r3
 800badc:	0553      	lsls	r3, r2, #21
 800bade:	d527      	bpl.n	800bb30 <__ssputs_r+0x8c>
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7ff ff53 	bl	800b98c <_malloc_r>
 800bae6:	4606      	mov	r6, r0
 800bae8:	b360      	cbz	r0, 800bb44 <__ssputs_r+0xa0>
 800baea:	6921      	ldr	r1, [r4, #16]
 800baec:	464a      	mov	r2, r9
 800baee:	f7ff fed3 	bl	800b898 <memcpy>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800baf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	6126      	str	r6, [r4, #16]
 800bb00:	6165      	str	r5, [r4, #20]
 800bb02:	444e      	add	r6, r9
 800bb04:	eba5 0509 	sub.w	r5, r5, r9
 800bb08:	6026      	str	r6, [r4, #0]
 800bb0a:	60a5      	str	r5, [r4, #8]
 800bb0c:	463e      	mov	r6, r7
 800bb0e:	42be      	cmp	r6, r7
 800bb10:	d900      	bls.n	800bb14 <__ssputs_r+0x70>
 800bb12:	463e      	mov	r6, r7
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4632      	mov	r2, r6
 800bb18:	4641      	mov	r1, r8
 800bb1a:	f000 faab 	bl	800c074 <memmove>
 800bb1e:	68a3      	ldr	r3, [r4, #8]
 800bb20:	1b9b      	subs	r3, r3, r6
 800bb22:	60a3      	str	r3, [r4, #8]
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	4433      	add	r3, r6
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb30:	462a      	mov	r2, r5
 800bb32:	f000 fac9 	bl	800c0c8 <_realloc_r>
 800bb36:	4606      	mov	r6, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d1e0      	bne.n	800bafe <__ssputs_r+0x5a>
 800bb3c:	6921      	ldr	r1, [r4, #16]
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7ff feb8 	bl	800b8b4 <_free_r>
 800bb44:	230c      	movs	r3, #12
 800bb46:	f8ca 3000 	str.w	r3, [sl]
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	e7e9      	b.n	800bb2c <__ssputs_r+0x88>

0800bb58 <_svfiprintf_r>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	4698      	mov	r8, r3
 800bb5e:	898b      	ldrh	r3, [r1, #12]
 800bb60:	061b      	lsls	r3, r3, #24
 800bb62:	b09d      	sub	sp, #116	; 0x74
 800bb64:	4607      	mov	r7, r0
 800bb66:	460d      	mov	r5, r1
 800bb68:	4614      	mov	r4, r2
 800bb6a:	d50e      	bpl.n	800bb8a <_svfiprintf_r+0x32>
 800bb6c:	690b      	ldr	r3, [r1, #16]
 800bb6e:	b963      	cbnz	r3, 800bb8a <_svfiprintf_r+0x32>
 800bb70:	2140      	movs	r1, #64	; 0x40
 800bb72:	f7ff ff0b 	bl	800b98c <_malloc_r>
 800bb76:	6028      	str	r0, [r5, #0]
 800bb78:	6128      	str	r0, [r5, #16]
 800bb7a:	b920      	cbnz	r0, 800bb86 <_svfiprintf_r+0x2e>
 800bb7c:	230c      	movs	r3, #12
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295
 800bb84:	e0d0      	b.n	800bd28 <_svfiprintf_r+0x1d0>
 800bb86:	2340      	movs	r3, #64	; 0x40
 800bb88:	616b      	str	r3, [r5, #20]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8e:	2320      	movs	r3, #32
 800bb90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb94:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb98:	2330      	movs	r3, #48	; 0x30
 800bb9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd40 <_svfiprintf_r+0x1e8>
 800bb9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bba2:	f04f 0901 	mov.w	r9, #1
 800bba6:	4623      	mov	r3, r4
 800bba8:	469a      	mov	sl, r3
 800bbaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbae:	b10a      	cbz	r2, 800bbb4 <_svfiprintf_r+0x5c>
 800bbb0:	2a25      	cmp	r2, #37	; 0x25
 800bbb2:	d1f9      	bne.n	800bba8 <_svfiprintf_r+0x50>
 800bbb4:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb8:	d00b      	beq.n	800bbd2 <_svfiprintf_r+0x7a>
 800bbba:	465b      	mov	r3, fp
 800bbbc:	4622      	mov	r2, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	f7ff ff6f 	bl	800baa4 <__ssputs_r>
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	f000 80a9 	beq.w	800bd1e <_svfiprintf_r+0x1c6>
 800bbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbce:	445a      	add	r2, fp
 800bbd0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 80a1 	beq.w	800bd1e <_svfiprintf_r+0x1c6>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbe6:	f10a 0a01 	add.w	sl, sl, #1
 800bbea:	9304      	str	r3, [sp, #16]
 800bbec:	9307      	str	r3, [sp, #28]
 800bbee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbf2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbf4:	4654      	mov	r4, sl
 800bbf6:	2205      	movs	r2, #5
 800bbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbfc:	4850      	ldr	r0, [pc, #320]	; (800bd40 <_svfiprintf_r+0x1e8>)
 800bbfe:	f7f4 fb17 	bl	8000230 <memchr>
 800bc02:	9a04      	ldr	r2, [sp, #16]
 800bc04:	b9d8      	cbnz	r0, 800bc3e <_svfiprintf_r+0xe6>
 800bc06:	06d0      	lsls	r0, r2, #27
 800bc08:	bf44      	itt	mi
 800bc0a:	2320      	movmi	r3, #32
 800bc0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc10:	0711      	lsls	r1, r2, #28
 800bc12:	bf44      	itt	mi
 800bc14:	232b      	movmi	r3, #43	; 0x2b
 800bc16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc20:	d015      	beq.n	800bc4e <_svfiprintf_r+0xf6>
 800bc22:	9a07      	ldr	r2, [sp, #28]
 800bc24:	4654      	mov	r4, sl
 800bc26:	2000      	movs	r0, #0
 800bc28:	f04f 0c0a 	mov.w	ip, #10
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc32:	3b30      	subs	r3, #48	; 0x30
 800bc34:	2b09      	cmp	r3, #9
 800bc36:	d94d      	bls.n	800bcd4 <_svfiprintf_r+0x17c>
 800bc38:	b1b0      	cbz	r0, 800bc68 <_svfiprintf_r+0x110>
 800bc3a:	9207      	str	r2, [sp, #28]
 800bc3c:	e014      	b.n	800bc68 <_svfiprintf_r+0x110>
 800bc3e:	eba0 0308 	sub.w	r3, r0, r8
 800bc42:	fa09 f303 	lsl.w	r3, r9, r3
 800bc46:	4313      	orrs	r3, r2
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	46a2      	mov	sl, r4
 800bc4c:	e7d2      	b.n	800bbf4 <_svfiprintf_r+0x9c>
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	1d19      	adds	r1, r3, #4
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	9103      	str	r1, [sp, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	bfbb      	ittet	lt
 800bc5a:	425b      	neglt	r3, r3
 800bc5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc60:	9307      	strge	r3, [sp, #28]
 800bc62:	9307      	strlt	r3, [sp, #28]
 800bc64:	bfb8      	it	lt
 800bc66:	9204      	strlt	r2, [sp, #16]
 800bc68:	7823      	ldrb	r3, [r4, #0]
 800bc6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc6c:	d10c      	bne.n	800bc88 <_svfiprintf_r+0x130>
 800bc6e:	7863      	ldrb	r3, [r4, #1]
 800bc70:	2b2a      	cmp	r3, #42	; 0x2a
 800bc72:	d134      	bne.n	800bcde <_svfiprintf_r+0x186>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	1d1a      	adds	r2, r3, #4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	9203      	str	r2, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfb8      	it	lt
 800bc80:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc84:	3402      	adds	r4, #2
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd50 <_svfiprintf_r+0x1f8>
 800bc8c:	7821      	ldrb	r1, [r4, #0]
 800bc8e:	2203      	movs	r2, #3
 800bc90:	4650      	mov	r0, sl
 800bc92:	f7f4 facd 	bl	8000230 <memchr>
 800bc96:	b138      	cbz	r0, 800bca8 <_svfiprintf_r+0x150>
 800bc98:	9b04      	ldr	r3, [sp, #16]
 800bc9a:	eba0 000a 	sub.w	r0, r0, sl
 800bc9e:	2240      	movs	r2, #64	; 0x40
 800bca0:	4082      	lsls	r2, r0
 800bca2:	4313      	orrs	r3, r2
 800bca4:	3401      	adds	r4, #1
 800bca6:	9304      	str	r3, [sp, #16]
 800bca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcac:	4825      	ldr	r0, [pc, #148]	; (800bd44 <_svfiprintf_r+0x1ec>)
 800bcae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcb2:	2206      	movs	r2, #6
 800bcb4:	f7f4 fabc 	bl	8000230 <memchr>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d038      	beq.n	800bd2e <_svfiprintf_r+0x1d6>
 800bcbc:	4b22      	ldr	r3, [pc, #136]	; (800bd48 <_svfiprintf_r+0x1f0>)
 800bcbe:	bb1b      	cbnz	r3, 800bd08 <_svfiprintf_r+0x1b0>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	3307      	adds	r3, #7
 800bcc4:	f023 0307 	bic.w	r3, r3, #7
 800bcc8:	3308      	adds	r3, #8
 800bcca:	9303      	str	r3, [sp, #12]
 800bccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcce:	4433      	add	r3, r6
 800bcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd2:	e768      	b.n	800bba6 <_svfiprintf_r+0x4e>
 800bcd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcd8:	460c      	mov	r4, r1
 800bcda:	2001      	movs	r0, #1
 800bcdc:	e7a6      	b.n	800bc2c <_svfiprintf_r+0xd4>
 800bcde:	2300      	movs	r3, #0
 800bce0:	3401      	adds	r4, #1
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	4619      	mov	r1, r3
 800bce6:	f04f 0c0a 	mov.w	ip, #10
 800bcea:	4620      	mov	r0, r4
 800bcec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcf0:	3a30      	subs	r2, #48	; 0x30
 800bcf2:	2a09      	cmp	r2, #9
 800bcf4:	d903      	bls.n	800bcfe <_svfiprintf_r+0x1a6>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0c6      	beq.n	800bc88 <_svfiprintf_r+0x130>
 800bcfa:	9105      	str	r1, [sp, #20]
 800bcfc:	e7c4      	b.n	800bc88 <_svfiprintf_r+0x130>
 800bcfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd02:	4604      	mov	r4, r0
 800bd04:	2301      	movs	r3, #1
 800bd06:	e7f0      	b.n	800bcea <_svfiprintf_r+0x192>
 800bd08:	ab03      	add	r3, sp, #12
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <_svfiprintf_r+0x1f4>)
 800bd10:	a904      	add	r1, sp, #16
 800bd12:	4638      	mov	r0, r7
 800bd14:	f3af 8000 	nop.w
 800bd18:	1c42      	adds	r2, r0, #1
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	d1d6      	bne.n	800bccc <_svfiprintf_r+0x174>
 800bd1e:	89ab      	ldrh	r3, [r5, #12]
 800bd20:	065b      	lsls	r3, r3, #25
 800bd22:	f53f af2d 	bmi.w	800bb80 <_svfiprintf_r+0x28>
 800bd26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd28:	b01d      	add	sp, #116	; 0x74
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	ab03      	add	r3, sp, #12
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	462a      	mov	r2, r5
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <_svfiprintf_r+0x1f4>)
 800bd36:	a904      	add	r1, sp, #16
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f000 f879 	bl	800be30 <_printf_i>
 800bd3e:	e7eb      	b.n	800bd18 <_svfiprintf_r+0x1c0>
 800bd40:	0800c220 	.word	0x0800c220
 800bd44:	0800c22a 	.word	0x0800c22a
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	0800baa5 	.word	0x0800baa5
 800bd50:	0800c226 	.word	0x0800c226

0800bd54 <_printf_common>:
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	4616      	mov	r6, r2
 800bd5a:	4699      	mov	r9, r3
 800bd5c:	688a      	ldr	r2, [r1, #8]
 800bd5e:	690b      	ldr	r3, [r1, #16]
 800bd60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	bfb8      	it	lt
 800bd68:	4613      	movlt	r3, r2
 800bd6a:	6033      	str	r3, [r6, #0]
 800bd6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd70:	4607      	mov	r7, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	b10a      	cbz	r2, 800bd7a <_printf_common+0x26>
 800bd76:	3301      	adds	r3, #1
 800bd78:	6033      	str	r3, [r6, #0]
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	0699      	lsls	r1, r3, #26
 800bd7e:	bf42      	ittt	mi
 800bd80:	6833      	ldrmi	r3, [r6, #0]
 800bd82:	3302      	addmi	r3, #2
 800bd84:	6033      	strmi	r3, [r6, #0]
 800bd86:	6825      	ldr	r5, [r4, #0]
 800bd88:	f015 0506 	ands.w	r5, r5, #6
 800bd8c:	d106      	bne.n	800bd9c <_printf_common+0x48>
 800bd8e:	f104 0a19 	add.w	sl, r4, #25
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	6832      	ldr	r2, [r6, #0]
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	dc26      	bgt.n	800bdea <_printf_common+0x96>
 800bd9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bda0:	1e13      	subs	r3, r2, #0
 800bda2:	6822      	ldr	r2, [r4, #0]
 800bda4:	bf18      	it	ne
 800bda6:	2301      	movne	r3, #1
 800bda8:	0692      	lsls	r2, r2, #26
 800bdaa:	d42b      	bmi.n	800be04 <_printf_common+0xb0>
 800bdac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d01e      	beq.n	800bdf8 <_printf_common+0xa4>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	6922      	ldr	r2, [r4, #16]
 800bdbe:	f003 0306 	and.w	r3, r3, #6
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	bf02      	ittt	eq
 800bdc6:	68e5      	ldreq	r5, [r4, #12]
 800bdc8:	6833      	ldreq	r3, [r6, #0]
 800bdca:	1aed      	subeq	r5, r5, r3
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	bf0c      	ite	eq
 800bdd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdd4:	2500      	movne	r5, #0
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bfc4      	itt	gt
 800bdda:	1a9b      	subgt	r3, r3, r2
 800bddc:	18ed      	addgt	r5, r5, r3
 800bdde:	2600      	movs	r6, #0
 800bde0:	341a      	adds	r4, #26
 800bde2:	42b5      	cmp	r5, r6
 800bde4:	d11a      	bne.n	800be1c <_printf_common+0xc8>
 800bde6:	2000      	movs	r0, #0
 800bde8:	e008      	b.n	800bdfc <_printf_common+0xa8>
 800bdea:	2301      	movs	r3, #1
 800bdec:	4652      	mov	r2, sl
 800bdee:	4649      	mov	r1, r9
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	47c0      	blx	r8
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d103      	bne.n	800be00 <_printf_common+0xac>
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be00:	3501      	adds	r5, #1
 800be02:	e7c6      	b.n	800bd92 <_printf_common+0x3e>
 800be04:	18e1      	adds	r1, r4, r3
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	2030      	movs	r0, #48	; 0x30
 800be0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be0e:	4422      	add	r2, r4
 800be10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be18:	3302      	adds	r3, #2
 800be1a:	e7c7      	b.n	800bdac <_printf_common+0x58>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4622      	mov	r2, r4
 800be20:	4649      	mov	r1, r9
 800be22:	4638      	mov	r0, r7
 800be24:	47c0      	blx	r8
 800be26:	3001      	adds	r0, #1
 800be28:	d0e6      	beq.n	800bdf8 <_printf_common+0xa4>
 800be2a:	3601      	adds	r6, #1
 800be2c:	e7d9      	b.n	800bde2 <_printf_common+0x8e>
	...

0800be30 <_printf_i>:
 800be30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	7e0f      	ldrb	r7, [r1, #24]
 800be36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be38:	2f78      	cmp	r7, #120	; 0x78
 800be3a:	4691      	mov	r9, r2
 800be3c:	4680      	mov	r8, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	469a      	mov	sl, r3
 800be42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be46:	d807      	bhi.n	800be58 <_printf_i+0x28>
 800be48:	2f62      	cmp	r7, #98	; 0x62
 800be4a:	d80a      	bhi.n	800be62 <_printf_i+0x32>
 800be4c:	2f00      	cmp	r7, #0
 800be4e:	f000 80d4 	beq.w	800bffa <_printf_i+0x1ca>
 800be52:	2f58      	cmp	r7, #88	; 0x58
 800be54:	f000 80c0 	beq.w	800bfd8 <_printf_i+0x1a8>
 800be58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be60:	e03a      	b.n	800bed8 <_printf_i+0xa8>
 800be62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be66:	2b15      	cmp	r3, #21
 800be68:	d8f6      	bhi.n	800be58 <_printf_i+0x28>
 800be6a:	a101      	add	r1, pc, #4	; (adr r1, 800be70 <_printf_i+0x40>)
 800be6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be70:	0800bec9 	.word	0x0800bec9
 800be74:	0800bedd 	.word	0x0800bedd
 800be78:	0800be59 	.word	0x0800be59
 800be7c:	0800be59 	.word	0x0800be59
 800be80:	0800be59 	.word	0x0800be59
 800be84:	0800be59 	.word	0x0800be59
 800be88:	0800bedd 	.word	0x0800bedd
 800be8c:	0800be59 	.word	0x0800be59
 800be90:	0800be59 	.word	0x0800be59
 800be94:	0800be59 	.word	0x0800be59
 800be98:	0800be59 	.word	0x0800be59
 800be9c:	0800bfe1 	.word	0x0800bfe1
 800bea0:	0800bf09 	.word	0x0800bf09
 800bea4:	0800bf9b 	.word	0x0800bf9b
 800bea8:	0800be59 	.word	0x0800be59
 800beac:	0800be59 	.word	0x0800be59
 800beb0:	0800c003 	.word	0x0800c003
 800beb4:	0800be59 	.word	0x0800be59
 800beb8:	0800bf09 	.word	0x0800bf09
 800bebc:	0800be59 	.word	0x0800be59
 800bec0:	0800be59 	.word	0x0800be59
 800bec4:	0800bfa3 	.word	0x0800bfa3
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	1d1a      	adds	r2, r3, #4
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	602a      	str	r2, [r5, #0]
 800bed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bed8:	2301      	movs	r3, #1
 800beda:	e09f      	b.n	800c01c <_printf_i+0x1ec>
 800bedc:	6820      	ldr	r0, [r4, #0]
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	0607      	lsls	r7, r0, #24
 800bee2:	f103 0104 	add.w	r1, r3, #4
 800bee6:	6029      	str	r1, [r5, #0]
 800bee8:	d501      	bpl.n	800beee <_printf_i+0xbe>
 800beea:	681e      	ldr	r6, [r3, #0]
 800beec:	e003      	b.n	800bef6 <_printf_i+0xc6>
 800beee:	0646      	lsls	r6, r0, #25
 800bef0:	d5fb      	bpl.n	800beea <_printf_i+0xba>
 800bef2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	da03      	bge.n	800bf02 <_printf_i+0xd2>
 800befa:	232d      	movs	r3, #45	; 0x2d
 800befc:	4276      	negs	r6, r6
 800befe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf02:	485a      	ldr	r0, [pc, #360]	; (800c06c <_printf_i+0x23c>)
 800bf04:	230a      	movs	r3, #10
 800bf06:	e012      	b.n	800bf2e <_printf_i+0xfe>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	6820      	ldr	r0, [r4, #0]
 800bf0c:	1d19      	adds	r1, r3, #4
 800bf0e:	6029      	str	r1, [r5, #0]
 800bf10:	0605      	lsls	r5, r0, #24
 800bf12:	d501      	bpl.n	800bf18 <_printf_i+0xe8>
 800bf14:	681e      	ldr	r6, [r3, #0]
 800bf16:	e002      	b.n	800bf1e <_printf_i+0xee>
 800bf18:	0641      	lsls	r1, r0, #25
 800bf1a:	d5fb      	bpl.n	800bf14 <_printf_i+0xe4>
 800bf1c:	881e      	ldrh	r6, [r3, #0]
 800bf1e:	4853      	ldr	r0, [pc, #332]	; (800c06c <_printf_i+0x23c>)
 800bf20:	2f6f      	cmp	r7, #111	; 0x6f
 800bf22:	bf0c      	ite	eq
 800bf24:	2308      	moveq	r3, #8
 800bf26:	230a      	movne	r3, #10
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf2e:	6865      	ldr	r5, [r4, #4]
 800bf30:	60a5      	str	r5, [r4, #8]
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	bfa2      	ittt	ge
 800bf36:	6821      	ldrge	r1, [r4, #0]
 800bf38:	f021 0104 	bicge.w	r1, r1, #4
 800bf3c:	6021      	strge	r1, [r4, #0]
 800bf3e:	b90e      	cbnz	r6, 800bf44 <_printf_i+0x114>
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	d04b      	beq.n	800bfdc <_printf_i+0x1ac>
 800bf44:	4615      	mov	r5, r2
 800bf46:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf4a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf4e:	5dc7      	ldrb	r7, [r0, r7]
 800bf50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf54:	4637      	mov	r7, r6
 800bf56:	42bb      	cmp	r3, r7
 800bf58:	460e      	mov	r6, r1
 800bf5a:	d9f4      	bls.n	800bf46 <_printf_i+0x116>
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d10b      	bne.n	800bf78 <_printf_i+0x148>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	07de      	lsls	r6, r3, #31
 800bf64:	d508      	bpl.n	800bf78 <_printf_i+0x148>
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	6861      	ldr	r1, [r4, #4]
 800bf6a:	4299      	cmp	r1, r3
 800bf6c:	bfde      	ittt	le
 800bf6e:	2330      	movle	r3, #48	; 0x30
 800bf70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf78:	1b52      	subs	r2, r2, r5
 800bf7a:	6122      	str	r2, [r4, #16]
 800bf7c:	f8cd a000 	str.w	sl, [sp]
 800bf80:	464b      	mov	r3, r9
 800bf82:	aa03      	add	r2, sp, #12
 800bf84:	4621      	mov	r1, r4
 800bf86:	4640      	mov	r0, r8
 800bf88:	f7ff fee4 	bl	800bd54 <_printf_common>
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d14a      	bne.n	800c026 <_printf_i+0x1f6>
 800bf90:	f04f 30ff 	mov.w	r0, #4294967295
 800bf94:	b004      	add	sp, #16
 800bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	f043 0320 	orr.w	r3, r3, #32
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	4833      	ldr	r0, [pc, #204]	; (800c070 <_printf_i+0x240>)
 800bfa4:	2778      	movs	r7, #120	; 0x78
 800bfa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	6829      	ldr	r1, [r5, #0]
 800bfae:	061f      	lsls	r7, r3, #24
 800bfb0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfb4:	d402      	bmi.n	800bfbc <_printf_i+0x18c>
 800bfb6:	065f      	lsls	r7, r3, #25
 800bfb8:	bf48      	it	mi
 800bfba:	b2b6      	uxthmi	r6, r6
 800bfbc:	07df      	lsls	r7, r3, #31
 800bfbe:	bf48      	it	mi
 800bfc0:	f043 0320 	orrmi.w	r3, r3, #32
 800bfc4:	6029      	str	r1, [r5, #0]
 800bfc6:	bf48      	it	mi
 800bfc8:	6023      	strmi	r3, [r4, #0]
 800bfca:	b91e      	cbnz	r6, 800bfd4 <_printf_i+0x1a4>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	f023 0320 	bic.w	r3, r3, #32
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	2310      	movs	r3, #16
 800bfd6:	e7a7      	b.n	800bf28 <_printf_i+0xf8>
 800bfd8:	4824      	ldr	r0, [pc, #144]	; (800c06c <_printf_i+0x23c>)
 800bfda:	e7e4      	b.n	800bfa6 <_printf_i+0x176>
 800bfdc:	4615      	mov	r5, r2
 800bfde:	e7bd      	b.n	800bf5c <_printf_i+0x12c>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	6826      	ldr	r6, [r4, #0]
 800bfe4:	6961      	ldr	r1, [r4, #20]
 800bfe6:	1d18      	adds	r0, r3, #4
 800bfe8:	6028      	str	r0, [r5, #0]
 800bfea:	0635      	lsls	r5, r6, #24
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	d501      	bpl.n	800bff4 <_printf_i+0x1c4>
 800bff0:	6019      	str	r1, [r3, #0]
 800bff2:	e002      	b.n	800bffa <_printf_i+0x1ca>
 800bff4:	0670      	lsls	r0, r6, #25
 800bff6:	d5fb      	bpl.n	800bff0 <_printf_i+0x1c0>
 800bff8:	8019      	strh	r1, [r3, #0]
 800bffa:	2300      	movs	r3, #0
 800bffc:	6123      	str	r3, [r4, #16]
 800bffe:	4615      	mov	r5, r2
 800c000:	e7bc      	b.n	800bf7c <_printf_i+0x14c>
 800c002:	682b      	ldr	r3, [r5, #0]
 800c004:	1d1a      	adds	r2, r3, #4
 800c006:	602a      	str	r2, [r5, #0]
 800c008:	681d      	ldr	r5, [r3, #0]
 800c00a:	6862      	ldr	r2, [r4, #4]
 800c00c:	2100      	movs	r1, #0
 800c00e:	4628      	mov	r0, r5
 800c010:	f7f4 f90e 	bl	8000230 <memchr>
 800c014:	b108      	cbz	r0, 800c01a <_printf_i+0x1ea>
 800c016:	1b40      	subs	r0, r0, r5
 800c018:	6060      	str	r0, [r4, #4]
 800c01a:	6863      	ldr	r3, [r4, #4]
 800c01c:	6123      	str	r3, [r4, #16]
 800c01e:	2300      	movs	r3, #0
 800c020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c024:	e7aa      	b.n	800bf7c <_printf_i+0x14c>
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	462a      	mov	r2, r5
 800c02a:	4649      	mov	r1, r9
 800c02c:	4640      	mov	r0, r8
 800c02e:	47d0      	blx	sl
 800c030:	3001      	adds	r0, #1
 800c032:	d0ad      	beq.n	800bf90 <_printf_i+0x160>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	079b      	lsls	r3, r3, #30
 800c038:	d413      	bmi.n	800c062 <_printf_i+0x232>
 800c03a:	68e0      	ldr	r0, [r4, #12]
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	4298      	cmp	r0, r3
 800c040:	bfb8      	it	lt
 800c042:	4618      	movlt	r0, r3
 800c044:	e7a6      	b.n	800bf94 <_printf_i+0x164>
 800c046:	2301      	movs	r3, #1
 800c048:	4632      	mov	r2, r6
 800c04a:	4649      	mov	r1, r9
 800c04c:	4640      	mov	r0, r8
 800c04e:	47d0      	blx	sl
 800c050:	3001      	adds	r0, #1
 800c052:	d09d      	beq.n	800bf90 <_printf_i+0x160>
 800c054:	3501      	adds	r5, #1
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	9903      	ldr	r1, [sp, #12]
 800c05a:	1a5b      	subs	r3, r3, r1
 800c05c:	42ab      	cmp	r3, r5
 800c05e:	dcf2      	bgt.n	800c046 <_printf_i+0x216>
 800c060:	e7eb      	b.n	800c03a <_printf_i+0x20a>
 800c062:	2500      	movs	r5, #0
 800c064:	f104 0619 	add.w	r6, r4, #25
 800c068:	e7f5      	b.n	800c056 <_printf_i+0x226>
 800c06a:	bf00      	nop
 800c06c:	0800c231 	.word	0x0800c231
 800c070:	0800c242 	.word	0x0800c242

0800c074 <memmove>:
 800c074:	4288      	cmp	r0, r1
 800c076:	b510      	push	{r4, lr}
 800c078:	eb01 0402 	add.w	r4, r1, r2
 800c07c:	d902      	bls.n	800c084 <memmove+0x10>
 800c07e:	4284      	cmp	r4, r0
 800c080:	4623      	mov	r3, r4
 800c082:	d807      	bhi.n	800c094 <memmove+0x20>
 800c084:	1e43      	subs	r3, r0, #1
 800c086:	42a1      	cmp	r1, r4
 800c088:	d008      	beq.n	800c09c <memmove+0x28>
 800c08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c092:	e7f8      	b.n	800c086 <memmove+0x12>
 800c094:	4402      	add	r2, r0
 800c096:	4601      	mov	r1, r0
 800c098:	428a      	cmp	r2, r1
 800c09a:	d100      	bne.n	800c09e <memmove+0x2a>
 800c09c:	bd10      	pop	{r4, pc}
 800c09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0a6:	e7f7      	b.n	800c098 <memmove+0x24>

0800c0a8 <_sbrk_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d06      	ldr	r5, [pc, #24]	; (800c0c4 <_sbrk_r+0x1c>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	602b      	str	r3, [r5, #0]
 800c0b4:	f7f6 ff26 	bl	8002f04 <_sbrk>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d102      	bne.n	800c0c2 <_sbrk_r+0x1a>
 800c0bc:	682b      	ldr	r3, [r5, #0]
 800c0be:	b103      	cbz	r3, 800c0c2 <_sbrk_r+0x1a>
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	20000b6c 	.word	0x20000b6c

0800c0c8 <_realloc_r>:
 800c0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	4614      	mov	r4, r2
 800c0d0:	460e      	mov	r6, r1
 800c0d2:	b921      	cbnz	r1, 800c0de <_realloc_r+0x16>
 800c0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d8:	4611      	mov	r1, r2
 800c0da:	f7ff bc57 	b.w	800b98c <_malloc_r>
 800c0de:	b92a      	cbnz	r2, 800c0ec <_realloc_r+0x24>
 800c0e0:	f7ff fbe8 	bl	800b8b4 <_free_r>
 800c0e4:	4625      	mov	r5, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ec:	f000 f81b 	bl	800c126 <_malloc_usable_size_r>
 800c0f0:	4284      	cmp	r4, r0
 800c0f2:	4607      	mov	r7, r0
 800c0f4:	d802      	bhi.n	800c0fc <_realloc_r+0x34>
 800c0f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0fa:	d812      	bhi.n	800c122 <_realloc_r+0x5a>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4640      	mov	r0, r8
 800c100:	f7ff fc44 	bl	800b98c <_malloc_r>
 800c104:	4605      	mov	r5, r0
 800c106:	2800      	cmp	r0, #0
 800c108:	d0ed      	beq.n	800c0e6 <_realloc_r+0x1e>
 800c10a:	42bc      	cmp	r4, r7
 800c10c:	4622      	mov	r2, r4
 800c10e:	4631      	mov	r1, r6
 800c110:	bf28      	it	cs
 800c112:	463a      	movcs	r2, r7
 800c114:	f7ff fbc0 	bl	800b898 <memcpy>
 800c118:	4631      	mov	r1, r6
 800c11a:	4640      	mov	r0, r8
 800c11c:	f7ff fbca 	bl	800b8b4 <_free_r>
 800c120:	e7e1      	b.n	800c0e6 <_realloc_r+0x1e>
 800c122:	4635      	mov	r5, r6
 800c124:	e7df      	b.n	800c0e6 <_realloc_r+0x1e>

0800c126 <_malloc_usable_size_r>:
 800c126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c12a:	1f18      	subs	r0, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bfbc      	itt	lt
 800c130:	580b      	ldrlt	r3, [r1, r0]
 800c132:	18c0      	addlt	r0, r0, r3
 800c134:	4770      	bx	lr
	...

0800c138 <_init>:
 800c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13a:	bf00      	nop
 800c13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13e:	bc08      	pop	{r3}
 800c140:	469e      	mov	lr, r3
 800c142:	4770      	bx	lr

0800c144 <_fini>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	bf00      	nop
 800c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14a:	bc08      	pop	{r3}
 800c14c:	469e      	mov	lr, r3
 800c14e:	4770      	bx	lr
