
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  0800ef80  0800ef80  0001ef80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8d0  0800f8d0  00020780  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8d0  0800f8d0  0001f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8d8  0800f8d8  00020780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8d8  0800f8d8  0001f8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8dc  0800f8dc  0001f8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000780  20000000  0800f8e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001670  20000780  08010060  00020780  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  08010060  00021df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020780  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035fbe  00000000  00000000  000207f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007025  00000000  00000000  000567b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001990  00000000  00000000  0005d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a11  00000000  00000000  0005f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028268  00000000  00000000  00061b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f136  00000000  00000000  00089de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed1b3  00000000  00000000  000c8f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000674c  00000000  00000000  001b60cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000165f3  00000000  00000000  001bc818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001d2e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000780 	.word	0x20000780
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ef64 	.word	0x0800ef64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000784 	.word	0x20000784
 800021c:	0800ef64 	.word	0x0800ef64

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 15
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000fde:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8000fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f240 73f8 	movw	r3, #2040	; 0x7f8
 8000fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
	float temp = 0.0f;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	e01c      	b.n	800103e <Update_FIR_filter+0x6a>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8001004:	f240 0300 	movw	r3, #0
 8001008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	4413      	add	r3, r2
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	f240 73f8 	movw	r3, #2040	; 0x7f8
 800101a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4413      	add	r3, r2
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3301      	adds	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b0e      	cmp	r3, #14
 8001042:	dddf      	ble.n	8001004 <Update_FIR_filter+0x30>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8001044:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b0d      	cmp	r3, #13
 8001050:	d80c      	bhi.n	800106c <Update_FIR_filter+0x98>
 8001052:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001056:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e005      	b.n	8001078 <Update_FIR_filter+0xa4>
	else FIR_index = 0;
 800106c:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8001070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	return temp;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 15
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index2];
 8001096:	f640 0374 	movw	r3, #2164	; 0x874
 800109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109e:	ed93 7a00 	vldr	s14, [r3]
 80010a2:	f640 0334 	movw	r3, #2100	; 0x834
 80010a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	f640 0338 	movw	r3, #2104	; 0x838
 80010b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c2:	f640 0374 	movw	r3, #2164	; 0x874
 80010c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ca:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index2] = input/FIR_FILTER_LENGTH2;
 80010ce:	f640 0334 	movw	r3, #2100	; 0x834
 80010d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	ed97 7a01 	vldr	s14, [r7, #4]
 80010de:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	f640 0338 	movw	r3, #2104	; 0x838
 80010ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index2] ;
 80010f6:	f640 0334 	movw	r3, #2100	; 0x834
 80010fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	f640 0338 	movw	r3, #2104	; 0x838
 8001106:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4413      	add	r3, r2
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	f640 0374 	movw	r3, #2164	; 0x874
 8001116:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001122:	f640 0374 	movw	r3, #2164	; 0x874
 8001126:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800112a:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 800112e:	f640 0334 	movw	r3, #2100	; 0x834
 8001132:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b0d      	cmp	r3, #13
 800113a:	d80c      	bhi.n	8001156 <Update_FIR_filter2+0xca>
 800113c:	f640 0334 	movw	r3, #2100	; 0x834
 8001140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	f640 0334 	movw	r3, #2100	; 0x834
 800114e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e005      	b.n	8001162 <Update_FIR_filter2+0xd6>
	else FIR_index2 = 0;
 8001156:	f640 0334 	movw	r3, #2100	; 0x834
 800115a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 8001162:	f640 0374 	movw	r3, #2164	; 0x874
 8001166:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	ee07 3a90 	vmov	s15, r3
}
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif


    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00e      	beq.n	80011aa <Current_IRQ+0x2c>
 800118c:	2210      	movs	r2, #16
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f240 70bc 	movw	r0, #1980	; 0x7bc
 8001194:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001198:	f00a fea9 	bl	800beee <memcpy>
    else return;
    Current_Callback_flag = 1;
 800119c:	f240 73ac 	movw	r3, #1964	; 0x7ac
 80011a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e000      	b.n	80011ac <Current_IRQ+0x2e>
    else return;
 80011aa:	bf00      	nop
}
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 80011ba:	220c      	movs	r2, #12
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	f240 70cc 	movw	r0, #1996	; 0x7cc
 80011c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011c6:	f00a fe92 	bl	800beee <memcpy>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80011da:	221c      	movs	r2, #28
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f240 70d8 	movw	r0, #2008	; 0x7d8
 80011e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011e6:	f00a fe82 	bl	800beee <memcpy>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80011fa:	2208      	movs	r2, #8
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	f640 0078 	movw	r0, #2168	; 0x878
 8001202:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001206:	f00a fe72 	bl	800beee <memcpy>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
void check_value(CAN_LIMITS* ptr, float value, uint32_t *warning_ptr, uint32_t *error_ptr, uint8_t bit_pos){
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6178      	str	r0, [r7, #20]
 800121a:	ed87 0a04 	vstr	s0, [r7, #16]
 800121e:	60f9      	str	r1, [r7, #12]
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	71fb      	strb	r3, [r7, #7]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	edd3 7a03 	vldr	s15, [r3, #12]
 800122a:	ed97 7a04 	vldr	s14, [r7, #16]
 800122e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001236:	da09      	bge.n	800124c <check_value+0x3a>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	edd3 7a01 	vldr	s15, [r3, #4]
 800123e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d808      	bhi.n	800125e <check_value+0x4c>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	431a      	orrs	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	edd3 7a02 	vldr	s15, [r3, #8]
 8001264:	ed97 7a04 	vldr	s14, [r7, #16]
 8001268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	da0a      	bge.n	8001288 <check_value+0x76>
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed97 7a04 	vldr	s14, [r7, #16]
 800127c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d900      	bls.n	8001288 <check_value+0x76>
}
 8001286:	e008      	b.n	800129a <check_value+0x88>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	431a      	orrs	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <sqrtI>:

uint32_t sqrtI(uint32_t sqrtArg)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <sqrtI+0x12>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e027      	b.n	8001308 <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <sqrtI+0x1c>
 80012be:	2301      	movs	r3, #1
 80012c0:	e022      	b.n	8001308 <sqrtI+0x62>
answer = 0; // integer square root
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 80012c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	e016      	b.n	80012fc <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fb03 f303 	mul.w	r3, r3, r3
 80012dc:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d00e      	beq.n	8001304 <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d903      	bls.n	80012f6 <sqrtI+0x50>
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4053      	eors	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e5      	bne.n	80012ce <sqrtI+0x28>
 8001302:	e000      	b.n	8001306 <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 8001304:	bf00      	nop
}
return answer; // approximate root
 8001306:	697b      	ldr	r3, [r7, #20]
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
// |error| < 0.005
float atan2_approximation2( float y, float x )
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
 800131e:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 8001322:	edd7 7a00 	vldr	s15, [r7]
 8001326:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d11f      	bne.n	8001370 <atan2_approximation2+0x5c>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 8001330:	edd7 7a01 	vldr	s15, [r7, #4]
 8001334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	dd06      	ble.n	800134c <atan2_approximation2+0x38>
 800133e:	f640 73da 	movw	r3, #4058	; 0xfda
 8001342:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	e08e      	b.n	800146a <atan2_approximation2+0x156>
		if ( y == 0.0f ) return 0.0f;
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	d103      	bne.n	8001362 <atan2_approximation2+0x4e>
 800135a:	2300      	movs	r3, #0
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	e083      	b.n	800146a <atan2_approximation2+0x156>
		return -PIBY2_FLOAT;
 8001362:	f640 73da 	movw	r3, #4058	; 0xfda
 8001366:	f6cb 73c9 	movt	r3, #49097	; 0xbfc9
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	e07c      	b.n	800146a <atan2_approximation2+0x156>
	}
	float atan;
	float z = y/x;
 8001370:	edd7 6a01 	vldr	s13, [r7, #4]
 8001374:	ed97 7a00 	vldr	s14, [r7]
 8001378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137c:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 8001380:	edd7 7a02 	vldr	s15, [r7, #8]
 8001384:	eef0 7ae7 	vabs.f32	s15, s15
 8001388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d53b      	bpl.n	800140e <atan2_approximation2+0xfa>
	{
		atan = z/(1.0f + 0.28f*z*z);
 8001396:	edd7 7a02 	vldr	s15, [r7, #8]
 800139a:	f645 4329 	movw	r3, #23593	; 0x5c29
 800139e:	f6c3 638f 	movt	r3, #16015	; 0x3e8f
 80013a2:	ee07 3a10 	vmov	s14, r3
 80013a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 80013c6:	edd7 7a00 	vldr	s15, [r7]
 80013ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d548      	bpl.n	8001466 <atan2_approximation2+0x152>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d50a      	bpl.n	80013f8 <atan2_approximation2+0xe4>
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	f640 73db 	movw	r3, #4059	; 0xfdb
 80013ea:	f2c4 0349 	movt	r3, #16457	; 0x4049
 80013ee:	ee07 3a10 	vmov	s14, r3
 80013f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f6:	e038      	b.n	800146a <atan2_approximation2+0x156>
			return atan + PI_FLOAT;
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001400:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001404:	ee07 3a10 	vmov	s14, r3
 8001408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800140c:	e02d      	b.n	800146a <atan2_approximation2+0x156>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 800140e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001412:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001416:	f645 4329 	movw	r3, #23593	; 0x5c29
 800141a:	f6c3 638f 	movt	r3, #16015	; 0x3e8f
 800141e:	ee07 3a10 	vmov	s14, r3
 8001422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001426:	edd7 6a02 	vldr	s13, [r7, #8]
 800142a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142e:	f640 73da 	movw	r3, #4058	; 0xfda
 8001432:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8001436:	ee07 3a10 	vmov	s14, r3
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d50a      	bpl.n	8001466 <atan2_approximation2+0x152>
 8001450:	edd7 7a03 	vldr	s15, [r7, #12]
 8001454:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001458:	f2c4 0349 	movt	r3, #16457	; 0x4049
 800145c:	ee07 3a10 	vmov	s14, r3
 8001460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001464:	e001      	b.n	800146a <atan2_approximation2+0x156>
	}
	return atan;
 8001466:	edd7 7a03 	vldr	s15, [r7, #12]
}
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <BLDC_main>:


Flash *storage;

#define PID_TIMING 10
void BLDC_main(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af02      	add	r7, sp, #8
	Flash_init();
 800147e:	f002 fbaf 	bl	8003be0 <Flash_init>
	storage = Flash_get_values();
 8001482:	f002 fbf8 	bl	8003c76 <Flash_get_values>
 8001486:	4602      	mov	r2, r0
 8001488:	f640 2310 	movw	r3, #2576	; 0xa10
 800148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001490:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f004 fd9c 	bl	8005fd0 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, PID_TIMING); //40us = 25kHz
 8001498:	210a      	movs	r1, #10
 800149a:	f640 1000 	movw	r0, #2304	; 0x900
 800149e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014a2:	f002 fd61 	bl	8003f68 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1);
 80014a6:	f640 2310 	movw	r3, #2576	; 0xa10
 80014aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80014b4:	f640 2310 	movw	r3, #2576	; 0xa10
 80014b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80014c2:	f640 2310 	movw	r3, #2576	; 0xa10
 80014c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80014d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80014d4:	eeb0 1a66 	vmov.f32	s2, s13
 80014d8:	eef0 0a47 	vmov.f32	s1, s14
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	f640 1000 	movw	r0, #2304	; 0x900
 80014e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014e8:	f002 fc81 	bl	8003dee <SetTunings>
	SetOutputLimits(&Current_PID, -1500, 1500);
 80014ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f0:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 80014f4:	ee00 3a90 	vmov	s1, r3
 80014f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fc:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
 8001500:	ee00 3a10 	vmov	s0, r3
 8001504:	f640 1000 	movw	r0, #2304	; 0x900
 8001508:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800150c:	f002 fd60 	bl	8003fd0 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001510:	2100      	movs	r1, #0
 8001512:	f640 1000 	movw	r0, #2304	; 0x900
 8001516:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800151a:	f002 fe09 	bl	8004130 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 800151e:	2101      	movs	r1, #1
 8001520:	f640 1000 	movw	r0, #2304	; 0x900
 8001524:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001528:	f002 fdae 	bl	8004088 <SetMode>
	Initialize(&Current_PID);
 800152c:	f640 1000 	movw	r0, #2304	; 0x900
 8001530:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001534:	f002 fdca 	bl	80040cc <Initialize>

	SetSampleTime(&Velocity_PID, PID_TIMING); //100s = 10kHz
 8001538:	210a      	movs	r1, #10
 800153a:	f640 1040 	movw	r0, #2368	; 0x940
 800153e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001542:	f002 fd11 	bl	8003f68 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 8001546:	f640 2310 	movw	r3, #2576	; 0xa10
 800154a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001554:	f640 2310 	movw	r3, #2576	; 0xa10
 8001558:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001562:	f640 2310 	movw	r3, #2576	; 0xa10
 8001566:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001570:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001574:	eeb0 1a66 	vmov.f32	s2, s13
 8001578:	eef0 0a47 	vmov.f32	s1, s14
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f640 1040 	movw	r0, #2368	; 0x940
 8001584:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001588:	f002 fc31 	bl	8003dee <SetTunings>
	SetOutputLimits(&Velocity_PID, (storage->Current_limit*-1.0f), (storage->Current_limit));
 800158c:	f640 2310 	movw	r3, #2576	; 0xa10
 8001590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a0:	eef1 7a67 	vneg.f32	s15, s15
 80015a4:	f640 2310 	movw	r3, #2576	; 0xa10
 80015a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b0:	ee07 3a10 	vmov	s14, r3
 80015b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80015b8:	eef0 0a47 	vmov.f32	s1, s14
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	f640 1040 	movw	r0, #2368	; 0x940
 80015c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015c8:	f002 fd02 	bl	8003fd0 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80015cc:	2100      	movs	r1, #0
 80015ce:	f640 1040 	movw	r0, #2368	; 0x940
 80015d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015d6:	f002 fdab 	bl	8004130 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80015da:	2101      	movs	r1, #1
 80015dc:	f640 1040 	movw	r0, #2368	; 0x940
 80015e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015e4:	f002 fd50 	bl	8004088 <SetMode>
	Initialize(&Velocity_PID);
 80015e8:	f640 1040 	movw	r0, #2368	; 0x940
 80015ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015f0:	f002 fd6c 	bl	80040cc <Initialize>

	SetSampleTime(&Angle_PID, PID_TIMING); //100s = 10kHz
 80015f4:	210a      	movs	r1, #10
 80015f6:	f640 1080 	movw	r0, #2432	; 0x980
 80015fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015fe:	f002 fcb3 	bl	8003f68 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 8001602:	f640 2310 	movw	r3, #2576	; 0xa10
 8001606:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001610:	f640 2310 	movw	r3, #2576	; 0xa10
 8001614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800161e:	f640 2310 	movw	r3, #2576	; 0xa10
 8001622:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800162c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001630:	eeb0 1a66 	vmov.f32	s2, s13
 8001634:	eef0 0a47 	vmov.f32	s1, s14
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f640 1080 	movw	r0, #2432	; 0x980
 8001640:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001644:	f002 fbd3 	bl	8003dee <SetTunings>
	SetOutputLimits(&Angle_PID, (storage->Velocity_limit*-1.0f), (storage->Velocity_limit));
 8001648:	f640 2310 	movw	r3, #2576	; 0xa10
 800164c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165c:	eef1 7a67 	vneg.f32	s15, s15
 8001660:	f640 2310 	movw	r3, #2576	; 0xa10
 8001664:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	ee07 3a10 	vmov	s14, r3
 8001670:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001674:	eef0 0a47 	vmov.f32	s1, s14
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f640 1080 	movw	r0, #2432	; 0x980
 8001680:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001684:	f002 fca4 	bl	8003fd0 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8001688:	2100      	movs	r1, #0
 800168a:	f640 1080 	movw	r0, #2432	; 0x980
 800168e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001692:	f002 fd4d 	bl	8004130 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001696:	2101      	movs	r1, #1
 8001698:	f640 1080 	movw	r0, #2432	; 0x980
 800169c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016a0:	f002 fcf2 	bl	8004088 <SetMode>
	Initialize(&Angle_PID);
 80016a4:	f640 1080 	movw	r0, #2432	; 0x980
 80016a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016ac:	f002 fd0e 	bl	80040cc <Initialize>

	SetSampleTime(&Current_PID_offset, PID_TIMING); //100s = 10kHz
 80016b0:	210a      	movs	r1, #10
 80016b2:	f640 00c0 	movw	r0, #2240	; 0x8c0
 80016b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016ba:	f002 fc55 	bl	8003f68 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 80016be:	f640 2310 	movw	r3, #2576	; 0xa10
 80016c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016cc:	f640 2310 	movw	r3, #2576	; 0xa10
 80016d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80016da:	f640 2310 	movw	r3, #2576	; 0xa10
 80016de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80016e8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80016ec:	eeb0 1a66 	vmov.f32	s2, s13
 80016f0:	eef0 0a47 	vmov.f32	s1, s14
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	f640 00c0 	movw	r0, #2240	; 0x8c0
 80016fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001700:	f002 fb75 	bl	8003dee <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 8001704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001708:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 800170c:	ee00 3a90 	vmov	s1, r3
 8001710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001714:	f2cc 43bb 	movt	r3, #50363	; 0xc4bb
 8001718:	ee00 3a10 	vmov	s0, r3
 800171c:	f640 00c0 	movw	r0, #2240	; 0x8c0
 8001720:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001724:	f002 fc54 	bl	8003fd0 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 8001728:	2100      	movs	r1, #0
 800172a:	f640 00c0 	movw	r0, #2240	; 0x8c0
 800172e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001732:	f002 fcfd 	bl	8004130 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 8001736:	2101      	movs	r1, #1
 8001738:	f640 00c0 	movw	r0, #2240	; 0x8c0
 800173c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001740:	f002 fca2 	bl	8004088 <SetMode>
	Initialize(&Current_PID_offset);
 8001744:	f640 00c0 	movw	r0, #2240	; 0x8c0
 8001748:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800174c:	f002 fcbe 	bl	80040cc <Initialize>


	//setup current
	current_init((void*)&Current_IRQ);
 8001750:	f241 107f 	movw	r0, #4479	; 0x117f
 8001754:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001758:	f002 fe41 	bl	80043de <current_init>
	HAL_Delay(1000);
 800175c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001760:	f004 fc36 	bl	8005fd0 <HAL_Delay>
	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8001764:	f241 10d3 	movw	r0, #4563	; 0x11d3
 8001768:	f6c0 0000 	movt	r0, #2048	; 0x800
 800176c:	f001 ffcf 	bl	800370e <ORBIS_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8001770:	f241 10b3 	movw	r0, #4531	; 0x11b3
 8001774:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001778:	f002 fe5e 	bl	8004438 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 800177c:	f241 12f3 	movw	r2, #4595	; 0x11f3
 8001780:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001784:	2136      	movs	r1, #54	; 0x36
 8001786:	f641 0030 	movw	r0, #6192	; 0x1830
 800178a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800178e:	f003 f9da 	bl	8004b46 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_IRQ);

	FDCAN_Start(&hfdcan1);
 8001792:	f641 0030 	movw	r0, #6192	; 0x1830
 8001796:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800179a:	f003 f9b9 	bl	8004b10 <FDCAN_Start>

	//--------------setup PWM------------------
	electrical_offset = storage->electrical_offset;
 800179e:	f640 2310 	movw	r3, #2576	; 0xa10
 80017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017aa:	f640 635c 	movw	r3, #3676	; 0xe5c
 80017ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017b2:	601a      	str	r2, [r3, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80017b4:	f640 2310 	movw	r3, #2576	; 0xa10
 80017b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80017c2:	f640 6358 	movw	r3, #3672	; 0xe58
 80017c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ca:	701a      	strb	r2, [r3, #0]
	mech_offset = storage->mech_offset;//storage->mech_offset;
 80017cc:	f640 2310 	movw	r3, #2576	; 0xa10
 80017d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 24a8 	ldrh.w	r2, [r3, #1192]	; 0x4a8
 80017da:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80017de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017e2:	801a      	strh	r2, [r3, #0]
	if(mech_offset > 400)mech_offset = 0;
 80017e4:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80017e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017f2:	d905      	bls.n	8001800 <BLDC_main+0x388>
 80017f4:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80017f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
	flash_nan = 0;
 8001800:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8001804:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SIZE*NPP; i++){
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	e018      	b.n	8001844 <BLDC_main+0x3cc>
		if (isnan(storage->error_filt[i]))flash_nan = 1;
 8001812:	f640 2310 	movw	r3, #2576	; 0xa10
 8001816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	331a      	adds	r3, #26
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eef4 7a67 	vcmp.f32	s15, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d705      	bvc.n	800183e <BLDC_main+0x3c6>
 8001832:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8001836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SIZE*NPP; i++){
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3301      	adds	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800184a:	dbe2      	blt.n	8001812 <BLDC_main+0x39a>
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 800184c:	f640 13c2 	movw	r3, #2498	; 0x9c2
 8001850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10e      	bne.n	8001878 <BLDC_main+0x400>
 800185a:	f640 2310 	movw	r3, #2576	; 0xa10
 800185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3368      	adds	r3, #104	; 0x68
 8001866:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800186a:	4619      	mov	r1, r3
 800186c:	f640 2018 	movw	r0, #2584	; 0xa18
 8001870:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001874:	f00a fb3b 	bl	800beee <memcpy>


	uint32_t test = 1499;
 8001878:	f240 53db 	movw	r3, #1499	; 0x5db
 800187c:	603b      	str	r3, [r7, #0]
	CTRL_init_PWM(&test);
 800187e:	463b      	mov	r3, r7
 8001880:	4618      	mov	r0, r3
 8001882:	f000 febf 	bl	8002604 <CTRL_init_PWM>

	#ifdef CALIBRATE_ON_STARTUP
	Status = BLDC_CALIBRATING_ENCODER;
 8001886:	f640 2304 	movw	r3, #2564	; 0xa04
 800188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
	#endif


	while(1){
		if (Status == BLDC_CALIBRATING_ENCODER){
 8001892:	f640 2304 	movw	r3, #2564	; 0xa04
 8001896:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d16e      	bne.n	800197e <BLDC_main+0x506>
			HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2140      	movs	r1, #64	; 0x40
 80018a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a8:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80018ac:	f006 fbfe 	bl	80080ac <HAL_GPIO_WritePin>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 80018b0:	f240 71bc 	movw	r1, #1980	; 0x7bc
 80018b4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018b8:	f240 70d8 	movw	r0, #2008	; 0x7d8
 80018bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018c0:	f001 f8d7 	bl	8002a72 <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 80018c4:	f240 71bc 	movw	r1, #1980	; 0x7bc
 80018c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018cc:	f240 70d8 	movw	r0, #2008	; 0x7d8
 80018d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018d4:	f001 fa66 	bl	8002da4 <calibrate>

			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 80018d8:	f240 73d8 	movw	r3, #2008	; 0x7d8
 80018dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80018e6:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80018ea:	fba3 2302 	umull	r2, r3, r3, r2
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	f246 02b7 	movw	r2, #24759	; 0x60b7
 80018f6:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 80018fa:	fb82 1203 	smull	r1, r2, r2, r3
 80018fe:	441a      	add	r2, r3
 8001900:	1211      	asrs	r1, r2, #8
 8001902:	17da      	asrs	r2, r3, #31
 8001904:	1a8a      	subs	r2, r1, r2
 8001906:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800190a:	fb01 f202 	mul.w	r2, r1, r2
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	b21a      	sxth	r2, r3
 8001912:	f640 2310 	movw	r3, #2576	; 0xa10
 8001916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b292      	uxth	r2, r2
 800191e:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 8001922:	f640 2310 	movw	r3, #2576	; 0xa10
 8001926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	f640 635c 	movw	r3, #3676	; 0xe5c
 8001930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6653      	str	r3, [r2, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 8001938:	f640 2310 	movw	r3, #2576	; 0xa10
 800193c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f640 6358 	movw	r3, #3672	; 0xe58
 8001946:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f882 3060 	strb.w	r3, [r2, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001950:	f640 2310 	movw	r3, #2576	; 0xa10
 8001954:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3368      	adds	r3, #104	; 0x68
 800195c:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001960:	f640 2118 	movw	r1, #2584	; 0xa18
 8001964:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001968:	4618      	mov	r0, r3
 800196a:	f00a fac0 	bl	800beee <memcpy>
			Flash_save();
 800196e:	f002 f975 	bl	8003c5c <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001972:	f640 2304 	movw	r3, #2564	; 0xa04
 8001976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
			#endif
			#ifdef Status_debug
			, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
				#endif
			#ifdef Position_debug
			, (int32_t)Feedback.Position_Encoder1_pos, (int32_t)Feedback.Position_Encoder2_pos, (int32_t)Feedback.Position_Calculated_pos, (int32_t)Feedback.Position_Velocity//Velocity_PID.Setpoint
 800197e:	f640 0380 	movw	r3, #2176	; 0x880
 8001982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001986:	edd3 7a04 	vldr	s15, [r3, #16]
			PrintServerPrintf(
 800198a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
			, (int32_t)Feedback.Position_Encoder1_pos, (int32_t)Feedback.Position_Encoder2_pos, (int32_t)Feedback.Position_Calculated_pos, (int32_t)Feedback.Position_Velocity//Velocity_PID.Setpoint
 800198e:	f640 0380 	movw	r3, #2176	; 0x880
 8001992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001996:	edd3 7a05 	vldr	s15, [r3, #20]
			PrintServerPrintf(
 800199a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
			, (int32_t)Feedback.Position_Encoder1_pos, (int32_t)Feedback.Position_Encoder2_pos, (int32_t)Feedback.Position_Calculated_pos, (int32_t)Feedback.Position_Velocity//Velocity_PID.Setpoint
 800199e:	f640 0380 	movw	r3, #2176	; 0x880
 80019a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019a6:	edd3 7a06 	vldr	s15, [r3, #24]
			PrintServerPrintf(
 80019aa:	eebd 6ae7 	vcvt.s32.f32	s12, s15
			, (int32_t)Feedback.Position_Encoder1_pos, (int32_t)Feedback.Position_Encoder2_pos, (int32_t)Feedback.Position_Calculated_pos, (int32_t)Feedback.Position_Velocity//Velocity_PID.Setpoint
 80019ae:	f640 0380 	movw	r3, #2176	; 0x880
 80019b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019b6:	edd3 7a07 	vldr	s15, [r3, #28]
			PrintServerPrintf(
 80019ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019be:	ee17 3a90 	vmov	r3, s15
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	ee16 3a10 	vmov	r3, s12
 80019c8:	ee16 2a90 	vmov	r2, s13
 80019cc:	ee17 1a10 	vmov	r1, s14
 80019d0:	f64e 7080 	movw	r0, #61312	; 0xef80
 80019d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019d8:	f002 fbb8 	bl	800414c <PrintServerPrintf>
		if (Status == BLDC_CALIBRATING_ENCODER){
 80019dc:	e759      	b.n	8001892 <BLDC_main+0x41a>

080019de <run>:
			); // \r only goes back not to next line!
		#endif
	}
}

void run(){
 80019de:	b5b0      	push	{r4, r5, r7, lr}
 80019e0:	b08a      	sub	sp, #40	; 0x28
 80019e2:	af00      	add	r7, sp, #0
	#ifdef RUNNING_LED_DEBUG
//	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
//	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
	#endif

	memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 80019e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80019e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019ec:	f240 73bc 	movw	r3, #1980	; 0x7bc
 80019f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019f4:	4614      	mov	r4, r2
 80019f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 80019fc:	f640 12d4 	movw	r2, #2516	; 0x9d4
 8001a00:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a04:	f240 73cc 	movw	r3, #1996	; 0x7cc
 8001a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8001a16:	f640 12e0 	movw	r2, #2528	; 0x9e0
 8001a1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a1e:	f240 73d8 	movw	r3, #2008	; 0x7d8
 8001a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001a36:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8001a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a3e:	f640 0378 	movw	r3, #2168	; 0x878
 8001a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a4a:	e882 0003 	stmia.w	r2, {r0, r1}

	//FSM
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001a4e:	f640 2304 	movw	r3, #2564	; 0xa04
 8001a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10d      	bne.n	8001a78 <run+0x9a>
 8001a5c:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d106      	bne.n	8001a78 <run+0x9a>
 8001a6a:	f640 2304 	movw	r3, #2564	; 0xa04
 8001a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e07c      	b.n	8001b72 <run+0x194>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001a78:	f640 2304 	movw	r3, #2564	; 0xa04
 8001a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <run+0xc4>
 8001a86:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d106      	bne.n	8001aa2 <run+0xc4>
 8001a94:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8001a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e067      	b.n	8001b72 <run+0x194>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001aa2:	f640 2304 	movw	r3, #2564	; 0xa04
 8001aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d122      	bne.n	8001af6 <run+0x118>
 8001ab0:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d11b      	bne.n	8001af6 <run+0x118>
		Status = BLDC_RUNNING;
 8001abe:	f640 2304 	movw	r3, #2564	; 0xa04
 8001ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  AUTOMATIC);
 8001aca:	2101      	movs	r1, #1
 8001acc:	f640 1000 	movw	r0, #2304	; 0x900
 8001ad0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ad4:	f002 fad8 	bl	8004088 <SetMode>
		SetMode(&Velocity_PID,  AUTOMATIC);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	f640 1040 	movw	r0, #2368	; 0x940
 8001ade:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ae2:	f002 fad1 	bl	8004088 <SetMode>
		SetMode(&Angle_PID,  AUTOMATIC);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	f640 1080 	movw	r0, #2432	; 0x980
 8001aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001af0:	f002 faca 	bl	8004088 <SetMode>
 8001af4:	e03d      	b.n	8001b72 <run+0x194>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 8001af6:	f640 2304 	movw	r3, #2564	; 0xa04
 8001afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d122      	bne.n	8001b4a <run+0x16c>
 8001b04:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d11b      	bne.n	8001b4a <run+0x16c>
		Status = BLDC_STOPPED_WITH_BREAK;
 8001b12:	f640 2304 	movw	r3, #2564	; 0xa04
 8001b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  MANUAL);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f640 1000 	movw	r0, #2304	; 0x900
 8001b24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001b28:	f002 faae 	bl	8004088 <SetMode>
		SetMode(&Velocity_PID,  MANUAL);
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f640 1040 	movw	r0, #2368	; 0x940
 8001b32:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001b36:	f002 faa7 	bl	8004088 <SetMode>
		SetMode(&Angle_PID,  MANUAL);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f640 1080 	movw	r0, #2432	; 0x980
 8001b40:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001b44:	f002 faa0 	bl	8004088 <SetMode>
 8001b48:	e013      	b.n	8001b72 <run+0x194>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8001b4a:	f640 2304 	movw	r3, #2564	; 0xa04
 8001b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10c      	bne.n	8001b72 <run+0x194>
 8001b58:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8001b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <run+0x194>
 8001b66:	f640 2304 	movw	r3, #2564	; 0xa04
 8001b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]


	//----------------------position-----------------
	if (last_pos_enc > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001b72:	f640 2308 	movw	r3, #2568	; 0xa08
 8001b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	f641 63b0 	movw	r3, #7856	; 0x1eb0
 8001b80:	f2c0 0304 	movt	r3, #4
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d916      	bls.n	8001bb6 <run+0x1d8>
 8001b88:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f645 738f 	movw	r3, #24463	; 0x5f8f
 8001b96:	f2c0 0301 	movt	r3, #1
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d80b      	bhi.n	8001bb6 <run+0x1d8>
 8001b9e:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e020      	b.n	8001bf8 <run+0x21a>
	else if (last_pos_enc < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001bb6:	f640 2308 	movw	r3, #2568	; 0xa08
 8001bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f645 738f 	movw	r3, #24463	; 0x5f8f
 8001bc4:	f2c0 0301 	movt	r3, #1
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d815      	bhi.n	8001bf8 <run+0x21a>
 8001bcc:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f641 63b0 	movw	r3, #7856	; 0x1eb0
 8001bda:	f2c0 0304 	movt	r3, #4
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90a      	bls.n	8001bf8 <run+0x21a>
 8001be2:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1e5a      	subs	r2, r3, #1
 8001bee:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bf6:	601a      	str	r2, [r3, #0]
	last_pos_enc = IRQ_Encoders_BUFF.Encoder1_pos;
 8001bf8:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	f640 2308 	movw	r3, #2568	; 0xa08
 8001c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c0a:	601a      	str	r2, [r3, #0]

	//------------------calculate PID----------------------- 6.52us
	float d;
	float q;
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 8001c0c:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001c1a:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8001c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c22:	099b      	lsrs	r3, r3, #6
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001c2a:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c32:	441a      	add	r2, r3
 8001c34:	1211      	asrs	r1, r2, #8
 8001c36:	17da      	asrs	r2, r3, #31
 8001c38:	1a8a      	subs	r2, r1, r2
 8001c3a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c3e:	fb01 f202 	mul.w	r2, r1, r2
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001c46:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001c4a:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8001c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c5a:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001c5e:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001c62:	fb82 1203 	smull	r1, r2, r2, r3
 8001c66:	441a      	add	r2, r3
 8001c68:	1211      	asrs	r1, r2, #8
 8001c6a:	17da      	asrs	r2, r3, #31
 8001c6c:	1a8a      	subs	r2, r1, r2
 8001c6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c72:	fb01 f202 	mul.w	r2, r1, r2
 8001c76:	1a9a      	subs	r2, r3, r2
 8001c78:	4613      	mov	r3, r2
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	461a      	mov	r2, r3
 8001c82:	f246 03b7 	movw	r3, #24759	; 0x60b7
 8001c86:	f2cb 630b 	movt	r3, #46603	; 0xb60b
 8001c8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c8e:	4413      	add	r3, r2
 8001c90:	1219      	asrs	r1, r3, #8
 8001c92:	17d3      	asrs	r3, r2, #31
 8001c94:	1aca      	subs	r2, r1, r3
 8001c96:	f647 0379 	movw	r3, #30841	; 0x7879
 8001c9a:	f6c7 0378 	movt	r3, #30840	; 0x7878
 8001c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca2:	11d9      	asrs	r1, r3, #7
 8001ca4:	17d3      	asrs	r3, r2, #31
 8001ca6:	1ac9      	subs	r1, r1, r3
 8001ca8:	460b      	mov	r3, r1
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	440b      	add	r3, r1
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1ad1      	subs	r1, r2, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	843b      	strh	r3, [r7, #32]
	error_pos = (((error_filt[index_error2] - error_filt[0]))*NPP);
 8001cb6:	8c3a      	ldrh	r2, [r7, #32]
 8001cb8:	f640 2318 	movw	r3, #2584	; 0xa18
 8001cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	f640 2318 	movw	r3, #2584	; 0xa18
 8001ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce0:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8001ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
	aa_test1 = error_filt[index_error2];
 8001cec:	8c3a      	ldrh	r2, [r7, #32]
 8001cee:	f640 2318 	movw	r3, #2584	; 0xa18
 8001cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8001d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d04:	601a      	str	r2, [r3, #0]
	aa_test2 = error_pos;
 8001d06:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8001d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d16:	ee17 2a90 	vmov	r2, s15
 8001d1a:	f240 73a8 	movw	r3, #1960	; 0x7a8
 8001d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d22:	601a      	str	r2, [r3, #0]
	//mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + (int32_t)electrical_offset
	angle = (mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos + (int32_t)error_filt[0]*1000, 0)  + (int16_t)(error_pos) + 2*360)%360;
 8001d24:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f640 2318 	movw	r3, #2584	; 0xa18
 8001d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3e:	ee17 1a90 	vmov	r1, s15
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fbc6 	bl	80024e0 <mech_to_el_deg>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8001d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d68:	ee17 3a90 	vmov	r3, s15
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001d74:	f246 02b7 	movw	r2, #24759	; 0x60b7
 8001d78:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8001d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d80:	441a      	add	r2, r3
 8001d82:	1211      	asrs	r1, r2, #8
 8001d84:	17da      	asrs	r2, r3, #31
 8001d86:	1a8a      	subs	r2, r1, r2
 8001d88:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001d8c:	fb01 f202 	mul.w	r2, r1, r2
 8001d90:	1a9a      	subs	r2, r3, r2
 8001d92:	b212      	sxth	r2, r2
 8001d94:	f240 739c 	movw	r3, #1948	; 0x79c
 8001d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d9c:	801a      	strh	r2, [r3, #0]

	//dq0((float)angle*3.14159264f/180.0f, ((float)IRQ_Current_BUFF.Current_M3/1000.0f), ((float)IRQ_Current_BUFF.Current_M2/1000.0f), ((float)IRQ_Current_BUFF.Current_M1/1000.0f), &d, &q);
	dq0((float)angle*3.14159264f/180.0f, ((float)IRQ_Current_BUFF.Current_M2/1000.0f), ((float)IRQ_Current_BUFF.Current_M3/1000.0f), ((float)IRQ_Current_BUFF.Current_M1/1000.0f), &d, &q);
 8001d9e:	f240 739c 	movw	r3, #1948	; 0x79c
 8001da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001db6:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001dba:	ee07 3a10 	vmov	s14, r3
 8001dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8001dc8:	ee06 3a90 	vmov	s13, r3
 8001dcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dd0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	2300      	movs	r3, #0
 8001de4:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001de8:	ee06 3a10 	vmov	s12, r3
 8001dec:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001df0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	2300      	movs	r3, #0
 8001e04:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001e08:	ee05 3a90 	vmov	s11, r3
 8001e0c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001e10:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	2300      	movs	r3, #0
 8001e24:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001e28:	ee05 3a10 	vmov	s10, r3
 8001e2c:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8001e30:	1d3a      	adds	r2, r7, #4
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	eef0 1a65 	vmov.f32	s3, s11
 8001e3e:	eeb0 1a46 	vmov.f32	s2, s12
 8001e42:	eef0 0a66 	vmov.f32	s1, s13
 8001e46:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4a:	f002 fdc0 	bl	80049ce <dq0>

	float q_lpf = Update_FIR_filter(q);
 8001e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	f7ff f8bd 	bl	8000fd4 <Update_FIR_filter>
 8001e5a:	ed87 0a07 	vstr	s0, [r7, #28]
	float d_lpf = Update_FIR_filter2(d);
 8001e5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	f7ff f911 	bl	800108c <Update_FIR_filter2>
 8001e6a:	ed87 0a06 	vstr	s0, [r7, #24]

	//------------------calculate PID----------------------- 6.52us
	Angle_PID.Input = ((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000.0f + position_overflow*360.0f + storage->Encoder1_offset;
 8001e6e:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e80:	2300      	movs	r3, #0
 8001e82:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001e86:	ee06 3a90 	vmov	s13, r3
 8001e8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e8e:	f640 230c 	movw	r3, #2572	; 0xa0c
 8001e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8001ea6:	ee06 3a90 	vmov	s13, r3
 8001eaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb2:	f640 2310 	movw	r3, #2576	; 0xa10
 8001eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	f640 1380 	movw	r3, #2432	; 0x980
 8001ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
	Velocity_PID.Input = ((float)(IRQ_Encoders_BUFF.Velocity))/1000.0f;
 8001ed0:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8001ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8001ee8:	ee06 3a90 	vmov	s13, r3
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	f640 1340 	movw	r3, #2368	; 0x940
 8001ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
	Current_PID.Input = q_lpf;
 8001efc:	f640 1300 	movw	r3, #2304	; 0x900
 8001f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	601a      	str	r2, [r3, #0]
	Current_PID_offset.Input = d_lpf;
 8001f08:	f640 03c0 	movw	r3, #2240	; 0x8c0
 8001f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

	Angle_PID.Setpoint = 5*360;
 8001f14:	f640 1380 	movw	r3, #2432	; 0x980
 8001f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f2c4 42e1 	movt	r2, #17633	; 0x44e1
 8001f22:	609a      	str	r2, [r3, #8]
//	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
	Compute(&Angle_PID);
 8001f24:	f640 1080 	movw	r0, #2432	; 0x980
 8001f28:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f2c:	f001 feae 	bl	8003c8c <Compute>

//	Velocity_PID.Setpoint = 20.0;
	Velocity_PID.Setpoint = Angle_PID.Output;
 8001f30:	f640 1380 	movw	r3, #2432	; 0x980
 8001f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	f640 1340 	movw	r3, #2368	; 0x940
 8001f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f42:	609a      	str	r2, [r3, #8]
	Compute(&Velocity_PID);
 8001f44:	f640 1040 	movw	r0, #2368	; 0x940
 8001f48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f4c:	f001 fe9e 	bl	8003c8c <Compute>
	float weight = 4.7; //amps at 90 degrees;
	Current_PID.Setpoint = weight*(sinf((((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000+storage->Encoder1_offset)*3.14159264/180));
	#else

//    Current_PID.Setpoint = 0.5;
	Current_PID.Setpoint = Velocity_PID.Output;
 8001f50:	f640 1340 	movw	r3, #2368	; 0x940
 8001f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	f640 1300 	movw	r3, #2304	; 0x900
 8001f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f62:	609a      	str	r2, [r3, #8]

	#endif
	Compute(&Current_PID);
 8001f64:	f640 1000 	movw	r0, #2304	; 0x900
 8001f68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f6c:	f001 fe8e 	bl	8003c8c <Compute>

//	Current_PID_offset.Setpoint = 0;
	Compute(&Current_PID_offset);
 8001f70:	f640 00c0 	movw	r0, #2240	; 0x8c0
 8001f74:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001f78:	f001 fe88 	bl	8003c8c <Compute>



	//-----------------set PWM--------------------- 3.12us
	float V_d = 100; //Current_PID_offset.Output;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f2c4 23c8 	movt	r3, #17096	; 0x42c8
 8001f82:	617b      	str	r3, [r7, #20]
	float V_q = 0; //Current_PID.Output;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
	float theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001f88:	edd7 0a05 	vldr	s1, [r7, #20]
 8001f8c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001f90:	f7ff f9c0 	bl	8001314 <atan2_approximation2>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8001f9e:	ee07 3a10 	vmov	s14, r3
 8001fa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fa6:	f640 73db 	movw	r3, #4059	; 0xfdb
 8001faa:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8001fae:	ee06 3a90 	vmov	s13, r3
 8001fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t mag = sqrtI((uint32_t)(V_q*V_q+V_d*V_d));
 8001fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fbe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd2:	ee17 0a90 	vmov	r0, s15
 8001fd6:	f7ff f966 	bl	80012a6 <sqrtI>
 8001fda:	6278      	str	r0, [r7, #36]	; 0x24
	mag *= 0.7;
 8001fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fde:	f7fe fab9 	bl	8000554 <__aeabi_ui2d>
 8001fe2:	f04f 3266 	mov.w	r2, #1717986918	; 0x66666666
 8001fe6:	f246 6366 	movw	r3, #26214	; 0x6666
 8001fea:	f6c3 73e6 	movt	r3, #16358	; 0x3fe6
 8001fee:	f7fe fb2b 	bl	8000648 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f7fe fdfd 	bl	8000bf8 <__aeabi_d2uiz>
 8001ffe:	4603      	mov	r3, r0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
	if (mag > 1499)mag = 1499;
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	f240 52db 	movw	r2, #1499	; 0x5db
 8002008:	4293      	cmp	r3, r2
 800200a:	d902      	bls.n	8002012 <run+0x634>
 800200c:	f240 53db 	movw	r3, #1499	; 0x5db
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

	//----------------error check---------------
	uint32_t warning = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
	check_value(&LIMIT_Current, (float)q_lpf, &warning, &error, 0);
 8002016:	4639      	mov	r1, r7
 8002018:	2300      	movs	r3, #0
 800201a:	f240 72b8 	movw	r2, #1976	; 0x7b8
 800201e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002022:	ed97 0a07 	vldr	s0, [r7, #28]
 8002026:	f240 008c 	movw	r0, #140	; 0x8c
 800202a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800202e:	f7ff f8f0 	bl	8001212 <check_value>
	check_value(&LIMIT_Current, (float)d_lpf, &warning, &error, 0);
 8002032:	4639      	mov	r1, r7
 8002034:	2300      	movs	r3, #0
 8002036:	f240 72b8 	movw	r2, #1976	; 0x7b8
 800203a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800203e:	ed97 0a06 	vldr	s0, [r7, #24]
 8002042:	f240 008c 	movw	r0, #140	; 0x8c
 8002046:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800204a:	f7ff f8e2 	bl	8001212 <check_value>
	check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos, &warning, &error, 1);
 800204e:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002052:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002060:	4639      	mov	r1, r7
 8002062:	2301      	movs	r3, #1
 8002064:	f240 72b8 	movw	r2, #1976	; 0x7b8
 8002068:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	f240 003c 	movw	r0, #60	; 0x3c
 8002074:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002078:	f7ff f8cb 	bl	8001212 <check_value>
	check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos, &warning, &error, 2);
 800207c:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208e:	4639      	mov	r1, r7
 8002090:	2302      	movs	r3, #2
 8002092:	f240 72b8 	movw	r2, #1976	; 0x7b8
 8002096:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	f240 004c 	movw	r0, #76	; 0x4c
 80020a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020a6:	f7ff f8b4 	bl	8001212 <check_value>
	check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity, &warning, &error, 3);
 80020aa:	f640 13e0 	movw	r3, #2528	; 0x9e0
 80020ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020bc:	4639      	mov	r1, r7
 80020be:	2303      	movs	r3, #3
 80020c0:	f240 72b8 	movw	r2, #1976	; 0x7b8
 80020c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020c8:	eeb0 0a67 	vmov.f32	s0, s15
 80020cc:	f240 009c 	movw	r0, #156	; 0x9c
 80020d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80020d4:	f7ff f89d 	bl	8001212 <check_value>
	check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux, &warning, &error, 4);
 80020d8:	f640 13d4 	movw	r3, #2516	; 0x9d4
 80020dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020e0:	889b      	ldrh	r3, [r3, #4]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	4639      	mov	r1, r7
 80020ec:	2304      	movs	r3, #4
 80020ee:	f240 72b8 	movw	r2, #1976	; 0x7b8
 80020f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	f240 006c 	movw	r0, #108	; 0x6c
 80020fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002102:	f7ff f886 	bl	8001212 <check_value>
	check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat, &warning, &error, 5);
 8002106:	f640 13d4 	movw	r3, #2516	; 0x9d4
 800210a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002118:	4639      	mov	r1, r7
 800211a:	2305      	movs	r3, #5
 800211c:	f240 72b8 	movw	r2, #1976	; 0x7b8
 8002120:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	f240 005c 	movw	r0, #92	; 0x5c
 800212c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002130:	f7ff f86f 	bl	8001212 <check_value>
	check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1, &warning, &error, 6);
 8002134:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8002138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002148:	4639      	mov	r1, r7
 800214a:	2306      	movs	r3, #6
 800214c:	f240 72b8 	movw	r2, #1976	; 0x7b8
 8002150:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	f240 007c 	movw	r0, #124	; 0x7c
 800215c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002160:	f7ff f857 	bl	8001212 <check_value>
	check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2, &warning, &error, 7);
 8002164:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8002168:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800216c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	4639      	mov	r1, r7
 800217a:	2307      	movs	r3, #7
 800217c:	f240 72b8 	movw	r2, #1976	; 0x7b8
 8002180:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002184:	eeb0 0a67 	vmov.f32	s0, s15
 8002188:	f240 007c 	movw	r0, #124	; 0x7c
 800218c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002190:	f7ff f83f 	bl	8001212 <check_value>

	//-----------------set PWM---------------------
	if(error){
 8002194:	f240 73b8 	movw	r3, #1976	; 0x7b8
 8002198:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <run+0x7d6>
		Status = BLDC_ERROR;
 80021a2:	f640 2304 	movw	r3, #2564	; 0xa04
 80021a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021aa:	2204      	movs	r2, #4
 80021ac:	701a      	strb	r2, [r3, #0]
		shutoff();
 80021ae:	f000 fc13 	bl	80029d8 <shutoff>
 80021b2:	e078      	b.n	80022a6 <run+0x8c8>
	}
	else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 80021b4:	f640 2304 	movw	r3, #2564	; 0xa04
 80021b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d104      	bne.n	80021cc <run+0x7ee>
		shutoff();
 80021c2:	f000 fc09 	bl	80029d8 <shutoff>
		shutdown();
 80021c6:	f000 fc20 	bl	8002a0a <shutdown>
 80021ca:	e06c      	b.n	80022a6 <run+0x8c8>
	}
	else if (Status == BLDC_STOPPED_WITH_BREAK){
 80021cc:	f640 2304 	movw	r3, #2564	; 0xa04
 80021d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11e      	bne.n	8002218 <run+0x83a>
//			shutoff();
		inverter(angle + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 80021da:	edd7 7a03 	vldr	s15, [r7, #12]
 80021de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f240 739c 	movw	r3, #1948	; 0x79c
 80021ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80021fe:	b29b      	uxth	r3, r3
 8002200:	b218      	sxth	r0, r3
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	b299      	uxth	r1, r3
 8002206:	f640 6358 	movw	r3, #3672	; 0xe58
 800220a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	f000 fa65 	bl	80026e0 <inverter>
 8002216:	e046      	b.n	80022a6 <run+0x8c8>
		}
	else if (Status == BLDC_RUNNING){
 8002218:	f640 2304 	movw	r3, #2564	; 0xa04
 800221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d13f      	bne.n	80022a6 <run+0x8c8>
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8002226:	f640 13e0 	movw	r3, #2528	; 0x9e0
 800222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f954 	bl	80024e0 <mech_to_el_deg>
 8002238:	4603      	mov	r3, r0
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002242:	f240 73a0 	movw	r3, #1952	; 0x7a0
 8002246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002252:	f640 635c 	movw	r3, #3676	; 0xe5c
 8002256:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002266:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226a:	edd7 7a03 	vldr	s15, [r7, #12]
 800226e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	2300      	movs	r3, #0
 800227c:	f2c4 4334 	movt	r3, #17460	; 0x4434
 8002280:	ee07 3a10 	vmov	s14, r3
 8002284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	b218      	sxth	r0, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	b299      	uxth	r1, r3
 8002296:	f640 6358 	movw	r3, #3672	; 0xe58
 800229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f000 fa1d 	bl	80026e0 <inverter>
	}
	//--------------send can message------------------ 1us
	//time keepers
	timing_CAN_feedback++;
 80022a6:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80022aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80022b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ba:	601a      	str	r2, [r3, #0]
	running_LED_timing++;
 80022bc:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80022c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	f240 73b4 	movw	r3, #1972	; 0x7b4
 80022cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022d0:	601a      	str	r2, [r3, #0]

	if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 80022d2:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80022d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b95      	cmp	r3, #149	; 0x95
 80022de:	f240 80e5 	bls.w	80024ac <run+0xace>
		timing_CAN_feedback = 0;
 80022e2:	f240 73b0 	movw	r3, #1968	; 0x7b0
 80022e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
		Feedback.Status_warning = warning;
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	f640 0380 	movw	r3, #2176	; 0x880
 80022f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022f8:	605a      	str	r2, [r3, #4]
		Feedback.Status_faults = error;
 80022fa:	f240 73b8 	movw	r3, #1976	; 0x7b8
 80022fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f640 0380 	movw	r3, #2176	; 0x880
 8002308:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800230c:	609a      	str	r2, [r3, #8]
		Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 800230e:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8002312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	f640 0380 	movw	r3, #2176	; 0x880
 800231c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002320:	60da      	str	r2, [r3, #12]
		Feedback.Status_mode = Status;
 8002322:	f640 2304 	movw	r3, #2564	; 0xa04
 8002326:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f640 0380 	movw	r3, #2176	; 0x880
 8002332:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002336:	601a      	str	r2, [r3, #0]

		Feedback.Current_Q = q_lpf;
 8002338:	f640 0380 	movw	r3, #2176	; 0x880
 800233c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	621a      	str	r2, [r3, #32]
		Feedback.Current_D = d_lpf;
 8002344:	f640 0380 	movw	r3, #2176	; 0x880
 8002348:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

		Feedback.Voltage_AUX = ((float)IRQ_Voltage_Temp_BUFF.V_aux)/1000;
 8002350:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8002354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002362:	2300      	movs	r3, #0
 8002364:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002368:	ee06 3a90 	vmov	s13, r3
 800236c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002370:	f640 0380 	movw	r3, #2176	; 0x880
 8002374:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002378:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		Feedback.Voltage_BAT = ((float)IRQ_Voltage_Temp_BUFF.V_Bat)/1000;
 800237c:	f640 13d4 	movw	r3, #2516	; 0x9d4
 8002380:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800238e:	2300      	movs	r3, #0
 8002390:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002394:	ee06 3a90 	vmov	s13, r3
 8002398:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239c:	f640 0380 	movw	r3, #2176	; 0x880
 80023a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023a4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10/10;
 80023a8:	f640 13e0 	movw	r3, #2528	; 0x9e0
 80023ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023b0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80023b4:	f246 6367 	movw	r3, #26215	; 0x6667
 80023b8:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80023bc:	fb83 1302 	smull	r1, r3, r3, r2
 80023c0:	1099      	asrs	r1, r3, #2
 80023c2:	17d3      	asrs	r3, r2, #31
 80023c4:	1acb      	subs	r3, r1, r3
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	f640 0380 	movw	r3, #2176	; 0x880
 80023cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
		Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10/10;
 80023d2:	f640 13e0 	movw	r3, #2528	; 0x9e0
 80023d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023da:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80023de:	f246 6367 	movw	r3, #26215	; 0x6667
 80023e2:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80023e6:	fb83 1302 	smull	r1, r3, r3, r2
 80023ea:	1099      	asrs	r1, r3, #2
 80023ec:	17d3      	asrs	r3, r2, #31
 80023ee:	1acb      	subs	r3, r1, r3
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	f640 0380 	movw	r3, #2176	; 0x880
 80023f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a

		Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos/1000.0f;
 80023fc:	f640 13e0 	movw	r3, #2528	; 0x9e0
 8002400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240e:	2300      	movs	r3, #0
 8002410:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002414:	ee06 3a90 	vmov	s13, r3
 8002418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241c:	f640 0380 	movw	r3, #2176	; 0x880
 8002420:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002424:	edc3 7a04 	vstr	s15, [r3, #16]
		Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos/1000.0f;
 8002428:	f640 13e0 	movw	r3, #2528	; 0x9e0
 800242c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800243a:	2300      	movs	r3, #0
 800243c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002440:	ee06 3a90 	vmov	s13, r3
 8002444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002448:	f640 0380 	movw	r3, #2176	; 0x880
 800244c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002450:	edc3 7a05 	vstr	s15, [r3, #20]
		Feedback.Position_Calculated_pos = Angle_PID.Input;
 8002454:	f640 1380 	movw	r3, #2432	; 0x980
 8002458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f640 0380 	movw	r3, #2176	; 0x880
 8002462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002466:	619a      	str	r2, [r3, #24]
		Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity/1000.0f;
 8002468:	f640 13e0 	movw	r3, #2528	; 0x9e0
 800246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247a:	2300      	movs	r3, #0
 800247c:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002480:	ee06 3a90 	vmov	s13, r3
 8002484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002488:	f640 0380 	movw	r3, #2176	; 0x880
 800248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002490:	edc3 7a07 	vstr	s15, [r3, #28]
		FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8002494:	f640 0280 	movw	r2, #2176	; 0x880
 8002498:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800249c:	f240 4136 	movw	r1, #1078	; 0x436
 80024a0:	f641 0030 	movw	r0, #6192	; 0x1830
 80024a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024a8:	f002 fb9d 	bl	8004be6 <FDCAN_sendData>
	}
	#endif

	//-----------------update dac---------------------------
	#ifdef DAC_DEBUG
	dac_value(q/10 +1500);
 80024ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80024b0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80024b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024bc:	f2c4 43bb 	movt	r3, #17595	; 0x44bb
 80024c0:	ee07 3a10 	vmov	s14, r3
 80024c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	ee17 3a90 	vmov	r3, s15
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 fe67 	bl	80041a6 <dac_value>
	#endif
}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}

080024e0 <mech_to_el_deg>:

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80024f4:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80024f8:	ee07 3a90 	vmov	s15, r3
 80024fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002500:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8002504:	e00b      	b.n	800251e <mech_to_el_deg+0x3e>
 8002506:	edd7 7a03 	vldr	s15, [r7, #12]
 800250a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800250e:	f6c4 03af 	movt	r3, #18607	; 0x48af
 8002512:	ee07 3a10 	vmov	s14, r3
 8002516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800251a:	edc7 7a03 	vstr	s15, [r7, #12]
 800251e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002522:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002526:	f6c4 03af 	movt	r3, #18607	; 0x48af
 800252a:	ee07 3a10 	vmov	s14, r3
 800252e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	dce6      	bgt.n	8002506 <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 8002538:	e00b      	b.n	8002552 <mech_to_el_deg+0x72>
 800253a:	edd7 7a03 	vldr	s15, [r7, #12]
 800253e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002542:	f2c4 63a5 	movt	r3, #18085	; 0x46a5
 8002546:	ee07 3a10 	vmov	s14, r3
 800254a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800254e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002552:	edd7 7a03 	vldr	s15, [r7, #12]
 8002556:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800255a:	f2c4 63a5 	movt	r3, #18085	; 0x46a5
 800255e:	ee07 3a10 	vmov	s14, r3
 8002562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	dce6      	bgt.n	800253a <mech_to_el_deg+0x5a>
	temp = temp*17/1000;
 800256c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002570:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002578:	2300      	movs	r3, #0
 800257a:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800257e:	ee06 3a90 	vmov	s13, r3
 8002582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002586:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 800258a:	e00a      	b.n	80025a2 <mech_to_el_deg+0xc2>
 800258c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002590:	2300      	movs	r3, #0
 8002592:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8002596:	ee07 3a10 	vmov	s14, r3
 800259a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800259e:	edc7 7a03 	vstr	s15, [r7, #12]
 80025a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 80025ac:	ee07 3a10 	vmov	s14, r3
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	dce8      	bgt.n	800258c <mech_to_el_deg+0xac>
	if(temp < 0) return 0;
 80025ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80025be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d501      	bpl.n	80025cc <mech_to_el_deg+0xec>
 80025c8:	2300      	movs	r3, #0
 80025ca:	e015      	b.n	80025f8 <mech_to_el_deg+0x118>
	else if(temp > 360) return 360;
 80025cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025d0:	2300      	movs	r3, #0
 80025d2:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 80025d6:	ee07 3a10 	vmov	s14, r3
 80025da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e2:	dd02      	ble.n	80025ea <mech_to_el_deg+0x10a>
 80025e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80025e8:	e006      	b.n	80025f8 <mech_to_el_deg+0x118>
	else return (int16_t)temp;
 80025ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f2:	ee17 3a90 	vmov	r3, s15
 80025f6:	b21b      	sxth	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 800260c:	f640 2314 	movw	r3, #2580	; 0xa14
 8002610:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002618:	2100      	movs	r1, #0
 800261a:	f641 3018 	movw	r0, #6936	; 0x1b18
 800261e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002622:	f007 fa2b 	bl	8009a7c <HAL_TIM_PWM_Start>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <CTRL_init_PWM+0x2c>
 800262c:	f002 ffec 	bl	8005608 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002630:	2100      	movs	r1, #0
 8002632:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002636:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800263a:	f007 fe8f 	bl	800a35c <HAL_TIMEx_PWMN_Start>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <CTRL_init_PWM+0x44>
 8002644:	f002 ffe0 	bl	8005608 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8002648:	2104      	movs	r1, #4
 800264a:	f641 3018 	movw	r0, #6936	; 0x1b18
 800264e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002652:	f007 fa13 	bl	8009a7c <HAL_TIM_PWM_Start>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <CTRL_init_PWM+0x5c>
 800265c:	f002 ffd4 	bl	8005608 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8002660:	2104      	movs	r1, #4
 8002662:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002666:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800266a:	f007 fe77 	bl	800a35c <HAL_TIMEx_PWMN_Start>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <CTRL_init_PWM+0x74>
 8002674:	f002 ffc8 	bl	8005608 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002678:	2108      	movs	r1, #8
 800267a:	f641 3018 	movw	r0, #6936	; 0x1b18
 800267e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002682:	f007 f9fb 	bl	8009a7c <HAL_TIM_PWM_Start>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <CTRL_init_PWM+0x8c>
 800268c:	f002 ffbc 	bl	8005608 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8002690:	2108      	movs	r1, #8
 8002692:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002696:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800269a:	f007 fe5f 	bl	800a35c <HAL_TIMEx_PWMN_Start>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <CTRL_init_PWM+0xa4>
 80026a4:	f002 ffb0 	bl	8005608 <Error_Handler>

	TIM1->CCR1 = 0;
 80026a8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80026ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026b0:	2200      	movs	r2, #0
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80026b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80026b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026bc:	2200      	movs	r2, #0
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80026c0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80026c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80026c8:	2200      	movs	r2, #0
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 80026cc:	f641 3064 	movw	r0, #7012	; 0x1b64
 80026d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80026d4:	f007 f8f8 	bl	80098c8 <HAL_TIM_Base_Start_IT>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 80026e0:	b480      	push	{r7}
 80026e2:	b08b      	sub	sp, #44	; 0x2c
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
 80026ea:	460b      	mov	r3, r1
 80026ec:	80bb      	strh	r3, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 80026f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f6:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80026fa:	f246 02b7 	movw	r2, #24759	; 0x60b7
 80026fe:	f2cb 620b 	movt	r2, #46603	; 0xb60b
 8002702:	fb82 1203 	smull	r1, r2, r2, r3
 8002706:	441a      	add	r2, r3
 8002708:	1211      	asrs	r1, r2, #8
 800270a:	17da      	asrs	r2, r3, #31
 800270c:	1a8a      	subs	r2, r1, r2
 800270e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002712:	fb01 f202 	mul.w	r2, r1, r2
 8002716:	1a9a      	subs	r2, r3, r2
 8002718:	4613      	mov	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]

//	if(V_bat == NULL){
//		shutoff();
//		return;
//	}
	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 800271c:	88bb      	ldrh	r3, [r7, #4]
 800271e:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 8002720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002722:	f240 52db 	movw	r2, #1499	; 0x5db
 8002726:	4293      	cmp	r3, r2
 8002728:	d902      	bls.n	8002730 <inverter+0x50>
 800272a:	f240 53db 	movw	r3, #1499	; 0x5db
 800272e:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 800273c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002740:	f648 0389 	movw	r3, #34953	; 0x8889
 8002744:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8002748:	fb83 1302 	smull	r1, r3, r3, r2
 800274c:	4413      	add	r3, r2
 800274e:	1159      	asrs	r1, r3, #5
 8002750:	17d3      	asrs	r3, r2, #31
 8002752:	1ac9      	subs	r1, r1, r3
 8002754:	460b      	mov	r3, r1
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a5b      	subs	r3, r3, r1
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b21b      	sxth	r3, r3
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	edc7 7a05 	vstr	s15, [r7, #20]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 800276c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002776:	2300      	movs	r3, #0
 8002778:	f2c4 2370 	movt	r3, #17008	; 0x4270
 800277c:	ee06 3a90 	vmov	s13, r3
 8002780:	edd7 7a05 	vldr	s15, [r7, #20]
 8002784:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002788:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800278c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002790:	2300      	movs	r3, #0
 8002792:	f2c4 2370 	movt	r3, #17008	; 0x4270
 8002796:	ee06 3a10 	vmov	s12, r3
 800279a:	edd7 7a05 	vldr	s15, [r7, #20]
 800279e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027a2:	2300      	movs	r3, #0
 80027a4:	f2c4 3334 	movt	r3, #17204	; 0x4334
 80027a8:	ee06 3a10 	vmov	s12, r3
 80027ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027b0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80027b4:	2300      	movs	r3, #0
 80027b6:	f2c4 2370 	movt	r3, #17008	; 0x4270
 80027ba:	ee06 3a90 	vmov	s13, r3
 80027be:	edd7 7a05 	vldr	s15, [r7, #20]
 80027c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027c6:	2300      	movs	r3, #0
 80027c8:	f2c4 2370 	movt	r3, #17008	; 0x4270
 80027cc:	ee05 3a90 	vmov	s11, r3
 80027d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80027d8:	2300      	movs	r3, #0
 80027da:	f2c4 3334 	movt	r3, #17204	; 0x4334
 80027de:	ee05 3a90 	vmov	s11, r3
 80027e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ea:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80027ee:	f2c4 731e 	movt	r3, #18206	; 0x471e
 80027f2:	ee06 3a90 	vmov	s13, r3
 80027f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002806:	ee17 3a90 	vmov	r3, s15
 800280a:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 800280c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	edd7 7a05 	vldr	s15, [r7, #20]
 800281a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800281e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002822:	2300      	movs	r3, #0
 8002824:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002828:	ee06 3a10 	vmov	s12, r3
 800282c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002830:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002834:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002838:	2300      	movs	r3, #0
 800283a:	f2c4 3334 	movt	r3, #17204	; 0x4334
 800283e:	ee06 3a90 	vmov	s13, r3
 8002842:	edd7 7a05 	vldr	s15, [r7, #20]
 8002846:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800284a:	edd7 7a05 	vldr	s15, [r7, #20]
 800284e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002852:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8002856:	f2c4 731e 	movt	r3, #18206	; 0x471e
 800285a:	ee06 3a90 	vmov	s13, r3
 800285e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002862:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286e:	ee17 3a90 	vmov	r3, s15
 8002872:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8002874:	8a7b      	ldrh	r3, [r7, #18]
 8002876:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800287a:	3303      	adds	r3, #3
 800287c:	8a3a      	ldrh	r2, [r7, #16]
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	0fda      	lsrs	r2, r3, #31
 8002882:	4413      	add	r3, r2
 8002884:	105b      	asrs	r3, r3, #1
 8002886:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 8002888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db10      	blt.n	80028b2 <inverter+0x1d2>
 8002890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002894:	2b3b      	cmp	r3, #59	; 0x3b
 8002896:	dc0c      	bgt.n	80028b2 <inverter+0x1d2>
		compare_M1 = T0;
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 800289c:	89fa      	ldrh	r2, [r7, #14]
 800289e:	8a3b      	ldrh	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80028a4:	89fa      	ldrh	r2, [r7, #14]
 80028a6:	8a7b      	ldrh	r3, [r7, #18]
 80028a8:	441a      	add	r2, r3
 80028aa:	8a3b      	ldrh	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e06a      	b.n	8002988 <inverter+0x2a8>
		}
	else if(angle >= 60 && angle < 120){
 80028b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b6:	2b3b      	cmp	r3, #59	; 0x3b
 80028b8:	dd10      	ble.n	80028dc <inverter+0x1fc>
 80028ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028be:	2b77      	cmp	r3, #119	; 0x77
 80028c0:	dc0c      	bgt.n	80028dc <inverter+0x1fc>
		compare_M1 = T0;
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 80028c6:	89fa      	ldrh	r2, [r7, #14]
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	441a      	add	r2, r3
 80028cc:	8a3b      	ldrh	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 80028d2:	89fa      	ldrh	r2, [r7, #14]
 80028d4:	8a7b      	ldrh	r3, [r7, #18]
 80028d6:	4413      	add	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e055      	b.n	8002988 <inverter+0x2a8>
		}
	else if(angle >= 120 && angle < 180){
 80028dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e0:	2b77      	cmp	r3, #119	; 0x77
 80028e2:	dd10      	ble.n	8002906 <inverter+0x226>
 80028e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e8:	2bb3      	cmp	r3, #179	; 0xb3
 80028ea:	dc0c      	bgt.n	8002906 <inverter+0x226>
		compare_M1 = T0+T2;
 80028ec:	89fa      	ldrh	r2, [r7, #14]
 80028ee:	8a3b      	ldrh	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 80028f4:	89fa      	ldrh	r2, [r7, #14]
 80028f6:	8a7b      	ldrh	r3, [r7, #18]
 80028f8:	441a      	add	r2, r3
 80028fa:	8a3b      	ldrh	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002900:	89fb      	ldrh	r3, [r7, #14]
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	e040      	b.n	8002988 <inverter+0x2a8>
		}
	else if(angle >= 180 && angle < 240){
 8002906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290a:	2bb3      	cmp	r3, #179	; 0xb3
 800290c:	dd10      	ble.n	8002930 <inverter+0x250>
 800290e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002912:	2bef      	cmp	r3, #239	; 0xef
 8002914:	dc0c      	bgt.n	8002930 <inverter+0x250>
		compare_M1 = T0+T1+T2;
 8002916:	89fa      	ldrh	r2, [r7, #14]
 8002918:	8a7b      	ldrh	r3, [r7, #18]
 800291a:	441a      	add	r2, r3
 800291c:	8a3b      	ldrh	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 8002922:	89fa      	ldrh	r2, [r7, #14]
 8002924:	8a7b      	ldrh	r3, [r7, #18]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e02b      	b.n	8002988 <inverter+0x2a8>
		}
	else if(angle >= 240 && angle < 300){
 8002930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002934:	2bef      	cmp	r3, #239	; 0xef
 8002936:	dd11      	ble.n	800295c <inverter+0x27c>
 8002938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002940:	da0c      	bge.n	800295c <inverter+0x27c>
		compare_M1 = T0+T1+T2;
 8002942:	89fa      	ldrh	r2, [r7, #14]
 8002944:	8a7b      	ldrh	r3, [r7, #18]
 8002946:	441a      	add	r2, r3
 8002948:	8a3b      	ldrh	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 8002952:	89fa      	ldrh	r2, [r7, #14]
 8002954:	8a3b      	ldrh	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e015      	b.n	8002988 <inverter+0x2a8>
		}
	else if(angle >= 300 && angle <= 360){
 800295c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002960:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002964:	db10      	blt.n	8002988 <inverter+0x2a8>
 8002966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800296e:	dc0b      	bgt.n	8002988 <inverter+0x2a8>
		compare_M1 = T0+T1;
 8002970:	89fa      	ldrh	r2, [r7, #14]
 8002972:	8a7b      	ldrh	r3, [r7, #18]
 8002974:	4413      	add	r3, r2
 8002976:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	8a7b      	ldrh	r3, [r7, #18]
 8002980:	441a      	add	r2, r3
 8002982:	8a3b      	ldrh	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8002988:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800298c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
	if(direction){
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <inverter+0x2d4>
		TIM1->CCR2 = compare_M3;
 800299a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800299e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 80029a6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 80029b2:	e00b      	b.n	80029cc <inverter+0x2ec>
		TIM1->CCR2 = compare_M2;
 80029b4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 80029c0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80029cc:	bf00      	nop
 80029ce:	372c      	adds	r7, #44	; 0x2c
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <shutoff>:
void shutoff(void){
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80029dc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80029e8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029f0:	2200      	movs	r2, #0
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80029f4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80029f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80029fc:	2200      	movs	r2, #0
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <shutdown>:
void shutdown(void){
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a14:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a18:	f007 f8e6 	bl	8009be8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a22:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a26:	f007 fd03 	bl	800a430 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8002a2a:	2104      	movs	r1, #4
 8002a2c:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a30:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a34:	f007 f8d8 	bl	8009be8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8002a38:	2104      	movs	r1, #4
 8002a3a:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a42:	f007 fcf5 	bl	800a430 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8002a46:	2108      	movs	r1, #8
 8002a48:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a50:	f007 f8ca 	bl	8009be8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8002a54:	2108      	movs	r1, #8
 8002a56:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a5e:	f007 fce7 	bl	800a430 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8002a62:	f641 3018 	movw	r0, #6936	; 0x1b18
 8002a66:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002a6a:	f006 ff19 	bl	80098a0 <HAL_TIM_Base_Stop>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <order_phases>:
		},
		.last_x = {0},
		.last_y = {0}
};

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002a72:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a76:	b090      	sub	sp, #64	; 0x40
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 8002a7e:	f64e 70b4 	movw	r0, #61364	; 0xefb4
 8002a82:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002a86:	f001 fb61 	bl	800414c <PrintServerPrintf>
    float theta_ref = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 8002a96:	f640 6358 	movw	r3, #3672	; 0xe58
 8002a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002aa2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aaa:	ee17 3a90 	vmov	r3, s15
 8002aae:	b218      	sxth	r0, r3
 8002ab0:	f640 6358 	movw	r3, #3672	; 0xe58
 8002ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ac0:	f7ff fe0e 	bl	80026e0 <inverter>
    HAL_Delay(1000);
 8002ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac8:	f003 fa82 	bl	8005fd0 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002acc:	f240 03ac 	movw	r3, #172	; 0xac
 8002ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002ae6:	ee06 3a90 	vmov	s13, r3
 8002aea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afa:	2300      	movs	r3, #0
 8002afc:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002b00:	ee06 3a10 	vmov	s12, r3
 8002b04:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	2300      	movs	r3, #0
 8002b16:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002b1a:	ee05 3a90 	vmov	s11, r3
 8002b1e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002b34:	ee05 3a10 	vmov	s10, r3
 8002b38:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002b3c:	f107 020c 	add.w	r2, r7, #12
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	eef0 1a65 	vmov.f32	s3, s11
 8002b4c:	eeb0 1a46 	vmov.f32	s2, s12
 8002b50:	eef0 0a66 	vmov.f32	s1, s13
 8002b54:	eeb0 0a47 	vmov.f32	s0, s14
 8002b58:	f001 ff39 	bl	80049ce <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 8002b5c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b68:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b78:	ee17 0a90 	vmov	r0, s15
 8002b7c:	f7fd fd0c 	bl	8000598 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	ec43 2b10 	vmov	d0, r2, r3
 8002b88:	f00b fa5a 	bl	800e040 <sqrt>
 8002b8c:	ec53 2b10 	vmov	r2, r3, d0
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f850 	bl	8000c38 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 8002b9c:	f64e 70d4 	movw	r0, #61396	; 0xefd4
 8002ba0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ba4:	f001 fad2 	bl	800414c <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fcf4 	bl	8000598 <__aeabi_f2d>
 8002bb0:	4680      	mov	r8, r0
 8002bb2:	4689      	mov	r9, r1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fcee 	bl	8000598 <__aeabi_f2d>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	460d      	mov	r5, r1
 8002bc0:	69b8      	ldr	r0, [r7, #24]
 8002bc2:	f7fd fce9 	bl	8000598 <__aeabi_f2d>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bce:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	f64e 70e0 	movw	r0, #61408	; 0xefe0
 8002bda:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bde:	f001 fab5 	bl	800414c <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002be2:	e04f      	b.n	8002c84 <order_phases+0x212>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002be4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bec:	ee17 3a90 	vmov	r3, s15
 8002bf0:	b218      	sxth	r0, r3
 8002bf2:	f640 6358 	movw	r3, #3672	; 0xe58
 8002bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c02:	f7ff fd6d 	bl	80026e0 <inverter>
    	HAL_Delay(1);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f003 f9e2 	bl	8005fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002c1e:	ee06 3a90 	vmov	s13, r3
 8002c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c26:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 8002c2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	d101      	bne.n	8002c3c <order_phases+0x1ca>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	dd15      	ble.n	8002c6e <order_phases+0x1fc>
           sample_counter = 0 ;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 8002c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	460d      	mov	r5, r1
 8002c50:	69f8      	ldr	r0, [r7, #28]
 8002c52:	f7fd fca1 	bl	8000598 <__aeabi_f2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c5e:	4622      	mov	r2, r4
 8002c60:	462b      	mov	r3, r5
 8002c62:	f64e 70f0 	movw	r0, #61424	; 0xeff0
 8002c66:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c6a:	f001 fa6f 	bl	800414c <PrintServerPrintf>
        }
        sample_counter++;
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	3301      	adds	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8002c74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002c84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f2c4 4334 	movt	r3, #17460	; 0x4434
 8002c8e:	ee07 3a10 	vmov	s14, r3
 8002c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d4a3      	bmi.n	8002be4 <order_phases+0x172>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8002cae:	ee06 3a90 	vmov	s13, r3
 8002cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb6:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 8002cba:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	bfcc      	ite	gt
 8002cd0:	2301      	movgt	r3, #1
 8002cd2:	2300      	movle	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 8002cd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f2c4 3334 	movt	r3, #17204	; 0x4334
 8002cea:	ee07 3a10 	vmov	s14, r3
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd01      	ble.n	8002cfc <order_phases+0x28a>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 8002cfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f2cc 3334 	movt	r3, #49972	; 0xc334
 8002d0e:	ee07 3a10 	vmov	s14, r3
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d501      	bpl.n	8002d20 <order_phases+0x2ae>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8002d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d22:	f7fd fc39 	bl	8000598 <__aeabi_f2d>
 8002d26:	4604      	mov	r4, r0
 8002d28:	460d      	mov	r5, r1
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7fd fc34 	bl	8000598 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	e9cd 2300 	strd	r2, r3, [sp]
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	f64e 70fc 	movw	r0, #61436	; 0xeffc
 8002d40:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d44:	f001 fa02 	bl	800414c <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 8002d48:	6a39      	ldr	r1, [r7, #32]
 8002d4a:	f24f 0024 	movw	r0, #61476	; 0xf024
 8002d4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d52:	f001 f9fb 	bl	800414c <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <order_phases+0x2f8>
 8002d5c:	f24f 0038 	movw	r0, #61496	; 0xf038
 8002d60:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d64:	f001 f9f2 	bl	800414c <PrintServerPrintf>
 8002d68:	e008      	b.n	8002d7c <order_phases+0x30a>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <order_phases+0x30a>
 8002d70:	f24f 004c 	movw	r0, #61516	; 0xf04c
 8002d74:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d78:	f001 f9e8 	bl	800414c <PrintServerPrintf>
    PHASE_ORDER = !direction;
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f640 6358 	movw	r3, #3672	; 0xe58
 8002d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d92:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 8002d94:	200a      	movs	r0, #10
 8002d96:	f003 f91b 	bl	8005fd0 <HAL_Delay>
    }
 8002d9a:	bf00      	nop
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002da4 <calibrate>:
        arr[i] = (prev + arr[i] + arr[i + 1]) / 3;
        prev = current;
    }
}

void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	b0c9      	sub	sp, #292	; 0x124
 8002daa:	af04      	add	r7, sp, #16
 8002dac:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002db0:	466b      	mov	r3, sp
 8002db2:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002db4:	f24f 007c 	movw	r0, #61564	; 0xf07c
 8002db8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002dbc:	f001 f9c6 	bl	800414c <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 8002dc0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002dc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8002dc8:	2328      	movs	r3, #40	; 0x28
 8002dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 8002dce:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002de6:	f2c4 53bf 	movt	r3, #17855	; 0x45bf
 8002dea:	ee06 3a90 	vmov	s13, r3
 8002dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
   const int  n_lut =  SIZE*NPP;
 8002df6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   const int window = WINDOW_SIZE;
 8002dfe:	2310      	movs	r3, #16
 8002e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   float cogging_current[WINDOW_SIZE] = {0};
 8002e04:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e08:	2340      	movs	r3, #64	; 0x40
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	f008 ffef 	bl	800bdf0 <memset>


   float theta_ref = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   float theta_ref_last = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   int8_t theta_ref_count = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

   float theta_actual = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   float theta_actual_last = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   int8_t theta_actual_count = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

   float d;
   float q;


    float error_f[n];
 8002e36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e44:	2200      	movs	r2, #0
 8002e46:	461c      	mov	r4, r3
 8002e48:	4615      	mov	r5, r2
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	016b      	lsls	r3, r5, #5
 8002e54:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002e58:	0162      	lsls	r2, r4, #5
 8002e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4698      	mov	r8, r3
 8002e62:	4691      	mov	r9, r2
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002e70:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002e74:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3307      	adds	r3, #7
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	ebad 0d03 	sub.w	sp, sp, r3
 8002e88:	ab04      	add	r3, sp, #16
 8002e8a:	3303      	adds	r3, #3
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    float error_b[n];
 8002e94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	469a      	mov	sl, r3
 8002ea6:	4693      	mov	fp, r2
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002eb4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002eb8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002ebc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec4:	647a      	str	r2, [r7, #68]	; 0x44
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	014b      	lsls	r3, r1, #5
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002edc:	4621      	mov	r1, r4
 8002ede:	014a      	lsls	r2, r1, #5
 8002ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3307      	adds	r3, #7
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	ebad 0d03 	sub.w	sp, sp, r3
 8002ef0:	ab04      	add	r3, sp, #16
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int lut[n];
 8002efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f00:	3b01      	subs	r3, #1
 8002f02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	014b      	lsls	r3, r1, #5
 8002f20:	4621      	mov	r1, r4
 8002f22:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002f26:	4621      	mov	r1, r4
 8002f28:	014a      	lsls	r2, r1, #5
 8002f2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f2e:	2200      	movs	r2, #0
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	637a      	str	r2, [r7, #52]	; 0x34
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f40:	4629      	mov	r1, r5
 8002f42:	014b      	lsls	r3, r1, #5
 8002f44:	4621      	mov	r1, r4
 8002f46:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	014a      	lsls	r2, r1, #5
 8002f4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	3307      	adds	r3, #7
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	ebad 0d03 	sub.w	sp, sp, r3
 8002f5e:	ab04      	add	r3, sp, #16
 8002f60:	3303      	adds	r3, #3
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int raw_f[n];
 8002f6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f78:	2200      	movs	r2, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	014b      	lsls	r3, r1, #5
 8002f8e:	4621      	mov	r1, r4
 8002f90:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002f94:	4621      	mov	r1, r4
 8002f96:	014a      	lsls	r2, r1, #5
 8002f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	014b      	lsls	r3, r1, #5
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002fb8:	4621      	mov	r1, r4
 8002fba:	014a      	lsls	r2, r1, #5
 8002fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3307      	adds	r3, #7
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8002fcc:	ab04      	add	r3, sp, #16
 8002fce:	3303      	adds	r3, #3
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int raw_b[n];
 8002fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	014b      	lsls	r3, r1, #5
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8003002:	4621      	mov	r1, r4
 8003004:	014a      	lsls	r2, r1, #5
 8003006:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800300a:	2200      	movs	r2, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	617a      	str	r2, [r7, #20]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800301c:	4629      	mov	r1, r5
 800301e:	014b      	lsls	r3, r1, #5
 8003020:	4621      	mov	r1, r4
 8003022:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8003026:	4621      	mov	r1, r4
 8003028:	014a      	lsls	r2, r1, #5
 800302a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	3307      	adds	r3, #7
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	ebad 0d03 	sub.w	sp, sp, r3
 800303a:	ab04      	add	r3, sp, #16
 800303c:	3303      	adds	r3, #3
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float error[n];
 8003046:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304a:	3b01      	subs	r3, #1
 800304c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003054:	2200      	movs	r2, #0
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	60fa      	str	r2, [r7, #12]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003066:	4629      	mov	r1, r5
 8003068:	014b      	lsls	r3, r1, #5
 800306a:	4621      	mov	r1, r4
 800306c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8003070:	4621      	mov	r1, r4
 8003072:	014a      	lsls	r2, r1, #5
 8003074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003078:	2200      	movs	r2, #0
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308a:	4629      	mov	r1, r5
 800308c:	014b      	lsls	r3, r1, #5
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8003094:	4621      	mov	r1, r4
 8003096:	014a      	lsls	r2, r1, #5
 8003098:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3307      	adds	r3, #7
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	ebad 0d03 	sub.w	sp, sp, r3
 80030a8:	ab04      	add	r3, sp, #16
 80030aa:	3303      	adds	r3, #3
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80030b4:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80030b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030bc:	ee17 3a90 	vmov	r3, s15
 80030c0:	b218      	sxth	r0, r3
 80030c2:	f640 6358 	movw	r3, #3672	; 0xe58
 80030c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80030d2:	f7ff fb05 	bl	80026e0 <inverter>
    HAL_Delay(1000);
 80030d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030da:	f002 ff79 	bl	8005fd0 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 80030de:	f240 03ac 	movw	r3, #172	; 0xac
 80030e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	2300      	movs	r3, #0
 80030f4:	f2c4 3334 	movt	r3, #17204	; 0x4334
 80030f8:	ee06 3a90 	vmov	s13, r3
 80030fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310c:	2300      	movs	r3, #0
 800310e:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8003112:	ee06 3a10 	vmov	s12, r3
 8003116:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800311a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003126:	2300      	movs	r3, #0
 8003128:	f2c4 437a 	movt	r3, #17530	; 0x447a
 800312c:	ee05 3a90 	vmov	s11, r3
 8003130:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8003134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003140:	2300      	movs	r3, #0
 8003142:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8003146:	ee05 3a10 	vmov	s10, r3
 800314a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 800314e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003152:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	eef0 1a65 	vmov.f32	s3, s11
 800315e:	eeb0 1a46 	vmov.f32	s2, s12
 8003162:	eef0 0a66 	vmov.f32	s1, s13
 8003166:	eeb0 0a47 	vmov.f32	s0, s14
 800316a:	f001 fc30 	bl	80049ce <dq0>
    float current = sqrt((d*d + q*q));
 800316e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003172:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800317e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	ee17 0a90 	vmov	r0, s15
 800318e:	f7fd fa03 	bl	8000598 <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	ec43 2b10 	vmov	d0, r2, r3
 800319a:	f00a ff51 	bl	800e040 <sqrt>
 800319e:	ec53 2b10 	vmov	r2, r3, d0
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fd47 	bl	8000c38 <__aeabi_d2f>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 80031b0:	f24f 00a0 	movw	r0, #61600	; 0xf0a0
 80031b4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80031b8:	f000 ffc8 	bl	800414c <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031c2:	e0e1      	b.n	8003388 <calibrate+0x5e4>
       for(int j = 0; j<n2; j++){
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031ca:	e0d1      	b.n	8003370 <calibrate+0x5cc>
        theta_ref += delta;
 80031cc:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 80031d0:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80031d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d8:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80031dc:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80031e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e4:	ee17 3a90 	vmov	r3, s15
 80031e8:	b218      	sxth	r0, r3
 80031ea:	f640 6358 	movw	r3, #3672	; 0xe58
 80031ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80031fa:	f7ff fa71 	bl	80026e0 <inverter>
        HAL_Delay(1);
 80031fe:	2001      	movs	r0, #1
 8003200:	f002 fee6 	bl	8005fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8003204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003210:	2300      	movs	r3, #0
 8003212:	f2c4 437a 	movt	r3, #17530	; 0x447a
 8003216:	ee06 3a90 	vmov	s13, r3
 800321a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
       if(!i)theta_actual_last=theta_actual;
 8003222:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <calibrate+0x48e>
 800322a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800322e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

       if(theta_actual-theta_actual_last < -90) theta_actual_count--;
 8003232:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003236:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323e:	2300      	movs	r3, #0
 8003240:	f2cc 23b4 	movt	r3, #49844	; 0xc2b4
 8003244:	ee07 3a10 	vmov	s14, r3
 8003248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d506      	bpl.n	8003260 <calibrate+0x4bc>
 8003252:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
       if(theta_actual-theta_actual_last > 90) theta_actual_count++;
 8003260:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003264:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	2300      	movs	r3, #0
 800326e:	f2c4 23b4 	movt	r3, #17076	; 0x42b4
 8003272:	ee07 3a10 	vmov	s14, r3
 8003276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	dd06      	ble.n	800328e <calibrate+0x4ea>
 8003280:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8003284:	b2db      	uxtb	r3, r3
 8003286:	3301      	adds	r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
       theta_actual_last = theta_actual;
 800328e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

       //aa_test_3 = theta_ref/NPP;
       aa_test_4 = theta_actual+theta_actual_count*360;
 8003296:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800329a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032aa:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	f640 6368 	movw	r3, #3688	; 0xe68
 80032b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032ba:	edc3 7a00 	vstr	s15, [r3]
       error_temp = (theta_ref/NPP - theta_actual+theta_actual_count*360);
 80032be:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80032c2:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 80032c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032ca:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80032ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032d2:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80032d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ea:	f640 6360 	movw	r3, #3680	; 0xe60
 80032ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032f2:	edc3 7a00 	vstr	s15, [r3]
       error_f[i] = error_temp;
 80032f6:	f640 6360 	movw	r3, #3680	; 0xe60
 80032fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003304:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	601a      	str	r2, [r3, #0]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 800330e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4619      	mov	r1, r3
 8003314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003318:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8003320:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8003324:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003328:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800332c:	ee16 0a90 	vmov	r0, s13
 8003330:	f7fd f932 	bl	8000598 <__aeabi_f2d>
 8003334:	4604      	mov	r4, r0
 8003336:	460d      	mov	r5, r1
 8003338:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800333c:	f7fd f92c 	bl	8000598 <__aeabi_f2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003348:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800334c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003350:	9102      	str	r1, [sp, #8]
 8003352:	e9cd 2300 	strd	r2, r3, [sp]
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
 800335e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003362:	f000 fef3 	bl	800414c <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8003366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336a:	3301      	adds	r3, #1
 800336c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003370:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8003374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003378:	429a      	cmp	r2, r3
 800337a:	f6ff af27 	blt.w	80031cc <calibrate+0x428>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 800337e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003382:	3301      	adds	r3, #1
 8003384:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003388:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800338c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003390:	429a      	cmp	r2, r3
 8003392:	f6ff af17 	blt.w	80031c4 <calibrate+0x420>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800339c:	e0f9      	b.n	8003592 <calibrate+0x7ee>
       for(int j = 0; j<n2; j++){
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80033a4:	e0e9      	b.n	800357a <calibrate+0x7d6>
       theta_ref -= delta;
 80033a6:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 80033aa:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80033ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b2:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 80033b6:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 80033ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033be:	ee17 3a90 	vmov	r3, s15
 80033c2:	b218      	sxth	r0, r3
 80033c4:	f640 6358 	movw	r3, #3672	; 0xe58
 80033c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80033d4:	f7ff f984 	bl	80026e0 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 80033d8:	2001      	movs	r0, #1
 80033da:	f002 fdf9 	bl	8005fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;
 80033de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ea:	2300      	movs	r3, #0
 80033ec:	f2c4 437a 	movt	r3, #17530	; 0x447a
 80033f0:	ee06 3a90 	vmov	s13, r3
 80033f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f8:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

       if(theta_actual-theta_actual_last < -90) theta_actual_count--;
 80033fc:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8003400:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003408:	2300      	movs	r3, #0
 800340a:	f2cc 23b4 	movt	r3, #49844	; 0xc2b4
 800340e:	ee07 3a10 	vmov	s14, r3
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	d506      	bpl.n	800342a <calibrate+0x686>
 800341c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	   if(theta_actual-theta_actual_last > 90) theta_actual_count++;
 800342a:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800342e:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003436:	2300      	movs	r3, #0
 8003438:	f2c4 23b4 	movt	r3, #17076	; 0x42b4
 800343c:	ee07 3a10 	vmov	s14, r3
 8003440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	dd06      	ble.n	8003458 <calibrate+0x6b4>
 800344a:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	   theta_actual_last = theta_actual;
 8003458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800345c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	   aa_test_4 = theta_actual+theta_actual_count*360;
 8003460:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8003464:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003474:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	f640 6368 	movw	r3, #3688	; 0xe68
 8003480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003484:	edc3 7a00 	vstr	s15, [r3]
	   error_temp = (theta_ref/NPP - theta_actual+theta_actual_count*360);
 8003488:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 800348c:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8003490:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003494:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8003498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800349c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80034a0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	ee07 3a90 	vmov	s15, r3
 80034ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	f640 6360 	movw	r3, #3680	; 0xe60
 80034b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034bc:	edc3 7a00 	vstr	s15, [r3]
       error_b[i] = error_temp;
 80034c0:	f640 6360 	movw	r3, #3680	; 0xe60
 80034c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80034ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	601a      	str	r2, [r3, #0]

       aa_test_3 = 0.5f*(error_b[i] + error_f[n-i-1]);
 80034d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80034ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350c:	f640 6364 	movw	r3, #3684	; 0xe64
 8003510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003514:	edc3 7a00 	vstr	s15, [r3]

       raw_b[i] =  ps->Encoder1_pos_raw;
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4619      	mov	r1, r3
 800351e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003522:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 800352a:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 800352e:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003532:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003536:	ee16 0a90 	vmov	r0, s13
 800353a:	f7fd f82d 	bl	8000598 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8003546:	f7fd f827 	bl	8000598 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003552:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8003556:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800355a:	9102      	str	r1, [sp, #8]
 800355c:	e9cd 2300 	strd	r2, r3, [sp]
 8003560:	4622      	mov	r2, r4
 8003562:	462b      	mov	r3, r5
 8003564:	f24f 00e0 	movw	r0, #61664	; 0xf0e0
 8003568:	f6c0 0000 	movt	r0, #2048	; 0x800
 800356c:	f000 fdee 	bl	800414c <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	3301      	adds	r3, #1
 8003576:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800357a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	429a      	cmp	r2, r3
 8003584:	f6ff af0f 	blt.w	80033a6 <calibrate+0x602>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8003588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800358c:	3301      	adds	r3, #1
 800358e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003592:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800359a:	429a      	cmp	r2, r3
 800359c:	f6ff aeff 	blt.w	800339e <calibrate+0x5fa>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 80035a0:	f640 635c 	movw	r3, #3676	; 0xe5c
 80035a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80035b2:	e032      	b.n	800361a <calibrate+0x876>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 80035b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	ed93 7a00 	vldr	s14, [r3]
 80035c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	ee77 6a27 	vadd.f32	s13, s14, s15
 80035e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f4:	f640 635c 	movw	r3, #3676	; 0xe5c
 80035f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003604:	f640 635c 	movw	r3, #3676	; 0xe5c
 8003608:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800360c:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 8003610:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003614:	3301      	adds	r3, #1
 8003616:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800361a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800361e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003622:	429a      	cmp	r2, r3
 8003624:	dbc6      	blt.n	80035b4 <calibrate+0x810>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8003626:	f640 635c 	movw	r3, #3676	; 0xe5c
 800362a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800363a:	ee17 0a90 	vmov	r0, s15
 800363e:	f7fc ffab 	bl	8000598 <__aeabi_f2d>
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	f2c4 0376 	movt	r3, #16502	; 0x4076
 800364e:	ec43 2b17 	vmov	d7, r2, r3
 8003652:	eeb0 1a47 	vmov.f32	s2, s14
 8003656:	eef0 1a67 	vmov.f32	s3, s15
 800365a:	ec41 0b10 	vmov	d0, r0, r1
 800365e:	f00a fcc1 	bl	800dfe4 <fmod>
 8003662:	ec53 2b10 	vmov	r2, r3, d0
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fae5 	bl	8000c38 <__aeabi_d2f>
 800366e:	4602      	mov	r2, r0
 8003670:	f640 635c 	movw	r3, #3676	; 0xe5c
 8003674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003678:	601a      	str	r2, [r3, #0]

        for (int i = 0; i<n; i++){
 800367a:	2300      	movs	r3, #0
 800367c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003680:	e028      	b.n	80036d4 <calibrate+0x930>
        	error_filt[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 8003682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	ed93 7a00 	vldr	s14, [r3]
 8003692:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b6:	f640 2318 	movw	r3, #2584	; 0xa18
 80036ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){
 80036ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80036ce:	3301      	adds	r3, #1
 80036d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80036d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80036d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036dc:	429a      	cmp	r2, r3
 80036de:	dbd0      	blt.n	8003682 <calibrate+0x8de>
        }

        //smoothArray(error_filt, n);


        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 80036e0:	f640 635c 	movw	r3, #3676	; 0xe5c
 80036e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc ff54 	bl	8000598 <__aeabi_f2d>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	f24f 00f0 	movw	r0, #61680	; 0xf0f0
 80036f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036fc:	f000 fd26 	bl	800414c <PrintServerPrintf>
 8003700:	46b5      	mov	sp, r6
    }
 8003702:	bf00      	nop
 8003704:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800370e <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8003716:	2201      	movs	r2, #1
 8003718:	2140      	movs	r1, #64	; 0x40
 800371a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800371e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003722:	f004 fcc3 	bl	80080ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003726:	2201      	movs	r2, #1
 8003728:	2104      	movs	r1, #4
 800372a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800372e:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003732:	f004 fcbb 	bl	80080ac <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8003736:	f640 638c 	movw	r3, #3724	; 0xe8c
 800373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8003742:	f640 636c 	movw	r3, #3692	; 0xe6c
 8003746:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800374a:	2274      	movs	r2, #116	; 0x74
 800374c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2140      	movs	r1, #64	; 0x40
 8003752:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003756:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800375a:	f004 fca7 	bl	80080ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2104      	movs	r1, #4
 8003762:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003766:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800376a:	f004 fc9f 	bl	80080ac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800376e:	2305      	movs	r3, #5
 8003770:	f640 6274 	movw	r2, #3700	; 0xe74
 8003774:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003778:	f640 616c 	movw	r1, #3692	; 0xe6c
 800377c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003780:	f641 204c 	movw	r0, #6732	; 0x1a4c
 8003784:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003788:	f005 fca6 	bl	80090d8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 800378c:	2305      	movs	r3, #5
 800378e:	f640 6284 	movw	r2, #3716	; 0xe84
 8003792:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003796:	f640 617c 	movw	r1, #3708	; 0xe7c
 800379a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800379e:	f641 20b0 	movw	r0, #6832	; 0x1ab0
 80037a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80037a6:	f005 fc97 	bl	80090d8 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 80037aa:	f641 3064 	movw	r0, #7012	; 0x1b64
 80037ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80037b2:	f006 f889 	bl	80098c8 <HAL_TIM_Base_Start_IT>

}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	f641 234c 	movw	r3, #6732	; 0x1a4c
 80037cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f040 813f 	bne.w	8003a54 <HAL_SPI_TxRxCpltCallback+0x296>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80037d6:	2201      	movs	r2, #1
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80037de:	f6c4 0000 	movt	r0, #18432	; 0x4800
 80037e2:	f004 fc63 	bl	80080ac <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80037e6:	f640 6374 	movw	r3, #3700	; 0xe74
 80037ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f640 6390 	movw	r3, #3728	; 0xe90
 80037f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037fa:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80037fc:	f640 6374 	movw	r3, #3700	; 0xe74
 8003800:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	019b      	lsls	r3, r3, #6
 8003808:	461a      	mov	r2, r3
 800380a:	f640 6374 	movw	r3, #3700	; 0xe74
 800380e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	b2db      	uxtb	r3, r3
 8003818:	4313      	orrs	r3, r2
 800381a:	f241 52f9 	movw	r2, #5625	; 0x15f9
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	0a1a      	lsrs	r2, r3, #8
 8003824:	f640 6390 	movw	r3, #3728	; 0xe90
 8003828:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800382c:	601a      	str	r2, [r3, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 800382e:	f640 6374 	movw	r3, #3700	; 0xe74
 8003832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	461a      	mov	r2, r3
 800383c:	f640 6374 	movw	r3, #3700	; 0xe74
 8003840:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	089b      	lsrs	r3, r3, #2
 8003848:	b2db      	uxtb	r3, r3
 800384a:	431a      	orrs	r2, r3
 800384c:	f640 6390 	movw	r3, #3728	; 0xe90
 8003850:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003854:	609a      	str	r2, [r3, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8003856:	f640 6390 	movw	r3, #3728	; 0xe90
 800385a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f640 63b0 	movw	r3, #3760	; 0xeb0
 8003866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	f64b 7320 	movw	r3, #48928	; 0xbf20
 8003872:	f2c0 0302 	movt	r3, #2
 8003876:	429a      	cmp	r2, r3
 8003878:	dd16      	ble.n	80038a8 <HAL_SPI_TxRxCpltCallback+0xea>
 800387a:	f640 6390 	movw	r3, #3728	; 0xe90
 800387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	f640 63b0 	movw	r3, #3760	; 0xeb0
 800388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8003896:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80038a6:	e03a      	b.n	800391e <HAL_SPI_TxRxCpltCallback+0x160>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 80038a8:	f640 6390 	movw	r3, #3728	; 0xe90
 80038ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f640 63b0 	movw	r3, #3760	; 0xeb0
 80038b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80038c4:	f6cf 73fd 	movt	r3, #65533	; 0xfffd
 80038c8:	429a      	cmp	r2, r3
 80038ca:	da16      	bge.n	80038fa <HAL_SPI_TxRxCpltCallback+0x13c>
 80038cc:	f640 6390 	movw	r3, #3728	; 0xe90
 80038d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f640 63b0 	movw	r3, #3760	; 0xeb0
 80038dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 80038e8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f4:	edc7 7a03 	vstr	s15, [r7, #12]
 80038f8:	e011      	b.n	800391e <HAL_SPI_TxRxCpltCallback+0x160>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 80038fa:	f640 6390 	movw	r3, #3728	; 0xe90
 80038fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	f640 63b0 	movw	r3, #3760	; 0xeb0
 800390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391a:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800391e:	f640 6390 	movw	r3, #3728	; 0xe90
 8003922:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	f640 63b0 	movw	r3, #3760	; 0xeb0
 800392e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003932:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8003934:	f640 63ac 	movw	r3, #3756	; 0xeac
 8003938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800393c:	ed93 7a00 	vldr	s14, [r3]
 8003940:	edd7 7a03 	vldr	s15, [r7, #12]
 8003944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003948:	f640 63ac 	movw	r3, #3756	; 0xeac
 800394c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003950:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 8003954:	f640 63ac 	movw	r3, #3756	; 0xeac
 8003958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	f640 63b4 	movw	r3, #3764	; 0xeb4
 8003964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f640 63b8 	movw	r3, #3768	; 0xeb8
 8003970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4413      	add	r3, r2
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	f640 63ac 	movw	r3, #3756	; 0xeac
 8003984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003988:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 800398c:	f640 63b4 	movw	r3, #3764	; 0xeb4
 8003990:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f640 63b8 	movw	r3, #3768	; 0xeb8
 800399c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]
		velocity_index++;
 80039a8:	f640 63b4 	movw	r3, #3764	; 0xeb4
 80039ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	f640 63b4 	movw	r3, #3764	; 0xeb4
 80039ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039be:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80039c0:	f640 63b4 	movw	r3, #3764	; 0xeb4
 80039c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d105      	bne.n	80039da <HAL_SPI_TxRxCpltCallback+0x21c>
 80039ce:	f640 63b4 	movw	r3, #3764	; 0xeb4
 80039d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80039da:	f640 63ac 	movw	r3, #3756	; 0xeac
 80039de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039ea:	f2c4 631c 	movt	r3, #17948	; 0x461c
 80039ee:	ee07 3a10 	vmov	s14, r3
 80039f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f6:	2300      	movs	r3, #0
 80039f8:	f2c4 2370 	movt	r3, #17008	; 0x4270
 80039fc:	ee07 3a10 	vmov	s14, r3
 8003a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a04:	2300      	movs	r3, #0
 8003a06:	f2c4 33b4 	movt	r3, #17332	; 0x43b4
 8003a0a:	ee06 3a90 	vmov	s13, r3
 8003a0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a1e:	ee17 2a90 	vmov	r2, s15
 8003a22:	f640 6390 	movw	r3, #3728	; 0xe90
 8003a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a2a:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 8003a2c:	f640 6374 	movw	r3, #3700	; 0xe74
 8003a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a34:	789b      	ldrb	r3, [r3, #2]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	b21a      	sxth	r2, r3
 8003a3a:	f640 6374 	movw	r3, #3700	; 0xe74
 8003a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a42:	78db      	ldrb	r3, [r3, #3]
 8003a44:	b21b      	sxth	r3, r3
 8003a46:	4313      	orrs	r3, r2
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	f640 6390 	movw	r3, #3728	; 0xe90
 8003a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a52:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f641 23b0 	movw	r3, #6832	; 0x1ab0
 8003a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d12f      	bne.n	8003ac2 <HAL_SPI_TxRxCpltCallback+0x304>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003a62:	2201      	movs	r2, #1
 8003a64:	2104      	movs	r1, #4
 8003a66:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a6a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003a6e:	f004 fb1d 	bl	80080ac <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8003a72:	f640 6384 	movw	r3, #3716	; 0xe84
 8003a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	b21a      	sxth	r2, r3
 8003a80:	f640 6384 	movw	r3, #3716	; 0xe84
 8003a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	b21a      	sxth	r2, r3
 8003a90:	f640 6390 	movw	r3, #3728	; 0xe90
 8003a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a98:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8003a9a:	f640 6384 	movw	r3, #3716	; 0xe84
 8003a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	019a      	lsls	r2, r3, #6
 8003aa6:	f640 6384 	movw	r3, #3716	; 0xe84
 8003aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f640 6390 	movw	r3, #3728	; 0xe90
 8003abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ac0:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8003ac2:	f640 638c 	movw	r3, #3724	; 0xe8c
 8003ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f640 6090 	movw	r0, #3728	; 0xe90
 8003ad0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ad4:	4798      	blx	r3
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003aee:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003af2:	f004 fadb 	bl	80080ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2104      	movs	r1, #4
 8003afa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003afe:	f6c4 0000 	movt	r0, #18432	; 0x4800
 8003b02:	f004 fad3 	bl	80080ac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003b06:	2305      	movs	r3, #5
 8003b08:	f640 6274 	movw	r2, #3700	; 0xe74
 8003b0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003b10:	f640 616c 	movw	r1, #3692	; 0xe6c
 8003b14:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003b18:	f641 204c 	movw	r0, #6732	; 0x1a4c
 8003b1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003b20:	f005 fada 	bl	80090d8 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003b24:	2305      	movs	r3, #5
 8003b26:	f640 6284 	movw	r2, #3716	; 0xe84
 8003b2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003b2e:	f640 617c 	movw	r1, #3708	; 0xe7c
 8003b32:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003b36:	f641 20b0 	movw	r0, #6832	; 0x1ab0
 8003b3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003b3e:	f005 facb 	bl	80090d8 <HAL_SPI_TransmitReceive_DMA>

	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8003b42:	2201      	movs	r2, #1
 8003b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4c:	f004 faae 	bl	80080ac <HAL_GPIO_WritePin>
	run();
 8003b50:	f7fd ff45 	bl	80019de <run>
	HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5e:	f004 faa5 	bl	80080ac <HAL_GPIO_WritePin>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b08c      	sub	sp, #48	; 0x30
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	2301      	movs	r3, #1
 8003b84:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 8003b86:	f004 f821 	bl	8007bcc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003b8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f867 	bl	8007c68 <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	e014      	b.n	8003bca <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f003 ff4a 	bl	8007a58 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	08da      	lsrs	r2, r3, #3
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8e5      	bhi.n	8003ba0 <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 8003bd4:	f004 f810 	bl	8007bf8 <HAL_FLASH_Lock>
}
 8003bd8:	bf00      	nop
 8003bda:	3730      	adds	r7, #48	; 0x30
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <Flash_init>:

void Flash_init(){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8003be4:	f240 03b0 	movw	r3, #176	; 0xb0
 8003be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	225e      	movs	r2, #94	; 0x5e
 8003bf0:	f240 01b8 	movw	r1, #184	; 0xb8
 8003bf4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f008 f8e9 	bl	800bdd0 <memcmp>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01b      	beq.n	8003c3c <Flash_init+0x5c>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003c04:	f240 03b0 	movw	r3, #176	; 0xb0
 8003c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003c12:	4619      	mov	r1, r3
 8003c14:	f640 60c8 	movw	r0, #3784	; 0xec8
 8003c18:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c1c:	f008 f967 	bl	800beee <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 8003c20:	225e      	movs	r2, #94	; 0x5e
 8003c22:	f240 01b8 	movw	r1, #184	; 0xb8
 8003c26:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003c2a:	f640 60c8 	movw	r0, #3784	; 0xec8
 8003c2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c32:	f008 f95c 	bl	800beee <memcpy>
		Flash_save();
 8003c36:	f000 f811 	bl	8003c5c <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 8003c3a:	e00d      	b.n	8003c58 <Flash_init+0x78>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003c3c:	f240 03b0 	movw	r3, #176	; 0xb0
 8003c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f640 60c8 	movw	r0, #3784	; 0xec8
 8003c50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003c54:	f008 f94b 	bl	800beee <memcpy>
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <Flash_save>:

void Flash_save(){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 8003c60:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8003c64:	f640 61c8 	movw	r1, #3784	; 0xec8
 8003c68:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003c6c:	203f      	movs	r0, #63	; 0x3f
 8003c6e:	f7ff ff7c 	bl	8003b6a <flash_write>
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <Flash_get_values>:

Flash *Flash_get_values(){
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 8003c7a:	f640 63c8 	movw	r3, #3784	; 0xec8
 8003c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a1 	beq.w	8003de2 <Compute+0x156>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	ed93 7a00 	vldr	s14, [r3]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc4:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	edd3 6a06 	vldr	s13, [r3, #24]
 8003cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <Compute+0x82>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d22:	dd04      	ble.n	8003d2e <Compute+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e00e      	b.n	8003d4c <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	d503      	bpl.n	8003d4c <Compute+0xc0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <Compute+0xe0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edc3 7a01 	vstr	s15, [r3, #4]
 8003d6a:	e002      	b.n	8003d72 <Compute+0xe6>
	else val->Output = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	edd3 6a03 	vldr	s13, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ed93 6a07 	vldr	s12, [r3, #28]
 8003d84:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	dd04      	ble.n	8003dba <Compute+0x12e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	e00e      	b.n	8003dd8 <Compute+0x14c>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8003dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	d503      	bpl.n	8003dd8 <Compute+0x14c>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	611a      	str	r2, [r3, #16]
 8003de0:	e000      	b.n	8003de4 <Compute+0x158>
	if(!val->inAuto) return;
 8003de2:	bf00      	nop
}
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b089      	sub	sp, #36	; 0x24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6178      	str	r0, [r7, #20]
 8003df6:	ed87 0a04 	vstr	s0, [r7, #16]
 8003dfa:	edc7 0a03 	vstr	s1, [r7, #12]
 8003dfe:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e02:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	f100 80a3 	bmi.w	8003f5c <SetTunings+0x16e>
 8003e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	f100 809b 	bmi.w	8003f5c <SetTunings+0x16e>
 8003e26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e32:	f100 8093 	bmi.w	8003f5c <SetTunings+0x16e>
 8003e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	f100 808b 	bmi.w	8003f5c <SetTunings+0x16e>
 8003e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e56:	f300 8081 	bgt.w	8003f5c <SetTunings+0x16e>

   val->pOnE = pOn>0; //some p on error is desired;
 8003e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	bfcc      	ite	gt
 8003e68:	2301      	movgt	r3, #1
 8003e6a:	2300      	movle	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8003e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	bf4c      	ite	mi
 8003e88:	2301      	movmi	r3, #1
 8003e8a:	2300      	movpl	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003ea6:	f6c4 1374 	movt	r3, #18804	; 0x4974
 8003eaa:	ee06 3a90 	vmov	s13, r3
 8003eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8003ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ec0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8003ece:	edd7 6a02 	vldr	s13, [r7, #8]
 8003ed2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d120      	bne.n	8003f2a <SetTunings+0x13c>
   {
	  val->kp = (0 - val->kp);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	edd3 7a05 	vldr	s15, [r3, #20]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	ee07 3a10 	vmov	s14, r3
 8003ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f04:	2300      	movs	r3, #0
 8003f06:	ee07 3a10 	vmov	s14, r3
 8003f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	ee07 3a10 	vmov	s14, r3
 8003f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8003f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003f5a:	e000      	b.n	8003f5e <SetTunings+0x170>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003f5c:	bf00      	nop
}
 8003f5e:	3724      	adds	r7, #36	; 0x24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	dd25      	ble.n	8003fc4 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8003f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f92:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	edd3 6a07 	vldr	s13, [r3, #28]
 8003fb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fdc:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8003fe0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	dc44      	bgt.n	800407c <SetOutputLimits+0xac>
   val->outMin = Min;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	ed93 7a01 	vldr	s14, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800400a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	dd04      	ble.n	800401e <SetOutputLimits+0x4e>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	e00e      	b.n	800403c <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	ed93 7a01 	vldr	s14, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	edd3 7a08 	vldr	s15, [r3, #32]
 800402a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	d503      	bpl.n	800403c <SetOutputLimits+0x6c>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	dd04      	ble.n	800405c <SetOutputLimits+0x8c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e010      	b.n	800407e <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	edd3 7a08 	vldr	s15, [r3, #32]
 8004068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	d505      	bpl.n	800407e <SetOutputLimits+0xae>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	e000      	b.n	800407e <SetOutputLimits+0xae>
   if(Min > Max) return;
 800407c:	bf00      	nop
}
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2201      	moveq	r2, #1
 80040ae:	2200      	movne	r2, #0
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d102      	bne.n	80040bc <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f808 	bl	80040cc <Initialize>
    }
    val->inAuto = newAuto;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <Initialize>:

void Initialize(PID_instance *val)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80040f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f8:	dd04      	ble.n	8004104 <Initialize+0x38>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8004102:	e00f      	b.n	8004124 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	ed93 7a03 	vldr	s14, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	d400      	bmi.n	800411c <Initialize+0x50>
}
 800411a:	e003      	b.n	8004124 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 800414c:	b40f      	push	{r0, r1, r2, r3}
 800414e:	b590      	push	{r4, r7, lr}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8004154:	f107 031c 	add.w	r3, r7, #28
 8004158:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004162:	f241 3080 	movw	r0, #4992	; 0x1380
 8004166:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800416a:	f007 fe23 	bl	800bdb4 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 800416e:	f240 5370 	movw	r3, #1392	; 0x570
 8004172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	f241 3080 	movw	r0, #4992	; 0x1380
 800417c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004180:	f7fc f89e 	bl	80002c0 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	f241 3180 	movw	r1, #4992	; 0x1380
 800418e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004192:	4620      	mov	r0, r4
 8004194:	f006 fa44 	bl	800a620 <HAL_UART_Transmit_DMA>
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80041a2:	b004      	add	sp, #16
 80041a4:	4770      	bx	lr

080041a6 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	4613      	mov	r3, r2
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	1a9a      	subs	r2, r3, r2
 80041b8:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80041bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80041c8:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	f641 001c 	movw	r0, #6172	; 0x181c
 80041d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80041d8:	f002 fe1e 	bl	8006e18 <HAL_DAC_SetValue>
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <ADC_CAL>:

void ADC_CAL(){
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 80041e8:	f240 5374 	movw	r3, #1396	; 0x574
 80041ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	f241 5380 	movw	r3, #5504	; 0x1580
 8004204:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	b21a      	sxth	r2, r3
 8004212:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004216:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800421a:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 800421c:	f241 5380 	movw	r3, #5504	; 0x1580
 8004220:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	091a      	lsrs	r2, r3, #4
 8004228:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800422c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b21b      	sxth	r3, r3
 8004234:	fb03 f202 	mul.w	r2, r3, r2
 8004238:	f240 1301 	movw	r3, #257	; 0x101
 800423c:	f2c0 0310 	movt	r3, #16
 8004240:	fba3 1302 	umull	r1, r3, r3, r2
 8004244:	1ad2      	subs	r2, r2, r3
 8004246:	0852      	lsrs	r2, r2, #1
 8004248:	4413      	add	r3, r2
 800424a:	0adb      	lsrs	r3, r3, #11
 800424c:	461a      	mov	r2, r3
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	441a      	add	r2, r3
 8004258:	f248 531f 	movw	r3, #34079	; 0x851f
 800425c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004260:	fb83 1302 	smull	r1, r3, r3, r2
 8004264:	1159      	asrs	r1, r3, #5
 8004266:	17d3      	asrs	r3, r2, #31
 8004268:	1aca      	subs	r2, r1, r3
 800426a:	f241 53f8 	movw	r3, #5624	; 0x15f8
 800426e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	441a      	add	r2, r3
 8004276:	f241 53f8 	movw	r3, #5624	; 0x15f8
 800427a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800427e:	601a      	str	r2, [r3, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8004280:	f241 5380 	movw	r3, #5504	; 0x1580
 8004284:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	091a      	lsrs	r2, r3, #4
 800428c:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004290:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b21b      	sxth	r3, r3
 8004298:	fb03 f202 	mul.w	r2, r3, r2
 800429c:	f240 1301 	movw	r3, #257	; 0x101
 80042a0:	f2c0 0310 	movt	r3, #16
 80042a4:	fba3 1302 	umull	r1, r3, r3, r2
 80042a8:	1ad2      	subs	r2, r2, r3
 80042aa:	0852      	lsrs	r2, r2, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	461a      	mov	r2, r3
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	011a      	lsls	r2, r3, #4
 80042ba:	441a      	add	r2, r3
 80042bc:	f248 531f 	movw	r3, #34079	; 0x851f
 80042c0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80042c4:	fb83 1302 	smull	r1, r3, r3, r2
 80042c8:	1159      	asrs	r1, r3, #5
 80042ca:	17d3      	asrs	r3, r2, #31
 80042cc:	1aca      	subs	r2, r1, r3
 80042ce:	f241 53f8 	movw	r3, #5624	; 0x15f8
 80042d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	441a      	add	r2, r3
 80042da:	f241 53f8 	movw	r3, #5624	; 0x15f8
 80042de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042e2:	605a      	str	r2, [r3, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 80042e4:	f241 5380 	movw	r3, #5504	; 0x1580
 80042e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	091a      	lsrs	r2, r3, #4
 80042f0:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80042f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	fb03 f202 	mul.w	r2, r3, r2
 8004300:	f240 1301 	movw	r3, #257	; 0x101
 8004304:	f2c0 0310 	movt	r3, #16
 8004308:	fba3 1302 	umull	r1, r3, r3, r2
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	4413      	add	r3, r2
 8004312:	0adb      	lsrs	r3, r3, #11
 8004314:	461a      	mov	r2, r3
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	011a      	lsls	r2, r3, #4
 800431e:	441a      	add	r2, r3
 8004320:	f248 531f 	movw	r3, #34079	; 0x851f
 8004324:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004328:	fb83 1302 	smull	r1, r3, r3, r2
 800432c:	1159      	asrs	r1, r3, #5
 800432e:	17d3      	asrs	r3, r2, #31
 8004330:	1aca      	subs	r2, r1, r3
 8004332:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8004336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	441a      	add	r2, r3
 800433e:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8004342:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004346:	609a      	str	r2, [r3, #8]
	calibrating--;
 8004348:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800434c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	f241 53f4 	movw	r3, #5620	; 0x15f4
 800435a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800435e:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8004360:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8004364:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d132      	bne.n	80043d4 <ADC_CAL+0x1f0>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 800436e:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8004372:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800437c:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8004380:	fba3 2302 	umull	r2, r3, r3, r2
 8004384:	099a      	lsrs	r2, r3, #6
 8004386:	f241 53c0 	movw	r3, #5568	; 0x15c0
 800438a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800438e:	601a      	str	r2, [r3, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8004390:	f241 53f8 	movw	r3, #5624	; 0x15f8
 8004394:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800439e:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	099a      	lsrs	r2, r3, #6
 80043a8:	f241 53c0 	movw	r3, #5568	; 0x15c0
 80043ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043b0:	605a      	str	r2, [r3, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 80043b2:	f241 53f8 	movw	r3, #5624	; 0x15f8
 80043b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80043c0:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80043c4:	fba3 2302 	umull	r2, r3, r3, r2
 80043c8:	099a      	lsrs	r2, r3, #6
 80043ca:	f241 53c0 	movw	r3, #5568	; 0x15c0
 80043ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043d2:	609a      	str	r2, [r3, #8]
	}
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <current_init>:

void current_init(Current_Callback __IRQ_callback){
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 80043e6:	f241 53f4 	movw	r3, #5620	; 0x15f4
 80043ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f2:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 80043f4:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80043f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8004400:	2208      	movs	r2, #8
 8004402:	f241 5180 	movw	r1, #5504	; 0x1580
 8004406:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800440a:	f241 605c 	movw	r0, #5724	; 0x165c
 800440e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004412:	f002 fb25 	bl	8006a60 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8004416:	f641 001c 	movw	r0, #6172	; 0x181c
 800441a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800441e:	f002 fcaf 	bl	8006d80 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8004422:	2100      	movs	r1, #0
 8004424:	f641 001c 	movw	r0, #6172	; 0x181c
 8004428:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800442c:	f002 fcbe 	bl	8006dac <HAL_DAC_Start>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8004440:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004444:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 800444c:	2208      	movs	r2, #8
 800444e:	f241 51a0 	movw	r1, #5536	; 0x15a0
 8004452:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004456:	f241 60c8 	movw	r0, #5832	; 0x16c8
 800445a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800445e:	f002 faff 	bl	8006a60 <HAL_ADC_Start_DMA>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	f241 635c 	movw	r3, #5724	; 0x165c
 8004478:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800447c:	429a      	cmp	r2, r3
 800447e:	f040 80d6 	bne.w	800462e <HAL_ADC_ConvHalfCpltCallback+0x1c4>
		if(calibrating)ADC_CAL();
 8004482:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8004486:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_ADC_ConvHalfCpltCallback+0x2c>
 8004490:	f7ff fea8 	bl	80041e4 <ADC_CAL>
 8004494:	e0cb      	b.n	800462e <HAL_ADC_ConvHalfCpltCallback+0x1c4>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8004496:	f240 5374 	movw	r3, #1396	; 0x574
 800449a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	f241 5380 	movw	r3, #5504	; 0x1580
 80044b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	b21a      	sxth	r2, r3
 80044c0:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80044c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044c8:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 80044ca:	f241 53c0 	movw	r3, #5568	; 0x15c0
 80044ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	f241 5380 	movw	r3, #5504	; 0x1580
 80044da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da00      	bge.n	80044e6 <HAL_ADC_ConvHalfCpltCallback+0x7c>
 80044e4:	330f      	adds	r3, #15
 80044e6:	111b      	asrs	r3, r3, #4
 80044e8:	461a      	mov	r2, r3
 80044ea:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80044ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
 80044fa:	2281      	movs	r2, #129	; 0x81
 80044fc:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004500:	fb82 0203 	smull	r0, r2, r2, r3
 8004504:	441a      	add	r2, r3
 8004506:	12d2      	asrs	r2, r2, #11
 8004508:	17db      	asrs	r3, r3, #31
 800450a:	1ad2      	subs	r2, r2, r3
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	011a      	lsls	r2, r3, #4
 8004514:	441a      	add	r2, r3
 8004516:	f248 531f 	movw	r3, #34079	; 0x851f
 800451a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800451e:	fb83 0302 	smull	r0, r3, r3, r2
 8004522:	115b      	asrs	r3, r3, #5
 8004524:	17d2      	asrs	r2, r2, #31
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	440b      	add	r3, r1
 800452a:	2232      	movs	r2, #50	; 0x32
 800452c:	fb03 f202 	mul.w	r2, r3, r2
 8004530:	f241 53d4 	movw	r3, #5588	; 0x15d4
 8004534:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004538:	601a      	str	r2, [r3, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 800453a:	f241 53c0 	movw	r3, #5568	; 0x15c0
 800453e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4619      	mov	r1, r3
 8004546:	f241 5380 	movw	r3, #5504	; 0x1580
 800454a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da00      	bge.n	8004556 <HAL_ADC_ConvHalfCpltCallback+0xec>
 8004554:	330f      	adds	r3, #15
 8004556:	111b      	asrs	r3, r3, #4
 8004558:	461a      	mov	r2, r3
 800455a:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800455e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	b21b      	sxth	r3, r3
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	2281      	movs	r2, #129	; 0x81
 800456c:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8004570:	fb82 0203 	smull	r0, r2, r2, r3
 8004574:	441a      	add	r2, r3
 8004576:	12d2      	asrs	r2, r2, #11
 8004578:	17db      	asrs	r3, r3, #31
 800457a:	1ad2      	subs	r2, r2, r3
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	011a      	lsls	r2, r3, #4
 8004584:	441a      	add	r2, r3
 8004586:	f248 531f 	movw	r3, #34079	; 0x851f
 800458a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800458e:	fb83 0302 	smull	r0, r3, r3, r2
 8004592:	115b      	asrs	r3, r3, #5
 8004594:	17d2      	asrs	r2, r2, #31
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	440b      	add	r3, r1
 800459a:	2232      	movs	r2, #50	; 0x32
 800459c:	fb03 f202 	mul.w	r2, r3, r2
 80045a0:	f241 53d4 	movw	r3, #5588	; 0x15d4
 80045a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045a8:	605a      	str	r2, [r3, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80045aa:	f241 53c0 	movw	r3, #5568	; 0x15c0
 80045ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f241 5380 	movw	r3, #5504	; 0x1580
 80045ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da00      	bge.n	80045c6 <HAL_ADC_ConvHalfCpltCallback+0x15c>
 80045c4:	330f      	adds	r3, #15
 80045c6:	111b      	asrs	r3, r3, #4
 80045c8:	461a      	mov	r2, r3
 80045ca:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80045ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b21b      	sxth	r3, r3
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	2281      	movs	r2, #129	; 0x81
 80045dc:	f2c8 0208 	movt	r2, #32776	; 0x8008
 80045e0:	fb82 0203 	smull	r0, r2, r2, r3
 80045e4:	441a      	add	r2, r3
 80045e6:	12d2      	asrs	r2, r2, #11
 80045e8:	17db      	asrs	r3, r3, #31
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	441a      	add	r2, r3
 80045f6:	f248 531f 	movw	r3, #34079	; 0x851f
 80045fa:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80045fe:	fb83 0302 	smull	r0, r3, r3, r2
 8004602:	115b      	asrs	r3, r3, #5
 8004604:	17d2      	asrs	r2, r2, #31
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	440b      	add	r3, r1
 800460a:	2232      	movs	r2, #50	; 0x32
 800460c:	fb03 f202 	mul.w	r2, r3, r2
 8004610:	f241 53d4 	movw	r3, #5588	; 0x15d4
 8004614:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004618:	609a      	str	r2, [r3, #8]
			Curent_IRQ_callback(&data);
 800461a:	f241 53d0 	movw	r3, #5584	; 0x15d0
 800461e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f241 50d4 	movw	r0, #5588	; 0x15d4
 8004628:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800462c:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	f241 63c8 	movw	r3, #5832	; 0x16c8
 8004634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004638:	429a      	cmp	r2, r3
 800463a:	d169      	bne.n	8004710 <HAL_ADC_ConvHalfCpltCallback+0x2a6>
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 800463c:	f241 53a0 	movw	r3, #5536	; 0x15a0
 8004640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	091a      	lsrs	r2, r3, #4
 8004648:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800464c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b21b      	sxth	r3, r3
 8004654:	fb03 f202 	mul.w	r2, r3, r2
 8004658:	f240 1301 	movw	r3, #257	; 0x101
 800465c:	f2c0 0310 	movt	r3, #16
 8004660:	fba3 1302 	umull	r1, r3, r3, r2
 8004664:	1ad2      	subs	r2, r2, r3
 8004666:	0852      	lsrs	r2, r2, #1
 8004668:	4413      	add	r3, r2
 800466a:	0adb      	lsrs	r3, r3, #11
 800466c:	b21a      	sxth	r2, r3
 800466e:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004672:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004676:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8004678:	f241 53a0 	movw	r3, #5536	; 0x15a0
 800467c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	091a      	lsrs	r2, r3, #4
 8004684:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004688:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b21b      	sxth	r3, r3
 8004690:	fb03 f202 	mul.w	r2, r3, r2
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	461a      	mov	r2, r3
 800469e:	f240 1301 	movw	r3, #257	; 0x101
 80046a2:	f2c0 0310 	movt	r3, #16
 80046a6:	fba3 1302 	umull	r1, r3, r3, r2
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	0852      	lsrs	r2, r2, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	0ada      	lsrs	r2, r3, #11
 80046b2:	f241 53e8 	movw	r3, #5608	; 0x15e8
 80046b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046ba:	601a      	str	r2, [r3, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80046bc:	f241 53a0 	movw	r3, #5536	; 0x15a0
 80046c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	091a      	lsrs	r2, r3, #4
 80046c8:	f241 53cc 	movw	r3, #5580	; 0x15cc
 80046cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b21b      	sxth	r3, r3
 80046d4:	fb03 f202 	mul.w	r2, r3, r2
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	441a      	add	r2, r3
 80046e2:	f649 2367 	movw	r3, #39527	; 0x9a67
 80046e6:	f6cc 43d9 	movt	r3, #52441	; 0xccd9
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	0bdb      	lsrs	r3, r3, #15
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	f241 53e8 	movw	r3, #5608	; 0x15e8
 80046f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046fa:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80046fc:	f241 53e4 	movw	r3, #5604	; 0x15e4
 8004700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f241 50e8 	movw	r0, #5608	; 0x15e8
 800470a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800470e:	4798      	blx	r3
	}
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	f241 635c 	movw	r3, #5724	; 0x165c
 8004726:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800472a:	429a      	cmp	r2, r3
 800472c:	f040 80d4 	bne.w	80048d8 <HAL_ADC_ConvCpltCallback+0x1c0>
 8004730:	f241 53f4 	movw	r3, #5620	; 0x15f4
 8004734:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 80cc 	bne.w	80048d8 <HAL_ADC_ConvCpltCallback+0x1c0>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8004740:	f240 5374 	movw	r3, #1396	; 0x574
 8004744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	461a      	mov	r2, r3
 8004758:	f241 5380 	movw	r3, #5504	; 0x1580
 800475c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	b21a      	sxth	r2, r3
 800476a:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800476e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004772:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8004774:	f241 53c0 	movw	r3, #5568	; 0x15c0
 8004778:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	f241 5380 	movw	r3, #5504	; 0x1580
 8004784:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	da00      	bge.n	8004790 <HAL_ADC_ConvCpltCallback+0x78>
 800478e:	330f      	adds	r3, #15
 8004790:	111b      	asrs	r3, r3, #4
 8004792:	461a      	mov	r2, r3
 8004794:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b21b      	sxth	r3, r3
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	2281      	movs	r2, #129	; 0x81
 80047a6:	f2c8 0208 	movt	r2, #32776	; 0x8008
 80047aa:	fb82 0203 	smull	r0, r2, r2, r3
 80047ae:	441a      	add	r2, r3
 80047b0:	12d2      	asrs	r2, r2, #11
 80047b2:	17db      	asrs	r3, r3, #31
 80047b4:	1ad2      	subs	r2, r2, r3
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	011a      	lsls	r2, r3, #4
 80047be:	441a      	add	r2, r3
 80047c0:	f248 531f 	movw	r3, #34079	; 0x851f
 80047c4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80047c8:	fb83 0302 	smull	r0, r3, r3, r2
 80047cc:	115b      	asrs	r3, r3, #5
 80047ce:	17d2      	asrs	r2, r2, #31
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	440b      	add	r3, r1
 80047d4:	2232      	movs	r2, #50	; 0x32
 80047d6:	fb03 f202 	mul.w	r2, r3, r2
 80047da:	f241 53d4 	movw	r3, #5588	; 0x15d4
 80047de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047e2:	601a      	str	r2, [r3, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80047e4:	f241 53c0 	movw	r3, #5568	; 0x15c0
 80047e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4619      	mov	r1, r3
 80047f0:	f241 5380 	movw	r3, #5504	; 0x1580
 80047f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da00      	bge.n	8004800 <HAL_ADC_ConvCpltCallback+0xe8>
 80047fe:	330f      	adds	r3, #15
 8004800:	111b      	asrs	r3, r3, #4
 8004802:	461a      	mov	r2, r3
 8004804:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004808:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b21b      	sxth	r3, r3
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	2281      	movs	r2, #129	; 0x81
 8004816:	f2c8 0208 	movt	r2, #32776	; 0x8008
 800481a:	fb82 0203 	smull	r0, r2, r2, r3
 800481e:	441a      	add	r2, r3
 8004820:	12d2      	asrs	r2, r2, #11
 8004822:	17db      	asrs	r3, r3, #31
 8004824:	1ad2      	subs	r2, r2, r3
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	441a      	add	r2, r3
 8004830:	f248 531f 	movw	r3, #34079	; 0x851f
 8004834:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004838:	fb83 0302 	smull	r0, r3, r3, r2
 800483c:	115b      	asrs	r3, r3, #5
 800483e:	17d2      	asrs	r2, r2, #31
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	440b      	add	r3, r1
 8004844:	2232      	movs	r2, #50	; 0x32
 8004846:	fb03 f202 	mul.w	r2, r3, r2
 800484a:	f241 53d4 	movw	r3, #5588	; 0x15d4
 800484e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004852:	605a      	str	r2, [r3, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8004854:	f241 53c0 	movw	r3, #5568	; 0x15c0
 8004858:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4619      	mov	r1, r3
 8004860:	f241 5380 	movw	r3, #5504	; 0x1580
 8004864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da00      	bge.n	8004870 <HAL_ADC_ConvCpltCallback+0x158>
 800486e:	330f      	adds	r3, #15
 8004870:	111b      	asrs	r3, r3, #4
 8004872:	461a      	mov	r2, r3
 8004874:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004878:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b21b      	sxth	r3, r3
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	2281      	movs	r2, #129	; 0x81
 8004886:	f2c8 0208 	movt	r2, #32776	; 0x8008
 800488a:	fb82 0203 	smull	r0, r2, r2, r3
 800488e:	441a      	add	r2, r3
 8004890:	12d2      	asrs	r2, r2, #11
 8004892:	17db      	asrs	r3, r3, #31
 8004894:	1ad2      	subs	r2, r2, r3
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	011a      	lsls	r2, r3, #4
 800489e:	441a      	add	r2, r3
 80048a0:	f248 531f 	movw	r3, #34079	; 0x851f
 80048a4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80048a8:	fb83 0302 	smull	r0, r3, r3, r2
 80048ac:	115b      	asrs	r3, r3, #5
 80048ae:	17d2      	asrs	r2, r2, #31
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	440b      	add	r3, r1
 80048b4:	2232      	movs	r2, #50	; 0x32
 80048b6:	fb03 f202 	mul.w	r2, r3, r2
 80048ba:	f241 53d4 	movw	r3, #5588	; 0x15d4
 80048be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048c2:	609a      	str	r2, [r3, #8]
		Curent_IRQ_callback(&data);
 80048c4:	f241 53d0 	movw	r3, #5584	; 0x15d0
 80048c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f241 50d4 	movw	r0, #5588	; 0x15d4
 80048d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80048d6:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	f241 63c8 	movw	r3, #5832	; 0x16c8
 80048de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d16f      	bne.n	80049c6 <HAL_ADC_ConvCpltCallback+0x2ae>
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 80048e6:	f241 53e8 	movw	r3, #5608	; 0x15e8
 80048ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048ee:	2200      	movs	r2, #0
 80048f0:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 80048f2:	f241 53a0 	movw	r3, #5536	; 0x15a0
 80048f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	091a      	lsrs	r2, r3, #4
 80048fe:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b21b      	sxth	r3, r3
 800490a:	fb03 f202 	mul.w	r2, r3, r2
 800490e:	f240 1301 	movw	r3, #257	; 0x101
 8004912:	f2c0 0310 	movt	r3, #16
 8004916:	fba3 1302 	umull	r1, r3, r3, r2
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	0852      	lsrs	r2, r2, #1
 800491e:	4413      	add	r3, r2
 8004920:	0adb      	lsrs	r3, r3, #11
 8004922:	b21a      	sxth	r2, r3
 8004924:	f241 53e8 	movw	r3, #5608	; 0x15e8
 8004928:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800492c:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 800492e:	f241 53a0 	movw	r3, #5536	; 0x15a0
 8004932:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	091a      	lsrs	r2, r3, #4
 800493a:	f241 53cc 	movw	r3, #5580	; 0x15cc
 800493e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b21b      	sxth	r3, r3
 8004946:	fb03 f202 	mul.w	r2, r3, r2
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	4413      	add	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	461a      	mov	r2, r3
 8004954:	f240 1301 	movw	r3, #257	; 0x101
 8004958:	f2c0 0310 	movt	r3, #16
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	4413      	add	r3, r2
 8004966:	0ada      	lsrs	r2, r3, #11
 8004968:	f241 53e8 	movw	r3, #5608	; 0x15e8
 800496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004970:	601a      	str	r2, [r3, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8004972:	f241 53a0 	movw	r3, #5536	; 0x15a0
 8004976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	091a      	lsrs	r2, r3, #4
 800497e:	f241 53cc 	movw	r3, #5580	; 0x15cc
 8004982:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b21b      	sxth	r3, r3
 800498a:	fb03 f202 	mul.w	r2, r3, r2
 800498e:	4613      	mov	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	441a      	add	r2, r3
 8004998:	f649 2367 	movw	r3, #39527	; 0x9a67
 800499c:	f6cc 43d9 	movt	r3, #52441	; 0xccd9
 80049a0:	fba3 2302 	umull	r2, r3, r3, r2
 80049a4:	0bdb      	lsrs	r3, r3, #15
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f241 53e8 	movw	r3, #5608	; 0x15e8
 80049ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049b0:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80049b2:	f241 53e4 	movw	r3, #5604	; 0x15e4
 80049b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f241 50e8 	movw	r0, #5608	; 0x15e8
 80049c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80049c4:	4798      	blx	r3
	}
}
 80049c6:	bf00      	nop
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <dq0>:

void dq0(float theta, float a, float b, float c, float *d, float *q){
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b088      	sub	sp, #32
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	ed87 0a05 	vstr	s0, [r7, #20]
 80049d8:	edc7 0a04 	vstr	s1, [r7, #16]
 80049dc:	ed87 1a03 	vstr	s2, [r7, #12]
 80049e0:	edc7 1a02 	vstr	s3, [r7, #8]
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
	float cf = cosf(theta);
 80049e8:	ed97 0a05 	vldr	s0, [r7, #20]
 80049ec:	f009 fb54 	bl	800e098 <cosf>
 80049f0:	ed87 0a07 	vstr	s0, [r7, #28]
	float sf = sinf(theta);
 80049f4:	ed97 0a05 	vldr	s0, [r7, #20]
 80049f8:	f009 fb92 	bl	800e120 <sinf>
 80049fc:	ed87 0a06 	vstr	s0, [r7, #24]
//	RunCordic(theta, &cf, &sf);

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 8004a00:	ed97 7a07 	vldr	s14, [r7, #28]
 8004a04:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a10:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004a14:	f6c3 735d 	movt	r3, #16221	; 0x3f5d
 8004a18:	ee06 3a90 	vmov	s13, r3
 8004a1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a20:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004a28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a30:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a40:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004a44:	f6cb 735d 	movt	r3, #48989	; 0xbf5d
 8004a48:	ee06 3a90 	vmov	s13, r3
 8004a4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004a50:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004a58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004a5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6c:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8004a70:	f6c3 732a 	movt	r3, #16170	; 0x3f2a
 8004a74:	ee07 3a10 	vmov	s14, r3
 8004a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8004a82:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a86:	eeb1 7a67 	vneg.f32	s14, s15
 8004a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a92:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a96:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004a9a:	f6cb 735d 	movt	r3, #48989	; 0xbf5d
 8004a9e:	ee06 3a90 	vmov	s13, r3
 8004aa2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004aa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004aaa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004aae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ab2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ac6:	f24b 33d7 	movw	r3, #46039	; 0xb3d7
 8004aca:	f6c3 735d 	movt	r3, #16221	; 0x3f5d
 8004ace:	ee06 3a90 	vmov	s13, r3
 8004ad2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ada:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004ade:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ae2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af2:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8004af6:	f6c3 732a 	movt	r3, #16170	; 0x3f2a
 8004afa:	ee07 3a10 	vmov	s14, r3
 8004afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	edc3 7a00 	vstr	s15, [r3]
    }
 8004b08:	bf00      	nop
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 fd4b 	bl	80075b4 <HAL_FDCAN_Start>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e00a      	b.n	8004b3e <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f002 fe47 	bl	80077c0 <HAL_FDCAN_ActivateNotification>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b089      	sub	sp, #36	; 0x24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8004b52:	f241 6354 	movw	r3, #5716	; 0x1654
 8004b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b09      	cmp	r3, #9
 8004b5e:	d901      	bls.n	8004b64 <FDCAN_addCallback+0x1e>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e03a      	b.n	8004bda <FDCAN_addCallback+0x94>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
 8004b68:	e00f      	b.n	8004b8a <FDCAN_addCallback+0x44>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8004b6a:	f241 6204 	movw	r2, #5636	; 0x1604
 8004b6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d101      	bne.n	8004b84 <FDCAN_addCallback+0x3e>
          return FDCAN_STATUS_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e02a      	b.n	8004bda <FDCAN_addCallback+0x94>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	3301      	adds	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	f241 6354 	movw	r3, #5716	; 0x1654
 8004b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d3e7      	bcc.n	8004b6a <FDCAN_addCallback+0x24>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8004b9a:	f241 6354 	movw	r3, #5716	; 0x1654
 8004b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	f241 6304 	movw	r3, #5636	; 0x1604
 8004baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bae:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
 8004bb2:	f241 6204 	movw	r2, #5636	; 0x1604
 8004bb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004bba:	00cb      	lsls	r3, r1, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8004bc2:	f241 6354 	movw	r3, #5716	; 0x1654
 8004bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	f241 6354 	movw	r3, #5716	; 0x1654
 8004bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bd6:	601a      	str	r2, [r3, #0]

  return FDCAN_STATUS_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3724      	adds	r7, #36	; 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08e      	sub	sp, #56	; 0x38
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8004bf6:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004bfa:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004c08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8004c0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004c14:	2300      	movs	r3, #0
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f002 fcdd 	bl	80075e4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3738      	adds	r7, #56	; 0x38
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b09e      	sub	sp, #120	; 0x78
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f002 fd2e 	bl	80076b4 <HAL_FDCAN_GetRxMessage>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8004c5e:	f000 fcd3 	bl	8005608 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	677b      	str	r3, [r7, #116]	; 0x74
 8004c66:	e018      	b.n	8004c9a <HAL_FDCAN_RxFifo0Callback+0x5c>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8004c68:	f241 6204 	movw	r2, #5636	; 0x1604
 8004c6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10a      	bne.n	8004c94 <HAL_FDCAN_RxFifo0Callback+0x56>
          FDCAN_listCallbacks[i].fp(RxData);
 8004c7e:	f241 6304 	movw	r3, #5636	; 0x1604
 8004c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c88:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004c8c:	f107 020c 	add.w	r2, r7, #12
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c96:	3301      	adds	r3, #1
 8004c98:	677b      	str	r3, [r7, #116]	; 0x74
 8004c9a:	f241 6354 	movw	r3, #5716	; 0x1654
 8004c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3de      	bcc.n	8004c68 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	3778      	adds	r7, #120	; 0x78
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004cb4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004cb6:	2400      	movs	r4, #0
{
 8004cb8:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8004cba:	2220      	movs	r2, #32
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8004cc0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004cc4:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004cc6:	f007 f893 	bl	800bdf0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004cca:	f241 605c 	movw	r0, #5724	; 0x165c
 8004cce:	f2c2 0000 	movt	r0, #8192	; 0x2000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004cd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004cd6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004cda:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004cde:	2208      	movs	r2, #8
 8004ce0:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce6:	8382      	strh	r2, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 4;
 8004ce8:	2204      	movs	r2, #4
 8004cea:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004cf0:	2301      	movs	r3, #1
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004cf2:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004cf4:	220c      	movs	r2, #12
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004cf6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004cfa:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cfe:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004d02:	e9c0 2411 	strd	r2, r4, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004d06:	e9c0 4313 	strd	r4, r3, [r0, #76]	; 0x4c
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004d0a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004d0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8004d12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004d16:	f001 f96f 	bl	8005ff8 <HAL_ADC_Init>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d14c      	bne.n	8004db8 <MX_ADC1_Init+0x104>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d1e:	f241 605c 	movw	r0, #5724	; 0x165c
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004d22:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d24:	a901      	add	r1, sp, #4
 8004d26:	f2c2 0000 	movt	r0, #8192	; 0x2000
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004d2a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d2c:	f001 ff20 	bl	8006b70 <HAL_ADCEx_MultiModeConfigChannel>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d151      	bne.n	8004dd8 <MX_ADC1_Init+0x124>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004d34:	2302      	movs	r3, #2
 8004d36:	f2c0 4330 	movt	r3, #1072	; 0x430
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d3a:	2206      	movs	r2, #6
 8004d3c:	e9cd 3204 	strd	r3, r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004d40:	2103      	movs	r1, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d42:	237f      	movs	r3, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d44:	f241 605c 	movw	r0, #5724	; 0x165c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d48:	e9cd 1306 	strd	r1, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d4c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8004d4e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d50:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004d54:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8004d56:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d5a:	f001 fbcf 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004d5e:	bbc0      	cbnz	r0, 8004dd2 <MX_ADC1_Init+0x11e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004d60:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d62:	f241 605c 	movw	r0, #5724	; 0x165c
  sConfig.Channel = ADC_CHANNEL_2;
 8004d66:	f6c0 0360 	movt	r3, #2144	; 0x860
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d6a:	220c      	movs	r2, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d6c:	a904      	add	r1, sp, #16
 8004d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d72:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d76:	f001 fbc1 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004d7a:	bb38      	cbnz	r0, 8004dcc <MX_ADC1_Init+0x118>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004d7c:	2308      	movs	r3, #8
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d7e:	f241 605c 	movw	r0, #5724	; 0x165c
  sConfig.Channel = ADC_CHANNEL_3;
 8004d82:	f6c0 4390 	movt	r3, #3216	; 0xc90
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004d86:	2212      	movs	r2, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d88:	a904      	add	r1, sp, #16
 8004d8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004d8e:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d92:	f001 fbb3 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004d96:	b9b0      	cbnz	r0, 8004dc6 <MX_ADC1_Init+0x112>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004d98:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d9a:	f241 605c 	movw	r0, #5724	; 0x165c
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004d9e:	f6cc 3384 	movt	r3, #52100	; 0xcb84
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004da2:	2218      	movs	r2, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004da4:	a904      	add	r1, sp, #16
 8004da6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004daa:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004dae:	f001 fba5 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004db2:	b920      	cbnz	r0, 8004dbe <MX_ADC1_Init+0x10a>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004db4:	b00c      	add	sp, #48	; 0x30
 8004db6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004db8:	f000 fc26 	bl	8005608 <Error_Handler>
 8004dbc:	e7af      	b.n	8004d1e <MX_ADC1_Init+0x6a>
    Error_Handler();
 8004dbe:	f000 fc23 	bl	8005608 <Error_Handler>
}
 8004dc2:	b00c      	add	sp, #48	; 0x30
 8004dc4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004dc6:	f000 fc1f 	bl	8005608 <Error_Handler>
 8004dca:	e7e5      	b.n	8004d98 <MX_ADC1_Init+0xe4>
    Error_Handler();
 8004dcc:	f000 fc1c 	bl	8005608 <Error_Handler>
 8004dd0:	e7d4      	b.n	8004d7c <MX_ADC1_Init+0xc8>
    Error_Handler();
 8004dd2:	f000 fc19 	bl	8005608 <Error_Handler>
 8004dd6:	e7c3      	b.n	8004d60 <MX_ADC1_Init+0xac>
    Error_Handler();
 8004dd8:	f000 fc16 	bl	8005608 <Error_Handler>
 8004ddc:	e7aa      	b.n	8004d34 <MX_ADC1_Init+0x80>
 8004dde:	bf00      	nop

08004de0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004de0:	b510      	push	{r4, lr}
 8004de2:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004de4:	2220      	movs	r2, #32
 8004de6:	2100      	movs	r1, #0
 8004de8:	4668      	mov	r0, sp
 8004dea:	f007 f801 	bl	800bdf0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004dee:	f241 60c8 	movw	r0, #5832	; 0x16c8
 8004df2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004df6:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004dfe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.NbrOfConversion = 4;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e02:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  hadc2.Init.OversamplingMode = ENABLE;
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004e06:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hadc2.Instance = ADC2;
 8004e0a:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004e0e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004e12:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e16:	2304      	movs	r3, #4
  hadc2.Init.OversamplingMode = ENABLE;
 8004e18:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004e1c:	6502      	str	r2, [r0, #80]	; 0x50
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc2.Instance = ADC2;
 8004e22:	f2c5 0100 	movt	r1, #20480	; 0x5000
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004e26:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e2a:	6183      	str	r3, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004e2c:	8382      	strh	r2, [r0, #28]
  hadc2.Init.NbrOfConversion = 4;
 8004e2e:	6203      	str	r3, [r0, #32]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004e34:	230c      	movs	r3, #12
  hadc2.Instance = ADC2;
 8004e36:	e9c0 1400 	strd	r1, r4, [r0]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004e3a:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004e3c:	6443      	str	r3, [r0, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004e3e:	f001 f8db 	bl	8005ff8 <HAL_ADC_Init>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d146      	bne.n	8004ed4 <MX_ADC2_Init+0xf4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e4a:	f2c3 2360 	movt	r3, #12896	; 0x3260
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004e4e:	2206      	movs	r2, #6
 8004e50:	e9cd 3200 	strd	r3, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004e54:	2107      	movs	r1, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e56:	237f      	movs	r3, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e58:	f241 60c8 	movw	r0, #5832	; 0x16c8
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004e5c:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004e60:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8004e62:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e68:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8004e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e6e:	f001 fb45 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004e72:	bbe0      	cbnz	r0, 8004eee <MX_ADC2_Init+0x10e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e78:	210c      	movs	r1, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e7a:	f241 60c8 	movw	r0, #5832	; 0x16c8
  sConfig.Channel = ADC_CHANNEL_14;
 8004e7e:	f6c3 23c0 	movt	r3, #15040	; 0x3ac0
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004e82:	e9cd 3100 	strd	r3, r1, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004e86:	2200      	movs	r2, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e88:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e8c:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004e8e:	9202      	str	r2, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e90:	f001 fb34 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004e94:	bb40      	cbnz	r0, 8004ee8 <MX_ADC2_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004e9a:	f241 60c8 	movw	r0, #5832	; 0x16c8
  sConfig.Channel = ADC_CHANNEL_13;
 8004e9e:	f2c3 6390 	movt	r3, #13968	; 0x3690
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004ea2:	2212      	movs	r2, #18
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ea4:	4669      	mov	r1, sp
 8004ea6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004eaa:	e9cd 3200 	strd	r3, r2, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004eae:	f001 fb25 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004eb2:	b9b0      	cbnz	r0, 8004ee2 <MX_ADC2_Init+0x102>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004eb4:	2308      	movs	r3, #8
  sConfig.Rank = ADC_REGULAR_RANK_4;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004eb6:	f241 60c8 	movw	r0, #5832	; 0x16c8
  sConfig.Channel = ADC_CHANNEL_3;
 8004eba:	f6c0 4390 	movt	r3, #3216	; 0xc90
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004ebe:	2218      	movs	r2, #24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ec0:	4669      	mov	r1, sp
 8004ec2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004ec6:	e9cd 3200 	strd	r3, r2, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004eca:	f001 fb17 	bl	80064fc <HAL_ADC_ConfigChannel>
 8004ece:	b920      	cbnz	r0, 8004eda <MX_ADC2_Init+0xfa>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004ed0:	b008      	add	sp, #32
 8004ed2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004ed4:	f000 fb98 	bl	8005608 <Error_Handler>
 8004ed8:	e7b5      	b.n	8004e46 <MX_ADC2_Init+0x66>
    Error_Handler();
 8004eda:	f000 fb95 	bl	8005608 <Error_Handler>
}
 8004ede:	b008      	add	sp, #32
 8004ee0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004ee2:	f000 fb91 	bl	8005608 <Error_Handler>
 8004ee6:	e7e5      	b.n	8004eb4 <MX_ADC2_Init+0xd4>
    Error_Handler();
 8004ee8:	f000 fb8e 	bl	8005608 <Error_Handler>
 8004eec:	e7d3      	b.n	8004e96 <MX_ADC2_Init+0xb6>
    Error_Handler();
 8004eee:	f000 fb8b 	bl	8005608 <Error_Handler>
 8004ef2:	e7bf      	b.n	8004e74 <MX_ADC2_Init+0x94>

08004ef4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	b09c      	sub	sp, #112	; 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efa:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004efc:	2244      	movs	r2, #68	; 0x44
 8004efe:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004f04:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004f08:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f0a:	f006 ff71 	bl	800bdf0 <memset>
  if(adcHandle->Instance==ADC1)
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f14:	d007      	beq.n	8004f26 <HAL_ADC_MspInit+0x32>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8004f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f1a:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d064      	beq.n	8004fec <HAL_ADC_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004f22:	b01c      	add	sp, #112	; 0x70
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004f2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f2e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004f30:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004f32:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f34:	f003 fd8a 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	f040 80cd 	bne.w	80050d8 <HAL_ADC_MspInit+0x1e4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004f3e:	f241 6258 	movw	r2, #5720	; 0x1658
 8004f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004f4a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004f4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004f4e:	d10c      	bne.n	8004f6a <HAL_ADC_MspInit+0x76>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f72:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8004f86:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8004f8c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8004f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8004f94:	f241 7534 	movw	r5, #5940	; 0x1734
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f98:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9a:	f002 ff79 	bl	8007e90 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004fa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004fa8:	2205      	movs	r2, #5
 8004faa:	e9c5 3200 	strd	r3, r2, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004fae:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fb4:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004fb8:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fbe:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc0:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004fc4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004fc8:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004fca:	f002 f82b 	bl	8007024 <HAL_DMA_Init>
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	f040 8085 	bne.w	80050de <HAL_ADC_MspInit+0x1ea>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004fd4:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004fd6:	6565      	str	r5, [r4, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004fdc:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004fde:	f001 fe67 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004fe2:	2012      	movs	r0, #18
 8004fe4:	f001 fea4 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 8004fe8:	b01c      	add	sp, #112	; 0x70
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ff0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ff4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ff6:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ff8:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ffa:	f003 fd27 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d170      	bne.n	80050e4 <HAL_ADC_MspInit+0x1f0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005002:	f241 6258 	movw	r2, #5720	; 0x1658
 8005006:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800500e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005010:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005012:	d10c      	bne.n	800502e <HAL_ADC_MspInit+0x13a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800501c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800501e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005022:	64da      	str	r2, [r3, #76]	; 0x4c
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800502a:	9303      	str	r3, [sp, #12]
 800502c:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005042:	f002 0201 	and.w	r2, r2, #1
 8005046:	9204      	str	r2, [sp, #16]
 8005048:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800504a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800504c:	f042 0202 	orr.w	r2, r2, #2
 8005050:	64da      	str	r2, [r3, #76]	; 0x4c
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 800505c:	2260      	movs	r2, #96	; 0x60
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505e:	a906      	add	r1, sp, #24
 8005060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8005064:	2303      	movs	r3, #3
 8005066:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506a:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506c:	f002 ff10 	bl	8007e90 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005070:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8005074:	f640 0204 	movw	r2, #2052	; 0x804
 8005078:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507a:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800507e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8005080:	e9cd 2306 	strd	r2, r3, [sp, #24]
    hdma_adc2.Instance = DMA1_Channel2;
 8005084:	f241 7594 	movw	r5, #6036	; 0x1794
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005088:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508a:	f002 ff01 	bl	8007e90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800508e:	231c      	movs	r3, #28
 8005090:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005094:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	e9c5 3200 	strd	r3, r2, [r5]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800509e:	2280      	movs	r2, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a4:	e9c5 2304 	strd	r2, r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050a8:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ae:	2320      	movs	r3, #32
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050b0:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050b4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050b8:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050ba:	f001 ffb3 	bl	8007024 <HAL_DMA_Init>
 80050be:	b9a0      	cbnz	r0, 80050ea <HAL_ADC_MspInit+0x1f6>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80050c0:	2200      	movs	r2, #0
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80050c2:	6565      	str	r5, [r4, #84]	; 0x54
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80050c4:	4611      	mov	r1, r2
 80050c6:	2012      	movs	r0, #18
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80050c8:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80050ca:	f001 fdf1 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80050ce:	2012      	movs	r0, #18
 80050d0:	f001 fe2e 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 80050d4:	b01c      	add	sp, #112	; 0x70
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80050d8:	f000 fa96 	bl	8005608 <Error_Handler>
 80050dc:	e72f      	b.n	8004f3e <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 80050de:	f000 fa93 	bl	8005608 <Error_Handler>
 80050e2:	e777      	b.n	8004fd4 <HAL_ADC_MspInit+0xe0>
      Error_Handler();
 80050e4:	f000 fa90 	bl	8005608 <Error_Handler>
 80050e8:	e78b      	b.n	8005002 <HAL_ADC_MspInit+0x10e>
      Error_Handler();
 80050ea:	f000 fa8d 	bl	8005608 <Error_Handler>
 80050ee:	e7e7      	b.n	80050c0 <HAL_ADC_MspInit+0x1cc>

080050f0 <MX_CORDIC_Init>:
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80050f0:	f241 70f4 	movw	r0, #6132	; 0x17f4
{
 80050f4:	b508      	push	{r3, lr}
  hcordic.Instance = CORDIC;
 80050f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80050fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005102:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8005104:	f001 fda8 	bl	8006c58 <HAL_CORDIC_Init>
 8005108:	b900      	cbnz	r0, 800510c <MX_CORDIC_Init+0x1c>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800510a:	bd08      	pop	{r3, pc}
 800510c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005110:	f000 ba7a 	b.w	8005608 <Error_Handler>

08005114 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 8005114:	6802      	ldr	r2, [r0, #0]
 8005116:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800511a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800511e:	429a      	cmp	r2, r3
 8005120:	d000      	beq.n	8005124 <HAL_CORDIC_MspInit+0x10>
 8005122:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005128:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 800512c:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800512e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005130:	f042 0208 	orr.w	r2, r2, #8
 8005134:	649a      	str	r2, [r3, #72]	; 0x48
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8005140:	b002      	add	sp, #8
 8005142:	4770      	bx	lr

08005144 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8005144:	b500      	push	{lr}
 8005146:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005148:	2230      	movs	r2, #48	; 0x30
 800514a:	2100      	movs	r1, #0
 800514c:	4668      	mov	r0, sp
 800514e:	f006 fe4f 	bl	800bdf0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005152:	f641 001c 	movw	r0, #6172	; 0x181c
 8005156:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800515a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800515e:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8005162:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005164:	f001 fe0c 	bl	8006d80 <HAL_DAC_Init>
 8005168:	b9a8      	cbnz	r0, 8005196 <MX_DAC1_Init+0x52>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800516a:	f641 001c 	movw	r0, #6172	; 0x181c
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800516e:	2200      	movs	r2, #0
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8005170:	2301      	movs	r3, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005172:	4669      	mov	r1, sp
 8005174:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005178:	e9cd 2202 	strd	r2, r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800517c:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005180:	e9cd 3206 	strd	r3, r2, [sp, #24]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005184:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005186:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800518a:	f001 fe5d 	bl	8006e48 <HAL_DAC_ConfigChannel>
 800518e:	b928      	cbnz	r0, 800519c <MX_DAC1_Init+0x58>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005190:	b00d      	add	sp, #52	; 0x34
 8005192:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005196:	f000 fa37 	bl	8005608 <Error_Handler>
 800519a:	e7e6      	b.n	800516a <MX_DAC1_Init+0x26>
    Error_Handler();
 800519c:	f000 fa34 	bl	8005608 <Error_Handler>
}
 80051a0:	b00d      	add	sp, #52	; 0x34
 80051a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80051a6:	bf00      	nop

080051a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80051a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 80051aa:	6801      	ldr	r1, [r0, #0]
 80051ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 80051b0:	b089      	sub	sp, #36	; 0x24
  if(dacHandle->Instance==DAC1)
 80051b2:	f2c5 0200 	movt	r2, #20480	; 0x5000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b6:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 80051b8:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051be:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80051c2:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 80051c4:	d001      	beq.n	80051ca <HAL_DAC_MspInit+0x22>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80051c6:	b009      	add	sp, #36	; 0x24
 80051c8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80051ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051d2:	2410      	movs	r4, #16
    __HAL_RCC_DAC1_CLK_ENABLE();
 80051d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
 80051dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051de:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051f6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f8:	a902      	add	r1, sp, #8
 80051fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005202:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005204:	f002 fe44 	bl	8007e90 <HAL_GPIO_Init>
}
 8005208:	b009      	add	sp, #36	; 0x24
 800520a:	bd30      	pop	{r4, r5, pc}

0800520c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800520c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005210:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 8005214:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005216:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005218:	f040 0004 	orr.w	r0, r0, #4
 800521c:	6498      	str	r0, [r3, #72]	; 0x48
 800521e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 8005220:	b084      	sub	sp, #16
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005222:	f004 0404 	and.w	r4, r4, #4
 8005226:	9401      	str	r4, [sp, #4]
 8005228:	9c01      	ldr	r4, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800522a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800522c:	f044 0401 	orr.w	r4, r4, #1
 8005230:	649c      	str	r4, [r3, #72]	; 0x48
 8005232:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8005234:	f004 0401 	and.w	r4, r4, #1
 8005238:	9402      	str	r4, [sp, #8]
 800523a:	9c02      	ldr	r4, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800523c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800523e:	f044 0402 	orr.w	r4, r4, #2
 8005242:	649c      	str	r4, [r3, #72]	; 0x48
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005246:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005248:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800524c:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 800524e:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005250:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005252:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005254:	f001 fd2c 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005258:	200b      	movs	r0, #11
 800525a:	f001 fd69 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	4611      	mov	r1, r2
 8005262:	200c      	movs	r0, #12
 8005264:	f001 fd24 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005268:	200c      	movs	r0, #12
 800526a:	f001 fd61 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	4611      	mov	r1, r2
 8005272:	200d      	movs	r0, #13
 8005274:	f001 fd1c 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005278:	200d      	movs	r0, #13
 800527a:	f001 fd59 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	4611      	mov	r1, r2
 8005282:	200e      	movs	r0, #14
 8005284:	f001 fd14 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005288:	200e      	movs	r0, #14
 800528a:	f001 fd51 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	4611      	mov	r1, r2
 8005292:	2038      	movs	r0, #56	; 0x38
 8005294:	f001 fd0c 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8005298:	2038      	movs	r0, #56	; 0x38
 800529a:	f001 fd49 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800529e:	2200      	movs	r2, #0
 80052a0:	4611      	mov	r1, r2
 80052a2:	2039      	movs	r0, #57	; 0x39
 80052a4:	f001 fd04 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80052a8:	2039      	movs	r0, #57	; 0x39
 80052aa:	f001 fd41 	bl	8006d30 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	203a      	movs	r0, #58	; 0x3a
 80052b2:	4611      	mov	r1, r2
 80052b4:	f001 fcfc 	bl	8006cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80052b8:	203a      	movs	r0, #58	; 0x3a

}
 80052ba:	b004      	add	sp, #16
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80052c0:	f001 bd36 	b.w	8006d30 <HAL_NVIC_EnableIRQ>

080052c4 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80052c4:	f641 0030 	movw	r0, #6192	; 0x1830
 80052c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
 80052cc:	b538      	push	{r3, r4, r5, lr}
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = DISABLE;
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 1;
 80052ce:	2201      	movs	r2, #1
  hfdcan1.Instance = FDCAN1;
 80052d0:	f44f 44c8 	mov.w	r4, #25600	; 0x6400
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80052d4:	2300      	movs	r3, #0
  hfdcan1.Instance = FDCAN1;
 80052d6:	f2c4 0400 	movt	r4, #16384	; 0x4000
  hfdcan1.Init.NominalPrescaler = 1;
 80052da:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
  hfdcan1.Init.NominalTimeSeg1 = 42;
  hfdcan1.Init.NominalTimeSeg2 = 7;
  hfdcan1.Init.DataPrescaler = 1;
 80052dc:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 80052de:	2209      	movs	r2, #9
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80052e0:	e9c0 4300 	strd	r4, r3, [r0]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 80052e4:	2107      	movs	r1, #7
  hfdcan1.Init.DataTimeSeg1 = 10;
  hfdcan1.Init.DataTimeSeg2 = 9;
  hfdcan1.Init.StdFiltersNbr = 0;
 80052e6:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hfdcan1.Init.ExtFiltersNbr = 0;
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80052ea:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80052ee:	f44f 7540 	mov.w	r5, #768	; 0x300
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80052f2:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80052f4:	8203      	strh	r3, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 80052f6:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.DataTimeSeg1 = 10;
 80052f8:	240a      	movs	r4, #10
  hfdcan1.Init.NominalTimeSeg1 = 42;
 80052fa:	232a      	movs	r3, #42	; 0x2a
  hfdcan1.Init.DataTimeSeg1 = 10;
 80052fc:	e9c0 240a 	strd	r2, r4, [r0, #40]	; 0x28
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8005300:	6085      	str	r5, [r0, #8]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8005302:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8005304:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8005306:	61c3      	str	r3, [r0, #28]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005308:	f002 f858 	bl	80073bc <HAL_FDCAN_Init>
 800530c:	b900      	cbnz	r0, 8005310 <MX_FDCAN1_Init+0x4c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8005314:	f000 b978 	b.w	8005608 <Error_Handler>

08005318 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8005318:	b530      	push	{r4, r5, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	b099      	sub	sp, #100	; 0x64

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005320:	2244      	movs	r2, #68	; 0x44
 8005322:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005324:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005328:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800532c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800532e:	f006 fd5f 	bl	800bdf0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005338:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8005340:	b019      	add	sp, #100	; 0x64
 8005342:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8005348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800534c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800534e:	9207      	str	r2, [sp, #28]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8005350:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005352:	f003 fb7b 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 8005356:	bb78      	cbnz	r0, 80053b8 <HAL_FDCAN_MspInit+0xa0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800535c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005360:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005366:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800536a:	659a      	str	r2, [r3, #88]	; 0x58
 800536c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800536e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005372:	9200      	str	r2, [sp, #0]
 8005374:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005376:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	64da      	str	r2, [r3, #76]	; 0x4c
 800537e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005380:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005382:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005386:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800538c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800538e:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005394:	2400      	movs	r4, #0
 8005396:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005398:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800539a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800539c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	f002 fd76 	bl	8007e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80053a4:	2200      	movs	r2, #0
 80053a6:	4611      	mov	r1, r2
 80053a8:	2015      	movs	r0, #21
 80053aa:	f001 fc81 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80053ae:	2015      	movs	r0, #21
 80053b0:	f001 fcbe 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 80053b4:	b019      	add	sp, #100	; 0x64
 80053b6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80053b8:	f000 f926 	bl	8005608 <Error_Handler>
 80053bc:	e7cc      	b.n	8005358 <HAL_FDCAN_MspInit+0x40>
 80053be:	bf00      	nop

080053c0 <MX_FMAC_Init>:
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80053c0:	f641 0094 	movw	r0, #6292	; 0x1894
{
 80053c4:	b508      	push	{r3, lr}
  hfmac.Instance = FMAC;
 80053c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80053ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053d2:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80053d4:	f002 fd10 	bl	8007df8 <HAL_FMAC_Init>
 80053d8:	b900      	cbnz	r0, 80053dc <MX_FMAC_Init+0x1c>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80053da:	bd08      	pop	{r3, pc}
 80053dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80053e0:	f000 b912 	b.w	8005608 <Error_Handler>

080053e4 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 80053e4:	6802      	ldr	r2, [r0, #0]
 80053e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80053ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d000      	beq.n	80053f4 <HAL_FMAC_MspInit+0x10>
 80053f2:	4770      	bx	lr
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80053f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 80053fc:	b082      	sub	sp, #8
    __HAL_RCC_FMAC_CLK_ENABLE();
 80053fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005400:	f042 0210 	orr.w	r2, r2, #16
 8005404:	649a      	str	r2, [r3, #72]	; 0x48
 8005406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8005410:	b002      	add	sp, #8
 8005412:	4770      	bx	lr

08005414 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8005414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005418:	2400      	movs	r4, #0
{
 800541a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005420:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005428:	f2c4 0302 	movt	r3, #16386	; 0x4002
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800542e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005430:	f042 0220 	orr.w	r2, r2, #32
 8005434:	64da      	str	r2, [r3, #76]	; 0x4c
 8005436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005438:	f002 0220 	and.w	r2, r2, #32
 800543c:	9201      	str	r2, [sp, #4]
 800543e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005442:	f042 0204 	orr.w	r2, r2, #4
 8005446:	64da      	str	r2, [r3, #76]	; 0x4c
 8005448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800544a:	f002 0204 	and.w	r2, r2, #4
 800544e:	9202      	str	r2, [sp, #8]
 8005450:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	64da      	str	r2, [r3, #76]	; 0x4c
 800545a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545c:	f002 0201 	and.w	r2, r2, #1
 8005460:	9203      	str	r2, [sp, #12]
 8005462:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005466:	f042 0202 	orr.w	r2, r2, #2
 800546a:	64da      	str	r2, [r3, #76]	; 0x4c
 800546c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800546e:	f002 0202 	and.w	r2, r2, #2
 8005472:	9204      	str	r2, [sp, #16]
 8005474:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005478:	f042 0208 	orr.w	r2, r2, #8
 800547c:	64da      	str	r2, [r3, #76]	; 0x4c
 800547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8005480:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8005484:	f6c4 0600 	movt	r6, #18432	; 0x4800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800548e:	4630      	mov	r0, r6
 8005490:	4622      	mov	r2, r4
 8005492:	21c0      	movs	r1, #192	; 0xc0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8005494:	f44f 6840 	mov.w	r8, #3072	; 0xc00
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005498:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 800549a:	f6c4 0800 	movt	r8, #18432	; 0x4800
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800549e:	f002 fe05 	bl	80080ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80054a2:	f44f 6580 	mov.w	r5, #1024	; 0x400
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 80054a6:	4622      	mov	r2, r4
 80054a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054b0:	f002 fdfc 	bl	80080ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80054b4:	f6c4 0500 	movt	r5, #18432	; 0x4800
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 80054b8:	4622      	mov	r2, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	2104      	movs	r1, #4
 80054be:	f002 fdf5 	bl	80080ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80054c2:	4622      	mov	r2, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	2140      	movs	r1, #64	; 0x40
 80054c8:	f002 fdf0 	bl	80080ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 80054cc:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ce:	4630      	mov	r0, r6
 80054d0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 80054d2:	2600      	movs	r6, #0
 80054d4:	22c0      	movs	r2, #192	; 0xc0
 80054d6:	2301      	movs	r3, #1
 80054d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054dc:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054e0:	f002 fcd6 	bl	8007e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e4:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ea:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054f4:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80054f8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fa:	f002 fcc9 	bl	8007e90 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 80054fe:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8005500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005504:	2301      	movs	r3, #1
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8005506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 800550a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800550e:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8005512:	f002 fcbd 	bl	8007e90 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8005516:	4640      	mov	r0, r8
 8005518:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 800551a:	2204      	movs	r2, #4
 800551c:	2301      	movs	r3, #1
 800551e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005522:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8005526:	f002 fcb3 	bl	8007e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 800552e:	a906      	add	r1, sp, #24
 8005530:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8005532:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8005536:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 800553a:	f002 fca9 	bl	8007e90 <HAL_GPIO_Init>

}
 800553e:	b00c      	add	sp, #48	; 0x30
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005544:	b530      	push	{r4, r5, lr}
 8005546:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005548:	2238      	movs	r2, #56	; 0x38
 800554a:	2100      	movs	r1, #0
 800554c:	a806      	add	r0, sp, #24
 800554e:	f006 fc4f 	bl	800bdf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005552:	2000      	movs	r0, #0
 8005554:	e9cd 0000 	strd	r0, r0, [sp]
 8005558:	e9cd 0002 	strd	r0, r0, [sp, #8]
 800555c:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800555e:	f002 fdab 	bl	80080b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005562:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005564:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005568:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 80;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800556a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800556c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800556e:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005570:	f44f 7580 	mov.w	r5, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005574:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005576:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005578:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800557a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800557c:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800557e:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005582:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8005584:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005586:	f002 fe23 	bl	80081d0 <HAL_RCC_OscConfig>
 800558a:	b108      	cbz	r0, 8005590 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800558c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800558e:	e7fe      	b.n	800558e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005590:	220f      	movs	r2, #15
 8005592:	2303      	movs	r3, #3
 8005594:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005598:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800559a:	2200      	movs	r2, #0
 800559c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800559e:	4621      	mov	r1, r4
 80055a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80055a6:	f003 f8f7 	bl	8008798 <HAL_RCC_ClockConfig>
 80055aa:	b108      	cbz	r0, 80055b0 <SystemClock_Config+0x6c>
 80055ac:	b672      	cpsid	i
  while (1)
 80055ae:	e7fe      	b.n	80055ae <SystemClock_Config+0x6a>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 80055b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055b4:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80055b8:	4628      	mov	r0, r5
 80055ba:	f003 f88b 	bl	80086d4 <HAL_RCC_MCOConfig>
}
 80055be:	b015      	add	sp, #84	; 0x54
 80055c0:	bd30      	pop	{r4, r5, pc}
 80055c2:	bf00      	nop

080055c4 <main>:
{
 80055c4:	b508      	push	{r3, lr}
  HAL_Init();
 80055c6:	f000 fcdf 	bl	8005f88 <HAL_Init>
  SystemClock_Config();
 80055ca:	f7ff ffbb 	bl	8005544 <SystemClock_Config>
  MX_GPIO_Init();
 80055ce:	f7ff ff21 	bl	8005414 <MX_GPIO_Init>
  MX_DMA_Init();
 80055d2:	f7ff fe1b 	bl	800520c <MX_DMA_Init>
  MX_FDCAN1_Init();
 80055d6:	f7ff fe75 	bl	80052c4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80055da:	f000 f817 	bl	800560c <MX_SPI1_Init>
  MX_SPI3_Init();
 80055de:	f000 f83f 	bl	8005660 <MX_SPI3_Init>
  MX_TIM1_Init();
 80055e2:	f000 fb1b 	bl	8005c1c <MX_TIM1_Init>
  MX_ADC1_Init();
 80055e6:	f7ff fb65 	bl	8004cb4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80055ea:	f7ff fbf9 	bl	8004de0 <MX_ADC2_Init>
  MX_DAC1_Init();
 80055ee:	f7ff fda9 	bl	8005144 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80055f2:	f000 fbc5 	bl	8005d80 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80055f6:	f000 fa3f 	bl	8005a78 <MX_TIM3_Init>
  MX_FMAC_Init();
 80055fa:	f7ff fee1 	bl	80053c0 <MX_FMAC_Init>
  MX_CORDIC_Init();
 80055fe:	f7ff fd77 	bl	80050f0 <MX_CORDIC_Init>
	BLDC_main();
 8005602:	f7fb ff39 	bl	8001478 <BLDC_main>
  while (1)
 8005606:	e7fc      	b.n	8005602 <main+0x3e>

08005608 <Error_Handler>:
 8005608:	b672      	cpsid	i
  while (1)
 800560a:	e7fe      	b.n	800560a <Error_Handler+0x2>

0800560c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800560c:	f641 204c 	movw	r0, #6732	; 0x1a4c
 8005610:	f44f 5240 	mov.w	r2, #12288	; 0x3000
{
 8005614:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8005616:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800561a:	f2c4 0201 	movt	r2, #16385	; 0x4001
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800561e:	f44f 7482 	mov.w	r4, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005622:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005624:	e9c0 2400 	strd	r2, r4, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005628:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800562c:	2201      	movs	r2, #1
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800562e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005632:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005636:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800563a:	2128      	movs	r1, #40	; 0x28
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800563c:	2207      	movs	r2, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800563e:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005642:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 7;
 8005646:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800564a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800564e:	f003 fcc5 	bl	8008fdc <HAL_SPI_Init>
 8005652:	b900      	cbnz	r0, 8005656 <MX_SPI1_Init+0x4a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005654:	bd10      	pop	{r4, pc}
 8005656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800565a:	f7ff bfd5 	b.w	8005608 <Error_Handler>
 800565e:	bf00      	nop

08005660 <MX_SPI3_Init>:
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005660:	f641 20b0 	movw	r0, #6832	; 0x1ab0
 8005664:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
{
 8005668:	b510      	push	{r4, lr}
  hspi3.Instance = SPI3;
 800566a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800566e:	f2c4 0200 	movt	r2, #16384	; 0x4000
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005672:	f44f 7482 	mov.w	r4, #260	; 0x104
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005676:	2300      	movs	r3, #0
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005678:	e9c0 2400 	strd	r2, r4, [r0]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800567c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005680:	2201      	movs	r2, #1
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005682:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005686:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800568a:	f44f 7400 	mov.w	r4, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800568e:	2128      	movs	r1, #40	; 0x28
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8005690:	2207      	movs	r2, #7
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005692:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005696:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.CRCPolynomial = 7;
 800569a:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800569e:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80056a2:	f003 fc9b 	bl	8008fdc <HAL_SPI_Init>
 80056a6:	b900      	cbnz	r0, 80056aa <MX_SPI3_Init+0x4a>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80056ae:	f7ff bfab 	b.w	8005608 <Error_Handler>
 80056b2:	bf00      	nop

080056b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056b4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80056b6:	6802      	ldr	r2, [r0, #0]
 80056b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
{
 80056bc:	b08a      	sub	sp, #40	; 0x28
  if(spiHandle->Instance==SPI1)
 80056be:	f2c4 0301 	movt	r3, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c2:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 80056c4:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80056ca:	e9cd 4406 	strd	r4, r4, [sp, #24]
{
 80056ce:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80056d2:	d007      	beq.n	80056e4 <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80056d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80056dc:	429a      	cmp	r2, r3
 80056de:	d063      	beq.n	80057a8 <HAL_SPI_MspInit+0xf4>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80056e0:	b00a      	add	sp, #40	; 0x28
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
 80056f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80056fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056fe:	9200      	str	r2, [sp, #0]
 8005700:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005704:	f042 0202 	orr.w	r2, r2, #2
 8005708:	64da      	str	r2, [r3, #76]	; 0x4c
 800570a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005712:	2238      	movs	r2, #56	; 0x38
 8005714:	2302      	movs	r3, #2
 8005716:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571a:	f6c4 0000 	movt	r0, #18432	; 0x4800
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800571e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005720:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005722:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005724:	9308      	str	r3, [sp, #32]
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8005726:	f641 06cc 	movw	r6, #6348	; 0x18cc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572a:	f002 fbb1 	bl	8007e90 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 800572e:	2330      	movs	r3, #48	; 0x30
 8005730:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005734:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8005738:	220a      	movs	r2, #10
 800573a:	e9c6 3200 	strd	r3, r2, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800573e:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005740:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005742:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005746:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800574a:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800574e:	6234      	str	r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005750:	f001 fc68 	bl	8007024 <HAL_DMA_Init>
 8005754:	2800      	cmp	r0, #0
 8005756:	f040 808c 	bne.w	8005872 <HAL_SPI_MspInit+0x1be>
    hdma_spi1_tx.Instance = DMA1_Channel4;
 800575a:	f641 142c 	movw	r4, #6444	; 0x192c
 800575e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005762:	2244      	movs	r2, #68	; 0x44
 8005764:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8005768:	210b      	movs	r1, #11
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800576a:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800576c:	6061      	str	r1, [r4, #4]
    hdma_spi1_tx.Instance = DMA1_Channel4;
 800576e:	6022      	str	r2, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005770:	2110      	movs	r1, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005772:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8005774:	65ae      	str	r6, [r5, #88]	; 0x58
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005776:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005778:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800577c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005780:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8005784:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005786:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005788:	f001 fc4c 	bl	8007024 <HAL_DMA_Init>
 800578c:	2800      	cmp	r0, #0
 800578e:	d16d      	bne.n	800586c <HAL_SPI_MspInit+0x1b8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005790:	2200      	movs	r2, #0
 8005792:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005794:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005796:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005798:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800579a:	f001 fa89 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800579e:	2023      	movs	r0, #35	; 0x23
 80057a0:	f001 fac6 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 80057a4:	b00a      	add	sp, #40	; 0x28
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80057a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_SPI3_CLK_ENABLE();
 80057b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58
 80057bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057be:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80057c2:	9202      	str	r2, [sp, #8]
 80057c4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057c8:	f042 0204 	orr.w	r2, r2, #4
 80057cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80057d6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80057da:	2302      	movs	r3, #2
 80057dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e0:	f6c4 0000 	movt	r0, #18432	; 0x4800
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057e4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057e6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e8:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057ea:	9308      	str	r3, [sp, #32]
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80057ec:	f641 168c 	movw	r6, #6540	; 0x198c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057f0:	f002 fb4e 	bl	8007e90 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80057f4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80057f8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80057fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8005800:	220e      	movs	r2, #14
 8005802:	e9c6 3200 	strd	r3, r2, [r6]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005806:	4630      	mov	r0, r6
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005808:	2380      	movs	r3, #128	; 0x80
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800580a:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800580e:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8005812:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005816:	6234      	str	r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005818:	f001 fc04 	bl	8007024 <HAL_DMA_Init>
 800581c:	bb60      	cbnz	r0, 8005878 <HAL_SPI_MspInit+0x1c4>
    hdma_spi3_tx.Instance = DMA2_Channel2;
 800581e:	f641 14ec 	movw	r4, #6636	; 0x19ec
 8005822:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005826:	f240 421c 	movw	r2, #1052	; 0x41c
 800582a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800582e:	210f      	movs	r1, #15
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005830:	2300      	movs	r3, #0
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8005832:	6061      	str	r1, [r4, #4]
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8005834:	6022      	str	r2, [r4, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005836:	2110      	movs	r1, #16
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005838:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800583a:	65ae      	str	r6, [r5, #88]	; 0x58
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800583c:	4620      	mov	r0, r4
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800583e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005842:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005846:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800584a:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800584c:	6122      	str	r2, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800584e:	f001 fbe9 	bl	8007024 <HAL_DMA_Init>
 8005852:	b9a0      	cbnz	r0, 800587e <HAL_SPI_MspInit+0x1ca>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005854:	2200      	movs	r2, #0
 8005856:	4611      	mov	r1, r2
 8005858:	2033      	movs	r0, #51	; 0x33
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800585a:	656c      	str	r4, [r5, #84]	; 0x54
 800585c:	62a5      	str	r5, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800585e:	f001 fa27 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005862:	2033      	movs	r0, #51	; 0x33
 8005864:	f001 fa64 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 8005868:	b00a      	add	sp, #40	; 0x28
 800586a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800586c:	f7ff fecc 	bl	8005608 <Error_Handler>
 8005870:	e78e      	b.n	8005790 <HAL_SPI_MspInit+0xdc>
      Error_Handler();
 8005872:	f7ff fec9 	bl	8005608 <Error_Handler>
 8005876:	e770      	b.n	800575a <HAL_SPI_MspInit+0xa6>
      Error_Handler();
 8005878:	f7ff fec6 	bl	8005608 <Error_Handler>
 800587c:	e7cf      	b.n	800581e <HAL_SPI_MspInit+0x16a>
      Error_Handler();
 800587e:	f7ff fec3 	bl	8005608 <Error_Handler>
 8005882:	e7e7      	b.n	8005854 <HAL_SPI_MspInit+0x1a0>

08005884 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005888:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 800588c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	661a      	str	r2, [r3, #96]	; 0x60
 8005896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005898:	f002 0201 	and.w	r2, r2, #1
 800589c:	9200      	str	r2, [sp, #0]
 800589e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058a6:	659a      	str	r2, [r3, #88]	; 0x58
 80058a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058b2:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80058b4:	f002 bc82 	b.w	80081bc <HAL_PWREx_DisableUCPDDeadBattery>

080058b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058b8:	e7fe      	b.n	80058b8 <NMI_Handler>
 80058ba:	bf00      	nop

080058bc <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 80058bc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80058c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = 0;
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = 0;
 80058ca:	63da      	str	r2, [r3, #60]	; 0x3c
  while (1)
 80058cc:	e7fb      	b.n	80058c6 <HardFault_Handler+0xa>
 80058ce:	bf00      	nop

080058d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058d0:	e7fe      	b.n	80058d0 <MemManage_Handler>
 80058d2:	bf00      	nop

080058d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058d4:	e7fe      	b.n	80058d4 <BusFault_Handler>
 80058d6:	bf00      	nop

080058d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058d8:	e7fe      	b.n	80058d8 <UsageFault_Handler>
 80058da:	bf00      	nop

080058dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop

080058e0 <DebugMon_Handler>:
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop

080058e4 <PendSV_Handler>:
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058e8:	f000 bb5e 	b.w	8005fa8 <HAL_IncTick>

080058ec <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058ec:	f241 7034 	movw	r0, #5940	; 0x1734
 80058f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80058f4:	f001 bd14 	b.w	8007320 <HAL_DMA_IRQHandler>

080058f8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80058f8:	f241 7094 	movw	r0, #6036	; 0x1794
 80058fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005900:	f001 bd0e 	b.w	8007320 <HAL_DMA_IRQHandler>

08005904 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005904:	f641 00cc 	movw	r0, #6348	; 0x18cc
 8005908:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800590c:	f001 bd08 	b.w	8007320 <HAL_DMA_IRQHandler>

08005910 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005910:	f641 102c 	movw	r0, #6444	; 0x192c
 8005914:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005918:	f001 bd02 	b.w	8007320 <HAL_DMA_IRQHandler>

0800591c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800591c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800591e:	f241 605c 	movw	r0, #5724	; 0x165c
 8005922:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005926:	f000 fc79 	bl	800621c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800592a:	f241 60c8 	movw	r0, #5832	; 0x16c8
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800592e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8005932:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005936:	f000 bc71 	b.w	800621c <HAL_ADC_IRQHandler>
 800593a:	bf00      	nop

0800593c <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800593c:	f641 0030 	movw	r0, #6192	; 0x1830
 8005940:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005944:	f001 bfc4 	b.w	80078d0 <HAL_FDCAN_IRQHandler>

08005948 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005948:	f641 3064 	movw	r0, #7012	; 0x1b64
 800594c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005950:	f004 baaa 	b.w	8009ea8 <HAL_TIM_IRQHandler>

08005954 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005954:	f641 204c 	movw	r0, #6732	; 0x1a4c
 8005958:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800595c:	f003 bda2 	b.w	80094a4 <HAL_SPI_IRQHandler>

08005960 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005960:	f641 4010 	movw	r0, #7184	; 0x1c10
 8005964:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005968:	f004 bf56 	b.w	800a818 <HAL_UART_IRQHandler>

0800596c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800596c:	f641 20b0 	movw	r0, #6832	; 0x1ab0
 8005970:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005974:	f003 bd96 	b.w	80094a4 <HAL_SPI_IRQHandler>

08005978 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005978:	f641 108c 	movw	r0, #6540	; 0x198c
 800597c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005980:	f001 bcce 	b.w	8007320 <HAL_DMA_IRQHandler>

08005984 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005984:	f641 10ec 	movw	r0, #6636	; 0x19ec
 8005988:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800598c:	f001 bcc8 	b.w	8007320 <HAL_DMA_IRQHandler>

08005990 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005990:	f641 30b0 	movw	r0, #7088	; 0x1bb0
 8005994:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005998:	f001 bcc2 	b.w	8007320 <HAL_DMA_IRQHandler>

0800599c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800599c:	2001      	movs	r0, #1
 800599e:	4770      	bx	lr

080059a0 <_kill>:

int _kill(int pid, int sig)
{
 80059a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80059a2:	f006 fa77 	bl	800be94 <__errno>
 80059a6:	2316      	movs	r3, #22
 80059a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	bd08      	pop	{r3, pc}

080059b0 <_exit>:

void _exit (int status)
{
 80059b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80059b2:	f006 fa6f 	bl	800be94 <__errno>
 80059b6:	2316      	movs	r3, #22
 80059b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80059ba:	e7fe      	b.n	80059ba <_exit+0xa>

080059bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059be:	1e16      	subs	r6, r2, #0
 80059c0:	dd07      	ble.n	80059d2 <_read+0x16>
 80059c2:	460c      	mov	r4, r1
 80059c4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80059c6:	f3af 8000 	nop.w
 80059ca:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ce:	42a5      	cmp	r5, r4
 80059d0:	d1f9      	bne.n	80059c6 <_read+0xa>
  }

  return len;
}
 80059d2:	4630      	mov	r0, r6
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	bf00      	nop

080059d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059d8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059da:	1e16      	subs	r6, r2, #0
 80059dc:	dd07      	ble.n	80059ee <_write+0x16>
 80059de:	460c      	mov	r4, r1
 80059e0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80059e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80059e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ea:	42ac      	cmp	r4, r5
 80059ec:	d1f9      	bne.n	80059e2 <_write+0xa>
  }
  return len;
}
 80059ee:	4630      	mov	r0, r6
 80059f0:	bd70      	pop	{r4, r5, r6, pc}
 80059f2:	bf00      	nop

080059f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop

080059fc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80059fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a00:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005a02:	2000      	movs	r0, #0
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005a08:	2001      	movs	r0, #1
 8005a0a:	4770      	bx	lr

08005a0c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4770      	bx	lr

08005a10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a10:	f641 3114 	movw	r1, #6932	; 0x1b14
 8005a14:	f2c2 0100 	movt	r1, #8192	; 0x2000
{
 8005a18:	b508      	push	{r3, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a1a:	f248 0200 	movw	r2, #32768	; 0x8000
 8005a1e:	f240 4c00 	movw	ip, #1024	; 0x400
  if (NULL == __sbrk_heap_end)
 8005a22:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005a28:	f2c0 0c00 	movt	ip, #0
 8005a2c:	eba2 020c 	sub.w	r2, r2, ip
  if (NULL == __sbrk_heap_end)
 8005a30:	b12b      	cbz	r3, 8005a3e <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a32:	4418      	add	r0, r3
 8005a34:	4290      	cmp	r0, r2
 8005a36:	d80a      	bhi.n	8005a4e <_sbrk+0x3e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005a38:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8005a3e:	f641 53f0 	movw	r3, #7664	; 0x1df0
 8005a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
  if (__sbrk_heap_end + incr > max_heap)
 8005a46:	4418      	add	r0, r3
 8005a48:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8005a4a:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005a4c:	d9f4      	bls.n	8005a38 <_sbrk+0x28>
    errno = ENOMEM;
 8005a4e:	f006 fa21 	bl	800be94 <__errno>
 8005a52:	230c      	movs	r3, #12
 8005a54:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	bd08      	pop	{r3, pc}
 8005a5e:	bf00      	nop

08005a60 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a60:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005a64:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005a68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a6c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a78:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a7a:	f641 3064 	movw	r0, #7012	; 0x1b64
 8005a7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a86:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005a8a:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 8005a8c:	2203      	movs	r2, #3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a8e:	2300      	movs	r3, #0
{
 8005a90:	b089      	sub	sp, #36	; 0x24
  htim3.Init.Prescaler = 3;
 8005a92:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 3999;
 8005a94:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005a98:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a9c:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005aa2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aa6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8005aaa:	9303      	str	r3, [sp, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aac:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005aae:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005ab0:	f003 fe60 	bl	8009774 <HAL_TIM_Base_Init>
 8005ab4:	b9c0      	cbnz	r0, 8005ae8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ab6:	f641 3064 	movw	r0, #7012	; 0x1b64
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005abe:	a904      	add	r1, sp, #16
 8005ac0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ac4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ac6:	f004 f911 	bl	8009cec <HAL_TIM_ConfigClockSource>
 8005aca:	b9a8      	cbnz	r0, 8005af8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005acc:	f641 3064 	movw	r0, #7012	; 0x1b64
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ad2:	a901      	add	r1, sp, #4
 8005ad4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ada:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005adc:	f004 fcee 	bl	800a4bc <HAL_TIMEx_MasterConfigSynchronization>
 8005ae0:	b928      	cbnz	r0, 8005aee <MX_TIM3_Init+0x76>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005ae2:	b009      	add	sp, #36	; 0x24
 8005ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005ae8:	f7ff fd8e 	bl	8005608 <Error_Handler>
 8005aec:	e7e3      	b.n	8005ab6 <MX_TIM3_Init+0x3e>
    Error_Handler();
 8005aee:	f7ff fd8b 	bl	8005608 <Error_Handler>
}
 8005af2:	b009      	add	sp, #36	; 0x24
 8005af4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005af8:	f7ff fd86 	bl	8005608 <Error_Handler>
 8005afc:	e7e6      	b.n	8005acc <MX_TIM3_Init+0x54>
 8005afe:	bf00      	nop

08005b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b00:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM1)
 8005b02:	6802      	ldr	r2, [r0, #0]
 8005b04:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005b08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b0c:	429a      	cmp	r2, r3
{
 8005b0e:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM1)
 8005b10:	d008      	beq.n	8005b24 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8005b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d012      	beq.n	8005b44 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b1e:	b003      	add	sp, #12
 8005b20:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b32:	661a      	str	r2, [r3, #96]	; 0x60
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	9b00      	ldr	r3, [sp, #0]
}
 8005b3e:	b003      	add	sp, #12
 8005b40:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b48:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b4c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b4e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005b50:	f041 0102 	orr.w	r1, r1, #2
 8005b54:	6599      	str	r1, [r3, #88]	; 0x58
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b5e:	201d      	movs	r0, #29
 8005b60:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b62:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b64:	f001 f8a4 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b68:	201d      	movs	r0, #29
}
 8005b6a:	b003      	add	sp, #12
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b70:	f001 b8de 	b.w	8006d30 <HAL_NVIC_EnableIRQ>

08005b74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b74:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8005b76:	6802      	ldr	r2, [r0, #0]
 8005b78:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
{
 8005b7c:	b089      	sub	sp, #36	; 0x24
  if(timHandle->Instance==TIM1)
 8005b7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b82:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8005b84:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b86:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005b8a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005b8e:	9406      	str	r4, [sp, #24]
  if(timHandle->Instance==TIM1)
 8005b90:	d001      	beq.n	8005b96 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b92:	b009      	add	sp, #36	; 0x24
 8005b94:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba4:	f042 0204 	orr.w	r2, r2, #4
 8005ba8:	64da      	str	r2, [r3, #76]	; 0x4c
 8005baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bac:	f002 0204 	and.w	r2, r2, #4
 8005bb0:	9200      	str	r2, [sp, #0]
 8005bb2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bb6:	f042 0202 	orr.w	r2, r2, #2
 8005bba:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005bc2:	2207      	movs	r2, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005bc6:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bc8:	a902      	add	r1, sp, #8
 8005bca:	f6c4 0000 	movt	r0, #18432	; 0x4800
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005bd4:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bd8:	f002 f95a 	bl	8007e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005bdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be4:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005bea:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bec:	f6c4 0000 	movt	r0, #18432	; 0x4800
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005bf0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf2:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf6:	f002 f94b 	bl	8007e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bfe:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c02:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c04:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005c06:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c08:	f6c4 0000 	movt	r0, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0c:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005c10:	e9cd 4305 	strd	r4, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c14:	f002 f93c 	bl	8007e90 <HAL_GPIO_Init>
}
 8005c18:	b009      	add	sp, #36	; 0x24
 8005c1a:	bd30      	pop	{r4, r5, pc}

08005c1c <MX_TIM1_Init>:
{
 8005c1c:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c1e:	2400      	movs	r4, #0
{
 8005c20:	b09c      	sub	sp, #112	; 0x70
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c22:	2234      	movs	r2, #52	; 0x34
 8005c24:	4621      	mov	r1, r4
 8005c26:	a80f      	add	r0, sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c28:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c30:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8005c34:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005c38:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c3c:	9404      	str	r4, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c3e:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c40:	9408      	str	r4, [sp, #32]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c42:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c44:	f006 f8d4 	bl	800bdf0 <memset>
  htim1.Instance = TIM1;
 8005c48:	f641 3018 	movw	r0, #6936	; 0x1b18
 8005c4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c50:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005c54:	f2c4 0301 	movt	r3, #16385	; 0x4001
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005c58:	2220      	movs	r2, #32
  htim1.Init.Prescaler = 0;
 8005c5a:	e9c0 3400 	strd	r3, r4, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005c5e:	6082      	str	r2, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c60:	2380      	movs	r3, #128	; 0x80
  htim1.Init.Period = 1499;
 8005c62:	f240 52db 	movw	r2, #1499	; 0x5db
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c66:	e9c0 2403 	strd	r2, r4, [r0, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c6a:	e9c0 4305 	strd	r4, r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c6e:	f003 fd81 	bl	8009774 <HAL_TIM_Base_Init>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d16c      	bne.n	8005d50 <MX_TIM1_Init+0x134>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c76:	f641 3018 	movw	r0, #6936	; 0x1b18
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c7e:	a904      	add	r1, sp, #16
 8005c80:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c84:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c86:	f004 f831 	bl	8009cec <HAL_TIM_ConfigClockSource>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d175      	bne.n	8005d7a <MX_TIM1_Init+0x15e>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c8e:	f641 3018 	movw	r0, #6936	; 0x1b18
 8005c92:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005c96:	f003 fe5b 	bl	8009950 <HAL_TIM_PWM_Init>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d16a      	bne.n	8005d74 <MX_TIM1_Init+0x158>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2200      	movs	r2, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005ca2:	f641 3018 	movw	r0, #6936	; 0x1b18
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ca6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005caa:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cac:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005cae:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005cb4:	f004 fc02 	bl	800a4bc <HAL_TIMEx_MasterConfigSynchronization>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d158      	bne.n	8005d6e <MX_TIM1_Init+0x152>
  sConfigOC.Pulse = 0;
 8005cbc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cbe:	2160      	movs	r1, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cc0:	2000      	movs	r0, #0
  sConfigOC.Pulse = 0;
 8005cc2:	e9cd 1208 	strd	r1, r2, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005ccc:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cce:	f641 3018 	movw	r0, #6936	; 0x1b18
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005cd2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cd4:	a908      	add	r1, sp, #32
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005cd6:	2308      	movs	r3, #8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005cdc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cde:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ce0:	f004 fa26 	bl	800a130 <HAL_TIM_PWM_ConfigChannel>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d13f      	bne.n	8005d68 <MX_TIM1_Init+0x14c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ce8:	f641 3018 	movw	r0, #6936	; 0x1b18
 8005cec:	2204      	movs	r2, #4
 8005cee:	a908      	add	r1, sp, #32
 8005cf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005cf4:	f004 fa1c 	bl	800a130 <HAL_TIM_PWM_ConfigChannel>
 8005cf8:	bb98      	cbnz	r0, 8005d62 <MX_TIM1_Init+0x146>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005cfa:	f641 3018 	movw	r0, #6936	; 0x1b18
 8005cfe:	2208      	movs	r2, #8
 8005d00:	a908      	add	r1, sp, #32
 8005d02:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d06:	f004 fa13 	bl	800a130 <HAL_TIM_PWM_ConfigChannel>
 8005d0a:	bb38      	cbnz	r0, 8005d5c <MX_TIM1_Init+0x140>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d0c:	f641 3018 	movw	r0, #6936	; 0x1b18
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d10:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d12:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d1a:	a90f      	add	r1, sp, #60	; 0x3c
 8005d1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d20:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d24:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d28:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005d2c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005d30:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005d34:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d38:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d3a:	f004 fc11 	bl	800a560 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d3e:	b950      	cbnz	r0, 8005d56 <MX_TIM1_Init+0x13a>
  HAL_TIM_MspPostInit(&htim1);
 8005d40:	f641 3018 	movw	r0, #6936	; 0x1b18
 8005d44:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d48:	f7ff ff14 	bl	8005b74 <HAL_TIM_MspPostInit>
}
 8005d4c:	b01c      	add	sp, #112	; 0x70
 8005d4e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005d50:	f7ff fc5a 	bl	8005608 <Error_Handler>
 8005d54:	e78f      	b.n	8005c76 <MX_TIM1_Init+0x5a>
    Error_Handler();
 8005d56:	f7ff fc57 	bl	8005608 <Error_Handler>
 8005d5a:	e7f1      	b.n	8005d40 <MX_TIM1_Init+0x124>
    Error_Handler();
 8005d5c:	f7ff fc54 	bl	8005608 <Error_Handler>
 8005d60:	e7d4      	b.n	8005d0c <MX_TIM1_Init+0xf0>
    Error_Handler();
 8005d62:	f7ff fc51 	bl	8005608 <Error_Handler>
 8005d66:	e7c8      	b.n	8005cfa <MX_TIM1_Init+0xde>
    Error_Handler();
 8005d68:	f7ff fc4e 	bl	8005608 <Error_Handler>
 8005d6c:	e7bc      	b.n	8005ce8 <MX_TIM1_Init+0xcc>
    Error_Handler();
 8005d6e:	f7ff fc4b 	bl	8005608 <Error_Handler>
 8005d72:	e7a3      	b.n	8005cbc <MX_TIM1_Init+0xa0>
    Error_Handler();
 8005d74:	f7ff fc48 	bl	8005608 <Error_Handler>
 8005d78:	e791      	b.n	8005c9e <MX_TIM1_Init+0x82>
    Error_Handler();
 8005d7a:	f7ff fc45 	bl	8005608 <Error_Handler>
 8005d7e:	e786      	b.n	8005c8e <MX_TIM1_Init+0x72>

08005d80 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d80:	f641 4010 	movw	r0, #7184	; 0x1c10
 8005d84:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d88:	f44f 5260 	mov.w	r2, #14336	; 0x3800
{
 8005d8c:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 921600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d8e:	2300      	movs	r3, #0
  huart1.Instance = USART1;
 8005d90:	f2c4 0201 	movt	r2, #16385	; 0x4001
  huart1.Init.BaudRate = 921600;
 8005d94:	f44f 2461 	mov.w	r4, #921600	; 0xe1000
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d98:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 921600;
 8005d9a:	e9c0 2400 	strd	r2, r4, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d9e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005da2:	e9c0 3104 	strd	r3, r1, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005da6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005daa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dae:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005db0:	f005 f956 	bl	800b060 <HAL_UART_Init>
 8005db4:	b9b8      	cbnz	r0, 8005de6 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005db6:	f641 4010 	movw	r0, #7184	; 0x1c10
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005dc0:	f005 f9de 	bl	800b180 <HAL_UARTEx_SetTxFifoThreshold>
 8005dc4:	b9c8      	cbnz	r0, 8005dfa <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005dc6:	f641 4010 	movw	r0, #7184	; 0x1c10
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005dd0:	f005 fa18 	bl	800b204 <HAL_UARTEx_SetRxFifoThreshold>
 8005dd4:	b970      	cbnz	r0, 8005df4 <MX_USART1_UART_Init+0x74>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005dd6:	f641 4010 	movw	r0, #7184	; 0x1c10
 8005dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005dde:	f005 f9b1 	bl	800b144 <HAL_UARTEx_DisableFifoMode>
 8005de2:	b918      	cbnz	r0, 8005dec <MX_USART1_UART_Init+0x6c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005de4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005de6:	f7ff fc0f 	bl	8005608 <Error_Handler>
 8005dea:	e7e4      	b.n	8005db6 <MX_USART1_UART_Init+0x36>
}
 8005dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005df0:	f7ff bc0a 	b.w	8005608 <Error_Handler>
    Error_Handler();
 8005df4:	f7ff fc08 	bl	8005608 <Error_Handler>
 8005df8:	e7ed      	b.n	8005dd6 <MX_USART1_UART_Init+0x56>
    Error_Handler();
 8005dfa:	f7ff fc05 	bl	8005608 <Error_Handler>
 8005dfe:	e7e2      	b.n	8005dc6 <MX_USART1_UART_Init+0x46>

08005e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e00:	b530      	push	{r4, r5, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	b099      	sub	sp, #100	; 0x64

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e06:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e08:	2244      	movs	r2, #68	; 0x44
 8005e0a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e0c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005e10:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005e14:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e16:	f005 ffeb 	bl	800bdf0 <memset>
  if(uartHandle->Instance==USART1)
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005e20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e28:	b019      	add	sp, #100	; 0x64
 8005e2a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e2c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e2e:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e30:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e32:	f002 fe0b 	bl	8008a4c <HAL_RCCEx_PeriphCLKConfig>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d14b      	bne.n	8005ed2 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e42:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e50:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e54:	9200      	str	r2, [sp, #0]
 8005e56:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e5a:	f042 0204 	orr.w	r2, r2, #4
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e68:	2230      	movs	r2, #48	; 0x30
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2300      	movs	r3, #0
 8005e74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e78:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e7a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e7c:	f6c4 0000 	movt	r0, #18432	; 0x4800
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8005e80:	f641 35b0 	movw	r5, #7088	; 0x1bb0
 8005e84:	f2c2 0500 	movt	r5, #8192	; 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e88:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e8a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e8c:	f002 f800 	bl	8007e90 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8005e90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005e94:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005e98:	2119      	movs	r1, #25
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8005e9a:	602a      	str	r2, [r5, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e9c:	2210      	movs	r2, #16
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e9e:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ea0:	e9c5 1201 	strd	r1, r2, [r5, #4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005ea4:	4628      	mov	r0, r5
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	e9c5 3203 	strd	r3, r2, [r5, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005eac:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb0:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005eb4:	f001 f8b6 	bl	8007024 <HAL_DMA_Init>
 8005eb8:	b970      	cbnz	r0, 8005ed8 <HAL_UART_MspInit+0xd8>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005ec0:	67a5      	str	r5, [r4, #120]	; 0x78
 8005ec2:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ec4:	f000 fef4 	bl	8006cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ec8:	2025      	movs	r0, #37	; 0x25
 8005eca:	f000 ff31 	bl	8006d30 <HAL_NVIC_EnableIRQ>
}
 8005ece:	b019      	add	sp, #100	; 0x64
 8005ed0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8005ed2:	f7ff fb99 	bl	8005608 <Error_Handler>
 8005ed6:	e7b0      	b.n	8005e3a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8005ed8:	f7ff fb96 	bl	8005608 <Error_Handler>
 8005edc:	e7ed      	b.n	8005eba <HAL_UART_MspInit+0xba>
 8005ede:	bf00      	nop

08005ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ee0:	480d      	ldr	r0, [pc, #52]	; (8005f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ee2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ee4:	480d      	ldr	r0, [pc, #52]	; (8005f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8005ee6:	490e      	ldr	r1, [pc, #56]	; (8005f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ee8:	4a0e      	ldr	r2, [pc, #56]	; (8005f24 <LoopForever+0xe>)
  movs r3, #0
 8005eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005eec:	e002      	b.n	8005ef4 <LoopCopyDataInit>

08005eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ef2:	3304      	adds	r3, #4

08005ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ef8:	d3f9      	bcc.n	8005eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005efa:	4a0b      	ldr	r2, [pc, #44]	; (8005f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005efc:	4c0b      	ldr	r4, [pc, #44]	; (8005f2c <LoopForever+0x16>)
  movs r3, #0
 8005efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f00:	e001      	b.n	8005f06 <LoopFillZerobss>

08005f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f04:	3204      	adds	r2, #4

08005f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f08:	d3fb      	bcc.n	8005f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f0a:	f7ff fda9 	bl	8005a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f0e:	f005 ffc7 	bl	800bea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f12:	f7ff fb57 	bl	80055c4 <main>

08005f16 <LoopForever>:

LoopForever:
    b LoopForever
 8005f16:	e7fe      	b.n	8005f16 <LoopForever>
  ldr   r0, =_estack
 8005f18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f20:	20000780 	.word	0x20000780
  ldr r2, =_sidata
 8005f24:	0800f8e0 	.word	0x0800f8e0
  ldr r2, =_sbss
 8005f28:	20000780 	.word	0x20000780
  ldr r4, =_ebss
 8005f2c:	20001df0 	.word	0x20001df0

08005f30 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f30:	e7fe      	b.n	8005f30 <COMP1_2_3_IRQHandler>
	...

08005f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f34:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005f36:	f240 537c 	movw	r3, #1404	; 0x57c
 8005f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	b90b      	cbnz	r3, 8005f46 <HAL_InitTick+0x12>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f42:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005f46:	f240 5178 	movw	r1, #1400	; 0x578
 8005f4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f52:	4605      	mov	r5, r0
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	6808      	ldr	r0, [r1, #0]
 8005f5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f5e:	f000 fef5 	bl	8006d4c <HAL_SYSTICK_Config>
 8005f62:	4604      	mov	r4, r0
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d1ec      	bne.n	8005f42 <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f68:	2d0f      	cmp	r5, #15
 8005f6a:	d8ea      	bhi.n	8005f42 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	f000 fe9c 	bl	8006cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f78:	f240 5380 	movw	r3, #1408	; 0x580
 8005f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f80:	4620      	mov	r0, r4
 8005f82:	601d      	str	r5, [r3, #0]
}
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop

08005f88 <HAL_Init>:
{
 8005f88:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f8a:	2003      	movs	r0, #3
 8005f8c:	f000 fe7e 	bl	8006c8c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f90:	200f      	movs	r0, #15
 8005f92:	f7ff ffcf 	bl	8005f34 <HAL_InitTick>
 8005f96:	b110      	cbz	r0, 8005f9e <HAL_Init+0x16>
    status = HAL_ERROR;
 8005f98:	2401      	movs	r4, #1
}
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	4604      	mov	r4, r0
    HAL_MspInit();
 8005fa0:	f7ff fc70 	bl	8005884 <HAL_MspInit>
}
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005fa8:	f641 43a0 	movw	r3, #7328	; 0x1ca0
 8005fac:	f240 517c 	movw	r1, #1404	; 0x57c
 8005fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fb4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	6809      	ldr	r1, [r1, #0]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop

08005fc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005fc4:	f641 43a0 	movw	r3, #7328	; 0x1ca0
 8005fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fcc:	6818      	ldr	r0, [r3, #0]
}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005fd4:	f7ff fff6 	bl	8005fc4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fd8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005fda:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005fdc:	d005      	beq.n	8005fea <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fde:	f240 537c 	movw	r3, #1404	; 0x57c
 8005fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fea:	f7ff ffeb 	bl	8005fc4 <HAL_GetTick>
 8005fee:	1b43      	subs	r3, r0, r5
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d3fa      	bcc.n	8005fea <HAL_Delay+0x1a>
  {
  }
}
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop

08005ff8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ff8:	b530      	push	{r4, r5, lr}
 8005ffa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006000:	2800      	cmp	r0, #0
 8006002:	f000 80d8 	beq.w	80061b6 <HAL_ADC_Init+0x1be>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006006:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006008:	4604      	mov	r4, r0
 800600a:	2d00      	cmp	r5, #0
 800600c:	f000 80a1 	beq.w	8006152 <HAL_ADC_Init+0x15a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006010:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006012:	6893      	ldr	r3, [r2, #8]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	d505      	bpl.n	8006024 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006018:	6893      	ldr	r3, [r2, #8]
 800601a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800601e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006022:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006024:	6893      	ldr	r3, [r2, #8]
 8006026:	00dd      	lsls	r5, r3, #3
 8006028:	d41f      	bmi.n	800606a <HAL_ADC_Init+0x72>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602a:	f240 5378 	movw	r3, #1400	; 0x578
 800602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006032:	f642 5063 	movw	r0, #11619	; 0x2d63
 8006036:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006038:	6891      	ldr	r1, [r2, #8]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	f2c0 503e 	movt	r0, #1342	; 0x53e
 8006040:	fba0 0303 	umull	r0, r3, r0, r3
 8006044:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800604e:	3301      	adds	r3, #1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8006056:	6091      	str	r1, [r2, #8]
 8006058:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	b12b      	cbz	r3, 800606a <HAL_ADC_Init+0x72>
    {
      wait_loop_index--;
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	3b01      	subs	r3, #1
 8006062:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1f9      	bne.n	800605e <HAL_ADC_Init+0x66>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800606a:	6893      	ldr	r3, [r2, #8]
 800606c:	00d8      	lsls	r0, r3, #3
 800606e:	d462      	bmi.n	8006136 <HAL_ADC_Init+0x13e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006070:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006072:	f043 0310 	orr.w	r3, r3, #16
 8006076:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006078:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800607a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800607c:	4303      	orrs	r3, r0
 800607e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006080:	6893      	ldr	r3, [r2, #8]
 8006082:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006086:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006088:	d15c      	bne.n	8006144 <HAL_ADC_Init+0x14c>
 800608a:	06d9      	lsls	r1, r3, #27
 800608c:	d45a      	bmi.n	8006144 <HAL_ADC_Init+0x14c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800608e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006090:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006094:	f043 0302 	orr.w	r3, r3, #2
 8006098:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800609a:	6893      	ldr	r3, [r2, #8]
 800609c:	07db      	lsls	r3, r3, #31
 800609e:	d414      	bmi.n	80060ca <HAL_ADC_Init+0xd2>
 80060a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80060a8:	f2c5 0300 	movt	r3, #20480	; 0x5000
 80060ac:	6889      	ldr	r1, [r1, #8]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	430b      	orrs	r3, r1
 80060b2:	07dd      	lsls	r5, r3, #31
 80060b4:	d409      	bmi.n	80060ca <HAL_ADC_Init+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060b6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80060ba:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80060be:	6865      	ldr	r5, [r4, #4]
 80060c0:	688b      	ldr	r3, [r1, #8]
 80060c2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80060c6:	432b      	orrs	r3, r5
 80060c8:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80060ca:	68e5      	ldr	r5, [r4, #12]
 80060cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060ce:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80060d2:	432b      	orrs	r3, r5
 80060d4:	68a5      	ldr	r5, [r4, #8]
 80060d6:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060d8:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060da:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 80060dc:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80060e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060e4:	d062      	beq.n	80061ac <HAL_ADC_Init+0x1b4>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060e8:	b121      	cbz	r1, 80060f4 <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80060ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060ec:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80060f0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060f2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80060f4:	68d5      	ldr	r5, [r2, #12]
 80060f6:	f244 0107 	movw	r1, #16391	; 0x4007
 80060fa:	f6cf 71f0 	movt	r1, #65520	; 0xfff0
 80060fe:	4029      	ands	r1, r5
 8006100:	4319      	orrs	r1, r3
 8006102:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006104:	6913      	ldr	r3, [r2, #16]
 8006106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006108:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800610c:	430b      	orrs	r3, r1
 800610e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006110:	6893      	ldr	r3, [r2, #8]
 8006112:	0759      	lsls	r1, r3, #29
 8006114:	d523      	bpl.n	800615e <HAL_ADC_Init+0x166>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006116:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d04e      	beq.n	80061bc <HAL_ADC_Init+0x1c4>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800611e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006120:	f023 030f 	bic.w	r3, r3, #15
 8006124:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006126:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006128:	f023 0303 	bic.w	r3, r3, #3
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8006132:	b003      	add	sp, #12
 8006134:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006136:	6893      	ldr	r3, [r2, #8]
 8006138:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800613c:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006140:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006142:	d0a2      	beq.n	800608a <HAL_ADC_Init+0x92>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006144:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8006146:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006148:	f043 0310 	orr.w	r3, r3, #16
 800614c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800614e:	b003      	add	sp, #12
 8006150:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8006152:	f7fe fecf 	bl	8004ef4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006156:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8006158:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800615c:	e758      	b.n	8006010 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800615e:	6893      	ldr	r3, [r2, #8]
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	d4d9      	bmi.n	8006118 <HAL_ADC_Init+0x120>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006164:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006166:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800616a:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800616c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006170:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006172:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006176:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800617a:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 800617c:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800617e:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006180:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8006182:	bb19      	cbnz	r1, 80061cc <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006188:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800618a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800618e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006192:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006196:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800619a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d021      	beq.n	80061e6 <HAL_ADC_Init+0x1ee>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80061a2:	6913      	ldr	r3, [r2, #16]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6113      	str	r3, [r2, #16]
 80061aa:	e7b5      	b.n	8006118 <HAL_ADC_Init+0x120>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80061ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80061ae:	3901      	subs	r1, #1
 80061b0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80061b4:	e797      	b.n	80060e6 <HAL_ADC_Init+0xee>
    return HAL_ERROR;
 80061b6:	2001      	movs	r0, #1
}
 80061b8:	b003      	add	sp, #12
 80061ba:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80061bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80061be:	6a23      	ldr	r3, [r4, #32]
 80061c0:	f021 010f 	bic.w	r1, r1, #15
 80061c4:	3b01      	subs	r3, #1
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	e7ac      	b.n	8006126 <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80061cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80061d2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80061d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061de:	430b      	orrs	r3, r1
 80061e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80061e4:	e7d9      	b.n	800619a <HAL_ADC_Init+0x1a2>
        MODIFY_REG(hadc->Instance->CFGR2,
 80061e6:	6911      	ldr	r1, [r2, #16]
 80061e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061ea:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80061ec:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80061f0:	f021 0104 	bic.w	r1, r1, #4
 80061f4:	432b      	orrs	r3, r5
 80061f6:	430b      	orrs	r3, r1
 80061f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80061fa:	430b      	orrs	r3, r1
 80061fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80061fe:	430b      	orrs	r3, r1
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6113      	str	r3, [r2, #16]
 8006206:	e787      	b.n	8006118 <HAL_ADC_Init+0x120>

08006208 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006208:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800620a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800620c:	f7fe f92d 	bl	800446a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006210:	bd08      	pop	{r3, pc}
 8006212:	bf00      	nop

08006214 <HAL_ADC_LevelOutOfWindowCallback>:
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop

08006218 <HAL_ADC_ErrorCallback>:
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop

0800621c <HAL_ADC_IRQHandler>:
{
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800621e:	f44f 7240 	mov.w	r2, #768	; 0x300
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006222:	6803      	ldr	r3, [r0, #0]
 8006224:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006228:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800622a:	685e      	ldr	r6, [r3, #4]
 800622c:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800622e:	07a9      	lsls	r1, r5, #30
{
 8006230:	4604      	mov	r4, r0
 8006232:	f007 071f 	and.w	r7, r7, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006236:	d502      	bpl.n	800623e <HAL_ADC_IRQHandler+0x22>
 8006238:	07b2      	lsls	r2, r6, #30
 800623a:	f100 80a9 	bmi.w	8006390 <HAL_ADC_IRQHandler+0x174>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800623e:	0769      	lsls	r1, r5, #29
 8006240:	d57f      	bpl.n	8006342 <HAL_ADC_IRQHandler+0x126>
 8006242:	0772      	lsls	r2, r6, #29
 8006244:	d57d      	bpl.n	8006342 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006246:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006248:	06d2      	lsls	r2, r2, #27
 800624a:	d403      	bmi.n	8006254 <HAL_ADC_IRQHandler+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800624c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800624e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006252:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800625a:	d11f      	bne.n	800629c <HAL_ADC_IRQHandler+0x80>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800625c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006260:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006264:	4293      	cmp	r3, r2
 8006266:	f000 80e4 	beq.w	8006432 <HAL_ADC_IRQHandler+0x216>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800626a:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800626c:	0490      	lsls	r0, r2, #18
 800626e:	d415      	bmi.n	800629c <HAL_ADC_IRQHandler+0x80>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	0711      	lsls	r1, r2, #28
 8006274:	d512      	bpl.n	800629c <HAL_ADC_IRQHandler+0x80>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	0752      	lsls	r2, r2, #29
 800627a:	f100 80e8 	bmi.w	800644e <HAL_ADC_IRQHandler+0x232>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	f022 020c 	bic.w	r2, r2, #12
 8006284:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006286:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800628c:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800628e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006290:	04db      	lsls	r3, r3, #19
 8006292:	d403      	bmi.n	800629c <HAL_ADC_IRQHandler+0x80>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006294:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800629c:	4620      	mov	r0, r4
 800629e:	f7fe fa3b 	bl	8004718 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	220c      	movs	r2, #12
 80062a6:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80062a8:	06a8      	lsls	r0, r5, #26
 80062aa:	d551      	bpl.n	8006350 <HAL_ADC_IRQHandler+0x134>
 80062ac:	06b1      	lsls	r1, r6, #26
 80062ae:	d54f      	bpl.n	8006350 <HAL_ADC_IRQHandler+0x134>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80062b2:	06d1      	lsls	r1, r2, #27
 80062b4:	d403      	bmi.n	80062be <HAL_ADC_IRQHandler+0xa2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80062b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062bc:	65e2      	str	r2, [r4, #92]	; 0x5c
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062be:	f44f 7180 	mov.w	r1, #256	; 0x100
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80062c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80062c4:	68d8      	ldr	r0, [r3, #12]
 80062c6:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80062ca:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80062cc:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80062d0:	d06c      	beq.n	80063ac <HAL_ADC_IRQHandler+0x190>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062d2:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80062d4:	b9d2      	cbnz	r2, 800630c <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80062d6:	018a      	lsls	r2, r1, #6
 80062d8:	f100 80a3 	bmi.w	8006422 <HAL_ADC_IRQHandler+0x206>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	0650      	lsls	r0, r2, #25
 80062e0:	d514      	bpl.n	800630c <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80062e2:	0289      	lsls	r1, r1, #10
 80062e4:	d412      	bmi.n	800630c <HAL_ADC_IRQHandler+0xf0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	0712      	lsls	r2, r2, #28
 80062ea:	f100 80b9 	bmi.w	8006460 <HAL_ADC_IRQHandler+0x244>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062f4:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80062f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80062f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062fc:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80062fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006300:	05d8      	lsls	r0, r3, #23
 8006302:	d403      	bmi.n	800630c <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006304:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006306:	f043 0301 	orr.w	r3, r3, #1
 800630a:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fc25 	bl	8006b5c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	2260      	movs	r2, #96	; 0x60
 8006316:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006318:	0629      	lsls	r1, r5, #24
 800631a:	d501      	bpl.n	8006320 <HAL_ADC_IRQHandler+0x104>
 800631c:	0632      	lsls	r2, r6, #24
 800631e:	d459      	bmi.n	80063d4 <HAL_ADC_IRQHandler+0x1b8>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006320:	05e8      	lsls	r0, r5, #23
 8006322:	d501      	bpl.n	8006328 <HAL_ADC_IRQHandler+0x10c>
 8006324:	05f1      	lsls	r1, r6, #23
 8006326:	d460      	bmi.n	80063ea <HAL_ADC_IRQHandler+0x1ce>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006328:	05aa      	lsls	r2, r5, #22
 800632a:	d501      	bpl.n	8006330 <HAL_ADC_IRQHandler+0x114>
 800632c:	05b0      	lsls	r0, r6, #22
 800632e:	d445      	bmi.n	80063bc <HAL_ADC_IRQHandler+0x1a0>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006330:	06e9      	lsls	r1, r5, #27
 8006332:	d501      	bpl.n	8006338 <HAL_ADC_IRQHandler+0x11c>
 8006334:	06f2      	lsls	r2, r6, #27
 8006336:	d410      	bmi.n	800635a <HAL_ADC_IRQHandler+0x13e>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006338:	056d      	lsls	r5, r5, #21
 800633a:	d501      	bpl.n	8006340 <HAL_ADC_IRQHandler+0x124>
 800633c:	0570      	lsls	r0, r6, #21
 800633e:	d460      	bmi.n	8006402 <HAL_ADC_IRQHandler+0x1e6>
}
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006342:	0728      	lsls	r0, r5, #28
 8006344:	d5b0      	bpl.n	80062a8 <HAL_ADC_IRQHandler+0x8c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006346:	0731      	lsls	r1, r6, #28
 8006348:	f53f af7d 	bmi.w	8006246 <HAL_ADC_IRQHandler+0x2a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800634c:	06a8      	lsls	r0, r5, #26
 800634e:	d4ad      	bmi.n	80062ac <HAL_ADC_IRQHandler+0x90>
 8006350:	066a      	lsls	r2, r5, #25
 8006352:	d5e1      	bpl.n	8006318 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006354:	0670      	lsls	r0, r6, #25
 8006356:	d5df      	bpl.n	8006318 <HAL_ADC_IRQHandler+0xfc>
 8006358:	e7aa      	b.n	80062b0 <HAL_ADC_IRQHandler+0x94>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800635a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800635c:	b14a      	cbz	r2, 8006372 <HAL_ADC_IRQHandler+0x156>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800635e:	2f00      	cmp	r7, #0
 8006360:	d071      	beq.n	8006446 <HAL_ADC_IRQHandler+0x22a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006362:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006366:	f2c5 0200 	movt	r2, #20480	; 0x5000
 800636a:	6892      	ldr	r2, [r2, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800636c:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 8006370:	d00b      	beq.n	800638a <HAL_ADC_IRQHandler+0x16e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006372:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006378:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800637a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff ff48 	bl	8006218 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	2210      	movs	r2, #16
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e7d3      	b.n	8006338 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006390:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006392:	06d8      	lsls	r0, r3, #27
 8006394:	d403      	bmi.n	800639e <HAL_ADC_IRQHandler+0x182>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006396:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800639c:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fbe4 	bl	8006b6c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	2202      	movs	r2, #2
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e748      	b.n	800623e <HAL_ADC_IRQHandler+0x22>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063ac:	21c1      	movs	r1, #193	; 0xc1
 80063ae:	40f9      	lsrs	r1, r7
 80063b0:	07c9      	lsls	r1, r1, #31
 80063b2:	d48e      	bmi.n	80062d2 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80063b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80063b8:	68c9      	ldr	r1, [r1, #12]
 80063ba:	e78b      	b.n	80062d4 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80063bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 fbcf 	bl	8006b68 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e7ad      	b.n	8006330 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80063d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80063dc:	4620      	mov	r0, r4
 80063de:	f7ff ff19 	bl	8006214 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	2280      	movs	r2, #128	; 0x80
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	e79a      	b.n	8006320 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80063ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80063ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 fbb6 	bl	8006b64 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e792      	b.n	8006328 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006402:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006408:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800640a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800640c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006410:	f042 0208 	orr.w	r2, r2, #8
 8006414:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006416:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006418:	6019      	str	r1, [r3, #0]
}
 800641a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800641e:	f000 bb9f 	b.w	8006b60 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006422:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006426:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800642a:	4302      	orrs	r2, r0
 800642c:	f47f af6e 	bne.w	800630c <HAL_ADC_IRQHandler+0xf0>
 8006430:	e754      	b.n	80062dc <HAL_ADC_IRQHandler+0xc0>
 8006432:	f240 2221 	movw	r2, #545	; 0x221
 8006436:	40fa      	lsrs	r2, r7
 8006438:	07d2      	lsls	r2, r2, #31
 800643a:	f53f af16 	bmi.w	800626a <HAL_ADC_IRQHandler+0x4e>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800643e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006442:	68d2      	ldr	r2, [r2, #12]
 8006444:	e712      	b.n	800626c <HAL_ADC_IRQHandler+0x50>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	07d7      	lsls	r7, r2, #31
 800644a:	d59e      	bpl.n	800638a <HAL_ADC_IRQHandler+0x16e>
 800644c:	e791      	b.n	8006372 <HAL_ADC_IRQHandler+0x156>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006450:	f043 0310 	orr.w	r3, r3, #16
 8006454:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006456:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6623      	str	r3, [r4, #96]	; 0x60
 800645e:	e71d      	b.n	800629c <HAL_ADC_IRQHandler+0x80>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006460:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006462:	f043 0310 	orr.w	r3, r3, #16
 8006466:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006468:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6623      	str	r3, [r4, #96]	; 0x60
 8006470:	e74c      	b.n	800630c <HAL_ADC_IRQHandler+0xf0>
 8006472:	bf00      	nop

08006474 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006474:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006476:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006478:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800647c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800647e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006480:	d11d      	bne.n	80064be <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006482:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006488:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800648a:	680a      	ldr	r2, [r1, #0]
 800648c:	f012 0f08 	tst.w	r2, #8
 8006490:	68ca      	ldr	r2, [r1, #12]
 8006492:	d01b      	beq.n	80064cc <ADC_DMAConvCplt+0x58>
 8006494:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8006498:	d10d      	bne.n	80064b6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800649a:	68ca      	ldr	r2, [r1, #12]
 800649c:	0494      	lsls	r4, r2, #18
 800649e:	d40a      	bmi.n	80064b6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80064a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064aa:	04d1      	lsls	r1, r2, #19
 80064ac:	d403      	bmi.n	80064b6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe f92e 	bl	8004718 <HAL_ADC_ConvCpltCallback>
}
 80064bc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80064be:	06d2      	lsls	r2, r2, #27
 80064c0:	d40a      	bmi.n	80064d8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80064c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80064cc:	0790      	lsls	r0, r2, #30
 80064ce:	d5e7      	bpl.n	80064a0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe f921 	bl	8004718 <HAL_ADC_ConvCpltCallback>
 80064d6:	e7f1      	b.n	80064bc <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fe9d 	bl	8006218 <HAL_ADC_ErrorCallback>
}
 80064de:	bd10      	pop	{r4, pc}

080064e0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80064e2:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80064e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ea:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80064ec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80064ee:	f043 0304 	orr.w	r3, r3, #4
 80064f2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80064f4:	f7ff fe90 	bl	8006218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064f8:	bd08      	pop	{r3, pc}
 80064fa:	bf00      	nop

080064fc <HAL_ADC_ConfigChannel>:
{
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80064fe:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8006502:	b083      	sub	sp, #12
 8006504:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006506:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006508:	f04f 0000 	mov.w	r0, #0
 800650c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800650e:	f000 8156 	beq.w	80067be <HAL_ADC_ConfigChannel+0x2c2>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006512:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8006514:	2001      	movs	r0, #1
 8006516:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800651a:	68a2      	ldr	r2, [r4, #8]
 800651c:	0752      	lsls	r2, r2, #29
 800651e:	d45b      	bmi.n	80065d8 <HAL_ADC_ConfigChannel+0xdc>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006520:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8006522:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006524:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8006528:	f00c 0c0c 	and.w	ip, ip, #12
 800652c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8006530:	f000 001f 	and.w	r0, r0, #31
 8006534:	f85e 500c 	ldr.w	r5, [lr, ip]
 8006538:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800653c:	261f      	movs	r6, #31
 800653e:	4082      	lsls	r2, r0
 8006540:	fa06 f000 	lsl.w	r0, r6, r0
 8006544:	ea25 0000 	bic.w	r0, r5, r0
 8006548:	4302      	orrs	r2, r0
 800654a:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800654e:	68a2      	ldr	r2, [r4, #8]
 8006550:	0757      	lsls	r7, r2, #29
 8006552:	d552      	bpl.n	80065fa <HAL_ADC_ConfigChannel+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006554:	68a2      	ldr	r2, [r4, #8]
 8006556:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006558:	68a0      	ldr	r0, [r4, #8]
 800655a:	07c6      	lsls	r6, r0, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800655c:	4615      	mov	r5, r2
 800655e:	d40e      	bmi.n	800657e <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006560:	68ce      	ldr	r6, [r1, #12]
 8006562:	2000      	movs	r0, #0
 8006564:	f2c4 007f 	movt	r0, #16511	; 0x407f
 8006568:	4286      	cmp	r6, r0
 800656a:	f000 80d0 	beq.w	800670e <HAL_ADC_ConfigChannel+0x212>
    CLEAR_BIT(ADCx->DIFSEL,
 800656e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8006572:	f3c5 0112 	ubfx	r1, r5, #0, #19
 8006576:	ea22 0201 	bic.w	r2, r2, r1
 800657a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800657e:	2200      	movs	r2, #0
 8006580:	f2c8 0208 	movt	r2, #32776	; 0x8008
 8006584:	4215      	tst	r5, r2
 8006586:	d036      	beq.n	80065f6 <HAL_ADC_ConfigChannel+0xfa>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006588:	f44f 7240 	mov.w	r2, #768	; 0x300
 800658c:	f2c5 0200 	movt	r2, #20480	; 0x5000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006590:	2100      	movs	r1, #0
 8006592:	6890      	ldr	r0, [r2, #8]
 8006594:	f2cc 3121 	movt	r1, #49953	; 0xc321
 8006598:	428d      	cmp	r5, r1
 800659a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800659e:	d024      	beq.n	80065ea <HAL_ADC_ConfigChannel+0xee>
 80065a0:	2110      	movs	r1, #16
 80065a2:	f2c9 01c0 	movt	r1, #37056	; 0x90c0
 80065a6:	428d      	cmp	r5, r1
 80065a8:	d01f      	beq.n	80065ea <HAL_ADC_ConfigChannel+0xee>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065aa:	2100      	movs	r1, #0
 80065ac:	f2cc 7152 	movt	r1, #51026	; 0xc752
 80065b0:	428d      	cmp	r5, r1
 80065b2:	f040 813f 	bne.w	8006834 <HAL_ADC_ConfigChannel+0x338>
 80065b6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80065ba:	d11c      	bne.n	80065f6 <HAL_ADC_ConfigChannel+0xfa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065c0:	f2c5 0100 	movt	r1, #20480	; 0x5000
 80065c4:	428c      	cmp	r4, r1
 80065c6:	d016      	beq.n	80065f6 <HAL_ADC_ConfigChannel+0xfa>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80065c8:	6891      	ldr	r1, [r2, #8]
 80065ca:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80065ce:	4331      	orrs	r1, r6
 80065d0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80065d4:	6091      	str	r1, [r2, #8]
}
 80065d6:	e003      	b.n	80065e0 <HAL_ADC_ConfigChannel+0xe4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065da:	f042 0220 	orr.w	r2, r2, #32
 80065de:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80065e6:	b003      	add	sp, #12
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065ea:	0202      	lsls	r2, r0, #8
 80065ec:	d403      	bmi.n	80065f6 <HAL_ADC_ConfigChannel+0xfa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065ee:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80065f2:	f000 80f7 	beq.w	80067e4 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065f6:	2000      	movs	r0, #0
 80065f8:	e7f2      	b.n	80065e0 <HAL_ADC_ConfigChannel+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065fa:	68a2      	ldr	r2, [r4, #8]
 80065fc:	0710      	lsls	r0, r2, #28
 80065fe:	f100 8084 	bmi.w	800670a <HAL_ADC_ConfigChannel+0x20e>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006602:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006604:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006606:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800660a:	f000 812c 	beq.w	8006866 <HAL_ADC_ConfigChannel+0x36a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800660e:	0dee      	lsrs	r6, r5, #23
 8006610:	f104 0c14 	add.w	ip, r4, #20
 8006614:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8006618:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800661c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8006620:	f04f 0e07 	mov.w	lr, #7
 8006624:	40aa      	lsls	r2, r5
 8006626:	fa0e f505 	lsl.w	r5, lr, r5
 800662a:	ea20 0005 	bic.w	r0, r0, r5
 800662e:	4302      	orrs	r2, r0
 8006630:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006634:	6962      	ldr	r2, [r4, #20]
 8006636:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800663a:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800663c:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006640:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006642:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006644:	d031      	beq.n	80066aa <HAL_ADC_ConfigChannel+0x1ae>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006646:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800664a:	0052      	lsls	r2, r2, #1
 800664c:	fa00 fc02 	lsl.w	ip, r0, r2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006650:	f104 0060 	add.w	r0, r4, #96	; 0x60
  MODIFY_REG(*preg,
 8006654:	680a      	ldr	r2, [r1, #0]
 8006656:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800665a:	f44f 4670 	mov.w	r6, #61440	; 0xf000
 800665e:	f2c0 36ff 	movt	r6, #1023	; 0x3ff
 8006662:	403e      	ands	r6, r7
 8006664:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8006668:	4332      	orrs	r2, r6
 800666a:	ea42 020c 	orr.w	r2, r2, ip
 800666e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006672:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006676:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8006678:	698e      	ldr	r6, [r1, #24]
 800667a:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 800667e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006682:	4332      	orrs	r2, r6
 8006684:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006688:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800668a:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 800668c:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8006690:	f1a5 0501 	sub.w	r5, r5, #1
 8006694:	fab5 f585 	clz	r5, r5
 8006698:	096d      	lsrs	r5, r5, #5
 800669a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800669e:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80066a2:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 80066a6:	680a      	ldr	r2, [r1, #0]
}
 80066a8:	e756      	b.n	8006558 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066aa:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066ac:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066b0:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80066b4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	f040 80f4 	bne.w	80068a6 <HAL_ADC_ConfigChannel+0x3aa>
 80066be:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80066c2:	42a8      	cmp	r0, r5
 80066c4:	f000 8168 	beq.w	8006998 <HAL_ADC_ConfigChannel+0x49c>
 80066c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80066ca:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066cc:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80066d0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80066d4:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80066d8:	42ae      	cmp	r6, r5
 80066da:	f000 814b 	beq.w	8006974 <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066de:	6886      	ldr	r6, [r0, #8]
 80066e0:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066e2:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80066e6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80066ea:	42ae      	cmp	r6, r5
 80066ec:	f000 8130 	beq.w	8006950 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80066f0:	68c6      	ldr	r6, [r0, #12]
 80066f2:	68c6      	ldr	r6, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066f4:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80066f8:	f3c6 6084 	ubfx	r0, r6, #26, #5
 80066fc:	4285      	cmp	r5, r0
 80066fe:	f47f af2b 	bne.w	8006558 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006708:	603a      	str	r2, [r7, #0]
 800670a:	680a      	ldr	r2, [r1, #0]
}
 800670c:	e724      	b.n	8006558 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 800670e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8006712:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8006716:	4328      	orrs	r0, r5
 8006718:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800671c:	2d00      	cmp	r5, #0
 800671e:	d051      	beq.n	80067c4 <HAL_ADC_ConfigChannel+0x2c8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006720:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006724:	2800      	cmp	r0, #0
 8006726:	f000 80ef 	beq.w	8006908 <HAL_ADC_ConfigChannel+0x40c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800672a:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800672e:	3001      	adds	r0, #1
 8006730:	f000 001f 	and.w	r0, r0, #31
 8006734:	2809      	cmp	r0, #9
 8006736:	f240 80e7 	bls.w	8006908 <HAL_ADC_ConfigChannel+0x40c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800673e:	2800      	cmp	r0, #0
 8006740:	f000 8146 	beq.w	80069d0 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8006744:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006748:	3001      	adds	r0, #1
 800674a:	0680      	lsls	r0, r0, #26
 800674c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006750:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8006754:	2d00      	cmp	r5, #0
 8006756:	f000 8142 	beq.w	80069de <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800675a:	fab5 f585 	clz	r5, r5
 800675e:	3501      	adds	r5, #1
 8006760:	f005 051f 	and.w	r5, r5, #31
 8006764:	2601      	movs	r6, #1
 8006766:	fa06 f505 	lsl.w	r5, r6, r5
 800676a:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8006770:	2a00      	cmp	r2, #0
 8006772:	f000 8130 	beq.w	80069d6 <HAL_ADC_ConfigChannel+0x4da>
  return __builtin_clz(value);
 8006776:	fab2 f282 	clz	r2, r2
 800677a:	1c55      	adds	r5, r2, #1
 800677c:	f005 051f 	and.w	r5, r5, #31
 8006780:	2203      	movs	r2, #3
 8006782:	f06f 061d 	mvn.w	r6, #29
 8006786:	fb12 6205 	smlabb	r2, r2, r5, r6
 800678a:	0512      	lsls	r2, r2, #20
 800678c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006790:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006792:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8006794:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006796:	f005 0504 	and.w	r5, r5, #4
 800679a:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 800679e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80067a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80067a6:	f04f 0e07 	mov.w	lr, #7
 80067aa:	5970      	ldr	r0, [r6, r5]
 80067ac:	fa0e f202 	lsl.w	r2, lr, r2
 80067b0:	ea20 0202 	bic.w	r2, r0, r2
 80067b4:	ea42 020c 	orr.w	r2, r2, ip
 80067b8:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067ba:	680d      	ldr	r5, [r1, #0]
}
 80067bc:	e6df      	b.n	800657e <HAL_ADC_ConfigChannel+0x82>
  __HAL_LOCK(hadc);
 80067be:	2002      	movs	r0, #2
}
 80067c0:	b003      	add	sp, #12
 80067c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067c4:	0e92      	lsrs	r2, r2, #26
 80067c6:	3201      	adds	r2, #1
 80067c8:	f002 051f 	and.w	r5, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067cc:	2d09      	cmp	r5, #9
 80067ce:	d85c      	bhi.n	800688a <HAL_ADC_ConfigChannel+0x38e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067d0:	0690      	lsls	r0, r2, #26
 80067d2:	2201      	movs	r2, #1
 80067d4:	40aa      	lsls	r2, r5
 80067d6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80067da:	4310      	orrs	r0, r2
 80067dc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80067e0:	0512      	lsls	r2, r2, #20
 80067e2:	e7d5      	b.n	8006790 <HAL_ADC_ConfigChannel+0x294>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80067e4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80067e8:	f2c5 0000 	movt	r0, #20480	; 0x5000
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067ec:	f240 5178 	movw	r1, #1400	; 0x578
 80067f0:	6882      	ldr	r2, [r0, #8]
 80067f2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80067f6:	4332      	orrs	r2, r6
 80067f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80067fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006800:	6082      	str	r2, [r0, #8]
 8006802:	680a      	ldr	r2, [r1, #0]
 8006804:	f642 5163 	movw	r1, #11619	; 0x2d63
 8006808:	0992      	lsrs	r2, r2, #6
 800680a:	f2c0 513e 	movt	r1, #1342	; 0x53e
 800680e:	fba1 1202 	umull	r1, r2, r1, r2
 8006812:	0992      	lsrs	r2, r2, #6
 8006814:	3201      	adds	r2, #1
 8006816:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800681e:	9a01      	ldr	r2, [sp, #4]
 8006820:	2a00      	cmp	r2, #0
 8006822:	f43f aee8 	beq.w	80065f6 <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8006826:	9a01      	ldr	r2, [sp, #4]
 8006828:	3a01      	subs	r2, #1
 800682a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800682c:	9a01      	ldr	r2, [sp, #4]
 800682e:	2a00      	cmp	r2, #0
 8006830:	d1f9      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x32a>
 8006832:	e6e0      	b.n	80065f6 <HAL_ADC_ConfigChannel+0xfa>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006834:	2100      	movs	r1, #0
 8006836:	f6cc 3184 	movt	r1, #52100	; 0xcb84
 800683a:	428d      	cmp	r5, r1
 800683c:	f47f aedb 	bne.w	80065f6 <HAL_ADC_ConfigChannel+0xfa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006840:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8006844:	f47f aed7 	bne.w	80065f6 <HAL_ADC_ConfigChannel+0xfa>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800684c:	f2c5 0100 	movt	r1, #20480	; 0x5000
 8006850:	428c      	cmp	r4, r1
 8006852:	f43f aed0 	beq.w	80065f6 <HAL_ADC_ConfigChannel+0xfa>
 8006856:	6891      	ldr	r1, [r2, #8]
 8006858:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800685c:	4331      	orrs	r1, r6
 800685e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8006862:	6091      	str	r1, [r2, #8]
}
 8006864:	e6bc      	b.n	80065e0 <HAL_ADC_ConfigChannel+0xe4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006866:	0dea      	lsrs	r2, r5, #23
 8006868:	f002 0204 	and.w	r2, r2, #4
 800686c:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 8006870:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8006874:	2607      	movs	r6, #7
 8006876:	40ae      	lsls	r6, r5
 8006878:	5885      	ldr	r5, [r0, r2]
 800687a:	ea25 0506 	bic.w	r5, r5, r6
 800687e:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006880:	6962      	ldr	r2, [r4, #20]
 8006882:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006886:	6162      	str	r2, [r4, #20]
}
 8006888:	e6d8      	b.n	800663c <HAL_ADC_ConfigChannel+0x140>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800688a:	0690      	lsls	r0, r2, #26
 800688c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006890:	3a1e      	subs	r2, #30
 8006892:	2601      	movs	r6, #1
 8006894:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006898:	0512      	lsls	r2, r2, #20
 800689a:	fa06 f505 	lsl.w	r5, r6, r5
 800689e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80068a2:	4328      	orrs	r0, r5
 80068a4:	e774      	b.n	8006790 <HAL_ADC_ConfigChannel+0x294>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80068aa:	b11d      	cbz	r5, 80068b4 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 80068ac:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80068b0:	42a8      	cmp	r0, r5
 80068b2:	d071      	beq.n	8006998 <HAL_ADC_ConfigChannel+0x49c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80068b6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068b8:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80068bc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80068c0:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c4:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80068c8:	b11d      	cbz	r5, 80068d2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80068ca:	fab5 f585 	clz	r5, r5
 80068ce:	42ae      	cmp	r6, r5
 80068d0:	d050      	beq.n	8006974 <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068d2:	6885      	ldr	r5, [r0, #8]
 80068d4:	6886      	ldr	r6, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068d6:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068da:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068de:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80068e2:	b11d      	cbz	r5, 80068ec <HAL_ADC_ConfigChannel+0x3f0>
  return __builtin_clz(value);
 80068e4:	fab5 f585 	clz	r5, r5
 80068e8:	42ae      	cmp	r6, r5
 80068ea:	d031      	beq.n	8006950 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068ec:	68c5      	ldr	r5, [r0, #12]
 80068ee:	68c5      	ldr	r5, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068f0:	f100 070c 	add.w	r7, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068f4:	f3c5 6084 	ubfx	r0, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	f43f ae2b 	beq.w	8006558 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8006902:	fab5 f585 	clz	r5, r5
 8006906:	e6f9      	b.n	80066fc <HAL_ADC_ConfigChannel+0x200>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800690c:	2800      	cmp	r0, #0
 800690e:	d059      	beq.n	80069c4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006910:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006914:	3001      	adds	r0, #1
 8006916:	0680      	lsls	r0, r0, #26
 8006918:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8006920:	2d00      	cmp	r5, #0
 8006922:	d04d      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8006924:	fab5 f585 	clz	r5, r5
 8006928:	3501      	adds	r5, #1
 800692a:	f005 051f 	and.w	r5, r5, #31
 800692e:	2601      	movs	r6, #1
 8006930:	fa06 f505 	lsl.w	r5, r6, r5
 8006934:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006936:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800693a:	2a00      	cmp	r2, #0
 800693c:	d045      	beq.n	80069ca <HAL_ADC_ConfigChannel+0x4ce>
  return __builtin_clz(value);
 800693e:	fab2 f282 	clz	r2, r2
 8006942:	3201      	adds	r2, #1
 8006944:	f002 021f 	and.w	r2, r2, #31
 8006948:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800694c:	0512      	lsls	r2, r2, #20
 800694e:	e71f      	b.n	8006790 <HAL_ADC_ConfigChannel+0x294>
  MODIFY_REG(*preg,
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006956:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006958:	68c2      	ldr	r2, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800695a:	680a      	ldr	r2, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800695c:	f100 070c 	add.w	r7, r0, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006960:	68c0      	ldr	r0, [r0, #12]
 8006962:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006966:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800696a:	2d00      	cmp	r5, #0
 800696c:	d1c4      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x3fc>
 800696e:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8006972:	e6c3      	b.n	80066fc <HAL_ADC_ConfigChannel+0x200>
  MODIFY_REG(*preg,
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800697a:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800697c:	6882      	ldr	r2, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800697e:	680a      	ldr	r2, [r1, #0]
 8006980:	6886      	ldr	r6, [r0, #8]
 8006982:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006986:	f100 0708 	add.w	r7, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800698a:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800698e:	2d00      	cmp	r5, #0
 8006990:	d1a5      	bne.n	80068de <HAL_ADC_ConfigChannel+0x3e2>
 8006992:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8006996:	e6a8      	b.n	80066ea <HAL_ADC_ConfigChannel+0x1ee>
  MODIFY_REG(*preg,
 8006998:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800699a:	4620      	mov	r0, r4
 800699c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069a0:	f840 2f60 	str.w	r2, [r0, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069a6:	680a      	ldr	r2, [r1, #0]
 80069a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80069aa:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069ae:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80069b2:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	d184      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x3c8>
 80069ba:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80069be:	e68b      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x1dc>
 80069c0:	2502      	movs	r5, #2
 80069c2:	e7b7      	b.n	8006934 <HAL_ADC_ConfigChannel+0x438>
 80069c4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80069c8:	e7a8      	b.n	800691c <HAL_ADC_ConfigChannel+0x420>
 80069ca:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80069ce:	e6df      	b.n	8006790 <HAL_ADC_ConfigChannel+0x294>
 80069d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80069d4:	e6bc      	b.n	8006750 <HAL_ADC_ConfigChannel+0x254>
 80069d6:	2200      	movs	r2, #0
 80069d8:	f6cf 6250 	movt	r2, #65104	; 0xfe50
 80069dc:	e6d8      	b.n	8006790 <HAL_ADC_ConfigChannel+0x294>
 80069de:	2502      	movs	r5, #2
 80069e0:	e6c3      	b.n	800676a <HAL_ADC_ConfigChannel+0x26e>
 80069e2:	bf00      	nop

080069e4 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	07d2      	lsls	r2, r2, #31
 80069ea:	d501      	bpl.n	80069f0 <ADC_Enable+0xc>
  return HAL_OK;
 80069ec:	2000      	movs	r0, #0
}
 80069ee:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069f0:	6899      	ldr	r1, [r3, #8]
 80069f2:	223f      	movs	r2, #63	; 0x3f
 80069f4:	f2c8 0200 	movt	r2, #32768	; 0x8000
 80069f8:	4211      	tst	r1, r2
{
 80069fa:	b570      	push	{r4, r5, r6, lr}
 80069fc:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069fe:	d008      	beq.n	8006a12 <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a00:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006a02:	f043 0310 	orr.w	r3, r3, #16
 8006a06:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a08:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8006a0a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a0c:	4303      	orrs	r3, r0
 8006a0e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	f64f 75c0 	movw	r5, #65472	; 0xffc0
 8006a18:	f6c7 75ff 	movt	r5, #32767	; 0x7fff
 8006a1c:	402a      	ands	r2, r5
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006a24:	f7ff face 	bl	8005fc4 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a28:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006a2a:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	07d0      	lsls	r0, r2, #31
 8006a30:	d413      	bmi.n	8006a5a <ADC_Enable+0x76>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	07d1      	lsls	r1, r2, #31
 8006a36:	d404      	bmi.n	8006a42 <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	402a      	ands	r2, r5
 8006a3c:	f042 0201 	orr.w	r2, r2, #1
 8006a40:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a42:	f7ff fabf 	bl	8005fc4 <HAL_GetTick>
 8006a46:	1b03      	subs	r3, r0, r4
 8006a48:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a4a:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a4c:	d9ee      	bls.n	8006a2c <ADC_Enable+0x48>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	07d2      	lsls	r2, r2, #31
 8006a52:	d5d5      	bpl.n	8006a00 <ADC_Enable+0x1c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	07d0      	lsls	r0, r2, #31
 8006a58:	d5eb      	bpl.n	8006a32 <ADC_Enable+0x4e>
  return HAL_OK;
 8006a5a:	2000      	movs	r0, #0
}
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	bf00      	nop

08006a60 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a64:	f2c5 0300 	movt	r3, #20480	; 0x5000
{
 8006a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6c:	f8d3 8008 	ldr.w	r8, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a70:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a72:	689d      	ldr	r5, [r3, #8]
 8006a74:	f015 0504 	ands.w	r5, r5, #4
 8006a78:	d116      	bne.n	8006aa8 <HAL_ADC_Start_DMA+0x48>
    __HAL_LOCK(hadc);
 8006a7a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	4604      	mov	r4, r0
 8006a82:	d011      	beq.n	8006aa8 <HAL_ADC_Start_DMA+0x48>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006a84:	f008 081f 	and.w	r8, r8, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006a88:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 8006a8c:	f04f 0c01 	mov.w	ip, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006a90:	fa23 f308 	lsr.w	r3, r3, r8
 8006a94:	ea13 030c 	ands.w	r3, r3, ip
    __HAL_LOCK(hadc);
 8006a98:	f880 c058 	strb.w	ip, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006a9c:	d107      	bne.n	8006aae <HAL_ADC_Start_DMA+0x4e>
      __HAL_UNLOCK(hadc);
 8006a9e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8006aa2:	4660      	mov	r0, ip
}
 8006aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8006aa8:	2002      	movs	r0, #2
}
 8006aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8006aae:	460e      	mov	r6, r1
 8006ab0:	4617      	mov	r7, r2
 8006ab2:	f7ff ff97 	bl	80069e4 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d148      	bne.n	8006b4c <HAL_ADC_Start_DMA+0xec>
        ADC_STATE_CLR_SET(hadc->State,
 8006aba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006abc:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8006abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aca:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad0:	f2c5 0300 	movt	r3, #20480	; 0x5000
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	d03d      	beq.n	8006b54 <HAL_ADC_Start_DMA+0xf4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ad8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ade:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ae0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ae4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006ae8:	bf18      	it	ne
 8006aea:	6e23      	ldrne	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006aec:	f246 4575 	movw	r5, #25717	; 0x6475
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006af0:	bf18      	it	ne
 8006af2:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006af6:	f6c0 0500 	movt	r5, #2048	; 0x800
          ADC_CLEAR_ERRORCODE(hadc);
 8006afa:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006afc:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006afe:	f246 2509 	movw	r5, #25097	; 0x6209
 8006b02:	f6c0 0500 	movt	r5, #2048	; 0x800
 8006b06:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b08:	f246 45e1 	movw	r5, #25825	; 0x64e1
 8006b0c:	f6c0 0500 	movt	r5, #2048	; 0x800
 8006b10:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b12:	251c      	movs	r5, #28
 8006b14:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006b16:	2500      	movs	r5, #0
 8006b18:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b1c:	684d      	ldr	r5, [r1, #4]
 8006b1e:	f045 0510 	orr.w	r5, r5, #16
 8006b22:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b24:	68cd      	ldr	r5, [r1, #12]
 8006b26:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b2e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b30:	3140      	adds	r1, #64	; 0x40
 8006b32:	f000 fb23 	bl	800717c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b36:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006b38:	6893      	ldr	r3, [r2, #8]
 8006b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	6093      	str	r3, [r2, #8]
}
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006b4c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b54:	f1b8 0f00 	cmp.w	r8, #0
 8006b58:	d0be      	beq.n	8006ad8 <HAL_ADC_Start_DMA+0x78>
 8006b5a:	e7c1      	b.n	8006ae0 <HAL_ADC_Start_DMA+0x80>

08006b5c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop

08006b64 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <HAL_ADCEx_EndOfSamplingCallback>:
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop

08006b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006b70:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b72:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b76:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8006b78:	2a01      	cmp	r2, #1
{
 8006b7a:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8006b7c:	d04e      	beq.n	8006c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b7e:	6804      	ldr	r4, [r0, #0]
 8006b80:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006b82:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006b84:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b86:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006b8a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006b8c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006b90:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006b92:	d007      	beq.n	8006ba4 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b94:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b9a:	f041 0120 	orr.w	r1, r1, #32
 8006b9e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006ba0:	b01c      	add	sp, #112	; 0x70
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ba4:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006ba8:	f2c5 0c00 	movt	ip, #20480	; 0x5000
 8006bac:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006bb0:	0752      	lsls	r2, r2, #29
 8006bb2:	d50a      	bpl.n	8006bca <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8006bb4:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bb8:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bbe:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006bc6:	b01c      	add	sp, #112	; 0x70
 8006bc8:	bd70      	pop	{r4, r5, r6, pc}
 8006bca:	68a0      	ldr	r0, [r4, #8]
 8006bcc:	f010 0004 	ands.w	r0, r0, #4
 8006bd0:	d1f1      	bne.n	8006bb6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bd2:	b335      	cbz	r5, 8006c22 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006bd4:	f44f 7e40 	mov.w	lr, #768	; 0x300
 8006bd8:	f2c5 0e00 	movt	lr, #20480	; 0x5000
 8006bdc:	684e      	ldr	r6, [r1, #4]
 8006bde:	f8de 2008 	ldr.w	r2, [lr, #8]
 8006be2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006be6:	4332      	orrs	r2, r6
 8006be8:	f893 6038 	ldrb.w	r6, [r3, #56]	; 0x38
 8006bec:	ea42 3246 	orr.w	r2, r2, r6, lsl #13
 8006bf0:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bf4:	68a2      	ldr	r2, [r4, #8]
 8006bf6:	07d4      	lsls	r4, r2, #31
 8006bf8:	d42b      	bmi.n	8006c52 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8006bfa:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006bfe:	f010 0001 	ands.w	r0, r0, #1
 8006c02:	d11d      	bne.n	8006c40 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
        MODIFY_REG(tmpADC_Common->CCR,
 8006c04:	688a      	ldr	r2, [r1, #8]
 8006c06:	f8de 1008 	ldr.w	r1, [lr, #8]
 8006c0a:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006c0e:	432a      	orrs	r2, r5
 8006c10:	f021 010f 	bic.w	r1, r1, #15
 8006c14:	430a      	orrs	r2, r1
 8006c16:	f8ce 2008 	str.w	r2, [lr, #8]
 8006c1a:	e7d1      	b.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
  __HAL_LOCK(hadc);
 8006c1c:	2002      	movs	r0, #2
}
 8006c1e:	b01c      	add	sp, #112	; 0x70
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006c26:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8006c2a:	6891      	ldr	r1, [r2, #8]
 8006c2c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006c30:	6091      	str	r1, [r2, #8]
 8006c32:	68a1      	ldr	r1, [r4, #8]
 8006c34:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006c38:	4308      	orrs	r0, r1
 8006c3a:	f010 0001 	ands.w	r0, r0, #1
 8006c3e:	d001      	beq.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c40:	2000      	movs	r0, #0
 8006c42:	e7bd      	b.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c44:	6891      	ldr	r1, [r2, #8]
 8006c46:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006c4a:	f021 010f 	bic.w	r1, r1, #15
 8006c4e:	6091      	str	r1, [r2, #8]
 8006c50:	e7b6      	b.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8006c52:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8006c56:	e7b3      	b.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x50>

08006c58 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006c58:	b1b0      	cbz	r0, 8006c88 <HAL_CORDIC_Init+0x30>
{
 8006c5a:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006c5c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006c60:	4604      	mov	r4, r0
 8006c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c66:	b153      	cbz	r3, 8006c7e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006c68:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006c6a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006c6c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006c6e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8006c72:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8006c76:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006c7a:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006c7c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8006c7e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006c82:	f7fe fa47 	bl	8005114 <HAL_CORDIC_MspInit>
 8006c86:	e7ef      	b.n	8006c68 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006c88:	2001      	movs	r0, #1
}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c8c:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006c90:	f2ce 0200 	movt	r2, #57344	; 0xe000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c94:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c96:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c98:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ca0:	4001      	ands	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ca2:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8006ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006cac:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006cae:	4770      	bx	lr

08006cb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cb0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006cb4:	f2ce 0300 	movt	r3, #57344	; 0xe000
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb8:	b500      	push	{lr}
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cc0:	f1c3 0e07 	rsb	lr, r3, #7
 8006cc4:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cc8:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ccc:	bf28      	it	cs
 8006cce:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd2:	f1bc 0f06 	cmp.w	ip, #6
 8006cd6:	d91b      	bls.n	8006d10 <HAL_NVIC_SetPriority+0x60>
 8006cd8:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cda:	f04f 3cff 	mov.w	ip, #4294967295
 8006cde:	fa0c fc03 	lsl.w	ip, ip, r3
 8006ce2:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce6:	f04f 3cff 	mov.w	ip, #4294967295
 8006cea:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006cee:	ea21 010c 	bic.w	r1, r1, ip
 8006cf2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006cf4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006cfa:	db0c      	blt.n	8006d16 <HAL_NVIC_SetPriority+0x66>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006d00:	0109      	lsls	r1, r1, #4
 8006d02:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006d06:	b2c9      	uxtb	r1, r1
 8006d08:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d10:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d12:	4613      	mov	r3, r2
 8006d14:	e7e7      	b.n	8006ce6 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d16:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8006d1a:	f000 000f 	and.w	r0, r0, #15
 8006d1e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006d22:	0109      	lsls	r1, r1, #4
 8006d24:	4403      	add	r3, r0
 8006d26:	b2c9      	uxtb	r1, r1
 8006d28:	7619      	strb	r1, [r3, #24]
 8006d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d2e:	bf00      	nop

08006d30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d30:	2800      	cmp	r0, #0
 8006d32:	db0a      	blt.n	8006d4a <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d34:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006d38:	0941      	lsrs	r1, r0, #5
 8006d3a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006d3e:	f000 001f 	and.w	r0, r0, #31
 8006d42:	2301      	movs	r3, #1
 8006d44:	4083      	lsls	r3, r0
 8006d46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d4a:	4770      	bx	lr

08006d4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d4c:	3801      	subs	r0, #1
 8006d4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006d52:	d213      	bcs.n	8006d7c <HAL_SYSTICK_Config+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d54:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d5c:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8006d60:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d64:	b410      	push	{r4}
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d66:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d68:	6158      	str	r0, [r3, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d6a:	2407      	movs	r4, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d6c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d70:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d72:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d74:	611c      	str	r4, [r3, #16]
   return SysTick_Config(TicksNumb);
}
 8006d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	4770      	bx	lr

08006d80 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006d80:	b188      	cbz	r0, 8006da6 <HAL_DAC_Init+0x26>
{
 8006d82:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006d84:	7903      	ldrb	r3, [r0, #4]
 8006d86:	4604      	mov	r4, r0
 8006d88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d8c:	b13b      	cbz	r3, 8006d9e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006d8e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d90:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006d92:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006d94:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006d96:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006d98:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006d9a:	4618      	mov	r0, r3
}
 8006d9c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006d9e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006da0:	f7fe fa02 	bl	80051a8 <HAL_DAC_MspInit>
 8006da4:	e7f3      	b.n	8006d8e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006da6:	2001      	movs	r0, #1
}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006dae:	7943      	ldrb	r3, [r0, #5]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d02e      	beq.n	8006e12 <HAL_DAC_Start+0x66>
 8006db4:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006db6:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006db8:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dba:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	f005 0710 	and.w	r7, r5, #16
 8006dc6:	6811      	ldr	r1, [r2, #0]
 8006dc8:	fa00 f307 	lsl.w	r3, r0, r7
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006dd0:	f7ff f8fe 	bl	8005fd0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006dd4:	6822      	ldr	r2, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8006dd6:	b96d      	cbnz	r5, 8006df4 <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006dd8:	6813      	ldr	r3, [r2, #0]
 8006dda:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006dde:	42b3      	cmp	r3, r6
 8006de0:	d103      	bne.n	8006dea <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006de2:	6853      	ldr	r3, [r2, #4]
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006dea:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006dec:	2301      	movs	r3, #1
 8006dee:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006df0:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	40be      	lsls	r6, r7
 8006df8:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 8006dfc:	42b3      	cmp	r3, r6
 8006dfe:	d1f4      	bne.n	8006dea <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006e00:	6853      	ldr	r3, [r2, #4]
 8006e02:	f043 0302 	orr.w	r3, r3, #2
 8006e06:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 8006e08:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8006e0e:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8006e10:	e7ef      	b.n	8006df2 <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 8006e12:	2002      	movs	r0, #2
}
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e16:	bf00      	nop

08006e18 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006e18:	b410      	push	{r4}
 8006e1a:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006e1c:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 8006e1e:	2400      	movs	r4, #0
 8006e20:	9401      	str	r4, [sp, #4]
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006e22:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006e24:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8006e26:	b951      	cbnz	r1, 8006e3e <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006e28:	9901      	ldr	r1, [sp, #4]
 8006e2a:	3108      	adds	r1, #8
 8006e2c:	440a      	add	r2, r1
 8006e2e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006e30:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8006e32:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8006e34:	6013      	str	r3, [r2, #0]
}
 8006e36:	b003      	add	sp, #12
 8006e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e3c:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006e3e:	9901      	ldr	r1, [sp, #4]
 8006e40:	3114      	adds	r1, #20
 8006e42:	440a      	add	r2, r1
 8006e44:	9201      	str	r2, [sp, #4]
 8006e46:	e7f3      	b.n	8006e30 <HAL_DAC_SetValue+0x18>

08006e48 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006e48:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006e4a:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	f000 80d3 	beq.w	8006ffa <HAL_DAC_ConfigChannel+0x1b2>
 8006e54:	2301      	movs	r3, #1
{
 8006e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e5a:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 8006e5e:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e60:	f04f 0302 	mov.w	r3, #2
 8006e64:	4605      	mov	r5, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	4616      	mov	r6, r2
 8006e6a:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e6c:	d07d      	beq.n	8006f6a <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006e6e:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e70:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d108      	bne.n	8006e8c <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8006e7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e7e:	211f      	movs	r1, #31
 8006e80:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e82:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e84:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e88:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006e8a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e8c:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8006e8e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006e90:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e92:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006e94:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e98:	d063      	beq.n	8006f62 <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006e9a:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	bf16      	itet	ne
 8006ea0:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8006ea4:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006ea8:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006eac:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006eae:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006eb2:	f1a4 0401 	sub.w	r4, r4, #1
 8006eb6:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006eba:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ebe:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006ec0:	fab8 f888 	clz	r8, r8
 8006ec4:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ec8:	0264      	lsls	r4, r4, #9
 8006eca:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 8006ece:	ea44 040c 	orr.w	r4, r4, ip
 8006ed2:	ea44 040e 	orr.w	r4, r4, lr
 8006ed6:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006edc:	40b2      	lsls	r2, r6
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee8:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006eea:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006ef2:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006ef6:	d074      	beq.n	8006fe2 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006ef8:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006efc:	40b4      	lsls	r4, r6
 8006efe:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006f02:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006f04:	6803      	ldr	r3, [r0, #0]
 8006f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f0a:	40b2      	lsls	r2, r6
 8006f0c:	ea23 0302 	bic.w	r3, r3, r2
 8006f10:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006f12:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8006f16:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006f18:	f640 71fe 	movw	r1, #4094	; 0xffe
 8006f1c:	40b1      	lsls	r1, r6
 8006f1e:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f22:	fa02 f106 	lsl.w	r1, r2, r6
 8006f26:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006f28:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 8006f2a:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006f2c:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006f30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f34:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f36:	24c0      	movs	r4, #192	; 0xc0
 8006f38:	6802      	ldr	r2, [r0, #0]
 8006f3a:	40b4      	lsls	r4, r6
 8006f3c:	ea22 0204 	bic.w	r2, r2, r4
 8006f40:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f42:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006f44:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006f48:	40b1      	lsls	r1, r6
 8006f4a:	ea22 0201 	bic.w	r2, r2, r1
 8006f4e:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f50:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f52:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8006f54:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f56:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8006f58:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006f5a:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8006f5c:	7169      	strb	r1, [r5, #5]
}
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f62:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 8006f64:	f04f 0e00 	mov.w	lr, #0
 8006f68:	e7a0      	b.n	8006eac <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 8006f6a:	f7ff f82b 	bl	8005fc4 <HAL_GetTick>
 8006f6e:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 8006f70:	b12e      	cbz	r6, 8006f7e <HAL_DAC_ConfigChannel+0x136>
 8006f72:	e014      	b.n	8006f9e <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f74:	f7ff f826 	bl	8005fc4 <HAL_GetTick>
 8006f78:	1b03      	subs	r3, r0, r4
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d83f      	bhi.n	8006ffe <HAL_DAC_ConfigChannel+0x1b6>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	041b      	lsls	r3, r3, #16
 8006f84:	d4f6      	bmi.n	8006f74 <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 8006f86:	2001      	movs	r0, #1
 8006f88:	f7ff f822 	bl	8005fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f8c:	6828      	ldr	r0, [r5, #0]
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	6403      	str	r3, [r0, #64]	; 0x40
 8006f92:	e00e      	b.n	8006fb2 <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f94:	f7ff f816 	bl	8005fc4 <HAL_GetTick>
 8006f98:	1b03      	subs	r3, r0, r4
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d82f      	bhi.n	8006ffe <HAL_DAC_ConfigChannel+0x1b6>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dbf6      	blt.n	8006f94 <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	f7ff f812 	bl	8005fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fac:	6828      	ldr	r0, [r5, #0]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006fb2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006fb6:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006fba:	f006 0610 	and.w	r6, r6, #16
 8006fbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006fc2:	40b1      	lsls	r1, r6
 8006fc4:	40b2      	lsls	r2, r6
 8006fc6:	ea23 0301 	bic.w	r3, r3, r1
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006fce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd2:	21ff      	movs	r1, #255	; 0xff
 8006fd4:	40b1      	lsls	r1, r6
 8006fd6:	40b2      	lsls	r2, r6
 8006fd8:	ea23 0301 	bic.w	r3, r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006fe0:	e748      	b.n	8006e74 <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006fe2:	f001 fd01 	bl	80089e8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006fe6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006fea:	f6c0 1389 	movt	r3, #2441	; 0x989
 8006fee:	4298      	cmp	r0, r3
 8006ff0:	d90d      	bls.n	800700e <HAL_DAC_ConfigChannel+0x1c6>
  hdac->Instance->MCR = tmpreg1;
 8006ff2:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006ff4:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8006ff8:	e780      	b.n	8006efc <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 8006ffa:	2002      	movs	r0, #2
}
 8006ffc:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ffe:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007000:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007002:	f043 0308 	orr.w	r3, r3, #8
 8007006:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8007008:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800700a:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 800700c:	e7a7      	b.n	8006f5e <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800700e:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8007012:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
 8007016:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007018:	bf88      	it	hi
 800701a:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800701e:	6828      	ldr	r0, [r5, #0]
 8007020:	e76c      	b.n	8006efc <HAL_DAC_ConfigChannel+0xb4>
 8007022:	bf00      	nop

08007024 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007024:	2800      	cmp	r0, #0
 8007026:	f000 80a7 	beq.w	8007178 <HAL_DMA_Init+0x154>
{
 800702a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800702c:	f240 4307 	movw	r3, #1031	; 0x407
 8007030:	6804      	ldr	r4, [r0, #0]
 8007032:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007036:	429c      	cmp	r4, r3
 8007038:	f240 8082 	bls.w	8007140 <HAL_DMA_Init+0x11c>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800703c:	f64f 32f8 	movw	r2, #64504	; 0xfbf8
 8007040:	f6cb 72fd 	movt	r2, #49149	; 0xbffd
 8007044:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8007048:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800704c:	4422      	add	r2, r4
 800704e:	fba3 3202 	umull	r3, r2, r3, r2
 8007052:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA2;
 8007054:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007058:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
 800705a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800705e:	e9c0 3210 	strd	r3, r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007062:	6885      	ldr	r5, [r0, #8]
 8007064:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007066:	69c6      	ldr	r6, [r0, #28]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007068:	2102      	movs	r1, #2
 800706a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800706e:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8007070:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007072:	430b      	orrs	r3, r1
 8007074:	6941      	ldr	r1, [r0, #20]
 8007076:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007078:	6981      	ldr	r1, [r0, #24]
 800707a:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 800707c:	6821      	ldr	r1, [r4, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800707e:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 8007080:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007082:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007086:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800708a:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 800708c:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800708e:	6023      	str	r3, [r4, #0]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007090:	fa5f fc84 	uxtb.w	ip, r4
 8007094:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007098:	f240 4107 	movw	r1, #1031	; 0x407
 800709c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80070a0:	f44f 6302 	mov.w	r3, #2080	; 0x820
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070a4:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070a8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80070ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070b0:	f1ac 0c08 	sub.w	ip, ip, #8
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070b4:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80070b8:	428c      	cmp	r4, r1
 80070ba:	bf94      	ite	ls
 80070bc:	463e      	movls	r6, r7
 80070be:	461e      	movhi	r6, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070c0:	fbae ec0c 	umull	lr, ip, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070c4:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80070c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070cc:	f3cc 1c04 	ubfx	ip, ip, #4, #5
 80070d0:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070d4:	1991      	adds	r1, r2, r6
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070d6:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070d8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070dc:	fa0e f30c 	lsl.w	r3, lr, ip
 80070e0:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070e2:	6481      	str	r1, [r0, #72]	; 0x48
 80070e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070e8:	d03b      	beq.n	8007162 <HAL_DMA_Init+0x13e>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070ea:	6844      	ldr	r4, [r0, #4]
 80070ec:	b2e1      	uxtb	r1, r4
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070ee:	3c01      	subs	r4, #1
 80070f0:	2c03      	cmp	r4, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070f2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070fa:	d838      	bhi.n	800716e <HAL_DMA_Init+0x14a>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070fc:	f248 223f 	movw	r2, #33343	; 0x823f
 8007100:	f2c1 0200 	movt	r2, #4096	; 0x1000
 8007104:	440a      	add	r2, r1

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007106:	3901      	subs	r1, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007108:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800710a:	f001 011f 	and.w	r1, r1, #31
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800710e:	f44f 6414 	mov.w	r4, #2368	; 0x940
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007112:	fa0e f301 	lsl.w	r3, lr, r1
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007116:	f2c4 0402 	movt	r4, #16386	; 0x4002
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800711a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800711c:	e9c0 2415 	strd	r2, r4, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007120:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007122:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007124:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007128:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800712c:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8007130:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007132:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8007134:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8007138:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 800713c:	4618      	mov	r0, r3
}
 800713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007140:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8007144:	f6cb 72fd 	movt	r2, #49149	; 0xbffd
 8007148:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800714c:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8007150:	4422      	add	r2, r4
 8007152:	fba3 3202 	umull	r3, r2, r3, r2
 8007156:	0912      	lsrs	r2, r2, #4
    hdma->DmaBaseAddress = DMA1;
 8007158:	2300      	movs	r3, #0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800715a:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800715c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007160:	e77d      	b.n	800705e <HAL_DMA_Init+0x3a>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007162:	2100      	movs	r1, #0
 8007164:	6041      	str	r1, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007166:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800716a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 800716e:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8007170:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007174:	65c3      	str	r3, [r0, #92]	; 0x5c
 8007176:	e7da      	b.n	800712e <HAL_DMA_Init+0x10a>
    return HAL_ERROR;
 8007178:	2001      	movs	r0, #1
}
 800717a:	4770      	bx	lr

0800717c <HAL_DMA_Start_IT>:
{
 800717c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800717e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8007182:	2c01      	cmp	r4, #1
 8007184:	d051      	beq.n	800722a <HAL_DMA_Start_IT+0xae>
 8007186:	2401      	movs	r4, #1
 8007188:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800718c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8007190:	2c01      	cmp	r4, #1
 8007192:	d005      	beq.n	80071a0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8007194:	2300      	movs	r3, #0
 8007196:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800719a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800719c:	2002      	movs	r0, #2
}
 800719e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80071a0:	2402      	movs	r4, #2
 80071a2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071a6:	2400      	movs	r4, #0
 80071a8:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80071aa:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071ac:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 80071ae:	6825      	ldr	r5, [r4, #0]
 80071b0:	f025 0501 	bic.w	r5, r5, #1
 80071b4:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b6:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 80071ba:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80071bc:	b115      	cbz	r5, 80071c4 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071be:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 80071c2:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071c4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80071c6:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80071c8:	f006 0c1f 	and.w	ip, r6, #31
 80071cc:	2601      	movs	r6, #1
 80071ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80071d2:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80071d4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071d6:	6883      	ldr	r3, [r0, #8]
 80071d8:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80071da:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 80071dc:	bf0b      	itete	eq
 80071de:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80071e0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80071e2:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80071e4:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80071e6:	b1bb      	cbz	r3, 8007218 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f043 030e 	orr.w	r3, r3, #14
 80071ee:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80071f0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	03d2      	lsls	r2, r2, #15
 80071f6:	d503      	bpl.n	8007200 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071fe:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8007200:	b11d      	cbz	r5, 800720a <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007208:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007212:	6023      	str	r3, [r4, #0]
}
 8007214:	bcf0      	pop	{r4, r5, r6, r7}
 8007216:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	f023 0304 	bic.w	r3, r3, #4
 800721e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	f043 030a 	orr.w	r3, r3, #10
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	e7e2      	b.n	80071f0 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 800722a:	2002      	movs	r0, #2
}
 800722c:	bcf0      	pop	{r4, r5, r6, r7}
 800722e:	4770      	bx	lr

08007230 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007230:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8007234:	2a02      	cmp	r2, #2
{
 8007236:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007238:	d009      	beq.n	800724e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800723a:	2204      	movs	r2, #4
 800723c:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800723e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8007240:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8007242:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8007244:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8007248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800724c:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800724e:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007250:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8007252:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007254:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007256:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007258:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800725a:	f020 000e 	bic.w	r0, r0, #14
 800725e:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8007266:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8007268:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800726a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 800726c:	f020 0001 	bic.w	r0, r0, #1
 8007270:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007272:	f001 011f 	and.w	r1, r1, #31
 8007276:	2201      	movs	r2, #1
 8007278:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800727a:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800727e:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007280:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8007282:	b138      	cbz	r0, 8007294 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007284:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007286:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800728a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800728e:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007290:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007294:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8007296:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007298:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800729c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80072a0:	bc30      	pop	{r4, r5}
 80072a2:	4770      	bx	lr

080072a4 <HAL_DMA_Abort_IT>:
{
 80072a4:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80072a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d009      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 80072ae:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b0:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80072b2:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b4:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80072b6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80072ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 80072be:	4618      	mov	r0, r3
}
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072c2:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072c4:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072c6:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072ca:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072cc:	f021 010e 	bic.w	r1, r1, #14
 80072d0:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	f021 0101 	bic.w	r1, r1, #1
 80072d8:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072da:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072dc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072e4:	f002 021f 	and.w	r2, r2, #31
 80072e8:	2301      	movs	r3, #1
 80072ea:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ec:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072f0:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f2:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80072f4:	b132      	cbz	r2, 8007304 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072f6:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072f8:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007300:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007302:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8007304:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007306:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8007308:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800730a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800730e:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8007312:	b113      	cbz	r3, 800731a <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8007314:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	4620      	mov	r0, r4
}
 8007318:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	4618      	mov	r0, r3
}
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	bf00      	nop

08007320 <HAL_DMA_IRQHandler>:
{
 8007320:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007322:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007324:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8007326:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007328:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800732a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2204      	movs	r2, #4
 8007332:	409a      	lsls	r2, r3
 8007334:	420a      	tst	r2, r1
 8007336:	d00e      	beq.n	8007356 <HAL_DMA_IRQHandler+0x36>
 8007338:	f014 0f04 	tst.w	r4, #4
 800733c:	d00b      	beq.n	8007356 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	069b      	lsls	r3, r3, #26
 8007342:	d403      	bmi.n	800734c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	f023 0304 	bic.w	r3, r3, #4
 800734a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800734c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800734e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8007350:	b1cb      	cbz	r3, 8007386 <HAL_DMA_IRQHandler+0x66>
}
 8007352:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007354:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007356:	2202      	movs	r2, #2
 8007358:	409a      	lsls	r2, r3
 800735a:	420a      	tst	r2, r1
 800735c:	d015      	beq.n	800738a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800735e:	f014 0f02 	tst.w	r4, #2
 8007362:	d012      	beq.n	800738a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	0699      	lsls	r1, r3, #26
 8007368:	d406      	bmi.n	8007378 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	f023 030a 	bic.w	r3, r3, #10
 8007370:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007372:	2301      	movs	r3, #1
 8007374:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8007378:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800737a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 800737c:	2100      	movs	r1, #0
 800737e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <HAL_DMA_IRQHandler+0x32>
}
 8007386:	bc70      	pop	{r4, r5, r6}
 8007388:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800738a:	2208      	movs	r2, #8
 800738c:	409a      	lsls	r2, r3
 800738e:	420a      	tst	r2, r1
 8007390:	d0f9      	beq.n	8007386 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8007392:	0722      	lsls	r2, r4, #28
 8007394:	d5f7      	bpl.n	8007386 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007396:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8007398:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800739a:	f022 020e 	bic.w	r2, r2, #14
 800739e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073a0:	2201      	movs	r2, #1
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80073a6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073a8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073aa:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80073ac:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80073b0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d0e6      	beq.n	8007386 <HAL_DMA_IRQHandler+0x66>
}
 80073b8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80073ba:	4708      	bx	r1

080073bc <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80073bc:	2800      	cmp	r0, #0
 80073be:	f000 80f2 	beq.w	80075a6 <HAL_FDCAN_Init+0x1ea>
{
 80073c2:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80073c4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80073c8:	4604      	mov	r4, r0
 80073ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d075      	beq.n	80074be <HAL_FDCAN_Init+0x102>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	6993      	ldr	r3, [r2, #24]
 80073d6:	f023 0310 	bic.w	r3, r3, #16
 80073da:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073dc:	f7fe fdf2 	bl	8005fc4 <HAL_GetTick>
 80073e0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80073e2:	e004      	b.n	80073ee <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80073e4:	f7fe fdee 	bl	8005fc4 <HAL_GetTick>
 80073e8:	1b43      	subs	r3, r0, r5
 80073ea:	2b0a      	cmp	r3, #10
 80073ec:	d85e      	bhi.n	80074ac <HAL_FDCAN_Init+0xf0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	0711      	lsls	r1, r2, #28
 80073f4:	d4f6      	bmi.n	80073e4 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
 80073fc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073fe:	f7fe fde1 	bl	8005fc4 <HAL_GetTick>
 8007402:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007404:	e004      	b.n	8007410 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007406:	f7fe fddd 	bl	8005fc4 <HAL_GetTick>
 800740a:	1b40      	subs	r0, r0, r5
 800740c:	280a      	cmp	r0, #10
 800740e:	d84d      	bhi.n	80074ac <HAL_FDCAN_Init+0xf0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	07d2      	lsls	r2, r2, #31
 8007416:	d5f6      	bpl.n	8007406 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007418:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800741a:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 800741e:	f2c4 0100 	movt	r1, #16384	; 0x4000
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007422:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8007426:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007428:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 800742a:	f000 80b4 	beq.w	8007596 <HAL_FDCAN_Init+0x1da>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800742e:	7c22      	ldrb	r2, [r4, #16]
 8007430:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007432:	699a      	ldr	r2, [r3, #24]
 8007434:	bf0c      	ite	eq
 8007436:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800743a:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800743e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007440:	7c62      	ldrb	r2, [r4, #17]
 8007442:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	bf0c      	ite	eq
 8007448:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800744c:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8007450:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007452:	7ca2      	ldrb	r2, [r4, #18]
 8007454:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	bf0c      	ite	eq
 800745a:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800745e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007462:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007468:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800746a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800746e:	4302      	orrs	r2, r0
 8007470:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007478:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800747a:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800747c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800747e:	f022 0210 	bic.w	r2, r2, #16
 8007482:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007484:	d020      	beq.n	80074c8 <HAL_FDCAN_Init+0x10c>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007486:	b319      	cbz	r1, 80074d0 <HAL_FDCAN_Init+0x114>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007488:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800748a:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800748c:	f000 808d 	beq.w	80075aa <HAL_FDCAN_Init+0x1ee>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007494:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007496:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007498:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800749a:	f042 0210 	orr.w	r2, r2, #16
 800749e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074a0:	d116      	bne.n	80074d0 <HAL_FDCAN_Init+0x114>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	f042 0220 	orr.w	r2, r2, #32
 80074a8:	619a      	str	r2, [r3, #24]
 80074aa:	e011      	b.n	80074d0 <HAL_FDCAN_Init+0x114>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074ae:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074b0:	f043 0301 	orr.w	r3, r3, #1
 80074b4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074b6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80074ba:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80074be:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80074c2:	f7fd ff29 	bl	8005318 <HAL_FDCAN_MspInit>
 80074c6:	e784      	b.n	80073d2 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	f042 0204 	orr.w	r2, r2, #4
 80074ce:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074d0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074d4:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074d6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074d8:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074da:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074de:	6a21      	ldr	r1, [r4, #32]
 80074e0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074e2:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80074e4:	6961      	ldr	r1, [r4, #20]
 80074e6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80074ec:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074f0:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80074f2:	d10e      	bne.n	8007512 <HAL_FDCAN_Init+0x156>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80074f4:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80074f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80074fa:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80074fc:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80074fe:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007500:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007502:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007506:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800750a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800750c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007510:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007512:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007516:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007518:	6b61      	ldr	r1, [r4, #52]	; 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800751a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800751c:	4302      	orrs	r2, r0
 800751e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007522:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007526:	f44f 4024 	mov.w	r0, #41984	; 0xa400
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800752a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800752e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007532:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8007536:	6420      	str	r0, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800753c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007540:	f24a 4170 	movw	r1, #42096	; 0xa470
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007548:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800754c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007550:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007556:	f24a 41b0 	movw	r1, #42160	; 0xa4b0

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800755a:	f24a 5388 	movw	r3, #42376	; 0xa588
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800755e:	f2c4 0100 	movt	r1, #16384	; 0x4000
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007562:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007566:	e9c4 1312 	strd	r1, r3, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800756a:	f24a 6260 	movw	r2, #42592	; 0xa660

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800756e:	f24a 6378 	movw	r3, #42616	; 0xa678
 8007572:	f2c4 0300 	movt	r3, #16384	; 0x4000
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007576:	f2c4 0200 	movt	r2, #16384	; 0x4000
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800757a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800757e:	2100      	movs	r1, #0
 8007580:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007584:	f004 fc34 	bl	800bdf0 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8007588:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800758a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800758c:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800758e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8007592:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8007594:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007596:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800759a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800759e:	6861      	ldr	r1, [r4, #4]
 80075a0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 80075a4:	e743      	b.n	800742e <HAL_FDCAN_Init+0x72>
    return HAL_ERROR;
 80075a6:	2001      	movs	r0, #1
}
 80075a8:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80075aa:	f042 0220 	orr.w	r2, r2, #32
 80075ae:	619a      	str	r2, [r3, #24]
 80075b0:	e78e      	b.n	80074d0 <HAL_FDCAN_Init+0x114>
 80075b2:	bf00      	nop

080075b4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80075b4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80075b8:	2a01      	cmp	r2, #1
{
 80075ba:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80075bc:	d005      	beq.n	80075ca <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80075be:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80075c0:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 80075c4:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80075c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075c8:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075ca:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075d2:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075d4:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 80075dc:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075de:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop

080075e4 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80075e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80075e6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80075ea:	2b02      	cmp	r3, #2
{
 80075ec:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80075ee:	d10c      	bne.n	800760a <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80075f0:	6805      	ldr	r5, [r0, #0]
 80075f2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 80075f6:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 80075fa:	d00d      	beq.n	8007618 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80075fc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80075fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8007602:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007604:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800760a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800760c:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8007610:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007612:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007616:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007618:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800761c:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800761e:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007622:	2b00      	cmp	r3, #0
 8007624:	d13c      	bne.n	80076a0 <HAL_FDCAN_AddMessageToTxFifoQ+0xbc>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8007626:	688b      	ldr	r3, [r1, #8]
 8007628:	690f      	ldr	r7, [r1, #16]
 800762a:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 800762c:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800762e:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007632:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8007636:	4303      	orrs	r3, r0
 8007638:	6948      	ldr	r0, [r1, #20]
 800763a:	6a0c      	ldr	r4, [r1, #32]
 800763c:	4303      	orrs	r3, r0
 800763e:	68c8      	ldr	r0, [r1, #12]
 8007640:	4303      	orrs	r3, r0
 8007642:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007646:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 800764a:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800764e:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007652:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007656:	f24f 1430 	movw	r4, #61744	; 0xf130
  *TxAddress = TxElementW2;
 800765a:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800765c:	89cb      	ldrh	r3, [r1, #14]
 800765e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8007662:	5ce3      	ldrb	r3, [r4, r3]
 8007664:	b1a3      	cbz	r3, 8007690 <HAL_FDCAN_AddMessageToTxFifoQ+0xac>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007666:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007668:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800766a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800766c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8007670:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007672:	433b      	orrs	r3, r7
 8007674:	7857      	ldrb	r7, [r2, #1]
 8007676:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800767a:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800767e:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007682:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007684:	89cb      	ldrh	r3, [r1, #14]
 8007686:	5ce3      	ldrb	r3, [r4, r3]
 8007688:	459c      	cmp	ip, r3
 800768a:	f102 0204 	add.w	r2, r2, #4
 800768e:	d3ea      	bcc.n	8007666 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007690:	2301      	movs	r3, #1
 8007692:	40b3      	lsls	r3, r6
 8007694:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8007698:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800769a:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 800769e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80076a0:	690b      	ldr	r3, [r1, #16]
 80076a2:	6808      	ldr	r0, [r1, #0]
 80076a4:	ea43 0700 	orr.w	r7, r3, r0
 80076a8:	688b      	ldr	r3, [r1, #8]
 80076aa:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80076ac:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 80076b0:	e7bf      	b.n	8007632 <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 80076b2:	bf00      	nop

080076b4 <HAL_FDCAN_GetRxMessage>:
{
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076b8:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 80076bc:	2802      	cmp	r0, #2
 80076be:	d10d      	bne.n	80076dc <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80076c0:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80076c2:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80076c6:	d00f      	beq.n	80076e8 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80076c8:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 80076cc:	0700      	lsls	r0, r0, #28
 80076ce:	d163      	bne.n	8007798 <HAL_FDCAN_GetRxMessage+0xe4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80076d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80076d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 80076d6:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80076d8:	6623      	str	r3, [r4, #96]	; 0x60
}
 80076da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80076de:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 80076e2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076e4:	6623      	str	r3, [r4, #96]	; 0x60
}
 80076e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80076e8:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 80076ec:	0705      	lsls	r5, r0, #28
 80076ee:	d0ef      	beq.n	80076d0 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80076f0:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80076f4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80076f6:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80076fa:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80076fe:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007702:	6828      	ldr	r0, [r5, #0]
 8007704:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8007708:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800770a:	2800      	cmp	r0, #0
 800770c:	d153      	bne.n	80077b6 <HAL_FDCAN_GetRxMessage+0x102>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800770e:	6828      	ldr	r0, [r5, #0]
 8007710:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8007714:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007716:	6828      	ldr	r0, [r5, #0]
 8007718:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800771c:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800771e:	6828      	ldr	r0, [r5, #0]
 8007720:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007724:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007726:	88a8      	ldrh	r0, [r5, #4]
 8007728:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800772a:	6868      	ldr	r0, [r5, #4]
 800772c:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8007730:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007732:	686e      	ldr	r6, [r5, #4]
 8007734:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8007738:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800773a:	686e      	ldr	r6, [r5, #4]
 800773c:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8007740:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007742:	79ee      	ldrb	r6, [r5, #7]
 8007744:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8007748:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800774a:	f24f 1630 	movw	r6, #61744	; 0xf130
 800774e:	0c00      	lsrs	r0, r0, #16
 8007750:	f6c0 0600 	movt	r6, #2048	; 0x800
 8007754:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007758:	6868      	ldr	r0, [r5, #4]
 800775a:	0fc0      	lsrs	r0, r0, #31
 800775c:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800775e:	f1be 0f00 	cmp.w	lr, #0
 8007762:	d011      	beq.n	8007788 <HAL_FDCAN_GetRxMessage+0xd4>
 8007764:	3b01      	subs	r3, #1
 8007766:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 800776a:	46f4      	mov	ip, lr
 800776c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8007770:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007774:	89d0      	ldrh	r0, [r2, #14]
 8007776:	f1ac 0c06 	sub.w	ip, ip, #6
 800777a:	5c30      	ldrb	r0, [r6, r0]
 800777c:	ebac 0c05 	sub.w	ip, ip, r5
 8007780:	4560      	cmp	r0, ip
 8007782:	d8f2      	bhi.n	800776a <HAL_FDCAN_GetRxMessage+0xb6>
 8007784:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007788:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 800778a:	bf0c      	ite	eq
 800778c:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8007790:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8007794:	2000      	movs	r0, #0
}
 8007796:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007798:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800779c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800779e:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80077a2:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 80077a6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80077aa:	6828      	ldr	r0, [r5, #0]
 80077ac:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 80077b0:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d0ab      	beq.n	800770e <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80077b6:	6828      	ldr	r0, [r5, #0]
 80077b8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80077bc:	e7aa      	b.n	8007714 <HAL_FDCAN_GetRxMessage+0x60>
 80077be:	bf00      	nop

080077c0 <HAL_FDCAN_ActivateNotification>:
{
 80077c0:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80077c2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80077c6:	3801      	subs	r0, #1
 80077c8:	2801      	cmp	r0, #1
 80077ca:	d905      	bls.n	80077d8 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80077cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077ce:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80077d2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80077d4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80077d6:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80077d8:	681b      	ldr	r3, [r3, #0]
{
 80077da:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80077dc:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 80077e0:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80077e2:	d03d      	beq.n	8007860 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80077e4:	07c4      	lsls	r4, r0, #31
 80077e6:	d43b      	bmi.n	8007860 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80077e8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 80077ea:	f044 0401 	orr.w	r4, r4, #1
 80077ee:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80077f0:	b1cd      	cbz	r5, 8007826 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80077f2:	07c5      	lsls	r5, r0, #31
 80077f4:	d517      	bpl.n	8007826 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80077f6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80077f8:	f040 0002 	orr.w	r0, r0, #2
 80077fc:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80077fe:	060c      	lsls	r4, r1, #24
 8007800:	d504      	bpl.n	800780c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007802:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007806:	4310      	orrs	r0, r2
 8007808:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800780c:	05c8      	lsls	r0, r1, #23
 800780e:	d504      	bpl.n	800781a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007810:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8007814:	4302      	orrs	r2, r0
 8007816:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800781a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800781c:	430a      	orrs	r2, r1
    return HAL_OK;
 800781e:	2000      	movs	r0, #0
}
 8007820:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007824:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007826:	f011 0f38 	tst.w	r1, #56	; 0x38
 800782a:	d001      	beq.n	8007830 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800782c:	0784      	lsls	r4, r0, #30
 800782e:	d4e2      	bmi.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
 8007830:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8007834:	d131      	bne.n	800789a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007836:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 800783a:	d001      	beq.n	8007840 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800783c:	0704      	lsls	r4, r0, #28
 800783e:	d4da      	bmi.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
 8007840:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8007844:	d001      	beq.n	800784a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007846:	06c5      	lsls	r5, r0, #27
 8007848:	d4d5      	bmi.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
 800784a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 800784e:	d001      	beq.n	8007854 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007850:	0684      	lsls	r4, r0, #26
 8007852:	d4d0      	bmi.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
 8007854:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8007858:	d0d1      	beq.n	80077fe <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800785a:	0645      	lsls	r5, r0, #25
 800785c:	d5cf      	bpl.n	80077fe <HAL_FDCAN_ActivateNotification+0x3e>
 800785e:	e7ca      	b.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007860:	f011 0f38 	tst.w	r1, #56	; 0x38
 8007864:	d001      	beq.n	800786a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007866:	0784      	lsls	r4, r0, #30
 8007868:	d5be      	bpl.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
 800786a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 800786e:	d117      	bne.n	80078a0 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007870:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8007874:	d001      	beq.n	800787a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007876:	0704      	lsls	r4, r0, #28
 8007878:	d5b6      	bpl.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
 800787a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 800787e:	d001      	beq.n	8007884 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007880:	06c4      	lsls	r4, r0, #27
 8007882:	d5b1      	bpl.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
 8007884:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8007888:	d001      	beq.n	800788e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800788a:	0684      	lsls	r4, r0, #26
 800788c:	d5ac      	bpl.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
 800788e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8007892:	d0ad      	beq.n	80077f0 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007894:	0644      	lsls	r4, r0, #25
 8007896:	d4ab      	bmi.n	80077f0 <HAL_FDCAN_ActivateNotification+0x30>
 8007898:	e7a6      	b.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800789a:	0745      	lsls	r5, r0, #29
 800789c:	d4ab      	bmi.n	80077f6 <HAL_FDCAN_ActivateNotification+0x36>
 800789e:	e7ca      	b.n	8007836 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80078a0:	0744      	lsls	r4, r0, #29
 80078a2:	d5a1      	bpl.n	80077e8 <HAL_FDCAN_ActivateNotification+0x28>
 80078a4:	e7e4      	b.n	8007870 <HAL_FDCAN_ActivateNotification+0xb0>
 80078a6:	bf00      	nop

080078a8 <HAL_FDCAN_TxEventFifoCallback>:
}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop

080078ac <HAL_FDCAN_RxFifo1Callback>:
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <HAL_FDCAN_TxFifoEmptyCallback>:
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop

080078b4 <HAL_FDCAN_TxBufferCompleteCallback>:
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop

080078b8 <HAL_FDCAN_TxBufferAbortCallback>:
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop

080078bc <HAL_FDCAN_TimestampWraparoundCallback>:
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop

080078c0 <HAL_FDCAN_TimeoutOccurredCallback>:
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <HAL_FDCAN_HighPriorityMessageCallback>:
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop

080078c8 <HAL_FDCAN_ErrorCallback>:
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop

080078cc <HAL_FDCAN_ErrorStatusCallback>:
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop

080078d0 <HAL_FDCAN_IRQHandler>:
{
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80078d4:	6803      	ldr	r3, [r0, #0]
 80078d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80078d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078da:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80078de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80078e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80078e2:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80078e4:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 80078e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80078ea:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80078ec:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 80078ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80078f0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 80078f2:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80078f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078f6:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80078f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078fa:	0652      	lsls	r2, r2, #25
{
 80078fc:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80078fe:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007902:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007906:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 800790a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 800790e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007912:	d502      	bpl.n	800791a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007916:	0651      	lsls	r1, r2, #25
 8007918:	d473      	bmi.n	8007a02 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800791a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800791c:	05d2      	lsls	r2, r2, #23
 800791e:	d502      	bpl.n	8007926 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007922:	05d0      	lsls	r0, r2, #23
 8007924:	d45d      	bmi.n	80079e2 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8007926:	f1b9 0f00 	cmp.w	r9, #0
 800792a:	d14a      	bne.n	80079c2 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 800792c:	f1b8 0f00 	cmp.w	r8, #0
 8007930:	d137      	bne.n	80079a2 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8007932:	2f00      	cmp	r7, #0
 8007934:	d13e      	bne.n	80079b4 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007938:	0591      	lsls	r1, r2, #22
 800793a:	d502      	bpl.n	8007942 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800793c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800793e:	0592      	lsls	r2, r2, #22
 8007940:	d475      	bmi.n	8007a2e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007944:	0617      	lsls	r7, r2, #24
 8007946:	d502      	bpl.n	800794e <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800794a:	0610      	lsls	r0, r2, #24
 800794c:	d477      	bmi.n	8007a3e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800794e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007950:	0491      	lsls	r1, r2, #18
 8007952:	d502      	bpl.n	800795a <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007956:	0492      	lsls	r2, r2, #18
 8007958:	d459      	bmi.n	8007a0e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800795a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800795c:	0417      	lsls	r7, r2, #16
 800795e:	d502      	bpl.n	8007966 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007962:	0410      	lsls	r0, r2, #16
 8007964:	d45b      	bmi.n	8007a1e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007968:	0451      	lsls	r1, r2, #17
 800796a:	d509      	bpl.n	8007980 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800796c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800796e:	0452      	lsls	r2, r2, #17
 8007970:	d506      	bpl.n	8007980 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007976:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007978:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800797a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800797e:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007980:	b94e      	cbnz	r6, 8007996 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8007982:	b125      	cbz	r5, 800798e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8007988:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800798a:	432b      	orrs	r3, r5
 800798c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800798e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007990:	bb13      	cbnz	r3, 80079d8 <HAL_FDCAN_IRQHandler+0x108>
}
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007996:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007998:	4631      	mov	r1, r6
 800799a:	4620      	mov	r0, r4
 800799c:	f7ff ff96 	bl	80078cc <HAL_FDCAN_ErrorStatusCallback>
 80079a0:	e7ef      	b.n	8007982 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80079a2:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80079a6:	4641      	mov	r1, r8
 80079a8:	4620      	mov	r0, r4
 80079aa:	f7fd f948 	bl	8004c3e <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80079ae:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 80079b0:	2f00      	cmp	r7, #0
 80079b2:	d0c0      	beq.n	8007936 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80079b4:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80079b6:	4639      	mov	r1, r7
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff ff77 	bl	80078ac <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	e7b9      	b.n	8007936 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80079c2:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80079c6:	4649      	mov	r1, r9
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff ff6d 	bl	80078a8 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80079ce:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	d0ad      	beq.n	8007932 <HAL_FDCAN_IRQHandler+0x62>
 80079d6:	e7e4      	b.n	80079a2 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff ff75 	bl	80078c8 <HAL_FDCAN_ErrorCallback>
}
 80079de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80079e2:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80079e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80079ea:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80079ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff ff60 	bl	80078b8 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80079f8:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	d095      	beq.n	800792c <HAL_FDCAN_IRQHandler+0x5c>
 8007a00:	e7df      	b.n	80079c2 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007a02:	2240      	movs	r2, #64	; 0x40
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007a06:	f7ff ff5d 	bl	80078c4 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	e785      	b.n	800791a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a12:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff ff51 	bl	80078bc <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	e79d      	b.n	800795a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007a1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a22:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff ff4b 	bl	80078c0 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	e79b      	b.n	8007966 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007a34:	4620      	mov	r0, r4
 8007a36:	f7ff ff3b 	bl	80078b0 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	e781      	b.n	8007942 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007a3e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007a42:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007a46:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007a48:	2280      	movs	r2, #128	; 0x80
 8007a4a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f7ff ff31 	bl	80078b4 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	e77b      	b.n	800794e <HAL_FDCAN_IRQHandler+0x7e>
 8007a56:	bf00      	nop

08007a58 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a5c:	f240 5884 	movw	r8, #1412	; 0x584
 8007a60:	f2c2 0800 	movt	r8, #8192	; 0x2000
{
 8007a64:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8007a66:	f898 3000 	ldrb.w	r3, [r8]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d058      	beq.n	8007b20 <HAL_FLASH_Program+0xc8>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4681      	mov	r9, r0
 8007a72:	460e      	mov	r6, r1
 8007a74:	4617      	mov	r7, r2
 8007a76:	f888 3000 	strb.w	r3, [r8]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007a7a:	f7fe faa3 	bl	8005fc4 <HAL_GetTick>
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007a7e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8007a82:	f2c4 0402 	movt	r4, #16386	; 0x4002
  uint32_t tickstart = HAL_GetTick();
 8007a86:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007a88:	e006      	b.n	8007a98 <HAL_FLASH_Program+0x40>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007a8a:	f7fe fa9b 	bl	8005fc4 <HAL_GetTick>
 8007a8e:	eba0 0c05 	sub.w	ip, r0, r5
 8007a92:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8007a96:	d83d      	bhi.n	8007b14 <HAL_FLASH_Program+0xbc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	03d8      	lsls	r0, r3, #15
 8007a9c:	d4f5      	bmi.n	8007a8a <HAL_FLASH_Program+0x32>
      return HAL_TIMEOUT;
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007a9e:	6925      	ldr	r5, [r4, #16]
 8007aa0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
  if (error != 0u)
 8007aa4:	401d      	ands	r5, r3
 8007aa6:	d14f      	bne.n	8007b48 <HAL_FLASH_Program+0xf0>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	07d9      	lsls	r1, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007aac:	bf44      	itt	mi
 8007aae:	2301      	movmi	r3, #1
 8007ab0:	6123      	strmi	r3, [r4, #16]
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f8c8 3004 	str.w	r3, [r8, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007ab8:	f1b9 0f00 	cmp.w	r9, #0
 8007abc:	d033      	beq.n	8007b26 <HAL_FLASH_Program+0xce>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007abe:	f109 33ff 	add.w	r3, r9, #4294967295
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d948      	bls.n	8007b58 <HAL_FLASH_Program+0x100>
  uint32_t tickstart = HAL_GetTick();
 8007ac6:	f7fe fa7d 	bl	8005fc4 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007aca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  uint32_t tickstart = HAL_GetTick();
 8007ace:	4606      	mov	r6, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007ad0:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8007ad4:	e005      	b.n	8007ae2 <HAL_FLASH_Program+0x8a>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007ad6:	f7fe fa75 	bl	8005fc4 <HAL_GetTick>
 8007ada:	1b80      	subs	r0, r0, r6
 8007adc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007ae0:	d830      	bhi.n	8007b44 <HAL_FLASH_Program+0xec>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	03db      	lsls	r3, r3, #15
 8007ae6:	d4f6      	bmi.n	8007ad6 <HAL_FLASH_Program+0x7e>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8007aee:	4013      	ands	r3, r2
 8007af0:	d15b      	bne.n	8007baa <HAL_FLASH_Program+0x152>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007af2:	6920      	ldr	r0, [r4, #16]
 8007af4:	f010 0001 	ands.w	r0, r0, #1
 8007af8:	d002      	beq.n	8007b00 <HAL_FLASH_Program+0xa8>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007afa:	2201      	movs	r2, #1
 8007afc:	6122      	str	r2, [r4, #16]
 8007afe:	4618      	mov	r0, r3
    if (prog_bit != 0U)
 8007b00:	b14d      	cbz	r5, 8007b16 <HAL_FLASH_Program+0xbe>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b0a:	695a      	ldr	r2, [r3, #20]
 8007b0c:	ea22 0205 	bic.w	r2, r2, r5
 8007b10:	615a      	str	r2, [r3, #20]
 8007b12:	e000      	b.n	8007b16 <HAL_FLASH_Program+0xbe>
 8007b14:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8007b16:	2300      	movs	r3, #0
 8007b18:	f888 3000 	strb.w	r3, [r8]
}
 8007b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(&pFlash);
 8007b20:	2002      	movs	r0, #2
}
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b2e:	695a      	ldr	r2, [r3, #20]
 8007b30:	f042 0201 	orr.w	r2, r2, #1
 8007b34:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007b36:	6037      	str	r7, [r6, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007b38:	f3bf 8f6f 	isb	sy
      prog_bit = FLASH_CR_PG;
 8007b3c:	2501      	movs	r5, #1
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007b3e:	f8c6 a004 	str.w	sl, [r6, #4]
      prog_bit = FLASH_CR_PG;
 8007b42:	e7c0      	b.n	8007ac6 <HAL_FLASH_Program+0x6e>
      return HAL_TIMEOUT;
 8007b44:	2003      	movs	r0, #3
 8007b46:	e7db      	b.n	8007b00 <HAL_FLASH_Program+0xa8>
    pFlash.ErrorCode |= error;
 8007b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b4c:	432b      	orrs	r3, r5
 8007b4e:	f8c8 3004 	str.w	r3, [r8, #4]
    return HAL_ERROR;
 8007b52:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8007b54:	6125      	str	r5, [r4, #16]
  if (status == HAL_OK)
 8007b56:	e7de      	b.n	8007b16 <HAL_FLASH_Program+0xbe>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007b58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007b60:	463b      	mov	r3, r7
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007b62:	6951      	ldr	r1, [r2, #20]
 8007b64:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8007b68:	6151      	str	r1, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b6a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007b6e:	b672      	cpsid	i
 8007b70:	ea46 0207 	orr.w	r2, r6, r7
 8007b74:	0752      	lsls	r2, r2, #29
 8007b76:	d120      	bne.n	8007bba <HAL_FLASH_Program+0x162>
 8007b78:	1d3a      	adds	r2, r7, #4
 8007b7a:	42b2      	cmp	r2, r6
 8007b7c:	d01d      	beq.n	8007bba <HAL_FLASH_Program+0x162>
 8007b7e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b82:	1af6      	subs	r6, r6, r3
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b88:	18f2      	adds	r2, r6, r3
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	42bb      	cmp	r3, r7
 8007b8e:	e9c2 0100 	strd	r0, r1, [r2]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8007b92:	d1f7      	bne.n	8007b84 <HAL_FLASH_Program+0x12c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b94:	f384 8810 	msr	PRIMASK, r4
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007b98:	f1a9 0902 	sub.w	r9, r9, #2
 8007b9c:	fab9 f989 	clz	r9, r9
 8007ba0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8007ba4:	ea4f 4589 	mov.w	r5, r9, lsl #18
 8007ba8:	e78d      	b.n	8007ac6 <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode |= error;
 8007baa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8c8 2004 	str.w	r2, [r8, #4]
    return HAL_ERROR;
 8007bb4:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8007bb6:	6123      	str	r3, [r4, #16]
    return HAL_ERROR;
 8007bb8:	e7a2      	b.n	8007b00 <HAL_FLASH_Program+0xa8>
 8007bba:	1bf6      	subs	r6, r6, r7
 8007bbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
    *dest_addr = *src_addr;
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	519a      	str	r2, [r3, r6]
    src_addr++;
 8007bc4:	3304      	adds	r3, #4
  while (row_index != 0U);
 8007bc6:	429f      	cmp	r7, r3
 8007bc8:	d1fa      	bne.n	8007bc0 <HAL_FLASH_Program+0x168>
 8007bca:	e7e3      	b.n	8007b94 <HAL_FLASH_Program+0x13c>

08007bcc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bd4:	695a      	ldr	r2, [r3, #20]
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	db01      	blt.n	8007bde <HAL_FLASH_Unlock+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2000      	movs	r0, #0
}
 8007bdc:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007bde:	f240 1123 	movw	r1, #291	; 0x123
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007be2:	f648 12ab 	movw	r2, #35243	; 0x89ab
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007be6:	f2c4 5167 	movt	r1, #17767	; 0x4567
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007bea:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007bee:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007bf0:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bf2:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf4:	0fc0      	lsrs	r0, r0, #31
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007c06:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007c08:	6958      	ldr	r0, [r3, #20]
}
 8007c0a:	43c0      	mvns	r0, r0
 8007c0c:	0fc0      	lsrs	r0, r0, #31
 8007c0e:	4770      	bx	lr

08007c10 <FLASH_WaitForLastOperation>:
{
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8007c14:	f7fe f9d6 	bl	8005fc4 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c18:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  uint32_t tickstart = HAL_GetTick();
 8007c1c:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c1e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8007c22:	e004      	b.n	8007c2e <FLASH_WaitForLastOperation+0x1e>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007c24:	f7fe f9ce 	bl	8005fc4 <HAL_GetTick>
 8007c28:	1b43      	subs	r3, r0, r5
 8007c2a:	42b3      	cmp	r3, r6
 8007c2c:	d80f      	bhi.n	8007c4e <FLASH_WaitForLastOperation+0x3e>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	03db      	lsls	r3, r3, #15
 8007c32:	d4f7      	bmi.n	8007c24 <FLASH_WaitForLastOperation+0x14>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	d109      	bne.n	8007c52 <FLASH_WaitForLastOperation+0x42>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007c3e:	6920      	ldr	r0, [r4, #16]
 8007c40:	f010 0001 	ands.w	r0, r0, #1
 8007c44:	d002      	beq.n	8007c4c <FLASH_WaitForLastOperation+0x3c>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c46:	2201      	movs	r2, #1
 8007c48:	6122      	str	r2, [r4, #16]
 8007c4a:	4618      	mov	r0, r3
}
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8007c4e:	2003      	movs	r0, #3
}
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8007c52:	f240 5284 	movw	r2, #1412	; 0x584
 8007c56:	f2c2 0200 	movt	r2, #8192	; 0x2000
    return HAL_ERROR;
 8007c5a:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 8007c5c:	6851      	ldr	r1, [r2, #4]
 8007c5e:	4319      	orrs	r1, r3
 8007c60:	6051      	str	r1, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8007c62:	6123      	str	r3, [r4, #16]
}
 8007c64:	bd70      	pop	{r4, r5, r6, pc}
 8007c66:	bf00      	nop

08007c68 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007c6c:	f240 5884 	movw	r8, #1412	; 0x584
 8007c70:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8007c74:	f898 3000 	ldrb.w	r3, [r8]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	f000 808b 	beq.w	8007d94 <HAL_FLASHEx_Erase+0x12c>
 8007c7e:	4681      	mov	r9, r0
 8007c80:	2401      	movs	r4, #1

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c86:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8007c88:	f888 4000 	strb.w	r4, [r8]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c8c:	f7ff ffc0 	bl	8007c10 <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8007c90:	4606      	mov	r6, r0
 8007c92:	b128      	cbz	r0, 8007ca0 <HAL_FLASHEx_Erase+0x38>
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c94:	2300      	movs	r3, #0
 8007c96:	f888 3000 	strb.w	r3, [r8]

  return status;
}
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ca8:	f8c8 0004 	str.w	r0, [r8, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	f412 7f00 	tst.w	r2, #512	; 0x200
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007cb2:	681a      	ldr	r2, [r3, #0]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007cb4:	d172      	bne.n	8007d9c <HAL_FLASHEx_Erase+0x134>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007cb6:	0552      	lsls	r2, r2, #21
 8007cb8:	f140 809b 	bpl.w	8007df2 <HAL_FLASHEx_Erase+0x18a>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc2:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f888 301c 	strb.w	r3, [r8, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cca:	f8d9 3000 	ldr.w	r3, [r9]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d06e      	beq.n	8007db0 <HAL_FLASHEx_Erase+0x148>
      *PageError = 0xFFFFFFFFU;
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd6:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007cd8:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8007cdc:	442b      	add	r3, r5
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	d226      	bcs.n	8007d30 <HAL_FLASHEx_Erase+0xc8>
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007ce2:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8007ce6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8007cea:	e005      	b.n	8007cf8 <HAL_FLASHEx_Erase+0x90>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007cec:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8007cf0:	3501      	adds	r5, #1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	d91b      	bls.n	8007d30 <HAL_FLASHEx_Erase+0xc8>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007cf8:	6962      	ldr	r2, [r4, #20]
 8007cfa:	00eb      	lsls	r3, r5, #3
 8007cfc:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8007d00:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007d04:	4313      	orrs	r3, r2
 8007d06:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007d08:	6963      	ldr	r3, [r4, #20]
 8007d0a:	f043 0302 	orr.w	r3, r3, #2
 8007d0e:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007d10:	6963      	ldr	r3, [r4, #20]
 8007d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d16:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d1c:	f7ff ff78 	bl	8007c10 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007d20:	6963      	ldr	r3, [r4, #20]
 8007d22:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007d26:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d0df      	beq.n	8007cec <HAL_FLASHEx_Erase+0x84>
          *PageError = page_index;
 8007d2c:	603d      	str	r5, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d2e:	4606      	mov	r6, r0
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d30:	f898 301c 	ldrb.w	r3, [r8, #28]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d34:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8007d38:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d3a:	b2db      	uxtb	r3, r3
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d3c:	d113      	bne.n	8007d66 <HAL_FLASHEx_Erase+0xfe>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d46:	6811      	ldr	r1, [r2, #0]
 8007d48:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007d4c:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d4e:	6811      	ldr	r1, [r2, #0]
 8007d50:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007d54:	6011      	str	r1, [r2, #0]
 8007d56:	6811      	ldr	r1, [r2, #0]
 8007d58:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007d5c:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d5e:	6811      	ldr	r1, [r2, #0]
 8007d60:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007d64:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007d66:	3b02      	subs	r3, #2
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d80f      	bhi.n	8007d8c <HAL_FLASHEx_Erase+0x124>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d82:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d8a:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f888 301c 	strb.w	r3, [r8, #28]
}
 8007d92:	e77f      	b.n	8007c94 <HAL_FLASHEx_Erase+0x2c>
  __HAL_LOCK(&pFlash);
 8007d94:	2602      	movs	r6, #2
}
 8007d96:	4630      	mov	r0, r6
 8007d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007d9c:	0551      	lsls	r1, r2, #21
 8007d9e:	d525      	bpl.n	8007dec <HAL_FLASHEx_Erase+0x184>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da6:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007da8:	2303      	movs	r3, #3
 8007daa:	f888 301c 	strb.w	r3, [r8, #28]
 8007dae:	e78c      	b.n	8007cca <HAL_FLASHEx_Erase+0x62>
    if ((Banks & FLASH_BANK_1) != 0U)
 8007db0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007db4:	07db      	lsls	r3, r3, #31
 8007db6:	d507      	bpl.n	8007dc8 <HAL_FLASHEx_Erase+0x160>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	f042 0204 	orr.w	r2, r2, #4
 8007dc6:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007dc8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8007dcc:	f2c4 0402 	movt	r4, #16386	; 0x4002
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007dd4:	6963      	ldr	r3, [r4, #20]
 8007dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dda:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ddc:	f7ff ff18 	bl	8007c10 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007de0:	6963      	ldr	r3, [r4, #20]
 8007de2:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007de6:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007de8:	6163      	str	r3, [r4, #20]
 8007dea:	e7a1      	b.n	8007d30 <HAL_FLASHEx_Erase+0xc8>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007dec:	f888 401c 	strb.w	r4, [r8, #28]
 8007df0:	e76b      	b.n	8007cca <HAL_FLASHEx_Erase+0x62>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007df2:	f888 001c 	strb.w	r0, [r8, #28]
 8007df6:	e768      	b.n	8007cca <HAL_FLASHEx_Erase+0x62>

08007df8 <HAL_FMAC_Init>:
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d047      	beq.n	8007e8c <HAL_FMAC_Init+0x94>
{
 8007dfc:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007dfe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007e02:	4604      	mov	r4, r0
 8007e04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d03a      	beq.n	8007e82 <HAL_FMAC_Init+0x8a>
    HAL_FMAC_MspInit(hfmac);
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007e0c:	2300      	movs	r3, #0
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
  hfmac->pInputSize = NULL;
  hfmac->InputCurrentSize = 0U;
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  hfmac->FilterParam = 0U;
 8007e14:	6063      	str	r3, [r4, #4]
  hfmac->pInput = NULL;
 8007e16:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8007e18:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8007e1a:	8223      	strh	r3, [r4, #16]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 8007e1c:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 8007e1e:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8007e20:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007e22:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  tickstart = HAL_GetTick();
 8007e26:	f7fe f8cd 	bl	8005fc4 <HAL_GetTick>
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	691a      	ldr	r2, [r3, #16]
 8007e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  tickstart = HAL_GetTick();
 8007e32:	4605      	mov	r5, r0
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007e34:	611a      	str	r2, [r3, #16]
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007e36:	e006      	b.n	8007e46 <HAL_FMAC_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007e38:	f7fe f8c4 	bl	8005fc4 <HAL_GetTick>
 8007e3c:	1b43      	subs	r3, r0, r5
 8007e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007e42:	d80e      	bhi.n	8007e62 <HAL_FMAC_Init+0x6a>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007e4c:	d1f4      	bne.n	8007e38 <HAL_FMAC_Init+0x40>
  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007e4e:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007e50:	2220      	movs	r2, #32
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007e52:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_OK;
 8007e54:	4618      	mov	r0, r3
  __HAL_UNLOCK(hfmac);
 8007e56:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_READY;
 8007e58:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 8007e5c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e68:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6c:	f043 0310 	orr.w	r3, r3, #16
 8007e70:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007e72:	22a0      	movs	r2, #160	; 0xa0
  __HAL_UNLOCK(hfmac);
 8007e74:	2300      	movs	r3, #0
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007e76:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 8007e7a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8007e7e:	2001      	movs	r0, #1
}
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
    hfmac->Lock = HAL_UNLOCKED;
 8007e82:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 8007e86:	f7fd faad 	bl	80053e4 <HAL_FMAC_MspInit>
 8007e8a:	e7bf      	b.n	8007e0c <HAL_FMAC_Init+0x14>
    return HAL_ERROR;
 8007e8c:	2001      	movs	r0, #1
}
 8007e8e:	4770      	bx	lr

08007e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e94:	680c      	ldr	r4, [r1, #0]
{
 8007e96:	b08b      	sub	sp, #44	; 0x2c
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e98:	2c00      	cmp	r4, #0
 8007e9a:	f000 80a2 	beq.w	8007fe2 <HAL_GPIO_Init+0x152>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ea2:	f6c4 0200 	movt	r2, #18432	; 0x4800
 8007ea6:	9203      	str	r2, [sp, #12]
 8007ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eac:	f6c4 0200 	movt	r2, #18432	; 0x4800
 8007eb0:	9204      	str	r2, [sp, #16]
 8007eb2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8007eb6:	f6c4 0200 	movt	r2, #18432	; 0x4800
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eba:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ebe:	f44f 6680 	mov.w	r6, #1024	; 0x400
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ec2:	9205      	str	r2, [sp, #20]
 8007ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ec8:	f6c4 0200 	movt	r2, #18432	; 0x4800
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ecc:	f2c4 0b02 	movt	fp, #16386	; 0x4002
        temp = EXTI->RTSR1;
 8007ed0:	f2c4 0601 	movt	r6, #16385	; 0x4001
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ed4:	9206      	str	r2, [sp, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ed6:	e9cd 6b01 	strd	r6, fp, [sp, #4]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007eda:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ede:	f04f 0c00 	mov.w	ip, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ee2:	f6c4 0200 	movt	r2, #18432	; 0x4800
  uint32_t position = 0x00U;
 8007ee6:	4663      	mov	r3, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ee8:	9207      	str	r2, [sp, #28]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007eea:	2201      	movs	r2, #1
 8007eec:	fa02 f803 	lsl.w	r8, r2, r3
    if (iocurrent != 0x00u)
 8007ef0:	ea18 0e04 	ands.w	lr, r8, r4
 8007ef4:	d06f      	beq.n	8007fd6 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ef6:	684f      	ldr	r7, [r1, #4]
 8007ef8:	f007 0203 	and.w	r2, r7, #3
 8007efc:	1e55      	subs	r5, r2, #1
 8007efe:	2d01      	cmp	r5, #1
 8007f00:	d972      	bls.n	8007fe8 <HAL_GPIO_Init+0x158>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f02:	2a03      	cmp	r2, #3
 8007f04:	f040 80b2 	bne.w	800806c <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f08:	fa02 f20c 	lsl.w	r2, r2, ip
 8007f0c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8007f0e:	f8d0 8000 	ldr.w	r8, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f12:	ea08 0505 	and.w	r5, r8, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f16:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f18:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8007f1c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f1e:	d05a      	beq.n	8007fd6 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f20:	9d02      	ldr	r5, [sp, #8]
 8007f22:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	662a      	str	r2, [r5, #96]	; 0x60
 8007f2a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007f2c:	f002 0201 	and.w	r2, r2, #1
 8007f30:	9209      	str	r2, [sp, #36]	; 0x24
 8007f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
        temp = SYSCFG->EXTICR[position >> 2U];
 8007f34:	f023 0203 	bic.w	r2, r3, #3
 8007f38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007f3c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f40:	f003 0803 	and.w	r8, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007f44:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f46:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007f4a:	260f      	movs	r6, #15
 8007f4c:	fa06 f908 	lsl.w	r9, r6, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f50:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f54:	ea25 0509 	bic.w	r5, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f58:	d01a      	beq.n	8007f90 <HAL_GPIO_Init+0x100>
 8007f5a:	9e03      	ldr	r6, [sp, #12]
 8007f5c:	42b0      	cmp	r0, r6
 8007f5e:	f000 8091 	beq.w	8008084 <HAL_GPIO_Init+0x1f4>
 8007f62:	9e04      	ldr	r6, [sp, #16]
 8007f64:	42b0      	cmp	r0, r6
 8007f66:	f000 8093 	beq.w	8008090 <HAL_GPIO_Init+0x200>
 8007f6a:	9e05      	ldr	r6, [sp, #20]
 8007f6c:	42b0      	cmp	r0, r6
 8007f6e:	f000 8082 	beq.w	8008076 <HAL_GPIO_Init+0x1e6>
 8007f72:	9e06      	ldr	r6, [sp, #24]
 8007f74:	42b0      	cmp	r0, r6
 8007f76:	f000 8092 	beq.w	800809e <HAL_GPIO_Init+0x20e>
 8007f7a:	9e07      	ldr	r6, [sp, #28]
 8007f7c:	42b0      	cmp	r0, r6
 8007f7e:	bf0c      	ite	eq
 8007f80:	f04f 0905 	moveq.w	r9, #5
 8007f84:	f04f 0906 	movne.w	r9, #6
 8007f88:	fa09 f908 	lsl.w	r9, r9, r8
 8007f8c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f90:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f96:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8007f98:	ea6f 050e 	mvn.w	r5, lr
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007f9c:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(iocurrent);
 8007f9e:	bf54      	ite	pl
 8007fa0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8007fa2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8007fa6:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8007fa8:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007faa:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8007fae:	bf0c      	ite	eq
 8007fb0:	402a      	andeq	r2, r5
        {
          temp |= iocurrent;
 8007fb2:	ea4e 0202 	orrne.w	r2, lr, r2
        }
        EXTI->FTSR1 = temp;
 8007fb6:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007fb8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~(iocurrent);
 8007fbe:	bf0c      	ite	eq
 8007fc0:	402a      	andeq	r2, r5
        {
          temp |= iocurrent;
 8007fc2:	ea4e 0202 	orrne.w	r2, lr, r2
        }
        EXTI->EMR1 = temp;
 8007fc6:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007fc8:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fca:	03ff      	lsls	r7, r7, #15
        temp &= ~(iocurrent);
 8007fcc:	bf54      	ite	pl
 8007fce:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007fd0:	ea4e 0202 	orrmi.w	r2, lr, r2
        }
        EXTI->IMR1 = temp;
 8007fd4:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007fd6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007fd8:	fa34 f203 	lsrs.w	r2, r4, r3
 8007fdc:	f10c 0c02 	add.w	ip, ip, #2
 8007fe0:	d183      	bne.n	8007eea <HAL_GPIO_Init+0x5a>
  }
}
 8007fe2:	b00b      	add	sp, #44	; 0x2c
 8007fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fe8:	68cd      	ldr	r5, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8007fea:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fee:	fa05 fb0c 	lsl.w	fp, r5, ip
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ff2:	2503      	movs	r5, #3
 8007ff4:	fa05 f90c 	lsl.w	r9, r5, ip
 8007ff8:	ea2a 0a09 	bic.w	sl, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ffc:	ea4b 050a 	orr.w	r5, fp, sl
        GPIOx->OSPEEDR = temp;
 8008000:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008002:	ea6f 0509 	mvn.w	r5, r9
        temp = GPIOx->OTYPER;
 8008006:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800800a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800800e:	f3c7 1800 	ubfx	r8, r7, #4, #1
 8008012:	fa08 f803 	lsl.w	r8, r8, r3
 8008016:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OTYPER = temp;
 800801a:	f8c0 8004 	str.w	r8, [r0, #4]
        temp = GPIOx->PUPDR;
 800801e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008022:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008024:	ea08 0805 	and.w	r8, r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008028:	fa06 f90c 	lsl.w	r9, r6, ip
 800802c:	ea49 0908 	orr.w	r9, r9, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008030:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8008032:	f8c0 900c 	str.w	r9, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008036:	fa02 f20c 	lsl.w	r2, r2, ip
 800803a:	f47f af68 	bne.w	8007f0e <HAL_GPIO_Init+0x7e>
        temp = GPIOx->AFR[position >> 3U];
 800803e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008042:	690e      	ldr	r6, [r1, #16]
 8008044:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008048:	f003 0807 	and.w	r8, r3, #7
 800804c:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008050:	fa06 fb08 	lsl.w	fp, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 8008054:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008058:	260f      	movs	r6, #15
 800805a:	fa06 f808 	lsl.w	r8, r6, r8
 800805e:	ea2a 0a08 	bic.w	sl, sl, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008062:	ea4b 0b0a 	orr.w	fp, fp, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008066:	f8c9 b020 	str.w	fp, [r9, #32]
 800806a:	e750      	b.n	8007f0e <HAL_GPIO_Init+0x7e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800806c:	2503      	movs	r5, #3
 800806e:	fa05 f50c 	lsl.w	r5, r5, ip
 8008072:	43ed      	mvns	r5, r5
 8008074:	e7d3      	b.n	800801e <HAL_GPIO_Init+0x18e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008076:	f04f 0903 	mov.w	r9, #3
 800807a:	fa09 f908 	lsl.w	r9, r9, r8
 800807e:	ea45 0509 	orr.w	r5, r5, r9
 8008082:	e785      	b.n	8007f90 <HAL_GPIO_Init+0x100>
 8008084:	2601      	movs	r6, #1
 8008086:	fa06 f808 	lsl.w	r8, r6, r8
 800808a:	ea45 0508 	orr.w	r5, r5, r8
 800808e:	e77f      	b.n	8007f90 <HAL_GPIO_Init+0x100>
 8008090:	f04f 0902 	mov.w	r9, #2
 8008094:	fa09 f908 	lsl.w	r9, r9, r8
 8008098:	ea45 0509 	orr.w	r5, r5, r9
 800809c:	e778      	b.n	8007f90 <HAL_GPIO_Init+0x100>
 800809e:	f04f 0904 	mov.w	r9, #4
 80080a2:	fa09 f908 	lsl.w	r9, r9, r8
 80080a6:	ea45 0509 	orr.w	r5, r5, r9
 80080aa:	e771      	b.n	8007f90 <HAL_GPIO_Init+0x100>

080080ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080ac:	b10a      	cbz	r2, 80080b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080ae:	6181      	str	r1, [r0, #24]
 80080b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080b2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080b8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80080bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80080c0:	b960      	cbnz	r0, 80080dc <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080cc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080d0:	d01d      	beq.n	800810e <HAL_PWREx_ControlVoltageScaling+0x56>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80080da:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80080e0:	d007      	beq.n	80080f2 <HAL_PWREx_ControlVoltageScaling+0x3a>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80080ec:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080ee:	6013      	str	r3, [r2, #0]
}
 80080f0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080fc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008100:	d034      	beq.n	800816c <HAL_PWREx_ControlVoltageScaling+0xb4>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8008106:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800810c:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800810e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008112:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008116:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008118:	f240 5178 	movw	r1, #1400	; 0x578
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800811c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008120:	f2c2 0100 	movt	r1, #8192	; 0x2000
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008128:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800812a:	680b      	ldr	r3, [r1, #0]
 800812c:	2032      	movs	r0, #50	; 0x32
 800812e:	f64d 6183 	movw	r1, #56963	; 0xde83
 8008132:	fb00 f303 	mul.w	r3, r0, r3
 8008136:	f2c4 311b 	movt	r1, #17179	; 0x431b
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800813a:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800813c:	fba1 1303 	umull	r1, r3, r1, r3
 8008140:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008142:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008144:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008148:	d506      	bpl.n	8008158 <HAL_PWREx_ControlVoltageScaling+0xa0>
 800814a:	e000      	b.n	800814e <HAL_PWREx_ControlVoltageScaling+0x96>
 800814c:	b123      	cbz	r3, 8008158 <HAL_PWREx_ControlVoltageScaling+0xa0>
 800814e:	6951      	ldr	r1, [r2, #20]
 8008150:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008152:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008156:	d4f9      	bmi.n	800814c <HAL_PWREx_ControlVoltageScaling+0x94>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008158:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800815c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8008164:	bf54      	ite	pl
 8008166:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8008168:	2003      	movmi	r0, #3
 800816a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800816c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008174:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008176:	f240 5178 	movw	r1, #1400	; 0x578
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800817a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800817e:	f2c2 0100 	movt	r1, #8192	; 0x2000
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008186:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008188:	680b      	ldr	r3, [r1, #0]
 800818a:	2032      	movs	r0, #50	; 0x32
 800818c:	f64d 6183 	movw	r1, #56963	; 0xde83
 8008190:	fb00 f303 	mul.w	r3, r0, r3
 8008194:	f2c4 311b 	movt	r1, #17179	; 0x431b
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008198:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800819a:	fba1 1303 	umull	r1, r3, r1, r3
 800819e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081a0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081a2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081a6:	d5d7      	bpl.n	8008158 <HAL_PWREx_ControlVoltageScaling+0xa0>
 80081a8:	e001      	b.n	80081ae <HAL_PWREx_ControlVoltageScaling+0xf6>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0d4      	beq.n	8008158 <HAL_PWREx_ControlVoltageScaling+0xa0>
 80081ae:	6951      	ldr	r1, [r2, #20]
 80081b0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80081b2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081b6:	d5cf      	bpl.n	8008158 <HAL_PWREx_ControlVoltageScaling+0xa0>
 80081b8:	e7f7      	b.n	80081aa <HAL_PWREx_ControlVoltageScaling+0xf2>
 80081ba:	bf00      	nop

080081bc <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80081bc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80081c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ca:	609a      	str	r2, [r3, #8]
}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081d0:	2800      	cmp	r0, #0
 80081d2:	f000 81f5 	beq.w	80085c0 <HAL_RCC_OscConfig+0x3f0>
{
 80081d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081da:	6803      	ldr	r3, [r0, #0]
 80081dc:	07d9      	lsls	r1, r3, #31
{
 80081de:	b082      	sub	sp, #8
 80081e0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081e2:	d533      	bpl.n	800824c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081e8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80081ec:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081ee:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081f0:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80081f4:	2a0c      	cmp	r2, #12
 80081f6:	f000 8128 	beq.w	800844a <HAL_RCC_OscConfig+0x27a>
 80081fa:	2a08      	cmp	r2, #8
 80081fc:	f000 812a 	beq.w	8008454 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008206:	f000 815d 	beq.w	80084c4 <HAL_RCC_OscConfig+0x2f4>
 800820a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800820e:	f000 81ca 	beq.w	80085a6 <HAL_RCC_OscConfig+0x3d6>
 8008212:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008216:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800821a:	682a      	ldr	r2, [r5, #0]
 800821c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	682a      	ldr	r2, [r5, #0]
 8008224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008228:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 8152 	bne.w	80084d4 <HAL_RCC_OscConfig+0x304>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008230:	f7fd fec8 	bl	8005fc4 <HAL_GetTick>
 8008234:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008236:	e005      	b.n	8008244 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008238:	f7fd fec4 	bl	8005fc4 <HAL_GetTick>
 800823c:	1b80      	subs	r0, r0, r6
 800823e:	2864      	cmp	r0, #100	; 0x64
 8008240:	f200 8168 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	039f      	lsls	r7, r3, #14
 8008248:	d4f6      	bmi.n	8008238 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	079e      	lsls	r6, r3, #30
 800824e:	d52e      	bpl.n	80082ae <HAL_RCC_OscConfig+0xde>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008254:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008258:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800825a:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825c:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008260:	2b0c      	cmp	r3, #12
 8008262:	f000 8107 	beq.w	8008474 <HAL_RCC_OscConfig+0x2a4>
 8008266:	2b04      	cmp	r3, #4
 8008268:	f000 8109 	beq.w	800847e <HAL_RCC_OscConfig+0x2ae>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800826c:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800826e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008272:	f2c4 0502 	movt	r5, #16386	; 0x4002
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 813d 	beq.w	80084f6 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_HSI_ENABLE();
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008282:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fd fe9e 	bl	8005fc4 <HAL_GetTick>
 8008288:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800828a:	e005      	b.n	8008298 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800828c:	f7fd fe9a 	bl	8005fc4 <HAL_GetTick>
 8008290:	1b80      	subs	r0, r0, r6
 8008292:	2802      	cmp	r0, #2
 8008294:	f200 813e 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	0558      	lsls	r0, r3, #21
 800829c:	d5f6      	bpl.n	800828c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829e:	686b      	ldr	r3, [r5, #4]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80082a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80082aa:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	071a      	lsls	r2, r3, #28
 80082b0:	d51c      	bpl.n	80082ec <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082b2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80082b8:	f2c4 0502 	movt	r5, #16386	; 0x4002
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80b0 	beq.w	8008422 <HAL_RCC_OscConfig+0x252>
      __HAL_RCC_LSI_ENABLE();
 80082c2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ce:	f7fd fe79 	bl	8005fc4 <HAL_GetTick>
 80082d2:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082d4:	e005      	b.n	80082e2 <HAL_RCC_OscConfig+0x112>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082d6:	f7fd fe75 	bl	8005fc4 <HAL_GetTick>
 80082da:	1b80      	subs	r0, r0, r6
 80082dc:	2802      	cmp	r0, #2
 80082de:	f200 8119 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082e2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80082e6:	079f      	lsls	r7, r3, #30
 80082e8:	d5f5      	bpl.n	80082d6 <HAL_RCC_OscConfig+0x106>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	0759      	lsls	r1, r3, #29
 80082ee:	d54d      	bpl.n	800838c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80082f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082fa:	00d2      	lsls	r2, r2, #3
 80082fc:	f100 810e 	bmi.w	800851c <HAL_RCC_OscConfig+0x34c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008302:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008306:	659a      	str	r2, [r3, #88]	; 0x58
 8008308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008312:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008314:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8008318:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800831c:	6833      	ldr	r3, [r6, #0]
 800831e:	05df      	lsls	r7, r3, #23
 8008320:	f140 8130 	bpl.w	8008584 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	2b01      	cmp	r3, #1
 8008328:	f000 80fa 	beq.w	8008520 <HAL_RCC_OscConfig+0x350>
 800832c:	2b05      	cmp	r3, #5
 800832e:	f000 818c 	beq.w	800864a <HAL_RCC_OscConfig+0x47a>
 8008332:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008336:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800833a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8008346:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800834a:	f022 0204 	bic.w	r2, r2, #4
 800834e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008352:	2b00      	cmp	r3, #0
 8008354:	f040 80ee 	bne.w	8008534 <HAL_RCC_OscConfig+0x364>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008358:	f7fd fe34 	bl	8005fc4 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800835c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008360:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008362:	e005      	b.n	8008370 <HAL_RCC_OscConfig+0x1a0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008364:	f7fd fe2e 	bl	8005fc4 <HAL_GetTick>
 8008368:	1bc0      	subs	r0, r0, r7
 800836a:	4540      	cmp	r0, r8
 800836c:	f200 80d2 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008370:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8008374:	079a      	lsls	r2, r3, #30
 8008376:	d4f5      	bmi.n	8008364 <HAL_RCC_OscConfig+0x194>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008378:	b13d      	cbz	r5, 800838a <HAL_RCC_OscConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800837a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800837e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008384:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008388:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	069b      	lsls	r3, r3, #26
 800838e:	d51b      	bpl.n	80083c8 <HAL_RCC_OscConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008390:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008392:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008396:	f2c4 0502 	movt	r5, #16386	; 0x4002
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 80de 	beq.w	800855c <HAL_RCC_OscConfig+0x38c>
      __HAL_RCC_HSI48_ENABLE();
 80083a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ac:	f7fd fe0a 	bl	8005fc4 <HAL_GetTick>
 80083b0:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083b2:	e005      	b.n	80083c0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b4:	f7fd fe06 	bl	8005fc4 <HAL_GetTick>
 80083b8:	1b80      	subs	r0, r0, r6
 80083ba:	2802      	cmp	r0, #2
 80083bc:	f200 80aa 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083c0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80083c4:	079f      	lsls	r7, r3, #30
 80083c6:	d5f5      	bpl.n	80083b4 <HAL_RCC_OscConfig+0x1e4>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083c8:	69e0      	ldr	r0, [r4, #28]
 80083ca:	b330      	cbz	r0, 800841a <HAL_RCC_OscConfig+0x24a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083cc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80083d0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80083d4:	68ab      	ldr	r3, [r5, #8]
 80083d6:	f003 030c 	and.w	r3, r3, #12
 80083da:	2b0c      	cmp	r3, #12
 80083dc:	f000 8146 	beq.w	800866c <HAL_RCC_OscConfig+0x49c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e0:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083e2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80083e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083ea:	f000 80eb 	beq.w	80085c4 <HAL_RCC_OscConfig+0x3f4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80083ee:	68eb      	ldr	r3, [r5, #12]
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083f6:	68eb      	ldr	r3, [r5, #12]
 80083f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80083fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008400:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008402:	f7fd fddf 	bl	8005fc4 <HAL_GetTick>
 8008406:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008408:	e004      	b.n	8008414 <HAL_RCC_OscConfig+0x244>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800840a:	f7fd fddb 	bl	8005fc4 <HAL_GetTick>
 800840e:	1b00      	subs	r0, r0, r4
 8008410:	2802      	cmp	r0, #2
 8008412:	d87f      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	019b      	lsls	r3, r3, #6
 8008418:	d4f7      	bmi.n	800840a <HAL_RCC_OscConfig+0x23a>
      }
    }
  }
  }

  return HAL_OK;
 800841a:	2000      	movs	r0, #0
}
 800841c:	b002      	add	sp, #8
 800841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8008422:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008426:	f023 0301 	bic.w	r3, r3, #1
 800842a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800842e:	f7fd fdc9 	bl	8005fc4 <HAL_GetTick>
 8008432:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008434:	e004      	b.n	8008440 <HAL_RCC_OscConfig+0x270>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008436:	f7fd fdc5 	bl	8005fc4 <HAL_GetTick>
 800843a:	1b80      	subs	r0, r0, r6
 800843c:	2802      	cmp	r0, #2
 800843e:	d869      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008440:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008444:	0798      	lsls	r0, r3, #30
 8008446:	d4f6      	bmi.n	8008436 <HAL_RCC_OscConfig+0x266>
 8008448:	e74f      	b.n	80082ea <HAL_RCC_OscConfig+0x11a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800844a:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800844e:	2903      	cmp	r1, #3
 8008450:	f47f aed6 	bne.w	8008200 <HAL_RCC_OscConfig+0x30>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008458:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	0392      	lsls	r2, r2, #14
 8008460:	f57f aef4 	bpl.w	800824c <HAL_RCC_OscConfig+0x7c>
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	2a00      	cmp	r2, #0
 8008468:	f47f aef0 	bne.w	800824c <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 800846c:	2001      	movs	r0, #1
}
 800846e:	b002      	add	sp, #8
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008474:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008478:	2a02      	cmp	r2, #2
 800847a:	f47f aef7 	bne.w	800826c <HAL_RCC_OscConfig+0x9c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800847e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	055d      	lsls	r5, r3, #21
 800848a:	d502      	bpl.n	8008492 <HAL_RCC_OscConfig+0x2c2>
 800848c:	68e3      	ldr	r3, [r4, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0ec      	beq.n	800846c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008496:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800849a:	6920      	ldr	r0, [r4, #16]
 800849c:	684b      	ldr	r3, [r1, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800849e:	f240 5280 	movw	r2, #1408	; 0x580
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084a6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80084aa:	f2c2 0200 	movt	r2, #8192	; 0x2000
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ae:	604b      	str	r3, [r1, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80084b0:	6810      	ldr	r0, [r2, #0]
 80084b2:	f7fd fd3f 	bl	8005f34 <HAL_InitTick>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d1d8      	bne.n	800846c <HAL_RCC_OscConfig+0x29c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	071a      	lsls	r2, r3, #28
 80084be:	f57f af15 	bpl.w	80082ec <HAL_RCC_OscConfig+0x11c>
 80084c2:	e6f6      	b.n	80082b2 <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80084d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80084d4:	f7fd fd76 	bl	8005fc4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084d8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
        tickstart = HAL_GetTick();
 80084dc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084de:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80084e2:	e004      	b.n	80084ee <HAL_RCC_OscConfig+0x31e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084e4:	f7fd fd6e 	bl	8005fc4 <HAL_GetTick>
 80084e8:	1b40      	subs	r0, r0, r5
 80084ea:	2864      	cmp	r0, #100	; 0x64
 80084ec:	d812      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	039b      	lsls	r3, r3, #14
 80084f2:	d5f7      	bpl.n	80084e4 <HAL_RCC_OscConfig+0x314>
 80084f4:	e6a9      	b.n	800824a <HAL_RCC_OscConfig+0x7a>
        __HAL_RCC_HSI_DISABLE();
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80084fe:	f7fd fd61 	bl	8005fc4 <HAL_GetTick>
 8008502:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	0559      	lsls	r1, r3, #21
 8008508:	d5d7      	bpl.n	80084ba <HAL_RCC_OscConfig+0x2ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800850a:	f7fd fd5b 	bl	8005fc4 <HAL_GetTick>
 800850e:	1b80      	subs	r0, r0, r6
 8008510:	2802      	cmp	r0, #2
 8008512:	d9f7      	bls.n	8008504 <HAL_RCC_OscConfig+0x334>
            return HAL_TIMEOUT;
 8008514:	2003      	movs	r0, #3
}
 8008516:	b002      	add	sp, #8
 8008518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800851c:	2500      	movs	r5, #0
 800851e:	e6f9      	b.n	8008314 <HAL_RCC_OscConfig+0x144>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008524:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008528:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800852c:	f042 0201 	orr.w	r2, r2, #1
 8008530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8008534:	f7fd fd46 	bl	8005fc4 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008538:	f44f 5780 	mov.w	r7, #4096	; 0x1000
      tickstart = HAL_GetTick();
 800853c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800853e:	f2c4 0702 	movt	r7, #16386	; 0x4002
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008542:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008546:	e004      	b.n	8008552 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008548:	f7fd fd3c 	bl	8005fc4 <HAL_GetTick>
 800854c:	1b80      	subs	r0, r0, r6
 800854e:	4540      	cmp	r0, r8
 8008550:	d8e0      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008556:	0799      	lsls	r1, r3, #30
 8008558:	d5f6      	bpl.n	8008548 <HAL_RCC_OscConfig+0x378>
 800855a:	e70d      	b.n	8008378 <HAL_RCC_OscConfig+0x1a8>
      __HAL_RCC_HSI48_DISABLE();
 800855c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8008560:	f023 0301 	bic.w	r3, r3, #1
 8008564:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008568:	f7fd fd2c 	bl	8005fc4 <HAL_GetTick>
 800856c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800856e:	e004      	b.n	800857a <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008570:	f7fd fd28 	bl	8005fc4 <HAL_GetTick>
 8008574:	1b80      	subs	r0, r0, r6
 8008576:	2802      	cmp	r0, #2
 8008578:	d8cc      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800857a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800857e:	0798      	lsls	r0, r3, #30
 8008580:	d4f6      	bmi.n	8008570 <HAL_RCC_OscConfig+0x3a0>
 8008582:	e721      	b.n	80083c8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008584:	6833      	ldr	r3, [r6, #0]
 8008586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800858a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800858c:	f7fd fd1a 	bl	8005fc4 <HAL_GetTick>
 8008590:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008592:	6833      	ldr	r3, [r6, #0]
 8008594:	05d8      	lsls	r0, r3, #23
 8008596:	f53f aec5 	bmi.w	8008324 <HAL_RCC_OscConfig+0x154>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800859a:	f7fd fd13 	bl	8005fc4 <HAL_GetTick>
 800859e:	1bc0      	subs	r0, r0, r7
 80085a0:	2802      	cmp	r0, #2
 80085a2:	d9f6      	bls.n	8008592 <HAL_RCC_OscConfig+0x3c2>
 80085a4:	e7b6      	b.n	8008514 <HAL_RCC_OscConfig+0x344>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80085bc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085be:	e789      	b.n	80084d4 <HAL_RCC_OscConfig+0x304>
    return HAL_ERROR;
 80085c0:	2001      	movs	r0, #1
}
 80085c2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80085c4:	f7fd fcfe 	bl	8005fc4 <HAL_GetTick>
 80085c8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085ca:	e004      	b.n	80085d6 <HAL_RCC_OscConfig+0x406>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085cc:	f7fd fcfa 	bl	8005fc4 <HAL_GetTick>
 80085d0:	1b80      	subs	r0, r0, r6
 80085d2:	2802      	cmp	r0, #2
 80085d4:	d89e      	bhi.n	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085d6:	682b      	ldr	r3, [r5, #0]
 80085d8:	0199      	lsls	r1, r3, #6
 80085da:	d4f7      	bmi.n	80085cc <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085dc:	68e9      	ldr	r1, [r5, #12]
 80085de:	6a22      	ldr	r2, [r4, #32]
 80085e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085e2:	f248 030c 	movw	r3, #32780	; 0x800c
 80085e6:	f2c0 139f 	movt	r3, #415	; 0x19f
 80085ea:	400b      	ands	r3, r1
 80085ec:	4313      	orrs	r3, r2
 80085ee:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80085f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80085f6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80085fa:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80085fe:	3801      	subs	r0, #1
 8008600:	0849      	lsrs	r1, r1, #1
 8008602:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008606:	3901      	subs	r1, #1
 8008608:	0852      	lsrs	r2, r2, #1
 800860a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800860e:	3a01      	subs	r2, #1
 8008610:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008614:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800861c:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800861e:	68eb      	ldr	r3, [r5, #12]
 8008620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008624:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008626:	f7fd fccd 	bl	8005fc4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800862a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800862e:	f2c4 0602 	movt	r6, #16386	; 0x4002
        tickstart = HAL_GetTick();
 8008632:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008634:	e005      	b.n	8008642 <HAL_RCC_OscConfig+0x472>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008636:	f7fd fcc5 	bl	8005fc4 <HAL_GetTick>
 800863a:	1b00      	subs	r0, r0, r4
 800863c:	2802      	cmp	r0, #2
 800863e:	f63f af69 	bhi.w	8008514 <HAL_RCC_OscConfig+0x344>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008642:	6833      	ldr	r3, [r6, #0]
 8008644:	019a      	lsls	r2, r3, #6
 8008646:	d5f6      	bpl.n	8008636 <HAL_RCC_OscConfig+0x466>
 8008648:	e6e7      	b.n	800841a <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800864a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800864e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008652:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008656:	f042 0204 	orr.w	r2, r2, #4
 800865a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800865e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800866a:	e763      	b.n	8008534 <HAL_RCC_OscConfig+0x364>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800866c:	2801      	cmp	r0, #1
 800866e:	f43f aed5 	beq.w	800841c <HAL_RCC_OscConfig+0x24c>
      temp_pllckcfg = RCC->PLLCFGR;
 8008672:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008674:	6a22      	ldr	r2, [r4, #32]
 8008676:	f003 0103 	and.w	r1, r3, #3
 800867a:	4291      	cmp	r1, r2
 800867c:	f47f aef6 	bne.w	800846c <HAL_RCC_OscConfig+0x29c>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008680:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008682:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008686:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008688:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800868c:	f47f aeee 	bne.w	800846c <HAL_RCC_OscConfig+0x29c>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008690:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008692:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008696:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800869a:	f47f aee7 	bne.w	800846c <HAL_RCC_OscConfig+0x29c>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800869e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80086a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086a4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80086a8:	f47f aee0 	bne.w	800846c <HAL_RCC_OscConfig+0x29c>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80086ae:	0852      	lsrs	r2, r2, #1
 80086b0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80086b4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086b6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80086ba:	f47f aed7 	bne.w	800846c <HAL_RCC_OscConfig+0x29c>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80086c0:	0852      	lsrs	r2, r2, #1
 80086c2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80086c6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086c8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80086cc:	bf14      	ite	ne
 80086ce:	2001      	movne	r0, #1
 80086d0:	2000      	moveq	r0, #0
 80086d2:	e6a3      	b.n	800841c <HAL_RCC_OscConfig+0x24c>

080086d4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d6:	b087      	sub	sp, #28

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80086d8:	2302      	movs	r3, #2
 80086da:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80086dc:	2603      	movs	r6, #3
 80086de:	2300      	movs	r3, #0
 80086e0:	e9cd 3603 	strd	r3, r6, [sp, #12]
  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80086e4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80086e8:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
 80086ec:	4604      	mov	r4, r0
 80086ee:	4617      	mov	r7, r2
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80086f0:	f3c0 4003 	ubfx	r0, r0, #16, #4
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80086f4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80086f6:	2301      	movs	r3, #1
 80086f8:	4083      	lsls	r3, r0
 80086fa:	4313      	orrs	r3, r2
 80086fc:	64eb      	str	r3, [r5, #76]	; 0x4c
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80086fe:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008702:	b2a3      	uxth	r3, r4
 8008704:	9301      	str	r3, [sp, #4]
{
 8008706:	460e      	mov	r6, r1
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008708:	f3c4 5307 	ubfx	r3, r4, #20, #8
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800870c:	0280      	lsls	r0, r0, #10
 800870e:	a901      	add	r1, sp, #4
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008710:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008712:	f7ff fbbd 	bl	8007e90 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008716:	00e3      	lsls	r3, r4, #3
 8008718:	d405      	bmi.n	8008726 <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800871a:	68ab      	ldr	r3, [r5, #8]
 800871c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008720:	433b      	orrs	r3, r7
 8008722:	4333      	orrs	r3, r6
 8008724:	60ab      	str	r3, [r5, #8]
  }
}
 8008726:	b007      	add	sp, #28
 8008728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800872a:	bf00      	nop

0800872c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800872c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	f002 020c 	and.w	r2, r2, #12
 800873a:	2a04      	cmp	r2, #4
 800873c:	d027      	beq.n	800878e <HAL_RCC_GetSysClockFreq+0x62>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	f002 020c 	and.w	r2, r2, #12
 8008744:	2a08      	cmp	r2, #8
 8008746:	d022      	beq.n	800878e <HAL_RCC_GetSysClockFreq+0x62>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	f002 020c 	and.w	r2, r2, #12
 800874e:	2a0c      	cmp	r2, #12
 8008750:	d001      	beq.n	8008756 <HAL_RCC_GetSysClockFreq+0x2a>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8008752:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8008754:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008756:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008758:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800875a:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800875c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008760:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8008764:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008768:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800876a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800876e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008772:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800877a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008784:	3301      	adds	r3, #1
 8008786:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008788:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800878c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800878e:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8008792:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8008796:	4770      	bx	lr

08008798 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008798:	2800      	cmp	r0, #0
 800879a:	f000 8123 	beq.w	80089e4 <HAL_RCC_ClockConfig+0x24c>
{
 800879e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087aa:	460d      	mov	r5, r1
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	f002 020f 	and.w	r2, r2, #15
 80087b2:	428a      	cmp	r2, r1
 80087b4:	4604      	mov	r4, r0
 80087b6:	d20c      	bcs.n	80087d2 <HAL_RCC_ClockConfig+0x3a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	f022 020f 	bic.w	r2, r2, #15
 80087be:	430a      	orrs	r2, r1
 80087c0:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	428b      	cmp	r3, r1
 80087ca:	d002      	beq.n	80087d2 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 80087cc:	2001      	movs	r0, #1
}
 80087ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	07df      	lsls	r7, r3, #31
 80087d6:	f140 808d 	bpl.w	80088f4 <HAL_RCC_ClockConfig+0x15c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087da:	6867      	ldr	r7, [r4, #4]
 80087dc:	2f03      	cmp	r7, #3
 80087de:	f000 80ca 	beq.w	8008976 <HAL_RCC_ClockConfig+0x1de>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087ea:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087ec:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087ee:	f000 80a4 	beq.w	800893a <HAL_RCC_ClockConfig+0x1a2>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087f2:	055b      	lsls	r3, r3, #21
 80087f4:	d5ea      	bpl.n	80087cc <HAL_RCC_ClockConfig+0x34>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80087f6:	f7ff ff99 	bl	800872c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80087fa:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 80087fe:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
 8008802:	4298      	cmp	r0, r3
 8008804:	f240 80eb 	bls.w	80089de <HAL_RCC_ClockConfig+0x246>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800880c:	f2c4 0202 	movt	r2, #16386	; 0x4002
        hpre = RCC_SYSCLK_DIV2;
 8008810:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008814:	6893      	ldr	r3, [r2, #8]
 8008816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800881a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800881e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008820:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008824:	f2c4 0602 	movt	r6, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008828:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800882c:	68b3      	ldr	r3, [r6, #8]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	433b      	orrs	r3, r7
 8008834:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008836:	f7fd fbc5 	bl	8005fc4 <HAL_GetTick>
 800883a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883c:	e005      	b.n	800884a <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800883e:	f7fd fbc1 	bl	8005fc4 <HAL_GetTick>
 8008842:	1bc0      	subs	r0, r0, r7
 8008844:	4540      	cmp	r0, r8
 8008846:	f200 8093 	bhi.w	8008970 <HAL_RCC_ClockConfig+0x1d8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884a:	68b3      	ldr	r3, [r6, #8]
 800884c:	6862      	ldr	r2, [r4, #4]
 800884e:	f003 030c 	and.w	r3, r3, #12
 8008852:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008856:	d1f2      	bne.n	800883e <HAL_RCC_ClockConfig+0xa6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	079f      	lsls	r7, r3, #30
 800885c:	d44c      	bmi.n	80088f8 <HAL_RCC_ClockConfig+0x160>
    if(hpre == RCC_SYSCLK_DIV2)
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	d003      	beq.n	800886c <HAL_RCC_ClockConfig+0xd4>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008864:	68b3      	ldr	r3, [r6, #8]
 8008866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800886a:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800886c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8008870:	f2c4 0802 	movt	r8, #16386	; 0x4002
 8008874:	f8d8 3000 	ldr.w	r3, [r8]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	42ab      	cmp	r3, r5
 800887e:	d860      	bhi.n	8008942 <HAL_RCC_ClockConfig+0x1aa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	075a      	lsls	r2, r3, #29
 8008884:	d509      	bpl.n	800889a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800888a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800888e:	68e0      	ldr	r0, [r4, #12]
 8008890:	688a      	ldr	r2, [r1, #8]
 8008892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008896:	4302      	orrs	r2, r0
 8008898:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800889a:	071b      	lsls	r3, r3, #28
 800889c:	d50a      	bpl.n	80088b4 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800889e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088a6:	6921      	ldr	r1, [r4, #16]
 80088a8:	6893      	ldr	r3, [r2, #8]
 80088aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80088ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80088b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088b4:	f7ff ff3a 	bl	800872c <HAL_RCC_GetSysClockFreq>
 80088b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088c0:	f24f 1218 	movw	r2, #61720	; 0xf118
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f6c0 0200 	movt	r2, #2048	; 0x800
 80088ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
  return HAL_InitTick(uwTickPrio);
 80088ce:	f240 5180 	movw	r1, #1408	; 0x580
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088d2:	5cd2      	ldrb	r2, [r2, r3]
 80088d4:	f240 5378 	movw	r3, #1400	; 0x578
 80088d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  return HAL_InitTick(uwTickPrio);
 80088dc:	f2c2 0100 	movt	r1, #8192	; 0x2000
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088e0:	f002 021f 	and.w	r2, r2, #31
 80088e4:	fa20 f202 	lsr.w	r2, r0, r2
 80088e8:	601a      	str	r2, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80088ea:	6808      	ldr	r0, [r1, #0]
}
 80088ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80088f0:	f7fd bb20 	b.w	8005f34 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f4:	079e      	lsls	r6, r3, #30
 80088f6:	d5b9      	bpl.n	800886c <HAL_RCC_ClockConfig+0xd4>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f8:	0758      	lsls	r0, r3, #29
 80088fa:	d507      	bpl.n	800890c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008900:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008904:	6891      	ldr	r1, [r2, #8]
 8008906:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
 800890a:	6091      	str	r1, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800890c:	0719      	lsls	r1, r3, #28
 800890e:	d509      	bpl.n	8008924 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008914:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008918:	6893      	ldr	r3, [r2, #8]
 800891a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800891e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008922:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008928:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800892c:	68a1      	ldr	r1, [r4, #8]
 800892e:	6893      	ldr	r3, [r2, #8]
 8008930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008934:	430b      	orrs	r3, r1
 8008936:	6093      	str	r3, [r2, #8]
 8008938:	e798      	b.n	800886c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800893a:	039a      	lsls	r2, r3, #14
 800893c:	f53f af5b 	bmi.w	80087f6 <HAL_RCC_ClockConfig+0x5e>
 8008940:	e744      	b.n	80087cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008942:	f8d8 3000 	ldr.w	r3, [r8]
 8008946:	f023 030f 	bic.w	r3, r3, #15
 800894a:	432b      	orrs	r3, r5
 800894c:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8008950:	f7fd fb38 	bl	8005fc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008954:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008958:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800895a:	f8d8 3000 	ldr.w	r3, [r8]
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	42ab      	cmp	r3, r5
 8008964:	d08c      	beq.n	8008880 <HAL_RCC_ClockConfig+0xe8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008966:	f7fd fb2d 	bl	8005fc4 <HAL_GetTick>
 800896a:	1b80      	subs	r0, r0, r6
 800896c:	42b8      	cmp	r0, r7
 800896e:	d9f4      	bls.n	800895a <HAL_RCC_ClockConfig+0x1c2>
        return HAL_TIMEOUT;
 8008970:	2003      	movs	r0, #3
}
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008976:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800897a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800897e:	6811      	ldr	r1, [r2, #0]
 8008980:	0188      	lsls	r0, r1, #6
 8008982:	f57f af23 	bpl.w	80087cc <HAL_RCC_ClockConfig+0x34>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008986:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008988:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800898a:	68d2      	ldr	r2, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800898c:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008990:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008994:	f44f 5010 	mov.w	r0, #9216	; 0x2400
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008998:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800899a:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800899e:	fbb0 f0f1 	udiv	r0, r0, r1
 80089a2:	fb00 f202 	mul.w	r2, r0, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80089aa:	f2c4 0002 	movt	r0, #16386	; 0x4002
      if(pllfreq > 80000000U)
 80089ae:	f44f 4634 	mov.w	r6, #46080	; 0xb400
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089b2:	68c1      	ldr	r1, [r0, #12]
 80089b4:	f3c1 6141 	ubfx	r1, r1, #25, #2
      if(pllfreq > 80000000U)
 80089b8:	f2c0 46c4 	movt	r6, #1220	; 0x4c4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089bc:	3101      	adds	r1, #1
 80089be:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80089c0:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80089c4:	42b2      	cmp	r2, r6
 80089c6:	d90a      	bls.n	80089de <HAL_RCC_ClockConfig+0x246>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80089c8:	6882      	ldr	r2, [r0, #8]
 80089ca:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80089ce:	f43f af1b 	beq.w	8008808 <HAL_RCC_ClockConfig+0x70>
 80089d2:	0799      	lsls	r1, r3, #30
 80089d4:	d503      	bpl.n	80089de <HAL_RCC_ClockConfig+0x246>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f43f af15 	beq.w	8008808 <HAL_RCC_ClockConfig+0x70>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80089de:	f04f 0900 	mov.w	r9, #0
 80089e2:	e71d      	b.n	8008820 <HAL_RCC_ClockConfig+0x88>
    return HAL_ERROR;
 80089e4:	2001      	movs	r0, #1
}
 80089e6:	4770      	bx	lr

080089e8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80089e8:	f240 5378 	movw	r3, #1400	; 0x578
 80089ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	4770      	bx	lr

080089f4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80089f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089fc:	f24f 1128 	movw	r1, #61736	; 0xf128
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f6c0 0100 	movt	r1, #2048	; 0x800
  return SystemCoreClock;
 8008a06:	f240 5278 	movw	r2, #1400	; 0x578
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return SystemCoreClock;
 8008a0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a12:	5ccb      	ldrb	r3, [r1, r3]
 8008a14:	6810      	ldr	r0, [r2, #0]
 8008a16:	f003 031f 	and.w	r3, r3, #31
}
 8008a1a:	40d8      	lsrs	r0, r3
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop

08008a20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a28:	f24f 1128 	movw	r1, #61736	; 0xf128
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f6c0 0100 	movt	r1, #2048	; 0x800
  return SystemCoreClock;
 8008a32:	f240 5278 	movw	r2, #1400	; 0x578
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a36:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  return SystemCoreClock;
 8008a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008a3e:	5ccb      	ldrb	r3, [r1, r3]
 8008a40:	6810      	ldr	r0, [r2, #0]
 8008a42:	f003 031f 	and.w	r3, r3, #31
}
 8008a46:	40d8      	lsrs	r0, r3
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a50:	6803      	ldr	r3, [r0, #0]
{
 8008a52:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a54:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8008a58:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a5a:	d065      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a66:	00d5      	lsls	r5, r2, #3
 8008a68:	f140 8145 	bpl.w	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    FlagStatus       pwrclkchanged = RESET;
 8008a6c:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a6e:	f44f 45e0 	mov.w	r5, #28672	; 0x7000
 8008a72:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a7e:	f7fd faa1 	bl	8005fc4 <HAL_GetTick>
 8008a82:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a84:	e005      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a86:	f7fd fa9d 	bl	8005fc4 <HAL_GetTick>
 8008a8a:	1b83      	subs	r3, r0, r6
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	f200 813d 	bhi.w	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a92:	682b      	ldr	r3, [r5, #0]
 8008a94:	05d8      	lsls	r0, r3, #23
 8008a96:	d5f6      	bpl.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a98:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8008a9c:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8008aa0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008aa4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008aa8:	d027      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xae>
 8008aaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d025      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ab0:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ab4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008abc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008acc:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ad0:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8008ad2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ad6:	f140 813b 	bpl.w	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x304>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ada:	f7fd fa73 	bl	8005fc4 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ade:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8008ae2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ae4:	e005      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae6:	f7fd fa6d 	bl	8005fc4 <HAL_GetTick>
 8008aea:	1b80      	subs	r0, r0, r6
 8008aec:	4540      	cmp	r0, r8
 8008aee:	f200 810d 	bhi.w	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008af2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8008af6:	079b      	lsls	r3, r3, #30
 8008af8:	d5f5      	bpl.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b00:	f2c4 0102 	movt	r1, #16386	; 0x4002
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b04:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8008b0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b14:	b13f      	cbz	r7, 8008b26 <HAL_RCCEx_PeriphCLKConfig+0xda>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008b24:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	07de      	lsls	r6, r3, #31
 8008b2a:	d50b      	bpl.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b30:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008b34:	6865      	ldr	r5, [r4, #4]
 8008b36:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b3a:	f022 0203 	bic.w	r2, r2, #3
 8008b3e:	432a      	orrs	r2, r5
 8008b40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b44:	079d      	lsls	r5, r3, #30
 8008b46:	d50b      	bpl.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b4c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008b50:	68a5      	ldr	r5, [r4, #8]
 8008b52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b56:	f022 020c 	bic.w	r2, r2, #12
 8008b5a:	432a      	orrs	r2, r5
 8008b5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b60:	0759      	lsls	r1, r3, #29
 8008b62:	d50b      	bpl.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b68:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008b6c:	68e5      	ldr	r5, [r4, #12]
 8008b6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b72:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008b76:	432a      	orrs	r2, r5
 8008b78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b7c:	071a      	lsls	r2, r3, #28
 8008b7e:	d50b      	bpl.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b84:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008b88:	6925      	ldr	r5, [r4, #16]
 8008b8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008b8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008b92:	432a      	orrs	r2, r5
 8008b94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b98:	069f      	lsls	r7, r3, #26
 8008b9a:	d50b      	bpl.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ba0:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008ba4:	6965      	ldr	r5, [r4, #20]
 8008ba6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008baa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008bae:	432a      	orrs	r2, r5
 8008bb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bb4:	065e      	lsls	r6, r3, #25
 8008bb6:	d50b      	bpl.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008bbc:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008bc0:	69a5      	ldr	r5, [r4, #24]
 8008bc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008bc6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008bca:	432a      	orrs	r2, r5
 8008bcc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bd0:	061d      	lsls	r5, r3, #24
 8008bd2:	d50b      	bpl.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008bd8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008bdc:	69e5      	ldr	r5, [r4, #28]
 8008bde:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008be2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008be6:	432a      	orrs	r2, r5
 8008be8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bec:	05d9      	lsls	r1, r3, #23
 8008bee:	d50b      	bpl.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008bf4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008bf8:	6a25      	ldr	r5, [r4, #32]
 8008bfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008bfe:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008c02:	432a      	orrs	r2, r5
 8008c04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d50b      	bpl.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c10:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008c14:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c16:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c1a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008c1e:	432a      	orrs	r2, r5
 8008c20:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c24:	055f      	lsls	r7, r3, #21
 8008c26:	d50e      	bpl.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c2c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008c30:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008c32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c36:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008c3a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c3c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c40:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c44:	d064      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c46:	051e      	lsls	r6, r3, #20
 8008c48:	d50e      	bpl.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c4e:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008c52:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008c54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c58:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008c5c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c5e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c66:	d058      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c68:	04dd      	lsls	r5, r3, #19
 8008c6a:	d50e      	bpl.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c70:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008c74:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008c76:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c7a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008c7e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c80:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c88:	d04c      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c8a:	0499      	lsls	r1, r3, #18
 8008c8c:	d50e      	bpl.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c92:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008c96:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008c98:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008c9c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008ca0:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ca2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ca6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008caa:	d040      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cac:	045a      	lsls	r2, r3, #17
 8008cae:	d50e      	bpl.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008cb4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8008cb8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008cba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008cbe:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008cc2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008cc4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cc8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ccc:	d034      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cce:	041b      	lsls	r3, r3, #16
 8008cd0:	d50e      	bpl.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008cd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008cd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008cdc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ce0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008ce4:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ce6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008cea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008cee:	d028      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  }

#endif /* QUADSPI */

  return status;
}
 8008cf0:	b002      	add	sp, #8
 8008cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008cfc:	659a      	str	r2, [r3, #88]	; 0x58
 8008cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008d08:	2701      	movs	r7, #1
 8008d0a:	e6b0      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x22>
      status = ret;
 8008d0c:	2003      	movs	r0, #3
 8008d0e:	e701      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d10:	68ca      	ldr	r2, [r1, #12]
 8008d12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d16:	60ca      	str	r2, [r1, #12]
 8008d18:	e795      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d1a:	68ca      	ldr	r2, [r1, #12]
 8008d1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d20:	60ca      	str	r2, [r1, #12]
 8008d22:	e7a1      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d24:	68ca      	ldr	r2, [r1, #12]
 8008d26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d2a:	60ca      	str	r2, [r1, #12]
 8008d2c:	e7ad      	b.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d2e:	68ca      	ldr	r2, [r1, #12]
 8008d30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d34:	60ca      	str	r2, [r1, #12]
 8008d36:	e7b9      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d38:	68ca      	ldr	r2, [r1, #12]
 8008d3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008d3e:	60ca      	str	r2, [r1, #12]
 8008d40:	e7c5      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d42:	68d3      	ldr	r3, [r2, #12]
 8008d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d48:	60d3      	str	r3, [r2, #12]
}
 8008d4a:	b002      	add	sp, #8
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	4613      	mov	r3, r2
 8008d52:	e6d3      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xb0>

08008d54 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d58:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008d5a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008d5c:	4617      	mov	r7, r2
 8008d5e:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8008d60:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008d64:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008d66:	f7fd f92d 	bl	8005fc4 <HAL_GetTick>
 8008d6a:	442f      	add	r7, r5
 8008d6c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8008d6e:	f7fd f929 	bl	8005fc4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d72:	f240 5378 	movw	r3, #1400	; 0x578
 8008d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008d7a:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008d82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008d86:	0d1b      	lsrs	r3, r3, #20
 8008d88:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8008d8c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008d8e:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008d90:	4622      	mov	r2, r4
 8008d92:	1c69      	adds	r1, r5, #1
 8008d94:	6893      	ldr	r3, [r2, #8]
 8008d96:	d110      	bne.n	8008dba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
 8008d98:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008d9c:	d009      	beq.n	8008db2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008d9e:	7b23      	ldrb	r3, [r4, #12]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008da6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8008daa:	6893      	ldr	r3, [r2, #8]
 8008dac:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008db0:	d1f5      	bne.n	8008d9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x4a>
      }
      count--;
    }
  }

  return HAL_OK;
 8008db2:	2000      	movs	r0, #0
}
 8008db4:	b002      	add	sp, #8
 8008db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8008dba:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8008dbe:	d0f8      	beq.n	8008db2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5e>
      tmpreg8 = *ptmpreg8;
 8008dc0:	7b23      	ldrb	r3, [r4, #12]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8008dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dcc:	f7fd f8fa 	bl	8005fc4 <HAL_GetTick>
 8008dd0:	eba0 0008 	sub.w	r0, r0, r8
 8008dd4:	42b8      	cmp	r0, r7
 8008dd6:	d209      	bcs.n	8008dec <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
      if (count == 0U)
 8008dd8:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dda:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8008ddc:	2b00      	cmp	r3, #0
      count--;
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8008de4:	bf08      	it	eq
 8008de6:	2700      	moveq	r7, #0
      count--;
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	e7d2      	b.n	8008d92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dec:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008df2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008dfa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dfc:	d013      	beq.n	8008e26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dfe:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008e00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008e04:	d107      	bne.n	8008e16 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
          SPI_RESET_CRC(hspi);
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e14:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008e16:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8008e18:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008e1a:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008e1e:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008e22:	2003      	movs	r0, #3
 8008e24:	e7c6      	b.n	8008db4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e26:	68b2      	ldr	r2, [r6, #8]
 8008e28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008e2c:	d002      	beq.n	8008e34 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008e32:	d1e4      	bne.n	8008dfe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          __HAL_SPI_DISABLE(hspi);
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e7df      	b.n	8008dfe <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
 8008e3e:	bf00      	nop

08008e40 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	460c      	mov	r4, r1
 8008e46:	4606      	mov	r6, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e48:	f7fd f8bc 	bl	8005fc4 <HAL_GetTick>
 8008e4c:	3464      	adds	r4, #100	; 0x64
 8008e4e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8008e50:	f7fd f8b8 	bl	8005fc4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e54:	f240 5378 	movw	r3, #1400	; 0x578
 8008e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e5c:	6832      	ldr	r2, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008e64:	fb04 f303 	mul.w	r3, r4, r3
 8008e68:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e6a:	6893      	ldr	r3, [r2, #8]
 8008e6c:	061a      	lsls	r2, r3, #24
 8008e6e:	d52f      	bpl.n	8008ed0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
 8008e70:	4605      	mov	r5, r0
 8008e72:	e00a      	b.n	8008e8a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4a>
      if (count == 0U)
 8008e74:	9a01      	ldr	r2, [sp, #4]
      count--;
 8008e76:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e78:	6831      	ldr	r1, [r6, #0]
      count--;
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e7e:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8008e80:	2a00      	cmp	r2, #0
 8008e82:	bf08      	it	eq
 8008e84:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e86:	061b      	lsls	r3, r3, #24
 8008e88:	d522      	bpl.n	8008ed0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e8a:	f7fd f89b 	bl	8005fc4 <HAL_GetTick>
 8008e8e:	1b43      	subs	r3, r0, r5
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	d3ef      	bcc.n	8008e74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e94:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e98:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e9a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ea2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ea4:	d017      	beq.n	8008ed6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ea6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008ea8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008eac:	d107      	bne.n	8008ebe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ebc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008ebe:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8008ec4:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008ec8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
}
 8008ecc:	b002      	add	sp, #8
 8008ece:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8008ed0:	2000      	movs	r0, #0
}
 8008ed2:	b002      	add	sp, #8
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed6:	68b2      	ldr	r2, [r6, #8]
 8008ed8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008edc:	d002      	beq.n	8008ee4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ede:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008ee2:	d1e0      	bne.n	8008ea6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e7db      	b.n	8008ea6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 8008eee:	bf00      	nop

08008ef0 <SPI_EndRxTxTransaction.constprop.0>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8008ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ef2:	b083      	sub	sp, #12
  __IO uint8_t  tmpreg8 = 0;
 8008ef4:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8008ef6:	460f      	mov	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8008ef8:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8008efc:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008efe:	f7fd f861 	bl	8005fc4 <HAL_GetTick>
 8008f02:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8008f06:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8008f08:	f7fd f85c 	bl	8005fc4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f0c:	f240 5378 	movw	r3, #1400	; 0x578
 8008f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008f1e:	0d1b      	lsrs	r3, r3, #20
 8008f20:	fb04 f303 	mul.w	r3, r4, r3
 8008f24:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008f2e:	d034      	beq.n	8008f9a <SPI_EndRxTxTransaction.constprop.0+0xaa>
 8008f30:	4606      	mov	r6, r0
 8008f32:	e00b      	b.n	8008f4c <SPI_EndRxTxTransaction.constprop.0+0x5c>
      if (count == 0U)
 8008f34:	9a01      	ldr	r2, [sp, #4]
      count--;
 8008f36:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f38:	6829      	ldr	r1, [r5, #0]
      count--;
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f3e:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8008f40:	2a00      	cmp	r2, #0
 8008f42:	bf08      	it	eq
 8008f44:	2400      	moveq	r4, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8008f46:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008f4a:	d026      	beq.n	8008f9a <SPI_EndRxTxTransaction.constprop.0+0xaa>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f4c:	f7fd f83a 	bl	8005fc4 <HAL_GetTick>
 8008f50:	1b83      	subs	r3, r0, r6
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d8ee      	bhi.n	8008f34 <SPI_EndRxTxTransaction.constprop.0+0x44>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f56:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f5a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f5c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f64:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f66:	d02c      	beq.n	8008fc2 <SPI_EndRxTxTransaction.constprop.0+0xd2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008f6a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008f6e:	d107      	bne.n	8008f80 <SPI_EndRxTxTransaction.constprop.0+0x90>
          SPI_RESET_CRC(hspi);
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f7e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f86:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8008f88:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f8a:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8008f8e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008f90:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f94:	662b      	str	r3, [r5, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8008f96:	b003      	add	sp, #12
 8008f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7ff ff4f 	bl	8008e40 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8008fa2:	b938      	cbnz	r0, 8008fb4 <SPI_EndRxTxTransaction.constprop.0+0xc4>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	2164      	movs	r1, #100	; 0x64
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff fed3 	bl	8008d54 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008fae:	b908      	cbnz	r0, 8008fb4 <SPI_EndRxTxTransaction.constprop.0+0xc4>
}
 8008fb0:	b003      	add	sp, #12
 8008fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fb4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fb6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fb8:	f043 0320 	orr.w	r3, r3, #32
 8008fbc:	662b      	str	r3, [r5, #96]	; 0x60
}
 8008fbe:	b003      	add	sp, #12
 8008fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fc2:	68aa      	ldr	r2, [r5, #8]
 8008fc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008fc8:	d002      	beq.n	8008fd0 <SPI_EndRxTxTransaction.constprop.0+0xe0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008fce:	d1cb      	bne.n	8008f68 <SPI_EndRxTxTransaction.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	e7c6      	b.n	8008f68 <SPI_EndRxTxTransaction.constprop.0+0x78>
 8008fda:	bf00      	nop

08008fdc <HAL_SPI_Init>:
  if (hspi == NULL)
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d077      	beq.n	80090d0 <HAL_SPI_Init+0xf4>
{
 8008fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fe4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d058      	beq.n	800909e <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fec:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ff2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ffa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d059      	beq.n	80090b6 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8009002:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009004:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009006:	2302      	movs	r3, #2
 8009008:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800900c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800900e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8009012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009016:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009018:	d947      	bls.n	80090aa <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800901a:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 800901e:	d159      	bne.n	80090d4 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009020:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009022:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009024:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8009028:	6862      	ldr	r2, [r4, #4]
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8009030:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009034:	431a      	orrs	r2, r3
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	4313      	orrs	r3, r2
 800903e:	6962      	ldr	r2, [r4, #20]
 8009040:	f002 0201 	and.w	r2, r2, #1
 8009044:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009048:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 800904c:	f003 0308 	and.w	r3, r3, #8
 8009050:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009054:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009056:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800905a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800905e:	69a6      	ldr	r6, [r4, #24]
 8009060:	6a23      	ldr	r3, [r4, #32]
 8009062:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8009066:	f406 7300 	and.w	r3, r6, #512	; 0x200
 800906a:	4313      	orrs	r3, r2
 800906c:	ea43 0308 	orr.w	r3, r3, r8
 8009070:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009072:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009074:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009076:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800907a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800907c:	ea4e 0306 	orr.w	r3, lr, r6
 8009080:	ea43 030c 	orr.w	r3, r3, ip
 8009084:	4303      	orrs	r3, r0
 8009086:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009088:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800908a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800908c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8009090:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009092:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009094:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009096:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800909e:	6843      	ldr	r3, [r0, #4]
 80090a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090a4:	d0a5      	beq.n	8008ff2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090a6:	61c6      	str	r6, [r0, #28]
 80090a8:	e7a3      	b.n	8008ff2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090aa:	d00b      	beq.n	80090c4 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090b0:	2500      	movs	r5, #0
 80090b2:	62a5      	str	r5, [r4, #40]	; 0x28
 80090b4:	e7b8      	b.n	8009028 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 80090b6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7fc fafa 	bl	80056b4 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090c2:	e79e      	b.n	8009002 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090c4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090ca:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 80090ce:	e7ab      	b.n	8009028 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80090d0:	2001      	movs	r0, #1
}
 80090d2:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090d4:	2000      	movs	r0, #0
 80090d6:	e7eb      	b.n	80090b0 <HAL_SPI_Init+0xd4>

080090d8 <HAL_SPI_TransmitReceive_DMA>:
{
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80090dc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80090e0:	2801      	cmp	r0, #1
 80090e2:	f000 808c 	beq.w	80091fe <HAL_SPI_TransmitReceive_DMA+0x126>
 80090e6:	2001      	movs	r0, #1
 80090e8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 80090ec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80090f0:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80090f2:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80090f4:	fa5f fc80 	uxtb.w	ip, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80090f8:	d00d      	beq.n	8009116 <HAL_SPI_TransmitReceive_DMA+0x3e>
 80090fa:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80090fe:	d004      	beq.n	800910a <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 8009100:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8009102:	2300      	movs	r3, #0
 8009104:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009108:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800910a:	68a0      	ldr	r0, [r4, #8]
 800910c:	2800      	cmp	r0, #0
 800910e:	d1f7      	bne.n	8009100 <HAL_SPI_TransmitReceive_DMA+0x28>
 8009110:	f1bc 0f04 	cmp.w	ip, #4
 8009114:	d1f4      	bne.n	8009100 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009116:	2900      	cmp	r1, #0
 8009118:	d06f      	beq.n	80091fa <HAL_SPI_TransmitReceive_DMA+0x122>
 800911a:	2a00      	cmp	r2, #0
 800911c:	d06d      	beq.n	80091fa <HAL_SPI_TransmitReceive_DMA+0x122>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d06b      	beq.n	80091fa <HAL_SPI_TransmitReceive_DMA+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009122:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009126:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009128:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800912a:	bf1c      	itt	ne
 800912c:	2005      	movne	r0, #5
 800912e:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009132:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferSize  = Size;
 8009134:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009136:	2000      	movs	r0, #0
 8009138:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800913a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800913c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009140:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009144:	6848      	ldr	r0, [r1, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009146:	6422      	str	r2, [r4, #64]	; 0x40
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009148:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
  hspi->RxXferSize  = Size;
 800914c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009150:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009152:	68e0      	ldr	r0, [r4, #12]
 8009154:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009158:	d95c      	bls.n	8009214 <HAL_SPI_TransmitReceive_DMA+0x13c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800915a:	684b      	ldr	r3, [r1, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800915c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800915e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009162:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009164:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009168:	f249 25a1 	movw	r5, #37537	; 0x92a1
 800916c:	2b04      	cmp	r3, #4
 800916e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8009172:	f249 23b1 	movw	r3, #37553	; 0x92b1
 8009176:	f6c0 0300 	movt	r3, #2048	; 0x800
 800917a:	bf08      	it	eq
 800917c:	462b      	moveq	r3, r5
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800917e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009180:	f249 23c1 	movw	r3, #37569	; 0x92c1
 8009184:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009188:	6343      	str	r3, [r0, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800918a:	f249 2ce5 	movw	ip, #37605	; 0x92e5
  hspi->hdmarx->XferAbortCallback = NULL;
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	6383      	str	r3, [r0, #56]	; 0x38
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009194:	f249 4549 	movw	r5, #37961	; 0x9449
                                 hspi->RxXferCount))
 8009198:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800919c:	f6c0 0c00 	movt	ip, #2048	; 0x800
 80091a0:	f6c0 0500 	movt	r5, #2048	; 0x800
 80091a4:	bf08      	it	eq
 80091a6:	4665      	moveq	r5, ip
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091a8:	310c      	adds	r1, #12
 80091aa:	b29b      	uxth	r3, r3
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091ac:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091ae:	f7fd ffe5 	bl	800717c <HAL_DMA_Start_IT>
 80091b2:	bb30      	cbnz	r0, 8009202 <HAL_SPI_TransmitReceive_DMA+0x12a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091b4:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80091b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091b8:	6853      	ldr	r3, [r2, #4]
 80091ba:	f043 0301 	orr.w	r3, r3, #1
 80091be:	6053      	str	r3, [r2, #4]
                                 hspi->TxXferCount))
 80091c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80091c2:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback     = NULL;
 80091c4:	e9c1 000b 	strd	r0, r0, [r1, #44]	; 0x2c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80091c8:	e9c1 000d 	strd	r0, r0, [r1, #52]	; 0x34
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4608      	mov	r0, r1
 80091d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091d2:	f7fd ffd3 	bl	800717c <HAL_DMA_Start_IT>
 80091d6:	b9a0      	cbnz	r0, 8009202 <HAL_SPI_TransmitReceive_DMA+0x12a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	0652      	lsls	r2, r2, #25
 80091de:	d403      	bmi.n	80091e8 <HAL_SPI_TransmitReceive_DMA+0x110>
    __HAL_SPI_ENABLE(hspi);
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e6:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	f042 0220 	orr.w	r2, r2, #32
 80091ee:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	f042 0202 	orr.w	r2, r2, #2
 80091f6:	605a      	str	r2, [r3, #4]
 80091f8:	e783      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x2a>
    errorcode = HAL_ERROR;
 80091fa:	2001      	movs	r0, #1
 80091fc:	e781      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x2a>
  __HAL_LOCK(hspi);
 80091fe:	2002      	movs	r0, #2
}
 8009200:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009202:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8009204:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009206:	f043 0310 	orr.w	r3, r3, #16
 800920a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800920c:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 800920e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 8009212:	e776      	b.n	8009102 <HAL_SPI_TransmitReceive_DMA+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009214:	6848      	ldr	r0, [r1, #4]
 8009216:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800921a:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800921c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800921e:	6980      	ldr	r0, [r0, #24]
 8009220:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009224:	d018      	beq.n	8009258 <HAL_SPI_TransmitReceive_DMA+0x180>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009226:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009228:	6983      	ldr	r3, [r0, #24]
 800922a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922e:	d199      	bne.n	8009164 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009230:	684b      	ldr	r3, [r1, #4]
 8009232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009236:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009238:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800923c:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009240:	684b      	ldr	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009242:	d115      	bne.n	8009270 <HAL_SPI_TransmitReceive_DMA+0x198>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009248:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800924a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800924e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009252:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009256:	e785      	b.n	8009164 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009258:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800925c:	684b      	ldr	r3, [r1, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800925e:	d112      	bne.n	8009286 <HAL_SPI_TransmitReceive_DMA+0x1ae>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009260:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009264:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009266:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009268:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800926c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800926e:	e7da      	b.n	8009226 <HAL_SPI_TransmitReceive_DMA+0x14e>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009274:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009276:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800927a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800927e:	3301      	adds	r3, #1
 8009280:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8009284:	e76e      	b.n	8009164 <HAL_SPI_TransmitReceive_DMA+0x8c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800928a:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800928c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800928e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8009292:	3301      	adds	r3, #1
 8009294:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009296:	e7c6      	b.n	8009226 <HAL_SPI_TransmitReceive_DMA+0x14e>

08009298 <HAL_SPI_RxCpltCallback>:
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop

0800929c <HAL_SPI_RxHalfCpltCallback>:
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop

080092a0 <SPI_DMAHalfReceiveCplt>:
{
 80092a0:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80092a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80092a4:	f7ff fffa 	bl	800929c <HAL_SPI_RxHalfCpltCallback>
}
 80092a8:	bd08      	pop	{r3, pc}
 80092aa:	bf00      	nop

080092ac <HAL_SPI_TxRxHalfCpltCallback>:
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop

080092b0 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80092b0:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80092b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80092b4:	f7ff fffa 	bl	80092ac <HAL_SPI_TxRxHalfCpltCallback>
}
 80092b8:	bd08      	pop	{r3, pc}
 80092ba:	bf00      	nop

080092bc <HAL_SPI_ErrorCallback>:
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop

080092c0 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092c2:	6802      	ldr	r2, [r0, #0]
{
 80092c4:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092c6:	6853      	ldr	r3, [r2, #4]
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092ce:	6e03      	ldr	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80092d0:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092d2:	f043 0310 	orr.w	r3, r3, #16
 80092d6:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80092d8:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80092dc:	f7ff ffee 	bl	80092bc <HAL_SPI_ErrorCallback>
}
 80092e0:	bd08      	pop	{r3, pc}
 80092e2:	bf00      	nop

080092e4 <SPI_DMAReceiveCplt>:
{
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	4604      	mov	r4, r0
 80092e8:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092ea:	6a85      	ldr	r5, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80092ec:	f7fc fe6a 	bl	8005fc4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	0699      	lsls	r1, r3, #26
 80092f6:	d460      	bmi.n	80093ba <SPI_DMAReceiveCplt+0xd6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80092f8:	682b      	ldr	r3, [r5, #0]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80092fa:	68a9      	ldr	r1, [r5, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	f022 0220 	bic.w	r2, r2, #32
 8009302:	4607      	mov	r7, r0
 8009304:	605a      	str	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009306:	2900      	cmp	r1, #0
 8009308:	d05c      	beq.n	80093c4 <SPI_DMAReceiveCplt+0xe0>
 800930a:	6868      	ldr	r0, [r5, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800930c:	685a      	ldr	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800930e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009312:	f022 0201 	bic.w	r2, r2, #1
 8009316:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009318:	d079      	beq.n	800940e <SPI_DMAReceiveCplt+0x12a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800931a:	f7fc fe53 	bl	8005fc4 <HAL_GetTick>
 800931e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8009322:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8009324:	f7fc fe4e 	bl	8005fc4 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009328:	f240 5378 	movw	r3, #1400	; 0x578
 800932c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  tmp_tickstart = HAL_GetTick();
 8009330:	4606      	mov	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009338:	fb04 f303 	mul.w	r3, r4, r3
 800933c:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	061a      	lsls	r2, r3, #24
 8009344:	d40b      	bmi.n	800935e <SPI_DMAReceiveCplt+0x7a>
 8009346:	e046      	b.n	80093d6 <SPI_DMAReceiveCplt+0xf2>
      if (count == 0U)
 8009348:	9a01      	ldr	r2, [sp, #4]
      count--;
 800934a:	9b01      	ldr	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800934c:	6829      	ldr	r1, [r5, #0]
      count--;
 800934e:	3b01      	subs	r3, #1
 8009350:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009352:	688b      	ldr	r3, [r1, #8]
        tmp_timeout = 0U;
 8009354:	2a00      	cmp	r2, #0
 8009356:	bf08      	it	eq
 8009358:	2400      	moveq	r4, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800935a:	061b      	lsls	r3, r3, #24
 800935c:	d53b      	bpl.n	80093d6 <SPI_DMAReceiveCplt+0xf2>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800935e:	f7fc fe31 	bl	8005fc4 <HAL_GetTick>
 8009362:	1b83      	subs	r3, r0, r6
 8009364:	42a3      	cmp	r3, r4
 8009366:	d3ef      	bcc.n	8009348 <SPI_DMAReceiveCplt+0x64>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009368:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800936c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800936e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009372:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009376:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009378:	d055      	beq.n	8009426 <SPI_DMAReceiveCplt+0x142>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800937a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800937c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009380:	d107      	bne.n	8009392 <SPI_DMAReceiveCplt+0xae>
          SPI_RESET_CRC(hspi);
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009390:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009392:	2301      	movs	r3, #1
 8009394:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009398:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 800939a:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800939c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 80093a0:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093a4:	662b      	str	r3, [r5, #96]	; 0x60
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093a6:	2320      	movs	r3, #32
 80093a8:	662b      	str	r3, [r5, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80093aa:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80093b2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093b6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80093b8:	bb23      	cbnz	r3, 8009404 <SPI_DMAReceiveCplt+0x120>
  HAL_SPI_RxCpltCallback(hspi);
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7ff ff6c 	bl	8009298 <HAL_SPI_RxCpltCallback>
}
 80093c0:	b003      	add	sp, #12
 80093c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093c4:	686a      	ldr	r2, [r5, #4]
 80093c6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093ca:	685a      	ldr	r2, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093cc:	d027      	beq.n	800941e <SPI_DMAReceiveCplt+0x13a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d4:	e7a1      	b.n	800931a <SPI_DMAReceiveCplt+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d6:	686b      	ldr	r3, [r5, #4]
 80093d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093dc:	d1e5      	bne.n	80093aa <SPI_DMAReceiveCplt+0xc6>
 80093de:	68ab      	ldr	r3, [r5, #8]
 80093e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e4:	d002      	beq.n	80093ec <SPI_DMAReceiveCplt+0x108>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ea:	d1de      	bne.n	80093aa <SPI_DMAReceiveCplt+0xc6>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093ec:	463a      	mov	r2, r7
 80093ee:	2164      	movs	r1, #100	; 0x64
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7ff fcaf 	bl	8008d54 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0d7      	beq.n	80093aa <SPI_DMAReceiveCplt+0xc6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093fa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80093fc:	f043 0320 	orr.w	r3, r3, #32
 8009400:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8009402:	e7d0      	b.n	80093a6 <SPI_DMAReceiveCplt+0xc2>
      HAL_SPI_ErrorCallback(hspi);
 8009404:	4628      	mov	r0, r5
 8009406:	f7ff ff59 	bl	80092bc <HAL_SPI_ErrorCallback>
}
 800940a:	b003      	add	sp, #12
 800940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800940e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009412:	d114      	bne.n	800943e <SPI_DMAReceiveCplt+0x15a>
    __HAL_SPI_DISABLE(hspi);
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	e77d      	b.n	800931a <SPI_DMAReceiveCplt+0x36>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800941e:	f022 0203 	bic.w	r2, r2, #3
 8009422:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009424:	e779      	b.n	800931a <SPI_DMAReceiveCplt+0x36>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009426:	68aa      	ldr	r2, [r5, #8]
 8009428:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800942c:	d002      	beq.n	8009434 <SPI_DMAReceiveCplt+0x150>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800942e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009432:	d1a2      	bne.n	800937a <SPI_DMAReceiveCplt+0x96>
          __HAL_SPI_DISABLE(hspi);
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	e79d      	b.n	800937a <SPI_DMAReceiveCplt+0x96>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800943e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009442:	d0e7      	beq.n	8009414 <SPI_DMAReceiveCplt+0x130>
 8009444:	e769      	b.n	800931a <SPI_DMAReceiveCplt+0x36>
 8009446:	bf00      	nop

08009448 <SPI_DMATransmitReceiveCplt>:
{
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800944c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800944e:	f7fc fdb9 	bl	8005fc4 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009452:	682b      	ldr	r3, [r5, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	069b      	lsls	r3, r3, #26
 8009458:	d41b      	bmi.n	8009492 <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	6853      	ldr	r3, [r2, #4]
 800945e:	f023 0320 	bic.w	r3, r3, #32
 8009462:	4601      	mov	r1, r0
 8009464:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009466:	4620      	mov	r0, r4
 8009468:	f7ff fd42 	bl	8008ef0 <SPI_EndRxTxTransaction.constprop.0>
 800946c:	b118      	cbz	r0, 8009476 <SPI_DMATransmitReceiveCplt+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800946e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009470:	f043 0320 	orr.w	r3, r3, #32
 8009474:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009476:	6821      	ldr	r1, [r4, #0]
 8009478:	684b      	ldr	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 800947a:	2200      	movs	r2, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800947c:	f023 0303 	bic.w	r3, r3, #3
    hspi->State = HAL_SPI_STATE_READY;
 8009480:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009482:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 8009484:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009486:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800948a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800948e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009490:	b91b      	cbnz	r3, 800949a <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 8009492:	4620      	mov	r0, r4
 8009494:	f7fa f993 	bl	80037be <HAL_SPI_TxRxCpltCallback>
}
 8009498:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff ff0e 	bl	80092bc <HAL_SPI_ErrorCallback>
}
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	bf00      	nop

080094a4 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 80094a4:	6802      	ldr	r2, [r0, #0]
{
 80094a6:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80094a8:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80094aa:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094ac:	f003 0c41 	and.w	ip, r3, #65	; 0x41
 80094b0:	f1bc 0f01 	cmp.w	ip, #1
{
 80094b4:	b084      	sub	sp, #16
 80094b6:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094b8:	d060      	beq.n	800957c <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094ba:	0798      	lsls	r0, r3, #30
 80094bc:	d501      	bpl.n	80094c2 <HAL_SPI_IRQHandler+0x1e>
 80094be:	0608      	lsls	r0, r1, #24
 80094c0:	d464      	bmi.n	800958c <HAL_SPI_IRQHandler+0xe8>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094c2:	f413 7fb0 	tst.w	r3, #352	; 0x160
 80094c6:	d057      	beq.n	8009578 <HAL_SPI_IRQHandler+0xd4>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094c8:	0688      	lsls	r0, r1, #26
 80094ca:	d555      	bpl.n	8009578 <HAL_SPI_IRQHandler+0xd4>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094cc:	0658      	lsls	r0, r3, #25
 80094ce:	d50e      	bpl.n	80094ee <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094d0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80094d4:	2803      	cmp	r0, #3
 80094d6:	d063      	beq.n	80095a0 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80094da:	f040 0004 	orr.w	r0, r0, #4
 80094de:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e0:	2000      	movs	r0, #0
 80094e2:	9000      	str	r0, [sp, #0]
 80094e4:	68d0      	ldr	r0, [r2, #12]
 80094e6:	9000      	str	r0, [sp, #0]
 80094e8:	6890      	ldr	r0, [r2, #8]
 80094ea:	9000      	str	r0, [sp, #0]
 80094ec:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80094ee:	0698      	lsls	r0, r3, #26
 80094f0:	d50c      	bpl.n	800950c <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80094f4:	f040 0001 	orr.w	r0, r0, #1
 80094f8:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094fa:	2000      	movs	r0, #0
 80094fc:	9002      	str	r0, [sp, #8]
 80094fe:	6890      	ldr	r0, [r2, #8]
 8009500:	9002      	str	r0, [sp, #8]
 8009502:	6810      	ldr	r0, [r2, #0]
 8009504:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8009508:	6010      	str	r0, [r2, #0]
 800950a:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800950c:	05d8      	lsls	r0, r3, #23
 800950e:	d508      	bpl.n	8009522 <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009510:	6e23      	ldr	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009512:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009514:	f043 0308 	orr.w	r3, r3, #8
 8009518:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800951a:	9003      	str	r0, [sp, #12]
 800951c:	6893      	ldr	r3, [r2, #8]
 800951e:	9303      	str	r3, [sp, #12]
 8009520:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009522:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009524:	b343      	cbz	r3, 8009578 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009526:	6853      	ldr	r3, [r2, #4]
 8009528:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800952c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800952e:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009530:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8009532:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009536:	d02f      	beq.n	8009598 <HAL_SPI_IRQHandler+0xf4>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009538:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800953a:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800953c:	f023 0303 	bic.w	r3, r3, #3
 8009540:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009542:	b158      	cbz	r0, 800955c <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009544:	f249 53b1 	movw	r3, #38321	; 0x95b1
 8009548:	f6c0 0300 	movt	r3, #2048	; 0x800
 800954c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800954e:	f7fd fea9 	bl	80072a4 <HAL_DMA_Abort_IT>
 8009552:	b118      	cbz	r0, 800955c <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009554:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800955a:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800955c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800955e:	b158      	cbz	r0, 8009578 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009560:	f249 53b1 	movw	r3, #38321	; 0x95b1
 8009564:	f6c0 0300 	movt	r3, #2048	; 0x800
 8009568:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800956a:	f7fd fe9b 	bl	80072a4 <HAL_DMA_Abort_IT>
 800956e:	b118      	cbz	r0, 8009578 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009570:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009576:	6623      	str	r3, [r4, #96]	; 0x60
}
 8009578:	b004      	add	sp, #16
 800957a:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800957c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009580:	d09b      	beq.n	80094ba <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 8009582:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8009584:	b004      	add	sp, #16
 8009586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800958a:	4718      	bx	r3
 800958c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800958e:	4620      	mov	r0, r4
}
 8009590:	b004      	add	sp, #16
 8009592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 8009596:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 8009598:	4620      	mov	r0, r4
 800959a:	f7ff fe8f 	bl	80092bc <HAL_SPI_ErrorCallback>
 800959e:	e7eb      	b.n	8009578 <HAL_SPI_IRQHandler+0xd4>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095a0:	2300      	movs	r3, #0
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	68d3      	ldr	r3, [r2, #12]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	6893      	ldr	r3, [r2, #8]
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	9b01      	ldr	r3, [sp, #4]
        return;
 80095ae:	e7e3      	b.n	8009578 <HAL_SPI_IRQHandler+0xd4>

080095b0 <SPI_DMAAbortOnError>:
{
 80095b0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80095ba:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80095bc:	f7ff fe7e 	bl	80092bc <HAL_SPI_ErrorCallback>
}
 80095c0:	bd08      	pop	{r3, pc}
 80095c2:	bf00      	nop

080095c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095c4:	6a03      	ldr	r3, [r0, #32]
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095cc:	6a03      	ldr	r3, [r0, #32]
{
 80095ce:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095d2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80095da:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095de:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= OC_Config->OCMode;
 80095e2:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095e4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= OC_Config->OCPolarity;
 80095e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80095ea:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095ee:	4560      	cmp	r0, ip
  tmpccer |= OC_Config->OCPolarity;
 80095f0:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095f4:	d017      	beq.n	8009626 <TIM_OC1_SetConfig+0x62>
 80095f6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 80095fa:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80095fe:	4560      	cmp	r0, ip
 8009600:	d011      	beq.n	8009626 <TIM_OC1_SetConfig+0x62>
 8009602:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009606:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800960a:	4560      	cmp	r0, ip
 800960c:	d00b      	beq.n	8009626 <TIM_OC1_SetConfig+0x62>
 800960e:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 8009612:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009616:	4560      	cmp	r0, ip
 8009618:	d005      	beq.n	8009626 <TIM_OC1_SetConfig+0x62>
 800961a:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800961e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009622:	4560      	cmp	r0, ip
 8009624:	d10d      	bne.n	8009642 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009626:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009628:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800962c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800962e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009632:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8009636:	ea45 0c06 	orr.w	ip, r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800963a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800963e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009642:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009644:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009646:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009648:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800964a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800964c:	6203      	str	r3, [r0, #32]
}
 800964e:	4770      	bx	lr

08009650 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009650:	6a03      	ldr	r3, [r0, #32]
 8009652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009656:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009658:	6a03      	ldr	r3, [r0, #32]
{
 800965a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800965e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009660:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009662:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009666:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800966a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= OC_Config->OCMode;
 800966e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009670:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009674:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8009676:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800967a:	4560      	cmp	r0, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800967c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009680:	d018      	beq.n	80096b4 <TIM_OC3_SetConfig+0x64>
 8009682:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8009686:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800968a:	4560      	cmp	r0, ip
 800968c:	d012      	beq.n	80096b4 <TIM_OC3_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968e:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009692:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009696:	4560      	cmp	r0, ip
 8009698:	d013      	beq.n	80096c2 <TIM_OC3_SetConfig+0x72>
 800969a:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800969e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80096a2:	4560      	cmp	r0, ip
 80096a4:	d00d      	beq.n	80096c2 <TIM_OC3_SetConfig+0x72>
 80096a6:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 80096aa:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 80096ae:	4560      	cmp	r0, ip
 80096b0:	d10f      	bne.n	80096d2 <TIM_OC3_SetConfig+0x82>
 80096b2:	e006      	b.n	80096c2 <TIM_OC3_SetConfig+0x72>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096b4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80096b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80096be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096c2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096c6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096ca:	ea45 0c06 	orr.w	ip, r5, r6
 80096ce:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80096d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80096d6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80096d8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80096da:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80096dc:	6203      	str	r3, [r0, #32]
}
 80096de:	4770      	bx	lr

080096e0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096e0:	6a03      	ldr	r3, [r0, #32]
 80096e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e8:	6a03      	ldr	r3, [r0, #32]
{
 80096ea:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ee:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80096f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80096fa:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009702:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009706:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8009708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800970c:	4560      	cmp	r0, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800970e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009712:	d018      	beq.n	8009746 <TIM_OC4_SetConfig+0x66>
 8009714:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8009718:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800971c:	4560      	cmp	r0, ip
 800971e:	d012      	beq.n	8009746 <TIM_OC4_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009720:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8009724:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009728:	4560      	cmp	r0, ip
 800972a:	d013      	beq.n	8009754 <TIM_OC4_SetConfig+0x74>
 800972c:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 8009730:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009734:	4560      	cmp	r0, ip
 8009736:	d00d      	beq.n	8009754 <TIM_OC4_SetConfig+0x74>
 8009738:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800973c:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8009740:	4560      	cmp	r0, ip
 8009742:	d10f      	bne.n	8009764 <TIM_OC4_SetConfig+0x84>
 8009744:	e006      	b.n	8009754 <TIM_OC4_SetConfig+0x74>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009746:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8009748:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800974c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009754:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009758:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800975c:	ea45 0c06 	orr.w	ip, r5, r6
 8009760:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009764:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009766:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009768:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800976a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800976c:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800976e:	6203      	str	r3, [r0, #32]
}
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop

08009774 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009774:	2800      	cmp	r0, #0
 8009776:	f000 8090 	beq.w	800989a <HAL_TIM_Base_Init+0x126>
{
 800977a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800977c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009780:	4604      	mov	r4, r0
 8009782:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009786:	2b00      	cmp	r3, #0
 8009788:	d07c      	beq.n	8009884 <HAL_TIM_Base_Init+0x110>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800978a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800978c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009792:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 8009796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800979a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800979c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800979e:	d05d      	beq.n	800985c <HAL_TIM_Base_Init+0xe8>
 80097a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80097a4:	d02d      	beq.n	8009802 <HAL_TIM_Base_Init+0x8e>
 80097a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80097ae:	428a      	cmp	r2, r1
 80097b0:	d027      	beq.n	8009802 <HAL_TIM_Base_Init+0x8e>
 80097b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80097b6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80097ba:	428a      	cmp	r2, r1
 80097bc:	d021      	beq.n	8009802 <HAL_TIM_Base_Init+0x8e>
 80097be:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80097c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80097c6:	428a      	cmp	r2, r1
 80097c8:	d048      	beq.n	800985c <HAL_TIM_Base_Init+0xe8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80097ce:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80097d2:	428a      	cmp	r2, r1
 80097d4:	d05b      	beq.n	800988e <HAL_TIM_Base_Init+0x11a>
 80097d6:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80097da:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80097de:	428a      	cmp	r2, r1
 80097e0:	d055      	beq.n	800988e <HAL_TIM_Base_Init+0x11a>
 80097e2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80097e6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80097ea:	428a      	cmp	r2, r1
 80097ec:	d04f      	beq.n	800988e <HAL_TIM_Base_Init+0x11a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097ee:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097f0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f6:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80097f8:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80097fa:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097fc:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80097fe:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009800:	e010      	b.n	8009824 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8009802:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009804:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800980a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800980c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009810:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009812:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009818:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800981a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800981c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800981e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009820:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009822:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009824:	2301      	movs	r3, #1
 8009826:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009828:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800982c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009830:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009834:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009838:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800983c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009844:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009848:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800984c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009850:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009858:	2000      	movs	r0, #0
}
 800985a:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800985c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800985e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009864:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8009866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800986a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800986c:	69a1      	ldr	r1, [r4, #24]
 800986e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009872:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8009874:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800987e:	6963      	ldr	r3, [r4, #20]
 8009880:	6313      	str	r3, [r2, #48]	; 0x30
 8009882:	e7cf      	b.n	8009824 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8009884:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009888:	f7fc f93a 	bl	8005b00 <HAL_TIM_Base_MspInit>
 800988c:	e77d      	b.n	800978a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800988e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009890:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009896:	4303      	orrs	r3, r0
 8009898:	e7e9      	b.n	800986e <HAL_TIM_Base_Init+0xfa>
    return HAL_ERROR;
 800989a:	2001      	movs	r0, #1
}
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop

080098a0 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 80098a0:	6803      	ldr	r3, [r0, #0]
 80098a2:	6a19      	ldr	r1, [r3, #32]
 80098a4:	f241 1211 	movw	r2, #4369	; 0x1111
 80098a8:	4211      	tst	r1, r2
 80098aa:	d108      	bne.n	80098be <HAL_TIM_Base_Stop+0x1e>
 80098ac:	6a19      	ldr	r1, [r3, #32]
 80098ae:	f244 4244 	movw	r2, #17476	; 0x4444
 80098b2:	4211      	tst	r1, r2
 80098b4:	d103      	bne.n	80098be <HAL_TIM_Base_Stop+0x1e>
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	f022 0201 	bic.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80098be:	2301      	movs	r3, #1
 80098c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr

080098c8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80098c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d12e      	bne.n	800992e <HAL_TIM_Base_Start_IT+0x66>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098d0:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80098d2:	2202      	movs	r2, #2
 80098d4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098d8:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098da:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80098de:	f2c4 0101 	movt	r1, #16385	; 0x4001
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098e2:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e6:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098e8:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ea:	d022      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d01f      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
 80098f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d019      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
 80098fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009902:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
 800990a:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800990e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009912:	4293      	cmp	r3, r2
 8009914:	d00d      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
 8009916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800991a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800991e:	4293      	cmp	r3, r2
 8009920:	d007      	beq.n	8009932 <HAL_TIM_Base_Start_IT+0x6a>
    __HAL_TIM_ENABLE(htim);
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8009928:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	4770      	bx	lr
    return HAL_ERROR;
 800992e:	2001      	movs	r0, #1
 8009930:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009932:	6899      	ldr	r1, [r3, #8]
 8009934:	2207      	movs	r2, #7
 8009936:	f2c0 0201 	movt	r2, #1
 800993a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993c:	2a06      	cmp	r2, #6
 800993e:	d002      	beq.n	8009946 <HAL_TIM_Base_Start_IT+0x7e>
 8009940:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009944:	d1ed      	bne.n	8009922 <HAL_TIM_Base_Start_IT+0x5a>
  return HAL_OK;
 8009946:	2000      	movs	r0, #0
}
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop

0800994c <HAL_TIM_PWM_MspInit>:
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009950:	2800      	cmp	r0, #0
 8009952:	f000 8090 	beq.w	8009a76 <HAL_TIM_PWM_Init+0x126>
{
 8009956:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009958:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800995c:	4604      	mov	r4, r0
 800995e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009962:	2b00      	cmp	r3, #0
 8009964:	d07c      	beq.n	8009a60 <HAL_TIM_PWM_Init+0x110>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009966:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009968:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800996e:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 8009972:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009976:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8009978:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800997a:	d05d      	beq.n	8009a38 <HAL_TIM_PWM_Init+0xe8>
 800997c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009980:	d02d      	beq.n	80099de <HAL_TIM_PWM_Init+0x8e>
 8009982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009986:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800998a:	428a      	cmp	r2, r1
 800998c:	d027      	beq.n	80099de <HAL_TIM_PWM_Init+0x8e>
 800998e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009992:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8009996:	428a      	cmp	r2, r1
 8009998:	d021      	beq.n	80099de <HAL_TIM_PWM_Init+0x8e>
 800999a:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800999e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80099a2:	428a      	cmp	r2, r1
 80099a4:	d048      	beq.n	8009a38 <HAL_TIM_PWM_Init+0xe8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80099aa:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80099ae:	428a      	cmp	r2, r1
 80099b0:	d05b      	beq.n	8009a6a <HAL_TIM_PWM_Init+0x11a>
 80099b2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80099b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80099ba:	428a      	cmp	r2, r1
 80099bc:	d055      	beq.n	8009a6a <HAL_TIM_PWM_Init+0x11a>
 80099be:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80099c2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80099c6:	428a      	cmp	r2, r1
 80099c8:	d04f      	beq.n	8009a6a <HAL_TIM_PWM_Init+0x11a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ca:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099cc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099d2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80099d4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80099d6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099d8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80099da:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099dc:	e010      	b.n	8009a00 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80099de:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099e0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80099e6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ec:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099f4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80099f8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80099fa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099fc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80099fe:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009a00:	2301      	movs	r3, #1
 8009a02:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a04:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009a0c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009a10:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009a14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a28:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009a2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009a30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009a34:	2000      	movs	r0, #0
}
 8009a36:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8009a38:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a3a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009a40:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a46:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a48:	69a1      	ldr	r1, [r4, #24]
 8009a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8009a50:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009a5a:	6963      	ldr	r3, [r4, #20]
 8009a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009a5e:	e7cf      	b.n	8009a00 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8009a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009a64:	f7ff ff72 	bl	800994c <HAL_TIM_PWM_MspInit>
 8009a68:	e77d      	b.n	8009966 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a6a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a6c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a72:	4303      	orrs	r3, r0
 8009a74:	e7e9      	b.n	8009a4a <HAL_TIM_PWM_Init+0xfa>
    return HAL_ERROR;
 8009a76:	2001      	movs	r0, #1
}
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop

08009a7c <HAL_TIM_PWM_Start>:
 8009a7c:	2910      	cmp	r1, #16
 8009a7e:	d80a      	bhi.n	8009a96 <HAL_TIM_PWM_Start+0x1a>
 8009a80:	e8df f001 	tbb	[pc, r1]
 8009a84:	09090969 	.word	0x09090969
 8009a88:	0909096f 	.word	0x0909096f
 8009a8c:	09090977 	.word	0x09090977
 8009a90:	0909097c 	.word	0x0909097c
 8009a94:	85          	.byte	0x85
 8009a95:	00          	.byte	0x00
 8009a96:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d15f      	bne.n	8009b5e <HAL_TIM_PWM_Start+0xe2>
 8009a9e:	2910      	cmp	r1, #16
 8009aa0:	d80a      	bhi.n	8009ab8 <HAL_TIM_PWM_Start+0x3c>
 8009aa2:	e8df f001 	tbb	[pc, r1]
 8009aa6:	099d      	.short	0x099d
 8009aa8:	09620909 	.word	0x09620909
 8009aac:	09840909 	.word	0x09840909
 8009ab0:	09800909 	.word	0x09800909
 8009ab4:	0909      	.short	0x0909
 8009ab6:	7c          	.byte	0x7c
 8009ab7:	00          	.byte	0x00
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	6a18      	ldr	r0, [r3, #32]
 8009ac4:	f001 011f 	and.w	r1, r1, #31
 8009ac8:	fa02 f101 	lsl.w	r1, r2, r1
 8009acc:	ea20 0001 	bic.w	r0, r0, r1
 8009ad0:	6218      	str	r0, [r3, #32]
 8009ad2:	6a18      	ldr	r0, [r3, #32]
 8009ad4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8009ad8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009adc:	4301      	orrs	r1, r0
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	6219      	str	r1, [r3, #32]
 8009ae2:	d068      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x13a>
 8009ae4:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8009ae8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d072      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x15a>
 8009af0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009af4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d06c      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x15a>
 8009afc:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8009b00:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d066      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x15a>
 8009b08:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8009b0c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d060      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x15a>
 8009b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b18:	d051      	beq.n	8009bbe <HAL_TIM_PWM_Start+0x142>
 8009b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b1e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d04b      	beq.n	8009bbe <HAL_TIM_PWM_Start+0x142>
 8009b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d045      	beq.n	8009bbe <HAL_TIM_PWM_Start+0x142>
 8009b32:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8009b36:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d03f      	beq.n	8009bbe <HAL_TIM_PWM_Start+0x142>
 8009b3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009b42:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d039      	beq.n	8009bbe <HAL_TIM_PWM_Start+0x142>
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	2000      	movs	r0, #0
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	4770      	bx	lr
 8009b56:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d040      	beq.n	8009be0 <HAL_TIM_PWM_Start+0x164>
 8009b5e:	2001      	movs	r0, #1
 8009b60:	4770      	bx	lr
 8009b62:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d1f9      	bne.n	8009b5e <HAL_TIM_PWM_Start+0xe2>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8009b70:	e7a5      	b.n	8009abe <HAL_TIM_PWM_Start+0x42>
 8009b72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d091      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x22>
 8009b7a:	e7f0      	b.n	8009b5e <HAL_TIM_PWM_Start+0xe2>
 8009b7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009b80:	3b01      	subs	r3, #1
 8009b82:	bf18      	it	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d089      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x22>
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	4770      	bx	lr
 8009b8e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009b92:	3b01      	subs	r3, #1
 8009b94:	bf18      	it	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d080      	beq.n	8009a9e <HAL_TIM_PWM_Start+0x22>
 8009b9c:	e7f5      	b.n	8009b8a <HAL_TIM_PWM_Start+0x10e>
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8009ba4:	e78b      	b.n	8009abe <HAL_TIM_PWM_Start+0x42>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8009bac:	e787      	b.n	8009abe <HAL_TIM_PWM_Start+0x42>
 8009bae:	2302      	movs	r3, #2
 8009bb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009bb4:	e783      	b.n	8009abe <HAL_TIM_PWM_Start+0x42>
 8009bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8009bbe:	6899      	ldr	r1, [r3, #8]
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	f2c0 0201 	movt	r2, #1
 8009bc6:	400a      	ands	r2, r1
 8009bc8:	2a06      	cmp	r2, #6
 8009bca:	d002      	beq.n	8009bd2 <HAL_TIM_PWM_Start+0x156>
 8009bcc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009bd0:	d1bb      	bne.n	8009b4a <HAL_TIM_PWM_Start+0xce>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	4770      	bx	lr
 8009bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8009bde:	e799      	b.n	8009b14 <HAL_TIM_PWM_Start+0x98>
 8009be0:	2302      	movs	r3, #2
 8009be2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8009be6:	e76a      	b.n	8009abe <HAL_TIM_PWM_Start+0x42>

08009be8 <HAL_TIM_PWM_Stop>:
 8009be8:	6803      	ldr	r3, [r0, #0]
 8009bea:	b410      	push	{r4}
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	f001 041f 	and.w	r4, r1, #31
 8009bf2:	f04f 0c01 	mov.w	ip, #1
 8009bf6:	fa0c fc04 	lsl.w	ip, ip, r4
 8009bfa:	ea22 020c 	bic.w	r2, r2, ip
 8009bfe:	621a      	str	r2, [r3, #32]
 8009c00:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8009c04:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c08:	6a1c      	ldr	r4, [r3, #32]
 8009c0a:	621c      	str	r4, [r3, #32]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d029      	beq.n	8009c64 <HAL_TIM_PWM_Stop+0x7c>
 8009c10:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 8009c14:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d023      	beq.n	8009c64 <HAL_TIM_PWM_Stop+0x7c>
 8009c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c20:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d01d      	beq.n	8009c64 <HAL_TIM_PWM_Stop+0x7c>
 8009c28:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8009c2c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d017      	beq.n	8009c64 <HAL_TIM_PWM_Stop+0x7c>
 8009c34:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8009c38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d011      	beq.n	8009c64 <HAL_TIM_PWM_Stop+0x7c>
 8009c40:	6a1c      	ldr	r4, [r3, #32]
 8009c42:	f241 1211 	movw	r2, #4369	; 0x1111
 8009c46:	4214      	tst	r4, r2
 8009c48:	d104      	bne.n	8009c54 <HAL_TIM_PWM_Stop+0x6c>
 8009c4a:	6a1c      	ldr	r4, [r3, #32]
 8009c4c:	f244 4244 	movw	r2, #17476	; 0x4444
 8009c50:	4214      	tst	r4, r2
 8009c52:	d016      	beq.n	8009c82 <HAL_TIM_PWM_Stop+0x9a>
 8009c54:	b9d9      	cbnz	r1, 8009c8e <HAL_TIM_PWM_Stop+0xa6>
 8009c56:	2301      	movs	r3, #1
 8009c58:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8009c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c60:	2000      	movs	r0, #0
 8009c62:	4770      	bx	lr
 8009c64:	6a1c      	ldr	r4, [r3, #32]
 8009c66:	f241 1211 	movw	r2, #4369	; 0x1111
 8009c6a:	4214      	tst	r4, r2
 8009c6c:	d1e8      	bne.n	8009c40 <HAL_TIM_PWM_Stop+0x58>
 8009c6e:	6a1c      	ldr	r4, [r3, #32]
 8009c70:	f244 4244 	movw	r2, #17476	; 0x4444
 8009c74:	4214      	tst	r4, r2
 8009c76:	d1e3      	bne.n	8009c40 <HAL_TIM_PWM_Stop+0x58>
 8009c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c7e:	645a      	str	r2, [r3, #68]	; 0x44
 8009c80:	e7de      	b.n	8009c40 <HAL_TIM_PWM_Stop+0x58>
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	f022 0201 	bic.w	r2, r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d0e3      	beq.n	8009c56 <HAL_TIM_PWM_Stop+0x6e>
 8009c8e:	3904      	subs	r1, #4
 8009c90:	290c      	cmp	r1, #12
 8009c92:	d808      	bhi.n	8009ca6 <HAL_TIM_PWM_Stop+0xbe>
 8009c94:	e8df f001 	tbb	[pc, r1]
 8009c98:	07070723 	.word	0x07070723
 8009c9c:	0707071c 	.word	0x0707071c
 8009ca0:	07070715 	.word	0x07070715
 8009ca4:	0e          	.byte	0x0e
 8009ca5:	00          	.byte	0x00
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8009cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4770      	bx	lr
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8009cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	4770      	bx	lr
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8009cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ccc:	2000      	movs	r0, #0
 8009cce:	4770      	bx	lr
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cda:	2000      	movs	r0, #0
 8009cdc:	4770      	bx	lr
 8009cde:	2301      	movs	r3, #1
 8009ce0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8009ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce8:	2000      	movs	r0, #0
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8009cec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	f000 8092 	beq.w	8009e1a <HAL_TIM_ConfigClockSource+0x12e>
 8009cf6:	4602      	mov	r2, r0
{
 8009cf8:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfa:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfe:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8009d02:	2001      	movs	r0, #1
 8009d04:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8009d08:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d0a:	2388      	movs	r3, #136	; 0x88
 8009d0c:	f6cf 73ce 	movt	r3, #65486	; 0xffce
 8009d10:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8009d12:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8009d14:	680b      	ldr	r3, [r1, #0]
 8009d16:	2b70      	cmp	r3, #112	; 0x70
 8009d18:	f000 80ad 	beq.w	8009e76 <HAL_TIM_ConfigClockSource+0x18a>
 8009d1c:	d827      	bhi.n	8009d6e <HAL_TIM_ConfigClockSource+0x82>
 8009d1e:	2b50      	cmp	r3, #80	; 0x50
 8009d20:	d07d      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x132>
 8009d22:	d943      	bls.n	8009dac <HAL_TIM_ConfigClockSource+0xc0>
 8009d24:	2b60      	cmp	r3, #96	; 0x60
 8009d26:	d11a      	bne.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d28:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d2a:	6848      	ldr	r0, [r1, #4]
 8009d2c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2e:	f023 0310 	bic.w	r3, r3, #16
 8009d32:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d34:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8009d36:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d38:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d40:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d44:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d48:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8009d4a:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d4c:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d4e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d56:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8009d5a:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d5c:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8009d5e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8009d60:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8009d62:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009d66:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8009d6a:	bc30      	pop	{r4, r5}
 8009d6c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8009d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d72:	d06f      	beq.n	8009e54 <HAL_TIM_ConfigClockSource+0x168>
 8009d74:	d940      	bls.n	8009df8 <HAL_TIM_ConfigClockSource+0x10c>
 8009d76:	2130      	movs	r1, #48	; 0x30
 8009d78:	f2c0 0110 	movt	r1, #16
 8009d7c:	428b      	cmp	r3, r1
 8009d7e:	d00a      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009d80:	d931      	bls.n	8009de6 <HAL_TIM_ConfigClockSource+0xfa>
 8009d82:	2140      	movs	r1, #64	; 0x40
 8009d84:	f2c0 0110 	movt	r1, #16
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	d004      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009d8c:	2170      	movs	r1, #112	; 0x70
 8009d8e:	f2c0 0110 	movt	r1, #16
 8009d92:	428b      	cmp	r3, r1
 8009d94:	d1e3      	bne.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  tmpsmcr = TIMx->SMCR;
 8009d96:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d98:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8009d9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009da0:	4319      	orrs	r1, r3
 8009da2:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 8009da6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8009da8:	60a1      	str	r1, [r4, #8]
}
 8009daa:	e7d8      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d128      	bne.n	8009e02 <HAL_TIM_ConfigClockSource+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009db0:	684b      	ldr	r3, [r1, #4]
 8009db2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009db4:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009db6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009dba:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dbc:	6a23      	ldr	r3, [r4, #32]
 8009dbe:	f023 0301 	bic.w	r3, r3, #1
 8009dc2:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dc4:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009dce:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8009dd0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8009dd2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ddc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8009de0:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8009de2:	60a3      	str	r3, [r4, #8]
}
 8009de4:	e7bb      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 8009de6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009dea:	d0d4      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009dec:	2120      	movs	r1, #32
 8009dee:	f2c0 0110 	movt	r1, #16
 8009df2:	428b      	cmp	r3, r1
 8009df4:	d0cf      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009df6:	e7b2      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8009df8:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8009dfc:	bf18      	it	ne
 8009dfe:	2001      	movne	r0, #1
 8009e00:	e7ad      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 8009e02:	d8ac      	bhi.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d0c6      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009e08:	d903      	bls.n	8009e12 <HAL_TIM_ConfigClockSource+0x126>
 8009e0a:	2b30      	cmp	r3, #48	; 0x30
 8009e0c:	d0c3      	beq.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7a5      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
 8009e12:	f033 0110 	bics.w	r1, r3, #16
 8009e16:	d1a2      	bne.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
 8009e18:	e7bd      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0xaa>
  __HAL_LOCK(htim);
 8009e1a:	2002      	movs	r0, #2
}
 8009e1c:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e1e:	684b      	ldr	r3, [r1, #4]
 8009e20:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009e22:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e24:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009e28:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e2a:	6a23      	ldr	r3, [r4, #32]
 8009e2c:	f023 0301 	bic.w	r3, r3, #1
 8009e30:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e32:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8009e3c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8009e3e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8009e40:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e4a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8009e4e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8009e50:	60a3      	str	r3, [r4, #8]
}
 8009e52:	e784      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e54:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009e58:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e5a:	432b      	orrs	r3, r5
 8009e5c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e5e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009e66:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e68:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8009e70:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e72:	60a3      	str	r3, [r4, #8]
      break;
 8009e74:	e773      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e76:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009e7a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e7c:	432b      	orrs	r3, r5
 8009e7e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e80:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8009e88:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8009e8a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8009e8c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8009e92:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8009e94:	60a3      	str	r3, [r4, #8]
      break;
 8009e96:	e762      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x72>

08009e98 <HAL_TIM_OC_DelayElapsedCallback>:
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <HAL_TIM_IC_CaptureCallback>:
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop

08009ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop

08009ea4 <HAL_TIM_TriggerCallback>:
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop

08009ea8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ea8:	6803      	ldr	r3, [r0, #0]
 8009eaa:	691a      	ldr	r2, [r3, #16]
 8009eac:	0791      	lsls	r1, r2, #30
{
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009eb2:	d503      	bpl.n	8009ebc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	0792      	lsls	r2, r2, #30
 8009eb8:	f100 808a 	bmi.w	8009fd0 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	0752      	lsls	r2, r2, #29
 8009ec0:	d502      	bpl.n	8009ec8 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	0750      	lsls	r0, r2, #29
 8009ec6:	d470      	bmi.n	8009faa <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	0711      	lsls	r1, r2, #28
 8009ecc:	d502      	bpl.n	8009ed4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	0712      	lsls	r2, r2, #28
 8009ed2:	d458      	bmi.n	8009f86 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	06d1      	lsls	r1, r2, #27
 8009ed8:	d502      	bpl.n	8009ee0 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009eda:	68da      	ldr	r2, [r3, #12]
 8009edc:	06d2      	lsls	r2, r2, #27
 8009ede:	d43e      	bmi.n	8009f5e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ee0:	691a      	ldr	r2, [r3, #16]
 8009ee2:	07d0      	lsls	r0, r2, #31
 8009ee4:	d503      	bpl.n	8009eee <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	07d1      	lsls	r1, r2, #31
 8009eea:	f100 808a 	bmi.w	800a002 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	0612      	lsls	r2, r2, #24
 8009ef2:	d503      	bpl.n	8009efc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	0610      	lsls	r0, r2, #24
 8009ef8:	f100 808b 	bmi.w	800a012 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009efc:	691a      	ldr	r2, [r3, #16]
 8009efe:	05d1      	lsls	r1, r2, #23
 8009f00:	d503      	bpl.n	8009f0a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	0612      	lsls	r2, r2, #24
 8009f06:	f100 808c 	bmi.w	800a022 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	0650      	lsls	r0, r2, #25
 8009f0e:	d503      	bpl.n	8009f18 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	0651      	lsls	r1, r2, #25
 8009f14:	f100 808d 	bmi.w	800a032 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	0692      	lsls	r2, r2, #26
 8009f1c:	d503      	bpl.n	8009f26 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	0690      	lsls	r0, r2, #26
 8009f22:	f100 808e 	bmi.w	800a042 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	02d1      	lsls	r1, r2, #11
 8009f2a:	d503      	bpl.n	8009f34 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009f2c:	68da      	ldr	r2, [r3, #12]
 8009f2e:	02d2      	lsls	r2, r2, #11
 8009f30:	f100 808f 	bmi.w	800a052 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	0290      	lsls	r0, r2, #10
 8009f38:	d503      	bpl.n	8009f42 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	0291      	lsls	r1, r2, #10
 8009f3e:	f100 8090 	bmi.w	800a062 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009f42:	691a      	ldr	r2, [r3, #16]
 8009f44:	0252      	lsls	r2, r2, #9
 8009f46:	d503      	bpl.n	8009f50 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	0250      	lsls	r0, r2, #9
 8009f4c:	f100 8091 	bmi.w	800a072 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009f50:	691a      	ldr	r2, [r3, #16]
 8009f52:	0211      	lsls	r1, r2, #8
 8009f54:	d502      	bpl.n	8009f5c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	0212      	lsls	r2, r2, #8
 8009f5a:	d44a      	bmi.n	8009ff2 <HAL_TIM_IRQHandler+0x14a>
}
 8009f5c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f5e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f62:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f64:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009f6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f70:	f040 8090 	bne.w	800a094 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f74:	f7ff ff90 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f7ff ff91 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f80:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f82:	7722      	strb	r2, [r4, #28]
 8009f84:	e7ac      	b.n	8009ee0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f86:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f8a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f8c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8009f94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f96:	d17a      	bne.n	800a08e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f98:	f7ff ff7e 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f7ff ff7f 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fa4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa6:	7722      	strb	r2, [r4, #28]
 8009fa8:	e794      	b.n	8009ed4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009faa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fae:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009fb0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fb2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fbc:	d164      	bne.n	800a088 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fbe:	f7ff ff6b 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff ff6c 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fca:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fcc:	7722      	strb	r2, [r4, #28]
 8009fce:	e77b      	b.n	8009ec8 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fd0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fd4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fd6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fd8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	0799      	lsls	r1, r3, #30
 8009fde:	d150      	bne.n	800a082 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fe0:	f7ff ff5a 	bl	8009e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff ff5b 	bl	8009ea0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fee:	7722      	strb	r2, [r4, #28]
 8009ff0:	e764      	b.n	8009ebc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009ff2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ff6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009ff8:	611a      	str	r2, [r3, #16]
}
 8009ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ffe:	f000 bb0d 	b.w	800a61c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a002:	f06f 0201 	mvn.w	r2, #1
 800a006:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a008:	4620      	mov	r0, r4
 800a00a:	f7f9 fd68 	bl	8003ade <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	e76d      	b.n	8009eee <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a012:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a016:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 faf5 	bl	800a608 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	e76c      	b.n	8009efc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a026:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 faef 	bl	800a60c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	e76b      	b.n	8009f0a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a036:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a038:	4620      	mov	r0, r4
 800a03a:	f7ff ff33 	bl	8009ea4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	e76a      	b.n	8009f18 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a042:	f06f 0220 	mvn.w	r2, #32
 800a046:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fadb 	bl	800a604 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	e769      	b.n	8009f26 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a052:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a056:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fad9 	bl	800a610 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	e768      	b.n	8009f34 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a062:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a066:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 fad3 	bl	800a614 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	e767      	b.n	8009f42 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a072:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a076:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 facd 	bl	800a618 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	e766      	b.n	8009f50 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800a082:	f7ff ff0b 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 800a086:	e7b0      	b.n	8009fea <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 800a088:	f7ff ff08 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 800a08c:	e79c      	b.n	8009fc8 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 800a08e:	f7ff ff05 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 800a092:	e786      	b.n	8009fa2 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800a094:	f7ff ff02 	bl	8009e9c <HAL_TIM_IC_CaptureCallback>
 800a098:	e771      	b.n	8009f7e <HAL_TIM_IRQHandler+0xd6>
 800a09a:	bf00      	nop

0800a09c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a09c:	6a03      	ldr	r3, [r0, #32]
 800a09e:	f023 0310 	bic.w	r3, r3, #16
 800a0a2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a0a4:	6a03      	ldr	r3, [r0, #32]
{
 800a0a6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 800a0a8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a0aa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a0b2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0b6:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0be:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800a0c4:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0c8:	4560      	cmp	r0, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0ca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0ce:	d018      	beq.n	800a102 <TIM_OC2_SetConfig+0x66>
 800a0d0:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a0d4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0d8:	4560      	cmp	r0, ip
 800a0da:	d012      	beq.n	800a102 <TIM_OC2_SetConfig+0x66>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0dc:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 800a0e0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0e4:	4560      	cmp	r0, ip
 800a0e6:	d013      	beq.n	800a110 <TIM_OC2_SetConfig+0x74>
 800a0e8:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800a0ec:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0f0:	4560      	cmp	r0, ip
 800a0f2:	d00d      	beq.n	800a110 <TIM_OC2_SetConfig+0x74>
 800a0f4:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800a0f8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a0fc:	4560      	cmp	r0, ip
 800a0fe:	d10f      	bne.n	800a120 <TIM_OC2_SetConfig+0x84>
 800a100:	e006      	b.n	800a110 <TIM_OC2_SetConfig+0x74>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a102:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800a104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a108:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a10c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a110:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a114:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a118:	ea45 0c06 	orr.w	ip, r5, r6
 800a11c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800a120:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800a122:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a124:	6182      	str	r2, [r0, #24]
}
 800a126:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800a128:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a12a:	6203      	str	r3, [r0, #32]
}
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop

0800a130 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800a130:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	f000 810d 	beq.w	800a354 <HAL_TIM_PWM_ConfigChannel+0x224>
 800a13a:	2301      	movs	r3, #1
{
 800a13c:	b570      	push	{r4, r5, r6, lr}
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800a142:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a146:	2a14      	cmp	r2, #20
 800a148:	d80c      	bhi.n	800a164 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a14a:	e8df f002 	tbb	[pc, r2]
 800a14e:	0b60      	.short	0x0b60
 800a150:	0b750b0b 	.word	0x0b750b0b
 800a154:	0b8b0b0b 	.word	0x0b8b0b0b
 800a158:	0ba00b0b 	.word	0x0ba00b0b
 800a15c:	0bb60b0b 	.word	0x0bb60b0b
 800a160:	0b0b      	.short	0x0b0b
 800a162:	11          	.byte	0x11
 800a163:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800a164:	2200      	movs	r2, #0
  switch (Channel)
 800a166:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800a168:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a170:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a172:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a174:	6a13      	ldr	r3, [r2, #32]
 800a176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a17a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800a17c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800a17e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 800a180:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a182:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800a186:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18a:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a18e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a192:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a196:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a198:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19c:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a19e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a2:	d017      	beq.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800a1a4:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a1a8:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a1ac:	4562      	cmp	r2, ip
 800a1ae:	d011      	beq.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800a1b0:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 800a1b4:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a1b8:	4562      	cmp	r2, ip
 800a1ba:	d00b      	beq.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800a1bc:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800a1c0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a1c4:	4562      	cmp	r2, ip
 800a1c6:	d005      	beq.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800a1c8:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800a1cc:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a1d0:	4562      	cmp	r2, ip
 800a1d2:	d104      	bne.n	800a1de <HAL_TIM_PWM_ConfigChannel+0xae>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1d4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1d6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1da:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800a1de:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a1e0:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 800a1e2:	6869      	ldr	r1, [r5, #4]
 800a1e4:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 800a1e6:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1ea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1f0:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1f2:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800a1f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800a1f8:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1fa:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800a1fc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800a200:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800a202:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a204:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a206:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	f7ff f9d8 	bl	80095c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a214:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a216:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a218:	f043 0308 	orr.w	r3, r3, #8
 800a21c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a21e:	6982      	ldr	r2, [r0, #24]
 800a220:	f022 0204 	bic.w	r2, r2, #4
 800a224:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a226:	6982      	ldr	r2, [r0, #24]
 800a228:	430a      	orrs	r2, r1
 800a22a:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800a22c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a230:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a234:	4618      	mov	r0, r3
 800a236:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a238:	6800      	ldr	r0, [r0, #0]
 800a23a:	f7ff ff2f 	bl	800a09c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a23e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a240:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a246:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a248:	6982      	ldr	r2, [r0, #24]
 800a24a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a24e:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a250:	6982      	ldr	r2, [r0, #24]
 800a252:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a256:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800a258:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a25c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a260:	4618      	mov	r0, r3
 800a262:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a264:	6800      	ldr	r0, [r0, #0]
 800a266:	f7ff f9f3 	bl	8009650 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a26a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a26c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a26e:	f043 0308 	orr.w	r3, r3, #8
 800a272:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a274:	69c2      	ldr	r2, [r0, #28]
 800a276:	f022 0204 	bic.w	r2, r2, #4
 800a27a:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a27c:	69c2      	ldr	r2, [r0, #28]
 800a27e:	430a      	orrs	r2, r1
 800a280:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 800a282:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a284:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a286:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a28e:	6800      	ldr	r0, [r0, #0]
 800a290:	f7ff fa26 	bl	80096e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a294:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a296:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a29c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a29e:	69c2      	ldr	r2, [r0, #28]
 800a2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a4:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2a6:	69c2      	ldr	r2, [r0, #28]
 800a2a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a2ac:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 800a2ae:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a2b0:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a2b2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2ba:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2be:	6a13      	ldr	r3, [r2, #32]
 800a2c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2c4:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800a2c6:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800a2c8:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 800a2ca:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2cc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800a2d0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2d4:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  tmpccmrx |= OC_Config->OCMode;
 800a2d8:	4331      	orrs	r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2de:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800a2e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e4:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ea:	d017      	beq.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800a2ec:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a2f0:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a2f4:	4562      	cmp	r2, ip
 800a2f6:	d011      	beq.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800a2f8:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 800a2fc:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a300:	4562      	cmp	r2, ip
 800a302:	d00b      	beq.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800a304:	f44f 4c88 	mov.w	ip, #17408	; 0x4400
 800a308:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a30c:	4562      	cmp	r2, ip
 800a30e:	d005      	beq.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x1ec>
 800a310:	f44f 4c90 	mov.w	ip, #18432	; 0x4800
 800a314:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a318:	4562      	cmp	r2, ip
 800a31a:	d104      	bne.n	800a326 <HAL_TIM_PWM_ConfigChannel+0x1f6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a31c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a31e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a322:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800a326:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 800a328:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800a32a:	6869      	ldr	r1, [r5, #4]
 800a32c:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800a32e:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a330:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a332:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a334:	f043 0308 	orr.w	r3, r3, #8
 800a338:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a33a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800a33c:	f021 0104 	bic.w	r1, r1, #4
 800a340:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a342:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800a344:	4301      	orrs	r1, r0
 800a346:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800a348:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a34a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800a34c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800a350:	4618      	mov	r0, r3
 800a352:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800a354:	2302      	movs	r3, #2
}
 800a356:	4618      	mov	r0, r3
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop

0800a35c <HAL_TIMEx_PWMN_Start>:
 800a35c:	2900      	cmp	r1, #0
 800a35e:	d147      	bne.n	800a3f0 <HAL_TIMEx_PWMN_Start+0x94>
 800a360:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800a364:	2b01      	cmp	r3, #1
 800a366:	d14f      	bne.n	800a408 <HAL_TIMEx_PWMN_Start+0xac>
 800a368:	2302      	movs	r3, #2
 800a36a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800a36e:	6803      	ldr	r3, [r0, #0]
 800a370:	f001 011f 	and.w	r1, r1, #31
 800a374:	6a18      	ldr	r0, [r3, #32]
 800a376:	2204      	movs	r2, #4
 800a378:	408a      	lsls	r2, r1
 800a37a:	ea20 0002 	bic.w	r0, r0, r2
 800a37e:	6218      	str	r0, [r3, #32]
 800a380:	6a18      	ldr	r0, [r3, #32]
 800a382:	4302      	orrs	r2, r0
 800a384:	621a      	str	r2, [r3, #32]
 800a386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a388:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 800a38c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800a390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a394:	428b      	cmp	r3, r1
 800a396:	645a      	str	r2, [r3, #68]	; 0x44
 800a398:	d01a      	beq.n	800a3d0 <HAL_TIMEx_PWMN_Start+0x74>
 800a39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39e:	d017      	beq.n	800a3d0 <HAL_TIMEx_PWMN_Start+0x74>
 800a3a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3a4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d011      	beq.n	800a3d0 <HAL_TIMEx_PWMN_Start+0x74>
 800a3ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00b      	beq.n	800a3d0 <HAL_TIMEx_PWMN_Start+0x74>
 800a3b8:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 800a3bc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d005      	beq.n	800a3d0 <HAL_TIMEx_PWMN_Start+0x74>
 800a3c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d109      	bne.n	800a3e4 <HAL_TIMEx_PWMN_Start+0x88>
 800a3d0:	6899      	ldr	r1, [r3, #8]
 800a3d2:	2207      	movs	r2, #7
 800a3d4:	f2c0 0201 	movt	r2, #1
 800a3d8:	400a      	ands	r2, r1
 800a3da:	2a06      	cmp	r2, #6
 800a3dc:	d016      	beq.n	800a40c <HAL_TIMEx_PWMN_Start+0xb0>
 800a3de:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a3e2:	d013      	beq.n	800a40c <HAL_TIMEx_PWMN_Start+0xb0>
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	f042 0201 	orr.w	r2, r2, #1
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	4770      	bx	lr
 800a3f0:	2904      	cmp	r1, #4
 800a3f2:	d00d      	beq.n	800a410 <HAL_TIMEx_PWMN_Start+0xb4>
 800a3f4:	2908      	cmp	r1, #8
 800a3f6:	d013      	beq.n	800a420 <HAL_TIMEx_PWMN_Start+0xc4>
 800a3f8:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d103      	bne.n	800a408 <HAL_TIMEx_PWMN_Start+0xac>
 800a400:	2302      	movs	r3, #2
 800a402:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800a406:	e7b2      	b.n	800a36e <HAL_TIMEx_PWMN_Start+0x12>
 800a408:	2001      	movs	r0, #1
 800a40a:	4770      	bx	lr
 800a40c:	2000      	movs	r0, #0
 800a40e:	4770      	bx	lr
 800a410:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a414:	2b01      	cmp	r3, #1
 800a416:	d1f7      	bne.n	800a408 <HAL_TIMEx_PWMN_Start+0xac>
 800a418:	2302      	movs	r3, #2
 800a41a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800a41e:	e7a6      	b.n	800a36e <HAL_TIMEx_PWMN_Start+0x12>
 800a420:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800a424:	2b01      	cmp	r3, #1
 800a426:	d1ef      	bne.n	800a408 <HAL_TIMEx_PWMN_Start+0xac>
 800a428:	2302      	movs	r3, #2
 800a42a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 800a42e:	e79e      	b.n	800a36e <HAL_TIMEx_PWMN_Start+0x12>

0800a430 <HAL_TIMEx_PWMN_Stop>:
 800a430:	6803      	ldr	r3, [r0, #0]
 800a432:	b410      	push	{r4}
 800a434:	6a1a      	ldr	r2, [r3, #32]
 800a436:	f001 041f 	and.w	r4, r1, #31
 800a43a:	f04f 0c04 	mov.w	ip, #4
 800a43e:	fa0c fc04 	lsl.w	ip, ip, r4
 800a442:	ea22 020c 	bic.w	r2, r2, ip
 800a446:	621a      	str	r2, [r3, #32]
 800a448:	6a1a      	ldr	r2, [r3, #32]
 800a44a:	621a      	str	r2, [r3, #32]
 800a44c:	6a1c      	ldr	r4, [r3, #32]
 800a44e:	f241 1211 	movw	r2, #4369	; 0x1111
 800a452:	4214      	tst	r4, r2
 800a454:	d104      	bne.n	800a460 <HAL_TIMEx_PWMN_Stop+0x30>
 800a456:	6a1c      	ldr	r4, [r3, #32]
 800a458:	f244 4244 	movw	r2, #17476	; 0x4444
 800a45c:	4214      	tst	r4, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_TIMEx_PWMN_Stop+0x76>
 800a460:	6a1c      	ldr	r4, [r3, #32]
 800a462:	f241 1211 	movw	r2, #4369	; 0x1111
 800a466:	4214      	tst	r4, r2
 800a468:	d104      	bne.n	800a474 <HAL_TIMEx_PWMN_Stop+0x44>
 800a46a:	6a1c      	ldr	r4, [r3, #32]
 800a46c:	f244 4244 	movw	r2, #17476	; 0x4444
 800a470:	4214      	tst	r4, r2
 800a472:	d013      	beq.n	800a49c <HAL_TIMEx_PWMN_Stop+0x6c>
 800a474:	2301      	movs	r3, #1
 800a476:	b929      	cbnz	r1, 800a484 <HAL_TIMEx_PWMN_Stop+0x54>
 800a478:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800a47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a480:	2000      	movs	r0, #0
 800a482:	4770      	bx	lr
 800a484:	2904      	cmp	r1, #4
 800a486:	d013      	beq.n	800a4b0 <HAL_TIMEx_PWMN_Stop+0x80>
 800a488:	2908      	cmp	r1, #8
 800a48a:	bf0c      	ite	eq
 800a48c:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 800a490:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 800a494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a498:	2000      	movs	r0, #0
 800a49a:	4770      	bx	lr
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	f022 0201 	bic.w	r2, r2, #1
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e7e6      	b.n	800a474 <HAL_TIMEx_PWMN_Stop+0x44>
 800a4a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4ac:	645a      	str	r2, [r3, #68]	; 0x44
 800a4ae:	e7d7      	b.n	800a460 <HAL_TIMEx_PWMN_Stop+0x30>
 800a4b0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800a4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d04a      	beq.n	800a55a <HAL_TIMEx_MasterConfigSynchronization+0x9e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4c4:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4c6:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ca:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4cc:	f2c4 0c01 	movt	ip, #16385	; 0x4001
{
 800a4d0:	b430      	push	{r4, r5}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4d2:	4562      	cmp	r2, ip
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800a4d8:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a4da:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4dc:	d031      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800a4de:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a4e2:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a4e6:	4562      	cmp	r2, ip
 800a4e8:	d02b      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0x86>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4ea:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a4f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800a4fa:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4fc:	d013      	beq.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800a4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a502:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a506:	429a      	cmp	r2, r3
 800a508:	d00d      	beq.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800a50a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a50e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a512:	429a      	cmp	r2, r3
 800a514:	d007      	beq.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800a516:	4562      	cmp	r2, ip
 800a518:	d005      	beq.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800a51a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a51e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800a522:	429a      	cmp	r2, r3
 800a524:	d104      	bne.n	800a530 <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a526:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a528:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a52c:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a52e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a530:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a532:	2201      	movs	r2, #1
 800a534:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800a538:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800a53c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800a53e:	4618      	mov	r0, r3
}
 800a540:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a542:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a544:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a548:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800a54a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a54e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a554:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800a556:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a558:	e7e5      	b.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  __HAL_LOCK(htim);
 800a55a:	2002      	movs	r0, #2
}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop

0800a560 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a564:	2b01      	cmp	r3, #1
 800a566:	d04a      	beq.n	800a5fe <HAL_TIMEx_ConfigBreakDeadTime+0x9e>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a568:	4602      	mov	r2, r0
{
 800a56a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a56c:	68cb      	ldr	r3, [r1, #12]
 800a56e:	e9d1 0401 	ldrd	r0, r4, [r1, #4]
 800a572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a576:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a57c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a57e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a584:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a586:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a58c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a58e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a594:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a596:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a59c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a59e:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 800a5a2:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5a4:	698c      	ldr	r4, [r1, #24]
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5a6:	f2c4 0c01 	movt	ip, #16385	; 0x4001
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5aa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5ae:	4560      	cmp	r0, ip
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a5b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a5b4:	d00d      	beq.n	800a5d2 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
 800a5b6:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 800a5ba:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 800a5be:	4560      	cmp	r0, ip
 800a5c0:	d007      	beq.n	800a5d2 <HAL_TIMEx_ConfigBreakDeadTime+0x72>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800a5c2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800a5c4:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800a5c6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800a5ca:	4608      	mov	r0, r1
}
 800a5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d0:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a5d2:	69cc      	ldr	r4, [r1, #28]
 800a5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5d8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a5da:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800a5dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5e0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a5e4:	6a0c      	ldr	r4, [r1, #32]
 800a5e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5ea:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5ec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a5f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a5f4:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	e7e1      	b.n	800a5c2 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
  __HAL_LOCK(htim);
 800a5fe:	2002      	movs	r0, #2
}
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop

0800a604 <HAL_TIMEx_CommutCallback>:
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <HAL_TIMEx_BreakCallback>:
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop

0800a60c <HAL_TIMEx_Break2Callback>:
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <HAL_TIMEx_EncoderIndexCallback>:
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <HAL_TIMEx_DirectionChangeCallback>:
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <HAL_TIMEx_IndexErrorCallback>:
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop

0800a61c <HAL_TIMEx_TransitionErrorCallback>:
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop

0800a620 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a622:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800a626:	2e20      	cmp	r6, #32
 800a628:	d147      	bne.n	800a6ba <HAL_UART_Transmit_DMA+0x9a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d043      	beq.n	800a6b6 <HAL_UART_Transmit_DMA+0x96>
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d041      	beq.n	800a6b6 <HAL_UART_Transmit_DMA+0x96>
 800a632:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800a634:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800a638:	2801      	cmp	r0, #1
 800a63a:	d03e      	beq.n	800a6ba <HAL_UART_Transmit_DMA+0x9a>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800a63c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 800a63e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a642:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800a644:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a646:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a648:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 800a64c:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a64e:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 800a652:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a656:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800a65a:	b1c0      	cbz	r0, 800a68e <HAL_UART_Transmit_DMA+0x6e>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a65c:	f24a 6cd5 	movw	ip, #42709	; 0xa6d5
 800a660:	f6c0 0c00 	movt	ip, #2048	; 0x800

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a664:	4613      	mov	r3, r2
 800a666:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a668:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a66c:	f24a 7c1d 	movw	ip, #42781	; 0xa71d
 800a670:	f6c0 0c00 	movt	ip, #2048	; 0x800
 800a674:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a678:	f24a 7c2d 	movw	ip, #42797	; 0xa72d
 800a67c:	f6c0 0c00 	movt	ip, #2048	; 0x800
      huart->hdmatx->XferAbortCallback = NULL;
 800a680:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a682:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a684:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a688:	f7fc fd78 	bl	800717c <HAL_DMA_Start_IT>
 800a68c:	b9b8      	cbnz	r0, 800a6be <HAL_UART_Transmit_DMA+0x9e>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 800a692:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a694:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800a696:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69a:	f102 0308 	add.w	r3, r2, #8
 800a69e:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	f102 0008 	add.w	r0, r2, #8
 800a6aa:	e840 3100 	strex	r1, r3, [r0]
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d1f3      	bne.n	800a69a <HAL_UART_Transmit_DMA+0x7a>

    return HAL_OK;
 800a6b2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a6b6:	2001      	movs	r0, #1
}
 800a6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a6ba:	2002      	movs	r0, #2
}
 800a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6be:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800a6c0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 800a6c8:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 800a6ca:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 800a6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6d0 <HAL_UART_TxCpltCallback>:
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop

0800a6d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a6d6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f013 0320 	ands.w	r3, r3, #32
 800a6e0:	d117      	bne.n	800a712 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800a6e2:	6802      	ldr	r2, [r0, #0]
 800a6e4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	f102 0308 	add.w	r3, r2, #8
 800a6ec:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	f102 0008 	add.w	r0, r2, #8
 800a6f8:	e840 3100 	strex	r1, r3, [r0]
 800a6fc:	2900      	cmp	r1, #0
 800a6fe:	d1f3      	bne.n	800a6e8 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a708:	e842 3100 	strex	r1, r3, [r2]
 800a70c:	2900      	cmp	r1, #0
 800a70e:	d1f7      	bne.n	800a700 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a710:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a712:	f7ff ffdd 	bl	800a6d0 <HAL_UART_TxCpltCallback>
}
 800a716:	bd08      	pop	{r3, pc}

0800a718 <HAL_UART_TxHalfCpltCallback>:
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop

0800a71c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a71c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a71e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a720:	f7ff fffa 	bl	800a718 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a724:	bd08      	pop	{r3, pc}
 800a726:	bf00      	nop

0800a728 <HAL_UART_ErrorCallback>:
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop

0800a72c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a72c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a72e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a730:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 800a734:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a736:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	0612      	lsls	r2, r2, #24
 800a73e:	d501      	bpl.n	800a744 <UART_DMAError+0x18>
 800a740:	2921      	cmp	r1, #33	; 0x21
 800a742:	d00d      	beq.n	800a760 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a744:	689a      	ldr	r2, [r3, #8]
 800a746:	0652      	lsls	r2, r2, #25
 800a748:	d501      	bpl.n	800a74e <UART_DMAError+0x22>
 800a74a:	2c22      	cmp	r4, #34	; 0x22
 800a74c:	d023      	beq.n	800a796 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a74e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800a752:	f043 0310 	orr.w	r3, r3, #16
 800a756:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a75a:	f7ff ffe5 	bl	800a728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a75e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800a760:	2200      	movs	r2, #0
 800a762:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a76a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	e843 2100 	strex	r1, r2, [r3]
 800a772:	2900      	cmp	r1, #0
 800a774:	d1f7      	bne.n	800a766 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a776:	f103 0208 	add.w	r2, r3, #8
 800a77a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a77e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	f103 0c08 	add.w	ip, r3, #8
 800a786:	e84c 2100 	strex	r1, r2, [ip]
 800a78a:	2900      	cmp	r1, #0
 800a78c:	d1f3      	bne.n	800a776 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 800a794:	e7d6      	b.n	800a744 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800a796:	2200      	movs	r2, #0
 800a798:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	e843 2100 	strex	r1, r2, [r3]
 800a7a8:	2900      	cmp	r1, #0
 800a7aa:	d1f7      	bne.n	800a79c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7ac:	f64f 74fe 	movw	r4, #65534	; 0xfffe
 800a7b0:	f6ce 74ff 	movt	r4, #61439	; 0xefff
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	f103 0208 	add.w	r2, r3, #8
 800a7b8:	e852 2f00 	ldrex	r2, [r2]
 800a7bc:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	f103 0c08 	add.w	ip, r3, #8
 800a7c2:	e84c 2100 	strex	r1, r2, [ip]
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d1f4      	bne.n	800a7b4 <UART_DMAError+0x88>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800a7cc:	2a01      	cmp	r2, #1
 800a7ce:	d006      	beq.n	800a7de <UART_DMAError+0xb2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800a7d8:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7da:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800a7dc:	e7b7      	b.n	800a74e <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	e843 2100 	strex	r1, r2, [r3]
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	d0f0      	beq.n	800a7d0 <UART_DMAError+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ee:	e853 2f00 	ldrex	r2, [r3]
 800a7f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	e843 2100 	strex	r1, r2, [r3]
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d1ef      	bne.n	800a7de <UART_DMAError+0xb2>
 800a7fe:	e7e7      	b.n	800a7d0 <UART_DMAError+0xa4>

0800a800 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a800:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a802:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a80a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a80e:	f7ff ff8b 	bl	800a728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a812:	bd08      	pop	{r3, pc}

0800a814 <HAL_UARTEx_RxEventCallback>:
}
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop

0800a818 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a818:	6803      	ldr	r3, [r0, #0]
 800a81a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a81c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a81e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800a822:	ea12 0f0c 	tst.w	r2, ip
{
 800a826:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a828:	689d      	ldr	r5, [r3, #8]
{
 800a82a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a82c:	f000 80f6 	beq.w	800aa1c <HAL_UART_IRQHandler+0x204>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a830:	2001      	movs	r0, #1
 800a832:	f2c1 0000 	movt	r0, #4096	; 0x1000
 800a836:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a83a:	f44f 7090 	mov.w	r0, #288	; 0x120
 800a83e:	f2c0 4000 	movt	r0, #1024	; 0x400
 800a842:	4008      	ands	r0, r1
 800a844:	ea50 000c 	orrs.w	r0, r0, ip
 800a848:	d155      	bne.n	800a8f6 <HAL_UART_IRQHandler+0xde>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a84c:	2801      	cmp	r0, #1
 800a84e:	d022      	beq.n	800a896 <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a850:	02d6      	lsls	r6, r2, #11
 800a852:	d502      	bpl.n	800a85a <HAL_UART_IRQHandler+0x42>
 800a854:	0268      	lsls	r0, r5, #9
 800a856:	f100 810a 	bmi.w	800aa6e <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a85a:	0616      	lsls	r6, r2, #24
 800a85c:	d506      	bpl.n	800a86c <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a85e:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a862:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a866:	4328      	orrs	r0, r5
 800a868:	f040 80f9 	bne.w	800aa5e <HAL_UART_IRQHandler+0x246>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a86c:	0650      	lsls	r0, r2, #25
 800a86e:	d534      	bpl.n	800a8da <HAL_UART_IRQHandler+0xc2>
 800a870:	064e      	lsls	r6, r1, #25
 800a872:	d532      	bpl.n	800a8da <HAL_UART_IRQHandler+0xc2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a874:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	e843 2100 	strex	r1, r2, [r3]
 800a880:	2900      	cmp	r1, #0
 800a882:	d1f7      	bne.n	800a874 <HAL_UART_IRQHandler+0x5c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a884:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a886:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a888:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800a88c:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff ff1e 	bl	800a6d0 <HAL_UART_TxCpltCallback>
}
 800a894:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a896:	06d6      	lsls	r6, r2, #27
 800a898:	d5da      	bpl.n	800a850 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a89a:	06c8      	lsls	r0, r1, #27
 800a89c:	d5d8      	bpl.n	800a850 <HAL_UART_IRQHandler+0x38>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a89e:	2210      	movs	r2, #16
 800a8a0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	0651      	lsls	r1, r2, #25
 800a8a6:	f140 8104 	bpl.w	800aab2 <HAL_UART_IRQHandler+0x29a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a8ac:	6801      	ldr	r1, [r0, #0]
 800a8ae:	684a      	ldr	r2, [r1, #4]
 800a8b0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	d0ee      	beq.n	800a894 <HAL_UART_IRQHandler+0x7c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8b6:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800a8ba:	4295      	cmp	r5, r2
 800a8bc:	d9ea      	bls.n	800a894 <HAL_UART_IRQHandler+0x7c>
        huart->RxXferCount = nb_remaining_rx_data;
 800a8be:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a8c2:	680a      	ldr	r2, [r1, #0]
 800a8c4:	0692      	lsls	r2, r2, #26
 800a8c6:	f140 812c 	bpl.w	800ab22 <HAL_UART_IRQHandler+0x30a>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8ca:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a8ce:	1ae9      	subs	r1, r5, r3
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	b289      	uxth	r1, r1
 800a8d4:	f7ff ff9e 	bl	800a814 <HAL_UARTEx_RxEventCallback>
}
 800a8d8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a8da:	0215      	lsls	r5, r2, #8
 800a8dc:	d502      	bpl.n	800a8e4 <HAL_UART_IRQHandler+0xcc>
 800a8de:	0048      	lsls	r0, r1, #1
 800a8e0:	f100 80e2 	bmi.w	800aaa8 <HAL_UART_IRQHandler+0x290>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a8e4:	01d3      	lsls	r3, r2, #7
 800a8e6:	d5d5      	bpl.n	800a894 <HAL_UART_IRQHandler+0x7c>
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	dad3      	bge.n	800a894 <HAL_UART_IRQHandler+0x7c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a8ec:	4620      	mov	r0, r4
}
 800a8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a8f2:	f000 bc23 	b.w	800b13c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8f6:	07d0      	lsls	r0, r2, #31
 800a8f8:	d509      	bpl.n	800a90e <HAL_UART_IRQHandler+0xf6>
 800a8fa:	05ce      	lsls	r6, r1, #23
 800a8fc:	d507      	bpl.n	800a90e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8fe:	2001      	movs	r0, #1
 800a900:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a902:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a906:	f040 0001 	orr.w	r0, r0, #1
 800a90a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a90e:	0790      	lsls	r0, r2, #30
 800a910:	f140 8096 	bpl.w	800aa40 <HAL_UART_IRQHandler+0x228>
 800a914:	07ee      	lsls	r6, r5, #31
 800a916:	d50a      	bpl.n	800a92e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a918:	2002      	movs	r0, #2
 800a91a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a91c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a920:	f040 0004 	orr.w	r0, r0, #4
 800a924:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a928:	0750      	lsls	r0, r2, #29
 800a92a:	f100 808f 	bmi.w	800aa4c <HAL_UART_IRQHandler+0x234>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a92e:	0716      	lsls	r6, r2, #28
 800a930:	d50c      	bpl.n	800a94c <HAL_UART_IRQHandler+0x134>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a932:	f001 0020 	and.w	r0, r1, #32
 800a936:	ea50 000c 	orrs.w	r0, r0, ip
 800a93a:	d007      	beq.n	800a94c <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a93c:	2008      	movs	r0, #8
 800a93e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a940:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a944:	f040 0008 	orr.w	r0, r0, #8
 800a948:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a94c:	0510      	lsls	r0, r2, #20
 800a94e:	d50a      	bpl.n	800a966 <HAL_UART_IRQHandler+0x14e>
 800a950:	014e      	lsls	r6, r1, #5
 800a952:	d508      	bpl.n	800a966 <HAL_UART_IRQHandler+0x14e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a954:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a958:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a95a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a95e:	f040 0020 	orr.w	r0, r0, #32
 800a962:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a966:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d092      	beq.n	800a894 <HAL_UART_IRQHandler+0x7c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a96e:	0690      	lsls	r0, r2, #26
 800a970:	d50a      	bpl.n	800a988 <HAL_UART_IRQHandler+0x170>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a972:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a976:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800a97a:	4329      	orrs	r1, r5
 800a97c:	d004      	beq.n	800a988 <HAL_UART_IRQHandler+0x170>
        if (huart->RxISR != NULL)
 800a97e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a980:	b112      	cbz	r2, 800a988 <HAL_UART_IRQHandler+0x170>
          huart->RxISR(huart);
 800a982:	4620      	mov	r0, r4
 800a984:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a986:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800a988:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a98c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a98e:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a992:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a996:	ea52 0501 	orrs.w	r5, r2, r1
 800a99a:	f000 80f3 	beq.w	800ab84 <HAL_UART_IRQHandler+0x36c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	e843 2100 	strex	r1, r2, [r3]
 800a9aa:	2900      	cmp	r1, #0
 800a9ac:	d1f7      	bne.n	800a99e <HAL_UART_IRQHandler+0x186>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9ae:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800a9b2:	f6ce 70ff 	movt	r0, #61439	; 0xefff
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	e852 2f00 	ldrex	r2, [r2]
 800a9be:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	f103 0508 	add.w	r5, r3, #8
 800a9c4:	e845 2100 	strex	r1, r2, [r5]
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	d1f4      	bne.n	800a9b6 <HAL_UART_IRQHandler+0x19e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a9ce:	2a01      	cmp	r2, #1
 800a9d0:	d055      	beq.n	800aa7e <HAL_UART_IRQHandler+0x266>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9d2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a9d4:	2120      	movs	r1, #32
 800a9d6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9da:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9dc:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800a9de:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9e0:	064a      	lsls	r2, r1, #25
 800a9e2:	d55d      	bpl.n	800aaa0 <HAL_UART_IRQHandler+0x288>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	f103 0208 	add.w	r2, r3, #8
 800a9e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	f103 0008 	add.w	r0, r3, #8
 800a9f4:	e840 2100 	strex	r1, r2, [r0]
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	d1f3      	bne.n	800a9e4 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 800a9fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d04e      	beq.n	800aaa0 <HAL_UART_IRQHandler+0x288>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa02:	f64a 0301 	movw	r3, #43009	; 0xa801
 800aa06:	f6c0 0300 	movt	r3, #2048	; 0x800
 800aa0a:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa0c:	f7fc fc4a 	bl	80072a4 <HAL_DMA_Abort_IT>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f43f af3f 	beq.w	800a894 <HAL_UART_IRQHandler+0x7c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa16:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aa18:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aa1a:	e00e      	b.n	800aa3a <HAL_UART_IRQHandler+0x222>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa1c:	0696      	lsls	r6, r2, #26
 800aa1e:	f57f af14 	bpl.w	800a84a <HAL_UART_IRQHandler+0x32>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa22:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa26:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 800aa2a:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800aa2e:	f43f af0c 	beq.w	800a84a <HAL_UART_IRQHandler+0x32>
      if (huart->RxISR != NULL)
 800aa32:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f43f af2d 	beq.w	800a894 <HAL_UART_IRQHandler+0x7c>
}
 800aa3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa3e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa40:	0756      	lsls	r6, r2, #29
 800aa42:	f57f af74 	bpl.w	800a92e <HAL_UART_IRQHandler+0x116>
 800aa46:	07e8      	lsls	r0, r5, #31
 800aa48:	f57f af71 	bpl.w	800a92e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa4c:	2004      	movs	r0, #4
 800aa4e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa50:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800aa54:	f040 0002 	orr.w	r0, r0, #2
 800aa58:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800aa5c:	e767      	b.n	800a92e <HAL_UART_IRQHandler+0x116>
    if (huart->TxISR != NULL)
 800aa5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f43f af17 	beq.w	800a894 <HAL_UART_IRQHandler+0x7c>
      huart->TxISR(huart);
 800aa66:	4620      	mov	r0, r4
}
 800aa68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800aa6c:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800aa72:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa74:	621a      	str	r2, [r3, #32]
}
 800aa76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800aa7a:	f000 bb5d 	b.w	800b138 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	e843 2100 	strex	r1, r2, [r3]
 800aa8a:	2900      	cmp	r1, #0
 800aa8c:	d0a1      	beq.n	800a9d2 <HAL_UART_IRQHandler+0x1ba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	e853 2f00 	ldrex	r2, [r3]
 800aa92:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	e843 2100 	strex	r1, r2, [r3]
 800aa9a:	2900      	cmp	r1, #0
 800aa9c:	d1ef      	bne.n	800aa7e <HAL_UART_IRQHandler+0x266>
 800aa9e:	e798      	b.n	800a9d2 <HAL_UART_IRQHandler+0x1ba>
            HAL_UART_ErrorCallback(huart);
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f7ff fe41 	bl	800a728 <HAL_UART_ErrorCallback>
}
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aaa8:	4620      	mov	r0, r4
}
 800aaaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aaae:	f000 bb47 	b.w	800b140 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aab2:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800aab6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaba:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800aabe:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aac0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	f43f aee6 	beq.w	800a894 <HAL_UART_IRQHandler+0x7c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aac8:	1a41      	subs	r1, r0, r1
 800aaca:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800aacc:	2900      	cmp	r1, #0
 800aace:	f43f aee1 	beq.w	800a894 <HAL_UART_IRQHandler+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	e843 2000 	strex	r0, r2, [r3]
 800aade:	2800      	cmp	r0, #0
 800aae0:	d1f7      	bne.n	800aad2 <HAL_UART_IRQHandler+0x2ba>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aae2:	f64f 75fe 	movw	r5, #65534	; 0xfffe
 800aae6:	f6ce 75ff 	movt	r5, #61439	; 0xefff
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	f103 0208 	add.w	r2, r3, #8
 800aaee:	e852 2f00 	ldrex	r2, [r2]
 800aaf2:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	f103 0c08 	add.w	ip, r3, #8
 800aaf8:	e84c 2000 	strex	r0, r2, [ip]
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1f4      	bne.n	800aaea <HAL_UART_IRQHandler+0x2d2>
        huart->RxState = HAL_UART_STATE_READY;
 800ab00:	2220      	movs	r2, #32
 800ab02:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800ab06:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab08:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab0e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	e843 2000 	strex	r0, r2, [r3]
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d1f7      	bne.n	800ab0a <HAL_UART_IRQHandler+0x2f2>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f7ff fe7a 	bl	800a814 <HAL_UARTEx_RxEventCallback>
}
 800ab20:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2a:	e843 2100 	strex	r1, r2, [r3]
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	d1f7      	bne.n	800ab22 <HAL_UART_IRQHandler+0x30a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab32:	f103 0208 	add.w	r2, r3, #8
 800ab36:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	f103 0508 	add.w	r5, r3, #8
 800ab42:	e845 2100 	strex	r1, r2, [r5]
 800ab46:	2900      	cmp	r1, #0
 800ab48:	d1f3      	bne.n	800ab32 <HAL_UART_IRQHandler+0x31a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	f103 0208 	add.w	r2, r3, #8
 800ab4e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	f103 0508 	add.w	r5, r3, #8
 800ab5a:	e845 2100 	strex	r1, r2, [r5]
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d1f3      	bne.n	800ab4a <HAL_UART_IRQHandler+0x332>
          huart->RxState = HAL_UART_STATE_READY;
 800ab62:	2220      	movs	r2, #32
 800ab64:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab68:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	e843 2100 	strex	r1, r2, [r3]
 800ab76:	2900      	cmp	r1, #0
 800ab78:	d1f7      	bne.n	800ab6a <HAL_UART_IRQHandler+0x352>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab7a:	f7fc fb59 	bl	8007230 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab7e:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800ab82:	e6a2      	b.n	800a8ca <HAL_UART_IRQHandler+0xb2>
        HAL_UART_ErrorCallback(huart);
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7ff fdcf 	bl	800a728 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab8a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}

0800ab90 <UART_SetConfig>:
{
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab94:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab96:	6882      	ldr	r2, [r0, #8]
 800ab98:	6900      	ldr	r0, [r0, #16]
 800ab9a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab9c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab9e:	4302      	orrs	r2, r0
 800aba0:	430a      	orrs	r2, r1
 800aba2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aba4:	f646 11f3 	movw	r1, #27123	; 0x69f3
 800aba8:	f6cc 71ff 	movt	r1, #53247	; 0xcfff
 800abac:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abb0:	430a      	orrs	r2, r1
 800abb2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abb4:	685a      	ldr	r2, [r3, #4]
 800abb6:	68e1      	ldr	r1, [r4, #12]
 800abb8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800abbc:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abc2:	f2c4 0100 	movt	r1, #16384	; 0x4000
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abc6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abc8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abca:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abcc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abce:	f000 8085 	beq.w	800acdc <UART_SetConfig+0x14c>
    tmpreg |= huart->Init.OneBitSampling;
 800abd2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abd4:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800abd8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800abdc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abde:	430a      	orrs	r2, r1
 800abe0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800abe6:	f022 020f 	bic.w	r2, r2, #15
 800abea:	430a      	orrs	r2, r1
 800abec:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800abf2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d01b      	beq.n	800ac32 <UART_SetConfig+0xa2>
 800abfa:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800abfe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d042      	beq.n	800ac8c <UART_SetConfig+0xfc>
 800ac06:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800ac0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	f000 811b 	beq.w	800ae4a <UART_SetConfig+0x2ba>
 800ac14:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
 800ac18:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	f000 80be 	beq.w	800ad9e <UART_SetConfig+0x20e>
        ret = HAL_ERROR;
 800ac22:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800ac24:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800ac26:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800ac2a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800ac2e:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800ac30:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ac3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	3b01      	subs	r3, #1
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	f240 80a1 	bls.w	800ad8c <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ac4e:	f000 8122 	beq.w	800ae96 <UART_SetConfig+0x306>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac52:	f7fd fee5 	bl	8008a20 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f000 80f5 	beq.w	800ae46 <UART_SetConfig+0x2b6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	f24f 1354 	movw	r3, #61780	; 0xf154
 800ac64:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ac68:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800ac6c:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac70:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac74:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800ac78:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7c:	f1a3 0210 	sub.w	r2, r3, #16
 800ac80:	428a      	cmp	r2, r1
 800ac82:	d8ce      	bhi.n	800ac22 <UART_SetConfig+0x92>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac84:	6822      	ldr	r2, [r4, #0]
 800ac86:	2000      	movs	r0, #0
 800ac88:	60d3      	str	r3, [r2, #12]
 800ac8a:	e7cb      	b.n	800ac24 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ac94:	f24f 1244 	movw	r2, #61764	; 0xf144
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	f6c0 0200 	movt	r2, #2048	; 0x800
 800aca0:	f003 030c 	and.w	r3, r3, #12
 800aca4:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aca6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800acaa:	f000 808d 	beq.w	800adc8 <UART_SetConfig+0x238>
    switch (clocksource)
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d8b7      	bhi.n	800ac22 <UART_SetConfig+0x92>
 800acb2:	a201      	add	r2, pc, #4	; (adr r2, 800acb8 <UART_SetConfig+0x128>)
 800acb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb8:	0800adff 	.word	0x0800adff
 800acbc:	0800ac53 	.word	0x0800ac53
 800acc0:	0800ae8d 	.word	0x0800ae8d
 800acc4:	0800ac23 	.word	0x0800ac23
 800acc8:	0800adc3 	.word	0x0800adc3
 800accc:	0800ac23 	.word	0x0800ac23
 800acd0:	0800ac23 	.word	0x0800ac23
 800acd4:	0800ac23 	.word	0x0800ac23
 800acd8:	0800ae77 	.word	0x0800ae77
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acdc:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800ace0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ace4:	4311      	orrs	r1, r2
 800ace6:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acf0:	f022 020f 	bic.w	r2, r2, #15
 800acf4:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acf6:	f2c4 0002 	movt	r0, #16386	; 0x4002
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acfa:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acfc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ad00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad08:	f000 80bb 	beq.w	800ae82 <UART_SetConfig+0x2f2>
 800ad0c:	d80b      	bhi.n	800ad26 <UART_SetConfig+0x196>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d042      	beq.n	800ad98 <UART_SetConfig+0x208>
 800ad12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad16:	d184      	bne.n	800ac22 <UART_SetConfig+0x92>
        pclk = HAL_RCC_GetSysClockFreq();
 800ad18:	f7fd fd08 	bl	800872c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f000 8092 	beq.w	800ae46 <UART_SetConfig+0x2b6>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad22:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad24:	e005      	b.n	800ad32 <UART_SetConfig+0x1a2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad2a:	f47f af7a 	bne.w	800ac22 <UART_SetConfig+0x92>
        pclk = (uint32_t) LSE_VALUE;
 800ad2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad32:	f24f 1354 	movw	r3, #61780	; 0xf154
 800ad36:	f6c0 0300 	movt	r3, #2048	; 0x800
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad3a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad3c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800ad40:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ad48:	4299      	cmp	r1, r3
 800ad4a:	f63f af6a 	bhi.w	800ac22 <UART_SetConfig+0x92>
 800ad4e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800ad52:	f63f af66 	bhi.w	800ac22 <UART_SetConfig+0x92>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad56:	2300      	movs	r3, #0
 800ad58:	4619      	mov	r1, r3
 800ad5a:	f7f5 ffbd 	bl	8000cd8 <__aeabi_uldivmod>
 800ad5e:	086a      	lsrs	r2, r5, #1
 800ad60:	0203      	lsls	r3, r0, #8
 800ad62:	0209      	lsls	r1, r1, #8
 800ad64:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800ad68:	1898      	adds	r0, r3, r2
 800ad6a:	f141 0100 	adc.w	r1, r1, #0
 800ad6e:	462a      	mov	r2, r5
 800ad70:	2300      	movs	r3, #0
 800ad72:	f7f5 ffb1 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad76:	f64f 42ff 	movw	r2, #64767	; 0xfcff
 800ad7a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800ad7e:	f2c0 020f 	movt	r2, #15
 800ad82:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad84:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad86:	f63f af4c 	bhi.w	800ac22 <UART_SetConfig+0x92>
 800ad8a:	e77b      	b.n	800ac84 <UART_SetConfig+0xf4>
 800ad8c:	f24f 1240 	movw	r2, #61760	; 0xf140
 800ad90:	f6c0 0200 	movt	r2, #2048	; 0x800
 800ad94:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad96:	e786      	b.n	800aca6 <UART_SetConfig+0x116>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad98:	f7fd fe2c 	bl	80089f4 <HAL_RCC_GetPCLK1Freq>
        break;
 800ad9c:	e7be      	b.n	800ad1c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ada2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800adae:	2b80      	cmp	r3, #128	; 0x80
 800adb0:	d07c      	beq.n	800aeac <UART_SetConfig+0x31c>
 800adb2:	d863      	bhi.n	800ae7c <UART_SetConfig+0x2ec>
 800adb4:	b303      	cbz	r3, 800adf8 <UART_SetConfig+0x268>
 800adb6:	2b40      	cmp	r3, #64	; 0x40
 800adb8:	f47f af33 	bne.w	800ac22 <UART_SetConfig+0x92>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adbc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800adc0:	d020      	beq.n	800ae04 <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetSysClockFreq();
 800adc2:	f7fd fcb3 	bl	800872c <HAL_RCC_GetSysClockFreq>
        break;
 800adc6:	e746      	b.n	800ac56 <UART_SetConfig+0xc6>
    switch (clocksource)
 800adc8:	2b08      	cmp	r3, #8
 800adca:	f63f af2a 	bhi.w	800ac22 <UART_SetConfig+0x92>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x244>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae9d 	.word	0x0800ae9d
 800add8:	0800ae97 	.word	0x0800ae97
 800addc:	0800aea3 	.word	0x0800aea3
 800ade0:	0800ac23 	.word	0x0800ac23
 800ade4:	0800ae05 	.word	0x0800ae05
 800ade8:	0800ac23 	.word	0x0800ac23
 800adec:	0800ac23 	.word	0x0800ac23
 800adf0:	0800ac23 	.word	0x0800ac23
 800adf4:	0800ae0d 	.word	0x0800ae0d
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adf8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800adfc:	d04e      	beq.n	800ae9c <UART_SetConfig+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800adfe:	f7fd fdf9 	bl	80089f4 <HAL_RCC_GetPCLK1Freq>
        break;
 800ae02:	e728      	b.n	800ac56 <UART_SetConfig+0xc6>
        pclk = HAL_RCC_GetSysClockFreq();
 800ae04:	f7fd fc92 	bl	800872c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ae08:	b1e8      	cbz	r0, 800ae46 <UART_SetConfig+0x2b6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae0c:	6862      	ldr	r2, [r4, #4]
 800ae0e:	f24f 1354 	movw	r3, #61780	; 0xf154
 800ae12:	f6c0 0300 	movt	r3, #2048	; 0x800
 800ae16:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800ae1a:	fbb0 f0f1 	udiv	r0, r0, r1
 800ae1e:	0853      	lsrs	r3, r2, #1
 800ae20:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae24:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae28:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae2c:	f1a3 0210 	sub.w	r2, r3, #16
 800ae30:	428a      	cmp	r2, r1
 800ae32:	f63f aef6 	bhi.w	800ac22 <UART_SetConfig+0x92>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae36:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800ae3a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae3c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae3e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60cb      	str	r3, [r1, #12]
 800ae46:	2000      	movs	r0, #0
 800ae48:	e6ec      	b.n	800ac24 <UART_SetConfig+0x94>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ae52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae5a:	2b20      	cmp	r3, #32
 800ae5c:	d026      	beq.n	800aeac <UART_SetConfig+0x31c>
 800ae5e:	d804      	bhi.n	800ae6a <UART_SetConfig+0x2da>
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0c9      	beq.n	800adf8 <UART_SetConfig+0x268>
 800ae64:	2b10      	cmp	r3, #16
 800ae66:	d0a9      	beq.n	800adbc <UART_SetConfig+0x22c>
 800ae68:	e6db      	b.n	800ac22 <UART_SetConfig+0x92>
 800ae6a:	2b30      	cmp	r3, #48	; 0x30
 800ae6c:	f47f aed9 	bne.w	800ac22 <UART_SetConfig+0x92>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800ae74:	d0ca      	beq.n	800ae0c <UART_SetConfig+0x27c>
    switch (clocksource)
 800ae76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae7a:	e6f0      	b.n	800ac5e <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae7c:	2bc0      	cmp	r3, #192	; 0xc0
 800ae7e:	d0f7      	beq.n	800ae70 <UART_SetConfig+0x2e0>
 800ae80:	e6cf      	b.n	800ac22 <UART_SetConfig+0x92>
 800ae82:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800ae86:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800ae8a:	e752      	b.n	800ad32 <UART_SetConfig+0x1a2>
        pclk = (uint32_t) HSI_VALUE;
 800ae8c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800ae90:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800ae94:	e6e3      	b.n	800ac5e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae96:	f7fd fdc3 	bl	8008a20 <HAL_RCC_GetPCLK2Freq>
        break;
 800ae9a:	e7b5      	b.n	800ae08 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae9c:	f7fd fdaa 	bl	80089f4 <HAL_RCC_GetPCLK1Freq>
        break;
 800aea0:	e7b2      	b.n	800ae08 <UART_SetConfig+0x278>
        pclk = (uint32_t) HSI_VALUE;
 800aea2:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800aea6:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800aeaa:	e7af      	b.n	800ae0c <UART_SetConfig+0x27c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800aeb0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 800aeb4:	f2c0 00f4 	movt	r0, #244	; 0xf4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb8:	f47f aed1 	bne.w	800ac5e <UART_SetConfig+0xce>
 800aebc:	e7a6      	b.n	800ae0c <UART_SetConfig+0x27c>
 800aebe:	bf00      	nop

0800aec0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aec0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aec2:	07da      	lsls	r2, r3, #31
{
 800aec4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aec6:	d506      	bpl.n	800aed6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aec8:	6801      	ldr	r1, [r0, #0]
 800aeca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800aecc:	684a      	ldr	r2, [r1, #4]
 800aece:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800aed2:	4322      	orrs	r2, r4
 800aed4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aed6:	079c      	lsls	r4, r3, #30
 800aed8:	d506      	bpl.n	800aee8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aeda:	6801      	ldr	r1, [r0, #0]
 800aedc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800aede:	684a      	ldr	r2, [r1, #4]
 800aee0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aee4:	4322      	orrs	r2, r4
 800aee6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aee8:	0759      	lsls	r1, r3, #29
 800aeea:	d506      	bpl.n	800aefa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeec:	6801      	ldr	r1, [r0, #0]
 800aeee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800aef0:	684a      	ldr	r2, [r1, #4]
 800aef2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aef6:	4322      	orrs	r2, r4
 800aef8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aefa:	071a      	lsls	r2, r3, #28
 800aefc:	d506      	bpl.n	800af0c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aefe:	6801      	ldr	r1, [r0, #0]
 800af00:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800af02:	684a      	ldr	r2, [r1, #4]
 800af04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af08:	4322      	orrs	r2, r4
 800af0a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af0c:	06dc      	lsls	r4, r3, #27
 800af0e:	d506      	bpl.n	800af1e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af10:	6801      	ldr	r1, [r0, #0]
 800af12:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800af14:	688a      	ldr	r2, [r1, #8]
 800af16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af1a:	4322      	orrs	r2, r4
 800af1c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af1e:	0699      	lsls	r1, r3, #26
 800af20:	d506      	bpl.n	800af30 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af22:	6801      	ldr	r1, [r0, #0]
 800af24:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800af26:	688a      	ldr	r2, [r1, #8]
 800af28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af2c:	4322      	orrs	r2, r4
 800af2e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af30:	065a      	lsls	r2, r3, #25
 800af32:	d509      	bpl.n	800af48 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af34:	6801      	ldr	r1, [r0, #0]
 800af36:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800af38:	684a      	ldr	r2, [r1, #4]
 800af3a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800af3e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af40:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af44:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af46:	d00b      	beq.n	800af60 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af48:	061b      	lsls	r3, r3, #24
 800af4a:	d506      	bpl.n	800af5a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af4c:	6802      	ldr	r2, [r0, #0]
 800af4e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800af50:	6853      	ldr	r3, [r2, #4]
 800af52:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800af56:	430b      	orrs	r3, r1
 800af58:	6053      	str	r3, [r2, #4]
}
 800af5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af5e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af60:	684a      	ldr	r2, [r1, #4]
 800af62:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800af64:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800af68:	4322      	orrs	r2, r4
 800af6a:	604a      	str	r2, [r1, #4]
 800af6c:	e7ec      	b.n	800af48 <UART_AdvFeatureConfig+0x88>
 800af6e:	bf00      	nop

0800af70 <UART_WaitOnFlagUntilTimeout>:
{
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af78:	6804      	ldr	r4, [r0, #0]
{
 800af7a:	4607      	mov	r7, r0
 800af7c:	460e      	mov	r6, r1
 800af7e:	4615      	mov	r5, r2
 800af80:	4699      	mov	r9, r3
 800af82:	f1b8 3fff 	cmp.w	r8, #4294967295
 800af86:	d10a      	bne.n	800af9e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af88:	69e3      	ldr	r3, [r4, #28]
 800af8a:	ea36 0303 	bics.w	r3, r6, r3
 800af8e:	bf0c      	ite	eq
 800af90:	2301      	moveq	r3, #1
 800af92:	2300      	movne	r3, #0
 800af94:	429d      	cmp	r5, r3
 800af96:	d0f7      	beq.n	800af88 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800af98:	2000      	movs	r0, #0
}
 800af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af9e:	69e2      	ldr	r2, [r4, #28]
 800afa0:	ea36 0202 	bics.w	r2, r6, r2
 800afa4:	bf0c      	ite	eq
 800afa6:	2301      	moveq	r3, #1
 800afa8:	2300      	movne	r3, #0
 800afaa:	42ab      	cmp	r3, r5
 800afac:	d1f4      	bne.n	800af98 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afae:	f7fb f809 	bl	8005fc4 <HAL_GetTick>
 800afb2:	eba0 0009 	sub.w	r0, r0, r9
 800afb6:	4540      	cmp	r0, r8
 800afb8:	d833      	bhi.n	800b022 <UART_WaitOnFlagUntilTimeout+0xb2>
 800afba:	f1b8 0f00 	cmp.w	r8, #0
 800afbe:	d030      	beq.n	800b022 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afc0:	683c      	ldr	r4, [r7, #0]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	0758      	lsls	r0, r3, #29
 800afc6:	4622      	mov	r2, r4
 800afc8:	d5db      	bpl.n	800af82 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afca:	69e3      	ldr	r3, [r4, #28]
 800afcc:	0519      	lsls	r1, r3, #20
 800afce:	d5d8      	bpl.n	800af82 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afd4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800afda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	e844 3100 	strex	r1, r3, [r4]
 800afe2:	b139      	cbz	r1, 800aff4 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe4:	e852 3f00 	ldrex	r3, [r2]
 800afe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afec:	e842 3100 	strex	r1, r3, [r2]
 800aff0:	2900      	cmp	r1, #0
 800aff2:	d1f7      	bne.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	f102 0308 	add.w	r3, r2, #8
 800aff8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b000:	f102 0008 	add.w	r0, r2, #8
 800b004:	e840 3100 	strex	r1, r3, [r0]
 800b008:	2900      	cmp	r1, #0
 800b00a:	d1f3      	bne.n	800aff4 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800b00c:	2320      	movs	r3, #32
 800b00e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800b012:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800b01a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b01c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b020:	e7bb      	b.n	800af9a <UART_WaitOnFlagUntilTimeout+0x2a>
 800b022:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b024:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	e842 3100 	strex	r1, r3, [r2]
 800b030:	2900      	cmp	r1, #0
 800b032:	d1f7      	bne.n	800b024 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	f102 0308 	add.w	r3, r2, #8
 800b038:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b040:	f102 0008 	add.w	r0, r2, #8
 800b044:	e840 3100 	strex	r1, r3, [r0]
 800b048:	2900      	cmp	r1, #0
 800b04a:	d1f3      	bne.n	800b034 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800b04c:	2320      	movs	r3, #32
 800b04e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800b052:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800b05a:	2003      	movs	r0, #3
 800b05c:	e79d      	b.n	800af9a <UART_WaitOnFlagUntilTimeout+0x2a>
 800b05e:	bf00      	nop

0800b060 <HAL_UART_Init>:
  if (huart == NULL)
 800b060:	2800      	cmp	r0, #0
 800b062:	d066      	beq.n	800b132 <HAL_UART_Init+0xd2>
{
 800b064:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800b066:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800b06a:	b082      	sub	sp, #8
 800b06c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d04c      	beq.n	800b10c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800b072:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b074:	2324      	movs	r3, #36	; 0x24
 800b076:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800b07a:	6813      	ldr	r3, [r2, #0]
 800b07c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b080:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800b082:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b084:	f7ff fd84 	bl	800ab90 <UART_SetConfig>
 800b088:	2801      	cmp	r0, #1
 800b08a:	d03c      	beq.n	800b106 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b08c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d135      	bne.n	800b0fe <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	6859      	ldr	r1, [r3, #4]
 800b096:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800b09a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b09c:	6899      	ldr	r1, [r3, #8]
 800b09e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800b0a2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b0a4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0a6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800b0a8:	f041 0101 	orr.w	r1, r1, #1
 800b0ac:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ae:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800b0b2:	f7fa ff87 	bl	8005fc4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800b0bc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0be:	d40e      	bmi.n	800b0de <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	075b      	lsls	r3, r3, #29
 800b0c4:	d427      	bmi.n	800b116 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800b0ce:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800b0d6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800b0da:	b002      	add	sp, #8
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7ff ff3f 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800b0f2:	b9e0      	cbnz	r0, 800b12e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	075b      	lsls	r3, r3, #29
 800b0fa:	d40c      	bmi.n	800b116 <HAL_UART_Init+0xb6>
 800b0fc:	e7e3      	b.n	800b0c6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff fede 	bl	800aec0 <UART_AdvFeatureConfig>
 800b104:	e7c5      	b.n	800b092 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800b106:	2001      	movs	r0, #1
}
 800b108:	b002      	add	sp, #8
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800b10c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800b110:	f7fa fe76 	bl	8005e00 <HAL_UART_MspInit>
 800b114:	e7ad      	b.n	800b072 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	2200      	movs	r2, #0
 800b11e:	4633      	mov	r3, r6
 800b120:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b124:	4620      	mov	r0, r4
 800b126:	f7ff ff23 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d0cb      	beq.n	800b0c6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800b12e:	2003      	movs	r0, #3
 800b130:	e7d3      	b.n	800b0da <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800b132:	2001      	movs	r0, #1
}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop

0800b138 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop

0800b13c <HAL_UARTEx_RxFifoFullCallback>:
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop

0800b140 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop

0800b144 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b144:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d017      	beq.n	800b17c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b14c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	2324      	movs	r3, #36	; 0x24
{
 800b150:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800b152:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b156:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b158:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b15a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800b15c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b160:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800b164:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b166:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b168:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b16a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800b16e:	2220      	movs	r2, #32
 800b170:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800b174:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800b178:	4618      	mov	r0, r3
}
 800b17a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800b17c:	2002      	movs	r0, #2
}
 800b17e:	4770      	bx	lr

0800b180 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b180:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b184:	2a01      	cmp	r2, #1
 800b186:	d03b      	beq.n	800b200 <HAL_UARTEx_SetTxFifoThreshold+0x80>

  huart->gState = HAL_UART_STATE_BUSY;
 800b188:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b18a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b18c:	2024      	movs	r0, #36	; 0x24
{
 800b18e:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b190:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b194:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b196:	6810      	ldr	r0, [r2, #0]
 800b198:	f020 0001 	bic.w	r0, r0, #1
 800b19c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b19e:	6890      	ldr	r0, [r2, #8]
 800b1a0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800b1a4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1a6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1a8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1aa:	b330      	cbz	r0, 800b1fa <HAL_UARTEx_SetTxFifoThreshold+0x7a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ac:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1ae:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1b0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1b4:	f24f 1174 	movw	r1, #61812	; 0xf174
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1b8:	0f6d      	lsrs	r5, r5, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ba:	f6c0 0100 	movt	r1, #2048	; 0x800
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1be:	f24f 1e6c 	movw	lr, #61804	; 0xf16c
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1c2:	5d48      	ldrb	r0, [r1, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1c4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1c8:	f6c0 0e00 	movt	lr, #2048	; 0x800
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1cc:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1ce:	f81e 6005 	ldrb.w	r6, [lr, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1d2:	f81e 500c 	ldrb.w	r5, [lr, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1d6:	fbb0 f0f6 	udiv	r0, r0, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1da:	00c9      	lsls	r1, r1, #3
 800b1dc:	fbb1 f1f5 	udiv	r1, r1, r5
 800b1e0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800b1ea:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1ec:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800b1ee:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800b1f2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b1f4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800b1f8:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b1fa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	e7ef      	b.n	800b1e0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 800b200:	2002      	movs	r0, #2
}
 800b202:	4770      	bx	lr

0800b204 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b204:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800b208:	2a01      	cmp	r2, #1
 800b20a:	d03b      	beq.n	800b284 <HAL_UARTEx_SetRxFifoThreshold+0x80>
  huart->gState = HAL_UART_STATE_BUSY;
 800b20c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b210:	2024      	movs	r0, #36	; 0x24
{
 800b212:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b214:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b218:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b21a:	6810      	ldr	r0, [r2, #0]
 800b21c:	f020 0001 	bic.w	r0, r0, #1
 800b220:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b222:	6890      	ldr	r0, [r2, #8]
 800b224:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800b228:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b22a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b22c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b22e:	b330      	cbz	r0, 800b27e <HAL_UARTEx_SetRxFifoThreshold+0x7a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b230:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b232:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b234:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b238:	f24f 1174 	movw	r1, #61812	; 0xf174
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b23c:	0f6d      	lsrs	r5, r5, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b23e:	f6c0 0100 	movt	r1, #2048	; 0x800
                               (uint16_t)denominator[tx_fifo_threshold];
 800b242:	f24f 1e6c 	movw	lr, #61804	; 0xf16c
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b246:	5d48      	ldrb	r0, [r1, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b248:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b24c:	f6c0 0e00 	movt	lr, #2048	; 0x800
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b250:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b252:	f81e 6005 	ldrb.w	r6, [lr, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b256:	f81e 500c 	ldrb.w	r5, [lr, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b25a:	fbb0 f0f6 	udiv	r0, r0, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b25e:	00c9      	lsls	r1, r1, #3
 800b260:	fbb1 f1f5 	udiv	r1, r1, r5
 800b264:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800b268:	2100      	movs	r1, #0
 800b26a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800b26e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b270:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800b272:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800b276:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800b278:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b27e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800b280:	4608      	mov	r0, r1
 800b282:	e7ef      	b.n	800b264 <HAL_UARTEx_SetRxFifoThreshold+0x60>
  __HAL_LOCK(huart);
 800b284:	2002      	movs	r0, #2
}
 800b286:	4770      	bx	lr

0800b288 <__cvt>:
 800b288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b28c:	ec55 4b10 	vmov	r4, r5, d0
 800b290:	2d00      	cmp	r5, #0
 800b292:	460e      	mov	r6, r1
 800b294:	4619      	mov	r1, r3
 800b296:	462b      	mov	r3, r5
 800b298:	bfbb      	ittet	lt
 800b29a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b29e:	461d      	movlt	r5, r3
 800b2a0:	2300      	movge	r3, #0
 800b2a2:	232d      	movlt	r3, #45	; 0x2d
 800b2a4:	700b      	strb	r3, [r1, #0]
 800b2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2ac:	4691      	mov	r9, r2
 800b2ae:	f023 0820 	bic.w	r8, r3, #32
 800b2b2:	bfbc      	itt	lt
 800b2b4:	4622      	movlt	r2, r4
 800b2b6:	4614      	movlt	r4, r2
 800b2b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2bc:	d005      	beq.n	800b2ca <__cvt+0x42>
 800b2be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b2c2:	d100      	bne.n	800b2c6 <__cvt+0x3e>
 800b2c4:	3601      	adds	r6, #1
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	e000      	b.n	800b2cc <__cvt+0x44>
 800b2ca:	2103      	movs	r1, #3
 800b2cc:	ab03      	add	r3, sp, #12
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	ab02      	add	r3, sp, #8
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	ec45 4b10 	vmov	d0, r4, r5
 800b2d8:	4653      	mov	r3, sl
 800b2da:	4632      	mov	r2, r6
 800b2dc:	f000 fea0 	bl	800c020 <_dtoa_r>
 800b2e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	d102      	bne.n	800b2ee <__cvt+0x66>
 800b2e8:	f019 0f01 	tst.w	r9, #1
 800b2ec:	d022      	beq.n	800b334 <__cvt+0xac>
 800b2ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2f2:	eb07 0906 	add.w	r9, r7, r6
 800b2f6:	d110      	bne.n	800b31a <__cvt+0x92>
 800b2f8:	783b      	ldrb	r3, [r7, #0]
 800b2fa:	2b30      	cmp	r3, #48	; 0x30
 800b2fc:	d10a      	bne.n	800b314 <__cvt+0x8c>
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	4620      	mov	r0, r4
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 fc07 	bl	8000b18 <__aeabi_dcmpeq>
 800b30a:	b918      	cbnz	r0, 800b314 <__cvt+0x8c>
 800b30c:	f1c6 0601 	rsb	r6, r6, #1
 800b310:	f8ca 6000 	str.w	r6, [sl]
 800b314:	f8da 3000 	ldr.w	r3, [sl]
 800b318:	4499      	add	r9, r3
 800b31a:	2200      	movs	r2, #0
 800b31c:	2300      	movs	r3, #0
 800b31e:	4620      	mov	r0, r4
 800b320:	4629      	mov	r1, r5
 800b322:	f7f5 fbf9 	bl	8000b18 <__aeabi_dcmpeq>
 800b326:	b108      	cbz	r0, 800b32c <__cvt+0xa4>
 800b328:	f8cd 900c 	str.w	r9, [sp, #12]
 800b32c:	2230      	movs	r2, #48	; 0x30
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	454b      	cmp	r3, r9
 800b332:	d307      	bcc.n	800b344 <__cvt+0xbc>
 800b334:	9b03      	ldr	r3, [sp, #12]
 800b336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b338:	1bdb      	subs	r3, r3, r7
 800b33a:	4638      	mov	r0, r7
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	b004      	add	sp, #16
 800b340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b344:	1c59      	adds	r1, r3, #1
 800b346:	9103      	str	r1, [sp, #12]
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	e7f0      	b.n	800b32e <__cvt+0xa6>

0800b34c <__exponent>:
 800b34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b34e:	4603      	mov	r3, r0
 800b350:	2900      	cmp	r1, #0
 800b352:	bfb8      	it	lt
 800b354:	4249      	neglt	r1, r1
 800b356:	f803 2b02 	strb.w	r2, [r3], #2
 800b35a:	bfb4      	ite	lt
 800b35c:	222d      	movlt	r2, #45	; 0x2d
 800b35e:	222b      	movge	r2, #43	; 0x2b
 800b360:	2909      	cmp	r1, #9
 800b362:	7042      	strb	r2, [r0, #1]
 800b364:	dd2a      	ble.n	800b3bc <__exponent+0x70>
 800b366:	f10d 0207 	add.w	r2, sp, #7
 800b36a:	4617      	mov	r7, r2
 800b36c:	260a      	movs	r6, #10
 800b36e:	4694      	mov	ip, r2
 800b370:	fb91 f5f6 	sdiv	r5, r1, r6
 800b374:	fb06 1415 	mls	r4, r6, r5, r1
 800b378:	3430      	adds	r4, #48	; 0x30
 800b37a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b37e:	460c      	mov	r4, r1
 800b380:	2c63      	cmp	r4, #99	; 0x63
 800b382:	f102 32ff 	add.w	r2, r2, #4294967295
 800b386:	4629      	mov	r1, r5
 800b388:	dcf1      	bgt.n	800b36e <__exponent+0x22>
 800b38a:	3130      	adds	r1, #48	; 0x30
 800b38c:	f1ac 0402 	sub.w	r4, ip, #2
 800b390:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b394:	1c41      	adds	r1, r0, #1
 800b396:	4622      	mov	r2, r4
 800b398:	42ba      	cmp	r2, r7
 800b39a:	d30a      	bcc.n	800b3b2 <__exponent+0x66>
 800b39c:	f10d 0209 	add.w	r2, sp, #9
 800b3a0:	eba2 020c 	sub.w	r2, r2, ip
 800b3a4:	42bc      	cmp	r4, r7
 800b3a6:	bf88      	it	hi
 800b3a8:	2200      	movhi	r2, #0
 800b3aa:	4413      	add	r3, r2
 800b3ac:	1a18      	subs	r0, r3, r0
 800b3ae:	b003      	add	sp, #12
 800b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b3b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b3ba:	e7ed      	b.n	800b398 <__exponent+0x4c>
 800b3bc:	2330      	movs	r3, #48	; 0x30
 800b3be:	3130      	adds	r1, #48	; 0x30
 800b3c0:	7083      	strb	r3, [r0, #2]
 800b3c2:	70c1      	strb	r1, [r0, #3]
 800b3c4:	1d03      	adds	r3, r0, #4
 800b3c6:	e7f1      	b.n	800b3ac <__exponent+0x60>

0800b3c8 <_printf_float>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	ed2d 8b02 	vpush	{d8}
 800b3d0:	b08d      	sub	sp, #52	; 0x34
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b3d8:	4616      	mov	r6, r2
 800b3da:	461f      	mov	r7, r3
 800b3dc:	4605      	mov	r5, r0
 800b3de:	f000 fd0f 	bl	800be00 <_localeconv_r>
 800b3e2:	f8d0 a000 	ldr.w	sl, [r0]
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	f7f4 ff6a 	bl	80002c0 <strlen>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b3fc:	3307      	adds	r3, #7
 800b3fe:	f023 0307 	bic.w	r3, r3, #7
 800b402:	f103 0208 	add.w	r2, r3, #8
 800b406:	f8c8 2000 	str.w	r2, [r8]
 800b40a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b40e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	f8cd 8018 	str.w	r8, [sp, #24]
 800b418:	ee08 0a10 	vmov	s16, r0
 800b41c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b424:	4b9e      	ldr	r3, [pc, #632]	; (800b6a0 <_printf_float+0x2d8>)
 800b426:	f04f 32ff 	mov.w	r2, #4294967295
 800b42a:	f7f5 fba7 	bl	8000b7c <__aeabi_dcmpun>
 800b42e:	bb88      	cbnz	r0, 800b494 <_printf_float+0xcc>
 800b430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b434:	4b9a      	ldr	r3, [pc, #616]	; (800b6a0 <_printf_float+0x2d8>)
 800b436:	f04f 32ff 	mov.w	r2, #4294967295
 800b43a:	f7f5 fb81 	bl	8000b40 <__aeabi_dcmple>
 800b43e:	bb48      	cbnz	r0, 800b494 <_printf_float+0xcc>
 800b440:	2200      	movs	r2, #0
 800b442:	2300      	movs	r3, #0
 800b444:	4640      	mov	r0, r8
 800b446:	4649      	mov	r1, r9
 800b448:	f7f5 fb70 	bl	8000b2c <__aeabi_dcmplt>
 800b44c:	b110      	cbz	r0, 800b454 <_printf_float+0x8c>
 800b44e:	232d      	movs	r3, #45	; 0x2d
 800b450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b454:	4a93      	ldr	r2, [pc, #588]	; (800b6a4 <_printf_float+0x2dc>)
 800b456:	4b94      	ldr	r3, [pc, #592]	; (800b6a8 <_printf_float+0x2e0>)
 800b458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b45c:	bf94      	ite	ls
 800b45e:	4690      	movls	r8, r2
 800b460:	4698      	movhi	r8, r3
 800b462:	2303      	movs	r3, #3
 800b464:	6123      	str	r3, [r4, #16]
 800b466:	9b05      	ldr	r3, [sp, #20]
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	f04f 0900 	mov.w	r9, #0
 800b472:	9700      	str	r7, [sp, #0]
 800b474:	4633      	mov	r3, r6
 800b476:	aa0b      	add	r2, sp, #44	; 0x2c
 800b478:	4621      	mov	r1, r4
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 f9da 	bl	800b834 <_printf_common>
 800b480:	3001      	adds	r0, #1
 800b482:	f040 8090 	bne.w	800b5a6 <_printf_float+0x1de>
 800b486:	f04f 30ff 	mov.w	r0, #4294967295
 800b48a:	b00d      	add	sp, #52	; 0x34
 800b48c:	ecbd 8b02 	vpop	{d8}
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	4642      	mov	r2, r8
 800b496:	464b      	mov	r3, r9
 800b498:	4640      	mov	r0, r8
 800b49a:	4649      	mov	r1, r9
 800b49c:	f7f5 fb6e 	bl	8000b7c <__aeabi_dcmpun>
 800b4a0:	b140      	cbz	r0, 800b4b4 <_printf_float+0xec>
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bfbc      	itt	lt
 800b4a8:	232d      	movlt	r3, #45	; 0x2d
 800b4aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4ae:	4a7f      	ldr	r2, [pc, #508]	; (800b6ac <_printf_float+0x2e4>)
 800b4b0:	4b7f      	ldr	r3, [pc, #508]	; (800b6b0 <_printf_float+0x2e8>)
 800b4b2:	e7d1      	b.n	800b458 <_printf_float+0x90>
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b4ba:	9206      	str	r2, [sp, #24]
 800b4bc:	1c5a      	adds	r2, r3, #1
 800b4be:	d13f      	bne.n	800b540 <_printf_float+0x178>
 800b4c0:	2306      	movs	r3, #6
 800b4c2:	6063      	str	r3, [r4, #4]
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	6861      	ldr	r1, [r4, #4]
 800b4c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	ab0a      	add	r3, sp, #40	; 0x28
 800b4d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b4d6:	ab09      	add	r3, sp, #36	; 0x24
 800b4d8:	ec49 8b10 	vmov	d0, r8, r9
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	6022      	str	r2, [r4, #0]
 800b4e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f7ff fecf 	bl	800b288 <__cvt>
 800b4ea:	9b06      	ldr	r3, [sp, #24]
 800b4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ee:	2b47      	cmp	r3, #71	; 0x47
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	d108      	bne.n	800b506 <_printf_float+0x13e>
 800b4f4:	1cc8      	adds	r0, r1, #3
 800b4f6:	db02      	blt.n	800b4fe <_printf_float+0x136>
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	4299      	cmp	r1, r3
 800b4fc:	dd41      	ble.n	800b582 <_printf_float+0x1ba>
 800b4fe:	f1ab 0302 	sub.w	r3, fp, #2
 800b502:	fa5f fb83 	uxtb.w	fp, r3
 800b506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b50a:	d820      	bhi.n	800b54e <_printf_float+0x186>
 800b50c:	3901      	subs	r1, #1
 800b50e:	465a      	mov	r2, fp
 800b510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b514:	9109      	str	r1, [sp, #36]	; 0x24
 800b516:	f7ff ff19 	bl	800b34c <__exponent>
 800b51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b51c:	1813      	adds	r3, r2, r0
 800b51e:	2a01      	cmp	r2, #1
 800b520:	4681      	mov	r9, r0
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	dc02      	bgt.n	800b52c <_printf_float+0x164>
 800b526:	6822      	ldr	r2, [r4, #0]
 800b528:	07d2      	lsls	r2, r2, #31
 800b52a:	d501      	bpl.n	800b530 <_printf_float+0x168>
 800b52c:	3301      	adds	r3, #1
 800b52e:	6123      	str	r3, [r4, #16]
 800b530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b534:	2b00      	cmp	r3, #0
 800b536:	d09c      	beq.n	800b472 <_printf_float+0xaa>
 800b538:	232d      	movs	r3, #45	; 0x2d
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53e:	e798      	b.n	800b472 <_printf_float+0xaa>
 800b540:	9a06      	ldr	r2, [sp, #24]
 800b542:	2a47      	cmp	r2, #71	; 0x47
 800b544:	d1be      	bne.n	800b4c4 <_printf_float+0xfc>
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1bc      	bne.n	800b4c4 <_printf_float+0xfc>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7b9      	b.n	800b4c2 <_printf_float+0xfa>
 800b54e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b552:	d118      	bne.n	800b586 <_printf_float+0x1be>
 800b554:	2900      	cmp	r1, #0
 800b556:	6863      	ldr	r3, [r4, #4]
 800b558:	dd0b      	ble.n	800b572 <_printf_float+0x1aa>
 800b55a:	6121      	str	r1, [r4, #16]
 800b55c:	b913      	cbnz	r3, 800b564 <_printf_float+0x19c>
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	07d0      	lsls	r0, r2, #31
 800b562:	d502      	bpl.n	800b56a <_printf_float+0x1a2>
 800b564:	3301      	adds	r3, #1
 800b566:	440b      	add	r3, r1
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b56c:	f04f 0900 	mov.w	r9, #0
 800b570:	e7de      	b.n	800b530 <_printf_float+0x168>
 800b572:	b913      	cbnz	r3, 800b57a <_printf_float+0x1b2>
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	07d2      	lsls	r2, r2, #31
 800b578:	d501      	bpl.n	800b57e <_printf_float+0x1b6>
 800b57a:	3302      	adds	r3, #2
 800b57c:	e7f4      	b.n	800b568 <_printf_float+0x1a0>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7f2      	b.n	800b568 <_printf_float+0x1a0>
 800b582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b588:	4299      	cmp	r1, r3
 800b58a:	db05      	blt.n	800b598 <_printf_float+0x1d0>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	6121      	str	r1, [r4, #16]
 800b590:	07d8      	lsls	r0, r3, #31
 800b592:	d5ea      	bpl.n	800b56a <_printf_float+0x1a2>
 800b594:	1c4b      	adds	r3, r1, #1
 800b596:	e7e7      	b.n	800b568 <_printf_float+0x1a0>
 800b598:	2900      	cmp	r1, #0
 800b59a:	bfd4      	ite	le
 800b59c:	f1c1 0202 	rsble	r2, r1, #2
 800b5a0:	2201      	movgt	r2, #1
 800b5a2:	4413      	add	r3, r2
 800b5a4:	e7e0      	b.n	800b568 <_printf_float+0x1a0>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	055a      	lsls	r2, r3, #21
 800b5aa:	d407      	bmi.n	800b5bc <_printf_float+0x1f4>
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	4642      	mov	r2, r8
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d12c      	bne.n	800b614 <_printf_float+0x24c>
 800b5ba:	e764      	b.n	800b486 <_printf_float+0xbe>
 800b5bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5c0:	f240 80e0 	bls.w	800b784 <_printf_float+0x3bc>
 800b5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	f7f5 faa4 	bl	8000b18 <__aeabi_dcmpeq>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d034      	beq.n	800b63e <_printf_float+0x276>
 800b5d4:	4a37      	ldr	r2, [pc, #220]	; (800b6b4 <_printf_float+0x2ec>)
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f43f af51 	beq.w	800b486 <_printf_float+0xbe>
 800b5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	db02      	blt.n	800b5f2 <_printf_float+0x22a>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	07d8      	lsls	r0, r3, #31
 800b5f0:	d510      	bpl.n	800b614 <_printf_float+0x24c>
 800b5f2:	ee18 3a10 	vmov	r3, s16
 800b5f6:	4652      	mov	r2, sl
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	47b8      	blx	r7
 800b5fe:	3001      	adds	r0, #1
 800b600:	f43f af41 	beq.w	800b486 <_printf_float+0xbe>
 800b604:	f04f 0800 	mov.w	r8, #0
 800b608:	f104 091a 	add.w	r9, r4, #26
 800b60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60e:	3b01      	subs	r3, #1
 800b610:	4543      	cmp	r3, r8
 800b612:	dc09      	bgt.n	800b628 <_printf_float+0x260>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	f100 8107 	bmi.w	800b82a <_printf_float+0x462>
 800b61c:	68e0      	ldr	r0, [r4, #12]
 800b61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b620:	4298      	cmp	r0, r3
 800b622:	bfb8      	it	lt
 800b624:	4618      	movlt	r0, r3
 800b626:	e730      	b.n	800b48a <_printf_float+0xc2>
 800b628:	2301      	movs	r3, #1
 800b62a:	464a      	mov	r2, r9
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f af27 	beq.w	800b486 <_printf_float+0xbe>
 800b638:	f108 0801 	add.w	r8, r8, #1
 800b63c:	e7e6      	b.n	800b60c <_printf_float+0x244>
 800b63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b640:	2b00      	cmp	r3, #0
 800b642:	dc39      	bgt.n	800b6b8 <_printf_float+0x2f0>
 800b644:	4a1b      	ldr	r2, [pc, #108]	; (800b6b4 <_printf_float+0x2ec>)
 800b646:	2301      	movs	r3, #1
 800b648:	4631      	mov	r1, r6
 800b64a:	4628      	mov	r0, r5
 800b64c:	47b8      	blx	r7
 800b64e:	3001      	adds	r0, #1
 800b650:	f43f af19 	beq.w	800b486 <_printf_float+0xbe>
 800b654:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b658:	4313      	orrs	r3, r2
 800b65a:	d102      	bne.n	800b662 <_printf_float+0x29a>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d5d8      	bpl.n	800b614 <_printf_float+0x24c>
 800b662:	ee18 3a10 	vmov	r3, s16
 800b666:	4652      	mov	r2, sl
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	f43f af09 	beq.w	800b486 <_printf_float+0xbe>
 800b674:	f04f 0900 	mov.w	r9, #0
 800b678:	f104 0a1a 	add.w	sl, r4, #26
 800b67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67e:	425b      	negs	r3, r3
 800b680:	454b      	cmp	r3, r9
 800b682:	dc01      	bgt.n	800b688 <_printf_float+0x2c0>
 800b684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b686:	e792      	b.n	800b5ae <_printf_float+0x1e6>
 800b688:	2301      	movs	r3, #1
 800b68a:	4652      	mov	r2, sl
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f aef7 	beq.w	800b486 <_printf_float+0xbe>
 800b698:	f109 0901 	add.w	r9, r9, #1
 800b69c:	e7ee      	b.n	800b67c <_printf_float+0x2b4>
 800b69e:	bf00      	nop
 800b6a0:	7fefffff 	.word	0x7fefffff
 800b6a4:	0800f17c 	.word	0x0800f17c
 800b6a8:	0800f180 	.word	0x0800f180
 800b6ac:	0800f184 	.word	0x0800f184
 800b6b0:	0800f188 	.word	0x0800f188
 800b6b4:	0800f18c 	.word	0x0800f18c
 800b6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bfa8      	it	ge
 800b6c0:	461a      	movge	r2, r3
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	4691      	mov	r9, r2
 800b6c6:	dc37      	bgt.n	800b738 <_printf_float+0x370>
 800b6c8:	f04f 0b00 	mov.w	fp, #0
 800b6cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6d0:	f104 021a 	add.w	r2, r4, #26
 800b6d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6d6:	9305      	str	r3, [sp, #20]
 800b6d8:	eba3 0309 	sub.w	r3, r3, r9
 800b6dc:	455b      	cmp	r3, fp
 800b6de:	dc33      	bgt.n	800b748 <_printf_float+0x380>
 800b6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	db3b      	blt.n	800b760 <_printf_float+0x398>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	07da      	lsls	r2, r3, #31
 800b6ec:	d438      	bmi.n	800b760 <_printf_float+0x398>
 800b6ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b6f2:	eba2 0903 	sub.w	r9, r2, r3
 800b6f6:	9b05      	ldr	r3, [sp, #20]
 800b6f8:	1ad2      	subs	r2, r2, r3
 800b6fa:	4591      	cmp	r9, r2
 800b6fc:	bfa8      	it	ge
 800b6fe:	4691      	movge	r9, r2
 800b700:	f1b9 0f00 	cmp.w	r9, #0
 800b704:	dc35      	bgt.n	800b772 <_printf_float+0x3aa>
 800b706:	f04f 0800 	mov.w	r8, #0
 800b70a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b70e:	f104 0a1a 	add.w	sl, r4, #26
 800b712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	eba3 0309 	sub.w	r3, r3, r9
 800b71c:	4543      	cmp	r3, r8
 800b71e:	f77f af79 	ble.w	800b614 <_printf_float+0x24c>
 800b722:	2301      	movs	r3, #1
 800b724:	4652      	mov	r2, sl
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	f43f aeaa 	beq.w	800b486 <_printf_float+0xbe>
 800b732:	f108 0801 	add.w	r8, r8, #1
 800b736:	e7ec      	b.n	800b712 <_printf_float+0x34a>
 800b738:	4613      	mov	r3, r2
 800b73a:	4631      	mov	r1, r6
 800b73c:	4642      	mov	r2, r8
 800b73e:	4628      	mov	r0, r5
 800b740:	47b8      	blx	r7
 800b742:	3001      	adds	r0, #1
 800b744:	d1c0      	bne.n	800b6c8 <_printf_float+0x300>
 800b746:	e69e      	b.n	800b486 <_printf_float+0xbe>
 800b748:	2301      	movs	r3, #1
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	9205      	str	r2, [sp, #20]
 800b750:	47b8      	blx	r7
 800b752:	3001      	adds	r0, #1
 800b754:	f43f ae97 	beq.w	800b486 <_printf_float+0xbe>
 800b758:	9a05      	ldr	r2, [sp, #20]
 800b75a:	f10b 0b01 	add.w	fp, fp, #1
 800b75e:	e7b9      	b.n	800b6d4 <_printf_float+0x30c>
 800b760:	ee18 3a10 	vmov	r3, s16
 800b764:	4652      	mov	r2, sl
 800b766:	4631      	mov	r1, r6
 800b768:	4628      	mov	r0, r5
 800b76a:	47b8      	blx	r7
 800b76c:	3001      	adds	r0, #1
 800b76e:	d1be      	bne.n	800b6ee <_printf_float+0x326>
 800b770:	e689      	b.n	800b486 <_printf_float+0xbe>
 800b772:	9a05      	ldr	r2, [sp, #20]
 800b774:	464b      	mov	r3, r9
 800b776:	4442      	add	r2, r8
 800b778:	4631      	mov	r1, r6
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b8      	blx	r7
 800b77e:	3001      	adds	r0, #1
 800b780:	d1c1      	bne.n	800b706 <_printf_float+0x33e>
 800b782:	e680      	b.n	800b486 <_printf_float+0xbe>
 800b784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b786:	2a01      	cmp	r2, #1
 800b788:	dc01      	bgt.n	800b78e <_printf_float+0x3c6>
 800b78a:	07db      	lsls	r3, r3, #31
 800b78c:	d53a      	bpl.n	800b804 <_printf_float+0x43c>
 800b78e:	2301      	movs	r3, #1
 800b790:	4642      	mov	r2, r8
 800b792:	4631      	mov	r1, r6
 800b794:	4628      	mov	r0, r5
 800b796:	47b8      	blx	r7
 800b798:	3001      	adds	r0, #1
 800b79a:	f43f ae74 	beq.w	800b486 <_printf_float+0xbe>
 800b79e:	ee18 3a10 	vmov	r3, s16
 800b7a2:	4652      	mov	r2, sl
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	f43f ae6b 	beq.w	800b486 <_printf_float+0xbe>
 800b7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b7bc:	f7f5 f9ac 	bl	8000b18 <__aeabi_dcmpeq>
 800b7c0:	b9d8      	cbnz	r0, 800b7fa <_printf_float+0x432>
 800b7c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b7c6:	f108 0201 	add.w	r2, r8, #1
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b8      	blx	r7
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d10e      	bne.n	800b7f2 <_printf_float+0x42a>
 800b7d4:	e657      	b.n	800b486 <_printf_float+0xbe>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4652      	mov	r2, sl
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4628      	mov	r0, r5
 800b7de:	47b8      	blx	r7
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f43f ae50 	beq.w	800b486 <_printf_float+0xbe>
 800b7e6:	f108 0801 	add.w	r8, r8, #1
 800b7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	4543      	cmp	r3, r8
 800b7f0:	dcf1      	bgt.n	800b7d6 <_printf_float+0x40e>
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7f8:	e6da      	b.n	800b5b0 <_printf_float+0x1e8>
 800b7fa:	f04f 0800 	mov.w	r8, #0
 800b7fe:	f104 0a1a 	add.w	sl, r4, #26
 800b802:	e7f2      	b.n	800b7ea <_printf_float+0x422>
 800b804:	2301      	movs	r3, #1
 800b806:	4642      	mov	r2, r8
 800b808:	e7df      	b.n	800b7ca <_printf_float+0x402>
 800b80a:	2301      	movs	r3, #1
 800b80c:	464a      	mov	r2, r9
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	f43f ae36 	beq.w	800b486 <_printf_float+0xbe>
 800b81a:	f108 0801 	add.w	r8, r8, #1
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b822:	1a5b      	subs	r3, r3, r1
 800b824:	4543      	cmp	r3, r8
 800b826:	dcf0      	bgt.n	800b80a <_printf_float+0x442>
 800b828:	e6f8      	b.n	800b61c <_printf_float+0x254>
 800b82a:	f04f 0800 	mov.w	r8, #0
 800b82e:	f104 0919 	add.w	r9, r4, #25
 800b832:	e7f4      	b.n	800b81e <_printf_float+0x456>

0800b834 <_printf_common>:
 800b834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b838:	4616      	mov	r6, r2
 800b83a:	4699      	mov	r9, r3
 800b83c:	688a      	ldr	r2, [r1, #8]
 800b83e:	690b      	ldr	r3, [r1, #16]
 800b840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b844:	4293      	cmp	r3, r2
 800b846:	bfb8      	it	lt
 800b848:	4613      	movlt	r3, r2
 800b84a:	6033      	str	r3, [r6, #0]
 800b84c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b850:	4607      	mov	r7, r0
 800b852:	460c      	mov	r4, r1
 800b854:	b10a      	cbz	r2, 800b85a <_printf_common+0x26>
 800b856:	3301      	adds	r3, #1
 800b858:	6033      	str	r3, [r6, #0]
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	0699      	lsls	r1, r3, #26
 800b85e:	bf42      	ittt	mi
 800b860:	6833      	ldrmi	r3, [r6, #0]
 800b862:	3302      	addmi	r3, #2
 800b864:	6033      	strmi	r3, [r6, #0]
 800b866:	6825      	ldr	r5, [r4, #0]
 800b868:	f015 0506 	ands.w	r5, r5, #6
 800b86c:	d106      	bne.n	800b87c <_printf_common+0x48>
 800b86e:	f104 0a19 	add.w	sl, r4, #25
 800b872:	68e3      	ldr	r3, [r4, #12]
 800b874:	6832      	ldr	r2, [r6, #0]
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	42ab      	cmp	r3, r5
 800b87a:	dc26      	bgt.n	800b8ca <_printf_common+0x96>
 800b87c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b880:	1e13      	subs	r3, r2, #0
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	bf18      	it	ne
 800b886:	2301      	movne	r3, #1
 800b888:	0692      	lsls	r2, r2, #26
 800b88a:	d42b      	bmi.n	800b8e4 <_printf_common+0xb0>
 800b88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b890:	4649      	mov	r1, r9
 800b892:	4638      	mov	r0, r7
 800b894:	47c0      	blx	r8
 800b896:	3001      	adds	r0, #1
 800b898:	d01e      	beq.n	800b8d8 <_printf_common+0xa4>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	6922      	ldr	r2, [r4, #16]
 800b89e:	f003 0306 	and.w	r3, r3, #6
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	bf02      	ittt	eq
 800b8a6:	68e5      	ldreq	r5, [r4, #12]
 800b8a8:	6833      	ldreq	r3, [r6, #0]
 800b8aa:	1aed      	subeq	r5, r5, r3
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	bf0c      	ite	eq
 800b8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8b4:	2500      	movne	r5, #0
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	bfc4      	itt	gt
 800b8ba:	1a9b      	subgt	r3, r3, r2
 800b8bc:	18ed      	addgt	r5, r5, r3
 800b8be:	2600      	movs	r6, #0
 800b8c0:	341a      	adds	r4, #26
 800b8c2:	42b5      	cmp	r5, r6
 800b8c4:	d11a      	bne.n	800b8fc <_printf_common+0xc8>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	e008      	b.n	800b8dc <_printf_common+0xa8>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4652      	mov	r2, sl
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	47c0      	blx	r8
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d103      	bne.n	800b8e0 <_printf_common+0xac>
 800b8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e0:	3501      	adds	r5, #1
 800b8e2:	e7c6      	b.n	800b872 <_printf_common+0x3e>
 800b8e4:	18e1      	adds	r1, r4, r3
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	2030      	movs	r0, #48	; 0x30
 800b8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8ee:	4422      	add	r2, r4
 800b8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8f8:	3302      	adds	r3, #2
 800b8fa:	e7c7      	b.n	800b88c <_printf_common+0x58>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4622      	mov	r2, r4
 800b900:	4649      	mov	r1, r9
 800b902:	4638      	mov	r0, r7
 800b904:	47c0      	blx	r8
 800b906:	3001      	adds	r0, #1
 800b908:	d0e6      	beq.n	800b8d8 <_printf_common+0xa4>
 800b90a:	3601      	adds	r6, #1
 800b90c:	e7d9      	b.n	800b8c2 <_printf_common+0x8e>
	...

0800b910 <_printf_i>:
 800b910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	7e0f      	ldrb	r7, [r1, #24]
 800b916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b918:	2f78      	cmp	r7, #120	; 0x78
 800b91a:	4691      	mov	r9, r2
 800b91c:	4680      	mov	r8, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	469a      	mov	sl, r3
 800b922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b926:	d807      	bhi.n	800b938 <_printf_i+0x28>
 800b928:	2f62      	cmp	r7, #98	; 0x62
 800b92a:	d80a      	bhi.n	800b942 <_printf_i+0x32>
 800b92c:	2f00      	cmp	r7, #0
 800b92e:	f000 80d4 	beq.w	800bada <_printf_i+0x1ca>
 800b932:	2f58      	cmp	r7, #88	; 0x58
 800b934:	f000 80c0 	beq.w	800bab8 <_printf_i+0x1a8>
 800b938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b940:	e03a      	b.n	800b9b8 <_printf_i+0xa8>
 800b942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b946:	2b15      	cmp	r3, #21
 800b948:	d8f6      	bhi.n	800b938 <_printf_i+0x28>
 800b94a:	a101      	add	r1, pc, #4	; (adr r1, 800b950 <_printf_i+0x40>)
 800b94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b950:	0800b9a9 	.word	0x0800b9a9
 800b954:	0800b9bd 	.word	0x0800b9bd
 800b958:	0800b939 	.word	0x0800b939
 800b95c:	0800b939 	.word	0x0800b939
 800b960:	0800b939 	.word	0x0800b939
 800b964:	0800b939 	.word	0x0800b939
 800b968:	0800b9bd 	.word	0x0800b9bd
 800b96c:	0800b939 	.word	0x0800b939
 800b970:	0800b939 	.word	0x0800b939
 800b974:	0800b939 	.word	0x0800b939
 800b978:	0800b939 	.word	0x0800b939
 800b97c:	0800bac1 	.word	0x0800bac1
 800b980:	0800b9e9 	.word	0x0800b9e9
 800b984:	0800ba7b 	.word	0x0800ba7b
 800b988:	0800b939 	.word	0x0800b939
 800b98c:	0800b939 	.word	0x0800b939
 800b990:	0800bae3 	.word	0x0800bae3
 800b994:	0800b939 	.word	0x0800b939
 800b998:	0800b9e9 	.word	0x0800b9e9
 800b99c:	0800b939 	.word	0x0800b939
 800b9a0:	0800b939 	.word	0x0800b939
 800b9a4:	0800ba83 	.word	0x0800ba83
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	1d1a      	adds	r2, r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	602a      	str	r2, [r5, #0]
 800b9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e09f      	b.n	800bafc <_printf_i+0x1ec>
 800b9bc:	6820      	ldr	r0, [r4, #0]
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	0607      	lsls	r7, r0, #24
 800b9c2:	f103 0104 	add.w	r1, r3, #4
 800b9c6:	6029      	str	r1, [r5, #0]
 800b9c8:	d501      	bpl.n	800b9ce <_printf_i+0xbe>
 800b9ca:	681e      	ldr	r6, [r3, #0]
 800b9cc:	e003      	b.n	800b9d6 <_printf_i+0xc6>
 800b9ce:	0646      	lsls	r6, r0, #25
 800b9d0:	d5fb      	bpl.n	800b9ca <_printf_i+0xba>
 800b9d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b9d6:	2e00      	cmp	r6, #0
 800b9d8:	da03      	bge.n	800b9e2 <_printf_i+0xd2>
 800b9da:	232d      	movs	r3, #45	; 0x2d
 800b9dc:	4276      	negs	r6, r6
 800b9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e2:	485a      	ldr	r0, [pc, #360]	; (800bb4c <_printf_i+0x23c>)
 800b9e4:	230a      	movs	r3, #10
 800b9e6:	e012      	b.n	800ba0e <_printf_i+0xfe>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	6820      	ldr	r0, [r4, #0]
 800b9ec:	1d19      	adds	r1, r3, #4
 800b9ee:	6029      	str	r1, [r5, #0]
 800b9f0:	0605      	lsls	r5, r0, #24
 800b9f2:	d501      	bpl.n	800b9f8 <_printf_i+0xe8>
 800b9f4:	681e      	ldr	r6, [r3, #0]
 800b9f6:	e002      	b.n	800b9fe <_printf_i+0xee>
 800b9f8:	0641      	lsls	r1, r0, #25
 800b9fa:	d5fb      	bpl.n	800b9f4 <_printf_i+0xe4>
 800b9fc:	881e      	ldrh	r6, [r3, #0]
 800b9fe:	4853      	ldr	r0, [pc, #332]	; (800bb4c <_printf_i+0x23c>)
 800ba00:	2f6f      	cmp	r7, #111	; 0x6f
 800ba02:	bf0c      	ite	eq
 800ba04:	2308      	moveq	r3, #8
 800ba06:	230a      	movne	r3, #10
 800ba08:	2100      	movs	r1, #0
 800ba0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba0e:	6865      	ldr	r5, [r4, #4]
 800ba10:	60a5      	str	r5, [r4, #8]
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	bfa2      	ittt	ge
 800ba16:	6821      	ldrge	r1, [r4, #0]
 800ba18:	f021 0104 	bicge.w	r1, r1, #4
 800ba1c:	6021      	strge	r1, [r4, #0]
 800ba1e:	b90e      	cbnz	r6, 800ba24 <_printf_i+0x114>
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	d04b      	beq.n	800babc <_printf_i+0x1ac>
 800ba24:	4615      	mov	r5, r2
 800ba26:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba2a:	fb03 6711 	mls	r7, r3, r1, r6
 800ba2e:	5dc7      	ldrb	r7, [r0, r7]
 800ba30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba34:	4637      	mov	r7, r6
 800ba36:	42bb      	cmp	r3, r7
 800ba38:	460e      	mov	r6, r1
 800ba3a:	d9f4      	bls.n	800ba26 <_printf_i+0x116>
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d10b      	bne.n	800ba58 <_printf_i+0x148>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	07de      	lsls	r6, r3, #31
 800ba44:	d508      	bpl.n	800ba58 <_printf_i+0x148>
 800ba46:	6923      	ldr	r3, [r4, #16]
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	bfde      	ittt	le
 800ba4e:	2330      	movle	r3, #48	; 0x30
 800ba50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba58:	1b52      	subs	r2, r2, r5
 800ba5a:	6122      	str	r2, [r4, #16]
 800ba5c:	f8cd a000 	str.w	sl, [sp]
 800ba60:	464b      	mov	r3, r9
 800ba62:	aa03      	add	r2, sp, #12
 800ba64:	4621      	mov	r1, r4
 800ba66:	4640      	mov	r0, r8
 800ba68:	f7ff fee4 	bl	800b834 <_printf_common>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d14a      	bne.n	800bb06 <_printf_i+0x1f6>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	b004      	add	sp, #16
 800ba76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	f043 0320 	orr.w	r3, r3, #32
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	4833      	ldr	r0, [pc, #204]	; (800bb50 <_printf_i+0x240>)
 800ba84:	2778      	movs	r7, #120	; 0x78
 800ba86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	6829      	ldr	r1, [r5, #0]
 800ba8e:	061f      	lsls	r7, r3, #24
 800ba90:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba94:	d402      	bmi.n	800ba9c <_printf_i+0x18c>
 800ba96:	065f      	lsls	r7, r3, #25
 800ba98:	bf48      	it	mi
 800ba9a:	b2b6      	uxthmi	r6, r6
 800ba9c:	07df      	lsls	r7, r3, #31
 800ba9e:	bf48      	it	mi
 800baa0:	f043 0320 	orrmi.w	r3, r3, #32
 800baa4:	6029      	str	r1, [r5, #0]
 800baa6:	bf48      	it	mi
 800baa8:	6023      	strmi	r3, [r4, #0]
 800baaa:	b91e      	cbnz	r6, 800bab4 <_printf_i+0x1a4>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	f023 0320 	bic.w	r3, r3, #32
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	2310      	movs	r3, #16
 800bab6:	e7a7      	b.n	800ba08 <_printf_i+0xf8>
 800bab8:	4824      	ldr	r0, [pc, #144]	; (800bb4c <_printf_i+0x23c>)
 800baba:	e7e4      	b.n	800ba86 <_printf_i+0x176>
 800babc:	4615      	mov	r5, r2
 800babe:	e7bd      	b.n	800ba3c <_printf_i+0x12c>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	6826      	ldr	r6, [r4, #0]
 800bac4:	6961      	ldr	r1, [r4, #20]
 800bac6:	1d18      	adds	r0, r3, #4
 800bac8:	6028      	str	r0, [r5, #0]
 800baca:	0635      	lsls	r5, r6, #24
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	d501      	bpl.n	800bad4 <_printf_i+0x1c4>
 800bad0:	6019      	str	r1, [r3, #0]
 800bad2:	e002      	b.n	800bada <_printf_i+0x1ca>
 800bad4:	0670      	lsls	r0, r6, #25
 800bad6:	d5fb      	bpl.n	800bad0 <_printf_i+0x1c0>
 800bad8:	8019      	strh	r1, [r3, #0]
 800bada:	2300      	movs	r3, #0
 800badc:	6123      	str	r3, [r4, #16]
 800bade:	4615      	mov	r5, r2
 800bae0:	e7bc      	b.n	800ba5c <_printf_i+0x14c>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	1d1a      	adds	r2, r3, #4
 800bae6:	602a      	str	r2, [r5, #0]
 800bae8:	681d      	ldr	r5, [r3, #0]
 800baea:	6862      	ldr	r2, [r4, #4]
 800baec:	2100      	movs	r1, #0
 800baee:	4628      	mov	r0, r5
 800baf0:	f7f4 fb96 	bl	8000220 <memchr>
 800baf4:	b108      	cbz	r0, 800bafa <_printf_i+0x1ea>
 800baf6:	1b40      	subs	r0, r0, r5
 800baf8:	6060      	str	r0, [r4, #4]
 800bafa:	6863      	ldr	r3, [r4, #4]
 800bafc:	6123      	str	r3, [r4, #16]
 800bafe:	2300      	movs	r3, #0
 800bb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb04:	e7aa      	b.n	800ba5c <_printf_i+0x14c>
 800bb06:	6923      	ldr	r3, [r4, #16]
 800bb08:	462a      	mov	r2, r5
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	4640      	mov	r0, r8
 800bb0e:	47d0      	blx	sl
 800bb10:	3001      	adds	r0, #1
 800bb12:	d0ad      	beq.n	800ba70 <_printf_i+0x160>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	079b      	lsls	r3, r3, #30
 800bb18:	d413      	bmi.n	800bb42 <_printf_i+0x232>
 800bb1a:	68e0      	ldr	r0, [r4, #12]
 800bb1c:	9b03      	ldr	r3, [sp, #12]
 800bb1e:	4298      	cmp	r0, r3
 800bb20:	bfb8      	it	lt
 800bb22:	4618      	movlt	r0, r3
 800bb24:	e7a6      	b.n	800ba74 <_printf_i+0x164>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4632      	mov	r2, r6
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	47d0      	blx	sl
 800bb30:	3001      	adds	r0, #1
 800bb32:	d09d      	beq.n	800ba70 <_printf_i+0x160>
 800bb34:	3501      	adds	r5, #1
 800bb36:	68e3      	ldr	r3, [r4, #12]
 800bb38:	9903      	ldr	r1, [sp, #12]
 800bb3a:	1a5b      	subs	r3, r3, r1
 800bb3c:	42ab      	cmp	r3, r5
 800bb3e:	dcf2      	bgt.n	800bb26 <_printf_i+0x216>
 800bb40:	e7eb      	b.n	800bb1a <_printf_i+0x20a>
 800bb42:	2500      	movs	r5, #0
 800bb44:	f104 0619 	add.w	r6, r4, #25
 800bb48:	e7f5      	b.n	800bb36 <_printf_i+0x226>
 800bb4a:	bf00      	nop
 800bb4c:	0800f18e 	.word	0x0800f18e
 800bb50:	0800f19f 	.word	0x0800f19f

0800bb54 <std>:
 800bb54:	2300      	movs	r3, #0
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
 800bb5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb62:	6083      	str	r3, [r0, #8]
 800bb64:	8181      	strh	r1, [r0, #12]
 800bb66:	6643      	str	r3, [r0, #100]	; 0x64
 800bb68:	81c2      	strh	r2, [r0, #14]
 800bb6a:	6183      	str	r3, [r0, #24]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	2208      	movs	r2, #8
 800bb70:	305c      	adds	r0, #92	; 0x5c
 800bb72:	f000 f93d 	bl	800bdf0 <memset>
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <std+0x58>)
 800bb78:	6263      	str	r3, [r4, #36]	; 0x24
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <std+0x5c>)
 800bb7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <std+0x60>)
 800bb80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb82:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <std+0x64>)
 800bb84:	6323      	str	r3, [r4, #48]	; 0x30
 800bb86:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <std+0x68>)
 800bb88:	6224      	str	r4, [r4, #32]
 800bb8a:	429c      	cmp	r4, r3
 800bb8c:	d006      	beq.n	800bb9c <std+0x48>
 800bb8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bb92:	4294      	cmp	r4, r2
 800bb94:	d002      	beq.n	800bb9c <std+0x48>
 800bb96:	33d0      	adds	r3, #208	; 0xd0
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d105      	bne.n	800bba8 <std+0x54>
 800bb9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba4:	f000 b9a0 	b.w	800bee8 <__retarget_lock_init_recursive>
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800bcd9 	.word	0x0800bcd9
 800bbb0:	0800bcfb 	.word	0x0800bcfb
 800bbb4:	0800bd33 	.word	0x0800bd33
 800bbb8:	0800bd57 	.word	0x0800bd57
 800bbbc:	20001ca4 	.word	0x20001ca4

0800bbc0 <stdio_exit_handler>:
 800bbc0:	4a02      	ldr	r2, [pc, #8]	; (800bbcc <stdio_exit_handler+0xc>)
 800bbc2:	4903      	ldr	r1, [pc, #12]	; (800bbd0 <stdio_exit_handler+0x10>)
 800bbc4:	4803      	ldr	r0, [pc, #12]	; (800bbd4 <stdio_exit_handler+0x14>)
 800bbc6:	f000 b869 	b.w	800bc9c <_fwalk_sglue>
 800bbca:	bf00      	nop
 800bbcc:	200005a4 	.word	0x200005a4
 800bbd0:	0800d8b9 	.word	0x0800d8b9
 800bbd4:	200005b0 	.word	0x200005b0

0800bbd8 <cleanup_stdio>:
 800bbd8:	6841      	ldr	r1, [r0, #4]
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <cleanup_stdio+0x34>)
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	d001      	beq.n	800bbe8 <cleanup_stdio+0x10>
 800bbe4:	f001 fe68 	bl	800d8b8 <_fflush_r>
 800bbe8:	68a1      	ldr	r1, [r4, #8]
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <cleanup_stdio+0x38>)
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d002      	beq.n	800bbf6 <cleanup_stdio+0x1e>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f001 fe61 	bl	800d8b8 <_fflush_r>
 800bbf6:	68e1      	ldr	r1, [r4, #12]
 800bbf8:	4b06      	ldr	r3, [pc, #24]	; (800bc14 <cleanup_stdio+0x3c>)
 800bbfa:	4299      	cmp	r1, r3
 800bbfc:	d004      	beq.n	800bc08 <cleanup_stdio+0x30>
 800bbfe:	4620      	mov	r0, r4
 800bc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc04:	f001 be58 	b.w	800d8b8 <_fflush_r>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20001ca4 	.word	0x20001ca4
 800bc10:	20001d0c 	.word	0x20001d0c
 800bc14:	20001d74 	.word	0x20001d74

0800bc18 <global_stdio_init.part.0>:
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <global_stdio_init.part.0+0x30>)
 800bc1c:	4c0b      	ldr	r4, [pc, #44]	; (800bc4c <global_stdio_init.part.0+0x34>)
 800bc1e:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <global_stdio_init.part.0+0x38>)
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	4620      	mov	r0, r4
 800bc24:	2200      	movs	r2, #0
 800bc26:	2104      	movs	r1, #4
 800bc28:	f7ff ff94 	bl	800bb54 <std>
 800bc2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc30:	2201      	movs	r2, #1
 800bc32:	2109      	movs	r1, #9
 800bc34:	f7ff ff8e 	bl	800bb54 <std>
 800bc38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc42:	2112      	movs	r1, #18
 800bc44:	f7ff bf86 	b.w	800bb54 <std>
 800bc48:	20001ddc 	.word	0x20001ddc
 800bc4c:	20001ca4 	.word	0x20001ca4
 800bc50:	0800bbc1 	.word	0x0800bbc1

0800bc54 <__sfp_lock_acquire>:
 800bc54:	4801      	ldr	r0, [pc, #4]	; (800bc5c <__sfp_lock_acquire+0x8>)
 800bc56:	f000 b948 	b.w	800beea <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	20001de5 	.word	0x20001de5

0800bc60 <__sfp_lock_release>:
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <__sfp_lock_release+0x8>)
 800bc62:	f000 b943 	b.w	800beec <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	20001de5 	.word	0x20001de5

0800bc6c <__sinit>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	4604      	mov	r4, r0
 800bc70:	f7ff fff0 	bl	800bc54 <__sfp_lock_acquire>
 800bc74:	6a23      	ldr	r3, [r4, #32]
 800bc76:	b11b      	cbz	r3, 800bc80 <__sinit+0x14>
 800bc78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc7c:	f7ff bff0 	b.w	800bc60 <__sfp_lock_release>
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <__sinit+0x28>)
 800bc82:	6223      	str	r3, [r4, #32]
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <__sinit+0x2c>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1f5      	bne.n	800bc78 <__sinit+0xc>
 800bc8c:	f7ff ffc4 	bl	800bc18 <global_stdio_init.part.0>
 800bc90:	e7f2      	b.n	800bc78 <__sinit+0xc>
 800bc92:	bf00      	nop
 800bc94:	0800bbd9 	.word	0x0800bbd9
 800bc98:	20001ddc 	.word	0x20001ddc

0800bc9c <_fwalk_sglue>:
 800bc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca0:	4607      	mov	r7, r0
 800bca2:	4688      	mov	r8, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	2600      	movs	r6, #0
 800bca8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcac:	f1b9 0901 	subs.w	r9, r9, #1
 800bcb0:	d505      	bpl.n	800bcbe <_fwalk_sglue+0x22>
 800bcb2:	6824      	ldr	r4, [r4, #0]
 800bcb4:	2c00      	cmp	r4, #0
 800bcb6:	d1f7      	bne.n	800bca8 <_fwalk_sglue+0xc>
 800bcb8:	4630      	mov	r0, r6
 800bcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d907      	bls.n	800bcd4 <_fwalk_sglue+0x38>
 800bcc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	d003      	beq.n	800bcd4 <_fwalk_sglue+0x38>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4638      	mov	r0, r7
 800bcd0:	47c0      	blx	r8
 800bcd2:	4306      	orrs	r6, r0
 800bcd4:	3568      	adds	r5, #104	; 0x68
 800bcd6:	e7e9      	b.n	800bcac <_fwalk_sglue+0x10>

0800bcd8 <__sread>:
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	460c      	mov	r4, r1
 800bcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce0:	f000 f8b4 	bl	800be4c <_read_r>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	bfab      	itete	ge
 800bce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcea:	89a3      	ldrhlt	r3, [r4, #12]
 800bcec:	181b      	addge	r3, r3, r0
 800bcee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcf2:	bfac      	ite	ge
 800bcf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcf6:	81a3      	strhlt	r3, [r4, #12]
 800bcf8:	bd10      	pop	{r4, pc}

0800bcfa <__swrite>:
 800bcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	461f      	mov	r7, r3
 800bd00:	898b      	ldrh	r3, [r1, #12]
 800bd02:	05db      	lsls	r3, r3, #23
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	4616      	mov	r6, r2
 800bd0a:	d505      	bpl.n	800bd18 <__swrite+0x1e>
 800bd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd10:	2302      	movs	r3, #2
 800bd12:	2200      	movs	r2, #0
 800bd14:	f000 f888 	bl	800be28 <_lseek_r>
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	4628      	mov	r0, r5
 800bd2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2e:	f000 b89f 	b.w	800be70 <_write_r>

0800bd32 <__sseek>:
 800bd32:	b510      	push	{r4, lr}
 800bd34:	460c      	mov	r4, r1
 800bd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3a:	f000 f875 	bl	800be28 <_lseek_r>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	bf15      	itete	ne
 800bd44:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd4e:	81a3      	strheq	r3, [r4, #12]
 800bd50:	bf18      	it	ne
 800bd52:	81a3      	strhne	r3, [r4, #12]
 800bd54:	bd10      	pop	{r4, pc}

0800bd56 <__sclose>:
 800bd56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5a:	f000 b855 	b.w	800be08 <_close_r>

0800bd5e <_vsniprintf_r>:
 800bd5e:	b530      	push	{r4, r5, lr}
 800bd60:	4614      	mov	r4, r2
 800bd62:	2c00      	cmp	r4, #0
 800bd64:	b09b      	sub	sp, #108	; 0x6c
 800bd66:	4605      	mov	r5, r0
 800bd68:	461a      	mov	r2, r3
 800bd6a:	da05      	bge.n	800bd78 <_vsniprintf_r+0x1a>
 800bd6c:	238b      	movs	r3, #139	; 0x8b
 800bd6e:	6003      	str	r3, [r0, #0]
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	b01b      	add	sp, #108	; 0x6c
 800bd76:	bd30      	pop	{r4, r5, pc}
 800bd78:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bd80:	bf14      	ite	ne
 800bd82:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd86:	4623      	moveq	r3, r4
 800bd88:	9302      	str	r3, [sp, #8]
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd90:	9100      	str	r1, [sp, #0]
 800bd92:	9104      	str	r1, [sp, #16]
 800bd94:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bd98:	4669      	mov	r1, sp
 800bd9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bd9c:	f001 fc08 	bl	800d5b0 <_svfiprintf_r>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	bfbc      	itt	lt
 800bda4:	238b      	movlt	r3, #139	; 0x8b
 800bda6:	602b      	strlt	r3, [r5, #0]
 800bda8:	2c00      	cmp	r4, #0
 800bdaa:	d0e3      	beq.n	800bd74 <_vsniprintf_r+0x16>
 800bdac:	9b00      	ldr	r3, [sp, #0]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	e7df      	b.n	800bd74 <_vsniprintf_r+0x16>

0800bdb4 <vsniprintf>:
 800bdb4:	b507      	push	{r0, r1, r2, lr}
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	460a      	mov	r2, r1
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	4803      	ldr	r0, [pc, #12]	; (800bdcc <vsniprintf+0x18>)
 800bdc0:	6800      	ldr	r0, [r0, #0]
 800bdc2:	f7ff ffcc 	bl	800bd5e <_vsniprintf_r>
 800bdc6:	b003      	add	sp, #12
 800bdc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdcc:	200005fc 	.word	0x200005fc

0800bdd0 <memcmp>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	3901      	subs	r1, #1
 800bdd4:	4402      	add	r2, r0
 800bdd6:	4290      	cmp	r0, r2
 800bdd8:	d101      	bne.n	800bdde <memcmp+0xe>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e005      	b.n	800bdea <memcmp+0x1a>
 800bdde:	7803      	ldrb	r3, [r0, #0]
 800bde0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	d001      	beq.n	800bdec <memcmp+0x1c>
 800bde8:	1b18      	subs	r0, r3, r4
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	3001      	adds	r0, #1
 800bdee:	e7f2      	b.n	800bdd6 <memcmp+0x6>

0800bdf0 <memset>:
 800bdf0:	4402      	add	r2, r0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d100      	bne.n	800bdfa <memset+0xa>
 800bdf8:	4770      	bx	lr
 800bdfa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfe:	e7f9      	b.n	800bdf4 <memset+0x4>

0800be00 <_localeconv_r>:
 800be00:	4800      	ldr	r0, [pc, #0]	; (800be04 <_localeconv_r+0x4>)
 800be02:	4770      	bx	lr
 800be04:	200006f0 	.word	0x200006f0

0800be08 <_close_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4d06      	ldr	r5, [pc, #24]	; (800be24 <_close_r+0x1c>)
 800be0c:	2300      	movs	r3, #0
 800be0e:	4604      	mov	r4, r0
 800be10:	4608      	mov	r0, r1
 800be12:	602b      	str	r3, [r5, #0]
 800be14:	f7f9 fdee 	bl	80059f4 <_close>
 800be18:	1c43      	adds	r3, r0, #1
 800be1a:	d102      	bne.n	800be22 <_close_r+0x1a>
 800be1c:	682b      	ldr	r3, [r5, #0]
 800be1e:	b103      	cbz	r3, 800be22 <_close_r+0x1a>
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	20001de0 	.word	0x20001de0

0800be28 <_lseek_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4d07      	ldr	r5, [pc, #28]	; (800be48 <_lseek_r+0x20>)
 800be2c:	4604      	mov	r4, r0
 800be2e:	4608      	mov	r0, r1
 800be30:	4611      	mov	r1, r2
 800be32:	2200      	movs	r2, #0
 800be34:	602a      	str	r2, [r5, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	f7f9 fde8 	bl	8005a0c <_lseek>
 800be3c:	1c43      	adds	r3, r0, #1
 800be3e:	d102      	bne.n	800be46 <_lseek_r+0x1e>
 800be40:	682b      	ldr	r3, [r5, #0]
 800be42:	b103      	cbz	r3, 800be46 <_lseek_r+0x1e>
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	bd38      	pop	{r3, r4, r5, pc}
 800be48:	20001de0 	.word	0x20001de0

0800be4c <_read_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4d07      	ldr	r5, [pc, #28]	; (800be6c <_read_r+0x20>)
 800be50:	4604      	mov	r4, r0
 800be52:	4608      	mov	r0, r1
 800be54:	4611      	mov	r1, r2
 800be56:	2200      	movs	r2, #0
 800be58:	602a      	str	r2, [r5, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f7f9 fdae 	bl	80059bc <_read>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_read_r+0x1e>
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	b103      	cbz	r3, 800be6a <_read_r+0x1e>
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20001de0 	.word	0x20001de0

0800be70 <_write_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	; (800be90 <_write_r+0x20>)
 800be74:	4604      	mov	r4, r0
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	602a      	str	r2, [r5, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f7f9 fdaa 	bl	80059d8 <_write>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_write_r+0x1e>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_write_r+0x1e>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	20001de0 	.word	0x20001de0

0800be94 <__errno>:
 800be94:	4b01      	ldr	r3, [pc, #4]	; (800be9c <__errno+0x8>)
 800be96:	6818      	ldr	r0, [r3, #0]
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	200005fc 	.word	0x200005fc

0800bea0 <__libc_init_array>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	4d0d      	ldr	r5, [pc, #52]	; (800bed8 <__libc_init_array+0x38>)
 800bea4:	4c0d      	ldr	r4, [pc, #52]	; (800bedc <__libc_init_array+0x3c>)
 800bea6:	1b64      	subs	r4, r4, r5
 800bea8:	10a4      	asrs	r4, r4, #2
 800beaa:	2600      	movs	r6, #0
 800beac:	42a6      	cmp	r6, r4
 800beae:	d109      	bne.n	800bec4 <__libc_init_array+0x24>
 800beb0:	4d0b      	ldr	r5, [pc, #44]	; (800bee0 <__libc_init_array+0x40>)
 800beb2:	4c0c      	ldr	r4, [pc, #48]	; (800bee4 <__libc_init_array+0x44>)
 800beb4:	f003 f856 	bl	800ef64 <_init>
 800beb8:	1b64      	subs	r4, r4, r5
 800beba:	10a4      	asrs	r4, r4, #2
 800bebc:	2600      	movs	r6, #0
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	d105      	bne.n	800bece <__libc_init_array+0x2e>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec8:	4798      	blx	r3
 800beca:	3601      	adds	r6, #1
 800becc:	e7ee      	b.n	800beac <__libc_init_array+0xc>
 800bece:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed2:	4798      	blx	r3
 800bed4:	3601      	adds	r6, #1
 800bed6:	e7f2      	b.n	800bebe <__libc_init_array+0x1e>
 800bed8:	0800f8d8 	.word	0x0800f8d8
 800bedc:	0800f8d8 	.word	0x0800f8d8
 800bee0:	0800f8d8 	.word	0x0800f8d8
 800bee4:	0800f8dc 	.word	0x0800f8dc

0800bee8 <__retarget_lock_init_recursive>:
 800bee8:	4770      	bx	lr

0800beea <__retarget_lock_acquire_recursive>:
 800beea:	4770      	bx	lr

0800beec <__retarget_lock_release_recursive>:
 800beec:	4770      	bx	lr

0800beee <memcpy>:
 800beee:	440a      	add	r2, r1
 800bef0:	4291      	cmp	r1, r2
 800bef2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef6:	d100      	bne.n	800befa <memcpy+0xc>
 800bef8:	4770      	bx	lr
 800befa:	b510      	push	{r4, lr}
 800befc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf04:	4291      	cmp	r1, r2
 800bf06:	d1f9      	bne.n	800befc <memcpy+0xe>
 800bf08:	bd10      	pop	{r4, pc}

0800bf0a <quorem>:
 800bf0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0e:	6903      	ldr	r3, [r0, #16]
 800bf10:	690c      	ldr	r4, [r1, #16]
 800bf12:	42a3      	cmp	r3, r4
 800bf14:	4607      	mov	r7, r0
 800bf16:	db7e      	blt.n	800c016 <quorem+0x10c>
 800bf18:	3c01      	subs	r4, #1
 800bf1a:	f101 0814 	add.w	r8, r1, #20
 800bf1e:	f100 0514 	add.w	r5, r0, #20
 800bf22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf30:	3301      	adds	r3, #1
 800bf32:	429a      	cmp	r2, r3
 800bf34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf40:	d331      	bcc.n	800bfa6 <quorem+0x9c>
 800bf42:	f04f 0e00 	mov.w	lr, #0
 800bf46:	4640      	mov	r0, r8
 800bf48:	46ac      	mov	ip, r5
 800bf4a:	46f2      	mov	sl, lr
 800bf4c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf50:	b293      	uxth	r3, r2
 800bf52:	fb06 e303 	mla	r3, r6, r3, lr
 800bf56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf5a:	0c1a      	lsrs	r2, r3, #16
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	ebaa 0303 	sub.w	r3, sl, r3
 800bf62:	f8dc a000 	ldr.w	sl, [ip]
 800bf66:	fa13 f38a 	uxtah	r3, r3, sl
 800bf6a:	fb06 220e 	mla	r2, r6, lr, r2
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	9b00      	ldr	r3, [sp, #0]
 800bf72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf76:	b292      	uxth	r2, r2
 800bf78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf80:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf84:	4581      	cmp	r9, r0
 800bf86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf8a:	f84c 3b04 	str.w	r3, [ip], #4
 800bf8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf92:	d2db      	bcs.n	800bf4c <quorem+0x42>
 800bf94:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf98:	b92b      	cbnz	r3, 800bfa6 <quorem+0x9c>
 800bf9a:	9b01      	ldr	r3, [sp, #4]
 800bf9c:	3b04      	subs	r3, #4
 800bf9e:	429d      	cmp	r5, r3
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	d32c      	bcc.n	800bffe <quorem+0xf4>
 800bfa4:	613c      	str	r4, [r7, #16]
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f001 f9a8 	bl	800d2fc <__mcmp>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	db22      	blt.n	800bff6 <quorem+0xec>
 800bfb0:	3601      	adds	r6, #1
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfba:	f8d1 c000 	ldr.w	ip, [r1]
 800bfbe:	b293      	uxth	r3, r2
 800bfc0:	1ac3      	subs	r3, r0, r3
 800bfc2:	0c12      	lsrs	r2, r2, #16
 800bfc4:	fa13 f38c 	uxtah	r3, r3, ip
 800bfc8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bfcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfd6:	45c1      	cmp	r9, r8
 800bfd8:	f841 3b04 	str.w	r3, [r1], #4
 800bfdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bfe0:	d2e9      	bcs.n	800bfb6 <quorem+0xac>
 800bfe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfea:	b922      	cbnz	r2, 800bff6 <quorem+0xec>
 800bfec:	3b04      	subs	r3, #4
 800bfee:	429d      	cmp	r5, r3
 800bff0:	461a      	mov	r2, r3
 800bff2:	d30a      	bcc.n	800c00a <quorem+0x100>
 800bff4:	613c      	str	r4, [r7, #16]
 800bff6:	4630      	mov	r0, r6
 800bff8:	b003      	add	sp, #12
 800bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffe:	6812      	ldr	r2, [r2, #0]
 800c000:	3b04      	subs	r3, #4
 800c002:	2a00      	cmp	r2, #0
 800c004:	d1ce      	bne.n	800bfa4 <quorem+0x9a>
 800c006:	3c01      	subs	r4, #1
 800c008:	e7c9      	b.n	800bf9e <quorem+0x94>
 800c00a:	6812      	ldr	r2, [r2, #0]
 800c00c:	3b04      	subs	r3, #4
 800c00e:	2a00      	cmp	r2, #0
 800c010:	d1f0      	bne.n	800bff4 <quorem+0xea>
 800c012:	3c01      	subs	r4, #1
 800c014:	e7eb      	b.n	800bfee <quorem+0xe4>
 800c016:	2000      	movs	r0, #0
 800c018:	e7ee      	b.n	800bff8 <quorem+0xee>
 800c01a:	0000      	movs	r0, r0
 800c01c:	0000      	movs	r0, r0
	...

0800c020 <_dtoa_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	ed2d 8b04 	vpush	{d8-d9}
 800c028:	69c5      	ldr	r5, [r0, #28]
 800c02a:	b093      	sub	sp, #76	; 0x4c
 800c02c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c030:	ec57 6b10 	vmov	r6, r7, d0
 800c034:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c038:	9107      	str	r1, [sp, #28]
 800c03a:	4604      	mov	r4, r0
 800c03c:	920a      	str	r2, [sp, #40]	; 0x28
 800c03e:	930d      	str	r3, [sp, #52]	; 0x34
 800c040:	b975      	cbnz	r5, 800c060 <_dtoa_r+0x40>
 800c042:	2010      	movs	r0, #16
 800c044:	f000 fe2a 	bl	800cc9c <malloc>
 800c048:	4602      	mov	r2, r0
 800c04a:	61e0      	str	r0, [r4, #28]
 800c04c:	b920      	cbnz	r0, 800c058 <_dtoa_r+0x38>
 800c04e:	4bae      	ldr	r3, [pc, #696]	; (800c308 <_dtoa_r+0x2e8>)
 800c050:	21ef      	movs	r1, #239	; 0xef
 800c052:	48ae      	ldr	r0, [pc, #696]	; (800c30c <_dtoa_r+0x2ec>)
 800c054:	f001 fc82 	bl	800d95c <__assert_func>
 800c058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c05c:	6005      	str	r5, [r0, #0]
 800c05e:	60c5      	str	r5, [r0, #12]
 800c060:	69e3      	ldr	r3, [r4, #28]
 800c062:	6819      	ldr	r1, [r3, #0]
 800c064:	b151      	cbz	r1, 800c07c <_dtoa_r+0x5c>
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	604a      	str	r2, [r1, #4]
 800c06a:	2301      	movs	r3, #1
 800c06c:	4093      	lsls	r3, r2
 800c06e:	608b      	str	r3, [r1, #8]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 ff07 	bl	800ce84 <_Bfree>
 800c076:	69e3      	ldr	r3, [r4, #28]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	1e3b      	subs	r3, r7, #0
 800c07e:	bfbb      	ittet	lt
 800c080:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c084:	9303      	strlt	r3, [sp, #12]
 800c086:	2300      	movge	r3, #0
 800c088:	2201      	movlt	r2, #1
 800c08a:	bfac      	ite	ge
 800c08c:	f8c8 3000 	strge.w	r3, [r8]
 800c090:	f8c8 2000 	strlt.w	r2, [r8]
 800c094:	4b9e      	ldr	r3, [pc, #632]	; (800c310 <_dtoa_r+0x2f0>)
 800c096:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c09a:	ea33 0308 	bics.w	r3, r3, r8
 800c09e:	d11b      	bne.n	800c0d8 <_dtoa_r+0xb8>
 800c0a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c0ac:	4333      	orrs	r3, r6
 800c0ae:	f000 8593 	beq.w	800cbd8 <_dtoa_r+0xbb8>
 800c0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0b4:	b963      	cbnz	r3, 800c0d0 <_dtoa_r+0xb0>
 800c0b6:	4b97      	ldr	r3, [pc, #604]	; (800c314 <_dtoa_r+0x2f4>)
 800c0b8:	e027      	b.n	800c10a <_dtoa_r+0xea>
 800c0ba:	4b97      	ldr	r3, [pc, #604]	; (800c318 <_dtoa_r+0x2f8>)
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0c2:	6013      	str	r3, [r2, #0]
 800c0c4:	9800      	ldr	r0, [sp, #0]
 800c0c6:	b013      	add	sp, #76	; 0x4c
 800c0c8:	ecbd 8b04 	vpop	{d8-d9}
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d0:	4b90      	ldr	r3, [pc, #576]	; (800c314 <_dtoa_r+0x2f4>)
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	3303      	adds	r3, #3
 800c0d6:	e7f3      	b.n	800c0c0 <_dtoa_r+0xa0>
 800c0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	ec51 0b17 	vmov	r0, r1, d7
 800c0e2:	eeb0 8a47 	vmov.f32	s16, s14
 800c0e6:	eef0 8a67 	vmov.f32	s17, s15
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f7f4 fd14 	bl	8000b18 <__aeabi_dcmpeq>
 800c0f0:	4681      	mov	r9, r0
 800c0f2:	b160      	cbz	r0, 800c10e <_dtoa_r+0xee>
 800c0f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	6013      	str	r3, [r2, #0]
 800c0fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8568 	beq.w	800cbd2 <_dtoa_r+0xbb2>
 800c102:	4b86      	ldr	r3, [pc, #536]	; (800c31c <_dtoa_r+0x2fc>)
 800c104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	3b01      	subs	r3, #1
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	e7da      	b.n	800c0c4 <_dtoa_r+0xa4>
 800c10e:	aa10      	add	r2, sp, #64	; 0x40
 800c110:	a911      	add	r1, sp, #68	; 0x44
 800c112:	4620      	mov	r0, r4
 800c114:	eeb0 0a48 	vmov.f32	s0, s16
 800c118:	eef0 0a68 	vmov.f32	s1, s17
 800c11c:	f001 f994 	bl	800d448 <__d2b>
 800c120:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c124:	4682      	mov	sl, r0
 800c126:	2d00      	cmp	r5, #0
 800c128:	d07f      	beq.n	800c22a <_dtoa_r+0x20a>
 800c12a:	ee18 3a90 	vmov	r3, s17
 800c12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c132:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c136:	ec51 0b18 	vmov	r0, r1, d8
 800c13a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c13e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c142:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c146:	4619      	mov	r1, r3
 800c148:	2200      	movs	r2, #0
 800c14a:	4b75      	ldr	r3, [pc, #468]	; (800c320 <_dtoa_r+0x300>)
 800c14c:	f7f4 f8c4 	bl	80002d8 <__aeabi_dsub>
 800c150:	a367      	add	r3, pc, #412	; (adr r3, 800c2f0 <_dtoa_r+0x2d0>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 fa77 	bl	8000648 <__aeabi_dmul>
 800c15a:	a367      	add	r3, pc, #412	; (adr r3, 800c2f8 <_dtoa_r+0x2d8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 f8bc 	bl	80002dc <__adddf3>
 800c164:	4606      	mov	r6, r0
 800c166:	4628      	mov	r0, r5
 800c168:	460f      	mov	r7, r1
 800c16a:	f7f4 fa03 	bl	8000574 <__aeabi_i2d>
 800c16e:	a364      	add	r3, pc, #400	; (adr r3, 800c300 <_dtoa_r+0x2e0>)
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	f7f4 fa68 	bl	8000648 <__aeabi_dmul>
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	4630      	mov	r0, r6
 800c17e:	4639      	mov	r1, r7
 800c180:	f7f4 f8ac 	bl	80002dc <__adddf3>
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	f7f4 fd0e 	bl	8000ba8 <__aeabi_d2iz>
 800c18c:	2200      	movs	r2, #0
 800c18e:	4683      	mov	fp, r0
 800c190:	2300      	movs	r3, #0
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 fcc9 	bl	8000b2c <__aeabi_dcmplt>
 800c19a:	b148      	cbz	r0, 800c1b0 <_dtoa_r+0x190>
 800c19c:	4658      	mov	r0, fp
 800c19e:	f7f4 f9e9 	bl	8000574 <__aeabi_i2d>
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	f7f4 fcb7 	bl	8000b18 <__aeabi_dcmpeq>
 800c1aa:	b908      	cbnz	r0, 800c1b0 <_dtoa_r+0x190>
 800c1ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1b0:	f1bb 0f16 	cmp.w	fp, #22
 800c1b4:	d857      	bhi.n	800c266 <_dtoa_r+0x246>
 800c1b6:	4b5b      	ldr	r3, [pc, #364]	; (800c324 <_dtoa_r+0x304>)
 800c1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	ec51 0b18 	vmov	r0, r1, d8
 800c1c4:	f7f4 fcb2 	bl	8000b2c <__aeabi_dcmplt>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d04e      	beq.n	800c26a <_dtoa_r+0x24a>
 800c1cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1d6:	1b5b      	subs	r3, r3, r5
 800c1d8:	1e5a      	subs	r2, r3, #1
 800c1da:	bf45      	ittet	mi
 800c1dc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c1e0:	9305      	strmi	r3, [sp, #20]
 800c1e2:	2300      	movpl	r3, #0
 800c1e4:	2300      	movmi	r3, #0
 800c1e6:	9206      	str	r2, [sp, #24]
 800c1e8:	bf54      	ite	pl
 800c1ea:	9305      	strpl	r3, [sp, #20]
 800c1ec:	9306      	strmi	r3, [sp, #24]
 800c1ee:	f1bb 0f00 	cmp.w	fp, #0
 800c1f2:	db3c      	blt.n	800c26e <_dtoa_r+0x24e>
 800c1f4:	9b06      	ldr	r3, [sp, #24]
 800c1f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c1fa:	445b      	add	r3, fp
 800c1fc:	9306      	str	r3, [sp, #24]
 800c1fe:	2300      	movs	r3, #0
 800c200:	9308      	str	r3, [sp, #32]
 800c202:	9b07      	ldr	r3, [sp, #28]
 800c204:	2b09      	cmp	r3, #9
 800c206:	d868      	bhi.n	800c2da <_dtoa_r+0x2ba>
 800c208:	2b05      	cmp	r3, #5
 800c20a:	bfc4      	itt	gt
 800c20c:	3b04      	subgt	r3, #4
 800c20e:	9307      	strgt	r3, [sp, #28]
 800c210:	9b07      	ldr	r3, [sp, #28]
 800c212:	f1a3 0302 	sub.w	r3, r3, #2
 800c216:	bfcc      	ite	gt
 800c218:	2500      	movgt	r5, #0
 800c21a:	2501      	movle	r5, #1
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	f200 8085 	bhi.w	800c32c <_dtoa_r+0x30c>
 800c222:	e8df f003 	tbb	[pc, r3]
 800c226:	3b2e      	.short	0x3b2e
 800c228:	5839      	.short	0x5839
 800c22a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c22e:	441d      	add	r5, r3
 800c230:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c234:	2b20      	cmp	r3, #32
 800c236:	bfc1      	itttt	gt
 800c238:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c23c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c240:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c244:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c248:	bfd6      	itet	le
 800c24a:	f1c3 0320 	rsble	r3, r3, #32
 800c24e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c252:	fa06 f003 	lslle.w	r0, r6, r3
 800c256:	f7f4 f97d 	bl	8000554 <__aeabi_ui2d>
 800c25a:	2201      	movs	r2, #1
 800c25c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c260:	3d01      	subs	r5, #1
 800c262:	920e      	str	r2, [sp, #56]	; 0x38
 800c264:	e76f      	b.n	800c146 <_dtoa_r+0x126>
 800c266:	2301      	movs	r3, #1
 800c268:	e7b3      	b.n	800c1d2 <_dtoa_r+0x1b2>
 800c26a:	900c      	str	r0, [sp, #48]	; 0x30
 800c26c:	e7b2      	b.n	800c1d4 <_dtoa_r+0x1b4>
 800c26e:	9b05      	ldr	r3, [sp, #20]
 800c270:	eba3 030b 	sub.w	r3, r3, fp
 800c274:	9305      	str	r3, [sp, #20]
 800c276:	f1cb 0300 	rsb	r3, fp, #0
 800c27a:	9308      	str	r3, [sp, #32]
 800c27c:	2300      	movs	r3, #0
 800c27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c280:	e7bf      	b.n	800c202 <_dtoa_r+0x1e2>
 800c282:	2300      	movs	r3, #0
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dc52      	bgt.n	800c332 <_dtoa_r+0x312>
 800c28c:	2301      	movs	r3, #1
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	9304      	str	r3, [sp, #16]
 800c292:	461a      	mov	r2, r3
 800c294:	920a      	str	r2, [sp, #40]	; 0x28
 800c296:	e00b      	b.n	800c2b0 <_dtoa_r+0x290>
 800c298:	2301      	movs	r3, #1
 800c29a:	e7f3      	b.n	800c284 <_dtoa_r+0x264>
 800c29c:	2300      	movs	r3, #0
 800c29e:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a2:	445b      	add	r3, fp
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	bfb8      	it	lt
 800c2ae:	2301      	movlt	r3, #1
 800c2b0:	69e0      	ldr	r0, [r4, #28]
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	2204      	movs	r2, #4
 800c2b6:	f102 0614 	add.w	r6, r2, #20
 800c2ba:	429e      	cmp	r6, r3
 800c2bc:	d93d      	bls.n	800c33a <_dtoa_r+0x31a>
 800c2be:	6041      	str	r1, [r0, #4]
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fd9f 	bl	800ce04 <_Balloc>
 800c2c6:	9000      	str	r0, [sp, #0]
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d139      	bne.n	800c340 <_dtoa_r+0x320>
 800c2cc:	4b16      	ldr	r3, [pc, #88]	; (800c328 <_dtoa_r+0x308>)
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	f240 11af 	movw	r1, #431	; 0x1af
 800c2d4:	e6bd      	b.n	800c052 <_dtoa_r+0x32>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e7e1      	b.n	800c29e <_dtoa_r+0x27e>
 800c2da:	2501      	movs	r5, #1
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	9509      	str	r5, [sp, #36]	; 0x24
 800c2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	9304      	str	r3, [sp, #16]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2312      	movs	r3, #18
 800c2ee:	e7d1      	b.n	800c294 <_dtoa_r+0x274>
 800c2f0:	636f4361 	.word	0x636f4361
 800c2f4:	3fd287a7 	.word	0x3fd287a7
 800c2f8:	8b60c8b3 	.word	0x8b60c8b3
 800c2fc:	3fc68a28 	.word	0x3fc68a28
 800c300:	509f79fb 	.word	0x509f79fb
 800c304:	3fd34413 	.word	0x3fd34413
 800c308:	0800f1bd 	.word	0x0800f1bd
 800c30c:	0800f1d4 	.word	0x0800f1d4
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	0800f1b9 	.word	0x0800f1b9
 800c318:	0800f1b0 	.word	0x0800f1b0
 800c31c:	0800f18d 	.word	0x0800f18d
 800c320:	3ff80000 	.word	0x3ff80000
 800c324:	0800f2c0 	.word	0x0800f2c0
 800c328:	0800f22c 	.word	0x0800f22c
 800c32c:	2301      	movs	r3, #1
 800c32e:	9309      	str	r3, [sp, #36]	; 0x24
 800c330:	e7d7      	b.n	800c2e2 <_dtoa_r+0x2c2>
 800c332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	e7ba      	b.n	800c2b0 <_dtoa_r+0x290>
 800c33a:	3101      	adds	r1, #1
 800c33c:	0052      	lsls	r2, r2, #1
 800c33e:	e7ba      	b.n	800c2b6 <_dtoa_r+0x296>
 800c340:	69e3      	ldr	r3, [r4, #28]
 800c342:	9a00      	ldr	r2, [sp, #0]
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	2b0e      	cmp	r3, #14
 800c34a:	f200 80a8 	bhi.w	800c49e <_dtoa_r+0x47e>
 800c34e:	2d00      	cmp	r5, #0
 800c350:	f000 80a5 	beq.w	800c49e <_dtoa_r+0x47e>
 800c354:	f1bb 0f00 	cmp.w	fp, #0
 800c358:	dd38      	ble.n	800c3cc <_dtoa_r+0x3ac>
 800c35a:	4bc0      	ldr	r3, [pc, #768]	; (800c65c <_dtoa_r+0x63c>)
 800c35c:	f00b 020f 	and.w	r2, fp, #15
 800c360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c364:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c368:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c36c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c370:	d019      	beq.n	800c3a6 <_dtoa_r+0x386>
 800c372:	4bbb      	ldr	r3, [pc, #748]	; (800c660 <_dtoa_r+0x640>)
 800c374:	ec51 0b18 	vmov	r0, r1, d8
 800c378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c37c:	f7f4 fa8e 	bl	800089c <__aeabi_ddiv>
 800c380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c384:	f008 080f 	and.w	r8, r8, #15
 800c388:	2503      	movs	r5, #3
 800c38a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c660 <_dtoa_r+0x640>
 800c38e:	f1b8 0f00 	cmp.w	r8, #0
 800c392:	d10a      	bne.n	800c3aa <_dtoa_r+0x38a>
 800c394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c398:	4632      	mov	r2, r6
 800c39a:	463b      	mov	r3, r7
 800c39c:	f7f4 fa7e 	bl	800089c <__aeabi_ddiv>
 800c3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3a4:	e02b      	b.n	800c3fe <_dtoa_r+0x3de>
 800c3a6:	2502      	movs	r5, #2
 800c3a8:	e7ef      	b.n	800c38a <_dtoa_r+0x36a>
 800c3aa:	f018 0f01 	tst.w	r8, #1
 800c3ae:	d008      	beq.n	800c3c2 <_dtoa_r+0x3a2>
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	4639      	mov	r1, r7
 800c3b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c3b8:	f7f4 f946 	bl	8000648 <__aeabi_dmul>
 800c3bc:	3501      	adds	r5, #1
 800c3be:	4606      	mov	r6, r0
 800c3c0:	460f      	mov	r7, r1
 800c3c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c3c6:	f109 0908 	add.w	r9, r9, #8
 800c3ca:	e7e0      	b.n	800c38e <_dtoa_r+0x36e>
 800c3cc:	f000 809f 	beq.w	800c50e <_dtoa_r+0x4ee>
 800c3d0:	f1cb 0600 	rsb	r6, fp, #0
 800c3d4:	4ba1      	ldr	r3, [pc, #644]	; (800c65c <_dtoa_r+0x63c>)
 800c3d6:	4fa2      	ldr	r7, [pc, #648]	; (800c660 <_dtoa_r+0x640>)
 800c3d8:	f006 020f 	and.w	r2, r6, #15
 800c3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	ec51 0b18 	vmov	r0, r1, d8
 800c3e8:	f7f4 f92e 	bl	8000648 <__aeabi_dmul>
 800c3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f0:	1136      	asrs	r6, r6, #4
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2502      	movs	r5, #2
 800c3f6:	2e00      	cmp	r6, #0
 800c3f8:	d17e      	bne.n	800c4f8 <_dtoa_r+0x4d8>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1d0      	bne.n	800c3a0 <_dtoa_r+0x380>
 800c3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c400:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 8084 	beq.w	800c512 <_dtoa_r+0x4f2>
 800c40a:	4b96      	ldr	r3, [pc, #600]	; (800c664 <_dtoa_r+0x644>)
 800c40c:	2200      	movs	r2, #0
 800c40e:	4640      	mov	r0, r8
 800c410:	4649      	mov	r1, r9
 800c412:	f7f4 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 800c416:	2800      	cmp	r0, #0
 800c418:	d07b      	beq.n	800c512 <_dtoa_r+0x4f2>
 800c41a:	9b04      	ldr	r3, [sp, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d078      	beq.n	800c512 <_dtoa_r+0x4f2>
 800c420:	9b01      	ldr	r3, [sp, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	dd39      	ble.n	800c49a <_dtoa_r+0x47a>
 800c426:	4b90      	ldr	r3, [pc, #576]	; (800c668 <_dtoa_r+0x648>)
 800c428:	2200      	movs	r2, #0
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f4 f90b 	bl	8000648 <__aeabi_dmul>
 800c432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c436:	9e01      	ldr	r6, [sp, #4]
 800c438:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c43c:	3501      	adds	r5, #1
 800c43e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c442:	4628      	mov	r0, r5
 800c444:	f7f4 f896 	bl	8000574 <__aeabi_i2d>
 800c448:	4642      	mov	r2, r8
 800c44a:	464b      	mov	r3, r9
 800c44c:	f7f4 f8fc 	bl	8000648 <__aeabi_dmul>
 800c450:	4b86      	ldr	r3, [pc, #536]	; (800c66c <_dtoa_r+0x64c>)
 800c452:	2200      	movs	r2, #0
 800c454:	f7f3 ff42 	bl	80002dc <__adddf3>
 800c458:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	2e00      	cmp	r6, #0
 800c464:	d158      	bne.n	800c518 <_dtoa_r+0x4f8>
 800c466:	4b82      	ldr	r3, [pc, #520]	; (800c670 <_dtoa_r+0x650>)
 800c468:	2200      	movs	r2, #0
 800c46a:	4640      	mov	r0, r8
 800c46c:	4649      	mov	r1, r9
 800c46e:	f7f3 ff33 	bl	80002d8 <__aeabi_dsub>
 800c472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c476:	4680      	mov	r8, r0
 800c478:	4689      	mov	r9, r1
 800c47a:	f7f4 fb75 	bl	8000b68 <__aeabi_dcmpgt>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f040 8296 	bne.w	800c9b0 <_dtoa_r+0x990>
 800c484:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c488:	4640      	mov	r0, r8
 800c48a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c48e:	4649      	mov	r1, r9
 800c490:	f7f4 fb4c 	bl	8000b2c <__aeabi_dcmplt>
 800c494:	2800      	cmp	r0, #0
 800c496:	f040 8289 	bne.w	800c9ac <_dtoa_r+0x98c>
 800c49a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c49e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f2c0 814e 	blt.w	800c742 <_dtoa_r+0x722>
 800c4a6:	f1bb 0f0e 	cmp.w	fp, #14
 800c4aa:	f300 814a 	bgt.w	800c742 <_dtoa_r+0x722>
 800c4ae:	4b6b      	ldr	r3, [pc, #428]	; (800c65c <_dtoa_r+0x63c>)
 800c4b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f280 80dc 	bge.w	800c678 <_dtoa_r+0x658>
 800c4c0:	9b04      	ldr	r3, [sp, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f300 80d8 	bgt.w	800c678 <_dtoa_r+0x658>
 800c4c8:	f040 826f 	bne.w	800c9aa <_dtoa_r+0x98a>
 800c4cc:	4b68      	ldr	r3, [pc, #416]	; (800c670 <_dtoa_r+0x650>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	f7f4 f8b8 	bl	8000648 <__aeabi_dmul>
 800c4d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4dc:	f7f4 fb3a 	bl	8000b54 <__aeabi_dcmpge>
 800c4e0:	9e04      	ldr	r6, [sp, #16]
 800c4e2:	4637      	mov	r7, r6
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f040 8245 	bne.w	800c974 <_dtoa_r+0x954>
 800c4ea:	9d00      	ldr	r5, [sp, #0]
 800c4ec:	2331      	movs	r3, #49	; 0x31
 800c4ee:	f805 3b01 	strb.w	r3, [r5], #1
 800c4f2:	f10b 0b01 	add.w	fp, fp, #1
 800c4f6:	e241      	b.n	800c97c <_dtoa_r+0x95c>
 800c4f8:	07f2      	lsls	r2, r6, #31
 800c4fa:	d505      	bpl.n	800c508 <_dtoa_r+0x4e8>
 800c4fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c500:	f7f4 f8a2 	bl	8000648 <__aeabi_dmul>
 800c504:	3501      	adds	r5, #1
 800c506:	2301      	movs	r3, #1
 800c508:	1076      	asrs	r6, r6, #1
 800c50a:	3708      	adds	r7, #8
 800c50c:	e773      	b.n	800c3f6 <_dtoa_r+0x3d6>
 800c50e:	2502      	movs	r5, #2
 800c510:	e775      	b.n	800c3fe <_dtoa_r+0x3de>
 800c512:	9e04      	ldr	r6, [sp, #16]
 800c514:	465f      	mov	r7, fp
 800c516:	e792      	b.n	800c43e <_dtoa_r+0x41e>
 800c518:	9900      	ldr	r1, [sp, #0]
 800c51a:	4b50      	ldr	r3, [pc, #320]	; (800c65c <_dtoa_r+0x63c>)
 800c51c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c520:	4431      	add	r1, r6
 800c522:	9102      	str	r1, [sp, #8]
 800c524:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c526:	eeb0 9a47 	vmov.f32	s18, s14
 800c52a:	eef0 9a67 	vmov.f32	s19, s15
 800c52e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c532:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c536:	2900      	cmp	r1, #0
 800c538:	d044      	beq.n	800c5c4 <_dtoa_r+0x5a4>
 800c53a:	494e      	ldr	r1, [pc, #312]	; (800c674 <_dtoa_r+0x654>)
 800c53c:	2000      	movs	r0, #0
 800c53e:	f7f4 f9ad 	bl	800089c <__aeabi_ddiv>
 800c542:	ec53 2b19 	vmov	r2, r3, d9
 800c546:	f7f3 fec7 	bl	80002d8 <__aeabi_dsub>
 800c54a:	9d00      	ldr	r5, [sp, #0]
 800c54c:	ec41 0b19 	vmov	d9, r0, r1
 800c550:	4649      	mov	r1, r9
 800c552:	4640      	mov	r0, r8
 800c554:	f7f4 fb28 	bl	8000ba8 <__aeabi_d2iz>
 800c558:	4606      	mov	r6, r0
 800c55a:	f7f4 f80b 	bl	8000574 <__aeabi_i2d>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f3 feb7 	bl	80002d8 <__aeabi_dsub>
 800c56a:	3630      	adds	r6, #48	; 0x30
 800c56c:	f805 6b01 	strb.w	r6, [r5], #1
 800c570:	ec53 2b19 	vmov	r2, r3, d9
 800c574:	4680      	mov	r8, r0
 800c576:	4689      	mov	r9, r1
 800c578:	f7f4 fad8 	bl	8000b2c <__aeabi_dcmplt>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d164      	bne.n	800c64a <_dtoa_r+0x62a>
 800c580:	4642      	mov	r2, r8
 800c582:	464b      	mov	r3, r9
 800c584:	4937      	ldr	r1, [pc, #220]	; (800c664 <_dtoa_r+0x644>)
 800c586:	2000      	movs	r0, #0
 800c588:	f7f3 fea6 	bl	80002d8 <__aeabi_dsub>
 800c58c:	ec53 2b19 	vmov	r2, r3, d9
 800c590:	f7f4 facc 	bl	8000b2c <__aeabi_dcmplt>
 800c594:	2800      	cmp	r0, #0
 800c596:	f040 80b6 	bne.w	800c706 <_dtoa_r+0x6e6>
 800c59a:	9b02      	ldr	r3, [sp, #8]
 800c59c:	429d      	cmp	r5, r3
 800c59e:	f43f af7c 	beq.w	800c49a <_dtoa_r+0x47a>
 800c5a2:	4b31      	ldr	r3, [pc, #196]	; (800c668 <_dtoa_r+0x648>)
 800c5a4:	ec51 0b19 	vmov	r0, r1, d9
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f7f4 f84d 	bl	8000648 <__aeabi_dmul>
 800c5ae:	4b2e      	ldr	r3, [pc, #184]	; (800c668 <_dtoa_r+0x648>)
 800c5b0:	ec41 0b19 	vmov	d9, r0, r1
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	f7f4 f845 	bl	8000648 <__aeabi_dmul>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4689      	mov	r9, r1
 800c5c2:	e7c5      	b.n	800c550 <_dtoa_r+0x530>
 800c5c4:	ec51 0b17 	vmov	r0, r1, d7
 800c5c8:	f7f4 f83e 	bl	8000648 <__aeabi_dmul>
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	9d00      	ldr	r5, [sp, #0]
 800c5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5d2:	ec41 0b19 	vmov	d9, r0, r1
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	4640      	mov	r0, r8
 800c5da:	f7f4 fae5 	bl	8000ba8 <__aeabi_d2iz>
 800c5de:	4606      	mov	r6, r0
 800c5e0:	f7f3 ffc8 	bl	8000574 <__aeabi_i2d>
 800c5e4:	3630      	adds	r6, #48	; 0x30
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f7f3 fe73 	bl	80002d8 <__aeabi_dsub>
 800c5f2:	f805 6b01 	strb.w	r6, [r5], #1
 800c5f6:	9b02      	ldr	r3, [sp, #8]
 800c5f8:	429d      	cmp	r5, r3
 800c5fa:	4680      	mov	r8, r0
 800c5fc:	4689      	mov	r9, r1
 800c5fe:	f04f 0200 	mov.w	r2, #0
 800c602:	d124      	bne.n	800c64e <_dtoa_r+0x62e>
 800c604:	4b1b      	ldr	r3, [pc, #108]	; (800c674 <_dtoa_r+0x654>)
 800c606:	ec51 0b19 	vmov	r0, r1, d9
 800c60a:	f7f3 fe67 	bl	80002dc <__adddf3>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f4 faa7 	bl	8000b68 <__aeabi_dcmpgt>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	d173      	bne.n	800c706 <_dtoa_r+0x6e6>
 800c61e:	ec53 2b19 	vmov	r2, r3, d9
 800c622:	4914      	ldr	r1, [pc, #80]	; (800c674 <_dtoa_r+0x654>)
 800c624:	2000      	movs	r0, #0
 800c626:	f7f3 fe57 	bl	80002d8 <__aeabi_dsub>
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4640      	mov	r0, r8
 800c630:	4649      	mov	r1, r9
 800c632:	f7f4 fa7b 	bl	8000b2c <__aeabi_dcmplt>
 800c636:	2800      	cmp	r0, #0
 800c638:	f43f af2f 	beq.w	800c49a <_dtoa_r+0x47a>
 800c63c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c63e:	1e6b      	subs	r3, r5, #1
 800c640:	930f      	str	r3, [sp, #60]	; 0x3c
 800c642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c646:	2b30      	cmp	r3, #48	; 0x30
 800c648:	d0f8      	beq.n	800c63c <_dtoa_r+0x61c>
 800c64a:	46bb      	mov	fp, r7
 800c64c:	e04a      	b.n	800c6e4 <_dtoa_r+0x6c4>
 800c64e:	4b06      	ldr	r3, [pc, #24]	; (800c668 <_dtoa_r+0x648>)
 800c650:	f7f3 fffa 	bl	8000648 <__aeabi_dmul>
 800c654:	4680      	mov	r8, r0
 800c656:	4689      	mov	r9, r1
 800c658:	e7bd      	b.n	800c5d6 <_dtoa_r+0x5b6>
 800c65a:	bf00      	nop
 800c65c:	0800f2c0 	.word	0x0800f2c0
 800c660:	0800f298 	.word	0x0800f298
 800c664:	3ff00000 	.word	0x3ff00000
 800c668:	40240000 	.word	0x40240000
 800c66c:	401c0000 	.word	0x401c0000
 800c670:	40140000 	.word	0x40140000
 800c674:	3fe00000 	.word	0x3fe00000
 800c678:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c67c:	9d00      	ldr	r5, [sp, #0]
 800c67e:	4642      	mov	r2, r8
 800c680:	464b      	mov	r3, r9
 800c682:	4630      	mov	r0, r6
 800c684:	4639      	mov	r1, r7
 800c686:	f7f4 f909 	bl	800089c <__aeabi_ddiv>
 800c68a:	f7f4 fa8d 	bl	8000ba8 <__aeabi_d2iz>
 800c68e:	9001      	str	r0, [sp, #4]
 800c690:	f7f3 ff70 	bl	8000574 <__aeabi_i2d>
 800c694:	4642      	mov	r2, r8
 800c696:	464b      	mov	r3, r9
 800c698:	f7f3 ffd6 	bl	8000648 <__aeabi_dmul>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f7f3 fe18 	bl	80002d8 <__aeabi_dsub>
 800c6a8:	9e01      	ldr	r6, [sp, #4]
 800c6aa:	9f04      	ldr	r7, [sp, #16]
 800c6ac:	3630      	adds	r6, #48	; 0x30
 800c6ae:	f805 6b01 	strb.w	r6, [r5], #1
 800c6b2:	9e00      	ldr	r6, [sp, #0]
 800c6b4:	1bae      	subs	r6, r5, r6
 800c6b6:	42b7      	cmp	r7, r6
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	d134      	bne.n	800c728 <_dtoa_r+0x708>
 800c6be:	f7f3 fe0d 	bl	80002dc <__adddf3>
 800c6c2:	4642      	mov	r2, r8
 800c6c4:	464b      	mov	r3, r9
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	460f      	mov	r7, r1
 800c6ca:	f7f4 fa4d 	bl	8000b68 <__aeabi_dcmpgt>
 800c6ce:	b9c8      	cbnz	r0, 800c704 <_dtoa_r+0x6e4>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	464b      	mov	r3, r9
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	f7f4 fa1e 	bl	8000b18 <__aeabi_dcmpeq>
 800c6dc:	b110      	cbz	r0, 800c6e4 <_dtoa_r+0x6c4>
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	07db      	lsls	r3, r3, #31
 800c6e2:	d40f      	bmi.n	800c704 <_dtoa_r+0x6e4>
 800c6e4:	4651      	mov	r1, sl
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fbcc 	bl	800ce84 <_Bfree>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6f0:	702b      	strb	r3, [r5, #0]
 800c6f2:	f10b 0301 	add.w	r3, fp, #1
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f43f ace2 	beq.w	800c0c4 <_dtoa_r+0xa4>
 800c700:	601d      	str	r5, [r3, #0]
 800c702:	e4df      	b.n	800c0c4 <_dtoa_r+0xa4>
 800c704:	465f      	mov	r7, fp
 800c706:	462b      	mov	r3, r5
 800c708:	461d      	mov	r5, r3
 800c70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c70e:	2a39      	cmp	r2, #57	; 0x39
 800c710:	d106      	bne.n	800c720 <_dtoa_r+0x700>
 800c712:	9a00      	ldr	r2, [sp, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d1f7      	bne.n	800c708 <_dtoa_r+0x6e8>
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	2230      	movs	r2, #48	; 0x30
 800c71c:	3701      	adds	r7, #1
 800c71e:	700a      	strb	r2, [r1, #0]
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	3201      	adds	r2, #1
 800c724:	701a      	strb	r2, [r3, #0]
 800c726:	e790      	b.n	800c64a <_dtoa_r+0x62a>
 800c728:	4ba3      	ldr	r3, [pc, #652]	; (800c9b8 <_dtoa_r+0x998>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	f7f3 ff8c 	bl	8000648 <__aeabi_dmul>
 800c730:	2200      	movs	r2, #0
 800c732:	2300      	movs	r3, #0
 800c734:	4606      	mov	r6, r0
 800c736:	460f      	mov	r7, r1
 800c738:	f7f4 f9ee 	bl	8000b18 <__aeabi_dcmpeq>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d09e      	beq.n	800c67e <_dtoa_r+0x65e>
 800c740:	e7d0      	b.n	800c6e4 <_dtoa_r+0x6c4>
 800c742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c744:	2a00      	cmp	r2, #0
 800c746:	f000 80ca 	beq.w	800c8de <_dtoa_r+0x8be>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	2a01      	cmp	r2, #1
 800c74e:	f300 80ad 	bgt.w	800c8ac <_dtoa_r+0x88c>
 800c752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c754:	2a00      	cmp	r2, #0
 800c756:	f000 80a5 	beq.w	800c8a4 <_dtoa_r+0x884>
 800c75a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c75e:	9e08      	ldr	r6, [sp, #32]
 800c760:	9d05      	ldr	r5, [sp, #20]
 800c762:	9a05      	ldr	r2, [sp, #20]
 800c764:	441a      	add	r2, r3
 800c766:	9205      	str	r2, [sp, #20]
 800c768:	9a06      	ldr	r2, [sp, #24]
 800c76a:	2101      	movs	r1, #1
 800c76c:	441a      	add	r2, r3
 800c76e:	4620      	mov	r0, r4
 800c770:	9206      	str	r2, [sp, #24]
 800c772:	f000 fc3d 	bl	800cff0 <__i2b>
 800c776:	4607      	mov	r7, r0
 800c778:	b165      	cbz	r5, 800c794 <_dtoa_r+0x774>
 800c77a:	9b06      	ldr	r3, [sp, #24]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd09      	ble.n	800c794 <_dtoa_r+0x774>
 800c780:	42ab      	cmp	r3, r5
 800c782:	9a05      	ldr	r2, [sp, #20]
 800c784:	bfa8      	it	ge
 800c786:	462b      	movge	r3, r5
 800c788:	1ad2      	subs	r2, r2, r3
 800c78a:	9205      	str	r2, [sp, #20]
 800c78c:	9a06      	ldr	r2, [sp, #24]
 800c78e:	1aed      	subs	r5, r5, r3
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	9b08      	ldr	r3, [sp, #32]
 800c796:	b1f3      	cbz	r3, 800c7d6 <_dtoa_r+0x7b6>
 800c798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 80a3 	beq.w	800c8e6 <_dtoa_r+0x8c6>
 800c7a0:	2e00      	cmp	r6, #0
 800c7a2:	dd10      	ble.n	800c7c6 <_dtoa_r+0x7a6>
 800c7a4:	4639      	mov	r1, r7
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fce1 	bl	800d170 <__pow5mult>
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fc31 	bl	800d01c <__multiply>
 800c7ba:	4651      	mov	r1, sl
 800c7bc:	4680      	mov	r8, r0
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fb60 	bl	800ce84 <_Bfree>
 800c7c4:	46c2      	mov	sl, r8
 800c7c6:	9b08      	ldr	r3, [sp, #32]
 800c7c8:	1b9a      	subs	r2, r3, r6
 800c7ca:	d004      	beq.n	800c7d6 <_dtoa_r+0x7b6>
 800c7cc:	4651      	mov	r1, sl
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 fcce 	bl	800d170 <__pow5mult>
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fc09 	bl	800cff0 <__i2b>
 800c7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	f340 8081 	ble.w	800c8ea <_dtoa_r+0x8ca>
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f000 fcbf 	bl	800d170 <__pow5mult>
 800c7f2:	9b07      	ldr	r3, [sp, #28]
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	dd7a      	ble.n	800c8f0 <_dtoa_r+0x8d0>
 800c7fa:	f04f 0800 	mov.w	r8, #0
 800c7fe:	6933      	ldr	r3, [r6, #16]
 800c800:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c804:	6918      	ldr	r0, [r3, #16]
 800c806:	f000 fba5 	bl	800cf54 <__hi0bits>
 800c80a:	f1c0 0020 	rsb	r0, r0, #32
 800c80e:	9b06      	ldr	r3, [sp, #24]
 800c810:	4418      	add	r0, r3
 800c812:	f010 001f 	ands.w	r0, r0, #31
 800c816:	f000 8094 	beq.w	800c942 <_dtoa_r+0x922>
 800c81a:	f1c0 0320 	rsb	r3, r0, #32
 800c81e:	2b04      	cmp	r3, #4
 800c820:	f340 8085 	ble.w	800c92e <_dtoa_r+0x90e>
 800c824:	9b05      	ldr	r3, [sp, #20]
 800c826:	f1c0 001c 	rsb	r0, r0, #28
 800c82a:	4403      	add	r3, r0
 800c82c:	9305      	str	r3, [sp, #20]
 800c82e:	9b06      	ldr	r3, [sp, #24]
 800c830:	4403      	add	r3, r0
 800c832:	4405      	add	r5, r0
 800c834:	9306      	str	r3, [sp, #24]
 800c836:	9b05      	ldr	r3, [sp, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	dd05      	ble.n	800c848 <_dtoa_r+0x828>
 800c83c:	4651      	mov	r1, sl
 800c83e:	461a      	mov	r2, r3
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fcef 	bl	800d224 <__lshift>
 800c846:	4682      	mov	sl, r0
 800c848:	9b06      	ldr	r3, [sp, #24]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd05      	ble.n	800c85a <_dtoa_r+0x83a>
 800c84e:	4631      	mov	r1, r6
 800c850:	461a      	mov	r2, r3
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fce6 	bl	800d224 <__lshift>
 800c858:	4606      	mov	r6, r0
 800c85a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d072      	beq.n	800c946 <_dtoa_r+0x926>
 800c860:	4631      	mov	r1, r6
 800c862:	4650      	mov	r0, sl
 800c864:	f000 fd4a 	bl	800d2fc <__mcmp>
 800c868:	2800      	cmp	r0, #0
 800c86a:	da6c      	bge.n	800c946 <_dtoa_r+0x926>
 800c86c:	2300      	movs	r3, #0
 800c86e:	4651      	mov	r1, sl
 800c870:	220a      	movs	r2, #10
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fb28 	bl	800cec8 <__multadd>
 800c878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c87e:	4682      	mov	sl, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	f000 81b0 	beq.w	800cbe6 <_dtoa_r+0xbc6>
 800c886:	2300      	movs	r3, #0
 800c888:	4639      	mov	r1, r7
 800c88a:	220a      	movs	r2, #10
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 fb1b 	bl	800cec8 <__multadd>
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	4607      	mov	r7, r0
 800c898:	f300 8096 	bgt.w	800c9c8 <_dtoa_r+0x9a8>
 800c89c:	9b07      	ldr	r3, [sp, #28]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	dc59      	bgt.n	800c956 <_dtoa_r+0x936>
 800c8a2:	e091      	b.n	800c9c8 <_dtoa_r+0x9a8>
 800c8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8aa:	e758      	b.n	800c75e <_dtoa_r+0x73e>
 800c8ac:	9b04      	ldr	r3, [sp, #16]
 800c8ae:	1e5e      	subs	r6, r3, #1
 800c8b0:	9b08      	ldr	r3, [sp, #32]
 800c8b2:	42b3      	cmp	r3, r6
 800c8b4:	bfbf      	itttt	lt
 800c8b6:	9b08      	ldrlt	r3, [sp, #32]
 800c8b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c8ba:	9608      	strlt	r6, [sp, #32]
 800c8bc:	1af3      	sublt	r3, r6, r3
 800c8be:	bfb4      	ite	lt
 800c8c0:	18d2      	addlt	r2, r2, r3
 800c8c2:	1b9e      	subge	r6, r3, r6
 800c8c4:	9b04      	ldr	r3, [sp, #16]
 800c8c6:	bfbc      	itt	lt
 800c8c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c8ca:	2600      	movlt	r6, #0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	bfb7      	itett	lt
 800c8d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c8d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c8d8:	1a9d      	sublt	r5, r3, r2
 800c8da:	2300      	movlt	r3, #0
 800c8dc:	e741      	b.n	800c762 <_dtoa_r+0x742>
 800c8de:	9e08      	ldr	r6, [sp, #32]
 800c8e0:	9d05      	ldr	r5, [sp, #20]
 800c8e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c8e4:	e748      	b.n	800c778 <_dtoa_r+0x758>
 800c8e6:	9a08      	ldr	r2, [sp, #32]
 800c8e8:	e770      	b.n	800c7cc <_dtoa_r+0x7ac>
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	dc19      	bgt.n	800c924 <_dtoa_r+0x904>
 800c8f0:	9b02      	ldr	r3, [sp, #8]
 800c8f2:	b9bb      	cbnz	r3, 800c924 <_dtoa_r+0x904>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8fa:	b99b      	cbnz	r3, 800c924 <_dtoa_r+0x904>
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c902:	0d1b      	lsrs	r3, r3, #20
 800c904:	051b      	lsls	r3, r3, #20
 800c906:	b183      	cbz	r3, 800c92a <_dtoa_r+0x90a>
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	3301      	adds	r3, #1
 800c90c:	9305      	str	r3, [sp, #20]
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	3301      	adds	r3, #1
 800c912:	9306      	str	r3, [sp, #24]
 800c914:	f04f 0801 	mov.w	r8, #1
 800c918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f47f af6f 	bne.w	800c7fe <_dtoa_r+0x7de>
 800c920:	2001      	movs	r0, #1
 800c922:	e774      	b.n	800c80e <_dtoa_r+0x7ee>
 800c924:	f04f 0800 	mov.w	r8, #0
 800c928:	e7f6      	b.n	800c918 <_dtoa_r+0x8f8>
 800c92a:	4698      	mov	r8, r3
 800c92c:	e7f4      	b.n	800c918 <_dtoa_r+0x8f8>
 800c92e:	d082      	beq.n	800c836 <_dtoa_r+0x816>
 800c930:	9a05      	ldr	r2, [sp, #20]
 800c932:	331c      	adds	r3, #28
 800c934:	441a      	add	r2, r3
 800c936:	9205      	str	r2, [sp, #20]
 800c938:	9a06      	ldr	r2, [sp, #24]
 800c93a:	441a      	add	r2, r3
 800c93c:	441d      	add	r5, r3
 800c93e:	9206      	str	r2, [sp, #24]
 800c940:	e779      	b.n	800c836 <_dtoa_r+0x816>
 800c942:	4603      	mov	r3, r0
 800c944:	e7f4      	b.n	800c930 <_dtoa_r+0x910>
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc37      	bgt.n	800c9bc <_dtoa_r+0x99c>
 800c94c:	9b07      	ldr	r3, [sp, #28]
 800c94e:	2b02      	cmp	r3, #2
 800c950:	dd34      	ble.n	800c9bc <_dtoa_r+0x99c>
 800c952:	9b04      	ldr	r3, [sp, #16]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	b963      	cbnz	r3, 800c974 <_dtoa_r+0x954>
 800c95a:	4631      	mov	r1, r6
 800c95c:	2205      	movs	r2, #5
 800c95e:	4620      	mov	r0, r4
 800c960:	f000 fab2 	bl	800cec8 <__multadd>
 800c964:	4601      	mov	r1, r0
 800c966:	4606      	mov	r6, r0
 800c968:	4650      	mov	r0, sl
 800c96a:	f000 fcc7 	bl	800d2fc <__mcmp>
 800c96e:	2800      	cmp	r0, #0
 800c970:	f73f adbb 	bgt.w	800c4ea <_dtoa_r+0x4ca>
 800c974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c976:	9d00      	ldr	r5, [sp, #0]
 800c978:	ea6f 0b03 	mvn.w	fp, r3
 800c97c:	f04f 0800 	mov.w	r8, #0
 800c980:	4631      	mov	r1, r6
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fa7e 	bl	800ce84 <_Bfree>
 800c988:	2f00      	cmp	r7, #0
 800c98a:	f43f aeab 	beq.w	800c6e4 <_dtoa_r+0x6c4>
 800c98e:	f1b8 0f00 	cmp.w	r8, #0
 800c992:	d005      	beq.n	800c9a0 <_dtoa_r+0x980>
 800c994:	45b8      	cmp	r8, r7
 800c996:	d003      	beq.n	800c9a0 <_dtoa_r+0x980>
 800c998:	4641      	mov	r1, r8
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fa72 	bl	800ce84 <_Bfree>
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 fa6e 	bl	800ce84 <_Bfree>
 800c9a8:	e69c      	b.n	800c6e4 <_dtoa_r+0x6c4>
 800c9aa:	2600      	movs	r6, #0
 800c9ac:	4637      	mov	r7, r6
 800c9ae:	e7e1      	b.n	800c974 <_dtoa_r+0x954>
 800c9b0:	46bb      	mov	fp, r7
 800c9b2:	4637      	mov	r7, r6
 800c9b4:	e599      	b.n	800c4ea <_dtoa_r+0x4ca>
 800c9b6:	bf00      	nop
 800c9b8:	40240000 	.word	0x40240000
 800c9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 80c8 	beq.w	800cb54 <_dtoa_r+0xb34>
 800c9c4:	9b04      	ldr	r3, [sp, #16]
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	2d00      	cmp	r5, #0
 800c9ca:	dd05      	ble.n	800c9d8 <_dtoa_r+0x9b8>
 800c9cc:	4639      	mov	r1, r7
 800c9ce:	462a      	mov	r2, r5
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fc27 	bl	800d224 <__lshift>
 800c9d6:	4607      	mov	r7, r0
 800c9d8:	f1b8 0f00 	cmp.w	r8, #0
 800c9dc:	d05b      	beq.n	800ca96 <_dtoa_r+0xa76>
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fa0f 	bl	800ce04 <_Balloc>
 800c9e6:	4605      	mov	r5, r0
 800c9e8:	b928      	cbnz	r0, 800c9f6 <_dtoa_r+0x9d6>
 800c9ea:	4b83      	ldr	r3, [pc, #524]	; (800cbf8 <_dtoa_r+0xbd8>)
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c9f2:	f7ff bb2e 	b.w	800c052 <_dtoa_r+0x32>
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	3202      	adds	r2, #2
 800c9fa:	0092      	lsls	r2, r2, #2
 800c9fc:	f107 010c 	add.w	r1, r7, #12
 800ca00:	300c      	adds	r0, #12
 800ca02:	f7ff fa74 	bl	800beee <memcpy>
 800ca06:	2201      	movs	r2, #1
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f000 fc0a 	bl	800d224 <__lshift>
 800ca10:	9b00      	ldr	r3, [sp, #0]
 800ca12:	3301      	adds	r3, #1
 800ca14:	9304      	str	r3, [sp, #16]
 800ca16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	9308      	str	r3, [sp, #32]
 800ca1e:	9b02      	ldr	r3, [sp, #8]
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	46b8      	mov	r8, r7
 800ca26:	9306      	str	r3, [sp, #24]
 800ca28:	4607      	mov	r7, r0
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4650      	mov	r0, sl
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	f7ff fa69 	bl	800bf0a <quorem>
 800ca38:	4641      	mov	r1, r8
 800ca3a:	9002      	str	r0, [sp, #8]
 800ca3c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ca40:	4650      	mov	r0, sl
 800ca42:	f000 fc5b 	bl	800d2fc <__mcmp>
 800ca46:	463a      	mov	r2, r7
 800ca48:	9005      	str	r0, [sp, #20]
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fc71 	bl	800d334 <__mdiff>
 800ca52:	68c2      	ldr	r2, [r0, #12]
 800ca54:	4605      	mov	r5, r0
 800ca56:	bb02      	cbnz	r2, 800ca9a <_dtoa_r+0xa7a>
 800ca58:	4601      	mov	r1, r0
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	f000 fc4e 	bl	800d2fc <__mcmp>
 800ca60:	4602      	mov	r2, r0
 800ca62:	4629      	mov	r1, r5
 800ca64:	4620      	mov	r0, r4
 800ca66:	9209      	str	r2, [sp, #36]	; 0x24
 800ca68:	f000 fa0c 	bl	800ce84 <_Bfree>
 800ca6c:	9b07      	ldr	r3, [sp, #28]
 800ca6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca70:	9d04      	ldr	r5, [sp, #16]
 800ca72:	ea43 0102 	orr.w	r1, r3, r2
 800ca76:	9b06      	ldr	r3, [sp, #24]
 800ca78:	4319      	orrs	r1, r3
 800ca7a:	d110      	bne.n	800ca9e <_dtoa_r+0xa7e>
 800ca7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca80:	d029      	beq.n	800cad6 <_dtoa_r+0xab6>
 800ca82:	9b05      	ldr	r3, [sp, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dd02      	ble.n	800ca8e <_dtoa_r+0xa6e>
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	f883 9000 	strb.w	r9, [r3]
 800ca94:	e774      	b.n	800c980 <_dtoa_r+0x960>
 800ca96:	4638      	mov	r0, r7
 800ca98:	e7ba      	b.n	800ca10 <_dtoa_r+0x9f0>
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	e7e1      	b.n	800ca62 <_dtoa_r+0xa42>
 800ca9e:	9b05      	ldr	r3, [sp, #20]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	db04      	blt.n	800caae <_dtoa_r+0xa8e>
 800caa4:	9907      	ldr	r1, [sp, #28]
 800caa6:	430b      	orrs	r3, r1
 800caa8:	9906      	ldr	r1, [sp, #24]
 800caaa:	430b      	orrs	r3, r1
 800caac:	d120      	bne.n	800caf0 <_dtoa_r+0xad0>
 800caae:	2a00      	cmp	r2, #0
 800cab0:	dded      	ble.n	800ca8e <_dtoa_r+0xa6e>
 800cab2:	4651      	mov	r1, sl
 800cab4:	2201      	movs	r2, #1
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 fbb4 	bl	800d224 <__lshift>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4682      	mov	sl, r0
 800cac0:	f000 fc1c 	bl	800d2fc <__mcmp>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	dc03      	bgt.n	800cad0 <_dtoa_r+0xab0>
 800cac8:	d1e1      	bne.n	800ca8e <_dtoa_r+0xa6e>
 800caca:	f019 0f01 	tst.w	r9, #1
 800cace:	d0de      	beq.n	800ca8e <_dtoa_r+0xa6e>
 800cad0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cad4:	d1d8      	bne.n	800ca88 <_dtoa_r+0xa68>
 800cad6:	9a01      	ldr	r2, [sp, #4]
 800cad8:	2339      	movs	r3, #57	; 0x39
 800cada:	7013      	strb	r3, [r2, #0]
 800cadc:	462b      	mov	r3, r5
 800cade:	461d      	mov	r5, r3
 800cae0:	3b01      	subs	r3, #1
 800cae2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cae6:	2a39      	cmp	r2, #57	; 0x39
 800cae8:	d06c      	beq.n	800cbc4 <_dtoa_r+0xba4>
 800caea:	3201      	adds	r2, #1
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	e747      	b.n	800c980 <_dtoa_r+0x960>
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	dd07      	ble.n	800cb04 <_dtoa_r+0xae4>
 800caf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800caf8:	d0ed      	beq.n	800cad6 <_dtoa_r+0xab6>
 800cafa:	9a01      	ldr	r2, [sp, #4]
 800cafc:	f109 0301 	add.w	r3, r9, #1
 800cb00:	7013      	strb	r3, [r2, #0]
 800cb02:	e73d      	b.n	800c980 <_dtoa_r+0x960>
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	9a08      	ldr	r2, [sp, #32]
 800cb08:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d043      	beq.n	800cb98 <_dtoa_r+0xb78>
 800cb10:	4651      	mov	r1, sl
 800cb12:	2300      	movs	r3, #0
 800cb14:	220a      	movs	r2, #10
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 f9d6 	bl	800cec8 <__multadd>
 800cb1c:	45b8      	cmp	r8, r7
 800cb1e:	4682      	mov	sl, r0
 800cb20:	f04f 0300 	mov.w	r3, #0
 800cb24:	f04f 020a 	mov.w	r2, #10
 800cb28:	4641      	mov	r1, r8
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	d107      	bne.n	800cb3e <_dtoa_r+0xb1e>
 800cb2e:	f000 f9cb 	bl	800cec8 <__multadd>
 800cb32:	4680      	mov	r8, r0
 800cb34:	4607      	mov	r7, r0
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	9304      	str	r3, [sp, #16]
 800cb3c:	e775      	b.n	800ca2a <_dtoa_r+0xa0a>
 800cb3e:	f000 f9c3 	bl	800cec8 <__multadd>
 800cb42:	4639      	mov	r1, r7
 800cb44:	4680      	mov	r8, r0
 800cb46:	2300      	movs	r3, #0
 800cb48:	220a      	movs	r2, #10
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f9bc 	bl	800cec8 <__multadd>
 800cb50:	4607      	mov	r7, r0
 800cb52:	e7f0      	b.n	800cb36 <_dtoa_r+0xb16>
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	9d00      	ldr	r5, [sp, #0]
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	f7ff f9d4 	bl	800bf0a <quorem>
 800cb62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb66:	9b00      	ldr	r3, [sp, #0]
 800cb68:	f805 9b01 	strb.w	r9, [r5], #1
 800cb6c:	1aea      	subs	r2, r5, r3
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	4293      	cmp	r3, r2
 800cb72:	dd07      	ble.n	800cb84 <_dtoa_r+0xb64>
 800cb74:	4651      	mov	r1, sl
 800cb76:	2300      	movs	r3, #0
 800cb78:	220a      	movs	r2, #10
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 f9a4 	bl	800cec8 <__multadd>
 800cb80:	4682      	mov	sl, r0
 800cb82:	e7ea      	b.n	800cb5a <_dtoa_r+0xb3a>
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfc8      	it	gt
 800cb8a:	461d      	movgt	r5, r3
 800cb8c:	9b00      	ldr	r3, [sp, #0]
 800cb8e:	bfd8      	it	le
 800cb90:	2501      	movle	r5, #1
 800cb92:	441d      	add	r5, r3
 800cb94:	f04f 0800 	mov.w	r8, #0
 800cb98:	4651      	mov	r1, sl
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fb41 	bl	800d224 <__lshift>
 800cba2:	4631      	mov	r1, r6
 800cba4:	4682      	mov	sl, r0
 800cba6:	f000 fba9 	bl	800d2fc <__mcmp>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	dc96      	bgt.n	800cadc <_dtoa_r+0xabc>
 800cbae:	d102      	bne.n	800cbb6 <_dtoa_r+0xb96>
 800cbb0:	f019 0f01 	tst.w	r9, #1
 800cbb4:	d192      	bne.n	800cadc <_dtoa_r+0xabc>
 800cbb6:	462b      	mov	r3, r5
 800cbb8:	461d      	mov	r5, r3
 800cbba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbbe:	2a30      	cmp	r2, #48	; 0x30
 800cbc0:	d0fa      	beq.n	800cbb8 <_dtoa_r+0xb98>
 800cbc2:	e6dd      	b.n	800c980 <_dtoa_r+0x960>
 800cbc4:	9a00      	ldr	r2, [sp, #0]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d189      	bne.n	800cade <_dtoa_r+0xabe>
 800cbca:	f10b 0b01 	add.w	fp, fp, #1
 800cbce:	2331      	movs	r3, #49	; 0x31
 800cbd0:	e796      	b.n	800cb00 <_dtoa_r+0xae0>
 800cbd2:	4b0a      	ldr	r3, [pc, #40]	; (800cbfc <_dtoa_r+0xbdc>)
 800cbd4:	f7ff ba99 	b.w	800c10a <_dtoa_r+0xea>
 800cbd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f47f aa6d 	bne.w	800c0ba <_dtoa_r+0x9a>
 800cbe0:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <_dtoa_r+0xbe0>)
 800cbe2:	f7ff ba92 	b.w	800c10a <_dtoa_r+0xea>
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dcb5      	bgt.n	800cb58 <_dtoa_r+0xb38>
 800cbec:	9b07      	ldr	r3, [sp, #28]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	f73f aeb1 	bgt.w	800c956 <_dtoa_r+0x936>
 800cbf4:	e7b0      	b.n	800cb58 <_dtoa_r+0xb38>
 800cbf6:	bf00      	nop
 800cbf8:	0800f22c 	.word	0x0800f22c
 800cbfc:	0800f18c 	.word	0x0800f18c
 800cc00:	0800f1b0 	.word	0x0800f1b0

0800cc04 <_free_r>:
 800cc04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc06:	2900      	cmp	r1, #0
 800cc08:	d044      	beq.n	800cc94 <_free_r+0x90>
 800cc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc0e:	9001      	str	r0, [sp, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f1a1 0404 	sub.w	r4, r1, #4
 800cc16:	bfb8      	it	lt
 800cc18:	18e4      	addlt	r4, r4, r3
 800cc1a:	f000 f8e7 	bl	800cdec <__malloc_lock>
 800cc1e:	4a1e      	ldr	r2, [pc, #120]	; (800cc98 <_free_r+0x94>)
 800cc20:	9801      	ldr	r0, [sp, #4]
 800cc22:	6813      	ldr	r3, [r2, #0]
 800cc24:	b933      	cbnz	r3, 800cc34 <_free_r+0x30>
 800cc26:	6063      	str	r3, [r4, #4]
 800cc28:	6014      	str	r4, [r2, #0]
 800cc2a:	b003      	add	sp, #12
 800cc2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc30:	f000 b8e2 	b.w	800cdf8 <__malloc_unlock>
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	d908      	bls.n	800cc4a <_free_r+0x46>
 800cc38:	6825      	ldr	r5, [r4, #0]
 800cc3a:	1961      	adds	r1, r4, r5
 800cc3c:	428b      	cmp	r3, r1
 800cc3e:	bf01      	itttt	eq
 800cc40:	6819      	ldreq	r1, [r3, #0]
 800cc42:	685b      	ldreq	r3, [r3, #4]
 800cc44:	1949      	addeq	r1, r1, r5
 800cc46:	6021      	streq	r1, [r4, #0]
 800cc48:	e7ed      	b.n	800cc26 <_free_r+0x22>
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	b10b      	cbz	r3, 800cc54 <_free_r+0x50>
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	d9fa      	bls.n	800cc4a <_free_r+0x46>
 800cc54:	6811      	ldr	r1, [r2, #0]
 800cc56:	1855      	adds	r5, r2, r1
 800cc58:	42a5      	cmp	r5, r4
 800cc5a:	d10b      	bne.n	800cc74 <_free_r+0x70>
 800cc5c:	6824      	ldr	r4, [r4, #0]
 800cc5e:	4421      	add	r1, r4
 800cc60:	1854      	adds	r4, r2, r1
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	6011      	str	r1, [r2, #0]
 800cc66:	d1e0      	bne.n	800cc2a <_free_r+0x26>
 800cc68:	681c      	ldr	r4, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	6053      	str	r3, [r2, #4]
 800cc6e:	440c      	add	r4, r1
 800cc70:	6014      	str	r4, [r2, #0]
 800cc72:	e7da      	b.n	800cc2a <_free_r+0x26>
 800cc74:	d902      	bls.n	800cc7c <_free_r+0x78>
 800cc76:	230c      	movs	r3, #12
 800cc78:	6003      	str	r3, [r0, #0]
 800cc7a:	e7d6      	b.n	800cc2a <_free_r+0x26>
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf04      	itt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	6063      	str	r3, [r4, #4]
 800cc8a:	bf04      	itt	eq
 800cc8c:	1949      	addeq	r1, r1, r5
 800cc8e:	6021      	streq	r1, [r4, #0]
 800cc90:	6054      	str	r4, [r2, #4]
 800cc92:	e7ca      	b.n	800cc2a <_free_r+0x26>
 800cc94:	b003      	add	sp, #12
 800cc96:	bd30      	pop	{r4, r5, pc}
 800cc98:	20001de8 	.word	0x20001de8

0800cc9c <malloc>:
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <malloc+0xc>)
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f000 b823 	b.w	800ccec <_malloc_r>
 800cca6:	bf00      	nop
 800cca8:	200005fc 	.word	0x200005fc

0800ccac <sbrk_aligned>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	4e0e      	ldr	r6, [pc, #56]	; (800cce8 <sbrk_aligned+0x3c>)
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	6831      	ldr	r1, [r6, #0]
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	b911      	cbnz	r1, 800ccbe <sbrk_aligned+0x12>
 800ccb8:	f000 fe40 	bl	800d93c <_sbrk_r>
 800ccbc:	6030      	str	r0, [r6, #0]
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f000 fe3b 	bl	800d93c <_sbrk_r>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	d00a      	beq.n	800cce0 <sbrk_aligned+0x34>
 800ccca:	1cc4      	adds	r4, r0, #3
 800cccc:	f024 0403 	bic.w	r4, r4, #3
 800ccd0:	42a0      	cmp	r0, r4
 800ccd2:	d007      	beq.n	800cce4 <sbrk_aligned+0x38>
 800ccd4:	1a21      	subs	r1, r4, r0
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f000 fe30 	bl	800d93c <_sbrk_r>
 800ccdc:	3001      	adds	r0, #1
 800ccde:	d101      	bne.n	800cce4 <sbrk_aligned+0x38>
 800cce0:	f04f 34ff 	mov.w	r4, #4294967295
 800cce4:	4620      	mov	r0, r4
 800cce6:	bd70      	pop	{r4, r5, r6, pc}
 800cce8:	20001dec 	.word	0x20001dec

0800ccec <_malloc_r>:
 800ccec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf0:	1ccd      	adds	r5, r1, #3
 800ccf2:	f025 0503 	bic.w	r5, r5, #3
 800ccf6:	3508      	adds	r5, #8
 800ccf8:	2d0c      	cmp	r5, #12
 800ccfa:	bf38      	it	cc
 800ccfc:	250c      	movcc	r5, #12
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	4607      	mov	r7, r0
 800cd02:	db01      	blt.n	800cd08 <_malloc_r+0x1c>
 800cd04:	42a9      	cmp	r1, r5
 800cd06:	d905      	bls.n	800cd14 <_malloc_r+0x28>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	2600      	movs	r6, #0
 800cd0e:	4630      	mov	r0, r6
 800cd10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cde8 <_malloc_r+0xfc>
 800cd18:	f000 f868 	bl	800cdec <__malloc_lock>
 800cd1c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd20:	461c      	mov	r4, r3
 800cd22:	bb5c      	cbnz	r4, 800cd7c <_malloc_r+0x90>
 800cd24:	4629      	mov	r1, r5
 800cd26:	4638      	mov	r0, r7
 800cd28:	f7ff ffc0 	bl	800ccac <sbrk_aligned>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	4604      	mov	r4, r0
 800cd30:	d155      	bne.n	800cdde <_malloc_r+0xf2>
 800cd32:	f8d8 4000 	ldr.w	r4, [r8]
 800cd36:	4626      	mov	r6, r4
 800cd38:	2e00      	cmp	r6, #0
 800cd3a:	d145      	bne.n	800cdc8 <_malloc_r+0xdc>
 800cd3c:	2c00      	cmp	r4, #0
 800cd3e:	d048      	beq.n	800cdd2 <_malloc_r+0xe6>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	4631      	mov	r1, r6
 800cd44:	4638      	mov	r0, r7
 800cd46:	eb04 0903 	add.w	r9, r4, r3
 800cd4a:	f000 fdf7 	bl	800d93c <_sbrk_r>
 800cd4e:	4581      	cmp	r9, r0
 800cd50:	d13f      	bne.n	800cdd2 <_malloc_r+0xe6>
 800cd52:	6821      	ldr	r1, [r4, #0]
 800cd54:	1a6d      	subs	r5, r5, r1
 800cd56:	4629      	mov	r1, r5
 800cd58:	4638      	mov	r0, r7
 800cd5a:	f7ff ffa7 	bl	800ccac <sbrk_aligned>
 800cd5e:	3001      	adds	r0, #1
 800cd60:	d037      	beq.n	800cdd2 <_malloc_r+0xe6>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	442b      	add	r3, r5
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d038      	beq.n	800cde2 <_malloc_r+0xf6>
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	42a2      	cmp	r2, r4
 800cd74:	d12b      	bne.n	800cdce <_malloc_r+0xe2>
 800cd76:	2200      	movs	r2, #0
 800cd78:	605a      	str	r2, [r3, #4]
 800cd7a:	e00f      	b.n	800cd9c <_malloc_r+0xb0>
 800cd7c:	6822      	ldr	r2, [r4, #0]
 800cd7e:	1b52      	subs	r2, r2, r5
 800cd80:	d41f      	bmi.n	800cdc2 <_malloc_r+0xd6>
 800cd82:	2a0b      	cmp	r2, #11
 800cd84:	d917      	bls.n	800cdb6 <_malloc_r+0xca>
 800cd86:	1961      	adds	r1, r4, r5
 800cd88:	42a3      	cmp	r3, r4
 800cd8a:	6025      	str	r5, [r4, #0]
 800cd8c:	bf18      	it	ne
 800cd8e:	6059      	strne	r1, [r3, #4]
 800cd90:	6863      	ldr	r3, [r4, #4]
 800cd92:	bf08      	it	eq
 800cd94:	f8c8 1000 	streq.w	r1, [r8]
 800cd98:	5162      	str	r2, [r4, r5]
 800cd9a:	604b      	str	r3, [r1, #4]
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f104 060b 	add.w	r6, r4, #11
 800cda2:	f000 f829 	bl	800cdf8 <__malloc_unlock>
 800cda6:	f026 0607 	bic.w	r6, r6, #7
 800cdaa:	1d23      	adds	r3, r4, #4
 800cdac:	1af2      	subs	r2, r6, r3
 800cdae:	d0ae      	beq.n	800cd0e <_malloc_r+0x22>
 800cdb0:	1b9b      	subs	r3, r3, r6
 800cdb2:	50a3      	str	r3, [r4, r2]
 800cdb4:	e7ab      	b.n	800cd0e <_malloc_r+0x22>
 800cdb6:	42a3      	cmp	r3, r4
 800cdb8:	6862      	ldr	r2, [r4, #4]
 800cdba:	d1dd      	bne.n	800cd78 <_malloc_r+0x8c>
 800cdbc:	f8c8 2000 	str.w	r2, [r8]
 800cdc0:	e7ec      	b.n	800cd9c <_malloc_r+0xb0>
 800cdc2:	4623      	mov	r3, r4
 800cdc4:	6864      	ldr	r4, [r4, #4]
 800cdc6:	e7ac      	b.n	800cd22 <_malloc_r+0x36>
 800cdc8:	4634      	mov	r4, r6
 800cdca:	6876      	ldr	r6, [r6, #4]
 800cdcc:	e7b4      	b.n	800cd38 <_malloc_r+0x4c>
 800cdce:	4613      	mov	r3, r2
 800cdd0:	e7cc      	b.n	800cd6c <_malloc_r+0x80>
 800cdd2:	230c      	movs	r3, #12
 800cdd4:	603b      	str	r3, [r7, #0]
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f000 f80e 	bl	800cdf8 <__malloc_unlock>
 800cddc:	e797      	b.n	800cd0e <_malloc_r+0x22>
 800cdde:	6025      	str	r5, [r4, #0]
 800cde0:	e7dc      	b.n	800cd9c <_malloc_r+0xb0>
 800cde2:	605b      	str	r3, [r3, #4]
 800cde4:	deff      	udf	#255	; 0xff
 800cde6:	bf00      	nop
 800cde8:	20001de8 	.word	0x20001de8

0800cdec <__malloc_lock>:
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <__malloc_lock+0x8>)
 800cdee:	f7ff b87c 	b.w	800beea <__retarget_lock_acquire_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	20001de4 	.word	0x20001de4

0800cdf8 <__malloc_unlock>:
 800cdf8:	4801      	ldr	r0, [pc, #4]	; (800ce00 <__malloc_unlock+0x8>)
 800cdfa:	f7ff b877 	b.w	800beec <__retarget_lock_release_recursive>
 800cdfe:	bf00      	nop
 800ce00:	20001de4 	.word	0x20001de4

0800ce04 <_Balloc>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	69c6      	ldr	r6, [r0, #28]
 800ce08:	4604      	mov	r4, r0
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	b976      	cbnz	r6, 800ce2c <_Balloc+0x28>
 800ce0e:	2010      	movs	r0, #16
 800ce10:	f7ff ff44 	bl	800cc9c <malloc>
 800ce14:	4602      	mov	r2, r0
 800ce16:	61e0      	str	r0, [r4, #28]
 800ce18:	b920      	cbnz	r0, 800ce24 <_Balloc+0x20>
 800ce1a:	4b18      	ldr	r3, [pc, #96]	; (800ce7c <_Balloc+0x78>)
 800ce1c:	4818      	ldr	r0, [pc, #96]	; (800ce80 <_Balloc+0x7c>)
 800ce1e:	216b      	movs	r1, #107	; 0x6b
 800ce20:	f000 fd9c 	bl	800d95c <__assert_func>
 800ce24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce28:	6006      	str	r6, [r0, #0]
 800ce2a:	60c6      	str	r6, [r0, #12]
 800ce2c:	69e6      	ldr	r6, [r4, #28]
 800ce2e:	68f3      	ldr	r3, [r6, #12]
 800ce30:	b183      	cbz	r3, 800ce54 <_Balloc+0x50>
 800ce32:	69e3      	ldr	r3, [r4, #28]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce3a:	b9b8      	cbnz	r0, 800ce6c <_Balloc+0x68>
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	fa01 f605 	lsl.w	r6, r1, r5
 800ce42:	1d72      	adds	r2, r6, #5
 800ce44:	0092      	lsls	r2, r2, #2
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 fda6 	bl	800d998 <_calloc_r>
 800ce4c:	b160      	cbz	r0, 800ce68 <_Balloc+0x64>
 800ce4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce52:	e00e      	b.n	800ce72 <_Balloc+0x6e>
 800ce54:	2221      	movs	r2, #33	; 0x21
 800ce56:	2104      	movs	r1, #4
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 fd9d 	bl	800d998 <_calloc_r>
 800ce5e:	69e3      	ldr	r3, [r4, #28]
 800ce60:	60f0      	str	r0, [r6, #12]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1e4      	bne.n	800ce32 <_Balloc+0x2e>
 800ce68:	2000      	movs	r0, #0
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	6802      	ldr	r2, [r0, #0]
 800ce6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce72:	2300      	movs	r3, #0
 800ce74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce78:	e7f7      	b.n	800ce6a <_Balloc+0x66>
 800ce7a:	bf00      	nop
 800ce7c:	0800f1bd 	.word	0x0800f1bd
 800ce80:	0800f23d 	.word	0x0800f23d

0800ce84 <_Bfree>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	69c6      	ldr	r6, [r0, #28]
 800ce88:	4605      	mov	r5, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	b976      	cbnz	r6, 800ceac <_Bfree+0x28>
 800ce8e:	2010      	movs	r0, #16
 800ce90:	f7ff ff04 	bl	800cc9c <malloc>
 800ce94:	4602      	mov	r2, r0
 800ce96:	61e8      	str	r0, [r5, #28]
 800ce98:	b920      	cbnz	r0, 800cea4 <_Bfree+0x20>
 800ce9a:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <_Bfree+0x3c>)
 800ce9c:	4809      	ldr	r0, [pc, #36]	; (800cec4 <_Bfree+0x40>)
 800ce9e:	218f      	movs	r1, #143	; 0x8f
 800cea0:	f000 fd5c 	bl	800d95c <__assert_func>
 800cea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cea8:	6006      	str	r6, [r0, #0]
 800ceaa:	60c6      	str	r6, [r0, #12]
 800ceac:	b13c      	cbz	r4, 800cebe <_Bfree+0x3a>
 800ceae:	69eb      	ldr	r3, [r5, #28]
 800ceb0:	6862      	ldr	r2, [r4, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceb8:	6021      	str	r1, [r4, #0]
 800ceba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	0800f1bd 	.word	0x0800f1bd
 800cec4:	0800f23d 	.word	0x0800f23d

0800cec8 <__multadd>:
 800cec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cecc:	690d      	ldr	r5, [r1, #16]
 800cece:	4607      	mov	r7, r0
 800ced0:	460c      	mov	r4, r1
 800ced2:	461e      	mov	r6, r3
 800ced4:	f101 0c14 	add.w	ip, r1, #20
 800ced8:	2000      	movs	r0, #0
 800ceda:	f8dc 3000 	ldr.w	r3, [ip]
 800cede:	b299      	uxth	r1, r3
 800cee0:	fb02 6101 	mla	r1, r2, r1, r6
 800cee4:	0c1e      	lsrs	r6, r3, #16
 800cee6:	0c0b      	lsrs	r3, r1, #16
 800cee8:	fb02 3306 	mla	r3, r2, r6, r3
 800ceec:	b289      	uxth	r1, r1
 800ceee:	3001      	adds	r0, #1
 800cef0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cef4:	4285      	cmp	r5, r0
 800cef6:	f84c 1b04 	str.w	r1, [ip], #4
 800cefa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cefe:	dcec      	bgt.n	800ceda <__multadd+0x12>
 800cf00:	b30e      	cbz	r6, 800cf46 <__multadd+0x7e>
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	42ab      	cmp	r3, r5
 800cf06:	dc19      	bgt.n	800cf3c <__multadd+0x74>
 800cf08:	6861      	ldr	r1, [r4, #4]
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	3101      	adds	r1, #1
 800cf0e:	f7ff ff79 	bl	800ce04 <_Balloc>
 800cf12:	4680      	mov	r8, r0
 800cf14:	b928      	cbnz	r0, 800cf22 <__multadd+0x5a>
 800cf16:	4602      	mov	r2, r0
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <__multadd+0x84>)
 800cf1a:	480d      	ldr	r0, [pc, #52]	; (800cf50 <__multadd+0x88>)
 800cf1c:	21ba      	movs	r1, #186	; 0xba
 800cf1e:	f000 fd1d 	bl	800d95c <__assert_func>
 800cf22:	6922      	ldr	r2, [r4, #16]
 800cf24:	3202      	adds	r2, #2
 800cf26:	f104 010c 	add.w	r1, r4, #12
 800cf2a:	0092      	lsls	r2, r2, #2
 800cf2c:	300c      	adds	r0, #12
 800cf2e:	f7fe ffde 	bl	800beee <memcpy>
 800cf32:	4621      	mov	r1, r4
 800cf34:	4638      	mov	r0, r7
 800cf36:	f7ff ffa5 	bl	800ce84 <_Bfree>
 800cf3a:	4644      	mov	r4, r8
 800cf3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf40:	3501      	adds	r5, #1
 800cf42:	615e      	str	r6, [r3, #20]
 800cf44:	6125      	str	r5, [r4, #16]
 800cf46:	4620      	mov	r0, r4
 800cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4c:	0800f22c 	.word	0x0800f22c
 800cf50:	0800f23d 	.word	0x0800f23d

0800cf54 <__hi0bits>:
 800cf54:	0c03      	lsrs	r3, r0, #16
 800cf56:	041b      	lsls	r3, r3, #16
 800cf58:	b9d3      	cbnz	r3, 800cf90 <__hi0bits+0x3c>
 800cf5a:	0400      	lsls	r0, r0, #16
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf62:	bf04      	itt	eq
 800cf64:	0200      	lsleq	r0, r0, #8
 800cf66:	3308      	addeq	r3, #8
 800cf68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf6c:	bf04      	itt	eq
 800cf6e:	0100      	lsleq	r0, r0, #4
 800cf70:	3304      	addeq	r3, #4
 800cf72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf76:	bf04      	itt	eq
 800cf78:	0080      	lsleq	r0, r0, #2
 800cf7a:	3302      	addeq	r3, #2
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	db05      	blt.n	800cf8c <__hi0bits+0x38>
 800cf80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf84:	f103 0301 	add.w	r3, r3, #1
 800cf88:	bf08      	it	eq
 800cf8a:	2320      	moveq	r3, #32
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	4770      	bx	lr
 800cf90:	2300      	movs	r3, #0
 800cf92:	e7e4      	b.n	800cf5e <__hi0bits+0xa>

0800cf94 <__lo0bits>:
 800cf94:	6803      	ldr	r3, [r0, #0]
 800cf96:	f013 0207 	ands.w	r2, r3, #7
 800cf9a:	d00c      	beq.n	800cfb6 <__lo0bits+0x22>
 800cf9c:	07d9      	lsls	r1, r3, #31
 800cf9e:	d422      	bmi.n	800cfe6 <__lo0bits+0x52>
 800cfa0:	079a      	lsls	r2, r3, #30
 800cfa2:	bf49      	itett	mi
 800cfa4:	085b      	lsrmi	r3, r3, #1
 800cfa6:	089b      	lsrpl	r3, r3, #2
 800cfa8:	6003      	strmi	r3, [r0, #0]
 800cfaa:	2201      	movmi	r2, #1
 800cfac:	bf5c      	itt	pl
 800cfae:	6003      	strpl	r3, [r0, #0]
 800cfb0:	2202      	movpl	r2, #2
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4770      	bx	lr
 800cfb6:	b299      	uxth	r1, r3
 800cfb8:	b909      	cbnz	r1, 800cfbe <__lo0bits+0x2a>
 800cfba:	0c1b      	lsrs	r3, r3, #16
 800cfbc:	2210      	movs	r2, #16
 800cfbe:	b2d9      	uxtb	r1, r3
 800cfc0:	b909      	cbnz	r1, 800cfc6 <__lo0bits+0x32>
 800cfc2:	3208      	adds	r2, #8
 800cfc4:	0a1b      	lsrs	r3, r3, #8
 800cfc6:	0719      	lsls	r1, r3, #28
 800cfc8:	bf04      	itt	eq
 800cfca:	091b      	lsreq	r3, r3, #4
 800cfcc:	3204      	addeq	r2, #4
 800cfce:	0799      	lsls	r1, r3, #30
 800cfd0:	bf04      	itt	eq
 800cfd2:	089b      	lsreq	r3, r3, #2
 800cfd4:	3202      	addeq	r2, #2
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d403      	bmi.n	800cfe2 <__lo0bits+0x4e>
 800cfda:	085b      	lsrs	r3, r3, #1
 800cfdc:	f102 0201 	add.w	r2, r2, #1
 800cfe0:	d003      	beq.n	800cfea <__lo0bits+0x56>
 800cfe2:	6003      	str	r3, [r0, #0]
 800cfe4:	e7e5      	b.n	800cfb2 <__lo0bits+0x1e>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	e7e3      	b.n	800cfb2 <__lo0bits+0x1e>
 800cfea:	2220      	movs	r2, #32
 800cfec:	e7e1      	b.n	800cfb2 <__lo0bits+0x1e>
	...

0800cff0 <__i2b>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	460c      	mov	r4, r1
 800cff4:	2101      	movs	r1, #1
 800cff6:	f7ff ff05 	bl	800ce04 <_Balloc>
 800cffa:	4602      	mov	r2, r0
 800cffc:	b928      	cbnz	r0, 800d00a <__i2b+0x1a>
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <__i2b+0x24>)
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <__i2b+0x28>)
 800d002:	f240 1145 	movw	r1, #325	; 0x145
 800d006:	f000 fca9 	bl	800d95c <__assert_func>
 800d00a:	2301      	movs	r3, #1
 800d00c:	6144      	str	r4, [r0, #20]
 800d00e:	6103      	str	r3, [r0, #16]
 800d010:	bd10      	pop	{r4, pc}
 800d012:	bf00      	nop
 800d014:	0800f22c 	.word	0x0800f22c
 800d018:	0800f23d 	.word	0x0800f23d

0800d01c <__multiply>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	4691      	mov	r9, r2
 800d022:	690a      	ldr	r2, [r1, #16]
 800d024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d028:	429a      	cmp	r2, r3
 800d02a:	bfb8      	it	lt
 800d02c:	460b      	movlt	r3, r1
 800d02e:	460c      	mov	r4, r1
 800d030:	bfbc      	itt	lt
 800d032:	464c      	movlt	r4, r9
 800d034:	4699      	movlt	r9, r3
 800d036:	6927      	ldr	r7, [r4, #16]
 800d038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	6861      	ldr	r1, [r4, #4]
 800d040:	eb07 060a 	add.w	r6, r7, sl
 800d044:	42b3      	cmp	r3, r6
 800d046:	b085      	sub	sp, #20
 800d048:	bfb8      	it	lt
 800d04a:	3101      	addlt	r1, #1
 800d04c:	f7ff feda 	bl	800ce04 <_Balloc>
 800d050:	b930      	cbnz	r0, 800d060 <__multiply+0x44>
 800d052:	4602      	mov	r2, r0
 800d054:	4b44      	ldr	r3, [pc, #272]	; (800d168 <__multiply+0x14c>)
 800d056:	4845      	ldr	r0, [pc, #276]	; (800d16c <__multiply+0x150>)
 800d058:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d05c:	f000 fc7e 	bl	800d95c <__assert_func>
 800d060:	f100 0514 	add.w	r5, r0, #20
 800d064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d068:	462b      	mov	r3, r5
 800d06a:	2200      	movs	r2, #0
 800d06c:	4543      	cmp	r3, r8
 800d06e:	d321      	bcc.n	800d0b4 <__multiply+0x98>
 800d070:	f104 0314 	add.w	r3, r4, #20
 800d074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d078:	f109 0314 	add.w	r3, r9, #20
 800d07c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	1b3a      	subs	r2, r7, r4
 800d084:	3a15      	subs	r2, #21
 800d086:	f022 0203 	bic.w	r2, r2, #3
 800d08a:	3204      	adds	r2, #4
 800d08c:	f104 0115 	add.w	r1, r4, #21
 800d090:	428f      	cmp	r7, r1
 800d092:	bf38      	it	cc
 800d094:	2204      	movcc	r2, #4
 800d096:	9201      	str	r2, [sp, #4]
 800d098:	9a02      	ldr	r2, [sp, #8]
 800d09a:	9303      	str	r3, [sp, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d80c      	bhi.n	800d0ba <__multiply+0x9e>
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	dd03      	ble.n	800d0ac <__multiply+0x90>
 800d0a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d05b      	beq.n	800d164 <__multiply+0x148>
 800d0ac:	6106      	str	r6, [r0, #16]
 800d0ae:	b005      	add	sp, #20
 800d0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	f843 2b04 	str.w	r2, [r3], #4
 800d0b8:	e7d8      	b.n	800d06c <__multiply+0x50>
 800d0ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0be:	f1ba 0f00 	cmp.w	sl, #0
 800d0c2:	d024      	beq.n	800d10e <__multiply+0xf2>
 800d0c4:	f104 0e14 	add.w	lr, r4, #20
 800d0c8:	46a9      	mov	r9, r5
 800d0ca:	f04f 0c00 	mov.w	ip, #0
 800d0ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0d2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0d6:	fa1f fb82 	uxth.w	fp, r2
 800d0da:	b289      	uxth	r1, r1
 800d0dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0e8:	4461      	add	r1, ip
 800d0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800d0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d0f6:	b289      	uxth	r1, r1
 800d0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0fc:	4577      	cmp	r7, lr
 800d0fe:	f849 1b04 	str.w	r1, [r9], #4
 800d102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d106:	d8e2      	bhi.n	800d0ce <__multiply+0xb2>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	f845 c002 	str.w	ip, [r5, r2]
 800d10e:	9a03      	ldr	r2, [sp, #12]
 800d110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d114:	3304      	adds	r3, #4
 800d116:	f1b9 0f00 	cmp.w	r9, #0
 800d11a:	d021      	beq.n	800d160 <__multiply+0x144>
 800d11c:	6829      	ldr	r1, [r5, #0]
 800d11e:	f104 0c14 	add.w	ip, r4, #20
 800d122:	46ae      	mov	lr, r5
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	f8bc b000 	ldrh.w	fp, [ip]
 800d12c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d130:	fb09 220b 	mla	r2, r9, fp, r2
 800d134:	4452      	add	r2, sl
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d13c:	f84e 1b04 	str.w	r1, [lr], #4
 800d140:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d148:	f8be 1000 	ldrh.w	r1, [lr]
 800d14c:	fb09 110a 	mla	r1, r9, sl, r1
 800d150:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d154:	4567      	cmp	r7, ip
 800d156:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d15a:	d8e5      	bhi.n	800d128 <__multiply+0x10c>
 800d15c:	9a01      	ldr	r2, [sp, #4]
 800d15e:	50a9      	str	r1, [r5, r2]
 800d160:	3504      	adds	r5, #4
 800d162:	e799      	b.n	800d098 <__multiply+0x7c>
 800d164:	3e01      	subs	r6, #1
 800d166:	e79b      	b.n	800d0a0 <__multiply+0x84>
 800d168:	0800f22c 	.word	0x0800f22c
 800d16c:	0800f23d 	.word	0x0800f23d

0800d170 <__pow5mult>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4615      	mov	r5, r2
 800d176:	f012 0203 	ands.w	r2, r2, #3
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	d007      	beq.n	800d190 <__pow5mult+0x20>
 800d180:	4c25      	ldr	r4, [pc, #148]	; (800d218 <__pow5mult+0xa8>)
 800d182:	3a01      	subs	r2, #1
 800d184:	2300      	movs	r3, #0
 800d186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d18a:	f7ff fe9d 	bl	800cec8 <__multadd>
 800d18e:	4607      	mov	r7, r0
 800d190:	10ad      	asrs	r5, r5, #2
 800d192:	d03d      	beq.n	800d210 <__pow5mult+0xa0>
 800d194:	69f4      	ldr	r4, [r6, #28]
 800d196:	b97c      	cbnz	r4, 800d1b8 <__pow5mult+0x48>
 800d198:	2010      	movs	r0, #16
 800d19a:	f7ff fd7f 	bl	800cc9c <malloc>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	61f0      	str	r0, [r6, #28]
 800d1a2:	b928      	cbnz	r0, 800d1b0 <__pow5mult+0x40>
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <__pow5mult+0xac>)
 800d1a6:	481e      	ldr	r0, [pc, #120]	; (800d220 <__pow5mult+0xb0>)
 800d1a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d1ac:	f000 fbd6 	bl	800d95c <__assert_func>
 800d1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1b4:	6004      	str	r4, [r0, #0]
 800d1b6:	60c4      	str	r4, [r0, #12]
 800d1b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1c0:	b94c      	cbnz	r4, 800d1d6 <__pow5mult+0x66>
 800d1c2:	f240 2171 	movw	r1, #625	; 0x271
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f7ff ff12 	bl	800cff0 <__i2b>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	6003      	str	r3, [r0, #0]
 800d1d6:	f04f 0900 	mov.w	r9, #0
 800d1da:	07eb      	lsls	r3, r5, #31
 800d1dc:	d50a      	bpl.n	800d1f4 <__pow5mult+0x84>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff1a 	bl	800d01c <__multiply>
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff fe49 	bl	800ce84 <_Bfree>
 800d1f2:	4647      	mov	r7, r8
 800d1f4:	106d      	asrs	r5, r5, #1
 800d1f6:	d00b      	beq.n	800d210 <__pow5mult+0xa0>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	b938      	cbnz	r0, 800d20c <__pow5mult+0x9c>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4621      	mov	r1, r4
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff ff0b 	bl	800d01c <__multiply>
 800d206:	6020      	str	r0, [r4, #0]
 800d208:	f8c0 9000 	str.w	r9, [r0]
 800d20c:	4604      	mov	r4, r0
 800d20e:	e7e4      	b.n	800d1da <__pow5mult+0x6a>
 800d210:	4638      	mov	r0, r7
 800d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d216:	bf00      	nop
 800d218:	0800f388 	.word	0x0800f388
 800d21c:	0800f1bd 	.word	0x0800f1bd
 800d220:	0800f23d 	.word	0x0800f23d

0800d224 <__lshift>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	6849      	ldr	r1, [r1, #4]
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	4607      	mov	r7, r0
 800d236:	4691      	mov	r9, r2
 800d238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23c:	f108 0601 	add.w	r6, r8, #1
 800d240:	42b3      	cmp	r3, r6
 800d242:	db0b      	blt.n	800d25c <__lshift+0x38>
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff fddd 	bl	800ce04 <_Balloc>
 800d24a:	4605      	mov	r5, r0
 800d24c:	b948      	cbnz	r0, 800d262 <__lshift+0x3e>
 800d24e:	4602      	mov	r2, r0
 800d250:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <__lshift+0xd0>)
 800d252:	4829      	ldr	r0, [pc, #164]	; (800d2f8 <__lshift+0xd4>)
 800d254:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d258:	f000 fb80 	bl	800d95c <__assert_func>
 800d25c:	3101      	adds	r1, #1
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	e7ee      	b.n	800d240 <__lshift+0x1c>
 800d262:	2300      	movs	r3, #0
 800d264:	f100 0114 	add.w	r1, r0, #20
 800d268:	f100 0210 	add.w	r2, r0, #16
 800d26c:	4618      	mov	r0, r3
 800d26e:	4553      	cmp	r3, sl
 800d270:	db33      	blt.n	800d2da <__lshift+0xb6>
 800d272:	6920      	ldr	r0, [r4, #16]
 800d274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d278:	f104 0314 	add.w	r3, r4, #20
 800d27c:	f019 091f 	ands.w	r9, r9, #31
 800d280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d284:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d288:	d02b      	beq.n	800d2e2 <__lshift+0xbe>
 800d28a:	f1c9 0e20 	rsb	lr, r9, #32
 800d28e:	468a      	mov	sl, r1
 800d290:	2200      	movs	r2, #0
 800d292:	6818      	ldr	r0, [r3, #0]
 800d294:	fa00 f009 	lsl.w	r0, r0, r9
 800d298:	4310      	orrs	r0, r2
 800d29a:	f84a 0b04 	str.w	r0, [sl], #4
 800d29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a2:	459c      	cmp	ip, r3
 800d2a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2a8:	d8f3      	bhi.n	800d292 <__lshift+0x6e>
 800d2aa:	ebac 0304 	sub.w	r3, ip, r4
 800d2ae:	3b15      	subs	r3, #21
 800d2b0:	f023 0303 	bic.w	r3, r3, #3
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	f104 0015 	add.w	r0, r4, #21
 800d2ba:	4584      	cmp	ip, r0
 800d2bc:	bf38      	it	cc
 800d2be:	2304      	movcc	r3, #4
 800d2c0:	50ca      	str	r2, [r1, r3]
 800d2c2:	b10a      	cbz	r2, 800d2c8 <__lshift+0xa4>
 800d2c4:	f108 0602 	add.w	r6, r8, #2
 800d2c8:	3e01      	subs	r6, #1
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	612e      	str	r6, [r5, #16]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	f7ff fdd8 	bl	800ce84 <_Bfree>
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2de:	3301      	adds	r3, #1
 800d2e0:	e7c5      	b.n	800d26e <__lshift+0x4a>
 800d2e2:	3904      	subs	r1, #4
 800d2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2ec:	459c      	cmp	ip, r3
 800d2ee:	d8f9      	bhi.n	800d2e4 <__lshift+0xc0>
 800d2f0:	e7ea      	b.n	800d2c8 <__lshift+0xa4>
 800d2f2:	bf00      	nop
 800d2f4:	0800f22c 	.word	0x0800f22c
 800d2f8:	0800f23d 	.word	0x0800f23d

0800d2fc <__mcmp>:
 800d2fc:	b530      	push	{r4, r5, lr}
 800d2fe:	6902      	ldr	r2, [r0, #16]
 800d300:	690c      	ldr	r4, [r1, #16]
 800d302:	1b12      	subs	r2, r2, r4
 800d304:	d10e      	bne.n	800d324 <__mcmp+0x28>
 800d306:	f100 0314 	add.w	r3, r0, #20
 800d30a:	3114      	adds	r1, #20
 800d30c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d31c:	42a5      	cmp	r5, r4
 800d31e:	d003      	beq.n	800d328 <__mcmp+0x2c>
 800d320:	d305      	bcc.n	800d32e <__mcmp+0x32>
 800d322:	2201      	movs	r2, #1
 800d324:	4610      	mov	r0, r2
 800d326:	bd30      	pop	{r4, r5, pc}
 800d328:	4283      	cmp	r3, r0
 800d32a:	d3f3      	bcc.n	800d314 <__mcmp+0x18>
 800d32c:	e7fa      	b.n	800d324 <__mcmp+0x28>
 800d32e:	f04f 32ff 	mov.w	r2, #4294967295
 800d332:	e7f7      	b.n	800d324 <__mcmp+0x28>

0800d334 <__mdiff>:
 800d334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d338:	460c      	mov	r4, r1
 800d33a:	4606      	mov	r6, r0
 800d33c:	4611      	mov	r1, r2
 800d33e:	4620      	mov	r0, r4
 800d340:	4690      	mov	r8, r2
 800d342:	f7ff ffdb 	bl	800d2fc <__mcmp>
 800d346:	1e05      	subs	r5, r0, #0
 800d348:	d110      	bne.n	800d36c <__mdiff+0x38>
 800d34a:	4629      	mov	r1, r5
 800d34c:	4630      	mov	r0, r6
 800d34e:	f7ff fd59 	bl	800ce04 <_Balloc>
 800d352:	b930      	cbnz	r0, 800d362 <__mdiff+0x2e>
 800d354:	4b3a      	ldr	r3, [pc, #232]	; (800d440 <__mdiff+0x10c>)
 800d356:	4602      	mov	r2, r0
 800d358:	f240 2137 	movw	r1, #567	; 0x237
 800d35c:	4839      	ldr	r0, [pc, #228]	; (800d444 <__mdiff+0x110>)
 800d35e:	f000 fafd 	bl	800d95c <__assert_func>
 800d362:	2301      	movs	r3, #1
 800d364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36c:	bfa4      	itt	ge
 800d36e:	4643      	movge	r3, r8
 800d370:	46a0      	movge	r8, r4
 800d372:	4630      	mov	r0, r6
 800d374:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d378:	bfa6      	itte	ge
 800d37a:	461c      	movge	r4, r3
 800d37c:	2500      	movge	r5, #0
 800d37e:	2501      	movlt	r5, #1
 800d380:	f7ff fd40 	bl	800ce04 <_Balloc>
 800d384:	b920      	cbnz	r0, 800d390 <__mdiff+0x5c>
 800d386:	4b2e      	ldr	r3, [pc, #184]	; (800d440 <__mdiff+0x10c>)
 800d388:	4602      	mov	r2, r0
 800d38a:	f240 2145 	movw	r1, #581	; 0x245
 800d38e:	e7e5      	b.n	800d35c <__mdiff+0x28>
 800d390:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d394:	6926      	ldr	r6, [r4, #16]
 800d396:	60c5      	str	r5, [r0, #12]
 800d398:	f104 0914 	add.w	r9, r4, #20
 800d39c:	f108 0514 	add.w	r5, r8, #20
 800d3a0:	f100 0e14 	add.w	lr, r0, #20
 800d3a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3ac:	f108 0210 	add.w	r2, r8, #16
 800d3b0:	46f2      	mov	sl, lr
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3bc:	fa11 f88b 	uxtah	r8, r1, fp
 800d3c0:	b299      	uxth	r1, r3
 800d3c2:	0c1b      	lsrs	r3, r3, #16
 800d3c4:	eba8 0801 	sub.w	r8, r8, r1
 800d3c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3d0:	fa1f f888 	uxth.w	r8, r8
 800d3d4:	1419      	asrs	r1, r3, #16
 800d3d6:	454e      	cmp	r6, r9
 800d3d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3dc:	f84a 3b04 	str.w	r3, [sl], #4
 800d3e0:	d8e8      	bhi.n	800d3b4 <__mdiff+0x80>
 800d3e2:	1b33      	subs	r3, r6, r4
 800d3e4:	3b15      	subs	r3, #21
 800d3e6:	f023 0303 	bic.w	r3, r3, #3
 800d3ea:	3304      	adds	r3, #4
 800d3ec:	3415      	adds	r4, #21
 800d3ee:	42a6      	cmp	r6, r4
 800d3f0:	bf38      	it	cc
 800d3f2:	2304      	movcc	r3, #4
 800d3f4:	441d      	add	r5, r3
 800d3f6:	4473      	add	r3, lr
 800d3f8:	469e      	mov	lr, r3
 800d3fa:	462e      	mov	r6, r5
 800d3fc:	4566      	cmp	r6, ip
 800d3fe:	d30e      	bcc.n	800d41e <__mdiff+0xea>
 800d400:	f10c 0203 	add.w	r2, ip, #3
 800d404:	1b52      	subs	r2, r2, r5
 800d406:	f022 0203 	bic.w	r2, r2, #3
 800d40a:	3d03      	subs	r5, #3
 800d40c:	45ac      	cmp	ip, r5
 800d40e:	bf38      	it	cc
 800d410:	2200      	movcc	r2, #0
 800d412:	4413      	add	r3, r2
 800d414:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d418:	b17a      	cbz	r2, 800d43a <__mdiff+0x106>
 800d41a:	6107      	str	r7, [r0, #16]
 800d41c:	e7a4      	b.n	800d368 <__mdiff+0x34>
 800d41e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d422:	fa11 f288 	uxtah	r2, r1, r8
 800d426:	1414      	asrs	r4, r2, #16
 800d428:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d42c:	b292      	uxth	r2, r2
 800d42e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d432:	f84e 2b04 	str.w	r2, [lr], #4
 800d436:	1421      	asrs	r1, r4, #16
 800d438:	e7e0      	b.n	800d3fc <__mdiff+0xc8>
 800d43a:	3f01      	subs	r7, #1
 800d43c:	e7ea      	b.n	800d414 <__mdiff+0xe0>
 800d43e:	bf00      	nop
 800d440:	0800f22c 	.word	0x0800f22c
 800d444:	0800f23d 	.word	0x0800f23d

0800d448 <__d2b>:
 800d448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	460f      	mov	r7, r1
 800d44e:	2101      	movs	r1, #1
 800d450:	ec59 8b10 	vmov	r8, r9, d0
 800d454:	4616      	mov	r6, r2
 800d456:	f7ff fcd5 	bl	800ce04 <_Balloc>
 800d45a:	4604      	mov	r4, r0
 800d45c:	b930      	cbnz	r0, 800d46c <__d2b+0x24>
 800d45e:	4602      	mov	r2, r0
 800d460:	4b24      	ldr	r3, [pc, #144]	; (800d4f4 <__d2b+0xac>)
 800d462:	4825      	ldr	r0, [pc, #148]	; (800d4f8 <__d2b+0xb0>)
 800d464:	f240 310f 	movw	r1, #783	; 0x30f
 800d468:	f000 fa78 	bl	800d95c <__assert_func>
 800d46c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d474:	bb2d      	cbnz	r5, 800d4c2 <__d2b+0x7a>
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	f1b8 0300 	subs.w	r3, r8, #0
 800d47c:	d026      	beq.n	800d4cc <__d2b+0x84>
 800d47e:	4668      	mov	r0, sp
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	f7ff fd87 	bl	800cf94 <__lo0bits>
 800d486:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d48a:	b1e8      	cbz	r0, 800d4c8 <__d2b+0x80>
 800d48c:	f1c0 0320 	rsb	r3, r0, #32
 800d490:	fa02 f303 	lsl.w	r3, r2, r3
 800d494:	430b      	orrs	r3, r1
 800d496:	40c2      	lsrs	r2, r0
 800d498:	6163      	str	r3, [r4, #20]
 800d49a:	9201      	str	r2, [sp, #4]
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	61a3      	str	r3, [r4, #24]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	bf14      	ite	ne
 800d4a4:	2202      	movne	r2, #2
 800d4a6:	2201      	moveq	r2, #1
 800d4a8:	6122      	str	r2, [r4, #16]
 800d4aa:	b1bd      	cbz	r5, 800d4dc <__d2b+0x94>
 800d4ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4b0:	4405      	add	r5, r0
 800d4b2:	603d      	str	r5, [r7, #0]
 800d4b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4b8:	6030      	str	r0, [r6, #0]
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	b003      	add	sp, #12
 800d4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4c6:	e7d6      	b.n	800d476 <__d2b+0x2e>
 800d4c8:	6161      	str	r1, [r4, #20]
 800d4ca:	e7e7      	b.n	800d49c <__d2b+0x54>
 800d4cc:	a801      	add	r0, sp, #4
 800d4ce:	f7ff fd61 	bl	800cf94 <__lo0bits>
 800d4d2:	9b01      	ldr	r3, [sp, #4]
 800d4d4:	6163      	str	r3, [r4, #20]
 800d4d6:	3020      	adds	r0, #32
 800d4d8:	2201      	movs	r2, #1
 800d4da:	e7e5      	b.n	800d4a8 <__d2b+0x60>
 800d4dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4e4:	6038      	str	r0, [r7, #0]
 800d4e6:	6918      	ldr	r0, [r3, #16]
 800d4e8:	f7ff fd34 	bl	800cf54 <__hi0bits>
 800d4ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4f0:	e7e2      	b.n	800d4b8 <__d2b+0x70>
 800d4f2:	bf00      	nop
 800d4f4:	0800f22c 	.word	0x0800f22c
 800d4f8:	0800f23d 	.word	0x0800f23d

0800d4fc <__ssputs_r>:
 800d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d500:	688e      	ldr	r6, [r1, #8]
 800d502:	461f      	mov	r7, r3
 800d504:	42be      	cmp	r6, r7
 800d506:	680b      	ldr	r3, [r1, #0]
 800d508:	4682      	mov	sl, r0
 800d50a:	460c      	mov	r4, r1
 800d50c:	4690      	mov	r8, r2
 800d50e:	d82c      	bhi.n	800d56a <__ssputs_r+0x6e>
 800d510:	898a      	ldrh	r2, [r1, #12]
 800d512:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d516:	d026      	beq.n	800d566 <__ssputs_r+0x6a>
 800d518:	6965      	ldr	r5, [r4, #20]
 800d51a:	6909      	ldr	r1, [r1, #16]
 800d51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d520:	eba3 0901 	sub.w	r9, r3, r1
 800d524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d528:	1c7b      	adds	r3, r7, #1
 800d52a:	444b      	add	r3, r9
 800d52c:	106d      	asrs	r5, r5, #1
 800d52e:	429d      	cmp	r5, r3
 800d530:	bf38      	it	cc
 800d532:	461d      	movcc	r5, r3
 800d534:	0553      	lsls	r3, r2, #21
 800d536:	d527      	bpl.n	800d588 <__ssputs_r+0x8c>
 800d538:	4629      	mov	r1, r5
 800d53a:	f7ff fbd7 	bl	800ccec <_malloc_r>
 800d53e:	4606      	mov	r6, r0
 800d540:	b360      	cbz	r0, 800d59c <__ssputs_r+0xa0>
 800d542:	6921      	ldr	r1, [r4, #16]
 800d544:	464a      	mov	r2, r9
 800d546:	f7fe fcd2 	bl	800beee <memcpy>
 800d54a:	89a3      	ldrh	r3, [r4, #12]
 800d54c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	6126      	str	r6, [r4, #16]
 800d558:	6165      	str	r5, [r4, #20]
 800d55a:	444e      	add	r6, r9
 800d55c:	eba5 0509 	sub.w	r5, r5, r9
 800d560:	6026      	str	r6, [r4, #0]
 800d562:	60a5      	str	r5, [r4, #8]
 800d564:	463e      	mov	r6, r7
 800d566:	42be      	cmp	r6, r7
 800d568:	d900      	bls.n	800d56c <__ssputs_r+0x70>
 800d56a:	463e      	mov	r6, r7
 800d56c:	6820      	ldr	r0, [r4, #0]
 800d56e:	4632      	mov	r2, r6
 800d570:	4641      	mov	r1, r8
 800d572:	f000 f9c9 	bl	800d908 <memmove>
 800d576:	68a3      	ldr	r3, [r4, #8]
 800d578:	1b9b      	subs	r3, r3, r6
 800d57a:	60a3      	str	r3, [r4, #8]
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	4433      	add	r3, r6
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	2000      	movs	r0, #0
 800d584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d588:	462a      	mov	r2, r5
 800d58a:	f000 fa2d 	bl	800d9e8 <_realloc_r>
 800d58e:	4606      	mov	r6, r0
 800d590:	2800      	cmp	r0, #0
 800d592:	d1e0      	bne.n	800d556 <__ssputs_r+0x5a>
 800d594:	6921      	ldr	r1, [r4, #16]
 800d596:	4650      	mov	r0, sl
 800d598:	f7ff fb34 	bl	800cc04 <_free_r>
 800d59c:	230c      	movs	r3, #12
 800d59e:	f8ca 3000 	str.w	r3, [sl]
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5a8:	81a3      	strh	r3, [r4, #12]
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ae:	e7e9      	b.n	800d584 <__ssputs_r+0x88>

0800d5b0 <_svfiprintf_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	4698      	mov	r8, r3
 800d5b6:	898b      	ldrh	r3, [r1, #12]
 800d5b8:	061b      	lsls	r3, r3, #24
 800d5ba:	b09d      	sub	sp, #116	; 0x74
 800d5bc:	4607      	mov	r7, r0
 800d5be:	460d      	mov	r5, r1
 800d5c0:	4614      	mov	r4, r2
 800d5c2:	d50e      	bpl.n	800d5e2 <_svfiprintf_r+0x32>
 800d5c4:	690b      	ldr	r3, [r1, #16]
 800d5c6:	b963      	cbnz	r3, 800d5e2 <_svfiprintf_r+0x32>
 800d5c8:	2140      	movs	r1, #64	; 0x40
 800d5ca:	f7ff fb8f 	bl	800ccec <_malloc_r>
 800d5ce:	6028      	str	r0, [r5, #0]
 800d5d0:	6128      	str	r0, [r5, #16]
 800d5d2:	b920      	cbnz	r0, 800d5de <_svfiprintf_r+0x2e>
 800d5d4:	230c      	movs	r3, #12
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	e0d0      	b.n	800d780 <_svfiprintf_r+0x1d0>
 800d5de:	2340      	movs	r3, #64	; 0x40
 800d5e0:	616b      	str	r3, [r5, #20]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e6:	2320      	movs	r3, #32
 800d5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5f0:	2330      	movs	r3, #48	; 0x30
 800d5f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d798 <_svfiprintf_r+0x1e8>
 800d5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5fa:	f04f 0901 	mov.w	r9, #1
 800d5fe:	4623      	mov	r3, r4
 800d600:	469a      	mov	sl, r3
 800d602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d606:	b10a      	cbz	r2, 800d60c <_svfiprintf_r+0x5c>
 800d608:	2a25      	cmp	r2, #37	; 0x25
 800d60a:	d1f9      	bne.n	800d600 <_svfiprintf_r+0x50>
 800d60c:	ebba 0b04 	subs.w	fp, sl, r4
 800d610:	d00b      	beq.n	800d62a <_svfiprintf_r+0x7a>
 800d612:	465b      	mov	r3, fp
 800d614:	4622      	mov	r2, r4
 800d616:	4629      	mov	r1, r5
 800d618:	4638      	mov	r0, r7
 800d61a:	f7ff ff6f 	bl	800d4fc <__ssputs_r>
 800d61e:	3001      	adds	r0, #1
 800d620:	f000 80a9 	beq.w	800d776 <_svfiprintf_r+0x1c6>
 800d624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d626:	445a      	add	r2, fp
 800d628:	9209      	str	r2, [sp, #36]	; 0x24
 800d62a:	f89a 3000 	ldrb.w	r3, [sl]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 80a1 	beq.w	800d776 <_svfiprintf_r+0x1c6>
 800d634:	2300      	movs	r3, #0
 800d636:	f04f 32ff 	mov.w	r2, #4294967295
 800d63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d63e:	f10a 0a01 	add.w	sl, sl, #1
 800d642:	9304      	str	r3, [sp, #16]
 800d644:	9307      	str	r3, [sp, #28]
 800d646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d64a:	931a      	str	r3, [sp, #104]	; 0x68
 800d64c:	4654      	mov	r4, sl
 800d64e:	2205      	movs	r2, #5
 800d650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d654:	4850      	ldr	r0, [pc, #320]	; (800d798 <_svfiprintf_r+0x1e8>)
 800d656:	f7f2 fde3 	bl	8000220 <memchr>
 800d65a:	9a04      	ldr	r2, [sp, #16]
 800d65c:	b9d8      	cbnz	r0, 800d696 <_svfiprintf_r+0xe6>
 800d65e:	06d0      	lsls	r0, r2, #27
 800d660:	bf44      	itt	mi
 800d662:	2320      	movmi	r3, #32
 800d664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d668:	0711      	lsls	r1, r2, #28
 800d66a:	bf44      	itt	mi
 800d66c:	232b      	movmi	r3, #43	; 0x2b
 800d66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d672:	f89a 3000 	ldrb.w	r3, [sl]
 800d676:	2b2a      	cmp	r3, #42	; 0x2a
 800d678:	d015      	beq.n	800d6a6 <_svfiprintf_r+0xf6>
 800d67a:	9a07      	ldr	r2, [sp, #28]
 800d67c:	4654      	mov	r4, sl
 800d67e:	2000      	movs	r0, #0
 800d680:	f04f 0c0a 	mov.w	ip, #10
 800d684:	4621      	mov	r1, r4
 800d686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d68a:	3b30      	subs	r3, #48	; 0x30
 800d68c:	2b09      	cmp	r3, #9
 800d68e:	d94d      	bls.n	800d72c <_svfiprintf_r+0x17c>
 800d690:	b1b0      	cbz	r0, 800d6c0 <_svfiprintf_r+0x110>
 800d692:	9207      	str	r2, [sp, #28]
 800d694:	e014      	b.n	800d6c0 <_svfiprintf_r+0x110>
 800d696:	eba0 0308 	sub.w	r3, r0, r8
 800d69a:	fa09 f303 	lsl.w	r3, r9, r3
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	9304      	str	r3, [sp, #16]
 800d6a2:	46a2      	mov	sl, r4
 800d6a4:	e7d2      	b.n	800d64c <_svfiprintf_r+0x9c>
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	1d19      	adds	r1, r3, #4
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	9103      	str	r1, [sp, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	bfbb      	ittet	lt
 800d6b2:	425b      	neglt	r3, r3
 800d6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6b8:	9307      	strge	r3, [sp, #28]
 800d6ba:	9307      	strlt	r3, [sp, #28]
 800d6bc:	bfb8      	it	lt
 800d6be:	9204      	strlt	r2, [sp, #16]
 800d6c0:	7823      	ldrb	r3, [r4, #0]
 800d6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d6c4:	d10c      	bne.n	800d6e0 <_svfiprintf_r+0x130>
 800d6c6:	7863      	ldrb	r3, [r4, #1]
 800d6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ca:	d134      	bne.n	800d736 <_svfiprintf_r+0x186>
 800d6cc:	9b03      	ldr	r3, [sp, #12]
 800d6ce:	1d1a      	adds	r2, r3, #4
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	9203      	str	r2, [sp, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	bfb8      	it	lt
 800d6d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6dc:	3402      	adds	r4, #2
 800d6de:	9305      	str	r3, [sp, #20]
 800d6e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7a8 <_svfiprintf_r+0x1f8>
 800d6e4:	7821      	ldrb	r1, [r4, #0]
 800d6e6:	2203      	movs	r2, #3
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	f7f2 fd99 	bl	8000220 <memchr>
 800d6ee:	b138      	cbz	r0, 800d700 <_svfiprintf_r+0x150>
 800d6f0:	9b04      	ldr	r3, [sp, #16]
 800d6f2:	eba0 000a 	sub.w	r0, r0, sl
 800d6f6:	2240      	movs	r2, #64	; 0x40
 800d6f8:	4082      	lsls	r2, r0
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	3401      	adds	r4, #1
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d704:	4825      	ldr	r0, [pc, #148]	; (800d79c <_svfiprintf_r+0x1ec>)
 800d706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d70a:	2206      	movs	r2, #6
 800d70c:	f7f2 fd88 	bl	8000220 <memchr>
 800d710:	2800      	cmp	r0, #0
 800d712:	d038      	beq.n	800d786 <_svfiprintf_r+0x1d6>
 800d714:	4b22      	ldr	r3, [pc, #136]	; (800d7a0 <_svfiprintf_r+0x1f0>)
 800d716:	bb1b      	cbnz	r3, 800d760 <_svfiprintf_r+0x1b0>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	3307      	adds	r3, #7
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	3308      	adds	r3, #8
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d726:	4433      	add	r3, r6
 800d728:	9309      	str	r3, [sp, #36]	; 0x24
 800d72a:	e768      	b.n	800d5fe <_svfiprintf_r+0x4e>
 800d72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d730:	460c      	mov	r4, r1
 800d732:	2001      	movs	r0, #1
 800d734:	e7a6      	b.n	800d684 <_svfiprintf_r+0xd4>
 800d736:	2300      	movs	r3, #0
 800d738:	3401      	adds	r4, #1
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	4619      	mov	r1, r3
 800d73e:	f04f 0c0a 	mov.w	ip, #10
 800d742:	4620      	mov	r0, r4
 800d744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d748:	3a30      	subs	r2, #48	; 0x30
 800d74a:	2a09      	cmp	r2, #9
 800d74c:	d903      	bls.n	800d756 <_svfiprintf_r+0x1a6>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0c6      	beq.n	800d6e0 <_svfiprintf_r+0x130>
 800d752:	9105      	str	r1, [sp, #20]
 800d754:	e7c4      	b.n	800d6e0 <_svfiprintf_r+0x130>
 800d756:	fb0c 2101 	mla	r1, ip, r1, r2
 800d75a:	4604      	mov	r4, r0
 800d75c:	2301      	movs	r3, #1
 800d75e:	e7f0      	b.n	800d742 <_svfiprintf_r+0x192>
 800d760:	ab03      	add	r3, sp, #12
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	462a      	mov	r2, r5
 800d766:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <_svfiprintf_r+0x1f4>)
 800d768:	a904      	add	r1, sp, #16
 800d76a:	4638      	mov	r0, r7
 800d76c:	f7fd fe2c 	bl	800b3c8 <_printf_float>
 800d770:	1c42      	adds	r2, r0, #1
 800d772:	4606      	mov	r6, r0
 800d774:	d1d6      	bne.n	800d724 <_svfiprintf_r+0x174>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	065b      	lsls	r3, r3, #25
 800d77a:	f53f af2d 	bmi.w	800d5d8 <_svfiprintf_r+0x28>
 800d77e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d780:	b01d      	add	sp, #116	; 0x74
 800d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d786:	ab03      	add	r3, sp, #12
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	462a      	mov	r2, r5
 800d78c:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <_svfiprintf_r+0x1f4>)
 800d78e:	a904      	add	r1, sp, #16
 800d790:	4638      	mov	r0, r7
 800d792:	f7fe f8bd 	bl	800b910 <_printf_i>
 800d796:	e7eb      	b.n	800d770 <_svfiprintf_r+0x1c0>
 800d798:	0800f394 	.word	0x0800f394
 800d79c:	0800f39e 	.word	0x0800f39e
 800d7a0:	0800b3c9 	.word	0x0800b3c9
 800d7a4:	0800d4fd 	.word	0x0800d4fd
 800d7a8:	0800f39a 	.word	0x0800f39a

0800d7ac <__sflush_r>:
 800d7ac:	898a      	ldrh	r2, [r1, #12]
 800d7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	0710      	lsls	r0, r2, #28
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	d458      	bmi.n	800d86c <__sflush_r+0xc0>
 800d7ba:	684b      	ldr	r3, [r1, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dc05      	bgt.n	800d7cc <__sflush_r+0x20>
 800d7c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dc02      	bgt.n	800d7cc <__sflush_r+0x20>
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d0f9      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7d8:	682f      	ldr	r7, [r5, #0]
 800d7da:	6a21      	ldr	r1, [r4, #32]
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	d032      	beq.n	800d846 <__sflush_r+0x9a>
 800d7e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	075a      	lsls	r2, r3, #29
 800d7e6:	d505      	bpl.n	800d7f4 <__sflush_r+0x48>
 800d7e8:	6863      	ldr	r3, [r4, #4]
 800d7ea:	1ac0      	subs	r0, r0, r3
 800d7ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7ee:	b10b      	cbz	r3, 800d7f4 <__sflush_r+0x48>
 800d7f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7f2:	1ac0      	subs	r0, r0, r3
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7fa:	6a21      	ldr	r1, [r4, #32]
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b0      	blx	r6
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	d106      	bne.n	800d814 <__sflush_r+0x68>
 800d806:	6829      	ldr	r1, [r5, #0]
 800d808:	291d      	cmp	r1, #29
 800d80a:	d82b      	bhi.n	800d864 <__sflush_r+0xb8>
 800d80c:	4a29      	ldr	r2, [pc, #164]	; (800d8b4 <__sflush_r+0x108>)
 800d80e:	410a      	asrs	r2, r1
 800d810:	07d6      	lsls	r6, r2, #31
 800d812:	d427      	bmi.n	800d864 <__sflush_r+0xb8>
 800d814:	2200      	movs	r2, #0
 800d816:	6062      	str	r2, [r4, #4]
 800d818:	04d9      	lsls	r1, r3, #19
 800d81a:	6922      	ldr	r2, [r4, #16]
 800d81c:	6022      	str	r2, [r4, #0]
 800d81e:	d504      	bpl.n	800d82a <__sflush_r+0x7e>
 800d820:	1c42      	adds	r2, r0, #1
 800d822:	d101      	bne.n	800d828 <__sflush_r+0x7c>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b903      	cbnz	r3, 800d82a <__sflush_r+0x7e>
 800d828:	6560      	str	r0, [r4, #84]	; 0x54
 800d82a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d82c:	602f      	str	r7, [r5, #0]
 800d82e:	2900      	cmp	r1, #0
 800d830:	d0c9      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d836:	4299      	cmp	r1, r3
 800d838:	d002      	beq.n	800d840 <__sflush_r+0x94>
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7ff f9e2 	bl	800cc04 <_free_r>
 800d840:	2000      	movs	r0, #0
 800d842:	6360      	str	r0, [r4, #52]	; 0x34
 800d844:	e7c0      	b.n	800d7c8 <__sflush_r+0x1c>
 800d846:	2301      	movs	r3, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	47b0      	blx	r6
 800d84c:	1c41      	adds	r1, r0, #1
 800d84e:	d1c8      	bne.n	800d7e2 <__sflush_r+0x36>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0c5      	beq.n	800d7e2 <__sflush_r+0x36>
 800d856:	2b1d      	cmp	r3, #29
 800d858:	d001      	beq.n	800d85e <__sflush_r+0xb2>
 800d85a:	2b16      	cmp	r3, #22
 800d85c:	d101      	bne.n	800d862 <__sflush_r+0xb6>
 800d85e:	602f      	str	r7, [r5, #0]
 800d860:	e7b1      	b.n	800d7c6 <__sflush_r+0x1a>
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d868:	81a3      	strh	r3, [r4, #12]
 800d86a:	e7ad      	b.n	800d7c8 <__sflush_r+0x1c>
 800d86c:	690f      	ldr	r7, [r1, #16]
 800d86e:	2f00      	cmp	r7, #0
 800d870:	d0a9      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d872:	0793      	lsls	r3, r2, #30
 800d874:	680e      	ldr	r6, [r1, #0]
 800d876:	bf08      	it	eq
 800d878:	694b      	ldreq	r3, [r1, #20]
 800d87a:	600f      	str	r7, [r1, #0]
 800d87c:	bf18      	it	ne
 800d87e:	2300      	movne	r3, #0
 800d880:	eba6 0807 	sub.w	r8, r6, r7
 800d884:	608b      	str	r3, [r1, #8]
 800d886:	f1b8 0f00 	cmp.w	r8, #0
 800d88a:	dd9c      	ble.n	800d7c6 <__sflush_r+0x1a>
 800d88c:	6a21      	ldr	r1, [r4, #32]
 800d88e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d890:	4643      	mov	r3, r8
 800d892:	463a      	mov	r2, r7
 800d894:	4628      	mov	r0, r5
 800d896:	47b0      	blx	r6
 800d898:	2800      	cmp	r0, #0
 800d89a:	dc06      	bgt.n	800d8aa <__sflush_r+0xfe>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a2:	81a3      	strh	r3, [r4, #12]
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	e78e      	b.n	800d7c8 <__sflush_r+0x1c>
 800d8aa:	4407      	add	r7, r0
 800d8ac:	eba8 0800 	sub.w	r8, r8, r0
 800d8b0:	e7e9      	b.n	800d886 <__sflush_r+0xda>
 800d8b2:	bf00      	nop
 800d8b4:	dfbffffe 	.word	0xdfbffffe

0800d8b8 <_fflush_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	690b      	ldr	r3, [r1, #16]
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	b913      	cbnz	r3, 800d8c8 <_fflush_r+0x10>
 800d8c2:	2500      	movs	r5, #0
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}
 800d8c8:	b118      	cbz	r0, 800d8d2 <_fflush_r+0x1a>
 800d8ca:	6a03      	ldr	r3, [r0, #32]
 800d8cc:	b90b      	cbnz	r3, 800d8d2 <_fflush_r+0x1a>
 800d8ce:	f7fe f9cd 	bl	800bc6c <__sinit>
 800d8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d0f3      	beq.n	800d8c2 <_fflush_r+0xa>
 800d8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8dc:	07d0      	lsls	r0, r2, #31
 800d8de:	d404      	bmi.n	800d8ea <_fflush_r+0x32>
 800d8e0:	0599      	lsls	r1, r3, #22
 800d8e2:	d402      	bmi.n	800d8ea <_fflush_r+0x32>
 800d8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8e6:	f7fe fb00 	bl	800beea <__retarget_lock_acquire_recursive>
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f7ff ff5d 	bl	800d7ac <__sflush_r>
 800d8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8f4:	07da      	lsls	r2, r3, #31
 800d8f6:	4605      	mov	r5, r0
 800d8f8:	d4e4      	bmi.n	800d8c4 <_fflush_r+0xc>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	059b      	lsls	r3, r3, #22
 800d8fe:	d4e1      	bmi.n	800d8c4 <_fflush_r+0xc>
 800d900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d902:	f7fe faf3 	bl	800beec <__retarget_lock_release_recursive>
 800d906:	e7dd      	b.n	800d8c4 <_fflush_r+0xc>

0800d908 <memmove>:
 800d908:	4288      	cmp	r0, r1
 800d90a:	b510      	push	{r4, lr}
 800d90c:	eb01 0402 	add.w	r4, r1, r2
 800d910:	d902      	bls.n	800d918 <memmove+0x10>
 800d912:	4284      	cmp	r4, r0
 800d914:	4623      	mov	r3, r4
 800d916:	d807      	bhi.n	800d928 <memmove+0x20>
 800d918:	1e43      	subs	r3, r0, #1
 800d91a:	42a1      	cmp	r1, r4
 800d91c:	d008      	beq.n	800d930 <memmove+0x28>
 800d91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d926:	e7f8      	b.n	800d91a <memmove+0x12>
 800d928:	4402      	add	r2, r0
 800d92a:	4601      	mov	r1, r0
 800d92c:	428a      	cmp	r2, r1
 800d92e:	d100      	bne.n	800d932 <memmove+0x2a>
 800d930:	bd10      	pop	{r4, pc}
 800d932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93a:	e7f7      	b.n	800d92c <memmove+0x24>

0800d93c <_sbrk_r>:
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	4d06      	ldr	r5, [pc, #24]	; (800d958 <_sbrk_r+0x1c>)
 800d940:	2300      	movs	r3, #0
 800d942:	4604      	mov	r4, r0
 800d944:	4608      	mov	r0, r1
 800d946:	602b      	str	r3, [r5, #0]
 800d948:	f7f8 f862 	bl	8005a10 <_sbrk>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_sbrk_r+0x1a>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_sbrk_r+0x1a>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	20001de0 	.word	0x20001de0

0800d95c <__assert_func>:
 800d95c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d95e:	4614      	mov	r4, r2
 800d960:	461a      	mov	r2, r3
 800d962:	4b09      	ldr	r3, [pc, #36]	; (800d988 <__assert_func+0x2c>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4605      	mov	r5, r0
 800d968:	68d8      	ldr	r0, [r3, #12]
 800d96a:	b14c      	cbz	r4, 800d980 <__assert_func+0x24>
 800d96c:	4b07      	ldr	r3, [pc, #28]	; (800d98c <__assert_func+0x30>)
 800d96e:	9100      	str	r1, [sp, #0]
 800d970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d974:	4906      	ldr	r1, [pc, #24]	; (800d990 <__assert_func+0x34>)
 800d976:	462b      	mov	r3, r5
 800d978:	f000 f872 	bl	800da60 <fiprintf>
 800d97c:	f000 f882 	bl	800da84 <abort>
 800d980:	4b04      	ldr	r3, [pc, #16]	; (800d994 <__assert_func+0x38>)
 800d982:	461c      	mov	r4, r3
 800d984:	e7f3      	b.n	800d96e <__assert_func+0x12>
 800d986:	bf00      	nop
 800d988:	200005fc 	.word	0x200005fc
 800d98c:	0800f3af 	.word	0x0800f3af
 800d990:	0800f3bc 	.word	0x0800f3bc
 800d994:	0800f3ea 	.word	0x0800f3ea

0800d998 <_calloc_r>:
 800d998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d99a:	fba1 2402 	umull	r2, r4, r1, r2
 800d99e:	b94c      	cbnz	r4, 800d9b4 <_calloc_r+0x1c>
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	9201      	str	r2, [sp, #4]
 800d9a4:	f7ff f9a2 	bl	800ccec <_malloc_r>
 800d9a8:	9a01      	ldr	r2, [sp, #4]
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	b930      	cbnz	r0, 800d9bc <_calloc_r+0x24>
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	b003      	add	sp, #12
 800d9b2:	bd30      	pop	{r4, r5, pc}
 800d9b4:	220c      	movs	r2, #12
 800d9b6:	6002      	str	r2, [r0, #0]
 800d9b8:	2500      	movs	r5, #0
 800d9ba:	e7f8      	b.n	800d9ae <_calloc_r+0x16>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	f7fe fa17 	bl	800bdf0 <memset>
 800d9c2:	e7f4      	b.n	800d9ae <_calloc_r+0x16>

0800d9c4 <__ascii_mbtowc>:
 800d9c4:	b082      	sub	sp, #8
 800d9c6:	b901      	cbnz	r1, 800d9ca <__ascii_mbtowc+0x6>
 800d9c8:	a901      	add	r1, sp, #4
 800d9ca:	b142      	cbz	r2, 800d9de <__ascii_mbtowc+0x1a>
 800d9cc:	b14b      	cbz	r3, 800d9e2 <__ascii_mbtowc+0x1e>
 800d9ce:	7813      	ldrb	r3, [r2, #0]
 800d9d0:	600b      	str	r3, [r1, #0]
 800d9d2:	7812      	ldrb	r2, [r2, #0]
 800d9d4:	1e10      	subs	r0, r2, #0
 800d9d6:	bf18      	it	ne
 800d9d8:	2001      	movne	r0, #1
 800d9da:	b002      	add	sp, #8
 800d9dc:	4770      	bx	lr
 800d9de:	4610      	mov	r0, r2
 800d9e0:	e7fb      	b.n	800d9da <__ascii_mbtowc+0x16>
 800d9e2:	f06f 0001 	mvn.w	r0, #1
 800d9e6:	e7f8      	b.n	800d9da <__ascii_mbtowc+0x16>

0800d9e8 <_realloc_r>:
 800d9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	460e      	mov	r6, r1
 800d9f2:	b921      	cbnz	r1, 800d9fe <_realloc_r+0x16>
 800d9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	f7ff b977 	b.w	800ccec <_malloc_r>
 800d9fe:	b92a      	cbnz	r2, 800da0c <_realloc_r+0x24>
 800da00:	f7ff f900 	bl	800cc04 <_free_r>
 800da04:	4625      	mov	r5, r4
 800da06:	4628      	mov	r0, r5
 800da08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0c:	f000 f841 	bl	800da92 <_malloc_usable_size_r>
 800da10:	4284      	cmp	r4, r0
 800da12:	4607      	mov	r7, r0
 800da14:	d802      	bhi.n	800da1c <_realloc_r+0x34>
 800da16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da1a:	d812      	bhi.n	800da42 <_realloc_r+0x5a>
 800da1c:	4621      	mov	r1, r4
 800da1e:	4640      	mov	r0, r8
 800da20:	f7ff f964 	bl	800ccec <_malloc_r>
 800da24:	4605      	mov	r5, r0
 800da26:	2800      	cmp	r0, #0
 800da28:	d0ed      	beq.n	800da06 <_realloc_r+0x1e>
 800da2a:	42bc      	cmp	r4, r7
 800da2c:	4622      	mov	r2, r4
 800da2e:	4631      	mov	r1, r6
 800da30:	bf28      	it	cs
 800da32:	463a      	movcs	r2, r7
 800da34:	f7fe fa5b 	bl	800beee <memcpy>
 800da38:	4631      	mov	r1, r6
 800da3a:	4640      	mov	r0, r8
 800da3c:	f7ff f8e2 	bl	800cc04 <_free_r>
 800da40:	e7e1      	b.n	800da06 <_realloc_r+0x1e>
 800da42:	4635      	mov	r5, r6
 800da44:	e7df      	b.n	800da06 <_realloc_r+0x1e>

0800da46 <__ascii_wctomb>:
 800da46:	b149      	cbz	r1, 800da5c <__ascii_wctomb+0x16>
 800da48:	2aff      	cmp	r2, #255	; 0xff
 800da4a:	bf85      	ittet	hi
 800da4c:	238a      	movhi	r3, #138	; 0x8a
 800da4e:	6003      	strhi	r3, [r0, #0]
 800da50:	700a      	strbls	r2, [r1, #0]
 800da52:	f04f 30ff 	movhi.w	r0, #4294967295
 800da56:	bf98      	it	ls
 800da58:	2001      	movls	r0, #1
 800da5a:	4770      	bx	lr
 800da5c:	4608      	mov	r0, r1
 800da5e:	4770      	bx	lr

0800da60 <fiprintf>:
 800da60:	b40e      	push	{r1, r2, r3}
 800da62:	b503      	push	{r0, r1, lr}
 800da64:	4601      	mov	r1, r0
 800da66:	ab03      	add	r3, sp, #12
 800da68:	4805      	ldr	r0, [pc, #20]	; (800da80 <fiprintf+0x20>)
 800da6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da6e:	6800      	ldr	r0, [r0, #0]
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	f000 f83f 	bl	800daf4 <_vfiprintf_r>
 800da76:	b002      	add	sp, #8
 800da78:	f85d eb04 	ldr.w	lr, [sp], #4
 800da7c:	b003      	add	sp, #12
 800da7e:	4770      	bx	lr
 800da80:	200005fc 	.word	0x200005fc

0800da84 <abort>:
 800da84:	b508      	push	{r3, lr}
 800da86:	2006      	movs	r0, #6
 800da88:	f000 fa0c 	bl	800dea4 <raise>
 800da8c:	2001      	movs	r0, #1
 800da8e:	f7f7 ff8f 	bl	80059b0 <_exit>

0800da92 <_malloc_usable_size_r>:
 800da92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da96:	1f18      	subs	r0, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	bfbc      	itt	lt
 800da9c:	580b      	ldrlt	r3, [r1, r0]
 800da9e:	18c0      	addlt	r0, r0, r3
 800daa0:	4770      	bx	lr

0800daa2 <__sfputc_r>:
 800daa2:	6893      	ldr	r3, [r2, #8]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	b410      	push	{r4}
 800daaa:	6093      	str	r3, [r2, #8]
 800daac:	da08      	bge.n	800dac0 <__sfputc_r+0x1e>
 800daae:	6994      	ldr	r4, [r2, #24]
 800dab0:	42a3      	cmp	r3, r4
 800dab2:	db01      	blt.n	800dab8 <__sfputc_r+0x16>
 800dab4:	290a      	cmp	r1, #10
 800dab6:	d103      	bne.n	800dac0 <__sfputc_r+0x1e>
 800dab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dabc:	f000 b934 	b.w	800dd28 <__swbuf_r>
 800dac0:	6813      	ldr	r3, [r2, #0]
 800dac2:	1c58      	adds	r0, r3, #1
 800dac4:	6010      	str	r0, [r2, #0]
 800dac6:	7019      	strb	r1, [r3, #0]
 800dac8:	4608      	mov	r0, r1
 800daca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <__sfputs_r>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	4606      	mov	r6, r0
 800dad4:	460f      	mov	r7, r1
 800dad6:	4614      	mov	r4, r2
 800dad8:	18d5      	adds	r5, r2, r3
 800dada:	42ac      	cmp	r4, r5
 800dadc:	d101      	bne.n	800dae2 <__sfputs_r+0x12>
 800dade:	2000      	movs	r0, #0
 800dae0:	e007      	b.n	800daf2 <__sfputs_r+0x22>
 800dae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae6:	463a      	mov	r2, r7
 800dae8:	4630      	mov	r0, r6
 800daea:	f7ff ffda 	bl	800daa2 <__sfputc_r>
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	d1f3      	bne.n	800dada <__sfputs_r+0xa>
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800daf4 <_vfiprintf_r>:
 800daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	460d      	mov	r5, r1
 800dafa:	b09d      	sub	sp, #116	; 0x74
 800dafc:	4614      	mov	r4, r2
 800dafe:	4698      	mov	r8, r3
 800db00:	4606      	mov	r6, r0
 800db02:	b118      	cbz	r0, 800db0c <_vfiprintf_r+0x18>
 800db04:	6a03      	ldr	r3, [r0, #32]
 800db06:	b90b      	cbnz	r3, 800db0c <_vfiprintf_r+0x18>
 800db08:	f7fe f8b0 	bl	800bc6c <__sinit>
 800db0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db0e:	07d9      	lsls	r1, r3, #31
 800db10:	d405      	bmi.n	800db1e <_vfiprintf_r+0x2a>
 800db12:	89ab      	ldrh	r3, [r5, #12]
 800db14:	059a      	lsls	r2, r3, #22
 800db16:	d402      	bmi.n	800db1e <_vfiprintf_r+0x2a>
 800db18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db1a:	f7fe f9e6 	bl	800beea <__retarget_lock_acquire_recursive>
 800db1e:	89ab      	ldrh	r3, [r5, #12]
 800db20:	071b      	lsls	r3, r3, #28
 800db22:	d501      	bpl.n	800db28 <_vfiprintf_r+0x34>
 800db24:	692b      	ldr	r3, [r5, #16]
 800db26:	b99b      	cbnz	r3, 800db50 <_vfiprintf_r+0x5c>
 800db28:	4629      	mov	r1, r5
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 f93a 	bl	800dda4 <__swsetup_r>
 800db30:	b170      	cbz	r0, 800db50 <_vfiprintf_r+0x5c>
 800db32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db34:	07dc      	lsls	r4, r3, #31
 800db36:	d504      	bpl.n	800db42 <_vfiprintf_r+0x4e>
 800db38:	f04f 30ff 	mov.w	r0, #4294967295
 800db3c:	b01d      	add	sp, #116	; 0x74
 800db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db42:	89ab      	ldrh	r3, [r5, #12]
 800db44:	0598      	lsls	r0, r3, #22
 800db46:	d4f7      	bmi.n	800db38 <_vfiprintf_r+0x44>
 800db48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db4a:	f7fe f9cf 	bl	800beec <__retarget_lock_release_recursive>
 800db4e:	e7f3      	b.n	800db38 <_vfiprintf_r+0x44>
 800db50:	2300      	movs	r3, #0
 800db52:	9309      	str	r3, [sp, #36]	; 0x24
 800db54:	2320      	movs	r3, #32
 800db56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800db5e:	2330      	movs	r3, #48	; 0x30
 800db60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dd14 <_vfiprintf_r+0x220>
 800db64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db68:	f04f 0901 	mov.w	r9, #1
 800db6c:	4623      	mov	r3, r4
 800db6e:	469a      	mov	sl, r3
 800db70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db74:	b10a      	cbz	r2, 800db7a <_vfiprintf_r+0x86>
 800db76:	2a25      	cmp	r2, #37	; 0x25
 800db78:	d1f9      	bne.n	800db6e <_vfiprintf_r+0x7a>
 800db7a:	ebba 0b04 	subs.w	fp, sl, r4
 800db7e:	d00b      	beq.n	800db98 <_vfiprintf_r+0xa4>
 800db80:	465b      	mov	r3, fp
 800db82:	4622      	mov	r2, r4
 800db84:	4629      	mov	r1, r5
 800db86:	4630      	mov	r0, r6
 800db88:	f7ff ffa2 	bl	800dad0 <__sfputs_r>
 800db8c:	3001      	adds	r0, #1
 800db8e:	f000 80a9 	beq.w	800dce4 <_vfiprintf_r+0x1f0>
 800db92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db94:	445a      	add	r2, fp
 800db96:	9209      	str	r2, [sp, #36]	; 0x24
 800db98:	f89a 3000 	ldrb.w	r3, [sl]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f000 80a1 	beq.w	800dce4 <_vfiprintf_r+0x1f0>
 800dba2:	2300      	movs	r3, #0
 800dba4:	f04f 32ff 	mov.w	r2, #4294967295
 800dba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbac:	f10a 0a01 	add.w	sl, sl, #1
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	9307      	str	r3, [sp, #28]
 800dbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbb8:	931a      	str	r3, [sp, #104]	; 0x68
 800dbba:	4654      	mov	r4, sl
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc2:	4854      	ldr	r0, [pc, #336]	; (800dd14 <_vfiprintf_r+0x220>)
 800dbc4:	f7f2 fb2c 	bl	8000220 <memchr>
 800dbc8:	9a04      	ldr	r2, [sp, #16]
 800dbca:	b9d8      	cbnz	r0, 800dc04 <_vfiprintf_r+0x110>
 800dbcc:	06d1      	lsls	r1, r2, #27
 800dbce:	bf44      	itt	mi
 800dbd0:	2320      	movmi	r3, #32
 800dbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbd6:	0713      	lsls	r3, r2, #28
 800dbd8:	bf44      	itt	mi
 800dbda:	232b      	movmi	r3, #43	; 0x2b
 800dbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800dbe4:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe6:	d015      	beq.n	800dc14 <_vfiprintf_r+0x120>
 800dbe8:	9a07      	ldr	r2, [sp, #28]
 800dbea:	4654      	mov	r4, sl
 800dbec:	2000      	movs	r0, #0
 800dbee:	f04f 0c0a 	mov.w	ip, #10
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf8:	3b30      	subs	r3, #48	; 0x30
 800dbfa:	2b09      	cmp	r3, #9
 800dbfc:	d94d      	bls.n	800dc9a <_vfiprintf_r+0x1a6>
 800dbfe:	b1b0      	cbz	r0, 800dc2e <_vfiprintf_r+0x13a>
 800dc00:	9207      	str	r2, [sp, #28]
 800dc02:	e014      	b.n	800dc2e <_vfiprintf_r+0x13a>
 800dc04:	eba0 0308 	sub.w	r3, r0, r8
 800dc08:	fa09 f303 	lsl.w	r3, r9, r3
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	9304      	str	r3, [sp, #16]
 800dc10:	46a2      	mov	sl, r4
 800dc12:	e7d2      	b.n	800dbba <_vfiprintf_r+0xc6>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	1d19      	adds	r1, r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	9103      	str	r1, [sp, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	bfbb      	ittet	lt
 800dc20:	425b      	neglt	r3, r3
 800dc22:	f042 0202 	orrlt.w	r2, r2, #2
 800dc26:	9307      	strge	r3, [sp, #28]
 800dc28:	9307      	strlt	r3, [sp, #28]
 800dc2a:	bfb8      	it	lt
 800dc2c:	9204      	strlt	r2, [sp, #16]
 800dc2e:	7823      	ldrb	r3, [r4, #0]
 800dc30:	2b2e      	cmp	r3, #46	; 0x2e
 800dc32:	d10c      	bne.n	800dc4e <_vfiprintf_r+0x15a>
 800dc34:	7863      	ldrb	r3, [r4, #1]
 800dc36:	2b2a      	cmp	r3, #42	; 0x2a
 800dc38:	d134      	bne.n	800dca4 <_vfiprintf_r+0x1b0>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	1d1a      	adds	r2, r3, #4
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	9203      	str	r2, [sp, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	bfb8      	it	lt
 800dc46:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc4a:	3402      	adds	r4, #2
 800dc4c:	9305      	str	r3, [sp, #20]
 800dc4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dd24 <_vfiprintf_r+0x230>
 800dc52:	7821      	ldrb	r1, [r4, #0]
 800dc54:	2203      	movs	r2, #3
 800dc56:	4650      	mov	r0, sl
 800dc58:	f7f2 fae2 	bl	8000220 <memchr>
 800dc5c:	b138      	cbz	r0, 800dc6e <_vfiprintf_r+0x17a>
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	eba0 000a 	sub.w	r0, r0, sl
 800dc64:	2240      	movs	r2, #64	; 0x40
 800dc66:	4082      	lsls	r2, r0
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	3401      	adds	r4, #1
 800dc6c:	9304      	str	r3, [sp, #16]
 800dc6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc72:	4829      	ldr	r0, [pc, #164]	; (800dd18 <_vfiprintf_r+0x224>)
 800dc74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc78:	2206      	movs	r2, #6
 800dc7a:	f7f2 fad1 	bl	8000220 <memchr>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d03f      	beq.n	800dd02 <_vfiprintf_r+0x20e>
 800dc82:	4b26      	ldr	r3, [pc, #152]	; (800dd1c <_vfiprintf_r+0x228>)
 800dc84:	bb1b      	cbnz	r3, 800dcce <_vfiprintf_r+0x1da>
 800dc86:	9b03      	ldr	r3, [sp, #12]
 800dc88:	3307      	adds	r3, #7
 800dc8a:	f023 0307 	bic.w	r3, r3, #7
 800dc8e:	3308      	adds	r3, #8
 800dc90:	9303      	str	r3, [sp, #12]
 800dc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc94:	443b      	add	r3, r7
 800dc96:	9309      	str	r3, [sp, #36]	; 0x24
 800dc98:	e768      	b.n	800db6c <_vfiprintf_r+0x78>
 800dc9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc9e:	460c      	mov	r4, r1
 800dca0:	2001      	movs	r0, #1
 800dca2:	e7a6      	b.n	800dbf2 <_vfiprintf_r+0xfe>
 800dca4:	2300      	movs	r3, #0
 800dca6:	3401      	adds	r4, #1
 800dca8:	9305      	str	r3, [sp, #20]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	f04f 0c0a 	mov.w	ip, #10
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcb6:	3a30      	subs	r2, #48	; 0x30
 800dcb8:	2a09      	cmp	r2, #9
 800dcba:	d903      	bls.n	800dcc4 <_vfiprintf_r+0x1d0>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d0c6      	beq.n	800dc4e <_vfiprintf_r+0x15a>
 800dcc0:	9105      	str	r1, [sp, #20]
 800dcc2:	e7c4      	b.n	800dc4e <_vfiprintf_r+0x15a>
 800dcc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcc8:	4604      	mov	r4, r0
 800dcca:	2301      	movs	r3, #1
 800dccc:	e7f0      	b.n	800dcb0 <_vfiprintf_r+0x1bc>
 800dcce:	ab03      	add	r3, sp, #12
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	462a      	mov	r2, r5
 800dcd4:	4b12      	ldr	r3, [pc, #72]	; (800dd20 <_vfiprintf_r+0x22c>)
 800dcd6:	a904      	add	r1, sp, #16
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f7fd fb75 	bl	800b3c8 <_printf_float>
 800dcde:	4607      	mov	r7, r0
 800dce0:	1c78      	adds	r0, r7, #1
 800dce2:	d1d6      	bne.n	800dc92 <_vfiprintf_r+0x19e>
 800dce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dce6:	07d9      	lsls	r1, r3, #31
 800dce8:	d405      	bmi.n	800dcf6 <_vfiprintf_r+0x202>
 800dcea:	89ab      	ldrh	r3, [r5, #12]
 800dcec:	059a      	lsls	r2, r3, #22
 800dcee:	d402      	bmi.n	800dcf6 <_vfiprintf_r+0x202>
 800dcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf2:	f7fe f8fb 	bl	800beec <__retarget_lock_release_recursive>
 800dcf6:	89ab      	ldrh	r3, [r5, #12]
 800dcf8:	065b      	lsls	r3, r3, #25
 800dcfa:	f53f af1d 	bmi.w	800db38 <_vfiprintf_r+0x44>
 800dcfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd00:	e71c      	b.n	800db3c <_vfiprintf_r+0x48>
 800dd02:	ab03      	add	r3, sp, #12
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	462a      	mov	r2, r5
 800dd08:	4b05      	ldr	r3, [pc, #20]	; (800dd20 <_vfiprintf_r+0x22c>)
 800dd0a:	a904      	add	r1, sp, #16
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f7fd fdff 	bl	800b910 <_printf_i>
 800dd12:	e7e4      	b.n	800dcde <_vfiprintf_r+0x1ea>
 800dd14:	0800f394 	.word	0x0800f394
 800dd18:	0800f39e 	.word	0x0800f39e
 800dd1c:	0800b3c9 	.word	0x0800b3c9
 800dd20:	0800dad1 	.word	0x0800dad1
 800dd24:	0800f39a 	.word	0x0800f39a

0800dd28 <__swbuf_r>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	460e      	mov	r6, r1
 800dd2c:	4614      	mov	r4, r2
 800dd2e:	4605      	mov	r5, r0
 800dd30:	b118      	cbz	r0, 800dd3a <__swbuf_r+0x12>
 800dd32:	6a03      	ldr	r3, [r0, #32]
 800dd34:	b90b      	cbnz	r3, 800dd3a <__swbuf_r+0x12>
 800dd36:	f7fd ff99 	bl	800bc6c <__sinit>
 800dd3a:	69a3      	ldr	r3, [r4, #24]
 800dd3c:	60a3      	str	r3, [r4, #8]
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	071a      	lsls	r2, r3, #28
 800dd42:	d525      	bpl.n	800dd90 <__swbuf_r+0x68>
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	b31b      	cbz	r3, 800dd90 <__swbuf_r+0x68>
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	6922      	ldr	r2, [r4, #16]
 800dd4c:	1a98      	subs	r0, r3, r2
 800dd4e:	6963      	ldr	r3, [r4, #20]
 800dd50:	b2f6      	uxtb	r6, r6
 800dd52:	4283      	cmp	r3, r0
 800dd54:	4637      	mov	r7, r6
 800dd56:	dc04      	bgt.n	800dd62 <__swbuf_r+0x3a>
 800dd58:	4621      	mov	r1, r4
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	f7ff fdac 	bl	800d8b8 <_fflush_r>
 800dd60:	b9e0      	cbnz	r0, 800dd9c <__swbuf_r+0x74>
 800dd62:	68a3      	ldr	r3, [r4, #8]
 800dd64:	3b01      	subs	r3, #1
 800dd66:	60a3      	str	r3, [r4, #8]
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	6022      	str	r2, [r4, #0]
 800dd6e:	701e      	strb	r6, [r3, #0]
 800dd70:	6962      	ldr	r2, [r4, #20]
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d004      	beq.n	800dd82 <__swbuf_r+0x5a>
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	07db      	lsls	r3, r3, #31
 800dd7c:	d506      	bpl.n	800dd8c <__swbuf_r+0x64>
 800dd7e:	2e0a      	cmp	r6, #10
 800dd80:	d104      	bne.n	800dd8c <__swbuf_r+0x64>
 800dd82:	4621      	mov	r1, r4
 800dd84:	4628      	mov	r0, r5
 800dd86:	f7ff fd97 	bl	800d8b8 <_fflush_r>
 800dd8a:	b938      	cbnz	r0, 800dd9c <__swbuf_r+0x74>
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd90:	4621      	mov	r1, r4
 800dd92:	4628      	mov	r0, r5
 800dd94:	f000 f806 	bl	800dda4 <__swsetup_r>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d0d5      	beq.n	800dd48 <__swbuf_r+0x20>
 800dd9c:	f04f 37ff 	mov.w	r7, #4294967295
 800dda0:	e7f4      	b.n	800dd8c <__swbuf_r+0x64>
	...

0800dda4 <__swsetup_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4b2a      	ldr	r3, [pc, #168]	; (800de50 <__swsetup_r+0xac>)
 800dda8:	4605      	mov	r5, r0
 800ddaa:	6818      	ldr	r0, [r3, #0]
 800ddac:	460c      	mov	r4, r1
 800ddae:	b118      	cbz	r0, 800ddb8 <__swsetup_r+0x14>
 800ddb0:	6a03      	ldr	r3, [r0, #32]
 800ddb2:	b90b      	cbnz	r3, 800ddb8 <__swsetup_r+0x14>
 800ddb4:	f7fd ff5a 	bl	800bc6c <__sinit>
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddbe:	0718      	lsls	r0, r3, #28
 800ddc0:	d422      	bmi.n	800de08 <__swsetup_r+0x64>
 800ddc2:	06d9      	lsls	r1, r3, #27
 800ddc4:	d407      	bmi.n	800ddd6 <__swsetup_r+0x32>
 800ddc6:	2309      	movs	r3, #9
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	e034      	b.n	800de40 <__swsetup_r+0x9c>
 800ddd6:	0758      	lsls	r0, r3, #29
 800ddd8:	d512      	bpl.n	800de00 <__swsetup_r+0x5c>
 800ddda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dddc:	b141      	cbz	r1, 800ddf0 <__swsetup_r+0x4c>
 800ddde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde2:	4299      	cmp	r1, r3
 800dde4:	d002      	beq.n	800ddec <__swsetup_r+0x48>
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7fe ff0c 	bl	800cc04 <_free_r>
 800ddec:	2300      	movs	r3, #0
 800ddee:	6363      	str	r3, [r4, #52]	; 0x34
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddf6:	81a3      	strh	r3, [r4, #12]
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	6063      	str	r3, [r4, #4]
 800ddfc:	6923      	ldr	r3, [r4, #16]
 800ddfe:	6023      	str	r3, [r4, #0]
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	f043 0308 	orr.w	r3, r3, #8
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	b94b      	cbnz	r3, 800de20 <__swsetup_r+0x7c>
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de16:	d003      	beq.n	800de20 <__swsetup_r+0x7c>
 800de18:	4621      	mov	r1, r4
 800de1a:	4628      	mov	r0, r5
 800de1c:	f000 f884 	bl	800df28 <__smakebuf_r>
 800de20:	89a0      	ldrh	r0, [r4, #12]
 800de22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de26:	f010 0301 	ands.w	r3, r0, #1
 800de2a:	d00a      	beq.n	800de42 <__swsetup_r+0x9e>
 800de2c:	2300      	movs	r3, #0
 800de2e:	60a3      	str	r3, [r4, #8]
 800de30:	6963      	ldr	r3, [r4, #20]
 800de32:	425b      	negs	r3, r3
 800de34:	61a3      	str	r3, [r4, #24]
 800de36:	6923      	ldr	r3, [r4, #16]
 800de38:	b943      	cbnz	r3, 800de4c <__swsetup_r+0xa8>
 800de3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de3e:	d1c4      	bne.n	800ddca <__swsetup_r+0x26>
 800de40:	bd38      	pop	{r3, r4, r5, pc}
 800de42:	0781      	lsls	r1, r0, #30
 800de44:	bf58      	it	pl
 800de46:	6963      	ldrpl	r3, [r4, #20]
 800de48:	60a3      	str	r3, [r4, #8]
 800de4a:	e7f4      	b.n	800de36 <__swsetup_r+0x92>
 800de4c:	2000      	movs	r0, #0
 800de4e:	e7f7      	b.n	800de40 <__swsetup_r+0x9c>
 800de50:	200005fc 	.word	0x200005fc

0800de54 <_raise_r>:
 800de54:	291f      	cmp	r1, #31
 800de56:	b538      	push	{r3, r4, r5, lr}
 800de58:	4604      	mov	r4, r0
 800de5a:	460d      	mov	r5, r1
 800de5c:	d904      	bls.n	800de68 <_raise_r+0x14>
 800de5e:	2316      	movs	r3, #22
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	f04f 30ff 	mov.w	r0, #4294967295
 800de66:	bd38      	pop	{r3, r4, r5, pc}
 800de68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de6a:	b112      	cbz	r2, 800de72 <_raise_r+0x1e>
 800de6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de70:	b94b      	cbnz	r3, 800de86 <_raise_r+0x32>
 800de72:	4620      	mov	r0, r4
 800de74:	f000 f830 	bl	800ded8 <_getpid_r>
 800de78:	462a      	mov	r2, r5
 800de7a:	4601      	mov	r1, r0
 800de7c:	4620      	mov	r0, r4
 800de7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de82:	f000 b817 	b.w	800deb4 <_kill_r>
 800de86:	2b01      	cmp	r3, #1
 800de88:	d00a      	beq.n	800dea0 <_raise_r+0x4c>
 800de8a:	1c59      	adds	r1, r3, #1
 800de8c:	d103      	bne.n	800de96 <_raise_r+0x42>
 800de8e:	2316      	movs	r3, #22
 800de90:	6003      	str	r3, [r0, #0]
 800de92:	2001      	movs	r0, #1
 800de94:	e7e7      	b.n	800de66 <_raise_r+0x12>
 800de96:	2400      	movs	r4, #0
 800de98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de9c:	4628      	mov	r0, r5
 800de9e:	4798      	blx	r3
 800dea0:	2000      	movs	r0, #0
 800dea2:	e7e0      	b.n	800de66 <_raise_r+0x12>

0800dea4 <raise>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <raise+0xc>)
 800dea6:	4601      	mov	r1, r0
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f7ff bfd3 	b.w	800de54 <_raise_r>
 800deae:	bf00      	nop
 800deb0:	200005fc 	.word	0x200005fc

0800deb4 <_kill_r>:
 800deb4:	b538      	push	{r3, r4, r5, lr}
 800deb6:	4d07      	ldr	r5, [pc, #28]	; (800ded4 <_kill_r+0x20>)
 800deb8:	2300      	movs	r3, #0
 800deba:	4604      	mov	r4, r0
 800debc:	4608      	mov	r0, r1
 800debe:	4611      	mov	r1, r2
 800dec0:	602b      	str	r3, [r5, #0]
 800dec2:	f7f7 fd6d 	bl	80059a0 <_kill>
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	d102      	bne.n	800ded0 <_kill_r+0x1c>
 800deca:	682b      	ldr	r3, [r5, #0]
 800decc:	b103      	cbz	r3, 800ded0 <_kill_r+0x1c>
 800dece:	6023      	str	r3, [r4, #0]
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop
 800ded4:	20001de0 	.word	0x20001de0

0800ded8 <_getpid_r>:
 800ded8:	f7f7 bd60 	b.w	800599c <_getpid>

0800dedc <__swhatbuf_r>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	460c      	mov	r4, r1
 800dee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee4:	2900      	cmp	r1, #0
 800dee6:	b096      	sub	sp, #88	; 0x58
 800dee8:	4615      	mov	r5, r2
 800deea:	461e      	mov	r6, r3
 800deec:	da0d      	bge.n	800df0a <__swhatbuf_r+0x2e>
 800deee:	89a3      	ldrh	r3, [r4, #12]
 800def0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800def4:	f04f 0100 	mov.w	r1, #0
 800def8:	bf0c      	ite	eq
 800defa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800defe:	2340      	movne	r3, #64	; 0x40
 800df00:	2000      	movs	r0, #0
 800df02:	6031      	str	r1, [r6, #0]
 800df04:	602b      	str	r3, [r5, #0]
 800df06:	b016      	add	sp, #88	; 0x58
 800df08:	bd70      	pop	{r4, r5, r6, pc}
 800df0a:	466a      	mov	r2, sp
 800df0c:	f000 f848 	bl	800dfa0 <_fstat_r>
 800df10:	2800      	cmp	r0, #0
 800df12:	dbec      	blt.n	800deee <__swhatbuf_r+0x12>
 800df14:	9901      	ldr	r1, [sp, #4]
 800df16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800df1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800df1e:	4259      	negs	r1, r3
 800df20:	4159      	adcs	r1, r3
 800df22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df26:	e7eb      	b.n	800df00 <__swhatbuf_r+0x24>

0800df28 <__smakebuf_r>:
 800df28:	898b      	ldrh	r3, [r1, #12]
 800df2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df2c:	079d      	lsls	r5, r3, #30
 800df2e:	4606      	mov	r6, r0
 800df30:	460c      	mov	r4, r1
 800df32:	d507      	bpl.n	800df44 <__smakebuf_r+0x1c>
 800df34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	6123      	str	r3, [r4, #16]
 800df3c:	2301      	movs	r3, #1
 800df3e:	6163      	str	r3, [r4, #20]
 800df40:	b002      	add	sp, #8
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	ab01      	add	r3, sp, #4
 800df46:	466a      	mov	r2, sp
 800df48:	f7ff ffc8 	bl	800dedc <__swhatbuf_r>
 800df4c:	9900      	ldr	r1, [sp, #0]
 800df4e:	4605      	mov	r5, r0
 800df50:	4630      	mov	r0, r6
 800df52:	f7fe fecb 	bl	800ccec <_malloc_r>
 800df56:	b948      	cbnz	r0, 800df6c <__smakebuf_r+0x44>
 800df58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df5c:	059a      	lsls	r2, r3, #22
 800df5e:	d4ef      	bmi.n	800df40 <__smakebuf_r+0x18>
 800df60:	f023 0303 	bic.w	r3, r3, #3
 800df64:	f043 0302 	orr.w	r3, r3, #2
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	e7e3      	b.n	800df34 <__smakebuf_r+0xc>
 800df6c:	89a3      	ldrh	r3, [r4, #12]
 800df6e:	6020      	str	r0, [r4, #0]
 800df70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df74:	81a3      	strh	r3, [r4, #12]
 800df76:	9b00      	ldr	r3, [sp, #0]
 800df78:	6163      	str	r3, [r4, #20]
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	6120      	str	r0, [r4, #16]
 800df7e:	b15b      	cbz	r3, 800df98 <__smakebuf_r+0x70>
 800df80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df84:	4630      	mov	r0, r6
 800df86:	f000 f81d 	bl	800dfc4 <_isatty_r>
 800df8a:	b128      	cbz	r0, 800df98 <__smakebuf_r+0x70>
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	f023 0303 	bic.w	r3, r3, #3
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	81a3      	strh	r3, [r4, #12]
 800df98:	89a3      	ldrh	r3, [r4, #12]
 800df9a:	431d      	orrs	r5, r3
 800df9c:	81a5      	strh	r5, [r4, #12]
 800df9e:	e7cf      	b.n	800df40 <__smakebuf_r+0x18>

0800dfa0 <_fstat_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d07      	ldr	r5, [pc, #28]	; (800dfc0 <_fstat_r+0x20>)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	602b      	str	r3, [r5, #0]
 800dfae:	f7f7 fd25 	bl	80059fc <_fstat>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	d102      	bne.n	800dfbc <_fstat_r+0x1c>
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	b103      	cbz	r3, 800dfbc <_fstat_r+0x1c>
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20001de0 	.word	0x20001de0

0800dfc4 <_isatty_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d06      	ldr	r5, [pc, #24]	; (800dfe0 <_isatty_r+0x1c>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	f7f7 fd1a 	bl	8005a08 <_isatty>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_isatty_r+0x1a>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_isatty_r+0x1a>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20001de0 	.word	0x20001de0

0800dfe4 <fmod>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	ed2d 8b02 	vpush	{d8}
 800dfea:	ec57 6b10 	vmov	r6, r7, d0
 800dfee:	ec55 4b11 	vmov	r4, r5, d1
 800dff2:	f000 f9b5 	bl	800e360 <__ieee754_fmod>
 800dff6:	4622      	mov	r2, r4
 800dff8:	462b      	mov	r3, r5
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	eeb0 8a40 	vmov.f32	s16, s0
 800e002:	eef0 8a60 	vmov.f32	s17, s1
 800e006:	f7f2 fdb9 	bl	8000b7c <__aeabi_dcmpun>
 800e00a:	b990      	cbnz	r0, 800e032 <fmod+0x4e>
 800e00c:	2200      	movs	r2, #0
 800e00e:	2300      	movs	r3, #0
 800e010:	4620      	mov	r0, r4
 800e012:	4629      	mov	r1, r5
 800e014:	f7f2 fd80 	bl	8000b18 <__aeabi_dcmpeq>
 800e018:	b158      	cbz	r0, 800e032 <fmod+0x4e>
 800e01a:	f7fd ff3b 	bl	800be94 <__errno>
 800e01e:	2321      	movs	r3, #33	; 0x21
 800e020:	6003      	str	r3, [r0, #0]
 800e022:	2200      	movs	r2, #0
 800e024:	2300      	movs	r3, #0
 800e026:	4610      	mov	r0, r2
 800e028:	4619      	mov	r1, r3
 800e02a:	f7f2 fc37 	bl	800089c <__aeabi_ddiv>
 800e02e:	ec41 0b18 	vmov	d8, r0, r1
 800e032:	eeb0 0a48 	vmov.f32	s0, s16
 800e036:	eef0 0a68 	vmov.f32	s1, s17
 800e03a:	ecbd 8b02 	vpop	{d8}
 800e03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e040 <sqrt>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	ed2d 8b02 	vpush	{d8}
 800e046:	ec55 4b10 	vmov	r4, r5, d0
 800e04a:	f000 f8af 	bl	800e1ac <__ieee754_sqrt>
 800e04e:	4622      	mov	r2, r4
 800e050:	462b      	mov	r3, r5
 800e052:	4620      	mov	r0, r4
 800e054:	4629      	mov	r1, r5
 800e056:	eeb0 8a40 	vmov.f32	s16, s0
 800e05a:	eef0 8a60 	vmov.f32	s17, s1
 800e05e:	f7f2 fd8d 	bl	8000b7c <__aeabi_dcmpun>
 800e062:	b990      	cbnz	r0, 800e08a <sqrt+0x4a>
 800e064:	2200      	movs	r2, #0
 800e066:	2300      	movs	r3, #0
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 fd5e 	bl	8000b2c <__aeabi_dcmplt>
 800e070:	b158      	cbz	r0, 800e08a <sqrt+0x4a>
 800e072:	f7fd ff0f 	bl	800be94 <__errno>
 800e076:	2321      	movs	r3, #33	; 0x21
 800e078:	6003      	str	r3, [r0, #0]
 800e07a:	2200      	movs	r2, #0
 800e07c:	2300      	movs	r3, #0
 800e07e:	4610      	mov	r0, r2
 800e080:	4619      	mov	r1, r3
 800e082:	f7f2 fc0b 	bl	800089c <__aeabi_ddiv>
 800e086:	ec41 0b18 	vmov	d8, r0, r1
 800e08a:	eeb0 0a48 	vmov.f32	s0, s16
 800e08e:	eef0 0a68 	vmov.f32	s1, s17
 800e092:	ecbd 8b02 	vpop	{d8}
 800e096:	bd38      	pop	{r3, r4, r5, pc}

0800e098 <cosf>:
 800e098:	ee10 3a10 	vmov	r3, s0
 800e09c:	b507      	push	{r0, r1, r2, lr}
 800e09e:	4a1e      	ldr	r2, [pc, #120]	; (800e118 <cosf+0x80>)
 800e0a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	dc06      	bgt.n	800e0b6 <cosf+0x1e>
 800e0a8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800e11c <cosf+0x84>
 800e0ac:	b003      	add	sp, #12
 800e0ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0b2:	f000 ba63 	b.w	800e57c <__kernel_cosf>
 800e0b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e0ba:	db04      	blt.n	800e0c6 <cosf+0x2e>
 800e0bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e0c0:	b003      	add	sp, #12
 800e0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0c6:	4668      	mov	r0, sp
 800e0c8:	f000 fafe 	bl	800e6c8 <__ieee754_rem_pio2f>
 800e0cc:	f000 0003 	and.w	r0, r0, #3
 800e0d0:	2801      	cmp	r0, #1
 800e0d2:	d009      	beq.n	800e0e8 <cosf+0x50>
 800e0d4:	2802      	cmp	r0, #2
 800e0d6:	d010      	beq.n	800e0fa <cosf+0x62>
 800e0d8:	b9b0      	cbnz	r0, 800e108 <cosf+0x70>
 800e0da:	eddd 0a01 	vldr	s1, [sp, #4]
 800e0de:	ed9d 0a00 	vldr	s0, [sp]
 800e0e2:	f000 fa4b 	bl	800e57c <__kernel_cosf>
 800e0e6:	e7eb      	b.n	800e0c0 <cosf+0x28>
 800e0e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800e0ec:	ed9d 0a00 	vldr	s0, [sp]
 800e0f0:	f000 faa2 	bl	800e638 <__kernel_sinf>
 800e0f4:	eeb1 0a40 	vneg.f32	s0, s0
 800e0f8:	e7e2      	b.n	800e0c0 <cosf+0x28>
 800e0fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800e0fe:	ed9d 0a00 	vldr	s0, [sp]
 800e102:	f000 fa3b 	bl	800e57c <__kernel_cosf>
 800e106:	e7f5      	b.n	800e0f4 <cosf+0x5c>
 800e108:	eddd 0a01 	vldr	s1, [sp, #4]
 800e10c:	ed9d 0a00 	vldr	s0, [sp]
 800e110:	2001      	movs	r0, #1
 800e112:	f000 fa91 	bl	800e638 <__kernel_sinf>
 800e116:	e7d3      	b.n	800e0c0 <cosf+0x28>
 800e118:	3f490fd8 	.word	0x3f490fd8
 800e11c:	00000000 	.word	0x00000000

0800e120 <sinf>:
 800e120:	ee10 3a10 	vmov	r3, s0
 800e124:	b507      	push	{r0, r1, r2, lr}
 800e126:	4a1f      	ldr	r2, [pc, #124]	; (800e1a4 <sinf+0x84>)
 800e128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e12c:	4293      	cmp	r3, r2
 800e12e:	dc07      	bgt.n	800e140 <sinf+0x20>
 800e130:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800e1a8 <sinf+0x88>
 800e134:	2000      	movs	r0, #0
 800e136:	b003      	add	sp, #12
 800e138:	f85d eb04 	ldr.w	lr, [sp], #4
 800e13c:	f000 ba7c 	b.w	800e638 <__kernel_sinf>
 800e140:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e144:	db04      	blt.n	800e150 <sinf+0x30>
 800e146:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e14a:	b003      	add	sp, #12
 800e14c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e150:	4668      	mov	r0, sp
 800e152:	f000 fab9 	bl	800e6c8 <__ieee754_rem_pio2f>
 800e156:	f000 0003 	and.w	r0, r0, #3
 800e15a:	2801      	cmp	r0, #1
 800e15c:	d00a      	beq.n	800e174 <sinf+0x54>
 800e15e:	2802      	cmp	r0, #2
 800e160:	d00f      	beq.n	800e182 <sinf+0x62>
 800e162:	b9c0      	cbnz	r0, 800e196 <sinf+0x76>
 800e164:	eddd 0a01 	vldr	s1, [sp, #4]
 800e168:	ed9d 0a00 	vldr	s0, [sp]
 800e16c:	2001      	movs	r0, #1
 800e16e:	f000 fa63 	bl	800e638 <__kernel_sinf>
 800e172:	e7ea      	b.n	800e14a <sinf+0x2a>
 800e174:	eddd 0a01 	vldr	s1, [sp, #4]
 800e178:	ed9d 0a00 	vldr	s0, [sp]
 800e17c:	f000 f9fe 	bl	800e57c <__kernel_cosf>
 800e180:	e7e3      	b.n	800e14a <sinf+0x2a>
 800e182:	eddd 0a01 	vldr	s1, [sp, #4]
 800e186:	ed9d 0a00 	vldr	s0, [sp]
 800e18a:	2001      	movs	r0, #1
 800e18c:	f000 fa54 	bl	800e638 <__kernel_sinf>
 800e190:	eeb1 0a40 	vneg.f32	s0, s0
 800e194:	e7d9      	b.n	800e14a <sinf+0x2a>
 800e196:	eddd 0a01 	vldr	s1, [sp, #4]
 800e19a:	ed9d 0a00 	vldr	s0, [sp]
 800e19e:	f000 f9ed 	bl	800e57c <__kernel_cosf>
 800e1a2:	e7f5      	b.n	800e190 <sinf+0x70>
 800e1a4:	3f490fd8 	.word	0x3f490fd8
 800e1a8:	00000000 	.word	0x00000000

0800e1ac <__ieee754_sqrt>:
 800e1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b0:	ec55 4b10 	vmov	r4, r5, d0
 800e1b4:	4e67      	ldr	r6, [pc, #412]	; (800e354 <__ieee754_sqrt+0x1a8>)
 800e1b6:	43ae      	bics	r6, r5
 800e1b8:	ee10 0a10 	vmov	r0, s0
 800e1bc:	ee10 2a10 	vmov	r2, s0
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	d10d      	bne.n	800e1e2 <__ieee754_sqrt+0x36>
 800e1c6:	f7f2 fa3f 	bl	8000648 <__aeabi_dmul>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 f883 	bl	80002dc <__adddf3>
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	460d      	mov	r5, r1
 800e1da:	ec45 4b10 	vmov	d0, r4, r5
 800e1de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	dc0b      	bgt.n	800e1fe <__ieee754_sqrt+0x52>
 800e1e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e1ea:	4326      	orrs	r6, r4
 800e1ec:	d0f5      	beq.n	800e1da <__ieee754_sqrt+0x2e>
 800e1ee:	b135      	cbz	r5, 800e1fe <__ieee754_sqrt+0x52>
 800e1f0:	f7f2 f872 	bl	80002d8 <__aeabi_dsub>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	f7f2 fb50 	bl	800089c <__aeabi_ddiv>
 800e1fc:	e7eb      	b.n	800e1d6 <__ieee754_sqrt+0x2a>
 800e1fe:	1509      	asrs	r1, r1, #20
 800e200:	f000 808d 	beq.w	800e31e <__ieee754_sqrt+0x172>
 800e204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e208:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e20c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e210:	07c9      	lsls	r1, r1, #31
 800e212:	bf5c      	itt	pl
 800e214:	005b      	lslpl	r3, r3, #1
 800e216:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e21a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e21e:	bf58      	it	pl
 800e220:	0052      	lslpl	r2, r2, #1
 800e222:	2500      	movs	r5, #0
 800e224:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e228:	1076      	asrs	r6, r6, #1
 800e22a:	0052      	lsls	r2, r2, #1
 800e22c:	f04f 0e16 	mov.w	lr, #22
 800e230:	46ac      	mov	ip, r5
 800e232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e236:	eb0c 0001 	add.w	r0, ip, r1
 800e23a:	4298      	cmp	r0, r3
 800e23c:	bfde      	ittt	le
 800e23e:	1a1b      	suble	r3, r3, r0
 800e240:	eb00 0c01 	addle.w	ip, r0, r1
 800e244:	186d      	addle	r5, r5, r1
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	f1be 0e01 	subs.w	lr, lr, #1
 800e24c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e250:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e254:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e258:	d1ed      	bne.n	800e236 <__ieee754_sqrt+0x8a>
 800e25a:	4674      	mov	r4, lr
 800e25c:	2720      	movs	r7, #32
 800e25e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e262:	4563      	cmp	r3, ip
 800e264:	eb01 000e 	add.w	r0, r1, lr
 800e268:	dc02      	bgt.n	800e270 <__ieee754_sqrt+0xc4>
 800e26a:	d113      	bne.n	800e294 <__ieee754_sqrt+0xe8>
 800e26c:	4290      	cmp	r0, r2
 800e26e:	d811      	bhi.n	800e294 <__ieee754_sqrt+0xe8>
 800e270:	2800      	cmp	r0, #0
 800e272:	eb00 0e01 	add.w	lr, r0, r1
 800e276:	da57      	bge.n	800e328 <__ieee754_sqrt+0x17c>
 800e278:	f1be 0f00 	cmp.w	lr, #0
 800e27c:	db54      	blt.n	800e328 <__ieee754_sqrt+0x17c>
 800e27e:	f10c 0801 	add.w	r8, ip, #1
 800e282:	eba3 030c 	sub.w	r3, r3, ip
 800e286:	4290      	cmp	r0, r2
 800e288:	bf88      	it	hi
 800e28a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e28e:	1a12      	subs	r2, r2, r0
 800e290:	440c      	add	r4, r1
 800e292:	46c4      	mov	ip, r8
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	3f01      	subs	r7, #1
 800e298:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e29c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e2a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2a4:	d1dd      	bne.n	800e262 <__ieee754_sqrt+0xb6>
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	d01b      	beq.n	800e2e2 <__ieee754_sqrt+0x136>
 800e2aa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e358 <__ieee754_sqrt+0x1ac>
 800e2ae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e35c <__ieee754_sqrt+0x1b0>
 800e2b2:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2b6:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2ba:	f7f2 f80d 	bl	80002d8 <__aeabi_dsub>
 800e2be:	e9da 8900 	ldrd	r8, r9, [sl]
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	f7f2 fc39 	bl	8000b40 <__aeabi_dcmple>
 800e2ce:	b140      	cbz	r0, 800e2e2 <__ieee754_sqrt+0x136>
 800e2d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e2d4:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2d8:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2dc:	d126      	bne.n	800e32c <__ieee754_sqrt+0x180>
 800e2de:	3501      	adds	r5, #1
 800e2e0:	463c      	mov	r4, r7
 800e2e2:	106a      	asrs	r2, r5, #1
 800e2e4:	0863      	lsrs	r3, r4, #1
 800e2e6:	07e9      	lsls	r1, r5, #31
 800e2e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e2ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e2f0:	bf48      	it	mi
 800e2f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e2f6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e2fa:	461c      	mov	r4, r3
 800e2fc:	e76d      	b.n	800e1da <__ieee754_sqrt+0x2e>
 800e2fe:	0ad3      	lsrs	r3, r2, #11
 800e300:	3815      	subs	r0, #21
 800e302:	0552      	lsls	r2, r2, #21
 800e304:	2b00      	cmp	r3, #0
 800e306:	d0fa      	beq.n	800e2fe <__ieee754_sqrt+0x152>
 800e308:	02dc      	lsls	r4, r3, #11
 800e30a:	d50a      	bpl.n	800e322 <__ieee754_sqrt+0x176>
 800e30c:	f1c1 0420 	rsb	r4, r1, #32
 800e310:	fa22 f404 	lsr.w	r4, r2, r4
 800e314:	1e4d      	subs	r5, r1, #1
 800e316:	408a      	lsls	r2, r1
 800e318:	4323      	orrs	r3, r4
 800e31a:	1b41      	subs	r1, r0, r5
 800e31c:	e772      	b.n	800e204 <__ieee754_sqrt+0x58>
 800e31e:	4608      	mov	r0, r1
 800e320:	e7f0      	b.n	800e304 <__ieee754_sqrt+0x158>
 800e322:	005b      	lsls	r3, r3, #1
 800e324:	3101      	adds	r1, #1
 800e326:	e7ef      	b.n	800e308 <__ieee754_sqrt+0x15c>
 800e328:	46e0      	mov	r8, ip
 800e32a:	e7aa      	b.n	800e282 <__ieee754_sqrt+0xd6>
 800e32c:	f7f1 ffd6 	bl	80002dc <__adddf3>
 800e330:	e9da 8900 	ldrd	r8, r9, [sl]
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	4640      	mov	r0, r8
 800e33a:	4649      	mov	r1, r9
 800e33c:	f7f2 fbf6 	bl	8000b2c <__aeabi_dcmplt>
 800e340:	b120      	cbz	r0, 800e34c <__ieee754_sqrt+0x1a0>
 800e342:	1ca0      	adds	r0, r4, #2
 800e344:	bf08      	it	eq
 800e346:	3501      	addeq	r5, #1
 800e348:	3402      	adds	r4, #2
 800e34a:	e7ca      	b.n	800e2e2 <__ieee754_sqrt+0x136>
 800e34c:	3401      	adds	r4, #1
 800e34e:	f024 0401 	bic.w	r4, r4, #1
 800e352:	e7c6      	b.n	800e2e2 <__ieee754_sqrt+0x136>
 800e354:	7ff00000 	.word	0x7ff00000
 800e358:	20000770 	.word	0x20000770
 800e35c:	20000778 	.word	0x20000778

0800e360 <__ieee754_fmod>:
 800e360:	ec53 2b11 	vmov	r2, r3, d1
 800e364:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	ea5c 0402 	orrs.w	r4, ip, r2
 800e370:	ec51 0b10 	vmov	r0, r1, d0
 800e374:	ee11 7a10 	vmov	r7, s2
 800e378:	ee11 ea10 	vmov	lr, s2
 800e37c:	461e      	mov	r6, r3
 800e37e:	d00c      	beq.n	800e39a <__ieee754_fmod+0x3a>
 800e380:	4c78      	ldr	r4, [pc, #480]	; (800e564 <__ieee754_fmod+0x204>)
 800e382:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e386:	45a0      	cmp	r8, r4
 800e388:	4689      	mov	r9, r1
 800e38a:	dc06      	bgt.n	800e39a <__ieee754_fmod+0x3a>
 800e38c:	4254      	negs	r4, r2
 800e38e:	4d76      	ldr	r5, [pc, #472]	; (800e568 <__ieee754_fmod+0x208>)
 800e390:	4314      	orrs	r4, r2
 800e392:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800e396:	42ac      	cmp	r4, r5
 800e398:	d909      	bls.n	800e3ae <__ieee754_fmod+0x4e>
 800e39a:	f7f2 f955 	bl	8000648 <__aeabi_dmul>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	f7f2 fa7b 	bl	800089c <__aeabi_ddiv>
 800e3a6:	ec41 0b10 	vmov	d0, r0, r1
 800e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ae:	45e0      	cmp	r8, ip
 800e3b0:	ee10 aa10 	vmov	sl, s0
 800e3b4:	ee10 4a10 	vmov	r4, s0
 800e3b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e3bc:	dc09      	bgt.n	800e3d2 <__ieee754_fmod+0x72>
 800e3be:	dbf2      	blt.n	800e3a6 <__ieee754_fmod+0x46>
 800e3c0:	4290      	cmp	r0, r2
 800e3c2:	d3f0      	bcc.n	800e3a6 <__ieee754_fmod+0x46>
 800e3c4:	d105      	bne.n	800e3d2 <__ieee754_fmod+0x72>
 800e3c6:	4b69      	ldr	r3, [pc, #420]	; (800e56c <__ieee754_fmod+0x20c>)
 800e3c8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800e3cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3d0:	e7e9      	b.n	800e3a6 <__ieee754_fmod+0x46>
 800e3d2:	4a65      	ldr	r2, [pc, #404]	; (800e568 <__ieee754_fmod+0x208>)
 800e3d4:	ea19 0f02 	tst.w	r9, r2
 800e3d8:	d148      	bne.n	800e46c <__ieee754_fmod+0x10c>
 800e3da:	f1b8 0f00 	cmp.w	r8, #0
 800e3de:	d13d      	bne.n	800e45c <__ieee754_fmod+0xfc>
 800e3e0:	4963      	ldr	r1, [pc, #396]	; (800e570 <__ieee754_fmod+0x210>)
 800e3e2:	4653      	mov	r3, sl
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	dc36      	bgt.n	800e456 <__ieee754_fmod+0xf6>
 800e3e8:	4216      	tst	r6, r2
 800e3ea:	d14f      	bne.n	800e48c <__ieee754_fmod+0x12c>
 800e3ec:	f1bc 0f00 	cmp.w	ip, #0
 800e3f0:	d144      	bne.n	800e47c <__ieee754_fmod+0x11c>
 800e3f2:	4a5f      	ldr	r2, [pc, #380]	; (800e570 <__ieee754_fmod+0x210>)
 800e3f4:	463b      	mov	r3, r7
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	dc3d      	bgt.n	800e476 <__ieee754_fmod+0x116>
 800e3fa:	485e      	ldr	r0, [pc, #376]	; (800e574 <__ieee754_fmod+0x214>)
 800e3fc:	4281      	cmp	r1, r0
 800e3fe:	db4a      	blt.n	800e496 <__ieee754_fmod+0x136>
 800e400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e408:	485a      	ldr	r0, [pc, #360]	; (800e574 <__ieee754_fmod+0x214>)
 800e40a:	4282      	cmp	r2, r0
 800e40c:	db57      	blt.n	800e4be <__ieee754_fmod+0x15e>
 800e40e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e412:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800e416:	1a89      	subs	r1, r1, r2
 800e418:	1b98      	subs	r0, r3, r6
 800e41a:	eba4 070e 	sub.w	r7, r4, lr
 800e41e:	2900      	cmp	r1, #0
 800e420:	d162      	bne.n	800e4e8 <__ieee754_fmod+0x188>
 800e422:	4574      	cmp	r4, lr
 800e424:	bf38      	it	cc
 800e426:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e42a:	2800      	cmp	r0, #0
 800e42c:	bfa4      	itt	ge
 800e42e:	463c      	movge	r4, r7
 800e430:	4603      	movge	r3, r0
 800e432:	ea53 0104 	orrs.w	r1, r3, r4
 800e436:	d0c6      	beq.n	800e3c6 <__ieee754_fmod+0x66>
 800e438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e43c:	db69      	blt.n	800e512 <__ieee754_fmod+0x1b2>
 800e43e:	494d      	ldr	r1, [pc, #308]	; (800e574 <__ieee754_fmod+0x214>)
 800e440:	428a      	cmp	r2, r1
 800e442:	db6c      	blt.n	800e51e <__ieee754_fmod+0x1be>
 800e444:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e448:	432b      	orrs	r3, r5
 800e44a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e44e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e452:	4620      	mov	r0, r4
 800e454:	e7a7      	b.n	800e3a6 <__ieee754_fmod+0x46>
 800e456:	3901      	subs	r1, #1
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	e7c3      	b.n	800e3e4 <__ieee754_fmod+0x84>
 800e45c:	4945      	ldr	r1, [pc, #276]	; (800e574 <__ieee754_fmod+0x214>)
 800e45e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e462:	2b00      	cmp	r3, #0
 800e464:	ddc0      	ble.n	800e3e8 <__ieee754_fmod+0x88>
 800e466:	3901      	subs	r1, #1
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	e7fa      	b.n	800e462 <__ieee754_fmod+0x102>
 800e46c:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e470:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e474:	e7b8      	b.n	800e3e8 <__ieee754_fmod+0x88>
 800e476:	3a01      	subs	r2, #1
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	e7bc      	b.n	800e3f6 <__ieee754_fmod+0x96>
 800e47c:	4a3d      	ldr	r2, [pc, #244]	; (800e574 <__ieee754_fmod+0x214>)
 800e47e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800e482:	2b00      	cmp	r3, #0
 800e484:	ddb9      	ble.n	800e3fa <__ieee754_fmod+0x9a>
 800e486:	3a01      	subs	r2, #1
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	e7fa      	b.n	800e482 <__ieee754_fmod+0x122>
 800e48c:	ea4f 522c 	mov.w	r2, ip, asr #20
 800e490:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e494:	e7b1      	b.n	800e3fa <__ieee754_fmod+0x9a>
 800e496:	1a40      	subs	r0, r0, r1
 800e498:	281f      	cmp	r0, #31
 800e49a:	dc0a      	bgt.n	800e4b2 <__ieee754_fmod+0x152>
 800e49c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800e4a0:	fa08 f800 	lsl.w	r8, r8, r0
 800e4a4:	fa2a f303 	lsr.w	r3, sl, r3
 800e4a8:	ea43 0308 	orr.w	r3, r3, r8
 800e4ac:	fa0a f400 	lsl.w	r4, sl, r0
 800e4b0:	e7aa      	b.n	800e408 <__ieee754_fmod+0xa8>
 800e4b2:	4b31      	ldr	r3, [pc, #196]	; (800e578 <__ieee754_fmod+0x218>)
 800e4b4:	1a5b      	subs	r3, r3, r1
 800e4b6:	fa0a f303 	lsl.w	r3, sl, r3
 800e4ba:	2400      	movs	r4, #0
 800e4bc:	e7a4      	b.n	800e408 <__ieee754_fmod+0xa8>
 800e4be:	1a80      	subs	r0, r0, r2
 800e4c0:	281f      	cmp	r0, #31
 800e4c2:	dc0a      	bgt.n	800e4da <__ieee754_fmod+0x17a>
 800e4c4:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800e4c8:	fa0c fc00 	lsl.w	ip, ip, r0
 800e4cc:	fa27 f606 	lsr.w	r6, r7, r6
 800e4d0:	ea46 060c 	orr.w	r6, r6, ip
 800e4d4:	fa07 fe00 	lsl.w	lr, r7, r0
 800e4d8:	e79d      	b.n	800e416 <__ieee754_fmod+0xb6>
 800e4da:	4e27      	ldr	r6, [pc, #156]	; (800e578 <__ieee754_fmod+0x218>)
 800e4dc:	1ab6      	subs	r6, r6, r2
 800e4de:	fa07 f606 	lsl.w	r6, r7, r6
 800e4e2:	f04f 0e00 	mov.w	lr, #0
 800e4e6:	e796      	b.n	800e416 <__ieee754_fmod+0xb6>
 800e4e8:	4574      	cmp	r4, lr
 800e4ea:	bf38      	it	cc
 800e4ec:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	da05      	bge.n	800e500 <__ieee754_fmod+0x1a0>
 800e4f4:	0fe0      	lsrs	r0, r4, #31
 800e4f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e4fa:	0064      	lsls	r4, r4, #1
 800e4fc:	3901      	subs	r1, #1
 800e4fe:	e78b      	b.n	800e418 <__ieee754_fmod+0xb8>
 800e500:	ea50 0307 	orrs.w	r3, r0, r7
 800e504:	f43f af5f 	beq.w	800e3c6 <__ieee754_fmod+0x66>
 800e508:	0ffb      	lsrs	r3, r7, #31
 800e50a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e50e:	007c      	lsls	r4, r7, #1
 800e510:	e7f4      	b.n	800e4fc <__ieee754_fmod+0x19c>
 800e512:	0fe1      	lsrs	r1, r4, #31
 800e514:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e518:	0064      	lsls	r4, r4, #1
 800e51a:	3a01      	subs	r2, #1
 800e51c:	e78c      	b.n	800e438 <__ieee754_fmod+0xd8>
 800e51e:	1a89      	subs	r1, r1, r2
 800e520:	2914      	cmp	r1, #20
 800e522:	dc0a      	bgt.n	800e53a <__ieee754_fmod+0x1da>
 800e524:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e528:	fa03 f202 	lsl.w	r2, r3, r2
 800e52c:	40cc      	lsrs	r4, r1
 800e52e:	4322      	orrs	r2, r4
 800e530:	410b      	asrs	r3, r1
 800e532:	ea43 0105 	orr.w	r1, r3, r5
 800e536:	4610      	mov	r0, r2
 800e538:	e735      	b.n	800e3a6 <__ieee754_fmod+0x46>
 800e53a:	291f      	cmp	r1, #31
 800e53c:	dc07      	bgt.n	800e54e <__ieee754_fmod+0x1ee>
 800e53e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e542:	40cc      	lsrs	r4, r1
 800e544:	fa03 f202 	lsl.w	r2, r3, r2
 800e548:	4322      	orrs	r2, r4
 800e54a:	462b      	mov	r3, r5
 800e54c:	e7f1      	b.n	800e532 <__ieee754_fmod+0x1d2>
 800e54e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e552:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e556:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e55a:	32e2      	adds	r2, #226	; 0xe2
 800e55c:	fa43 f202 	asr.w	r2, r3, r2
 800e560:	e7f3      	b.n	800e54a <__ieee754_fmod+0x1ea>
 800e562:	bf00      	nop
 800e564:	7fefffff 	.word	0x7fefffff
 800e568:	7ff00000 	.word	0x7ff00000
 800e56c:	0800f4f0 	.word	0x0800f4f0
 800e570:	fffffbed 	.word	0xfffffbed
 800e574:	fffffc02 	.word	0xfffffc02
 800e578:	fffffbe2 	.word	0xfffffbe2

0800e57c <__kernel_cosf>:
 800e57c:	ee10 3a10 	vmov	r3, s0
 800e580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e584:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e58c:	da05      	bge.n	800e59a <__kernel_cosf+0x1e>
 800e58e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e592:	ee17 2a90 	vmov	r2, s15
 800e596:	2a00      	cmp	r2, #0
 800e598:	d03b      	beq.n	800e612 <__kernel_cosf+0x96>
 800e59a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e59e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e618 <__kernel_cosf+0x9c>
 800e5a2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800e61c <__kernel_cosf+0xa0>
 800e5a6:	4a1e      	ldr	r2, [pc, #120]	; (800e620 <__kernel_cosf+0xa4>)
 800e5a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800e624 <__kernel_cosf+0xa8>
 800e5b2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5b6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800e628 <__kernel_cosf+0xac>
 800e5ba:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e5be:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800e62c <__kernel_cosf+0xb0>
 800e5c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5c6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800e630 <__kernel_cosf+0xb4>
 800e5ca:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e5ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800e5d2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e5d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e5da:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e2:	dc04      	bgt.n	800e5ee <__kernel_cosf+0x72>
 800e5e4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e5e8:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800e5ec:	4770      	bx	lr
 800e5ee:	4a11      	ldr	r2, [pc, #68]	; (800e634 <__kernel_cosf+0xb8>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	bfda      	itte	le
 800e5f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e5f8:	ee07 3a10 	vmovle	s14, r3
 800e5fc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800e600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e604:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800e608:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e60c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e610:	4770      	bx	lr
 800e612:	eeb0 0a66 	vmov.f32	s0, s13
 800e616:	4770      	bx	lr
 800e618:	ad47d74e 	.word	0xad47d74e
 800e61c:	310f74f6 	.word	0x310f74f6
 800e620:	3e999999 	.word	0x3e999999
 800e624:	b493f27c 	.word	0xb493f27c
 800e628:	37d00d01 	.word	0x37d00d01
 800e62c:	bab60b61 	.word	0xbab60b61
 800e630:	3d2aaaab 	.word	0x3d2aaaab
 800e634:	3f480000 	.word	0x3f480000

0800e638 <__kernel_sinf>:
 800e638:	ee10 3a10 	vmov	r3, s0
 800e63c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e640:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e644:	da04      	bge.n	800e650 <__kernel_sinf+0x18>
 800e646:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e64a:	ee17 3a90 	vmov	r3, s15
 800e64e:	b35b      	cbz	r3, 800e6a8 <__kernel_sinf+0x70>
 800e650:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e654:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e6ac <__kernel_sinf+0x74>
 800e658:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e6b0 <__kernel_sinf+0x78>
 800e65c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e660:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e6b4 <__kernel_sinf+0x7c>
 800e664:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e668:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e6b8 <__kernel_sinf+0x80>
 800e66c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e670:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e6bc <__kernel_sinf+0x84>
 800e674:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e678:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e67c:	b930      	cbnz	r0, 800e68c <__kernel_sinf+0x54>
 800e67e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e6c0 <__kernel_sinf+0x88>
 800e682:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e686:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e68a:	4770      	bx	lr
 800e68c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e690:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e694:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e698:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e69c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e6c4 <__kernel_sinf+0x8c>
 800e6a0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e6a4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	2f2ec9d3 	.word	0x2f2ec9d3
 800e6b0:	b2d72f34 	.word	0xb2d72f34
 800e6b4:	3638ef1b 	.word	0x3638ef1b
 800e6b8:	b9500d01 	.word	0xb9500d01
 800e6bc:	3c088889 	.word	0x3c088889
 800e6c0:	be2aaaab 	.word	0xbe2aaaab
 800e6c4:	3e2aaaab 	.word	0x3e2aaaab

0800e6c8 <__ieee754_rem_pio2f>:
 800e6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ca:	ee10 6a10 	vmov	r6, s0
 800e6ce:	4b86      	ldr	r3, [pc, #536]	; (800e8e8 <__ieee754_rem_pio2f+0x220>)
 800e6d0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e6d4:	429d      	cmp	r5, r3
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	4604      	mov	r4, r0
 800e6da:	dc05      	bgt.n	800e6e8 <__ieee754_rem_pio2f+0x20>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	ed80 0a00 	vstr	s0, [r0]
 800e6e2:	6043      	str	r3, [r0, #4]
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e020      	b.n	800e72a <__ieee754_rem_pio2f+0x62>
 800e6e8:	4b80      	ldr	r3, [pc, #512]	; (800e8ec <__ieee754_rem_pio2f+0x224>)
 800e6ea:	429d      	cmp	r5, r3
 800e6ec:	dc38      	bgt.n	800e760 <__ieee754_rem_pio2f+0x98>
 800e6ee:	2e00      	cmp	r6, #0
 800e6f0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800e8f0 <__ieee754_rem_pio2f+0x228>
 800e6f4:	4b7f      	ldr	r3, [pc, #508]	; (800e8f4 <__ieee754_rem_pio2f+0x22c>)
 800e6f6:	f025 050f 	bic.w	r5, r5, #15
 800e6fa:	dd18      	ble.n	800e72e <__ieee754_rem_pio2f+0x66>
 800e6fc:	429d      	cmp	r5, r3
 800e6fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e702:	bf09      	itett	eq
 800e704:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800e8f8 <__ieee754_rem_pio2f+0x230>
 800e708:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800e8fc <__ieee754_rem_pio2f+0x234>
 800e70c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e710:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800e900 <__ieee754_rem_pio2f+0x238>
 800e714:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e71c:	edc0 6a00 	vstr	s13, [r0]
 800e720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e724:	edc0 7a01 	vstr	s15, [r0, #4]
 800e728:	2001      	movs	r0, #1
 800e72a:	b007      	add	sp, #28
 800e72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e72e:	429d      	cmp	r5, r3
 800e730:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e734:	bf09      	itett	eq
 800e736:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800e8f8 <__ieee754_rem_pio2f+0x230>
 800e73a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800e8fc <__ieee754_rem_pio2f+0x234>
 800e73e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e742:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800e900 <__ieee754_rem_pio2f+0x238>
 800e746:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e74a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e74e:	edc0 6a00 	vstr	s13, [r0]
 800e752:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e756:	edc0 7a01 	vstr	s15, [r0, #4]
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295
 800e75e:	e7e4      	b.n	800e72a <__ieee754_rem_pio2f+0x62>
 800e760:	4b68      	ldr	r3, [pc, #416]	; (800e904 <__ieee754_rem_pio2f+0x23c>)
 800e762:	429d      	cmp	r5, r3
 800e764:	dc71      	bgt.n	800e84a <__ieee754_rem_pio2f+0x182>
 800e766:	f000 f8db 	bl	800e920 <fabsf>
 800e76a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e908 <__ieee754_rem_pio2f+0x240>
 800e76e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e772:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e77a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e77e:	ee17 0a90 	vmov	r0, s15
 800e782:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e8f0 <__ieee754_rem_pio2f+0x228>
 800e786:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e78a:	281f      	cmp	r0, #31
 800e78c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e8fc <__ieee754_rem_pio2f+0x234>
 800e790:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e794:	eeb1 6a47 	vneg.f32	s12, s14
 800e798:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e79c:	ee16 2a90 	vmov	r2, s13
 800e7a0:	dc1c      	bgt.n	800e7dc <__ieee754_rem_pio2f+0x114>
 800e7a2:	495a      	ldr	r1, [pc, #360]	; (800e90c <__ieee754_rem_pio2f+0x244>)
 800e7a4:	1e47      	subs	r7, r0, #1
 800e7a6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e7aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e7ae:	428b      	cmp	r3, r1
 800e7b0:	d014      	beq.n	800e7dc <__ieee754_rem_pio2f+0x114>
 800e7b2:	6022      	str	r2, [r4, #0]
 800e7b4:	ed94 7a00 	vldr	s14, [r4]
 800e7b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e7bc:	2e00      	cmp	r6, #0
 800e7be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e7c2:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7c6:	dab0      	bge.n	800e72a <__ieee754_rem_pio2f+0x62>
 800e7c8:	eeb1 7a47 	vneg.f32	s14, s14
 800e7cc:	eeb1 0a40 	vneg.f32	s0, s0
 800e7d0:	ed84 7a00 	vstr	s14, [r4]
 800e7d4:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7d8:	4240      	negs	r0, r0
 800e7da:	e7a6      	b.n	800e72a <__ieee754_rem_pio2f+0x62>
 800e7dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e7e0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800e7e4:	2908      	cmp	r1, #8
 800e7e6:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e7ea:	dde2      	ble.n	800e7b2 <__ieee754_rem_pio2f+0xea>
 800e7ec:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e8f8 <__ieee754_rem_pio2f+0x230>
 800e7f0:	eef0 6a40 	vmov.f32	s13, s0
 800e7f4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e7f8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e7fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e800:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e900 <__ieee754_rem_pio2f+0x238>
 800e804:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e808:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e80c:	ee15 2a90 	vmov	r2, s11
 800e810:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e814:	1a5b      	subs	r3, r3, r1
 800e816:	2b19      	cmp	r3, #25
 800e818:	dc04      	bgt.n	800e824 <__ieee754_rem_pio2f+0x15c>
 800e81a:	edc4 5a00 	vstr	s11, [r4]
 800e81e:	eeb0 0a66 	vmov.f32	s0, s13
 800e822:	e7c7      	b.n	800e7b4 <__ieee754_rem_pio2f+0xec>
 800e824:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e910 <__ieee754_rem_pio2f+0x248>
 800e828:	eeb0 0a66 	vmov.f32	s0, s13
 800e82c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e830:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e834:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e914 <__ieee754_rem_pio2f+0x24c>
 800e838:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e83c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e840:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e844:	ed84 7a00 	vstr	s14, [r4]
 800e848:	e7b4      	b.n	800e7b4 <__ieee754_rem_pio2f+0xec>
 800e84a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e84e:	db06      	blt.n	800e85e <__ieee754_rem_pio2f+0x196>
 800e850:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e854:	edc0 7a01 	vstr	s15, [r0, #4]
 800e858:	edc0 7a00 	vstr	s15, [r0]
 800e85c:	e742      	b.n	800e6e4 <__ieee754_rem_pio2f+0x1c>
 800e85e:	15ea      	asrs	r2, r5, #23
 800e860:	3a86      	subs	r2, #134	; 0x86
 800e862:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e866:	ee07 3a90 	vmov	s15, r3
 800e86a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e86e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800e918 <__ieee754_rem_pio2f+0x250>
 800e872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e87a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e87e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e882:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e88e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e892:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89e:	edcd 7a05 	vstr	s15, [sp, #20]
 800e8a2:	d11e      	bne.n	800e8e2 <__ieee754_rem_pio2f+0x21a>
 800e8a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ac:	bf14      	ite	ne
 800e8ae:	2302      	movne	r3, #2
 800e8b0:	2301      	moveq	r3, #1
 800e8b2:	491a      	ldr	r1, [pc, #104]	; (800e91c <__ieee754_rem_pio2f+0x254>)
 800e8b4:	9101      	str	r1, [sp, #4]
 800e8b6:	2102      	movs	r1, #2
 800e8b8:	9100      	str	r1, [sp, #0]
 800e8ba:	a803      	add	r0, sp, #12
 800e8bc:	4621      	mov	r1, r4
 800e8be:	f000 f837 	bl	800e930 <__kernel_rem_pio2f>
 800e8c2:	2e00      	cmp	r6, #0
 800e8c4:	f6bf af31 	bge.w	800e72a <__ieee754_rem_pio2f+0x62>
 800e8c8:	edd4 7a00 	vldr	s15, [r4]
 800e8cc:	eef1 7a67 	vneg.f32	s15, s15
 800e8d0:	edc4 7a00 	vstr	s15, [r4]
 800e8d4:	edd4 7a01 	vldr	s15, [r4, #4]
 800e8d8:	eef1 7a67 	vneg.f32	s15, s15
 800e8dc:	edc4 7a01 	vstr	s15, [r4, #4]
 800e8e0:	e77a      	b.n	800e7d8 <__ieee754_rem_pio2f+0x110>
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	e7e5      	b.n	800e8b2 <__ieee754_rem_pio2f+0x1ea>
 800e8e6:	bf00      	nop
 800e8e8:	3f490fd8 	.word	0x3f490fd8
 800e8ec:	4016cbe3 	.word	0x4016cbe3
 800e8f0:	3fc90f80 	.word	0x3fc90f80
 800e8f4:	3fc90fd0 	.word	0x3fc90fd0
 800e8f8:	37354400 	.word	0x37354400
 800e8fc:	37354443 	.word	0x37354443
 800e900:	2e85a308 	.word	0x2e85a308
 800e904:	43490f80 	.word	0x43490f80
 800e908:	3f22f984 	.word	0x3f22f984
 800e90c:	0800f500 	.word	0x0800f500
 800e910:	2e85a300 	.word	0x2e85a300
 800e914:	248d3132 	.word	0x248d3132
 800e918:	43800000 	.word	0x43800000
 800e91c:	0800f580 	.word	0x0800f580

0800e920 <fabsf>:
 800e920:	ee10 3a10 	vmov	r3, s0
 800e924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e928:	ee00 3a10 	vmov	s0, r3
 800e92c:	4770      	bx	lr
	...

0800e930 <__kernel_rem_pio2f>:
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	ed2d 8b04 	vpush	{d8-d9}
 800e938:	b0d9      	sub	sp, #356	; 0x164
 800e93a:	4688      	mov	r8, r1
 800e93c:	9002      	str	r0, [sp, #8]
 800e93e:	49b8      	ldr	r1, [pc, #736]	; (800ec20 <__kernel_rem_pio2f+0x2f0>)
 800e940:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e942:	9301      	str	r3, [sp, #4]
 800e944:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e948:	9901      	ldr	r1, [sp, #4]
 800e94a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800e94c:	f101 3bff 	add.w	fp, r1, #4294967295
 800e950:	1d11      	adds	r1, r2, #4
 800e952:	db25      	blt.n	800e9a0 <__kernel_rem_pio2f+0x70>
 800e954:	1ed0      	subs	r0, r2, #3
 800e956:	bf48      	it	mi
 800e958:	1d10      	addmi	r0, r2, #4
 800e95a:	10c0      	asrs	r0, r0, #3
 800e95c:	1c45      	adds	r5, r0, #1
 800e95e:	00e9      	lsls	r1, r5, #3
 800e960:	eba0 070b 	sub.w	r7, r0, fp
 800e964:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800e968:	9103      	str	r1, [sp, #12]
 800e96a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e96e:	eb0a 0c0b 	add.w	ip, sl, fp
 800e972:	ae1c      	add	r6, sp, #112	; 0x70
 800e974:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800e978:	2400      	movs	r4, #0
 800e97a:	4564      	cmp	r4, ip
 800e97c:	dd12      	ble.n	800e9a4 <__kernel_rem_pio2f+0x74>
 800e97e:	9901      	ldr	r1, [sp, #4]
 800e980:	ac1c      	add	r4, sp, #112	; 0x70
 800e982:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e986:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800e98a:	f04f 0c00 	mov.w	ip, #0
 800e98e:	45d4      	cmp	ip, sl
 800e990:	dc27      	bgt.n	800e9e2 <__kernel_rem_pio2f+0xb2>
 800e992:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e996:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800e99a:	4627      	mov	r7, r4
 800e99c:	2600      	movs	r6, #0
 800e99e:	e016      	b.n	800e9ce <__kernel_rem_pio2f+0x9e>
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	e7db      	b.n	800e95c <__kernel_rem_pio2f+0x2c>
 800e9a4:	42e7      	cmn	r7, r4
 800e9a6:	bf5d      	ittte	pl
 800e9a8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800e9ac:	ee07 1a90 	vmovpl	s15, r1
 800e9b0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e9b4:	eef0 7a47 	vmovmi.f32	s15, s14
 800e9b8:	ece6 7a01 	vstmia	r6!, {s15}
 800e9bc:	3401      	adds	r4, #1
 800e9be:	e7dc      	b.n	800e97a <__kernel_rem_pio2f+0x4a>
 800e9c0:	ecfe 6a01 	vldmia	lr!, {s13}
 800e9c4:	ed97 7a00 	vldr	s14, [r7]
 800e9c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e9cc:	3601      	adds	r6, #1
 800e9ce:	455e      	cmp	r6, fp
 800e9d0:	f1a7 0704 	sub.w	r7, r7, #4
 800e9d4:	ddf4      	ble.n	800e9c0 <__kernel_rem_pio2f+0x90>
 800e9d6:	ece9 7a01 	vstmia	r9!, {s15}
 800e9da:	f10c 0c01 	add.w	ip, ip, #1
 800e9de:	3404      	adds	r4, #4
 800e9e0:	e7d5      	b.n	800e98e <__kernel_rem_pio2f+0x5e>
 800e9e2:	a908      	add	r1, sp, #32
 800e9e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e9ec:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800ec2c <__kernel_rem_pio2f+0x2fc>
 800e9f0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800ec28 <__kernel_rem_pio2f+0x2f8>
 800e9f4:	9105      	str	r1, [sp, #20]
 800e9f6:	9304      	str	r3, [sp, #16]
 800e9f8:	4656      	mov	r6, sl
 800e9fa:	00b3      	lsls	r3, r6, #2
 800e9fc:	9306      	str	r3, [sp, #24]
 800e9fe:	ab58      	add	r3, sp, #352	; 0x160
 800ea00:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ea04:	ac08      	add	r4, sp, #32
 800ea06:	ab44      	add	r3, sp, #272	; 0x110
 800ea08:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ea0c:	46a4      	mov	ip, r4
 800ea0e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ea12:	4637      	mov	r7, r6
 800ea14:	2f00      	cmp	r7, #0
 800ea16:	f1a0 0004 	sub.w	r0, r0, #4
 800ea1a:	dc4a      	bgt.n	800eab2 <__kernel_rem_pio2f+0x182>
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	9207      	str	r2, [sp, #28]
 800ea20:	f000 f9f8 	bl	800ee14 <scalbnf>
 800ea24:	eeb0 8a40 	vmov.f32	s16, s0
 800ea28:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ea2c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ea30:	f000 fa56 	bl	800eee0 <floorf>
 800ea34:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ea38:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ea3c:	2d00      	cmp	r5, #0
 800ea3e:	9a07      	ldr	r2, [sp, #28]
 800ea40:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea44:	ee17 9a90 	vmov	r9, s15
 800ea48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea4c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ea50:	dd41      	ble.n	800ead6 <__kernel_rem_pio2f+0x1a6>
 800ea52:	f106 3cff 	add.w	ip, r6, #4294967295
 800ea56:	ab08      	add	r3, sp, #32
 800ea58:	f1c5 0e08 	rsb	lr, r5, #8
 800ea5c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ea60:	fa47 f00e 	asr.w	r0, r7, lr
 800ea64:	4481      	add	r9, r0
 800ea66:	fa00 f00e 	lsl.w	r0, r0, lr
 800ea6a:	1a3f      	subs	r7, r7, r0
 800ea6c:	f1c5 0007 	rsb	r0, r5, #7
 800ea70:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ea74:	4107      	asrs	r7, r0
 800ea76:	2f00      	cmp	r7, #0
 800ea78:	dd3c      	ble.n	800eaf4 <__kernel_rem_pio2f+0x1c4>
 800ea7a:	f04f 0e00 	mov.w	lr, #0
 800ea7e:	f109 0901 	add.w	r9, r9, #1
 800ea82:	4671      	mov	r1, lr
 800ea84:	4576      	cmp	r6, lr
 800ea86:	dc67      	bgt.n	800eb58 <__kernel_rem_pio2f+0x228>
 800ea88:	2d00      	cmp	r5, #0
 800ea8a:	dd03      	ble.n	800ea94 <__kernel_rem_pio2f+0x164>
 800ea8c:	2d01      	cmp	r5, #1
 800ea8e:	d074      	beq.n	800eb7a <__kernel_rem_pio2f+0x24a>
 800ea90:	2d02      	cmp	r5, #2
 800ea92:	d07b      	beq.n	800eb8c <__kernel_rem_pio2f+0x25c>
 800ea94:	2f02      	cmp	r7, #2
 800ea96:	d12d      	bne.n	800eaf4 <__kernel_rem_pio2f+0x1c4>
 800ea98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ea9c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800eaa0:	b341      	cbz	r1, 800eaf4 <__kernel_rem_pio2f+0x1c4>
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	9207      	str	r2, [sp, #28]
 800eaa6:	f000 f9b5 	bl	800ee14 <scalbnf>
 800eaaa:	9a07      	ldr	r2, [sp, #28]
 800eaac:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eab0:	e020      	b.n	800eaf4 <__kernel_rem_pio2f+0x1c4>
 800eab2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800eab6:	3f01      	subs	r7, #1
 800eab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eabc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eac0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800eac4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eac8:	ecac 0a01 	vstmia	ip!, {s0}
 800eacc:	ed90 0a00 	vldr	s0, [r0]
 800ead0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ead4:	e79e      	b.n	800ea14 <__kernel_rem_pio2f+0xe4>
 800ead6:	d105      	bne.n	800eae4 <__kernel_rem_pio2f+0x1b4>
 800ead8:	1e70      	subs	r0, r6, #1
 800eada:	ab08      	add	r3, sp, #32
 800eadc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800eae0:	11ff      	asrs	r7, r7, #7
 800eae2:	e7c8      	b.n	800ea76 <__kernel_rem_pio2f+0x146>
 800eae4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eae8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf0:	da30      	bge.n	800eb54 <__kernel_rem_pio2f+0x224>
 800eaf2:	2700      	movs	r7, #0
 800eaf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafc:	f040 809a 	bne.w	800ec34 <__kernel_rem_pio2f+0x304>
 800eb00:	1e74      	subs	r4, r6, #1
 800eb02:	46a4      	mov	ip, r4
 800eb04:	2100      	movs	r1, #0
 800eb06:	45d4      	cmp	ip, sl
 800eb08:	da47      	bge.n	800eb9a <__kernel_rem_pio2f+0x26a>
 800eb0a:	2900      	cmp	r1, #0
 800eb0c:	d063      	beq.n	800ebd6 <__kernel_rem_pio2f+0x2a6>
 800eb0e:	ab08      	add	r3, sp, #32
 800eb10:	3d08      	subs	r5, #8
 800eb12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d07f      	beq.n	800ec1a <__kernel_rem_pio2f+0x2ea>
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eb20:	f000 f978 	bl	800ee14 <scalbnf>
 800eb24:	1c63      	adds	r3, r4, #1
 800eb26:	aa44      	add	r2, sp, #272	; 0x110
 800eb28:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ec2c <__kernel_rem_pio2f+0x2fc>
 800eb2c:	0099      	lsls	r1, r3, #2
 800eb2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb32:	4623      	mov	r3, r4
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f280 80ad 	bge.w	800ec94 <__kernel_rem_pio2f+0x364>
 800eb3a:	4623      	mov	r3, r4
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f2c0 80cb 	blt.w	800ecd8 <__kernel_rem_pio2f+0x3a8>
 800eb42:	aa44      	add	r2, sp, #272	; 0x110
 800eb44:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800eb48:	4e36      	ldr	r6, [pc, #216]	; (800ec24 <__kernel_rem_pio2f+0x2f4>)
 800eb4a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800eb4e:	2000      	movs	r0, #0
 800eb50:	1ae2      	subs	r2, r4, r3
 800eb52:	e0b6      	b.n	800ecc2 <__kernel_rem_pio2f+0x392>
 800eb54:	2702      	movs	r7, #2
 800eb56:	e790      	b.n	800ea7a <__kernel_rem_pio2f+0x14a>
 800eb58:	6820      	ldr	r0, [r4, #0]
 800eb5a:	b949      	cbnz	r1, 800eb70 <__kernel_rem_pio2f+0x240>
 800eb5c:	b118      	cbz	r0, 800eb66 <__kernel_rem_pio2f+0x236>
 800eb5e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800eb62:	6020      	str	r0, [r4, #0]
 800eb64:	2001      	movs	r0, #1
 800eb66:	f10e 0e01 	add.w	lr, lr, #1
 800eb6a:	3404      	adds	r4, #4
 800eb6c:	4601      	mov	r1, r0
 800eb6e:	e789      	b.n	800ea84 <__kernel_rem_pio2f+0x154>
 800eb70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800eb74:	6020      	str	r0, [r4, #0]
 800eb76:	4608      	mov	r0, r1
 800eb78:	e7f5      	b.n	800eb66 <__kernel_rem_pio2f+0x236>
 800eb7a:	1e74      	subs	r4, r6, #1
 800eb7c:	ab08      	add	r3, sp, #32
 800eb7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eb82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb8a:	e783      	b.n	800ea94 <__kernel_rem_pio2f+0x164>
 800eb8c:	1e74      	subs	r4, r6, #1
 800eb8e:	ab08      	add	r3, sp, #32
 800eb90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eb94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800eb98:	e7f5      	b.n	800eb86 <__kernel_rem_pio2f+0x256>
 800eb9a:	ab08      	add	r3, sp, #32
 800eb9c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800eba0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eba4:	4301      	orrs	r1, r0
 800eba6:	e7ae      	b.n	800eb06 <__kernel_rem_pio2f+0x1d6>
 800eba8:	3001      	adds	r0, #1
 800ebaa:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800ebae:	2f00      	cmp	r7, #0
 800ebb0:	d0fa      	beq.n	800eba8 <__kernel_rem_pio2f+0x278>
 800ebb2:	9b06      	ldr	r3, [sp, #24]
 800ebb4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800ebb8:	eb0d 0403 	add.w	r4, sp, r3
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	18f7      	adds	r7, r6, r3
 800ebc0:	ab1c      	add	r3, sp, #112	; 0x70
 800ebc2:	f106 0c01 	add.w	ip, r6, #1
 800ebc6:	3c4c      	subs	r4, #76	; 0x4c
 800ebc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ebcc:	4430      	add	r0, r6
 800ebce:	4560      	cmp	r0, ip
 800ebd0:	da04      	bge.n	800ebdc <__kernel_rem_pio2f+0x2ac>
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	e711      	b.n	800e9fa <__kernel_rem_pio2f+0xca>
 800ebd6:	9c05      	ldr	r4, [sp, #20]
 800ebd8:	2001      	movs	r0, #1
 800ebda:	e7e6      	b.n	800ebaa <__kernel_rem_pio2f+0x27a>
 800ebdc:	9b04      	ldr	r3, [sp, #16]
 800ebde:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ebe2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ebe6:	9306      	str	r3, [sp, #24]
 800ebe8:	ee07 3a90 	vmov	s15, r3
 800ebec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	ece7 7a01 	vstmia	r7!, {s15}
 800ebf6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800ebfa:	46b9      	mov	r9, r7
 800ebfc:	455e      	cmp	r6, fp
 800ebfe:	dd04      	ble.n	800ec0a <__kernel_rem_pio2f+0x2da>
 800ec00:	ece4 7a01 	vstmia	r4!, {s15}
 800ec04:	f10c 0c01 	add.w	ip, ip, #1
 800ec08:	e7e1      	b.n	800ebce <__kernel_rem_pio2f+0x29e>
 800ec0a:	ecfe 6a01 	vldmia	lr!, {s13}
 800ec0e:	ed39 7a01 	vldmdb	r9!, {s14}
 800ec12:	3601      	adds	r6, #1
 800ec14:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec18:	e7f0      	b.n	800ebfc <__kernel_rem_pio2f+0x2cc>
 800ec1a:	3c01      	subs	r4, #1
 800ec1c:	e777      	b.n	800eb0e <__kernel_rem_pio2f+0x1de>
 800ec1e:	bf00      	nop
 800ec20:	0800f8c4 	.word	0x0800f8c4
 800ec24:	0800f898 	.word	0x0800f898
 800ec28:	43800000 	.word	0x43800000
 800ec2c:	3b800000 	.word	0x3b800000
 800ec30:	00000000 	.word	0x00000000
 800ec34:	9b03      	ldr	r3, [sp, #12]
 800ec36:	eeb0 0a48 	vmov.f32	s0, s16
 800ec3a:	1a98      	subs	r0, r3, r2
 800ec3c:	f000 f8ea 	bl	800ee14 <scalbnf>
 800ec40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ec28 <__kernel_rem_pio2f+0x2f8>
 800ec44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ec48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4c:	db19      	blt.n	800ec82 <__kernel_rem_pio2f+0x352>
 800ec4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ec2c <__kernel_rem_pio2f+0x2fc>
 800ec52:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ec56:	aa08      	add	r2, sp, #32
 800ec58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec5c:	1c74      	adds	r4, r6, #1
 800ec5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec62:	3508      	adds	r5, #8
 800ec64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ec68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec70:	ee10 3a10 	vmov	r3, s0
 800ec74:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ec78:	ee17 3a90 	vmov	r3, s15
 800ec7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec80:	e74b      	b.n	800eb1a <__kernel_rem_pio2f+0x1ea>
 800ec82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec86:	aa08      	add	r2, sp, #32
 800ec88:	ee10 3a10 	vmov	r3, s0
 800ec8c:	4634      	mov	r4, r6
 800ec8e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ec92:	e742      	b.n	800eb1a <__kernel_rem_pio2f+0x1ea>
 800ec94:	a808      	add	r0, sp, #32
 800ec96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ec9a:	9001      	str	r0, [sp, #4]
 800ec9c:	ee07 0a90 	vmov	s15, r0
 800eca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eca4:	3b01      	subs	r3, #1
 800eca6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ecaa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ecae:	ed62 7a01 	vstmdb	r2!, {s15}
 800ecb2:	e73f      	b.n	800eb34 <__kernel_rem_pio2f+0x204>
 800ecb4:	ecf6 6a01 	vldmia	r6!, {s13}
 800ecb8:	ecb5 7a01 	vldmia	r5!, {s14}
 800ecbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	4550      	cmp	r0, sl
 800ecc4:	dc01      	bgt.n	800ecca <__kernel_rem_pio2f+0x39a>
 800ecc6:	4290      	cmp	r0, r2
 800ecc8:	ddf4      	ble.n	800ecb4 <__kernel_rem_pio2f+0x384>
 800ecca:	a858      	add	r0, sp, #352	; 0x160
 800eccc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ecd0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	e731      	b.n	800eb3c <__kernel_rem_pio2f+0x20c>
 800ecd8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	dc09      	bgt.n	800ecf2 <__kernel_rem_pio2f+0x3c2>
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	dc2b      	bgt.n	800ed3a <__kernel_rem_pio2f+0x40a>
 800ece2:	d044      	beq.n	800ed6e <__kernel_rem_pio2f+0x43e>
 800ece4:	f009 0007 	and.w	r0, r9, #7
 800ece8:	b059      	add	sp, #356	; 0x164
 800ecea:	ecbd 8b04 	vpop	{d8-d9}
 800ecee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ecf4:	2b03      	cmp	r3, #3
 800ecf6:	d1f5      	bne.n	800ece4 <__kernel_rem_pio2f+0x3b4>
 800ecf8:	aa30      	add	r2, sp, #192	; 0xc0
 800ecfa:	1f0b      	subs	r3, r1, #4
 800ecfc:	4413      	add	r3, r2
 800ecfe:	461a      	mov	r2, r3
 800ed00:	4620      	mov	r0, r4
 800ed02:	2800      	cmp	r0, #0
 800ed04:	f1a2 0204 	sub.w	r2, r2, #4
 800ed08:	dc52      	bgt.n	800edb0 <__kernel_rem_pio2f+0x480>
 800ed0a:	4622      	mov	r2, r4
 800ed0c:	2a01      	cmp	r2, #1
 800ed0e:	f1a3 0304 	sub.w	r3, r3, #4
 800ed12:	dc5d      	bgt.n	800edd0 <__kernel_rem_pio2f+0x4a0>
 800ed14:	ab30      	add	r3, sp, #192	; 0xc0
 800ed16:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800ed1a:	440b      	add	r3, r1
 800ed1c:	2c01      	cmp	r4, #1
 800ed1e:	dc67      	bgt.n	800edf0 <__kernel_rem_pio2f+0x4c0>
 800ed20:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ed24:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ed28:	2f00      	cmp	r7, #0
 800ed2a:	d167      	bne.n	800edfc <__kernel_rem_pio2f+0x4cc>
 800ed2c:	edc8 6a00 	vstr	s13, [r8]
 800ed30:	ed88 7a01 	vstr	s14, [r8, #4]
 800ed34:	edc8 7a02 	vstr	s15, [r8, #8]
 800ed38:	e7d4      	b.n	800ece4 <__kernel_rem_pio2f+0x3b4>
 800ed3a:	ab30      	add	r3, sp, #192	; 0xc0
 800ed3c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800ed40:	440b      	add	r3, r1
 800ed42:	4622      	mov	r2, r4
 800ed44:	2a00      	cmp	r2, #0
 800ed46:	da24      	bge.n	800ed92 <__kernel_rem_pio2f+0x462>
 800ed48:	b34f      	cbz	r7, 800ed9e <__kernel_rem_pio2f+0x46e>
 800ed4a:	eef1 7a47 	vneg.f32	s15, s14
 800ed4e:	edc8 7a00 	vstr	s15, [r8]
 800ed52:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ed56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed5a:	aa31      	add	r2, sp, #196	; 0xc4
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	429c      	cmp	r4, r3
 800ed60:	da20      	bge.n	800eda4 <__kernel_rem_pio2f+0x474>
 800ed62:	b10f      	cbz	r7, 800ed68 <__kernel_rem_pio2f+0x438>
 800ed64:	eef1 7a67 	vneg.f32	s15, s15
 800ed68:	edc8 7a01 	vstr	s15, [r8, #4]
 800ed6c:	e7ba      	b.n	800ece4 <__kernel_rem_pio2f+0x3b4>
 800ed6e:	ab30      	add	r3, sp, #192	; 0xc0
 800ed70:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800ec30 <__kernel_rem_pio2f+0x300>
 800ed74:	440b      	add	r3, r1
 800ed76:	2c00      	cmp	r4, #0
 800ed78:	da05      	bge.n	800ed86 <__kernel_rem_pio2f+0x456>
 800ed7a:	b10f      	cbz	r7, 800ed80 <__kernel_rem_pio2f+0x450>
 800ed7c:	eef1 7a67 	vneg.f32	s15, s15
 800ed80:	edc8 7a00 	vstr	s15, [r8]
 800ed84:	e7ae      	b.n	800ece4 <__kernel_rem_pio2f+0x3b4>
 800ed86:	ed33 7a01 	vldmdb	r3!, {s14}
 800ed8a:	3c01      	subs	r4, #1
 800ed8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed90:	e7f1      	b.n	800ed76 <__kernel_rem_pio2f+0x446>
 800ed92:	ed73 7a01 	vldmdb	r3!, {s15}
 800ed96:	3a01      	subs	r2, #1
 800ed98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed9c:	e7d2      	b.n	800ed44 <__kernel_rem_pio2f+0x414>
 800ed9e:	eef0 7a47 	vmov.f32	s15, s14
 800eda2:	e7d4      	b.n	800ed4e <__kernel_rem_pio2f+0x41e>
 800eda4:	ecb2 7a01 	vldmia	r2!, {s14}
 800eda8:	3301      	adds	r3, #1
 800edaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edae:	e7d6      	b.n	800ed5e <__kernel_rem_pio2f+0x42e>
 800edb0:	edd2 7a00 	vldr	s15, [r2]
 800edb4:	edd2 6a01 	vldr	s13, [r2, #4]
 800edb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edbc:	3801      	subs	r0, #1
 800edbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edc2:	ed82 7a00 	vstr	s14, [r2]
 800edc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edca:	edc2 7a01 	vstr	s15, [r2, #4]
 800edce:	e798      	b.n	800ed02 <__kernel_rem_pio2f+0x3d2>
 800edd0:	edd3 7a00 	vldr	s15, [r3]
 800edd4:	edd3 6a01 	vldr	s13, [r3, #4]
 800edd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800eddc:	3a01      	subs	r2, #1
 800edde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ede2:	ed83 7a00 	vstr	s14, [r3]
 800ede6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edea:	edc3 7a01 	vstr	s15, [r3, #4]
 800edee:	e78d      	b.n	800ed0c <__kernel_rem_pio2f+0x3dc>
 800edf0:	ed33 7a01 	vldmdb	r3!, {s14}
 800edf4:	3c01      	subs	r4, #1
 800edf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edfa:	e78f      	b.n	800ed1c <__kernel_rem_pio2f+0x3ec>
 800edfc:	eef1 6a66 	vneg.f32	s13, s13
 800ee00:	eeb1 7a47 	vneg.f32	s14, s14
 800ee04:	edc8 6a00 	vstr	s13, [r8]
 800ee08:	ed88 7a01 	vstr	s14, [r8, #4]
 800ee0c:	eef1 7a67 	vneg.f32	s15, s15
 800ee10:	e790      	b.n	800ed34 <__kernel_rem_pio2f+0x404>
 800ee12:	bf00      	nop

0800ee14 <scalbnf>:
 800ee14:	ee10 3a10 	vmov	r3, s0
 800ee18:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ee1c:	d02b      	beq.n	800ee76 <scalbnf+0x62>
 800ee1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ee22:	d302      	bcc.n	800ee2a <scalbnf+0x16>
 800ee24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee28:	4770      	bx	lr
 800ee2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ee2e:	d123      	bne.n	800ee78 <scalbnf+0x64>
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <scalbnf+0xb0>)
 800ee32:	eddf 7a25 	vldr	s15, [pc, #148]	; 800eec8 <scalbnf+0xb4>
 800ee36:	4298      	cmp	r0, r3
 800ee38:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee3c:	db17      	blt.n	800ee6e <scalbnf+0x5a>
 800ee3e:	ee10 3a10 	vmov	r3, s0
 800ee42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee46:	3a19      	subs	r2, #25
 800ee48:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ee4c:	4288      	cmp	r0, r1
 800ee4e:	dd15      	ble.n	800ee7c <scalbnf+0x68>
 800ee50:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800eecc <scalbnf+0xb8>
 800ee54:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800eed0 <scalbnf+0xbc>
 800ee58:	ee10 3a10 	vmov	r3, s0
 800ee5c:	eeb0 7a67 	vmov.f32	s14, s15
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	bfb8      	it	lt
 800ee64:	eef0 7a66 	vmovlt.f32	s15, s13
 800ee68:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ee6c:	4770      	bx	lr
 800ee6e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800eed4 <scalbnf+0xc0>
 800ee72:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ee76:	4770      	bx	lr
 800ee78:	0dd2      	lsrs	r2, r2, #23
 800ee7a:	e7e5      	b.n	800ee48 <scalbnf+0x34>
 800ee7c:	4410      	add	r0, r2
 800ee7e:	28fe      	cmp	r0, #254	; 0xfe
 800ee80:	dce6      	bgt.n	800ee50 <scalbnf+0x3c>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	dd06      	ble.n	800ee94 <scalbnf+0x80>
 800ee86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee8a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee8e:	ee00 3a10 	vmov	s0, r3
 800ee92:	4770      	bx	lr
 800ee94:	f110 0f16 	cmn.w	r0, #22
 800ee98:	da09      	bge.n	800eeae <scalbnf+0x9a>
 800ee9a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800eed4 <scalbnf+0xc0>
 800ee9e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800eed8 <scalbnf+0xc4>
 800eea2:	ee10 3a10 	vmov	r3, s0
 800eea6:	eeb0 7a67 	vmov.f32	s14, s15
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	e7d9      	b.n	800ee62 <scalbnf+0x4e>
 800eeae:	3019      	adds	r0, #25
 800eeb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eeb4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800eeb8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800eedc <scalbnf+0xc8>
 800eebc:	ee07 3a90 	vmov	s15, r3
 800eec0:	e7d7      	b.n	800ee72 <scalbnf+0x5e>
 800eec2:	bf00      	nop
 800eec4:	ffff3cb0 	.word	0xffff3cb0
 800eec8:	4c000000 	.word	0x4c000000
 800eecc:	7149f2ca 	.word	0x7149f2ca
 800eed0:	f149f2ca 	.word	0xf149f2ca
 800eed4:	0da24260 	.word	0x0da24260
 800eed8:	8da24260 	.word	0x8da24260
 800eedc:	33000000 	.word	0x33000000

0800eee0 <floorf>:
 800eee0:	ee10 3a10 	vmov	r3, s0
 800eee4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eee8:	3a7f      	subs	r2, #127	; 0x7f
 800eeea:	2a16      	cmp	r2, #22
 800eeec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eef0:	dc2a      	bgt.n	800ef48 <floorf+0x68>
 800eef2:	2a00      	cmp	r2, #0
 800eef4:	da11      	bge.n	800ef1a <floorf+0x3a>
 800eef6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ef58 <floorf+0x78>
 800eefa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eefe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef06:	dd05      	ble.n	800ef14 <floorf+0x34>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	da23      	bge.n	800ef54 <floorf+0x74>
 800ef0c:	4a13      	ldr	r2, [pc, #76]	; (800ef5c <floorf+0x7c>)
 800ef0e:	2900      	cmp	r1, #0
 800ef10:	bf18      	it	ne
 800ef12:	4613      	movne	r3, r2
 800ef14:	ee00 3a10 	vmov	s0, r3
 800ef18:	4770      	bx	lr
 800ef1a:	4911      	ldr	r1, [pc, #68]	; (800ef60 <floorf+0x80>)
 800ef1c:	4111      	asrs	r1, r2
 800ef1e:	420b      	tst	r3, r1
 800ef20:	d0fa      	beq.n	800ef18 <floorf+0x38>
 800ef22:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ef58 <floorf+0x78>
 800ef26:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	ddef      	ble.n	800ef14 <floorf+0x34>
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	bfbe      	ittt	lt
 800ef38:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ef3c:	fa40 f202 	asrlt.w	r2, r0, r2
 800ef40:	189b      	addlt	r3, r3, r2
 800ef42:	ea23 0301 	bic.w	r3, r3, r1
 800ef46:	e7e5      	b.n	800ef14 <floorf+0x34>
 800ef48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ef4c:	d3e4      	bcc.n	800ef18 <floorf+0x38>
 800ef4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef52:	4770      	bx	lr
 800ef54:	2300      	movs	r3, #0
 800ef56:	e7dd      	b.n	800ef14 <floorf+0x34>
 800ef58:	7149f2ca 	.word	0x7149f2ca
 800ef5c:	bf800000 	.word	0xbf800000
 800ef60:	007fffff 	.word	0x007fffff

0800ef64 <_init>:
 800ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef66:	bf00      	nop
 800ef68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef6a:	bc08      	pop	{r3}
 800ef6c:	469e      	mov	lr, r3
 800ef6e:	4770      	bx	lr

0800ef70 <_fini>:
 800ef70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef72:	bf00      	nop
 800ef74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef76:	bc08      	pop	{r3}
 800ef78:	469e      	mov	lr, r3
 800ef7a:	4770      	bx	lr
