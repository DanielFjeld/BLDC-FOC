
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d210  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800d3f0  0800d3f0  0001d3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d8  0800d4d8  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d8  0800d4d8  0001d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4e0  0800d4e0  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4e4  0800d4e4  0001d4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800d4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  2000019c  0800d684  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800d684  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255f9  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e53  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0004a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016de  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255c7  00000000  00000000  0004db06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029ff9  00000000  00000000  000730cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d1f  00000000  00000000  0009d0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008210  00000000  00000000  00185de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000019c 	.word	0x2000019c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d3d8 	.word	0x0800d3d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001a0 	.word	0x200001a0
 800021c:	0800d3d8 	.word	0x0800d3d8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <Update_FIR_filter+0x84>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <Update_FIR_filter+0x88>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp;
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e016      	b.n	8000618 <Update_FIR_filter+0x4c>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <Update_FIR_filter+0x8c>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	ed93 7a00 	vldr	s14, [r3]
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <Update_FIR_filter+0x88>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000606:	ed97 7a03 	vldr	s14, [r7, #12]
 800060a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b09      	cmp	r3, #9
 800061c:	dde5      	ble.n	80005ea <Update_FIR_filter+0x1e>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <Update_FIR_filter+0x84>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d806      	bhi.n	8000634 <Update_FIR_filter+0x68>
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <Update_FIR_filter+0x84>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <Update_FIR_filter+0x84>)
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e002      	b.n	800063a <Update_FIR_filter+0x6e>
	else FIR_index = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <Update_FIR_filter+0x84>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	return temp;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200001f4 	.word	0x200001f4
 8000654:	200001f8 	.word	0x200001f8
 8000658:	20000068 	.word	0x20000068

0800065c <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d008      	beq.n	800067c <Current_IRQ+0x20>
 800066a:	2210      	movs	r2, #16
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <Current_IRQ+0x28>)
 8000670:	f00c fa62 	bl	800cb38 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <Current_IRQ+0x2c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e000      	b.n	800067e <Current_IRQ+0x22>
    else return;
 800067c:	bf00      	nop
}
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001c8 	.word	0x200001c8
 8000688:	200001b8 	.word	0x200001b8

0800068c <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000694:	2208      	movs	r2, #8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <Voltage_Temp_IRQ+0x1c>)
 800069a:	f00c fa4d 	bl	800cb38 <memcpy>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001d8 	.word	0x200001d8

080006ac <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80006b4:	2214      	movs	r2, #20
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <Encoders_IRQ+0x1c>)
 80006ba:	f00c fa3d 	bl	800cb38 <memcpy>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200001e0 	.word	0x200001e0

080006cc <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006d4:	220c      	movs	r2, #12
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <Can_RX_Status_IRQ+0x1c>)
 80006da:	f00c fa2d 	bl	800cb38 <memcpy>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000220 	.word	0x20000220

080006ec <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80006fe:	ed97 7a00 	vldr	s14, [r7]
 8000702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070a:	da09      	bge.n	8000720 <check_value+0x34>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000712:	ed97 7a00 	vldr	s14, [r7]
 8000716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071e:	d801      	bhi.n	8000724 <check_value+0x38>
 8000720:	2302      	movs	r3, #2
 8000722:	e016      	b.n	8000752 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	edd3 7a04 	vldr	s15, [r3, #16]
 800072a:	ed97 7a00 	vldr	s14, [r7]
 800072e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000736:	da09      	bge.n	800074c <check_value+0x60>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edd3 7a01 	vldr	s15, [r3, #4]
 800073e:	ed97 7a00 	vldr	s14, [r7]
 8000742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d801      	bhi.n	8000750 <check_value+0x64>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
 8000766:	af06      	add	r7, sp, #24
	HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f003 fb5c 	bl	8003e28 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000770:	2128      	movs	r1, #40	; 0x28
 8000772:	48a7      	ldr	r0, [pc, #668]	; (8000a10 <BLDC_main+0x2b0>)
 8000774:	f001 f9c0 	bl	8001af8 <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 0.001f, 0.0f, 1); //alva
 8000778:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800077c:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8000a14 <BLDC_main+0x2b4>
 8000780:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8000a18 <BLDC_main+0x2b8>
 8000784:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8000a1c <BLDC_main+0x2bc>
 8000788:	48a1      	ldr	r0, [pc, #644]	; (8000a10 <BLDC_main+0x2b0>)
 800078a:	f001 f8fb 	bl	8001984 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 800078e:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8000a20 <BLDC_main+0x2c0>
 8000792:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8000a14 <BLDC_main+0x2b4>
 8000796:	489e      	ldr	r0, [pc, #632]	; (8000a10 <BLDC_main+0x2b0>)
 8000798:	f001 f9e2 	bl	8001b60 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800079c:	2100      	movs	r1, #0
 800079e:	489c      	ldr	r0, [pc, #624]	; (8000a10 <BLDC_main+0x2b0>)
 80007a0:	f001 fa8e 	bl	8001cc0 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 80007a4:	2101      	movs	r1, #1
 80007a6:	489a      	ldr	r0, [pc, #616]	; (8000a10 <BLDC_main+0x2b0>)
 80007a8:	f001 fa36 	bl	8001c18 <SetMode>
	Initialize(&Current_PID);
 80007ac:	4898      	ldr	r0, [pc, #608]	; (8000a10 <BLDC_main+0x2b0>)
 80007ae:	f001 fa55 	bl	8001c5c <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 80007b2:	2164      	movs	r1, #100	; 0x64
 80007b4:	489b      	ldr	r0, [pc, #620]	; (8000a24 <BLDC_main+0x2c4>)
 80007b6:	f001 f99f 	bl	8001af8 <SetSampleTime>
	SetTunings(&Velocity_PID, 0.00001f, 0.1f, 0.0f, 1);
 80007ba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007be:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8000a14 <BLDC_main+0x2b4>
 80007c2:	eddf 0a99 	vldr	s1, [pc, #612]	; 8000a28 <BLDC_main+0x2c8>
 80007c6:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8000a2c <BLDC_main+0x2cc>
 80007ca:	4896      	ldr	r0, [pc, #600]	; (8000a24 <BLDC_main+0x2c4>)
 80007cc:	f001 f8da 	bl	8001984 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 500);
 80007d0:	eddf 0a97 	vldr	s1, [pc, #604]	; 8000a30 <BLDC_main+0x2d0>
 80007d4:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8000a14 <BLDC_main+0x2b4>
 80007d8:	4892      	ldr	r0, [pc, #584]	; (8000a24 <BLDC_main+0x2c4>)
 80007da:	f001 f9c1 	bl	8001b60 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80007de:	2100      	movs	r1, #0
 80007e0:	4890      	ldr	r0, [pc, #576]	; (8000a24 <BLDC_main+0x2c4>)
 80007e2:	f001 fa6d 	bl	8001cc0 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80007e6:	2101      	movs	r1, #1
 80007e8:	488e      	ldr	r0, [pc, #568]	; (8000a24 <BLDC_main+0x2c4>)
 80007ea:	f001 fa15 	bl	8001c18 <SetMode>
	Initialize(&Velocity_PID);
 80007ee:	488d      	ldr	r0, [pc, #564]	; (8000a24 <BLDC_main+0x2c4>)
 80007f0:	f001 fa34 	bl	8001c5c <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	488f      	ldr	r0, [pc, #572]	; (8000a34 <BLDC_main+0x2d4>)
 80007f8:	f001 f97e 	bl	8001af8 <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 80007fc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000800:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8000a14 <BLDC_main+0x2b4>
 8000804:	eddf 0a83 	vldr	s1, [pc, #524]	; 8000a14 <BLDC_main+0x2b4>
 8000808:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800080c:	4889      	ldr	r0, [pc, #548]	; (8000a34 <BLDC_main+0x2d4>)
 800080e:	f001 f8b9 	bl	8001984 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 8000812:	eddf 0a89 	vldr	s1, [pc, #548]	; 8000a38 <BLDC_main+0x2d8>
 8000816:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8000a3c <BLDC_main+0x2dc>
 800081a:	4886      	ldr	r0, [pc, #536]	; (8000a34 <BLDC_main+0x2d4>)
 800081c:	f001 f9a0 	bl	8001b60 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8000820:	2100      	movs	r1, #0
 8000822:	4884      	ldr	r0, [pc, #528]	; (8000a34 <BLDC_main+0x2d4>)
 8000824:	f001 fa4c 	bl	8001cc0 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8000828:	2101      	movs	r1, #1
 800082a:	4882      	ldr	r0, [pc, #520]	; (8000a34 <BLDC_main+0x2d4>)
 800082c:	f001 f9f4 	bl	8001c18 <SetMode>
	Initialize(&Angle_PID);
 8000830:	4880      	ldr	r0, [pc, #512]	; (8000a34 <BLDC_main+0x2d4>)
 8000832:	f001 fa13 	bl	8001c5c <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8000836:	4882      	ldr	r0, [pc, #520]	; (8000a40 <BLDC_main+0x2e0>)
 8000838:	f000 fe92 	bl	8001560 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 800083c:	4881      	ldr	r0, [pc, #516]	; (8000a44 <BLDC_main+0x2e4>)
 800083e:	f001 fc73 	bl	8002128 <current_init>

	//calibrate DC current offset
	HAL_Delay(100); //let thing settle before starting
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f003 faf0 	bl	8003e28 <HAL_Delay>

	uint16_t current_offset_averaging = 100;
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	volatile int32_t current_offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
	while (current_offset_averaging){
 8000854:	e013      	b.n	800087e <BLDC_main+0x11e>
		while(!Current_Callback_flag);
 8000856:	bf00      	nop
 8000858:	4b7b      	ldr	r3, [pc, #492]	; (8000a48 <BLDC_main+0x2e8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0fb      	beq.n	8000858 <BLDC_main+0xf8>
		Current_Callback_flag = 0;
 8000860:	4b79      	ldr	r3, [pc, #484]	; (8000a48 <BLDC_main+0x2e8>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 8000866:	4b79      	ldr	r3, [pc, #484]	; (8000a4c <BLDC_main+0x2ec>)
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800086e:	4413      	add	r3, r2
 8000870:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		current_offset_averaging--;
 8000874:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8000878:	3b01      	subs	r3, #1
 800087a:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	while (current_offset_averaging){
 800087e:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e7      	bne.n	8000856 <BLDC_main+0xf6>
	}
	current_offset = current_offset/100;
 8000886:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800088a:	4a71      	ldr	r2, [pc, #452]	; (8000a50 <BLDC_main+0x2f0>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1152      	asrs	r2, r2, #5
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 800089a:	486e      	ldr	r0, [pc, #440]	; (8000a54 <BLDC_main+0x2f4>)
 800089c:	f001 fc5e 	bl	800215c <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80008a0:	4a6d      	ldr	r2, [pc, #436]	; (8000a58 <BLDC_main+0x2f8>)
 80008a2:	2136      	movs	r1, #54	; 0x36
 80008a4:	486d      	ldr	r0, [pc, #436]	; (8000a5c <BLDC_main+0x2fc>)
 80008a6:	f001 feaf 	bl	8002608 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80008aa:	486c      	ldr	r0, [pc, #432]	; (8000a5c <BLDC_main+0x2fc>)
 80008ac:	f001 fe90 	bl	80025d0 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80008b0:	f000 fc84 	bl	80011bc <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80008b4:	2064      	movs	r0, #100	; 0x64
 80008b6:	f003 fab7 	bl	8003e28 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80008ba:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80008c8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 80008d2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80008e2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]


	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d

	float velocity_temp[200] = {0};
 80008f4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80008f8:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80008fc:	4618      	mov	r0, r3
 80008fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000902:	461a      	mov	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f00c f8e3 	bl	800cad0 <memset>
	uint32_t last_pos = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	uint8_t velocity_index = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
	float velocity = 0;
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

	int32_t position_overflow = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

	int32_t pos_set_test = 360000*10;
 8000924:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <BLDC_main+0x300>)
 8000926:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 800092a:	bf00      	nop
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <BLDC_main+0x2e8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0fb      	beq.n	800092c <BLDC_main+0x1cc>

		Current_Callback_flag = 0;
 8000934:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <BLDC_main+0x2e8>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800093a:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <BLDC_main+0x2ec>)
 800093c:	f507 7455 	add.w	r4, r7, #852	; 0x354
 8000940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000946:	4a47      	ldr	r2, [pc, #284]	; (8000a64 <BLDC_main+0x304>)
 8000948:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000954:	4b44      	ldr	r3, [pc, #272]	; (8000a68 <BLDC_main+0x308>)
 8000956:	f507 744e 	add.w	r4, r7, #824	; 0x338
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <BLDC_main+0x30c>)
 8000966:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 8000970:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000974:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800097e:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <BLDC_main+0x236>
 8000986:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800098a:	2b04      	cmp	r3, #4
 800098c:	d103      	bne.n	8000996 <BLDC_main+0x236>
 800098e:	2302      	movs	r3, #2
 8000990:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
 8000994:	e079      	b.n	8000a8a <BLDC_main+0x32a>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8000996:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <BLDC_main+0x24e>
 800099e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d103      	bne.n	80009ae <BLDC_main+0x24e>
 80009a6:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <BLDC_main+0x310>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e06d      	b.n	8000a8a <BLDC_main+0x32a>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 80009ae:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d113      	bne.n	80009de <BLDC_main+0x27e>
 80009b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d10f      	bne.n	80009de <BLDC_main+0x27e>
			Status = BLDC_RUNNING;
 80009be:	2303      	movs	r3, #3
 80009c0:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
			SetMode(&Current_PID,  AUTOMATIC);
 80009c4:	2101      	movs	r1, #1
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <BLDC_main+0x2b0>)
 80009c8:	f001 f926 	bl	8001c18 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80009cc:	2101      	movs	r1, #1
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <BLDC_main+0x2c4>)
 80009d0:	f001 f922 	bl	8001c18 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80009d4:	2101      	movs	r1, #1
 80009d6:	4817      	ldr	r0, [pc, #92]	; (8000a34 <BLDC_main+0x2d4>)
 80009d8:	f001 f91e 	bl	8001c18 <SetMode>
 80009dc:	e055      	b.n	8000a8a <BLDC_main+0x32a>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80009de:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d146      	bne.n	8000a74 <BLDC_main+0x314>
 80009e6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d142      	bne.n	8000a74 <BLDC_main+0x314>
			Status = BLDC_STOPPED_WITH_BREAK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
			SetMode(&Current_PID,  MANUAL);
 80009f4:	2100      	movs	r1, #0
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <BLDC_main+0x2b0>)
 80009f8:	f001 f90e 	bl	8001c18 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80009fc:	2100      	movs	r1, #0
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <BLDC_main+0x2c4>)
 8000a00:	f001 f90a 	bl	8001c18 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 8000a04:	2100      	movs	r1, #0
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <BLDC_main+0x2d4>)
 8000a08:	f001 f906 	bl	8001c18 <SetMode>
 8000a0c:	e03d      	b.n	8000a8a <BLDC_main+0x32a>
 8000a0e:	bf00      	nop
 8000a10:	2000026c 	.word	0x2000026c
 8000a14:	00000000 	.word	0x00000000
 8000a18:	3a83126f 	.word	0x3a83126f
 8000a1c:	3ba3d70a 	.word	0x3ba3d70a
 8000a20:	44bb6000 	.word	0x44bb6000
 8000a24:	200002ac 	.word	0x200002ac
 8000a28:	3dcccccd 	.word	0x3dcccccd
 8000a2c:	3727c5ac 	.word	0x3727c5ac
 8000a30:	43fa0000 	.word	0x43fa0000
 8000a34:	200002ec 	.word	0x200002ec
 8000a38:	4a742400 	.word	0x4a742400
 8000a3c:	ca742400 	.word	0xca742400
 8000a40:	080006ad 	.word	0x080006ad
 8000a44:	0800065d 	.word	0x0800065d
 8000a48:	200001b8 	.word	0x200001b8
 8000a4c:	200001c8 	.word	0x200001c8
 8000a50:	51eb851f 	.word	0x51eb851f
 8000a54:	0800068d 	.word	0x0800068d
 8000a58:	080006cd 	.word	0x080006cd
 8000a5c:	200007e4 	.word	0x200007e4
 8000a60:	0036ee80 	.word	0x0036ee80
 8000a64:	200001d8 	.word	0x200001d8
 8000a68:	200001e0 	.word	0x200001e0
 8000a6c:	20000220 	.word	0x20000220
 8000a70:	200001c4 	.word	0x200001c4
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a74:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d106      	bne.n	8000a8a <BLDC_main+0x32a>
 8000a7c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d102      	bne.n	8000a8a <BLDC_main+0x32a>
 8000a84:	2301      	movs	r3, #1
 8000a86:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d

		//time keepers
		timing_CAN_feedback++;
 8000a8a:	4bd7      	ldr	r3, [pc, #860]	; (8000de8 <BLDC_main+0x688>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4ad5      	ldr	r2, [pc, #852]	; (8000de8 <BLDC_main+0x688>)
 8000a92:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a94:	4bd5      	ldr	r3, [pc, #852]	; (8000dec <BLDC_main+0x68c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4ad4      	ldr	r2, [pc, #848]	; (8000dec <BLDC_main+0x68c>)
 8000a9c:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000aa4:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	48ce      	ldr	r0, [pc, #824]	; (8000df0 <BLDC_main+0x690>)
 8000ab6:	f7ff fe19 	bl	80006ec <check_value>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 0; //warning
 8000ac0:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000acc:	4313      	orrs	r3, r2
 8000ace:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000ad2:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000ad6:	105b      	asrs	r3, r3, #1
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	4bc5      	ldr	r3, [pc, #788]	; (8000df4 <BLDC_main+0x694>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	4ac4      	ldr	r2, [pc, #784]	; (8000df4 <BLDC_main+0x694>)
 8000ae4:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000ae6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000af2:	eeb0 0a67 	vmov.f32	s0, s15
 8000af6:	48c0      	ldr	r0, [pc, #768]	; (8000df8 <BLDC_main+0x698>)
 8000af8:	f7ff fdf8 	bl	80006ec <check_value>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 1; //warning
 8000b02:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000b10:	4313      	orrs	r3, r2
 8000b12:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000b16:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000b1a:	f003 0202 	and.w	r2, r3, #2
 8000b1e:	4bb5      	ldr	r3, [pc, #724]	; (8000df4 <BLDC_main+0x694>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	4ab3      	ldr	r2, [pc, #716]	; (8000df4 <BLDC_main+0x694>)
 8000b26:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000b28:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8000b2c:	ee07 3a90 	vmov	s15, r3
 8000b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	48b0      	ldr	r0, [pc, #704]	; (8000dfc <BLDC_main+0x69c>)
 8000b3a:	f7ff fdd7 	bl	80006ec <check_value>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 2; //warning
 8000b44:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000b52:	4313      	orrs	r3, r2
 8000b54:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b58:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000b5c:	105b      	asrs	r3, r3, #1
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	f003 0204 	and.w	r2, r3, #4
 8000b64:	4ba3      	ldr	r3, [pc, #652]	; (8000df4 <BLDC_main+0x694>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	4aa2      	ldr	r2, [pc, #648]	; (8000df4 <BLDC_main+0x694>)
 8000b6c:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b6e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7e:	48a0      	ldr	r0, [pc, #640]	; (8000e00 <BLDC_main+0x6a0>)
 8000b80:	f7ff fdb4 	bl	80006ec <check_value>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 3; //warning
 8000b8a:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b9e:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000ba2:	105b      	asrs	r3, r3, #1
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	f003 0208 	and.w	r2, r3, #8
 8000baa:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <BLDC_main+0x694>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	4a90      	ldr	r2, [pc, #576]	; (8000df4 <BLDC_main+0x694>)
 8000bb2:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000bb4:	f8b7 3350 	ldrh.w	r3, [r7, #848]	; 0x350
 8000bb8:	ee07 3a90 	vmov	s15, r3
 8000bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc4:	488f      	ldr	r0, [pc, #572]	; (8000e04 <BLDC_main+0x6a4>)
 8000bc6:	f7ff fd91 	bl	80006ec <check_value>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 4; //warning
 8000bd0:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000bde:	4313      	orrs	r3, r2
 8000be0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000be4:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000be8:	105b      	asrs	r3, r3, #1
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	f003 0210 	and.w	r2, r3, #16
 8000bf0:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <BLDC_main+0x694>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	4a7f      	ldr	r2, [pc, #508]	; (8000df4 <BLDC_main+0x694>)
 8000bf8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000bfa:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8000bfe:	ee07 3a90 	vmov	s15, r3
 8000c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c06:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0a:	487f      	ldr	r0, [pc, #508]	; (8000e08 <BLDC_main+0x6a8>)
 8000c0c:	f7ff fd6e 	bl	80006ec <check_value>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 5; //warning
 8000c16:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000c24:	4313      	orrs	r3, r2
 8000c26:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000c2a:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000c2e:	105b      	asrs	r3, r3, #1
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	f003 0220 	and.w	r2, r3, #32
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <BLDC_main+0x694>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	4a6d      	ldr	r2, [pc, #436]	; (8000df4 <BLDC_main+0x694>)
 8000c3e:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000c40:	f997 3352 	ldrsb.w	r3, [r7, #850]	; 0x352
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c50:	486e      	ldr	r0, [pc, #440]	; (8000e0c <BLDC_main+0x6ac>)
 8000c52:	f7ff fd4b 	bl	80006ec <check_value>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 6; //warning
 8000c5c:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c66:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c70:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000c74:	105b      	asrs	r3, r3, #1
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <BLDC_main+0x694>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <BLDC_main+0x694>)
 8000c84:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c86:	f997 3353 	ldrsb.w	r3, [r7, #851]	; 0x353
 8000c8a:	ee07 3a90 	vmov	s15, r3
 8000c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c92:	eeb0 0a67 	vmov.f32	s0, s15
 8000c96:	485d      	ldr	r0, [pc, #372]	; (8000e0c <BLDC_main+0x6ac>)
 8000c98:	f7ff fd28 	bl	80006ec <check_value>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f887 336e 	strb.w	r3, [r7, #878]	; 0x36e
		warning |= (Limit_callback&1)      << 7; //warning
 8000ca2:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000ca6:	01db      	lsls	r3, r3, #7
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000cb4:	f897 336e 	ldrb.w	r3, [r7, #878]	; 0x36e
 8000cb8:	105b      	asrs	r3, r3, #1
 8000cba:	01db      	lsls	r3, r3, #7
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <BLDC_main+0x694>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <BLDC_main+0x694>)
 8000cc6:	6013      	str	r3, [r2, #0]

		if (Status == BLDC_RUNNING && Angle_PID.Input > IRQ_STATUS_BUFF.setpoint - 90000 && Angle_PID.Input < IRQ_STATUS_BUFF.setpoint + 90000) warning &= ~(1 << 8); //warning
 8000cc8:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d12a      	bne.n	8000d26 <BLDC_main+0x5c6>
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <BLDC_main+0x6b0>)
 8000cd2:	ed93 7a00 	vldr	s14, [r3]
 8000cd6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000cda:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
 8000cde:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf2:	dd18      	ble.n	8000d26 <BLDC_main+0x5c6>
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <BLDC_main+0x6b0>)
 8000cf6:	ed93 7a00 	vldr	s14, [r3]
 8000cfa:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000cfe:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8000d02:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	d506      	bpl.n	8000d26 <BLDC_main+0x5c6>
 8000d18:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d20:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8000d24:	e009      	b.n	8000d3a <BLDC_main+0x5da>
		else if (Status == BLDC_RUNNING)warning |= 1 << 8; //warning
 8000d26:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d105      	bne.n	8000d3a <BLDC_main+0x5da>
 8000d2e:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000d3a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	f7ff fc3f 	bl	80005cc <Update_FIR_filter>
 8000d4e:	ed87 0ada 	vstr	s0, [r7, #872]	; 0x368

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8000d52:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000d56:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <BLDC_main+0x6b4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d90a      	bls.n	8000d72 <BLDC_main+0x612>
 8000d5c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000d60:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <BLDC_main+0x6b8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d805      	bhi.n	8000d72 <BLDC_main+0x612>
 8000d66:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8000d70:	e00e      	b.n	8000d90 <BLDC_main+0x630>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8000d72:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000d76:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <BLDC_main+0x6b8>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d809      	bhi.n	8000d90 <BLDC_main+0x630>
 8000d7c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000d80:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <BLDC_main+0x6b4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d904      	bls.n	8000d90 <BLDC_main+0x630>
 8000d86:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8000d90:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8000d94:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000d98:	1ad2      	subs	r2, r2, r3
 8000d9a:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000d9e:	ee07 2a90 	vmov	s15, r2
 8000da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da6:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8000daa:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000db6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000dba:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
		velocity_index++;
 8000dbe:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
		velocity_index = velocity_index % 200;
 8000dc8:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <BLDC_main+0x6bc>)
 8000dce:	fba2 1203 	umull	r1, r2, r2, r3
 8000dd2:	0992      	lsrs	r2, r2, #6
 8000dd4:	21c8      	movs	r1, #200	; 0xc8
 8000dd6:	fb01 f202 	mul.w	r2, r1, r2
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
		for(int i = 0; i > 200; i++){
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8000de6:	e030      	b.n	8000e4a <BLDC_main+0x6ea>
 8000de8:	200001bc 	.word	0x200001bc
 8000dec:	200001c0 	.word	0x200001c0
 8000df0:	20000108 	.word	0x20000108
 8000df4:	200001c4 	.word	0x200001c4
 8000df8:	20000090 	.word	0x20000090
 8000dfc:	200000a8 	.word	0x200000a8
 8000e00:	20000120 	.word	0x20000120
 8000e04:	200000d8 	.word	0x200000d8
 8000e08:	200000c0 	.word	0x200000c0
 8000e0c:	200000f0 	.word	0x200000f0
 8000e10:	200002ec 	.word	0x200002ec
 8000e14:	00041eb0 	.word	0x00041eb0
 8000e18:	00015f8f 	.word	0x00015f8f
 8000e1c:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8000e20:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8000e24:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 8000e28:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	edd3 7a00 	vldr	s15, [r3]
 8000e34:	ed97 7ae0 	vldr	s14, [r7, #896]	; 0x380
 8000e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3c:	edc7 7ae0 	vstr	s15, [r7, #896]	; 0x380
		for(int i = 0; i > 200; i++){
 8000e40:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000e44:	3301      	adds	r3, #1
 8000e46:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8000e4a:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8000e4e:	2bc8      	cmp	r3, #200	; 0xc8
 8000e50:	dce6      	bgt.n	8000e20 <BLDC_main+0x6c0>
		#endif




		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8000e52:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e5e:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000e62:	4aa9      	ldr	r2, [pc, #676]	; (8001108 <BLDC_main+0x9a8>)
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e74:	4ba5      	ldr	r3, [pc, #660]	; (800110c <BLDC_main+0x9ac>)
 8000e76:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 8000e7a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bfb8      	it	lt
 8000e82:	425b      	neglt	r3, r3
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8c:	4ba0      	ldr	r3, [pc, #640]	; (8001110 <BLDC_main+0x9b0>)
 8000e8e:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000e92:	4aa0      	ldr	r2, [pc, #640]	; (8001114 <BLDC_main+0x9b4>)
 8000e94:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8000e98:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = pos_set_test;
 8000e9a:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8000e9e:	ee07 3a90 	vmov	s15, r3
 8000ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea6:	4b99      	ldr	r3, [pc, #612]	; (800110c <BLDC_main+0x9ac>)
 8000ea8:	edc3 7a02 	vstr	s15, [r3, #8]

		Angle_PID.Setpoint = IRQ_STATUS_BUFF.setpoint;
 8000eac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb8:	4b94      	ldr	r3, [pc, #592]	; (800110c <BLDC_main+0x9ac>)
 8000eba:	edc3 7a02 	vstr	s15, [r3, #8]
		pos_set_test += 20;
 8000ebe:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8000ec2:	3314      	adds	r3, #20
 8000ec4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
		Compute(&Angle_PID);
 8000ec8:	4890      	ldr	r0, [pc, #576]	; (800110c <BLDC_main+0x9ac>)
 8000eca:	f000 fca9 	bl	8001820 <Compute>

		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
 8000ece:	4b8f      	ldr	r3, [pc, #572]	; (800110c <BLDC_main+0x9ac>)
 8000ed0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed8:	ee17 3a90 	vmov	r3, s15
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bfb8      	it	lt
 8000ee0:	425b      	neglt	r3, r3
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eea:	4b89      	ldr	r3, [pc, #548]	; (8001110 <BLDC_main+0x9b0>)
 8000eec:	edc3 7a02 	vstr	s15, [r3, #8]

		Compute(&Velocity_PID);
 8000ef0:	4887      	ldr	r0, [pc, #540]	; (8001110 <BLDC_main+0x9b0>)
 8000ef2:	f000 fc95 	bl	8001820 <Compute>

		int8_t direction = -1;
 8000ef6:	23ff      	movs	r3, #255	; 0xff
 8000ef8:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 1000;
 8000efc:	4b85      	ldr	r3, [pc, #532]	; (8001114 <BLDC_main+0x9b4>)
 8000efe:	4a86      	ldr	r2, [pc, #536]	; (8001118 <BLDC_main+0x9b8>)
 8000f00:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 8000f02:	4b82      	ldr	r3, [pc, #520]	; (800110c <BLDC_main+0x9ac>)
 8000f04:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	dd03      	ble.n	8000f1a <BLDC_main+0x7ba>
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
 8000f18:	e002      	b.n	8000f20 <BLDC_main+0x7c0>
		else direction = -1;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	f887 336f 	strb.w	r3, [r7, #879]	; 0x36f
		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
		else direction = 1;
		#endif

		Compute(&Current_PID);
 8000f20:	487c      	ldr	r0, [pc, #496]	; (8001114 <BLDC_main+0x9b4>)
 8000f22:	f000 fc7d 	bl	8001820 <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000f26:	4b7d      	ldr	r3, [pc, #500]	; (800111c <BLDC_main+0x9bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <BLDC_main+0x7da>
			Status = BLDC_ERROR;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
			shutoff();
 8000f34:	f000 fae0 	bl	80014f8 <shutoff>
 8000f38:	e03d      	b.n	8000fb6 <BLDC_main+0x856>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000f3a:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d104      	bne.n	8000f4c <BLDC_main+0x7ec>
			shutoff();
 8000f42:	f000 fad9 	bl	80014f8 <shutoff>
			shutdown();
 8000f46:	f000 fae9 	bl	800151c <shutdown>
 8000f4a:	e034      	b.n	8000fb6 <BLDC_main+0x856>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000f4c:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <BLDC_main+0x7fa>
			shutoff();
 8000f54:	f000 fad0 	bl	80014f8 <shutoff>
 8000f58:	e02d      	b.n	8000fb6 <BLDC_main+0x856>


			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8000f5a:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d122      	bne.n	8000fa8 <BLDC_main+0x848>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
 8000f62:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000f66:	496e      	ldr	r1, [pc, #440]	; (8001120 <BLDC_main+0x9c0>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8e9 	bl	8001140 <mech_to_el_deg>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f997 336f 	ldrsb.w	r3, [r7, #879]	; 0x36f
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	0049      	lsls	r1, r1, #1
 8000f7c:	440b      	add	r3, r1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	0109      	lsls	r1, r1, #4
 8000f82:	1acb      	subs	r3, r1, r3
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4a60      	ldr	r2, [pc, #384]	; (8001110 <BLDC_main+0x9b0>)
 8000f90:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f98:	ee17 2a90 	vmov	r2, s15
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f957 	bl	8001254 <inverter>
 8000fa6:	e006      	b.n	8000fb6 <BLDC_main+0x856>
//			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000fa8:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d102      	bne.n	8000fb6 <BLDC_main+0x856>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	; (8001124 <BLDC_main+0x9c4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b95      	cmp	r3, #149	; 0x95
 8000fbc:	d973      	bls.n	80010a6 <BLDC_main+0x946>
			timing_CAN_feedback = 0;
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <BLDC_main+0x9c4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000fc4:	4a58      	ldr	r2, [pc, #352]	; (8001128 <BLDC_main+0x9c8>)
 8000fc6:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000fca:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <BLDC_main+0x9bc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a55      	ldr	r2, [pc, #340]	; (8001128 <BLDC_main+0x9c8>)
 8000fd2:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000fd4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000fd8:	4a53      	ldr	r2, [pc, #332]	; (8001128 <BLDC_main+0x9c8>)
 8000fda:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000fdc:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000fe0:	4a51      	ldr	r2, [pc, #324]	; (8001128 <BLDC_main+0x9c8>)
 8000fe2:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000fe4:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <BLDC_main+0x9c8>)
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000fee:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000ff2:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <BLDC_main+0x9c8>)
 8000ff4:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000ff6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000ffa:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <BLDC_main+0x9c8>)
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000ffe:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001002:	4a49      	ldr	r2, [pc, #292]	; (8001128 <BLDC_main+0x9c8>)
 8001004:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8001006:	f8b7 3350 	ldrh.w	r3, [r7, #848]	; 0x350
 800100a:	461a      	mov	r2, r3
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <BLDC_main+0x9c8>)
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8001010:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001014:	4a44      	ldr	r2, [pc, #272]	; (8001128 <BLDC_main+0x9c8>)
 8001016:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001018:	f997 3352 	ldrsb.w	r3, [r7, #850]	; 0x352
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <BLDC_main+0x9c8>)
 8001020:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8001022:	f997 3353 	ldrsb.w	r3, [r7, #851]	; 0x353
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <BLDC_main+0x9c8>)
 800102a:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 800102c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001030:	4a3d      	ldr	r2, [pc, #244]	; (8001128 <BLDC_main+0x9c8>)
 8001032:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8001034:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001038:	4a3b      	ldr	r2, [pc, #236]	; (8001128 <BLDC_main+0x9c8>)
 800103a:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset);
 800103c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001040:	4937      	ldr	r1, [pc, #220]	; (8001120 <BLDC_main+0x9c0>)
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f87c 	bl	8001140 <mech_to_el_deg>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <BLDC_main+0x9c8>)
 800104e:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8001050:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001054:	4a34      	ldr	r2, [pc, #208]	; (8001128 <BLDC_main+0x9c8>)
 8001056:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8001058:	4a33      	ldr	r2, [pc, #204]	; (8001128 <BLDC_main+0x9c8>)
 800105a:	f240 4136 	movw	r1, #1078	; 0x436
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <BLDC_main+0x9cc>)
 8001060:	f001 fb0e 	bl	8002680 <FDCAN_sendData>
					#endif
					#ifdef Temperature_debug
					, Feedback.Temp_NTC1, Feedback.Temp_NTC2
					#endif
					#ifdef Status_debug
					, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <BLDC_main+0x9c8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	221a      	movs	r2, #26
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a30      	ldr	r2, [pc, #192]	; (8001130 <BLDC_main+0x9d0>)
 8001070:	189d      	adds	r5, r3, r2
			PrintServerPrintf(
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <BLDC_main+0x9c8>)
 8001074:	68de      	ldr	r6, [r3, #12]
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <BLDC_main+0x9c8>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <BLDC_main+0x9c8>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a29      	ldr	r2, [pc, #164]	; (8001128 <BLDC_main+0x9c8>)
 8001082:	6912      	ldr	r2, [r2, #16]
 8001084:	4928      	ldr	r1, [pc, #160]	; (8001128 <BLDC_main+0x9c8>)
 8001086:	6949      	ldr	r1, [r1, #20]
 8001088:	4827      	ldr	r0, [pc, #156]	; (8001128 <BLDC_main+0x9c8>)
 800108a:	6980      	ldr	r0, [r0, #24]
 800108c:	4c26      	ldr	r4, [pc, #152]	; (8001128 <BLDC_main+0x9c8>)
 800108e:	69e4      	ldr	r4, [r4, #28]
 8001090:	9404      	str	r4, [sp, #16]
 8001092:	9003      	str	r0, [sp, #12]
 8001094:	9102      	str	r1, [sp, #8]
 8001096:	9201      	str	r2, [sp, #4]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4632      	mov	r2, r6
 800109e:	4629      	mov	r1, r5
 80010a0:	4824      	ldr	r0, [pc, #144]	; (8001134 <BLDC_main+0x9d4>)
 80010a2:	f000 fe1b 	bl	8001cdc <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <BLDC_main+0x9bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <BLDC_main+0x95e>
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f006 fdbe 	bl	8007c38 <HAL_GPIO_WritePin>
 80010bc:	e006      	b.n	80010cc <BLDC_main+0x96c>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f006 fdb6 	bl	8007c38 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 80010cc:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <BLDC_main+0x980>
 80010d4:	2201      	movs	r2, #1
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <BLDC_main+0x9d8>)
 80010da:	f006 fdad 	bl	8007c38 <HAL_GPIO_WritePin>
 80010de:	e004      	b.n	80010ea <BLDC_main+0x98a>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <BLDC_main+0x9d8>)
 80010e6:	f006 fda7 	bl	8007c38 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <BLDC_main+0x9dc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f67f ac19 	bls.w	800092a <BLDC_main+0x1ca>
			running_LED_timing = 0;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <BLDC_main+0x9dc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <BLDC_main+0x9d8>)
 8001102:	f006 fdb1 	bl	8007c68 <HAL_GPIO_TogglePin>
	while(1){
 8001106:	e410      	b.n	800092a <BLDC_main+0x1ca>
 8001108:	00057e40 	.word	0x00057e40
 800110c:	200002ec 	.word	0x200002ec
 8001110:	200002ac 	.word	0x200002ac
 8001114:	2000026c 	.word	0x2000026c
 8001118:	447a0000 	.word	0x447a0000
 800111c:	200001c4 	.word	0x200001c4
 8001120:	0004d774 	.word	0x0004d774
 8001124:	200001bc 	.word	0x200001bc
 8001128:	2000022c 	.word	0x2000022c
 800112c:	200007e4 	.word	0x200007e4
 8001130:	20000000 	.word	0x20000000
 8001134:	0800d3f0 	.word	0x0800d3f0
 8001138:	48000800 	.word	0x48000800
 800113c:	200001c0 	.word	0x200001c0

08001140 <mech_to_el_deg>:
		dac_value(test);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	//return (int16_t)((int32_t)((int32_t)(((int32_t)((int32_t)angle_deg)-offset_deg)%deg_pr_pole))/(deg_pr_pole/360));
	return (int16_t)((abs(((angle_deg)-offset_deg+360000)%(deg_pr_pole)))/(1000/17))%360;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001154:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <mech_to_el_deg+0x70>)
 800115a:	fb82 1203 	smull	r1, r2, r2, r3
 800115e:	441a      	add	r2, r3
 8001160:	1391      	asrs	r1, r2, #14
 8001162:	17da      	asrs	r2, r3, #31
 8001164:	1a8a      	subs	r2, r1, r2
 8001166:	f245 21b8 	movw	r1, #21176	; 0x52b8
 800116a:	fb01 f202 	mul.w	r2, r1, r2
 800116e:	1a9a      	subs	r2, r3, r2
 8001170:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001174:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <mech_to_el_deg+0x74>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	441a      	add	r2, r3
 8001180:	1152      	asrs	r2, r2, #5
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b21b      	sxth	r3, r3
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <mech_to_el_deg+0x78>)
 800118a:	fb82 1203 	smull	r1, r2, r2, r3
 800118e:	441a      	add	r2, r3
 8001190:	1211      	asrs	r1, r2, #8
 8001192:	17da      	asrs	r2, r3, #31
 8001194:	1a8a      	subs	r2, r1, r2
 8001196:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800119a:	fb01 f202 	mul.w	r2, r1, r2
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	b21b      	sxth	r3, r3
//	return (int16_t)((((int32_t)((int32_t)19400)-offset_deg)%(deg_pr_pole))/(1000/17));
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	c6119a11 	.word	0xc6119a11
 80011b4:	8d3dcb09 	.word	0x8d3dcb09
 80011b8:	b60b60b7 	.word	0xb60b60b7

080011bc <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80011c0:	2100      	movs	r1, #0
 80011c2:	4821      	ldr	r0, [pc, #132]	; (8001248 <CTRL_init_PWM+0x8c>)
 80011c4:	f008 fccc 	bl	8009b60 <HAL_TIM_PWM_Start>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <CTRL_init_PWM+0x16>
 80011ce:	f002 f825 	bl	800321c <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80011d2:	2100      	movs	r1, #0
 80011d4:	481c      	ldr	r0, [pc, #112]	; (8001248 <CTRL_init_PWM+0x8c>)
 80011d6:	f009 fe57 	bl	800ae88 <HAL_TIMEx_PWMN_Start>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <CTRL_init_PWM+0x28>
 80011e0:	f002 f81c 	bl	800321c <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011e4:	2104      	movs	r1, #4
 80011e6:	4818      	ldr	r0, [pc, #96]	; (8001248 <CTRL_init_PWM+0x8c>)
 80011e8:	f008 fcba 	bl	8009b60 <HAL_TIM_PWM_Start>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <CTRL_init_PWM+0x3a>
 80011f2:	f002 f813 	bl	800321c <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80011f6:	2104      	movs	r1, #4
 80011f8:	4813      	ldr	r0, [pc, #76]	; (8001248 <CTRL_init_PWM+0x8c>)
 80011fa:	f009 fe45 	bl	800ae88 <HAL_TIMEx_PWMN_Start>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <CTRL_init_PWM+0x4c>
 8001204:	f002 f80a 	bl	800321c <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8001208:	2108      	movs	r1, #8
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <CTRL_init_PWM+0x8c>)
 800120c:	f008 fca8 	bl	8009b60 <HAL_TIM_PWM_Start>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <CTRL_init_PWM+0x5e>
 8001216:	f002 f801 	bl	800321c <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 800121a:	2108      	movs	r1, #8
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <CTRL_init_PWM+0x8c>)
 800121e:	f009 fe33 	bl	800ae88 <HAL_TIMEx_PWMN_Start>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <CTRL_init_PWM+0x70>
 8001228:	f001 fff8 	bl	800321c <Error_Handler>

	TIM1->CCR1 = 0;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <CTRL_init_PWM+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <CTRL_init_PWM+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <CTRL_init_PWM+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <CTRL_init_PWM+0x94>)
 8001240:	f008 fbc2 	bl	80099c8 <HAL_TIM_Base_Start_IT>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000acc 	.word	0x20000acc
 800124c:	40012c00 	.word	0x40012c00
 8001250:	20000b18 	.word	0x20000b18

08001254 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001268:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800126c:	4a9c      	ldr	r2, [pc, #624]	; (80014e0 <inverter+0x28c>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	441a      	add	r2, r3
 8001274:	1211      	asrs	r1, r2, #8
 8001276:	17da      	asrs	r2, r3, #31
 8001278:	1a8a      	subs	r2, r1, r2
 800127a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800127e:	fb01 f202 	mul.w	r2, r1, r2
 8001282:	1a9a      	subs	r2, r3, r2
 8001284:	4613      	mov	r3, r2
 8001286:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800128e:	b29b      	uxth	r3, r3
 8001290:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001296:	4a92      	ldr	r2, [pc, #584]	; (80014e0 <inverter+0x28c>)
 8001298:	fb82 1203 	smull	r1, r2, r2, r3
 800129c:	441a      	add	r2, r3
 800129e:	1211      	asrs	r1, r2, #8
 80012a0:	17da      	asrs	r2, r3, #31
 80012a2:	1a8a      	subs	r2, r1, r2
 80012a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80012a8:	fb01 f202 	mul.w	r2, r1, r2
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 80012bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012c0:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <inverter+0x290>)
 80012c2:	fb83 1302 	smull	r1, r3, r3, r2
 80012c6:	4413      	add	r3, r2
 80012c8:	1159      	asrs	r1, r3, #5
 80012ca:	17d3      	asrs	r3, r2, #31
 80012cc:	1ac9      	subs	r1, r1, r3
 80012ce:	460b      	mov	r3, r1
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a5b      	subs	r3, r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b21b      	sxth	r3, r3
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f0:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80014e8 <inverter+0x294>
 80012f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012fc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001300:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001304:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80014e8 <inverter+0x294>
 8001308:	edd7 7a04 	vldr	s15, [r7, #16]
 800130c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001310:	ed9f 6a76 	vldr	s12, [pc, #472]	; 80014ec <inverter+0x298>
 8001314:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001318:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800131c:	eddf 6a72 	vldr	s13, [pc, #456]	; 80014e8 <inverter+0x294>
 8001320:	edd7 7a04 	vldr	s15, [r7, #16]
 8001324:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001328:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80014e8 <inverter+0x294>
 800132c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001330:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001334:	eddf 5a6d 	vldr	s11, [pc, #436]	; 80014ec <inverter+0x298>
 8001338:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800133c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001340:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80014f0 <inverter+0x29c>
 8001344:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001348:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001364:	edd7 7a04 	vldr	s15, [r7, #16]
 8001368:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800136c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001370:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80014ec <inverter+0x298>
 8001374:	edd7 7a04 	vldr	s15, [r7, #16]
 8001378:	ee76 7a67 	vsub.f32	s15, s12, s15
 800137c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001380:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80014ec <inverter+0x298>
 8001384:	edd7 7a04 	vldr	s15, [r7, #16]
 8001388:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800138c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001394:	eddf 6a56 	vldr	s13, [pc, #344]	; 80014f0 <inverter+0x29c>
 8001398:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800139c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a8:	ee17 3a90 	vmov	r3, s15
 80013ac:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 80013b4:	3303      	adds	r3, #3
 80013b6:	89ba      	ldrh	r2, [r7, #12]
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	0fda      	lsrs	r2, r3, #31
 80013bc:	4413      	add	r3, r2
 80013be:	105b      	asrs	r3, r3, #1
 80013c0:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db10      	blt.n	80013ec <inverter+0x198>
 80013ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ce:	2b3b      	cmp	r3, #59	; 0x3b
 80013d0:	dc0c      	bgt.n	80013ec <inverter+0x198>
		compare_M1 = T0;
 80013d2:	897b      	ldrh	r3, [r7, #10]
 80013d4:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 80013d6:	897a      	ldrh	r2, [r7, #10]
 80013d8:	89bb      	ldrh	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80013de:	897a      	ldrh	r2, [r7, #10]
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	441a      	add	r2, r3
 80013e4:	89bb      	ldrh	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	e06a      	b.n	80014c2 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 80013ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f0:	2b3b      	cmp	r3, #59	; 0x3b
 80013f2:	dd10      	ble.n	8001416 <inverter+0x1c2>
 80013f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f8:	2b77      	cmp	r3, #119	; 0x77
 80013fa:	dc0c      	bgt.n	8001416 <inverter+0x1c2>
		compare_M1 = T0;
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001400:	897a      	ldrh	r2, [r7, #10]
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	441a      	add	r2, r3
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 800140c:	897a      	ldrh	r2, [r7, #10]
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e055      	b.n	80014c2 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	2b77      	cmp	r3, #119	; 0x77
 800141c:	dd10      	ble.n	8001440 <inverter+0x1ec>
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	2bb3      	cmp	r3, #179	; 0xb3
 8001424:	dc0c      	bgt.n	8001440 <inverter+0x1ec>
		compare_M1 = T0+T2;
 8001426:	897a      	ldrh	r2, [r7, #10]
 8001428:	89bb      	ldrh	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 800142e:	897a      	ldrh	r2, [r7, #10]
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	441a      	add	r2, r3
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 800143a:	897b      	ldrh	r3, [r7, #10]
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e040      	b.n	80014c2 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 8001440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001444:	2bb3      	cmp	r3, #179	; 0xb3
 8001446:	dd10      	ble.n	800146a <inverter+0x216>
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	2bef      	cmp	r3, #239	; 0xef
 800144e:	dc0c      	bgt.n	800146a <inverter+0x216>
		compare_M1 = T0+T1+T2;
 8001450:	897a      	ldrh	r2, [r7, #10]
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	441a      	add	r2, r3
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 800145c:	897a      	ldrh	r2, [r7, #10]
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	4413      	add	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001464:	897b      	ldrh	r3, [r7, #10]
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e02b      	b.n	80014c2 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 800146a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146e:	2bef      	cmp	r3, #239	; 0xef
 8001470:	dd11      	ble.n	8001496 <inverter+0x242>
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800147a:	da0c      	bge.n	8001496 <inverter+0x242>
		compare_M1 = T0+T1+T2;
 800147c:	897a      	ldrh	r2, [r7, #10]
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	441a      	add	r2, r3
 8001482:	89bb      	ldrh	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001488:	897b      	ldrh	r3, [r7, #10]
 800148a:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 800148c:	897a      	ldrh	r2, [r7, #10]
 800148e:	89bb      	ldrh	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e015      	b.n	80014c2 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800149e:	db10      	blt.n	80014c2 <inverter+0x26e>
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80014a8:	dc0b      	bgt.n	80014c2 <inverter+0x26e>
		compare_M1 = T0+T1;
 80014aa:	897a      	ldrh	r2, [r7, #10]
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	4413      	add	r3, r2
 80014b0:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 80014b2:	897b      	ldrh	r3, [r7, #10]
 80014b4:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80014b6:	897a      	ldrh	r2, [r7, #10]
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	441a      	add	r2, r3
 80014bc:	89bb      	ldrh	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <inverter+0x2a0>)
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <inverter+0x2a0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <inverter+0x2a0>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80014d4:	bf00      	nop
 80014d6:	3724      	adds	r7, #36	; 0x24
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	b60b60b7 	.word	0xb60b60b7
 80014e4:	88888889 	.word	0x88888889
 80014e8:	42700000 	.word	0x42700000
 80014ec:	43340000 	.word	0x43340000
 80014f0:	471e3400 	.word	0x471e3400
 80014f4:	40012c00 	.word	0x40012c00

080014f8 <shutoff>:
void shutoff(void){
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <shutoff+0x20>)
 80014fe:	2200      	movs	r2, #0
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <shutoff+0x20>)
 8001504:	2200      	movs	r2, #0
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <shutoff+0x20>)
 800150a:	2200      	movs	r2, #0
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012c00 	.word	0x40012c00

0800151c <shutdown>:
void shutdown(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001520:	2100      	movs	r1, #0
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <shutdown+0x40>)
 8001524:	f008 fc1c 	bl	8009d60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8001528:	2100      	movs	r1, #0
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <shutdown+0x40>)
 800152c:	f009 fd60 	bl	800aff0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001530:	2104      	movs	r1, #4
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <shutdown+0x40>)
 8001534:	f008 fc14 	bl	8009d60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001538:	2104      	movs	r1, #4
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <shutdown+0x40>)
 800153c:	f009 fd58 	bl	800aff0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8001540:	2108      	movs	r1, #8
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <shutdown+0x40>)
 8001544:	f008 fc0c 	bl	8009d60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8001548:	2108      	movs	r1, #8
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <shutdown+0x40>)
 800154c:	f009 fd50 	bl	800aff0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <shutdown+0x40>)
 8001552:	f008 fa12 	bl	800997a <HAL_TIM_Base_Stop>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000acc 	.word	0x20000acc

08001560 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	4815      	ldr	r0, [pc, #84]	; (80015c4 <ORBIS_init+0x64>)
 800156e:	f006 fb63 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001572:	2201      	movs	r2, #1
 8001574:	2104      	movs	r1, #4
 8001576:	4814      	ldr	r0, [pc, #80]	; (80015c8 <ORBIS_init+0x68>)
 8001578:	f006 fb5e 	bl	8007c38 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <ORBIS_init+0x6c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <ORBIS_init+0x70>)
 8001584:	2274      	movs	r2, #116	; 0x74
 8001586:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <ORBIS_init+0x64>)
 800158e:	f006 fb53 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2104      	movs	r1, #4
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <ORBIS_init+0x68>)
 8001598:	f006 fb4e 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 800159c:	2305      	movs	r3, #5
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <ORBIS_init+0x74>)
 80015a0:	490b      	ldr	r1, [pc, #44]	; (80015d0 <ORBIS_init+0x70>)
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <ORBIS_init+0x78>)
 80015a4:	f007 fc40 	bl	8008e28 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80015a8:	2305      	movs	r3, #5
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <ORBIS_init+0x7c>)
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <ORBIS_init+0x80>)
 80015ae:	480d      	ldr	r0, [pc, #52]	; (80015e4 <ORBIS_init+0x84>)
 80015b0:	f007 fc3a 	bl	8008e28 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <ORBIS_init+0x88>)
 80015b6:	f008 fa07 	bl	80099c8 <HAL_TIM_Base_Start_IT>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	2000034c 	.word	0x2000034c
 80015d0:	2000032c 	.word	0x2000032c
 80015d4:	20000334 	.word	0x20000334
 80015d8:	20000880 	.word	0x20000880
 80015dc:	20000344 	.word	0x20000344
 80015e0:	2000033c 	.word	0x2000033c
 80015e4:	200008e4 	.word	0x200008e4
 80015e8:	20000b18 	.word	0x20000b18

080015ec <HAL_SPI_TxRxCpltCallback>:
float velocity_temp;
int32_t last_pos = 0;
uint16_t count = 0;

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_SPI_TxRxCpltCallback+0x198>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	f040 809b 	bne.w	8001734 <HAL_SPI_TxRxCpltCallback+0x148>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	4861      	ldr	r0, [pc, #388]	; (8001788 <HAL_SPI_TxRxCpltCallback+0x19c>)
 8001604:	f006 fb18 	bl	8007c38 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 8001608:	4b60      	ldr	r3, [pc, #384]	; (800178c <HAL_SPI_TxRxCpltCallback+0x1a0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b60      	ldr	r3, [pc, #384]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001610:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8001612:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_SPI_TxRxCpltCallback+0x1a0>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	019b      	lsls	r3, r3, #6
 8001618:	461a      	mov	r2, r3
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_SPI_TxRxCpltCallback+0x1a0>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001630:	6013      	str	r3, [r2, #0]

		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8001632:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	4a56      	ldr	r2, [pc, #344]	; (8001798 <HAL_SPI_TxRxCpltCallback+0x1ac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	dd16      	ble.n	8001672 <HAL_SPI_TxRxCpltCallback+0x86>
 8001644:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b52      	ldr	r3, [pc, #328]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8001654:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 800166c:	edc3 7a00 	vstr	s15, [r3]
 8001670:	e031      	b.n	80016d6 <HAL_SPI_TxRxCpltCallback+0xea>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4a48      	ldr	r2, [pc, #288]	; (80017a0 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	da16      	bge.n	80016b2 <HAL_SPI_TxRxCpltCallback+0xc6>
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001694:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
 80016b0:	e011      	b.n	80016d6 <HAL_SPI_TxRxCpltCallback+0xea>
		else velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos);
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016d2:	edc3 7a00 	vstr	s15, [r3]

		last_pos = (int32_t)data_encoders.Encoder1_pos;
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80016de:	601a      	str	r2, [r3, #0]
		if(count  == 10){
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	2b0a      	cmp	r3, #10
 80016e6:	d11f      	bne.n	8001728 <HAL_SPI_TxRxCpltCallback+0x13c>
			data_encoders.Velocity = (int32_t)(velocity_temp/360/10*10000*60);
 80016e8:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80017a8 <HAL_SPI_TxRxCpltCallback+0x1bc>
 80016f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fe:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80017ac <HAL_SPI_TxRxCpltCallback+0x1c0>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017b0 <HAL_SPI_TxRxCpltCallback+0x1c4>
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001712:	ee17 2a90 	vmov	r2, s15
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001718:	60da      	str	r2, [r3, #12]
			velocity_temp = 0;
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_SPI_TxRxCpltCallback+0x1b0>)
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
			count = 0;
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
		}
		count++;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001732:	801a      	strh	r2, [r3, #0]
	}
	if (hspi == &hspi3) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d11a      	bne.n	8001772 <HAL_SPI_TxRxCpltCallback+0x186>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	2104      	movs	r1, #4
 8001740:	481d      	ldr	r0, [pc, #116]	; (80017b8 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001742:	f006 fa79 	bl	8007c38 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001748:	78db      	ldrb	r3, [r3, #3]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21a      	sxth	r2, r3
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 800175a:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001764:	7852      	ldrb	r2, [r2, #1]
 8001766:	0892      	lsrs	r2, r2, #2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4313      	orrs	r3, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001770:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_SPI_TxRxCpltCallback+0x1d4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001778:	4798      	blx	r3
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000880 	.word	0x20000880
 8001788:	48000400 	.word	0x48000400
 800178c:	20000334 	.word	0x20000334
 8001790:	20000350 	.word	0x20000350
 8001794:	20000368 	.word	0x20000368
 8001798:	0002bf20 	.word	0x0002bf20
 800179c:	20000364 	.word	0x20000364
 80017a0:	fffd40e0 	.word	0xfffd40e0
 80017a4:	2000036c 	.word	0x2000036c
 80017a8:	43b40000 	.word	0x43b40000
 80017ac:	461c4000 	.word	0x461c4000
 80017b0:	42700000 	.word	0x42700000
 80017b4:	200008e4 	.word	0x200008e4
 80017b8:	48000c00 	.word	0x48000c00
 80017bc:	20000344 	.word	0x20000344
 80017c0:	2000034c 	.word	0x2000034c

080017c4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2140      	movs	r1, #64	; 0x40
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017d2:	f006 fa31 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2104      	movs	r1, #4
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017dc:	f006 fa2c 	bl	8007c38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80017e0:	2305      	movs	r3, #5
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017e4:	4909      	ldr	r1, [pc, #36]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017e8:	f007 fb1e 	bl	8008e28 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80017ec:	2305      	movs	r3, #5
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017f0:	4909      	ldr	r1, [pc, #36]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017f2:	480a      	ldr	r0, [pc, #40]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017f4:	f007 fb18 	bl	8008e28 <HAL_SPI_TransmitReceive_DMA>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	48000400 	.word	0x48000400
 8001804:	48000c00 	.word	0x48000c00
 8001808:	20000334 	.word	0x20000334
 800180c:	2000032c 	.word	0x2000032c
 8001810:	20000880 	.word	0x20000880
 8001814:	20000344 	.word	0x20000344
 8001818:	2000033c 	.word	0x2000033c
 800181c:	200008e4 	.word	0x200008e4

08001820 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80a2 	beq.w	8001978 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ed93 7a02 	vldr	s14, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a04 	vldr	s15, [r3, #16]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 6a06 	vldr	s13, [r3, #24]
 8001868:	edd7 7a03 	vldr	s15, [r7, #12]
 800186c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <Compute+0x82>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	ed93 7a03 	vldr	s14, [r3, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001890:	edd7 7a02 	vldr	s15, [r7, #8]
 8001894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd04      	ble.n	80018c2 <Compute+0xa2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	e00e      	b.n	80018e0 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d503      	bpl.n	80018e0 <Compute+0xc0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <Compute+0xe0>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80018f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80018fe:	e003      	b.n	8001908 <Compute+0xe8>
	else val->Output = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	ed93 7a01 	vldr	s14, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edd3 6a03 	vldr	s13, [r3, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	ed93 6a07 	vldr	s12, [r3, #28]
 800191a:	edd7 7a02 	vldr	s15, [r7, #8]
 800191e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001922:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	ed93 7a01 	vldr	s14, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800193c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	dd04      	ble.n	8001950 <Compute+0x130>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	e00e      	b.n	800196e <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	ed93 7a01 	vldr	s14, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	edd3 7a08 	vldr	s15, [r3, #32]
 800195c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	d503      	bpl.n	800196e <Compute+0x14e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	e000      	b.n	800197a <Compute+0x15a>
	if(!val->inAuto) return;
 8001978:	bf00      	nop
}
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6178      	str	r0, [r7, #20]
 800198c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001990:	edc7 0a03 	vstr	s1, [r7, #12]
 8001994:	ed87 1a02 	vstr	s2, [r7, #8]
 8001998:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800199c:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	f100 809b 	bmi.w	8001ae2 <SetTunings+0x15e>
 80019ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	f100 8093 	bmi.w	8001ae2 <SetTunings+0x15e>
 80019bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	f100 808b 	bmi.w	8001ae2 <SetTunings+0x15e>
 80019cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	f100 8083 	bmi.w	8001ae2 <SetTunings+0x15e>
 80019dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	dc79      	bgt.n	8001ae2 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80019ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80019f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	bfcc      	ite	gt
 80019fc:	2301      	movgt	r3, #1
 80019fe:	2300      	movle	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8001a0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	bf4c      	ite	mi
 8001a1c:	2301      	movmi	r3, #1
 8001a1e:	2300      	movpl	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a36:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001af0 <SetTunings+0x16c>
 8001a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3e:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8001a48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8001a5a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d11d      	bne.n	8001ab0 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a7a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001af4 <SetTunings+0x170>
 8001a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a8e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001af4 <SetTunings+0x170>
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aa2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001af4 <SetTunings+0x170>
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001ae0:	e000      	b.n	8001ae4 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001ae2:	bf00      	nop
}
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	49742400 	.word	0x49742400
 8001af4:	00000000 	.word	0x00000000

08001af8 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dd25      	ble.n	8001b54 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b40:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b6c:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001b70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dc44      	bgt.n	8001c0c <SetOutputLimits+0xac>
   val->outMin = Min;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd04      	ble.n	8001bae <SetOutputLimits+0x4e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	e00e      	b.n	8001bcc <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d503      	bpl.n	8001bcc <SetOutputLimits+0x6c>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	dd04      	ble.n	8001bec <SetOutputLimits+0x8c>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	e010      	b.n	8001c0e <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d505      	bpl.n	8001c0e <SetOutputLimits+0xae>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e000      	b.n	8001c0e <SetOutputLimits+0xae>
   if(Min > Max) return;
 8001c0c:	bf00      	nop
}
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2201      	moveq	r2, #1
 8001c3e:	2200      	movne	r2, #0
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d102      	bne.n	8001c4c <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f808 	bl	8001c5c <Initialize>
    }
    val->inAuto = newAuto;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <Initialize>:

void Initialize(PID_instance *val)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	dd04      	ble.n	8001c94 <Initialize+0x38>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001c92:	e00f      	b.n	8001cb4 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d400      	bmi.n	8001cac <Initialize+0x50>
}
 8001caa:	e003      	b.n	8001cb4 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8001cdc:	b40f      	push	{r0, r1, r2, r3}
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <PrintServerPrintf+0x44>)
 8001cf4:	f00a fede 	bl	800cab4 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <PrintServerPrintf+0x48>)
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	4808      	ldr	r0, [pc, #32]	; (8001d20 <PrintServerPrintf+0x44>)
 8001cfe:	f7fe fa8f 	bl	8000220 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4905      	ldr	r1, [pc, #20]	; (8001d20 <PrintServerPrintf+0x44>)
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f009 fbac 	bl	800b468 <HAL_UART_Transmit_DMA>
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d1a:	b004      	add	sp, #16
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000370 	.word	0x20000370
 8001d24:	20000138 	.word	0x20000138

08001d28 <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <ADC_CAL_init+0x14>
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e1dc      	b.n	80020f6 <ADC_CAL_init+0x3ce>

	//copy pointer
	adc_handle_CAL = hadc;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8001d40:	217f      	movs	r1, #127	; 0x7f
 8001d42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d44:	f003 ffba 	bl	8005cbc <HAL_ADCEx_Calibration_Start>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 8001d4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <ADC_CAL_init+0x34>
 8001d56:	f06f 0301 	mvn.w	r3, #1
 8001d5a:	e1cc      	b.n	80020f6 <ADC_CAL_init+0x3ce>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 8001d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 8001d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	2220      	movs	r2, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00a fea9 	bl	800cad0 <memset>

	calibrating = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	while(calibrating){
 8001d84:	e19c      	b.n	80020c0 <ADC_CAL_init+0x398>
		sConfig.Channel = ADC_CHANNEL_0;
 8001d86:	2301      	movs	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d92:	f003 f93f 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <ADC_CAL_init+0x82>
 8001da4:	f06f 0302 	mvn.w	r3, #2
 8001da8:	e1a5      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001daa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dac:	f002 fc7a 	bl	80046a4 <HAL_ADC_Start>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001db6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <ADC_CAL_init+0x9c>
 8001dbe:	f06f 0302 	mvn.w	r3, #2
 8001dc2:	e198      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dc8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dca:	f002 fd5b 	bl	8004884 <HAL_ADC_PollForConversion>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d102      	bne.n	8001de2 <ADC_CAL_init+0xba>
 8001ddc:	f06f 0303 	mvn.w	r3, #3
 8001de0:	e189      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001de2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <ADC_CAL_init+0xc8>
 8001dea:	f06f 0304 	mvn.w	r3, #4
 8001dee:	e182      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001df0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001df2:	f002 fed3 	bl	8004b9c <HAL_ADC_GetValue>
 8001df6:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001df8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dfa:	f002 fd0f 	bl	800481c <HAL_ADC_Stop>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001e04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <ADC_CAL_init+0xea>
 8001e0c:	f06f 0305 	mvn.w	r3, #5
 8001e10:	e171      	b.n	80020f6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_1;
 8001e12:	4bbb      	ldr	r3, [pc, #748]	; (8002100 <ADC_CAL_init+0x3d8>)
 8001e14:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e1e:	f003 f8f9 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <ADC_CAL_init+0x10e>
 8001e30:	f06f 0302 	mvn.w	r3, #2
 8001e34:	e15f      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001e36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e38:	f002 fc34 	bl	80046a4 <HAL_ADC_Start>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <ADC_CAL_init+0x128>
 8001e4a:	f06f 0302 	mvn.w	r3, #2
 8001e4e:	e152      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e56:	f002 fd15 	bl	8004884 <HAL_ADC_PollForConversion>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d102      	bne.n	8001e6e <ADC_CAL_init+0x146>
 8001e68:	f06f 0303 	mvn.w	r3, #3
 8001e6c:	e143      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001e6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <ADC_CAL_init+0x154>
 8001e76:	f06f 0304 	mvn.w	r3, #4
 8001e7a:	e13c      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001e7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e7e:	f002 fe8d 	bl	8004b9c <HAL_ADC_GetValue>
 8001e82:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001e84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e86:	f002 fcc9 	bl	800481c <HAL_ADC_Stop>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <ADC_CAL_init+0x176>
 8001e98:	f06f 0305 	mvn.w	r3, #5
 8001e9c:	e12b      	b.n	80020f6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_2;
 8001e9e:	4b99      	ldr	r3, [pc, #612]	; (8002104 <ADC_CAL_init+0x3dc>)
 8001ea0:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eaa:	f003 f8b3 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <ADC_CAL_init+0x19a>
 8001ebc:	f06f 0302 	mvn.w	r3, #2
 8001ec0:	e119      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001ec2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ec4:	f002 fbee 	bl	80046a4 <HAL_ADC_Start>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001ece:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <ADC_CAL_init+0x1b4>
 8001ed6:	f06f 0302 	mvn.w	r3, #2
 8001eda:	e10c      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001edc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ee0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ee2:	f002 fccf 	bl	8004884 <HAL_ADC_PollForConversion>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d102      	bne.n	8001efa <ADC_CAL_init+0x1d2>
 8001ef4:	f06f 0303 	mvn.w	r3, #3
 8001ef8:	e0fd      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <ADC_CAL_init+0x1e0>
 8001f02:	f06f 0304 	mvn.w	r3, #4
 8001f06:	e0f6      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001f08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f0a:	f002 fe47 	bl	8004b9c <HAL_ADC_GetValue>
 8001f0e:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001f10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f12:	f002 fc83 	bl	800481c <HAL_ADC_Stop>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <ADC_CAL_init+0x202>
 8001f24:	f06f 0305 	mvn.w	r3, #5
 8001f28:	e0e5      	b.n	80020f6 <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_3;
 8001f2a:	4b77      	ldr	r3, [pc, #476]	; (8002108 <ADC_CAL_init+0x3e0>)
 8001f2c:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f36:	f003 f86d 	bl	8005014 <HAL_ADC_ConfigChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <ADC_CAL_init+0x226>
 8001f48:	f06f 0302 	mvn.w	r3, #2
 8001f4c:	e0d3      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001f4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f50:	f002 fba8 	bl	80046a4 <HAL_ADC_Start>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <ADC_CAL_init+0x240>
 8001f62:	f06f 0302 	mvn.w	r3, #2
 8001f66:	e0c6      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f6e:	f002 fc89 	bl	8004884 <HAL_ADC_PollForConversion>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d102      	bne.n	8001f86 <ADC_CAL_init+0x25e>
 8001f80:	f06f 0303 	mvn.w	r3, #3
 8001f84:	e0b7      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <ADC_CAL_init+0x26c>
 8001f8e:	f06f 0304 	mvn.w	r3, #4
 8001f92:	e0b0      	b.n	80020f6 <ADC_CAL_init+0x3ce>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001f94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f96:	f002 fe01 	bl	8004b9c <HAL_ADC_GetValue>
 8001f9a:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001f9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f9e:	f002 fc3d 	bl	800481c <HAL_ADC_Stop>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001fa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <ADC_CAL_init+0x28e>
 8001fb0:	f06f 0305 	mvn.w	r3, #5
 8001fb4:	e09f      	b.n	80020f6 <ADC_CAL_init+0x3ce>


		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8001fb6:	4b55      	ldr	r3, [pc, #340]	; (800210c <ADC_CAL_init+0x3e4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <ADC_CAL_init+0x3e8>)
 8001fd4:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <ADC_CAL_init+0x3e8>)
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	b212      	sxth	r2, r2
 8001fe0:	fb03 f202 	mul.w	r2, r3, r2
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	; (8002114 <ADC_CAL_init+0x3ec>)
 8001fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	0852      	lsrs	r2, r2, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	0adb      	lsrs	r3, r3, #11
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	011a      	lsls	r2, r3, #4
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <ADC_CAL_init+0x3f0>)
 8002000:	fb82 1203 	smull	r1, r2, r2, r3
 8002004:	1152      	asrs	r2, r2, #5
 8002006:	17db      	asrs	r3, r3, #31
 8002008:	1ad2      	subs	r2, r2, r3
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	4413      	add	r3, r2
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 8002010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	4a3e      	ldr	r2, [pc, #248]	; (8002110 <ADC_CAL_init+0x3e8>)
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	b212      	sxth	r2, r2
 800201a:	fb03 f202 	mul.w	r2, r3, r2
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <ADC_CAL_init+0x3ec>)
 8002020:	fba3 1302 	umull	r1, r3, r3, r2
 8002024:	1ad2      	subs	r2, r2, r3
 8002026:	0852      	lsrs	r2, r2, #1
 8002028:	4413      	add	r3, r2
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	461a      	mov	r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	011a      	lsls	r2, r3, #4
 8002036:	4413      	add	r3, r2
 8002038:	4a37      	ldr	r2, [pc, #220]	; (8002118 <ADC_CAL_init+0x3f0>)
 800203a:	fb82 1203 	smull	r1, r2, r2, r3
 800203e:	1152      	asrs	r2, r2, #5
 8002040:	17db      	asrs	r3, r3, #31
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	4413      	add	r3, r2
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 800204a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	4a30      	ldr	r2, [pc, #192]	; (8002110 <ADC_CAL_init+0x3e8>)
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	b212      	sxth	r2, r2
 8002054:	fb03 f202 	mul.w	r2, r3, r2
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <ADC_CAL_init+0x3ec>)
 800205a:	fba3 1302 	umull	r1, r3, r3, r2
 800205e:	1ad2      	subs	r2, r2, r3
 8002060:	0852      	lsrs	r2, r2, #1
 8002062:	4413      	add	r3, r2
 8002064:	0adb      	lsrs	r3, r3, #11
 8002066:	461a      	mov	r2, r3
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	011a      	lsls	r2, r3, #4
 8002070:	4413      	add	r3, r2
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <ADC_CAL_init+0x3f0>)
 8002074:	fb82 1203 	smull	r1, r2, r2, r3
 8002078:	1152      	asrs	r2, r2, #5
 800207a:	17db      	asrs	r3, r3, #31
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	4413      	add	r3, r2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
		calibrating--;
 8002084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002088:	3b01      	subs	r3, #1
 800208a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 800208e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002092:	2b00      	cmp	r3, #0
 8002094:	d114      	bne.n	80020c0 <ADC_CAL_init+0x398>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	4a20      	ldr	r2, [pc, #128]	; (800211c <ADC_CAL_init+0x3f4>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020a2:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <ADC_CAL_init+0x3f4>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020b0:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	4a19      	ldr	r2, [pc, #100]	; (800211c <ADC_CAL_init+0x3f4>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	4a18      	ldr	r2, [pc, #96]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020be:	6093      	str	r3, [r2, #8]
	while(calibrating){
 80020c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f ae5e 	bne.w	8001d86 <ADC_CAL_init+0x5e>

		}
	}
	Voltage_offset[0] = 2400;
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020cc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80020d0:	601a      	str	r2, [r3, #0]
	Voltage_offset[1] = 2400;
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020d4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80020d8:	605a      	str	r2, [r3, #4]
	Voltage_offset[2] = 2400;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <ADC_CAL_init+0x3f8>)
 80020dc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80020e0:	609a      	str	r2, [r3, #8]


	//---------------DAC DEBUG-------------
	HAL_DAC_Init(&hdac1);
 80020e2:	4810      	ldr	r0, [pc, #64]	; (8002124 <ADC_CAL_init+0x3fc>)
 80020e4:	f004 f831 	bl	800614a <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 80020e8:	2100      	movs	r1, #0
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <ADC_CAL_init+0x3fc>)
 80020ec:	f004 f84f 	bl	800618e <HAL_DAC_Start>


	return VDDA; //success
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <ADC_CAL_init+0x3e8>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b21b      	sxth	r3, r3
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3750      	adds	r7, #80	; 0x50
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	04300002 	.word	0x04300002
 8002104:	08600004 	.word	0x08600004
 8002108:	0c900008 	.word	0x0c900008
 800210c:	2000013c 	.word	0x2000013c
 8002110:	200005bc 	.word	0x200005bc
 8002114:	00100101 	.word	0x00100101
 8002118:	51eb851f 	.word	0x51eb851f
 800211c:	10624dd3 	.word	0x10624dd3
 8002120:	200005b0 	.word	0x200005b0
 8002124:	200007d0 	.word	0x200007d0

08002128 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <current_init+0x28>)
 8002132:	f7ff fdf9 	bl	8001d28 <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <current_init+0x2c>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 800213c:	2208      	movs	r2, #8
 800213e:	4906      	ldr	r1, [pc, #24]	; (8002158 <current_init+0x30>)
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <current_init+0x28>)
 8002142:	f002 fc77 	bl	8004a34 <HAL_ADC_Start_DMA>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000634 	.word	0x20000634
 8002154:	200005c0 	.word	0x200005c0
 8002158:	20000570 	.word	0x20000570

0800215c <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <voltage_temperature_init+0x20>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 800216a:	2208      	movs	r2, #8
 800216c:	4904      	ldr	r1, [pc, #16]	; (8002180 <voltage_temperature_init+0x24>)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <voltage_temperature_init+0x28>)
 8002170:	f002 fc60 	bl	8004a34 <HAL_ADC_Start_DMA>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200005d4 	.word	0x200005d4
 8002180:	20000590 	.word	0x20000590
 8002184:	200006a0 	.word	0x200006a0

08002188 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a78      	ldr	r2, [pc, #480]	; (8002374 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8002194:	4293      	cmp	r3, r2
 8002196:	f040 8093 	bne.w	80022c0 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 800219a:	4b77      	ldr	r3, [pc, #476]	; (8002378 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b73      	ldr	r3, [pc, #460]	; (800237c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80021ba:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80021c4:	8812      	ldrh	r2, [r2, #0]
 80021c6:	b212      	sxth	r2, r2
 80021c8:	fb03 f202 	mul.w	r2, r3, r2
 80021cc:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80021ce:	fba3 1302 	umull	r1, r3, r3, r2
 80021d2:	1ad2      	subs	r2, r2, r3
 80021d4:	0852      	lsrs	r2, r2, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	0ada      	lsrs	r2, r3, #11
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	011a      	lsls	r2, r3, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	4a68      	ldr	r2, [pc, #416]	; (8002388 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095a      	lsrs	r2, r3, #5
 80021ec:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	4a64      	ldr	r2, [pc, #400]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80021fe:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8002200:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	b212      	sxth	r2, r2
 800220c:	fb03 f202 	mul.w	r2, r3, r2
 8002210:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8002212:	fba3 1302 	umull	r1, r3, r3, r2
 8002216:	1ad2      	subs	r2, r2, r3
 8002218:	0852      	lsrs	r2, r2, #1
 800221a:	4413      	add	r3, r2
 800221c:	0ada      	lsrs	r2, r3, #11
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	011a      	lsls	r2, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	4a57      	ldr	r2, [pc, #348]	; (8002388 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095a      	lsrs	r2, r3, #5
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	461a      	mov	r2, r3
 8002238:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	4a53      	ldr	r2, [pc, #332]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8002242:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8002244:	4b4d      	ldr	r3, [pc, #308]	; (800237c <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	b212      	sxth	r2, r2
 8002250:	fb03 f202 	mul.w	r2, r3, r2
 8002254:	4b4b      	ldr	r3, [pc, #300]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8002256:	fba3 1302 	umull	r1, r3, r3, r2
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	0852      	lsrs	r2, r2, #1
 800225e:	4413      	add	r3, r2
 8002260:	0ada      	lsrs	r2, r3, #11
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	011a      	lsls	r2, r3, #4
 800226a:	4413      	add	r3, r2
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095a      	lsrs	r2, r3, #5
 8002274:	4b45      	ldr	r3, [pc, #276]	; (800238c <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	461a      	mov	r2, r3
 800227c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8002286:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002288:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002290:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002294:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	bfb8      	it	lt
 800229c:	425b      	neglt	r3, r3
 800229e:	441a      	add	r2, r3
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bfb8      	it	lt
 80022a8:	425b      	neglt	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	0fda      	lsrs	r2, r3, #31
 80022ae:	4413      	add	r3, r2
 80022b0:	105b      	asrs	r3, r3, #1
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80022b6:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_ADC_ConvHalfCpltCallback+0x20c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4834      	ldr	r0, [pc, #208]	; (8002390 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80022be:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a35      	ldr	r2, [pc, #212]	; (8002398 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d151      	bne.n	800236c <HAL_ADC_ConvHalfCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80022d0:	8812      	ldrh	r2, [r2, #0]
 80022d2:	b212      	sxth	r2, r2
 80022d4:	fb03 f202 	mul.w	r2, r3, r2
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80022da:	fba3 1302 	umull	r1, r3, r3, r2
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	0852      	lsrs	r2, r2, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	0adb      	lsrs	r3, r3, #11
 80022e6:	b25a      	sxtb	r2, r3
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80022ea:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 80022ec:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	4a23      	ldr	r2, [pc, #140]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	b212      	sxth	r2, r2
 80022f8:	fb03 f202 	mul.w	r2, r3, r2
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80022fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002302:	1ad2      	subs	r2, r2, r3
 8002304:	0852      	lsrs	r2, r2, #1
 8002306:	4413      	add	r3, r2
 8002308:	0adb      	lsrs	r3, r3, #11
 800230a:	b25a      	sxtb	r2, r3
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800230e:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	4a1a      	ldr	r2, [pc, #104]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	b212      	sxth	r2, r2
 800231c:	fb03 f202 	mul.w	r2, r3, r2
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	461a      	mov	r2, r3
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 800232c:	fba3 1302 	umull	r1, r3, r3, r2
 8002330:	1ad2      	subs	r2, r2, r3
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	4413      	add	r3, r2
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800233a:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_ADC_ConvHalfCpltCallback+0x214>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	b212      	sxth	r2, r2
 8002348:	fb03 f202 	mul.w	r2, r3, r2
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0bdb      	lsrs	r3, r3, #15
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8002362:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800236a:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000634 	.word	0x20000634
 8002378:	2000013c 	.word	0x2000013c
 800237c:	20000570 	.word	0x20000570
 8002380:	200005bc 	.word	0x200005bc
 8002384:	00100101 	.word	0x00100101
 8002388:	51eb851f 	.word	0x51eb851f
 800238c:	200005b0 	.word	0x200005b0
 8002390:	200005c4 	.word	0x200005c4
 8002394:	200005c0 	.word	0x200005c0
 8002398:	200006a0 	.word	0x200006a0
 800239c:	20000590 	.word	0x20000590
 80023a0:	200005d8 	.word	0x200005d8
 80023a4:	ccd99a67 	.word	0xccd99a67
 80023a8:	200005d4 	.word	0x200005d4

080023ac <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a78      	ldr	r2, [pc, #480]	; (8002598 <HAL_ADC_ConvCpltCallback+0x1ec>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f040 8093 	bne.w	80024e4 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 80023be:	4b77      	ldr	r3, [pc, #476]	; (800259c <HAL_ADC_ConvCpltCallback+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b71      	ldr	r3, [pc, #452]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80023de:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 80023e0:	4b6f      	ldr	r3, [pc, #444]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	b212      	sxth	r2, r2
 80023ec:	fb03 f202 	mul.w	r2, r3, r2
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80023f2:	fba3 1302 	umull	r1, r3, r3, r2
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	0ada      	lsrs	r2, r3, #11
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	011a      	lsls	r2, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_ADC_ConvCpltCallback+0x200>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095a      	lsrs	r2, r3, #5
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_ADC_ConvCpltCallback+0x204>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	461a      	mov	r2, r3
 8002418:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4a64      	ldr	r2, [pc, #400]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 8002422:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	b212      	sxth	r2, r2
 8002430:	fb03 f202 	mul.w	r2, r3, r2
 8002434:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002436:	fba3 1302 	umull	r1, r3, r3, r2
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	0852      	lsrs	r2, r2, #1
 800243e:	4413      	add	r3, r2
 8002440:	0ada      	lsrs	r2, r3, #11
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	011a      	lsls	r2, r3, #4
 800244a:	4413      	add	r3, r2
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_ADC_ConvCpltCallback+0x200>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095a      	lsrs	r2, r3, #5
 8002454:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_ADC_ConvCpltCallback+0x204>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	461a      	mov	r2, r3
 800245c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	4a53      	ldr	r2, [pc, #332]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 8002466:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	b212      	sxth	r2, r2
 8002474:	fb03 f202 	mul.w	r2, r3, r2
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 800247a:	fba3 1302 	umull	r1, r3, r3, r2
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	0852      	lsrs	r2, r2, #1
 8002482:	4413      	add	r3, r2
 8002484:	0ada      	lsrs	r2, r3, #11
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	011a      	lsls	r2, r3, #4
 800248e:	4413      	add	r3, r2
 8002490:	4a46      	ldr	r2, [pc, #280]	; (80025ac <HAL_ADC_ConvCpltCallback+0x200>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095a      	lsrs	r2, r3, #5
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <HAL_ADC_ConvCpltCallback+0x204>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4a42      	ldr	r2, [pc, #264]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024aa:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80024b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bfb8      	it	lt
 80024c0:	425b      	neglt	r3, r3
 80024c2:	441a      	add	r2, r3
 80024c4:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bfb8      	it	lt
 80024cc:	425b      	neglt	r3, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	0fda      	lsrs	r2, r3, #31
 80024d2:	4413      	add	r3, r2
 80024d4:	105b      	asrs	r3, r3, #1
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024da:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_ADC_ConvCpltCallback+0x20c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4834      	ldr	r0, [pc, #208]	; (80025b4 <HAL_ADC_ConvCpltCallback+0x208>)
 80024e2:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a35      	ldr	r2, [pc, #212]	; (80025bc <HAL_ADC_ConvCpltCallback+0x210>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d151      	bne.n	8002590 <HAL_ADC_ConvCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 80024ec:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x214>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80024f4:	8812      	ldrh	r2, [r2, #0]
 80024f6:	b212      	sxth	r2, r2
 80024f8:	fb03 f202 	mul.w	r2, r3, r2
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80024fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	0852      	lsrs	r2, r2, #1
 8002506:	4413      	add	r3, r2
 8002508:	0adb      	lsrs	r3, r3, #11
 800250a:	b25a      	sxtb	r2, r3
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x218>)
 800250e:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002510:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x214>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002518:	8812      	ldrh	r2, [r2, #0]
 800251a:	b212      	sxth	r2, r2
 800251c:	fb03 f202 	mul.w	r2, r3, r2
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002522:	fba3 1302 	umull	r1, r3, r3, r2
 8002526:	1ad2      	subs	r2, r2, r3
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	4413      	add	r3, r2
 800252c:	0adb      	lsrs	r3, r3, #11
 800252e:	b25a      	sxtb	r2, r3
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x218>)
 8002532:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x214>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	b212      	sxth	r2, r2
 8002540:	fb03 f202 	mul.w	r2, r3, r2
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	4413      	add	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	461a      	mov	r2, r3
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002550:	fba3 1302 	umull	r1, r3, r3, r2
 8002554:	1ad2      	subs	r2, r2, r3
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	4413      	add	r3, r2
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x218>)
 800255e:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x214>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	b212      	sxth	r2, r2
 800256c:	fb03 f202 	mul.w	r2, r3, r2
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x21c>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	0bdb      	lsrs	r3, r3, #15
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x218>)
 8002586:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_ADC_ConvCpltCallback+0x220>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	480d      	ldr	r0, [pc, #52]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x218>)
 800258e:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000634 	.word	0x20000634
 800259c:	2000013c 	.word	0x2000013c
 80025a0:	20000570 	.word	0x20000570
 80025a4:	200005bc 	.word	0x200005bc
 80025a8:	00100101 	.word	0x00100101
 80025ac:	51eb851f 	.word	0x51eb851f
 80025b0:	200005b0 	.word	0x200005b0
 80025b4:	200005c4 	.word	0x200005c4
 80025b8:	200005c0 	.word	0x200005c0
 80025bc:	200006a0 	.word	0x200006a0
 80025c0:	20000590 	.word	0x20000590
 80025c4:	200005d8 	.word	0x200005d8
 80025c8:	ccd99a67 	.word	0xccd99a67
 80025cc:	200005d4 	.word	0x200005d4

080025d0 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f004 fc5f 	bl	8006e9c <HAL_FDCAN_Start>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e00a      	b.n	80025fe <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80025e8:	2200      	movs	r2, #0
 80025ea:	2101      	movs	r1, #1
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f004 fd9b 	bl	8007128 <HAL_FDCAN_ActivateNotification>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <FDCAN_addCallback+0x70>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b09      	cmp	r3, #9
 800261a:	d901      	bls.n	8002620 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 800261c:	2303      	movs	r3, #3
 800261e:	e025      	b.n	800266c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e00c      	b.n	8002640 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <FDCAN_addCallback+0x74>)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d101      	bne.n	800263a <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e018      	b.n	800266c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <FDCAN_addCallback+0x70>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3ed      	bcc.n	8002626 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <FDCAN_addCallback+0x70>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	490a      	ldr	r1, [pc, #40]	; (800267c <FDCAN_addCallback+0x74>)
 8002652:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <FDCAN_addCallback+0x74>)
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <FDCAN_addCallback+0x70>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <FDCAN_addCallback+0x70>)
 8002668:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3724      	adds	r7, #36	; 0x24
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20000630 	.word	0x20000630
 800267c:	200005e0 	.word	0x200005e0

08002680 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8002690:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002694:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80026a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80026a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f004 fc14 	bl	8006eec <HAL_FDCAN_AddMessageToTxFifoQ>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3738      	adds	r7, #56	; 0x38
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b09e      	sub	sp, #120	; 0x78
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80026e2:	f107 030c 	add.w	r3, r7, #12
 80026e6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f004 fc41 	bl	8006f74 <HAL_FDCAN_GetRxMessage>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80026f8:	f000 fd90 	bl	800321c <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	677b      	str	r3, [r7, #116]	; 0x74
 8002700:	e012      	b.n	8002728 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8002702:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8002704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270e:	429a      	cmp	r2, r3
 8002710:	d107      	bne.n	8002722 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8002712:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8002714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002716:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	4610      	mov	r0, r2
 8002720:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002724:	3301      	adds	r3, #1
 8002726:	677b      	str	r3, [r7, #116]	; 0x74
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800272e:	429a      	cmp	r2, r3
 8002730:	d3e7      	bcc.n	8002702 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3778      	adds	r7, #120	; 0x78
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200005e0 	.word	0x200005e0
 8002740:	20000630 	.word	0x20000630

08002744 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	; 0x30
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2220      	movs	r2, #32
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f00a f9b7 	bl	800cad0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002762:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <MX_ADC1_Init+0x154>)
 8002764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <MX_ADC1_Init+0x154>)
 800276c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <MX_ADC1_Init+0x154>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <MX_ADC1_Init+0x154>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <MX_ADC1_Init+0x154>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <MX_ADC1_Init+0x154>)
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800278a:	4b43      	ldr	r3, [pc, #268]	; (8002898 <MX_ADC1_Init+0x154>)
 800278c:	2208      	movs	r2, #8
 800278e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <MX_ADC1_Init+0x154>)
 8002792:	2200      	movs	r2, #0
 8002794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002796:	4b40      	ldr	r3, [pc, #256]	; (8002898 <MX_ADC1_Init+0x154>)
 8002798:	2201      	movs	r2, #1
 800279a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <MX_ADC1_Init+0x154>)
 800279e:	2204      	movs	r2, #4
 80027a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <MX_ADC1_Init+0x154>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <MX_ADC1_Init+0x154>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <MX_ADC1_Init+0x154>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <MX_ADC1_Init+0x154>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <MX_ADC1_Init+0x154>)
 80027c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <MX_ADC1_Init+0x154>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <MX_ADC1_Init+0x154>)
 80027d0:	220c      	movs	r2, #12
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <MX_ADC1_Init+0x154>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80027da:	4b2f      	ldr	r3, [pc, #188]	; (8002898 <MX_ADC1_Init+0x154>)
 80027dc:	2200      	movs	r2, #0
 80027de:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_ADC1_Init+0x154>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e6:	482c      	ldr	r0, [pc, #176]	; (8002898 <MX_ADC1_Init+0x154>)
 80027e8:	f001 fdd2 	bl	8004390 <HAL_ADC_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80027f2:	f000 fd13 	bl	800321c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fe:	4619      	mov	r1, r3
 8002800:	4825      	ldr	r0, [pc, #148]	; (8002898 <MX_ADC1_Init+0x154>)
 8002802:	f003 faef 	bl	8005de4 <HAL_ADCEx_MultiModeConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800280c:	f000 fd06 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <MX_ADC1_Init+0x158>)
 8002812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002814:	2306      	movs	r3, #6
 8002816:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002818:	2303      	movs	r3, #3
 800281a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800281c:	237f      	movs	r3, #127	; 0x7f
 800281e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002820:	2304      	movs	r3, #4
 8002822:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	4619      	mov	r1, r3
 800282c:	481a      	ldr	r0, [pc, #104]	; (8002898 <MX_ADC1_Init+0x154>)
 800282e:	f002 fbf1 	bl	8005014 <HAL_ADC_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002838:	f000 fcf0 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800283c:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_ADC1_Init+0x15c>)
 800283e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002840:	230c      	movs	r3, #12
 8002842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4813      	ldr	r0, [pc, #76]	; (8002898 <MX_ADC1_Init+0x154>)
 800284a:	f002 fbe3 	bl	8005014 <HAL_ADC_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002854:	f000 fce2 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <MX_ADC1_Init+0x160>)
 800285a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800285c:	2312      	movs	r3, #18
 800285e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	4619      	mov	r1, r3
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <MX_ADC1_Init+0x154>)
 8002866:	f002 fbd5 	bl	8005014 <HAL_ADC_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002870:	f000 fcd4 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <MX_ADC1_Init+0x164>)
 8002876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002878:	2318      	movs	r3, #24
 800287a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_ADC1_Init+0x154>)
 8002882:	f002 fbc7 	bl	8005014 <HAL_ADC_ConfigChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 800288c:	f000 fcc6 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	3730      	adds	r7, #48	; 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000634 	.word	0x20000634
 800289c:	04300002 	.word	0x04300002
 80028a0:	08600004 	.word	0x08600004
 80028a4:	0c900008 	.word	0x0c900008
 80028a8:	cb840000 	.word	0xcb840000

080028ac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028b2:	463b      	mov	r3, r7
 80028b4:	2220      	movs	r2, #32
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f00a f909 	bl	800cad0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <MX_ADC2_Init+0x130>)
 80028c0:	4a47      	ldr	r2, [pc, #284]	; (80029e0 <MX_ADC2_Init+0x134>)
 80028c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028c4:	4b45      	ldr	r3, [pc, #276]	; (80029dc <MX_ADC2_Init+0x130>)
 80028c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <MX_ADC2_Init+0x130>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <MX_ADC2_Init+0x130>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <MX_ADC2_Init+0x130>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028de:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <MX_ADC2_Init+0x130>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028e4:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <MX_ADC2_Init+0x130>)
 80028e6:	2204      	movs	r2, #4
 80028e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <MX_ADC2_Init+0x130>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <MX_ADC2_Init+0x130>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <MX_ADC2_Init+0x130>)
 80028f8:	2204      	movs	r2, #4
 80028fa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <MX_ADC2_Init+0x130>)
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <MX_ADC2_Init+0x130>)
 8002906:	2200      	movs	r2, #0
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800290a:	4b34      	ldr	r3, [pc, #208]	; (80029dc <MX_ADC2_Init+0x130>)
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <MX_ADC2_Init+0x130>)
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <MX_ADC2_Init+0x130>)
 800291a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <MX_ADC2_Init+0x130>)
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <MX_ADC2_Init+0x130>)
 800292a:	220c      	movs	r2, #12
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <MX_ADC2_Init+0x130>)
 8002930:	2200      	movs	r2, #0
 8002932:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <MX_ADC2_Init+0x130>)
 8002936:	2200      	movs	r2, #0
 8002938:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <MX_ADC2_Init+0x130>)
 800293c:	2201      	movs	r2, #1
 800293e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002940:	4826      	ldr	r0, [pc, #152]	; (80029dc <MX_ADC2_Init+0x130>)
 8002942:	f001 fd25 	bl	8004390 <HAL_ADC_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 800294c:	f000 fc66 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <MX_ADC2_Init+0x138>)
 8002952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002954:	2306      	movs	r3, #6
 8002956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002958:	2307      	movs	r3, #7
 800295a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800295c:	237f      	movs	r3, #127	; 0x7f
 800295e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002960:	2304      	movs	r3, #4
 8002962:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002968:	463b      	mov	r3, r7
 800296a:	4619      	mov	r1, r3
 800296c:	481b      	ldr	r0, [pc, #108]	; (80029dc <MX_ADC2_Init+0x130>)
 800296e:	f002 fb51 	bl	8005014 <HAL_ADC_ConfigChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002978:	f000 fc50 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_ADC2_Init+0x13c>)
 800297e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002980:	230c      	movs	r3, #12
 8002982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002988:	463b      	mov	r3, r7
 800298a:	4619      	mov	r1, r3
 800298c:	4813      	ldr	r0, [pc, #76]	; (80029dc <MX_ADC2_Init+0x130>)
 800298e:	f002 fb41 	bl	8005014 <HAL_ADC_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8002998:	f000 fc40 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_ADC2_Init+0x140>)
 800299e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029a0:	2312      	movs	r3, #18
 80029a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	4619      	mov	r1, r3
 80029a8:	480c      	ldr	r0, [pc, #48]	; (80029dc <MX_ADC2_Init+0x130>)
 80029aa:	f002 fb33 	bl	8005014 <HAL_ADC_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 80029b4:	f000 fc32 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <MX_ADC2_Init+0x144>)
 80029ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80029bc:	2318      	movs	r3, #24
 80029be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_ADC2_Init+0x130>)
 80029c6:	f002 fb25 	bl	8005014 <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80029d0:	f000 fc24 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200006a0 	.word	0x200006a0
 80029e0:	50000100 	.word	0x50000100
 80029e4:	32601000 	.word	0x32601000
 80029e8:	3ac04000 	.word	0x3ac04000
 80029ec:	36902000 	.word	0x36902000
 80029f0:	0c900008 	.word	0x0c900008

080029f4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b09e      	sub	sp, #120	; 0x78
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	2244      	movs	r2, #68	; 0x44
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f00a f85b 	bl	800cad0 <memset>
  if(adcHandle->Instance==ADC1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a22:	d171      	bne.n	8002b08 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 ff5b 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002a40:	f000 fbec 	bl	800321c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a44:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a79      	ldr	r2, [pc, #484]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a4e:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10b      	bne.n	8002a6e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a76      	ldr	r2, [pc, #472]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b71      	ldr	r3, [pc, #452]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a70      	ldr	r2, [pc, #448]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8002a86:	2307      	movs	r3, #7
 8002a88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a96:	4619      	mov	r1, r3
 8002a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9c:	f004 ff4a 	bl	8007934 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002aa0:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002aa2:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <HAL_ADC_MspInit+0x248>)
 8002aa4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002aa6:	4b64      	ldr	r3, [pc, #400]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aac:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b61      	ldr	r3, [pc, #388]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002abe:	4b5e      	ldr	r3, [pc, #376]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ac6:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002acc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ace:	4b5a      	ldr	r3, [pc, #360]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ad4:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ada:	4857      	ldr	r0, [pc, #348]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002adc:	f003 fd52 	bl	8006584 <HAL_DMA_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002ae6:	f000 fb99 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
 8002af0:	4a51      	ldr	r2, [pc, #324]	; (8002c38 <HAL_ADC_MspInit+0x244>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2012      	movs	r0, #18
 8002afc:	f003 faf1 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002b00:	2012      	movs	r0, #18
 8002b02:	f003 fb08 	bl	8006116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002b06:	e08f      	b.n	8002c28 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_ADC_MspInit+0x24c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 808a 	bne.w	8002c28 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b18:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	4618      	mov	r0, r3
 8002b26:	f005 fee3 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002b30:	f000 fb74 	bl	800321c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002b34:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002b3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <HAL_ADC_MspInit+0x23c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10b      	bne.n	8002b5e <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_ADC_MspInit+0x240>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8002b8e:	2360      	movs	r3, #96	; 0x60
 8002b90:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b92:	2303      	movs	r3, #3
 8002b94:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f004 fec6 	bl	8007934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002ba8:	f640 0304 	movw	r3, #2052	; 0x804
 8002bac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4821      	ldr	r0, [pc, #132]	; (8002c44 <HAL_ADC_MspInit+0x250>)
 8002bbe:	f004 feb9 	bl	8007934 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bc4:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_ADC_MspInit+0x258>)
 8002bc6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bee:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002bfc:	4812      	ldr	r0, [pc, #72]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002bfe:	f003 fcc1 	bl	8006584 <HAL_DMA_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002c08:	f000 fb08 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_ADC_MspInit+0x254>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2012      	movs	r0, #18
 8002c1e:	f003 fa60 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c22:	2012      	movs	r0, #18
 8002c24:	f003 fa77 	bl	8006116 <HAL_NVIC_EnableIRQ>
}
 8002c28:	bf00      	nop
 8002c2a:	3778      	adds	r7, #120	; 0x78
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200007cc 	.word	0x200007cc
 8002c34:	40021000 	.word	0x40021000
 8002c38:	2000070c 	.word	0x2000070c
 8002c3c:	40020008 	.word	0x40020008
 8002c40:	50000100 	.word	0x50000100
 8002c44:	48000400 	.word	0x48000400
 8002c48:	2000076c 	.word	0x2000076c
 8002c4c:	4002001c 	.word	0x4002001c

08002c50 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c56:	463b      	mov	r3, r7
 8002c58:	2230      	movs	r2, #48	; 0x30
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f009 ff37 	bl	800cad0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MX_DAC1_Init+0x6c>)
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <MX_DAC1_Init+0x70>)
 8002c66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002c68:	4814      	ldr	r0, [pc, #80]	; (8002cbc <MX_DAC1_Init+0x6c>)
 8002c6a:	f003 fa6e 	bl	800614a <HAL_DAC_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002c74:	f000 fad2 	bl	800321c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4806      	ldr	r0, [pc, #24]	; (8002cbc <MX_DAC1_Init+0x6c>)
 8002ca4:	f003 fac6 	bl	8006234 <HAL_DAC_ConfigChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002cae:	f000 fab5 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	3730      	adds	r7, #48	; 0x30
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200007d0 	.word	0x200007d0
 8002cc0:	50000800 	.word	0x50000800

08002cc4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_DAC_MspInit+0x74>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d124      	bne.n	8002d30 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_DAC_MspInit+0x78>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d16:	2310      	movs	r3, #16
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4619      	mov	r1, r3
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2c:	f004 fe02 	bl	8007934 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002d30:	bf00      	nop
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	50000800 	.word	0x50000800
 8002d3c:	40021000 	.word	0x40021000

08002d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d46:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6493      	str	r3, [r2, #72]	; 0x48
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6493      	str	r3, [r2, #72]	; 0x48
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6493      	str	r3, [r2, #72]	; 0x48
 8002d82:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <MX_DMA_Init+0xc8>)
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	200b      	movs	r0, #11
 8002d94:	f003 f9a5 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d98:	200b      	movs	r0, #11
 8002d9a:	f003 f9bc 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	200c      	movs	r0, #12
 8002da4:	f003 f99d 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002da8:	200c      	movs	r0, #12
 8002daa:	f003 f9b4 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	200d      	movs	r0, #13
 8002db4:	f003 f995 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002db8:	200d      	movs	r0, #13
 8002dba:	f003 f9ac 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	200e      	movs	r0, #14
 8002dc4:	f003 f98d 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002dc8:	200e      	movs	r0, #14
 8002dca:	f003 f9a4 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2038      	movs	r0, #56	; 0x38
 8002dd4:	f003 f985 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002dd8:	2038      	movs	r0, #56	; 0x38
 8002dda:	f003 f99c 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2039      	movs	r0, #57	; 0x39
 8002de4:	f003 f97d 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002de8:	2039      	movs	r0, #57	; 0x39
 8002dea:	f003 f994 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	203a      	movs	r0, #58	; 0x3a
 8002df4:	f003 f975 	bl	80060e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002df8:	203a      	movs	r0, #58	; 0x3a
 8002dfa:	f003 f98c 	bl	8006116 <HAL_NVIC_EnableIRQ>

}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000

08002e0c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002e10:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <MX_FDCAN1_Init+0x8c>)
 8002e14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e22:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e4a:	222a      	movs	r2, #42	; 0x2a
 8002e4c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e5c:	2209      	movs	r2, #9
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e62:	220a      	movs	r2, #10
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e68:	2209      	movs	r2, #9
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_FDCAN1_Init+0x88>)
 8002e80:	f003 feb2 	bl	8006be8 <HAL_FDCAN_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002e8a:	f000 f9c7 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200007e4 	.word	0x200007e4
 8002e98:	40006400 	.word	0x40006400

08002e9c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b09a      	sub	sp, #104	; 0x68
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	2244      	movs	r2, #68	; 0x44
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f009 fe07 	bl	800cad0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_FDCAN_MspInit+0xbc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d141      	bne.n	8002f50 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 fd07 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002ee8:	f000 f998 	bl	800321c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_FDCAN_MspInit+0xc0>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f20:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002f2e:	2309      	movs	r3, #9
 8002f30:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f36:	4619      	mov	r1, r3
 8002f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3c:	f004 fcfa 	bl	8007934 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2100      	movs	r1, #0
 8002f44:	2015      	movs	r0, #21
 8002f46:	f003 f8cc 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002f4a:	2015      	movs	r0, #21
 8002f4c:	f003 f8e3 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002f50:	bf00      	nop
 8002f52:	3768      	adds	r7, #104	; 0x68
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40006400 	.word	0x40006400
 8002f5c:	40021000 	.word	0x40021000

08002f60 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <MX_FMAC_Init+0x20>)
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <MX_FMAC_Init+0x24>)
 8002f68:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	; (8002f80 <MX_FMAC_Init+0x20>)
 8002f6c:	f004 fc36 	bl	80077dc <HAL_FMAC_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002f76:	f000 f951 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000848 	.word	0x20000848
 8002f84:	40021400 	.word	0x40021400

08002f88 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_FMAC_MspInit+0x38>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10b      	bne.n	8002fb2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_FMAC_MspInit+0x3c>)
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_FMAC_MspInit+0x3c>)
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	6493      	str	r3, [r2, #72]	; 0x48
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_FMAC_MspInit+0x3c>)
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40021400 	.word	0x40021400
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fde:	4b51      	ldr	r3, [pc, #324]	; (8003124 <MX_GPIO_Init+0x15c>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	4a50      	ldr	r2, [pc, #320]	; (8003124 <MX_GPIO_Init+0x15c>)
 8002fe4:	f043 0320 	orr.w	r3, r3, #32
 8002fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <MX_GPIO_Init+0x15c>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff6:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <MX_GPIO_Init+0x15c>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <MX_GPIO_Init+0x15c>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003002:	4b48      	ldr	r3, [pc, #288]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	4b45      	ldr	r3, [pc, #276]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	4a44      	ldr	r2, [pc, #272]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <MX_GPIO_Init+0x15c>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <MX_GPIO_Init+0x15c>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003032:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	4a38      	ldr	r2, [pc, #224]	; (8003124 <MX_GPIO_Init+0x15c>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <MX_GPIO_Init+0x15c>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	21c0      	movs	r1, #192	; 0xc0
 800305a:	4833      	ldr	r0, [pc, #204]	; (8003128 <MX_GPIO_Init+0x160>)
 800305c:	f004 fdec 	bl	8007c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8003060:	2200      	movs	r2, #0
 8003062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306a:	f004 fde5 	bl	8007c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	2104      	movs	r1, #4
 8003072:	482e      	ldr	r0, [pc, #184]	; (800312c <MX_GPIO_Init+0x164>)
 8003074:	f004 fde0 	bl	8007c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8003078:	2200      	movs	r2, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	482c      	ldr	r0, [pc, #176]	; (8003130 <MX_GPIO_Init+0x168>)
 800307e:	f004 fddb 	bl	8007c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8003082:	23c0      	movs	r3, #192	; 0xc0
 8003084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003086:	2301      	movs	r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	4823      	ldr	r0, [pc, #140]	; (8003128 <MX_GPIO_Init+0x160>)
 800309a:	f004 fc4b 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800309e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f004 fc39 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 80030c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030de:	f004 fc29 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 80030e2:	2304      	movs	r3, #4
 80030e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4619      	mov	r1, r3
 80030f8:	480c      	ldr	r0, [pc, #48]	; (800312c <MX_GPIO_Init+0x164>)
 80030fa:	f004 fc1b 	bl	8007934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 80030fe:	2340      	movs	r3, #64	; 0x40
 8003100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4806      	ldr	r0, [pc, #24]	; (8003130 <MX_GPIO_Init+0x168>)
 8003116:	f004 fc0d 	bl	8007934 <HAL_GPIO_Init>

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	48000800 	.word	0x48000800
 800312c:	48000c00 	.word	0x48000c00
 8003130:	48000400 	.word	0x48000400

08003134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003138:	f000 fe05 	bl	8003d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800313c:	f000 f81b 	bl	8003176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003140:	f7ff ff42 	bl	8002fc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003144:	f7ff fdfc 	bl	8002d40 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003148:	f7ff fe60 	bl	8002e0c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800314c:	f000 f86c 	bl	8003228 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003150:	f000 f8a8 	bl	80032a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003154:	f000 fb3c 	bl	80037d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003158:	f7ff faf4 	bl	8002744 <MX_ADC1_Init>
  MX_ADC2_Init();
 800315c:	f7ff fba6 	bl	80028ac <MX_ADC2_Init>
  MX_DAC1_Init();
 8003160:	f7ff fd76 	bl	8002c50 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8003164:	f000 fcec 	bl	8003b40 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003168:	f000 fbfa 	bl	8003960 <MX_TIM3_Init>
  MX_FMAC_Init();
 800316c:	f7ff fef8 	bl	8002f60 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8003170:	f7fd faf6 	bl	8000760 <BLDC_main>
 8003174:	e7fc      	b.n	8003170 <main+0x3c>

08003176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b094      	sub	sp, #80	; 0x50
 800317a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317c:	f107 0318 	add.w	r3, r7, #24
 8003180:	2238      	movs	r2, #56	; 0x38
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f009 fca3 	bl	800cad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003198:	2000      	movs	r0, #0
 800319a:	f004 fd7f 	bl	8007c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800319e:	2302      	movs	r3, #2
 80031a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ac:	2302      	movs	r3, #2
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031b0:	2302      	movs	r3, #2
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031b4:	2304      	movs	r3, #4
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80031b8:	2350      	movs	r3, #80	; 0x50
 80031ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031bc:	2302      	movs	r3, #2
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80031c0:	2308      	movs	r3, #8
 80031c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031c4:	2302      	movs	r3, #2
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c8:	f107 0318 	add.w	r3, r7, #24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fe19 	bl	8007e04 <HAL_RCC_OscConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80031d8:	f000 f820 	bl	800321c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031dc:	230f      	movs	r3, #15
 80031de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e0:	2303      	movs	r3, #3
 80031e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2104      	movs	r1, #4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 f91d 	bl	8008434 <HAL_RCC_ClockConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003200:	f000 f80c 	bl	800321c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8003204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003208:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 800320c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003210:	f005 fa4c 	bl	80086ac <HAL_RCC_MCOConfig>
}
 8003214:	bf00      	nop
 8003216:	3750      	adds	r7, #80	; 0x50
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003224:	e7fe      	b.n	8003224 <Error_Handler+0x8>
	...

08003228 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <MX_SPI1_Init+0x74>)
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <MX_SPI1_Init+0x78>)
 8003230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <MX_SPI1_Init+0x74>)
 8003234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <MX_SPI1_Init+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <MX_SPI1_Init+0x74>)
 8003242:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003246:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <MX_SPI1_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <MX_SPI1_Init+0x74>)
 8003250:	2201      	movs	r2, #1
 8003252:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <MX_SPI1_Init+0x74>)
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <MX_SPI1_Init+0x74>)
 800325e:	2228      	movs	r2, #40	; 0x28
 8003260:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <MX_SPI1_Init+0x74>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <MX_SPI1_Init+0x74>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <MX_SPI1_Init+0x74>)
 8003270:	2200      	movs	r2, #0
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <MX_SPI1_Init+0x74>)
 8003276:	2207      	movs	r2, #7
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <MX_SPI1_Init+0x74>)
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <MX_SPI1_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <MX_SPI1_Init+0x74>)
 8003288:	f005 fd22 	bl	8008cd0 <HAL_SPI_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003292:	f7ff ffc3 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000880 	.word	0x20000880
 80032a0:	40013000 	.word	0x40013000

080032a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <MX_SPI3_Init+0x74>)
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <MX_SPI3_Init+0x78>)
 80032ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <MX_SPI3_Init+0x74>)
 80032b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <MX_SPI3_Init+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <MX_SPI3_Init+0x74>)
 80032be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MX_SPI3_Init+0x74>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <MX_SPI3_Init+0x74>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_SPI3_Init+0x74>)
 80032d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_SPI3_Init+0x74>)
 80032da:	2228      	movs	r2, #40	; 0x28
 80032dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_SPI3_Init+0x74>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_SPI3_Init+0x74>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <MX_SPI3_Init+0x74>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_SPI3_Init+0x74>)
 80032f2:	2207      	movs	r2, #7
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_SPI3_Init+0x74>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_SPI3_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <MX_SPI3_Init+0x74>)
 8003304:	f005 fce4 	bl	8008cd0 <HAL_SPI_Init>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800330e:	f7ff ff85 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200008e4 	.word	0x200008e4
 800331c:	40003c00 	.word	0x40003c00

08003320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a89      	ldr	r2, [pc, #548]	; (8003564 <HAL_SPI_MspInit+0x244>)
 800333e:	4293      	cmp	r3, r2
 8003340:	f040 8083 	bne.w	800344a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003344:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	4a87      	ldr	r2, [pc, #540]	; (8003568 <HAL_SPI_MspInit+0x248>)
 800334a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334e:	6613      	str	r3, [r2, #96]	; 0x60
 8003350:	4b85      	ldr	r3, [pc, #532]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335c:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_SPI_MspInit+0x248>)
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	4a81      	ldr	r2, [pc, #516]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003368:	4b7f      	ldr	r3, [pc, #508]	; (8003568 <HAL_SPI_MspInit+0x248>)
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003374:	2338      	movs	r3, #56	; 0x38
 8003376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003384:	2305      	movs	r3, #5
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 031c 	add.w	r3, r7, #28
 800338c:	4619      	mov	r1, r3
 800338e:	4877      	ldr	r0, [pc, #476]	; (800356c <HAL_SPI_MspInit+0x24c>)
 8003390:	f004 fad0 	bl	8007934 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003394:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_SPI_MspInit+0x250>)
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_SPI_MspInit+0x254>)
 8003398:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800339a:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_SPI_MspInit+0x250>)
 800339c:	220a      	movs	r2, #10
 800339e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a6:	4b72      	ldr	r3, [pc, #456]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b2:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b8:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80033ca:	4869      	ldr	r0, [pc, #420]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033cc:	f003 f8da 	bl	8006584 <HAL_DMA_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80033d6:	f7ff ff21 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a64      	ldr	r2, [pc, #400]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033de:	659a      	str	r2, [r3, #88]	; 0x58
 80033e0:	4a63      	ldr	r2, [pc, #396]	; (8003570 <HAL_SPI_MspInit+0x250>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80033e6:	4b64      	ldr	r3, [pc, #400]	; (8003578 <HAL_SPI_MspInit+0x258>)
 80033e8:	4a64      	ldr	r2, [pc, #400]	; (800357c <HAL_SPI_MspInit+0x25c>)
 80033ea:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80033ec:	4b62      	ldr	r3, [pc, #392]	; (8003578 <HAL_SPI_MspInit+0x258>)
 80033ee:	220b      	movs	r2, #11
 80033f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f2:	4b61      	ldr	r3, [pc, #388]	; (8003578 <HAL_SPI_MspInit+0x258>)
 80033f4:	2210      	movs	r2, #16
 80033f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_SPI_MspInit+0x258>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b5e      	ldr	r3, [pc, #376]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003404:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340a:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_SPI_MspInit+0x258>)
 800340c:	2200      	movs	r2, #0
 800340e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003412:	2200      	movs	r2, #0
 8003414:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003416:	4b58      	ldr	r3, [pc, #352]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003418:	2200      	movs	r2, #0
 800341a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800341c:	4856      	ldr	r0, [pc, #344]	; (8003578 <HAL_SPI_MspInit+0x258>)
 800341e:	f003 f8b1 	bl	8006584 <HAL_DMA_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003428:	f7ff fef8 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
 8003432:	4a51      	ldr	r2, [pc, #324]	; (8003578 <HAL_SPI_MspInit+0x258>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2023      	movs	r0, #35	; 0x23
 800343e:	f002 fe50 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003442:	2023      	movs	r0, #35	; 0x23
 8003444:	f002 fe67 	bl	8006116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003448:	e088      	b.n	800355c <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_SPI_MspInit+0x260>)
 8003450:	4293      	cmp	r3, r2
 8003452:	f040 8083 	bne.w	800355c <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a43      	ldr	r2, [pc, #268]	; (8003568 <HAL_SPI_MspInit+0x248>)
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	4a3d      	ldr	r2, [pc, #244]	; (8003568 <HAL_SPI_MspInit+0x248>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_SPI_MspInit+0x248>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003486:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003498:	2306      	movs	r3, #6
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4838      	ldr	r0, [pc, #224]	; (8003584 <HAL_SPI_MspInit+0x264>)
 80034a4:	f004 fa46 	bl	8007934 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80034a8:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034aa:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_SPI_MspInit+0x26c>)
 80034ac:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034b0:	220e      	movs	r2, #14
 80034b2:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b4:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ba:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c0:	4b31      	ldr	r3, [pc, #196]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034cc:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034da:	2200      	movs	r2, #0
 80034dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80034de:	482a      	ldr	r0, [pc, #168]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034e0:	f003 f850 	bl	8006584 <HAL_DMA_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80034ea:	f7ff fe97 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034f2:	659a      	str	r2, [r3, #88]	; 0x58
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <HAL_SPI_MspInit+0x268>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_SPI_MspInit+0x270>)
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_SPI_MspInit+0x274>)
 80034fe:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003502:	220f      	movs	r2, #15
 8003504:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003508:	2210      	movs	r2, #16
 800350a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800350c:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_SPI_MspInit+0x270>)
 800350e:	2200      	movs	r2, #0
 8003510:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_SPI_MspInit+0x270>)
 800351a:	2200      	movs	r2, #0
 800351c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003526:	2200      	movs	r2, #0
 8003528:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_SPI_MspInit+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003530:	4817      	ldr	r0, [pc, #92]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003532:	f003 f827 	bl	8006584 <HAL_DMA_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800353c:	f7ff fe6e 	bl	800321c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_SPI_MspInit+0x270>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	2033      	movs	r0, #51	; 0x33
 8003552:	f002 fdc6 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003556:	2033      	movs	r0, #51	; 0x33
 8003558:	f002 fddd 	bl	8006116 <HAL_NVIC_EnableIRQ>
}
 800355c:	bf00      	nop
 800355e:	3730      	adds	r7, #48	; 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40013000 	.word	0x40013000
 8003568:	40021000 	.word	0x40021000
 800356c:	48000400 	.word	0x48000400
 8003570:	20000948 	.word	0x20000948
 8003574:	40020030 	.word	0x40020030
 8003578:	200009a8 	.word	0x200009a8
 800357c:	40020044 	.word	0x40020044
 8003580:	40003c00 	.word	0x40003c00
 8003584:	48000800 	.word	0x48000800
 8003588:	20000a08 	.word	0x20000a08
 800358c:	40020408 	.word	0x40020408
 8003590:	20000a68 	.word	0x20000a68
 8003594:	4002041c 	.word	0x4002041c

08003598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_MspInit+0x44>)
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_MspInit+0x44>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6613      	str	r3, [r2, #96]	; 0x60
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_MspInit+0x44>)
 80035ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_MspInit+0x44>)
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <HAL_MspInit+0x44>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6593      	str	r3, [r2, #88]	; 0x58
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_MspInit+0x44>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035ce:	f004 fc09 	bl	8007de4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <NMI_Handler+0x4>

080035e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <MemManage_Handler+0x4>

080035f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <BusFault_Handler+0x4>

080035f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <UsageFault_Handler+0x4>

080035fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800362c:	f000 fbde 	bl	8003dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}

08003634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <DMA1_Channel1_IRQHandler+0x10>)
 800363a:	f003 f986 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000070c 	.word	0x2000070c

08003648 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <DMA1_Channel2_IRQHandler+0x10>)
 800364e:	f003 f97c 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000076c 	.word	0x2000076c

0800365c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMA1_Channel3_IRQHandler+0x10>)
 8003662:	f003 f972 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000948 	.word	0x20000948

08003670 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <DMA1_Channel4_IRQHandler+0x10>)
 8003676:	f003 f968 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200009a8 	.word	0x200009a8

08003684 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <ADC1_2_IRQHandler+0x14>)
 800368a:	f001 fa95 	bl	8004bb8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800368e:	4803      	ldr	r0, [pc, #12]	; (800369c <ADC1_2_IRQHandler+0x18>)
 8003690:	f001 fa92 	bl	8004bb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000634 	.word	0x20000634
 800369c:	200006a0 	.word	0x200006a0

080036a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80036a6:	f003 fe25 	bl	80072f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200007e4 	.word	0x200007e4

080036b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <TIM3_IRQHandler+0x10>)
 80036ba:	f006 fbe7 	bl	8009e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000b18 	.word	0x20000b18

080036c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <SPI1_IRQHandler+0x10>)
 80036ce:	f005 fd37 	bl	8009140 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000880 	.word	0x20000880

080036dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <USART1_IRQHandler+0x10>)
 80036e2:	f007 ff53 	bl	800b58c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000b64 	.word	0x20000b64

080036f0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <SPI3_IRQHandler+0x10>)
 80036f6:	f005 fd23 	bl	8009140 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200008e4 	.word	0x200008e4

08003704 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <DMA2_Channel1_IRQHandler+0x10>)
 800370a:	f003 f91e 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000a08 	.word	0x20000a08

08003718 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800371c:	4802      	ldr	r0, [pc, #8]	; (8003728 <DMA2_Channel2_IRQHandler+0x10>)
 800371e:	f003 f914 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000a68 	.word	0x20000a68

0800372c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003730:	4802      	ldr	r0, [pc, #8]	; (800373c <DMA2_Channel3_IRQHandler+0x10>)
 8003732:	f003 f90a 	bl	800694a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000bf4 	.word	0x20000bf4

08003740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <_sbrk+0x5c>)
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <_sbrk+0x60>)
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <_sbrk+0x64>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <_sbrk+0x64>)
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <_sbrk+0x68>)
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <_sbrk+0x64>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d207      	bcs.n	8003780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003770:	f009 f9b6 	bl	800cae0 <__errno>
 8003774:	4603      	mov	r3, r0
 8003776:	220c      	movs	r2, #12
 8003778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	e009      	b.n	8003794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <_sbrk+0x64>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <_sbrk+0x64>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <_sbrk+0x64>)
 8003790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003792:	68fb      	ldr	r3, [r7, #12]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20008000 	.word	0x20008000
 80037a0:	00000400 	.word	0x00000400
 80037a4:	20000ac8 	.word	0x20000ac8
 80037a8:	20000da0 	.word	0x20000da0

080037ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <SystemInit+0x20>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	4a05      	ldr	r2, [pc, #20]	; (80037cc <SystemInit+0x20>)
 80037b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b09c      	sub	sp, #112	; 0x70
 80037d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
 8003800:	615a      	str	r2, [r3, #20]
 8003802:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	2234      	movs	r2, #52	; 0x34
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f009 f960 	bl	800cad0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003810:	4b51      	ldr	r3, [pc, #324]	; (8003958 <MX_TIM1_Init+0x188>)
 8003812:	4a52      	ldr	r2, [pc, #328]	; (800395c <MX_TIM1_Init+0x18c>)
 8003814:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003816:	4b50      	ldr	r3, [pc, #320]	; (8003958 <MX_TIM1_Init+0x188>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800381c:	4b4e      	ldr	r3, [pc, #312]	; (8003958 <MX_TIM1_Init+0x188>)
 800381e:	2220      	movs	r2, #32
 8003820:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8003822:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <MX_TIM1_Init+0x188>)
 8003824:	f240 52db 	movw	r2, #1499	; 0x5db
 8003828:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382a:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <MX_TIM1_Init+0x188>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003830:	4b49      	ldr	r3, [pc, #292]	; (8003958 <MX_TIM1_Init+0x188>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003836:	4b48      	ldr	r3, [pc, #288]	; (8003958 <MX_TIM1_Init+0x188>)
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800383c:	4846      	ldr	r0, [pc, #280]	; (8003958 <MX_TIM1_Init+0x188>)
 800383e:	f006 f845 	bl	80098cc <HAL_TIM_Base_Init>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003848:	f7ff fce8 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800384c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003850:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003852:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003856:	4619      	mov	r1, r3
 8003858:	483f      	ldr	r0, [pc, #252]	; (8003958 <MX_TIM1_Init+0x188>)
 800385a:	f006 fdab 	bl	800a3b4 <HAL_TIM_ConfigClockSource>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003864:	f7ff fcda 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003868:	483b      	ldr	r0, [pc, #236]	; (8003958 <MX_TIM1_Init+0x188>)
 800386a:	f006 f917 	bl	8009a9c <HAL_TIM_PWM_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003874:	f7ff fcd2 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800387c:	2300      	movs	r3, #0
 800387e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003888:	4619      	mov	r1, r3
 800388a:	4833      	ldr	r0, [pc, #204]	; (8003958 <MX_TIM1_Init+0x188>)
 800388c:	f007 fc0e 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003896:	f7ff fcc1 	bl	800321c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800389a:	2360      	movs	r3, #96	; 0x60
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80038a2:	2302      	movs	r3, #2
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80038a6:	2308      	movs	r3, #8
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038ba:	2200      	movs	r2, #0
 80038bc:	4619      	mov	r1, r3
 80038be:	4826      	ldr	r0, [pc, #152]	; (8003958 <MX_TIM1_Init+0x188>)
 80038c0:	f006 fc64 	bl	800a18c <HAL_TIM_PWM_ConfigChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80038ca:	f7ff fca7 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038d2:	2204      	movs	r2, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4820      	ldr	r0, [pc, #128]	; (8003958 <MX_TIM1_Init+0x188>)
 80038d8:	f006 fc58 	bl	800a18c <HAL_TIM_PWM_ConfigChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80038e2:	f7ff fc9b 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038ea:	2208      	movs	r2, #8
 80038ec:	4619      	mov	r1, r3
 80038ee:	481a      	ldr	r0, [pc, #104]	; (8003958 <MX_TIM1_Init+0x188>)
 80038f0:	f006 fc4c 	bl	800a18c <HAL_TIM_PWM_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80038fa:	f7ff fc8f 	bl	800321c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003916:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800391c:	2300      	movs	r3, #0
 800391e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800392e:	2300      	movs	r3, #0
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4807      	ldr	r0, [pc, #28]	; (8003958 <MX_TIM1_Init+0x188>)
 800393c:	f007 fc38 	bl	800b1b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003946:	f7ff fc69 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800394a:	4803      	ldr	r0, [pc, #12]	; (8003958 <MX_TIM1_Init+0x188>)
 800394c:	f000 f890 	bl	8003a70 <HAL_TIM_MspPostInit>

}
 8003950:	bf00      	nop
 8003952:	3770      	adds	r7, #112	; 0x70
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000acc 	.word	0x20000acc
 800395c:	40012c00 	.word	0x40012c00

08003960 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003966:	f107 0310 	add.w	r3, r7, #16
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <MX_TIM3_Init+0x98>)
 8003982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003986:	2203      	movs	r2, #3
 8003988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <MX_TIM3_Init+0x94>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003990:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003992:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <MX_TIM3_Init+0x94>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039a4:	4813      	ldr	r0, [pc, #76]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039a6:	f005 ff91 	bl	80098cc <HAL_TIM_Base_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80039b0:	f7ff fc34 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4619      	mov	r1, r3
 80039c0:	480c      	ldr	r0, [pc, #48]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039c2:	f006 fcf7 	bl	800a3b4 <HAL_TIM_ConfigClockSource>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80039cc:	f7ff fc26 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d0:	2300      	movs	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4805      	ldr	r0, [pc, #20]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039de:	f007 fb65 	bl	800b0ac <HAL_TIMEx_MasterConfigSynchronization>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80039e8:	f7ff fc18 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000b18 	.word	0x20000b18
 80039f8:	40000400 	.word	0x40000400

080039fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_TIM_Base_MspInit+0x68>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a18:	6613      	str	r3, [r2, #96]	; 0x60
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a26:	e018      	b.n	8003a5a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_TIM_Base_MspInit+0x70>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d113      	bne.n	8003a5a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <HAL_TIM_Base_MspInit+0x6c>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	201d      	movs	r0, #29
 8003a50:	f002 fb47 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a54:	201d      	movs	r0, #29
 8003a56:	f002 fb5e 	bl	8006116 <HAL_NVIC_EnableIRQ>
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40000400 	.word	0x40000400

08003a70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <HAL_TIM_MspPostInit+0xc0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d149      	bne.n	8003b26 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a92:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003a98:	f043 0304 	orr.w	r3, r3, #4
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <HAL_TIM_MspPostInit+0xc4>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003ac2:	2307      	movs	r3, #7
 8003ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	4816      	ldr	r0, [pc, #88]	; (8003b38 <HAL_TIM_MspPostInit+0xc8>)
 8003ade:	f003 ff29 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003ae2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af0:	2300      	movs	r3, #0
 8003af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003af4:	2306      	movs	r3, #6
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4619      	mov	r1, r3
 8003afe:	480f      	ldr	r0, [pc, #60]	; (8003b3c <HAL_TIM_MspPostInit+0xcc>)
 8003b00:	f003 ff18 	bl	8007934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003b16:	2304      	movs	r3, #4
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4806      	ldr	r0, [pc, #24]	; (8003b3c <HAL_TIM_MspPostInit+0xcc>)
 8003b22:	f003 ff07 	bl	8007934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b26:	bf00      	nop
 8003b28:	3728      	adds	r7, #40	; 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40021000 	.word	0x40021000
 8003b38:	48000800 	.word	0x48000800
 8003b3c:	48000400 	.word	0x48000400

08003b40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b44:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <MX_USART1_UART_Init+0x94>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b4c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b76:	4b16      	ldr	r3, [pc, #88]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b88:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b8a:	f007 fc1c 	bl	800b3c6 <HAL_UART_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b94:	f7ff fb42 	bl	800321c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b98:	2100      	movs	r1, #0
 8003b9a:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003b9c:	f008 fe93 	bl	800c8c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003ba6:	f7ff fb39 	bl	800321c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003baa:	2100      	movs	r1, #0
 8003bac:	4808      	ldr	r0, [pc, #32]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003bae:	f008 fec8 	bl	800c942 <HAL_UARTEx_SetRxFifoThreshold>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003bb8:	f7ff fb30 	bl	800321c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003bbc:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_USART1_UART_Init+0x90>)
 8003bbe:	f008 fe49 	bl	800c854 <HAL_UARTEx_DisableFifoMode>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003bc8:	f7ff fb28 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000b64 	.word	0x20000b64
 8003bd4:	40013800 	.word	0x40013800

08003bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b09a      	sub	sp, #104	; 0x68
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	2244      	movs	r2, #68	; 0x44
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f008 ff69 	bl	800cad0 <memset>
  if(uartHandle->Instance==USART1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <HAL_UART_MspInit+0x108>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d166      	bne.n	8003cd6 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fe6b 	bl	80088f0 <HAL_RCCEx_PeriphCLKConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c20:	f7ff fafc 	bl	800321c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c24:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	4a2e      	ldr	r2, [pc, #184]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c30:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_UART_MspInit+0x10c>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c54:	2330      	movs	r3, #48	; 0x30
 8003c56:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c60:	2300      	movs	r3, #0
 8003c62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c64:	2307      	movs	r3, #7
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	481e      	ldr	r0, [pc, #120]	; (8003ce8 <HAL_UART_MspInit+0x110>)
 8003c70:	f003 fe60 	bl	8007934 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_UART_MspInit+0x118>)
 8003c78:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c7c:	2219      	movs	r2, #25
 8003c7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c82:	2210      	movs	r2, #16
 8003c84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003caa:	4810      	ldr	r0, [pc, #64]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003cac:	f002 fc6a 	bl	8006584 <HAL_DMA_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003cb6:	f7ff fab1 	bl	800321c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003cbe:	679a      	str	r2, [r3, #120]	; 0x78
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_UART_MspInit+0x114>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2025      	movs	r0, #37	; 0x25
 8003ccc:	f002 fa09 	bl	80060e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cd0:	2025      	movs	r0, #37	; 0x25
 8003cd2:	f002 fa20 	bl	8006116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3768      	adds	r7, #104	; 0x68
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	48000800 	.word	0x48000800
 8003cec:	20000bf4 	.word	0x20000bf4
 8003cf0:	40020430 	.word	0x40020430

08003cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cf4:	480d      	ldr	r0, [pc, #52]	; (8003d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cf6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cfa:	490e      	ldr	r1, [pc, #56]	; (8003d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <LoopForever+0xe>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003d00:	e002      	b.n	8003d08 <LoopCopyDataInit>

08003d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d06:	3304      	adds	r3, #4

08003d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d0c:	d3f9      	bcc.n	8003d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0e:	4a0b      	ldr	r2, [pc, #44]	; (8003d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d10:	4c0b      	ldr	r4, [pc, #44]	; (8003d40 <LoopForever+0x16>)
  movs r3, #0
 8003d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d14:	e001      	b.n	8003d1a <LoopFillZerobss>

08003d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d18:	3204      	adds	r2, #4

08003d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d1c:	d3fb      	bcc.n	8003d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d1e:	f7ff fd45 	bl	80037ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d22:	f008 fee3 	bl	800caec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d26:	f7ff fa05 	bl	8003134 <main>

08003d2a <LoopForever>:

LoopForever:
    b LoopForever
 8003d2a:	e7fe      	b.n	8003d2a <LoopForever>
  ldr   r0, =_estack
 8003d2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d34:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8003d38:	0800d4e8 	.word	0x0800d4e8
  ldr r2, =_sbss
 8003d3c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8003d40:	20000da0 	.word	0x20000da0

08003d44 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d44:	e7fe      	b.n	8003d44 <COMP1_2_3_IRQHandler>

08003d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d50:	2003      	movs	r0, #3
 8003d52:	f002 f9bb 	bl	80060cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d56:	200f      	movs	r0, #15
 8003d58:	f000 f80e 	bl	8003d78 <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	e001      	b.n	8003d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d68:	f7ff fc16 	bl	8003598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]

}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <HAL_InitTick+0x68>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d022      	beq.n	8003dd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_InitTick+0x6c>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_InitTick+0x68>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 f9c6 	bl	8006132 <HAL_SYSTICK_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10f      	bne.n	8003dcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	d809      	bhi.n	8003dc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db2:	2200      	movs	r2, #0
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dba:	f002 f992 	bl	80060e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_InitTick+0x70>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e007      	b.n	8003dd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	e004      	b.n	8003dd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e001      	b.n	8003dd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000148 	.word	0x20000148
 8003de4:	20000140 	.word	0x20000140
 8003de8:	20000144 	.word	0x20000144

08003dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_IncTick+0x1c>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_IncTick+0x20>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <HAL_IncTick+0x1c>)
 8003dfc:	6013      	str	r3, [r2, #0]
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000c54 	.word	0x20000c54
 8003e0c:	20000148 	.word	0x20000148

08003e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return uwTick;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_GetTick+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000c54 	.word	0x20000c54

08003e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7ff ffee 	bl	8003e10 <HAL_GetTick>
 8003e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d004      	beq.n	8003e4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_Delay+0x40>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e4c:	bf00      	nop
 8003e4e:	f7ff ffdf 	bl	8003e10 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d8f7      	bhi.n	8003e4e <HAL_Delay+0x26>
  {
  }
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000148 	.word	0x20000148

08003e6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3360      	adds	r3, #96	; 0x60
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <LL_ADC_SetOffset+0x44>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	03fff000 	.word	0x03fff000

08003f1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3360      	adds	r3, #96	; 0x60
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3360      	adds	r3, #96	; 0x60
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3360      	adds	r3, #96	; 0x60
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3360      	adds	r3, #96	; 0x60
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	615a      	str	r2, [r3, #20]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004036:	b480      	push	{r7}
 8004038:	b087      	sub	sp, #28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3330      	adds	r3, #48	; 0x30
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	4413      	add	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	211f      	movs	r1, #31
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	401a      	ands	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	f003 011f 	and.w	r1, r3, #31
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	431a      	orrs	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3314      	adds	r3, #20
 80040c4:	461a      	mov	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0e5b      	lsrs	r3, r3, #25
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	4413      	add	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0d1b      	lsrs	r3, r3, #20
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2107      	movs	r1, #7
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	401a      	ands	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0d1b      	lsrs	r3, r3, #20
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0f      	ldr	r2, [pc, #60]	; (8004158 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10a      	bne.n	8004136 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004134:	e00a      	b.n	800414c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004142:	43db      	mvns	r3, r3
 8004144:	401a      	ands	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	407f0000 	.word	0x407f0000

0800415c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 031f 	and.w	r3, r3, #31
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6093      	str	r3, [r2, #8]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041cc:	d101      	bne.n	80041d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421c:	d101      	bne.n	8004222 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800426c:	f043 0202 	orr.w	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <LL_ADC_IsEnabled+0x18>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <LL_ADC_IsEnabled+0x1a>
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d101      	bne.n	80042be <LL_ADC_IsDisableOngoing+0x18>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <LL_ADC_IsDisableOngoing+0x1a>
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004308:	f043 0210 	orr.w	r2, r3, #16
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d101      	bne.n	8004334 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b08      	cmp	r3, #8
 800437c:	d101      	bne.n	8004382 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b089      	sub	sp, #36	; 0x24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e177      	b.n	800469a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fe fb1b 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fef1 	bl	80041b8 <LL_ADC_IsDeepPowerDownEnabled>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fed7 	bl	8004194 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff ff0c 	bl	8004208 <LL_ADC_IsInternalRegulatorEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d115      	bne.n	8004422 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fef0 	bl	80041e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004400:	4b9c      	ldr	r3, [pc, #624]	; (8004674 <HAL_ADC_Init+0x2e4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	4a9c      	ldr	r2, [pc, #624]	; (8004678 <HAL_ADC_Init+0x2e8>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004414:	e002      	b.n	800441c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3b01      	subs	r3, #1
 800441a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f9      	bne.n	8004416 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff feee 	bl	8004208 <LL_ADC_IsInternalRegulatorEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	f043 0210 	orr.w	r2, r3, #16
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	f043 0201 	orr.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff62 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8004458:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	f040 8110 	bne.w	8004688 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 810c 	bne.w	8004688 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004478:	f043 0202 	orr.w	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fefb 	bl	8004280 <LL_ADC_IsEnabled>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d111      	bne.n	80044b4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004490:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004494:	f7ff fef4 	bl	8004280 <LL_ADC_IsEnabled>
 8004498:	4604      	mov	r4, r0
 800449a:	4878      	ldr	r0, [pc, #480]	; (800467c <HAL_ADC_Init+0x2ec>)
 800449c:	f7ff fef0 	bl	8004280 <LL_ADC_IsEnabled>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4323      	orrs	r3, r4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4874      	ldr	r0, [pc, #464]	; (8004680 <HAL_ADC_Init+0x2f0>)
 80044b0:	f7ff fcdc 	bl	8003e6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7f5b      	ldrb	r3, [r3, #29]
 80044b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80044c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80044ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d106      	bne.n	80044f0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	045b      	lsls	r3, r3, #17
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	4b5c      	ldr	r3, [pc, #368]	; (8004684 <HAL_ADC_Init+0x2f4>)
 8004514:	4013      	ands	r3, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	69b9      	ldr	r1, [r7, #24]
 800451c:	430b      	orrs	r3, r1
 800451e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff feee 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8004540:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff0f 	bl	800436a <LL_ADC_INJ_IsConversionOngoing>
 800454c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d16d      	bne.n	8004630 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d16a      	bne.n	8004630 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800455e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004566:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004576:	f023 0302 	bic.w	r3, r3, #2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	69b9      	ldr	r1, [r7, #24]
 8004580:	430b      	orrs	r3, r1
 8004582:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800459a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6911      	ldr	r1, [r2, #16]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	430b      	orrs	r3, r1
 80045b6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80045ba:	e013      	b.n	80045e4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d118      	bne.n	8004620 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800460a:	4311      	orrs	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004610:	430a      	orrs	r2, r1
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e007      	b.n	8004630 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10c      	bne.n	8004652 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f023 010f 	bic.w	r1, r3, #15
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	1e5a      	subs	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
 8004650:	e007      	b.n	8004662 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 020f 	bic.w	r2, r2, #15
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	65da      	str	r2, [r3, #92]	; 0x5c
 8004672:	e011      	b.n	8004698 <HAL_ADC_Init+0x308>
 8004674:	20000140 	.word	0x20000140
 8004678:	053e2d63 	.word	0x053e2d63
 800467c:	50000100 	.word	0x50000100
 8004680:	50000300 	.word	0x50000300
 8004684:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	f043 0210 	orr.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004698:	7ffb      	ldrb	r3, [r7, #31]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3724      	adds	r7, #36	; 0x24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd90      	pop	{r4, r7, pc}
 80046a2:	bf00      	nop

080046a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ac:	4859      	ldr	r0, [pc, #356]	; (8004814 <HAL_ADC_Start+0x170>)
 80046ae:	f7ff fd55 	bl	800415c <LL_ADC_GetMultimode>
 80046b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fe2f 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 809f 	bne.w	8004804 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_ADC_Start+0x30>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e09a      	b.n	800480a <HAL_ADC_Start+0x166>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 f945 	bl	800596c <ADC_Enable>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 8086 	bne.w	80047fa <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a44      	ldr	r2, [pc, #272]	; (8004818 <HAL_ADC_Start+0x174>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d002      	beq.n	8004712 <HAL_ADC_Start+0x6e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	e001      	b.n	8004716 <HAL_ADC_Start+0x72>
 8004712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4293      	cmp	r3, r2
 800471c:	d002      	beq.n	8004724 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473c:	d106      	bne.n	800474c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004742:	f023 0206 	bic.w	r2, r3, #6
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
 800474a:	e002      	b.n	8004752 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	221c      	movs	r2, #28
 8004758:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_ADC_Start+0x174>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d002      	beq.n	8004772 <HAL_ADC_Start+0xce>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	e001      	b.n	8004776 <HAL_ADC_Start+0xd2>
 8004772:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	4293      	cmp	r3, r2
 800477c:	d008      	beq.n	8004790 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d002      	beq.n	8004790 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b09      	cmp	r3, #9
 800478e:	d114      	bne.n	80047ba <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fd8a 	bl	80042cc <LL_ADC_REG_StartConversion>
 80047b8:	e026      	b.n	8004808 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a13      	ldr	r2, [pc, #76]	; (8004818 <HAL_ADC_Start+0x174>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d002      	beq.n	80047d6 <HAL_ADC_Start+0x132>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	e001      	b.n	80047da <HAL_ADC_Start+0x136>
 80047d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047da:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80047f8:	e006      	b.n	8004808 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004802:	e001      	b.n	8004808 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004808:	7dfb      	ldrb	r3, [r7, #23]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	50000300 	.word	0x50000300
 8004818:	50000100 	.word	0x50000100

0800481c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_ADC_Stop+0x16>
 800482e:	2302      	movs	r3, #2
 8004830:	e023      	b.n	800487a <HAL_ADC_Stop+0x5e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800483a:	2103      	movs	r1, #3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 ffd9 	bl	80057f4 <ADC_ConversionStop>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d111      	bne.n	8004870 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 f8ef 	bl	8005a30 <ADC_Disable>
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488e:	4867      	ldr	r0, [pc, #412]	; (8004a2c <HAL_ADC_PollForConversion+0x1a8>)
 8004890:	f7ff fc64 	bl	800415c <LL_ADC_GetMultimode>
 8004894:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d102      	bne.n	80048a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800489e:	2308      	movs	r3, #8
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e02a      	b.n	80048fa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d002      	beq.n	80048b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b09      	cmp	r3, #9
 80048b4:	d111      	bne.n	80048da <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0a6      	b.n	8004a22 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048d4:	2304      	movs	r3, #4
 80048d6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80048d8:	e00f      	b.n	80048fa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048da:	4854      	ldr	r0, [pc, #336]	; (8004a2c <HAL_ADC_PollForConversion+0x1a8>)
 80048dc:	f7ff fc4c 	bl	8004178 <LL_ADC_GetMultiDMATransfer>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e095      	b.n	8004a22 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048f6:	2304      	movs	r3, #4
 80048f8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048fa:	f7ff fa89 	bl	8003e10 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004900:	e021      	b.n	8004946 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d01d      	beq.n	8004946 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800490a:	f7ff fa81 	bl	8003e10 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <HAL_ADC_PollForConversion+0x9c>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d112      	bne.n	8004946 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e06d      	b.n	8004a22 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0d6      	beq.n	8004902 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fb53 	bl	8004010 <LL_ADC_REG_IsTriggerSourceSWStart>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01c      	beq.n	80049aa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	7f5b      	ldrb	r3, [r3, #29]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d118      	bne.n	80049aa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b08      	cmp	r3, #8
 8004984:	d111      	bne.n	80049aa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d105      	bne.n	80049aa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <HAL_ADC_PollForConversion+0x1ac>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d002      	beq.n	80049ba <HAL_ADC_PollForConversion+0x136>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	e001      	b.n	80049be <HAL_ADC_PollForConversion+0x13a>
 80049ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d008      	beq.n	80049d8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d002      	beq.n	80049d8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	d104      	bne.n	80049e2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e00d      	b.n	80049fe <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_ADC_PollForConversion+0x1ac>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d002      	beq.n	80049f2 <HAL_ADC_PollForConversion+0x16e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	e001      	b.n	80049f6 <HAL_ADC_PollForConversion+0x172>
 80049f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d104      	bne.n	8004a0e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e008      	b.n	8004a20 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	220c      	movs	r2, #12
 8004a1e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	50000300 	.word	0x50000300
 8004a30:	50000100 	.word	0x50000100

08004a34 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a40:	4851      	ldr	r0, [pc, #324]	; (8004b88 <HAL_ADC_Start_DMA+0x154>)
 8004a42:	f7ff fb8b 	bl	800415c <LL_ADC_GetMultimode>
 8004a46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fc65 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 808f 	bne.w	8004b78 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_Start_DMA+0x34>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e08a      	b.n	8004b7e <HAL_ADC_Start_DMA+0x14a>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d002      	beq.n	8004a82 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	d173      	bne.n	8004b6a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 ff72 	bl	800596c <ADC_Enable>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d166      	bne.n	8004b60 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_ADC_Start_DMA+0x158>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d002      	beq.n	8004ab6 <HAL_ADC_Start_DMA+0x82>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	e001      	b.n	8004aba <HAL_ADC_Start_DMA+0x86>
 8004ab6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d002      	beq.n	8004ac8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	f023 0206 	bic.w	r2, r3, #6
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60
 8004aec:	e002      	b.n	8004af4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <HAL_ADC_Start_DMA+0x15c>)
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	4a24      	ldr	r2, [pc, #144]	; (8004b94 <HAL_ADC_Start_DMA+0x160>)
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_ADC_Start_DMA+0x164>)
 8004b0a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	221c      	movs	r2, #28
 8004b12:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0210 	orr.w	r2, r2, #16
 8004b2a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3340      	adds	r3, #64	; 0x40
 8004b46:	4619      	mov	r1, r3
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f001 fdc2 	bl	80066d4 <HAL_DMA_Start_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fbb7 	bl	80042cc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b5e:	e00d      	b.n	8004b7c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004b68:	e008      	b.n	8004b7c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004b76:	e001      	b.n	8004b7c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	50000300 	.word	0x50000300
 8004b8c:	50000100 	.word	0x50000100
 8004b90:	08005aef 	.word	0x08005aef
 8004b94:	08005bc7 	.word	0x08005bc7
 8004b98:	08005be3 	.word	0x08005be3

08004b9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bd4:	4883      	ldr	r0, [pc, #524]	; (8004de4 <HAL_ADC_IRQHandler+0x22c>)
 8004bd6:	f7ff fac1 	bl	800415c <LL_ADC_GetMultimode>
 8004bda:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d017      	beq.n	8004c16 <HAL_ADC_IRQHandler+0x5e>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c00:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 f8e1 	bl	8005dd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2202      	movs	r2, #2
 8004c14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_ADC_IRQHandler+0x72>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8085 	beq.w	8004d40 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d07f      	beq.n	8004d40 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d105      	bne.n	8004c58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f9d7 	bl	8004010 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d064      	beq.n	8004d32 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a5e      	ldr	r2, [pc, #376]	; (8004de8 <HAL_ADC_IRQHandler+0x230>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d002      	beq.n	8004c78 <HAL_ADC_IRQHandler+0xc0>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	e001      	b.n	8004c7c <HAL_ADC_IRQHandler+0xc4>
 8004c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d008      	beq.n	8004c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d002      	beq.n	8004c96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	d104      	bne.n	8004ca0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	e00d      	b.n	8004cbc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <HAL_ADC_IRQHandler+0x230>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d002      	beq.n	8004cb0 <HAL_ADC_IRQHandler+0xf8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	e001      	b.n	8004cb4 <HAL_ADC_IRQHandler+0xfc>
 8004cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cb4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d135      	bne.n	8004d32 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d12e      	bne.n	8004d32 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fb1f 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11a      	bne.n	8004d1a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 020c 	bic.w	r2, r2, #12
 8004cf2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d112      	bne.n	8004d32 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	f043 0201 	orr.w	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d18:	e00b      	b.n	8004d32 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	f043 0210 	orr.w	r2, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fb3a 	bl	80023ac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	220c      	movs	r2, #12
 8004d3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_ADC_IRQHandler+0x19c>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 809e 	beq.w	8004e9c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8098 	beq.w	8004e9c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff f980 	bl	800408e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff f93b 	bl	8004010 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d9a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a11      	ldr	r2, [pc, #68]	; (8004de8 <HAL_ADC_IRQHandler+0x230>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d002      	beq.n	8004dac <HAL_ADC_IRQHandler+0x1f4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	e001      	b.n	8004db0 <HAL_ADC_IRQHandler+0x1f8>
 8004dac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d008      	beq.n	8004dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d002      	beq.n	8004dca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b07      	cmp	r3, #7
 8004dc8:	d104      	bne.n	8004dd4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	e011      	b.n	8004df8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a03      	ldr	r2, [pc, #12]	; (8004de8 <HAL_ADC_IRQHandler+0x230>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d006      	beq.n	8004dec <HAL_ADC_IRQHandler+0x234>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	e005      	b.n	8004df0 <HAL_ADC_IRQHandler+0x238>
 8004de4:	50000300 	.word	0x50000300
 8004de8:	50000100 	.word	0x50000100
 8004dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004df0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d047      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <HAL_ADC_IRQHandler+0x260>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d03f      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d13a      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d133      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d12e      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fa98 	bl	800436a <LL_ADC_INJ_IsConversionOngoing>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11a      	bne.n	8004e76 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e4e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d112      	bne.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e74:	e00b      	b.n	8004e8e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	f043 0210 	orr.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 ff76 	bl	8005d80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2260      	movs	r2, #96	; 0x60
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d011      	beq.n	8004eca <HAL_ADC_IRQHandler+0x312>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00c      	beq.n	8004eca <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f895 	bl	8004fec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2280      	movs	r2, #128	; 0x80
 8004ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d012      	beq.n	8004efa <HAL_ADC_IRQHandler+0x342>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 ff5c 	bl	8005da8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ef8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x372>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 ff4e 	bl	8005dbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d036      	beq.n	8004fa2 <HAL_ADC_IRQHandler+0x3ea>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d031      	beq.n	8004fa2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004f46:	2301      	movs	r3, #1
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	e014      	b.n	8004f76 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f52:	4825      	ldr	r0, [pc, #148]	; (8004fe8 <HAL_ADC_IRQHandler+0x430>)
 8004f54:	f7ff f910 	bl	8004178 <LL_ADC_GetMultiDMATransfer>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e008      	b.n	8004f76 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f72:	2301      	movs	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10e      	bne.n	8004f9a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	f043 0202 	orr.w	r2, r3, #2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f833 	bl	8005000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2210      	movs	r2, #16
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d018      	beq.n	8004fde <HAL_ADC_IRQHandler+0x426>
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d013      	beq.n	8004fde <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	f043 0208 	orr.w	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fedb 	bl	8005d94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004fde:	bf00      	nop
 8004fe0:	3728      	adds	r7, #40	; 0x28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	50000300 	.word	0x50000300

08004fec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b0b6      	sub	sp, #216	; 0xd8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x22>
 8005032:	2302      	movs	r3, #2
 8005034:	e3c8      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x7b4>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff f96a 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 83ad 	bne.w	80057aa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6859      	ldr	r1, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	f7fe ffea 	bl	8004036 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff f958 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 800506c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff f978 	bl	800436a <LL_ADC_INJ_IsConversionOngoing>
 800507a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800507e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 81d9 	bne.w	800543a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 81d4 	bne.w	800543a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d10f      	bne.n	80050bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff f804 	bl	80040b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe ff98 	bl	8003fea <LL_ADC_SetSamplingTimeCommonConfig>
 80050ba:	e00e      	b.n	80050da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	461a      	mov	r2, r3
 80050ca:	f7fe fff3 	bl	80040b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe ff88 	bl	8003fea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d022      	beq.n	8005142 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6919      	ldr	r1, [r3, #16]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800510c:	f7fe fee2 	bl	8003ed4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6919      	ldr	r1, [r3, #16]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	461a      	mov	r2, r3
 800511e:	f7fe ff2e 	bl	8003f7e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6919      	ldr	r1, [r3, #16]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	7f1b      	ldrb	r3, [r3, #28]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x124>
 8005132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005136:	e000      	b.n	800513a <HAL_ADC_ConfigChannel+0x126>
 8005138:	2300      	movs	r3, #0
 800513a:	461a      	mov	r2, r3
 800513c:	f7fe ff3a 	bl	8003fb4 <LL_ADC_SetOffsetSaturation>
 8005140:	e17b      	b.n	800543a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fee7 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 800514e:	4603      	mov	r3, r0
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_ADC_ConfigChannel+0x15a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fedc 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 8005164:	4603      	mov	r3, r0
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	e01e      	b.n	80051ac <HAL_ADC_ConfigChannel+0x198>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fed1 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 800517a:	4603      	mov	r3, r0
 800517c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800518c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800519c:	2320      	movs	r3, #32
 800519e:	e004      	b.n	80051aa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80051a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051a4:	fab3 f383 	clz	r3, r3
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x1b0>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	0e9b      	lsrs	r3, r3, #26
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	e018      	b.n	80051f6 <HAL_ADC_ConfigChannel+0x1e2>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051d0:	fa93 f3a3 	rbit	r3, r3
 80051d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80051d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80051e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80051e8:	2320      	movs	r3, #32
 80051ea:	e004      	b.n	80051f6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80051ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051f0:	fab3 f383 	clz	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d106      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	2100      	movs	r1, #0
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fea0 	bl	8003f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2101      	movs	r1, #1
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fe84 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 8005214:	4603      	mov	r3, r0
 8005216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x220>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fe79 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 800522a:	4603      	mov	r3, r0
 800522c:	0e9b      	lsrs	r3, r3, #26
 800522e:	f003 021f 	and.w	r2, r3, #31
 8005232:	e01e      	b.n	8005272 <HAL_ADC_ConfigChannel+0x25e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe fe6e 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 8005240:	4603      	mov	r3, r0
 8005242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800524a:	fa93 f3a3 	rbit	r3, r3
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800525a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005262:	2320      	movs	r3, #32
 8005264:	e004      	b.n	8005270 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_ADC_ConfigChannel+0x276>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	0e9b      	lsrs	r3, r3, #26
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	e018      	b.n	80052bc <HAL_ADC_ConfigChannel+0x2a8>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005296:	fa93 f3a3 	rbit	r3, r3
 800529a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800529e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80052a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80052ae:	2320      	movs	r3, #32
 80052b0:	e004      	b.n	80052bc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80052b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052b6:	fab3 f383 	clz	r3, r3
 80052ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052bc:	429a      	cmp	r2, r3
 80052be:	d106      	bne.n	80052ce <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fe3d 	bl	8003f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2102      	movs	r1, #2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fe21 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 80052da:	4603      	mov	r3, r0
 80052dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x2e6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2102      	movs	r1, #2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fe16 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 80052f0:	4603      	mov	r3, r0
 80052f2:	0e9b      	lsrs	r3, r3, #26
 80052f4:	f003 021f 	and.w	r2, r3, #31
 80052f8:	e01e      	b.n	8005338 <HAL_ADC_ConfigChannel+0x324>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe fe0b 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 8005306:	4603      	mov	r3, r0
 8005308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800531c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005328:	2320      	movs	r3, #32
 800532a:	e004      	b.n	8005336 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800532c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005330:	fab3 f383 	clz	r3, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x33c>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	e016      	b.n	800537e <HAL_ADC_ConfigChannel+0x36a>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800535c:	fa93 f3a3 	rbit	r3, r3
 8005360:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005370:	2320      	movs	r3, #32
 8005372:	e004      	b.n	800537e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005378:	fab3 f383 	clz	r3, r3
 800537c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800537e:	429a      	cmp	r2, r3
 8005380:	d106      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fddc 	bl	8003f48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2103      	movs	r1, #3
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fdc0 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 800539c:	4603      	mov	r3, r0
 800539e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x3a8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2103      	movs	r1, #3
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fdb5 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 80053b2:	4603      	mov	r3, r0
 80053b4:	0e9b      	lsrs	r3, r3, #26
 80053b6:	f003 021f 	and.w	r2, r3, #31
 80053ba:	e017      	b.n	80053ec <HAL_ADC_ConfigChannel+0x3d8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2103      	movs	r1, #3
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fdaa 	bl	8003f1c <LL_ADC_GetOffsetChannel>
 80053c8:	4603      	mov	r3, r0
 80053ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80053d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80053d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80053de:	2320      	movs	r3, #32
 80053e0:	e003      	b.n	80053ea <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x3f0>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0e9b      	lsrs	r3, r3, #26
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	e011      	b.n	8005428 <HAL_ADC_ConfigChannel+0x414>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800540c:	fa93 f3a3 	rbit	r3, r3
 8005410:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005414:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800541c:	2320      	movs	r3, #32
 800541e:	e003      	b.n	8005428 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005428:	429a      	cmp	r2, r3
 800542a:	d106      	bne.n	800543a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2200      	movs	r2, #0
 8005432:	2103      	movs	r1, #3
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fd87 	bl	8003f48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe ff1e 	bl	8004280 <LL_ADC_IsEnabled>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8140 	bne.w	80056cc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	461a      	mov	r2, r3
 800545a:	f7fe fe57 	bl	800410c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4a8f      	ldr	r2, [pc, #572]	; (80056a0 <HAL_ADC_ConfigChannel+0x68c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	f040 8131 	bne.w	80056cc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_ADC_ConfigChannel+0x47e>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	0e9b      	lsrs	r3, r3, #26
 8005480:	3301      	adds	r3, #1
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2b09      	cmp	r3, #9
 8005488:	bf94      	ite	ls
 800548a:	2301      	movls	r3, #1
 800548c:	2300      	movhi	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	e019      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x4b2>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549a:	fa93 f3a3 	rbit	r3, r3
 800549e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80054a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80054a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80054aa:	2320      	movs	r3, #32
 80054ac:	e003      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80054ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2b09      	cmp	r3, #9
 80054be:	bf94      	ite	ls
 80054c0:	2301      	movls	r3, #1
 80054c2:	2300      	movhi	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d079      	beq.n	80055be <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x4d2>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	0e9b      	lsrs	r3, r3, #26
 80054dc:	3301      	adds	r3, #1
 80054de:	069b      	lsls	r3, r3, #26
 80054e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054e4:	e015      	b.n	8005512 <HAL_ADC_ConfigChannel+0x4fe>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80054f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80054fe:	2320      	movs	r3, #32
 8005500:	e003      	b.n	800550a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	fab3 f383 	clz	r3, r3
 8005508:	b2db      	uxtb	r3, r3
 800550a:	3301      	adds	r3, #1
 800550c:	069b      	lsls	r3, r3, #26
 800550e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x51e>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	0e9b      	lsrs	r3, r3, #26
 8005524:	3301      	adds	r3, #1
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	e017      	b.n	8005562 <HAL_ADC_ConfigChannel+0x54e>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005542:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800554a:	2320      	movs	r3, #32
 800554c:	e003      	b.n	8005556 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800554e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b2db      	uxtb	r3, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	ea42 0103 	orr.w	r1, r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x574>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	0e9b      	lsrs	r3, r3, #26
 8005578:	3301      	adds	r3, #1
 800557a:	f003 021f 	and.w	r2, r3, #31
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	051b      	lsls	r3, r3, #20
 8005586:	e018      	b.n	80055ba <HAL_ADC_ConfigChannel+0x5a6>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e003      	b.n	80055ac <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f003 021f 	and.w	r2, r3, #31
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055ba:	430b      	orrs	r3, r1
 80055bc:	e081      	b.n	80056c2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_ADC_ConfigChannel+0x5c6>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	3301      	adds	r3, #1
 80055d2:	069b      	lsls	r3, r3, #26
 80055d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055d8:	e015      	b.n	8005606 <HAL_ADC_ConfigChannel+0x5f2>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3301      	adds	r3, #1
 8005600:	069b      	lsls	r3, r3, #26
 8005602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x612>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0e9b      	lsrs	r3, r3, #26
 8005618:	3301      	adds	r3, #1
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	e017      	b.n	8005656 <HAL_ADC_ConfigChannel+0x642>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	fa93 f3a3 	rbit	r3, r3
 8005632:	61fb      	str	r3, [r7, #28]
  return result;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800563e:	2320      	movs	r3, #32
 8005640:	e003      	b.n	800564a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	fab3 f383 	clz	r3, r3
 8005648:	b2db      	uxtb	r3, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2101      	movs	r1, #1
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	ea42 0103 	orr.w	r1, r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x66e>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	0e9b      	lsrs	r3, r3, #26
 800566c:	3301      	adds	r3, #1
 800566e:	f003 021f 	and.w	r2, r3, #31
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	3b1e      	subs	r3, #30
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005680:	e01e      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x6ac>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	613b      	str	r3, [r7, #16]
  return result;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800569a:	2320      	movs	r3, #32
 800569c:	e006      	b.n	80056ac <HAL_ADC_ConfigChannel+0x698>
 800569e:	bf00      	nop
 80056a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	fab3 f383 	clz	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	3301      	adds	r3, #1
 80056ae:	f003 021f 	and.w	r2, r3, #31
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	3b1e      	subs	r3, #30
 80056ba:	051b      	lsls	r3, r3, #20
 80056bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c0:	430b      	orrs	r3, r1
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6892      	ldr	r2, [r2, #8]
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7fe fcf4 	bl	80040b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b3f      	ldr	r3, [pc, #252]	; (80057d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d071      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056d8:	483e      	ldr	r0, [pc, #248]	; (80057d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80056da:	f7fe fbed 	bl	8003eb8 <LL_ADC_GetCommonPathInternalCh>
 80056de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_ADC_ConfigChannel+0x6e2>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <HAL_ADC_ConfigChannel+0x7c8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d127      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d121      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800570a:	d157      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800570c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005714:	4619      	mov	r1, r3
 8005716:	482f      	ldr	r0, [pc, #188]	; (80057d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005718:	f7fe fbbb 	bl	8003e92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800571c:	4b30      	ldr	r3, [pc, #192]	; (80057e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	099b      	lsrs	r3, r3, #6
 8005722:	4a30      	ldr	r2, [pc, #192]	; (80057e4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005736:	e002      	b.n	800573e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f9      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005744:	e03a      	b.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d113      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x764>
 8005750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a22      	ldr	r2, [pc, #136]	; (80057ec <HAL_ADC_ConfigChannel+0x7d8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02a      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	4619      	mov	r1, r3
 8005770:	4818      	ldr	r0, [pc, #96]	; (80057d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005772:	f7fe fb8e 	bl	8003e92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005776:	e021      	b.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d11c      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d116      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_ADC_ConfigChannel+0x7d8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d011      	beq.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800579c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057a0:	4619      	mov	r1, r3
 80057a2:	480c      	ldr	r0, [pc, #48]	; (80057d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80057a4:	f7fe fb75 	bl	8003e92 <LL_ADC_SetCommonPathInternalCh>
 80057a8:	e008      	b.n	80057bc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	f043 0220 	orr.w	r2, r3, #32
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80057c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	37d8      	adds	r7, #216	; 0xd8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	80080000 	.word	0x80080000
 80057d4:	50000300 	.word	0x50000300
 80057d8:	c3210000 	.word	0xc3210000
 80057dc:	90c00010 	.word	0x90c00010
 80057e0:	20000140 	.word	0x20000140
 80057e4:	053e2d63 	.word	0x053e2d63
 80057e8:	c7520000 	.word	0xc7520000
 80057ec:	50000100 	.word	0x50000100
 80057f0:	cb840000 	.word	0xcb840000

080057f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fd86 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 8005810:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fda7 	bl	800436a <LL_ADC_INJ_IsConversionOngoing>
 800581c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8098 	beq.w	800595c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d02a      	beq.n	8005890 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7f5b      	ldrb	r3, [r3, #29]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d126      	bne.n	8005890 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7f1b      	ldrb	r3, [r3, #28]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d122      	bne.n	8005890 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800584a:	2301      	movs	r3, #1
 800584c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800584e:	e014      	b.n	800587a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4a45      	ldr	r2, [pc, #276]	; (8005968 <ADC_ConversionStop+0x174>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d90d      	bls.n	8005874 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f043 0210 	orr.w	r2, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f043 0201 	orr.w	r2, r3, #1
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e074      	b.n	800595e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b40      	cmp	r3, #64	; 0x40
 8005886:	d1e3      	bne.n	8005850 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d014      	beq.n	80058c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd3e 	bl	800431c <LL_ADC_REG_IsConversionOngoing>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fcfb 	bl	80042a6 <LL_ADC_IsDisableOngoing>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d104      	bne.n	80058c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fd1a 	bl	80042f4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d014      	beq.n	80058f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fd4d 	bl	800436a <LL_ADC_INJ_IsConversionOngoing>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00c      	beq.n	80058f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fce3 	bl	80042a6 <LL_ADC_IsDisableOngoing>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fd29 	bl	8004342 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d005      	beq.n	8005902 <ADC_ConversionStop+0x10e>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d105      	bne.n	8005908 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80058fc:	230c      	movs	r3, #12
 80058fe:	617b      	str	r3, [r7, #20]
        break;
 8005900:	e005      	b.n	800590e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005902:	2308      	movs	r3, #8
 8005904:	617b      	str	r3, [r7, #20]
        break;
 8005906:	e002      	b.n	800590e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005908:	2304      	movs	r3, #4
 800590a:	617b      	str	r3, [r7, #20]
        break;
 800590c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800590e:	f7fe fa7f 	bl	8003e10 <HAL_GetTick>
 8005912:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005914:	e01b      	b.n	800594e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005916:	f7fe fa7b 	bl	8003e10 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b05      	cmp	r3, #5
 8005922:	d914      	bls.n	800594e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005936:	f043 0210 	orr.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005942:	f043 0201 	orr.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e007      	b.n	800595e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1dc      	bne.n	8005916 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	a33fffff 	.word	0xa33fffff

0800596c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fc81 	bl	8004280 <LL_ADC_IsEnabled>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d14d      	bne.n	8005a20 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <ADC_Enable+0xc0>)
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005996:	f043 0210 	orr.w	r2, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e039      	b.n	8005a22 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fc3c 	bl	8004230 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059b8:	f7fe fa2a 	bl	8003e10 <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059be:	e028      	b.n	8005a12 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fc5b 	bl	8004280 <LL_ADC_IsEnabled>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fc2b 	bl	8004230 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059da:	f7fe fa19 	bl	8003e10 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d914      	bls.n	8005a12 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d00d      	beq.n	8005a12 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fa:	f043 0210 	orr.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e007      	b.n	8005a22 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d1cf      	bne.n	80059c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	8000003f 	.word	0x8000003f

08005a30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fc32 	bl	80042a6 <LL_ADC_IsDisableOngoing>
 8005a42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fc19 	bl	8004280 <LL_ADC_IsEnabled>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d047      	beq.n	8005ae4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d144      	bne.n	8005ae4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030d 	and.w	r3, r3, #13
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10c      	bne.n	8005a82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe fbf3 	bl	8004258 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2203      	movs	r2, #3
 8005a78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a7a:	f7fe f9c9 	bl	8003e10 <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a80:	e029      	b.n	8005ad6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a86:	f043 0210 	orr.w	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e023      	b.n	8005ae6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a9e:	f7fe f9b7 	bl	8003e10 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d914      	bls.n	8005ad6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00d      	beq.n	8005ad6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e007      	b.n	8005ae6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1dc      	bne.n	8005a9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d14b      	bne.n	8005ba0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d021      	beq.n	8005b66 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fa72 	bl	8004010 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d032      	beq.n	8005b98 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d12b      	bne.n	8005b98 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11f      	bne.n	8005b98 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5c:	f043 0201 	orr.w	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b64:	e018      	b.n	8005b98 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7fc fc07 	bl	80023ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b9e:	e00e      	b.n	8005bbe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fa27 	bl	8005000 <HAL_ADC_ErrorCallback>
}
 8005bb2:	e004      	b.n	8005bbe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7fc fad7 	bl	8002188 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	f043 0204 	orr.w	r2, r3, #4
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff f9f9 	bl	8005000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <LL_ADC_IsEnabled>:
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <LL_ADC_IsEnabled+0x18>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <LL_ADC_IsEnabled+0x1a>
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <LL_ADC_StartCalibration>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_ADC_IsCalibrationOnGoing>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c82:	d101      	bne.n	8005c88 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d101      	bne.n	8005cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_ADCEx_Calibration_Start+0x1c>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e04d      	b.n	8005d74 <HAL_ADCEx_Calibration_Start+0xb8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fea5 	bl	8005a30 <ADC_Disable>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d136      	bne.n	8005d5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cf8:	f023 0302 	bic.w	r3, r3, #2
 8005cfc:	f043 0202 	orr.w	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff ff96 	bl	8005c3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d10:	e014      	b.n	8005d3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3301      	adds	r3, #1
 8005d16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d90d      	bls.n	8005d3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f023 0312 	bic.w	r3, r3, #18
 8005d28:	f043 0210 	orr.w	r2, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e01b      	b.n	8005d74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ff94 	bl	8005c6e <LL_ADC_IsCalibrationOnGoing>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e2      	bne.n	8005d12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	f023 0303 	bic.w	r3, r3, #3
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d5c:	e005      	b.n	8005d6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d62:	f043 0210 	orr.w	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	0004de01 	.word	0x0004de01

08005d80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b0a1      	sub	sp, #132	; 0x84
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e08b      	b.n	8005f1a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e1a:	d102      	bne.n	8005e22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e1c:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	e001      	b.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e06a      	b.n	8005f1a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff ff25 	bl	8005c96 <LL_ADC_REG_IsConversionOngoing>
 8005e4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff ff1f 	bl	8005c96 <LL_ADC_REG_IsConversionOngoing>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d14c      	bne.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d149      	bne.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e64:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005e66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d028      	beq.n	8005ec2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e82:	035b      	lsls	r3, r3, #13
 8005e84:	430b      	orrs	r3, r1
 8005e86:	431a      	orrs	r2, r3
 8005e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e90:	f7ff fec1 	bl	8005c16 <LL_ADC_IsEnabled>
 8005e94:	4604      	mov	r4, r0
 8005e96:	4823      	ldr	r0, [pc, #140]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e98:	f7ff febd 	bl	8005c16 <LL_ADC_IsEnabled>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4323      	orrs	r3, r4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d133      	bne.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005eac:	f023 030f 	bic.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	6892      	ldr	r2, [r2, #8]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ebe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ec0:	e024      	b.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ecc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ece:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005ed2:	f7ff fea0 	bl	8005c16 <LL_ADC_IsEnabled>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4812      	ldr	r0, [pc, #72]	; (8005f24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005eda:	f7ff fe9c 	bl	8005c16 <LL_ADC_IsEnabled>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4323      	orrs	r3, r4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d112      	bne.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005eee:	f023 030f 	bic.w	r3, r3, #15
 8005ef2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ef4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ef6:	e009      	b.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f0a:	e000      	b.n	8005f0e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3784      	adds	r7, #132	; 0x84
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd90      	pop	{r4, r7, pc}
 8005f22:	bf00      	nop
 8005f24:	50000100 	.word	0x50000100
 8005f28:	50000300 	.word	0x50000300

08005f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <__NVIC_SetPriorityGrouping+0x44>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f5e:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <__NVIC_SetPriorityGrouping+0x44>)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	60d3      	str	r3, [r2, #12]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <__NVIC_GetPriorityGrouping+0x18>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	f003 0307 	and.w	r3, r3, #7
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000ed00 	.word	0xe000ed00

08005f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db0b      	blt.n	8005fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	f003 021f 	and.w	r2, r3, #31
 8005fa8:	4907      	ldr	r1, [pc, #28]	; (8005fc8 <__NVIC_EnableIRQ+0x38>)
 8005faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	e000e100 	.word	0xe000e100

08005fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db0a      	blt.n	8005ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	490c      	ldr	r1, [pc, #48]	; (8006018 <__NVIC_SetPriority+0x4c>)
 8005fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fea:	0112      	lsls	r2, r2, #4
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	440b      	add	r3, r1
 8005ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff4:	e00a      	b.n	800600c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4908      	ldr	r1, [pc, #32]	; (800601c <__NVIC_SetPriority+0x50>)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3b04      	subs	r3, #4
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	440b      	add	r3, r1
 800600a:	761a      	strb	r2, [r3, #24]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	e000e100 	.word	0xe000e100
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f1c3 0307 	rsb	r3, r3, #7
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf28      	it	cs
 800603e:	2304      	movcs	r3, #4
 8006040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3304      	adds	r3, #4
 8006046:	2b06      	cmp	r3, #6
 8006048:	d902      	bls.n	8006050 <NVIC_EncodePriority+0x30>
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3b03      	subs	r3, #3
 800604e:	e000      	b.n	8006052 <NVIC_EncodePriority+0x32>
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	401a      	ands	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006068:	f04f 31ff 	mov.w	r1, #4294967295
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	43d9      	mvns	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006078:	4313      	orrs	r3, r2
         );
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3b01      	subs	r3, #1
 8006094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006098:	d301      	bcc.n	800609e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609a:	2301      	movs	r3, #1
 800609c:	e00f      	b.n	80060be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800609e:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <SysTick_Config+0x40>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a6:	210f      	movs	r1, #15
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	f7ff ff8e 	bl	8005fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <SysTick_Config+0x40>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060b6:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <SysTick_Config+0x40>)
 80060b8:	2207      	movs	r2, #7
 80060ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	e000e010 	.word	0xe000e010

080060cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff ff29 	bl	8005f2c <__NVIC_SetPriorityGrouping>
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	4603      	mov	r3, r0
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060f0:	f7ff ff40 	bl	8005f74 <__NVIC_GetPriorityGrouping>
 80060f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff ff90 	bl	8006020 <NVIC_EncodePriority>
 8006100:	4602      	mov	r2, r0
 8006102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff ff5f 	bl	8005fcc <__NVIC_SetPriority>
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff33 	bl	8005f90 <__NVIC_EnableIRQ>
}
 800612a:	bf00      	nop
 800612c:	3708      	adds	r7, #8
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ffa4 	bl	8006088 <SysTick_Config>
 8006140:	4603      	mov	r3, r0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e014      	b.n	8006186 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	791b      	ldrb	r3, [r3, #4]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fc fda9 	bl	8002cc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	795b      	ldrb	r3, [r3, #5]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_DAC_Start+0x16>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e043      	b.n	800622c <HAL_DAC_Start+0x9e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2201      	movs	r2, #1
 80061be:	409a      	lsls	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7fd fe2d 	bl	8003e28 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10f      	bne.n	80061f4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d11d      	bne.n	800621e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	e014      	b.n	800621e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2102      	movs	r1, #2
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	429a      	cmp	r2, r3
 800620c:	d107      	bne.n	800621e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0202 	orr.w	r2, r2, #2
 800621c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	; 0x28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	795b      	ldrb	r3, [r3, #5]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_DAC_ConfigChannel+0x18>
 8006248:	2302      	movs	r3, #2
 800624a:	e192      	b.n	8006572 <HAL_DAC_ConfigChannel+0x33e>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2202      	movs	r2, #2
 8006256:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d174      	bne.n	800634a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006260:	f7fd fdd6 	bl	8003e10 <HAL_GetTick>
 8006264:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d134      	bne.n	80062d6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800626c:	e011      	b.n	8006292 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800626e:	f7fd fdcf 	bl	8003e10 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d90a      	bls.n	8006292 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f043 0208 	orr.w	r2, r3, #8
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2203      	movs	r2, #3
 800628c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e16f      	b.n	8006572 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fd fdc1 	bl	8003e28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40
 80062b0:	e01e      	b.n	80062f0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062b2:	f7fd fdad 	bl	8003e10 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d90a      	bls.n	80062d6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f043 0208 	orr.w	r2, r3, #8
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2203      	movs	r2, #3
 80062d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e14d      	b.n	8006572 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dbe8      	blt.n	80062b2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80062e0:	2001      	movs	r0, #1
 80062e2:	f7fd fda1 	bl	8003e28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	ea02 0103 	and.w	r1, r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	409a      	lsls	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f003 0310 	and.w	r3, r3, #16
 800632a:	21ff      	movs	r1, #255	; 0xff
 800632c:	fa01 f303 	lsl.w	r3, r1, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	ea02 0103 	and.w	r1, r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	409a      	lsls	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d11d      	bne.n	800638e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	221f      	movs	r2, #31
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636a:	4013      	ands	r3, r2
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	4313      	orrs	r3, r2
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2207      	movs	r2, #7
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a6:	4013      	ands	r3, r2
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	e00f      	b.n	80063d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d102      	bne.n	80063c6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063c0:	2301      	movs	r3, #1
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	e008      	b.n	80063d8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063ce:	2301      	movs	r3, #1
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	e001      	b.n	80063d8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43db      	mvns	r3, r3
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	4013      	ands	r3, r2
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d102      	bne.n	800640c <HAL_DAC_ConfigChannel+0x1d8>
 8006406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800640a:	e000      	b.n	800640e <HAL_DAC_ConfigChannel+0x1da>
 800640c:	2300      	movs	r3, #0
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006426:	4013      	ands	r3, r2
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	795b      	ldrb	r3, [r3, #5]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d102      	bne.n	8006438 <HAL_DAC_ConfigChannel+0x204>
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	e000      	b.n	800643a <HAL_DAC_ConfigChannel+0x206>
 8006438:	2300      	movs	r3, #0
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4313      	orrs	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d114      	bne.n	800647a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006450:	f002 f9d2 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 8006454:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4a48      	ldr	r2, [pc, #288]	; (800657c <HAL_DAC_ConfigChannel+0x348>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d904      	bls.n	8006468 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	e00f      	b.n	8006488 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	4a45      	ldr	r2, [pc, #276]	; (8006580 <HAL_DAC_ConfigChannel+0x34c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d90a      	bls.n	8006486 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	e006      	b.n	8006488 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006480:	4313      	orrs	r3, r2
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
 8006484:	e000      	b.n	8006488 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006486:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006496:	4313      	orrs	r3, r2
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	43da      	mvns	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	400a      	ands	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	4013      	ands	r3, r2
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	4313      	orrs	r3, r2
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	22c0      	movs	r2, #192	; 0xc0
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43da      	mvns	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	400a      	ands	r2, r1
 8006518:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	ea02 0103 	and.w	r1, r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	409a      	lsls	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	09896800 	.word	0x09896800
 8006580:	04c4b400 	.word	0x04c4b400

08006584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e08d      	b.n	80066b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	4b47      	ldr	r3, [pc, #284]	; (80066bc <HAL_DMA_Init+0x138>)
 800659e:	429a      	cmp	r2, r3
 80065a0:	d80f      	bhi.n	80065c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <HAL_DMA_Init+0x13c>)
 80065aa:	4413      	add	r3, r2
 80065ac:	4a45      	ldr	r2, [pc, #276]	; (80066c4 <HAL_DMA_Init+0x140>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	009a      	lsls	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a42      	ldr	r2, [pc, #264]	; (80066c8 <HAL_DMA_Init+0x144>)
 80065be:	641a      	str	r2, [r3, #64]	; 0x40
 80065c0:	e00e      	b.n	80065e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b40      	ldr	r3, [pc, #256]	; (80066cc <HAL_DMA_Init+0x148>)
 80065ca:	4413      	add	r3, r2
 80065cc:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <HAL_DMA_Init+0x140>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	009a      	lsls	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <HAL_DMA_Init+0x14c>)
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800661c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa76 	bl	8006b24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006640:	d102      	bne.n	8006648 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800665c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d010      	beq.n	8006688 <HAL_DMA_Init+0x104>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d80c      	bhi.n	8006688 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa96 	bl	8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	e008      	b.n	800669a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40020407 	.word	0x40020407
 80066c0:	bffdfff8 	.word	0xbffdfff8
 80066c4:	cccccccd 	.word	0xcccccccd
 80066c8:	40020000 	.word	0x40020000
 80066cc:	bffdfbf8 	.word	0xbffdfbf8
 80066d0:	40020400 	.word	0x40020400

080066d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_DMA_Start_IT+0x20>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e066      	b.n	80067c2 <HAL_DMA_Start_IT+0xee>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	d155      	bne.n	80067b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f9bb 	bl	8006aa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 020e 	orr.w	r2, r2, #14
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e00f      	b.n	800676c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 020a 	orr.w	r2, r2, #10
 800676a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006788:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e005      	b.n	80067c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
 80067be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d005      	beq.n	80067ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e037      	b.n	800685e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 020e 	bic.w	r2, r2, #14
 80067fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800680c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	f003 021f 	and.w	r2, r3, #31
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2101      	movs	r1, #1
 800682c:	fa01 f202 	lsl.w	r2, r1, r2
 8006830:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800683a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00c      	beq.n	800685e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006852:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800685c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800686e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d00d      	beq.n	80068b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2204      	movs	r2, #4
 8006898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	e047      	b.n	8006940 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 020e 	bic.w	r2, r2, #14
 80068be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	f003 021f 	and.w	r2, r3, #31
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	2101      	movs	r1, #1
 80068ee:	fa01 f202 	lsl.w	r2, r1, r2
 80068f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006914:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800691e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
    }
  }
  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2204      	movs	r2, #4
 800696c:	409a      	lsls	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d026      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x7a>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d021      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0204 	bic.w	r2, r2, #4
 800699c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	f003 021f 	and.w	r2, r3, #31
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	2104      	movs	r1, #4
 80069ac:	fa01 f202 	lsl.w	r2, r1, r2
 80069b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d071      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80069c2:	e06c      	b.n	8006a9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	2202      	movs	r2, #2
 80069ce:	409a      	lsls	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d02e      	beq.n	8006a36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d029      	beq.n	8006a36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 020a 	bic.w	r2, r2, #10
 80069fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0c:	f003 021f 	and.w	r2, r3, #31
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	2102      	movs	r1, #2
 8006a16:	fa01 f202 	lsl.w	r2, r1, r2
 8006a1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d038      	beq.n	8006a9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006a34:	e033      	b.n	8006a9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	f003 031f 	and.w	r3, r3, #31
 8006a3e:	2208      	movs	r2, #8
 8006a40:	409a      	lsls	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02a      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d025      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 020e 	bic.w	r2, r2, #14
 8006a62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	f003 021f 	and.w	r2, r3, #31
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	2101      	movs	r1, #1
 8006a72:	fa01 f202 	lsl.w	r2, r1, r2
 8006a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
}
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006abe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006ad0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f003 021f 	and.w	r2, r3, #31
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2101      	movs	r1, #1
 8006ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d108      	bne.n	8006b08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b06:	e007      	b.n	8006b18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	60da      	str	r2, [r3, #12]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d802      	bhi.n	8006b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e001      	b.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b40:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	3b08      	subs	r3, #8
 8006b4e:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	009a      	lsls	r2, r3, #2
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a0b      	ldr	r2, [pc, #44]	; (8006b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2201      	movs	r2, #1
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b7e:	bf00      	nop
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40020407 	.word	0x40020407
 8006b90:	40020800 	.word	0x40020800
 8006b94:	40020820 	.word	0x40020820
 8006b98:	cccccccd 	.word	0xcccccccd
 8006b9c:	40020880 	.word	0x40020880

08006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006bc2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	2201      	movs	r2, #1
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	1000823f 	.word	0x1000823f
 8006be4:	40020940 	.word	0x40020940

08006be8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e147      	b.n	8006e8a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fc f944 	bl	8002e9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0210 	bic.w	r2, r2, #16
 8006c22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c24:	f7fd f8f4 	bl	8003e10 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c2a:	e012      	b.n	8006c52 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c2c:	f7fd f8f0 	bl	8003e10 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b0a      	cmp	r3, #10
 8006c38:	d90b      	bls.n	8006c52 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2203      	movs	r2, #3
 8006c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e11b      	b.n	8006e8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d0e5      	beq.n	8006c2c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c70:	f7fd f8ce 	bl	8003e10 <HAL_GetTick>
 8006c74:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c76:	e012      	b.n	8006c9e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c78:	f7fd f8ca 	bl	8003e10 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b0a      	cmp	r3, #10
 8006c84:	d90b      	bls.n	8006c9e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8a:	f043 0201 	orr.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e0f5      	b.n	8006e8a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0e5      	beq.n	8006c78 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0202 	orr.w	r2, r2, #2
 8006cba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a74      	ldr	r2, [pc, #464]	; (8006e94 <HAL_FDCAN_Init+0x2ac>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d103      	bne.n	8006cce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006cc6:	4a74      	ldr	r2, [pc, #464]	; (8006e98 <HAL_FDCAN_Init+0x2b0>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7c1b      	ldrb	r3, [r3, #16]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d108      	bne.n	8006ce8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce4:	619a      	str	r2, [r3, #24]
 8006ce6:	e007      	b.n	8006cf8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7c5b      	ldrb	r3, [r3, #17]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d108      	bne.n	8006d12 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d0e:	619a      	str	r2, [r3, #24]
 8006d10:	e007      	b.n	8006d22 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d20:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	7c9b      	ldrb	r3, [r3, #18]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d108      	bne.n	8006d3c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d38:	619a      	str	r2, [r3, #24]
 8006d3a:	e007      	b.n	8006d4c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d4a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699a      	ldr	r2, [r3, #24]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006d70:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0210 	bic.w	r2, r2, #16
 8006d80:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d108      	bne.n	8006d9c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0204 	orr.w	r2, r2, #4
 8006d98:	619a      	str	r2, [r3, #24]
 8006d9a:	e02c      	b.n	8006df6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d028      	beq.n	8006df6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d01c      	beq.n	8006de6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0210 	orr.w	r2, r2, #16
 8006dca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d110      	bne.n	8006df6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0220 	orr.w	r2, r2, #32
 8006de2:	619a      	str	r2, [r3, #24]
 8006de4:	e007      	b.n	8006df6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0220 	orr.w	r2, r2, #32
 8006df4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e06:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e0e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e1e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e20:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2a:	d115      	bne.n	8006e58 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e36:	3b01      	subs	r3, #1
 8006e38:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e3a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	3b01      	subs	r3, #1
 8006e42:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e44:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e54:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e56:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fbe2 	bl	8007638 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	40006400 	.word	0x40006400
 8006e98:	40006500 	.word	0x40006500

08006e9c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d110      	bne.n	8006ed2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e006      	b.n	8006ee0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	f043 0204 	orr.w	r2, r3, #4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d12c      	bne.n	8006f5e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e023      	b.n	8006f6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fbd2 	bl	80076e4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2101      	movs	r1, #1
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	fa01 f202 	lsl.w	r2, r1, r2
 8006f4c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006f50:	2201      	movs	r2, #1
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	409a      	lsls	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e006      	b.n	8006f6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f62:	f043 0208 	orr.w	r2, r3, #8
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b08b      	sub	sp, #44	; 0x2c
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f88:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f8a:	7efb      	ldrb	r3, [r7, #27]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	f040 80bc 	bne.w	800710a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d121      	bne.n	8006fdc <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d107      	bne.n	8006fb8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0af      	b.n	8007118 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	440b      	add	r3, r1
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	e020      	b.n	800701e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e08d      	b.n	8007118 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	440b      	add	r3, r1
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	0c9b      	lsrs	r3, r3, #18
 8007038:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e005      	b.n	800704e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	3304      	adds	r3, #4
 800706a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	b29a      	uxth	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0fda      	lsrs	r2, r3, #31
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	3304      	adds	r3, #4
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80070bc:	2300      	movs	r3, #0
 80070be:	623b      	str	r3, [r7, #32]
 80070c0:	e00a      	b.n	80070d8 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	441a      	add	r2, r3
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	440b      	add	r3, r1
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	3301      	adds	r3, #1
 80070d6:	623b      	str	r3, [r7, #32]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	4a11      	ldr	r2, [pc, #68]	; (8007124 <HAL_FDCAN_GetRxMessage+0x1b0>)
 80070e0:	5cd3      	ldrb	r3, [r2, r3]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d3eb      	bcc.n	80070c2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b40      	cmp	r3, #64	; 0x40
 80070ee:	d105      	bne.n	80070fc <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80070fa:	e004      	b.n	8007106 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e006      	b.n	8007118 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710e:	f043 0208 	orr.w	r2, r3, #8
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	372c      	adds	r7, #44	; 0x2c
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	0800d46c 	.word	0x0800d46c

08007128 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800713a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d003      	beq.n	800714a <HAL_FDCAN_ActivateNotification+0x22>
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	2b02      	cmp	r3, #2
 8007146:	f040 80c8 	bne.w	80072da <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007150:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d03b      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d031      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d027      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01d      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d013      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d004      	beq.n	80071ca <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00c      	beq.n	80071ee <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0201 	orr.w	r2, r2, #1
 80071ec:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13b      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d131      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d127      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d11d      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	d113      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00c      	beq.n	800728a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0202 	orr.w	r2, r2, #2
 8007288:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	e006      	b.n	80072e8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007302:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	4013      	ands	r3, r2
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	4013      	ands	r3, r2
 800732a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007336:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	4013      	ands	r3, r2
 8007342:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800734e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4013      	ands	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007366:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4013      	ands	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00d      	beq.n	800739e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2240      	movs	r2, #64	; 0x40
 8007396:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f92e 	bl	80075fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d014      	beq.n	80073e4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073c2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4013      	ands	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073da:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80073dc:	6939      	ldr	r1, [r7, #16]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f8ec 	bl	80075bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80073f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f8b6 	bl	8007566 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007408:	6a39      	ldr	r1, [r7, #32]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb f964 	bl	80026d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800741e:	69f9      	ldr	r1, [r7, #28]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8ab 	bl	800757c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800744a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8a0 	bl	8007592 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01a      	beq.n	8007496 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d013      	beq.n	8007496 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007476:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4013      	ands	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2280      	movs	r2, #128	; 0x80
 800748c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f888 	bl	80075a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d007      	beq.n	80074c2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f888 	bl	80075d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f87c 	bl	80075e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d011      	beq.n	8007520 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007512:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800752e:	6979      	ldr	r1, [r7, #20]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f876 	bl	8007622 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d009      	beq.n	8007550 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f858 	bl	800760e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800755e:	bf00      	nop
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007640:	4b27      	ldr	r3, [pc, #156]	; (80076e0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007642:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007652:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765a:	041a      	lsls	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007678:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	061a      	lsls	r2, r3, #24
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e005      	b.n	80076c6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3304      	adds	r3, #4
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d3f3      	bcc.n	80076ba <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	4000a400 	.word	0x4000a400

080076e4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b089      	sub	sp, #36	; 0x24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007702:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800770a:	4313      	orrs	r3, r2
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	e00a      	b.n	8007726 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007718:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800771e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007724:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007730:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007736:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800773c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4613      	mov	r3, r2
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	440b      	add	r3, r1
 8007756:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3304      	adds	r3, #4
 8007762:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	3304      	adds	r3, #4
 800776e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e020      	b.n	80077b8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	3303      	adds	r3, #3
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3302      	adds	r3, #2
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	440b      	add	r3, r1
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800778e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3301      	adds	r3, #1
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	440b      	add	r3, r1
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800779c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	440a      	add	r2, r1
 80077a4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077a6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3304      	adds	r3, #4
 80077b0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	3304      	adds	r3, #4
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	0c1b      	lsrs	r3, r3, #16
 80077be:	4a06      	ldr	r2, [pc, #24]	; (80077d8 <FDCAN_CopyMessageToRAM+0xf4>)
 80077c0:	5cd3      	ldrb	r3, [r2, r3]
 80077c2:	461a      	mov	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d3d5      	bcc.n	8007776 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	3724      	adds	r7, #36	; 0x24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	0800d46c 	.word	0x0800d46c

080077dc <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e033      	b.n	8007856 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fb fbc0 	bl	8002f88 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f854 	bl	80078bc <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f822 	bl	800785e <FMAC_Reset>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10c      	bne.n	800783a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	f043 0210 	orr.w	r2, r3, #16
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	22a0      	movs	r2, #160	; 0xa0
 8007830:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	e008      	b.n	800784c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007866:	f7fc fad3 	bl	8003e10 <HAL_GetTick>
 800786a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800787a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800787c:	e00f      	b.n	800789e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800787e:	f7fc fac7 	bl	8003e10 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800788c:	d907      	bls.n	800789e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e00a      	b.n	80078b4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e8      	bne.n	800787e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f807 	bl	80078d8 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f81b 	bl	8007906 <FMAC_ResetOutputStateAndDataPointers>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007942:	e15a      	b.n	8007bfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	2101      	movs	r1, #1
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	fa01 f303 	lsl.w	r3, r1, r3
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 814c 	beq.w	8007bf4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b01      	cmp	r3, #1
 8007966:	d005      	beq.n	8007974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007970:	2b02      	cmp	r3, #2
 8007972:	d130      	bne.n	80079d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	2203      	movs	r2, #3
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	43db      	mvns	r3, r3
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4013      	ands	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079aa:	2201      	movs	r2, #1
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4013      	ands	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	f003 0201 	and.w	r2, r3, #1
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d017      	beq.n	8007a12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	2203      	movs	r2, #3
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4013      	ands	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 0303 	and.w	r3, r3, #3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d123      	bne.n	8007a66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	08da      	lsrs	r2, r3, #3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3208      	adds	r2, #8
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	220f      	movs	r2, #15
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	08da      	lsrs	r2, r3, #3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3208      	adds	r2, #8
 8007a60:	6939      	ldr	r1, [r7, #16]
 8007a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	2203      	movs	r2, #3
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43db      	mvns	r3, r3
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f003 0203 	and.w	r2, r3, #3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80a6 	beq.w	8007bf4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aa8:	4b5b      	ldr	r3, [pc, #364]	; (8007c18 <HAL_GPIO_Init+0x2e4>)
 8007aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aac:	4a5a      	ldr	r2, [pc, #360]	; (8007c18 <HAL_GPIO_Init+0x2e4>)
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8007ab4:	4b58      	ldr	r3, [pc, #352]	; (8007c18 <HAL_GPIO_Init+0x2e4>)
 8007ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ac0:	4a56      	ldr	r2, [pc, #344]	; (8007c1c <HAL_GPIO_Init+0x2e8>)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	089b      	lsrs	r3, r3, #2
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007acc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	220f      	movs	r2, #15
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43db      	mvns	r3, r3
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007aea:	d01f      	beq.n	8007b2c <HAL_GPIO_Init+0x1f8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a4c      	ldr	r2, [pc, #304]	; (8007c20 <HAL_GPIO_Init+0x2ec>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d019      	beq.n	8007b28 <HAL_GPIO_Init+0x1f4>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a4b      	ldr	r2, [pc, #300]	; (8007c24 <HAL_GPIO_Init+0x2f0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_GPIO_Init+0x1f0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a4a      	ldr	r2, [pc, #296]	; (8007c28 <HAL_GPIO_Init+0x2f4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00d      	beq.n	8007b20 <HAL_GPIO_Init+0x1ec>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a49      	ldr	r2, [pc, #292]	; (8007c2c <HAL_GPIO_Init+0x2f8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <HAL_GPIO_Init+0x1e8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a48      	ldr	r2, [pc, #288]	; (8007c30 <HAL_GPIO_Init+0x2fc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d101      	bne.n	8007b18 <HAL_GPIO_Init+0x1e4>
 8007b14:	2305      	movs	r3, #5
 8007b16:	e00a      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b18:	2306      	movs	r3, #6
 8007b1a:	e008      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	e006      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b20:	2303      	movs	r3, #3
 8007b22:	e004      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e002      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_GPIO_Init+0x1fa>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	f002 0203 	and.w	r2, r2, #3
 8007b34:	0092      	lsls	r2, r2, #2
 8007b36:	4093      	lsls	r3, r2
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b3e:	4937      	ldr	r1, [pc, #220]	; (8007c1c <HAL_GPIO_Init+0x2e8>)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	089b      	lsrs	r3, r3, #2
 8007b44:	3302      	adds	r3, #2
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b4c:	4b39      	ldr	r3, [pc, #228]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	43db      	mvns	r3, r3
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b70:	4a30      	ldr	r2, [pc, #192]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007b76:	4b2f      	ldr	r3, [pc, #188]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4013      	ands	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b9a:	4a26      	ldr	r2, [pc, #152]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007ba0:	4b24      	ldr	r3, [pc, #144]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4013      	ands	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007bca:	4b1a      	ldr	r3, [pc, #104]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	43db      	mvns	r3, r3
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007bee:	4a11      	ldr	r2, [pc, #68]	; (8007c34 <HAL_GPIO_Init+0x300>)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f ae9d 	bne.w	8007944 <HAL_GPIO_Init+0x10>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	48000400 	.word	0x48000400
 8007c24:	48000800 	.word	0x48000800
 8007c28:	48000c00 	.word	0x48000c00
 8007c2c:	48001000 	.word	0x48001000
 8007c30:	48001400 	.word	0x48001400
 8007c34:	40010400 	.word	0x40010400

08007c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	807b      	strh	r3, [r7, #2]
 8007c44:	4613      	mov	r3, r2
 8007c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c48:	787b      	ldrb	r3, [r7, #1]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c4e:	887a      	ldrh	r2, [r7, #2]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c54:	e002      	b.n	8007c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	041a      	lsls	r2, r3, #16
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	43d9      	mvns	r1, r3
 8007c86:	887b      	ldrh	r3, [r7, #2]
 8007c88:	400b      	ands	r3, r1
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	619a      	str	r2, [r3, #24]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d141      	bne.n	8007d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007caa:	4b4b      	ldr	r3, [pc, #300]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb6:	d131      	bne.n	8007d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cb8:	4b47      	ldr	r3, [pc, #284]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cbe:	4a46      	ldr	r2, [pc, #280]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cc8:	4b43      	ldr	r3, [pc, #268]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cd0:	4a41      	ldr	r2, [pc, #260]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cd8:	4b40      	ldr	r3, [pc, #256]	; (8007ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2232      	movs	r2, #50	; 0x32
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	4a3f      	ldr	r2, [pc, #252]	; (8007de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	0c9b      	lsrs	r3, r3, #18
 8007cea:	3301      	adds	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cee:	e002      	b.n	8007cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cf6:	4b38      	ldr	r3, [pc, #224]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d02:	d102      	bne.n	8007d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f2      	bne.n	8007cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d0a:	4b33      	ldr	r3, [pc, #204]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d16:	d158      	bne.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e057      	b.n	8007dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d1c:	4b2e      	ldr	r3, [pc, #184]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d22:	4a2d      	ldr	r2, [pc, #180]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d2c:	e04d      	b.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	d141      	bne.n	8007dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d36:	4b28      	ldr	r3, [pc, #160]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d42:	d131      	bne.n	8007da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4a:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d54:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d5c:	4a1e      	ldr	r2, [pc, #120]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d64:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2232      	movs	r2, #50	; 0x32
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	4a1c      	ldr	r2, [pc, #112]	; (8007de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	0c9b      	lsrs	r3, r3, #18
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d7a:	e002      	b.n	8007d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8e:	d102      	bne.n	8007d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f2      	bne.n	8007d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d96:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da2:	d112      	bne.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e011      	b.n	8007dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007da8:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dae:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007db8:	e007      	b.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007dc2:	4a05      	ldr	r2, [pc, #20]	; (8007dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	40007000 	.word	0x40007000
 8007ddc:	20000140 	.word	0x20000140
 8007de0:	431bde83 	.word	0x431bde83

08007de4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	4a04      	ldr	r2, [pc, #16]	; (8007e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007df2:	6093      	str	r3, [r2, #8]
}
 8007df4:	bf00      	nop
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40007000 	.word	0x40007000

08007e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e306      	b.n	8008424 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d075      	beq.n	8007f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e22:	4b97      	ldr	r3, [pc, #604]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 030c 	and.w	r3, r3, #12
 8007e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e2c:	4b94      	ldr	r3, [pc, #592]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b0c      	cmp	r3, #12
 8007e3a:	d102      	bne.n	8007e42 <HAL_RCC_OscConfig+0x3e>
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d002      	beq.n	8007e48 <HAL_RCC_OscConfig+0x44>
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d10b      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e48:	4b8d      	ldr	r3, [pc, #564]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05b      	beq.n	8007f0c <HAL_RCC_OscConfig+0x108>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d157      	bne.n	8007f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e2e1      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d106      	bne.n	8007e78 <HAL_RCC_OscConfig+0x74>
 8007e6a:	4b85      	ldr	r3, [pc, #532]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a84      	ldr	r2, [pc, #528]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	e01d      	b.n	8007eb4 <HAL_RCC_OscConfig+0xb0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e80:	d10c      	bne.n	8007e9c <HAL_RCC_OscConfig+0x98>
 8007e82:	4b7f      	ldr	r3, [pc, #508]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a7e      	ldr	r2, [pc, #504]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b7c      	ldr	r3, [pc, #496]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a7b      	ldr	r2, [pc, #492]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e00b      	b.n	8007eb4 <HAL_RCC_OscConfig+0xb0>
 8007e9c:	4b78      	ldr	r3, [pc, #480]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a77      	ldr	r2, [pc, #476]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4b75      	ldr	r3, [pc, #468]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a74      	ldr	r2, [pc, #464]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d013      	beq.n	8007ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fb ffa8 	bl	8003e10 <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec4:	f7fb ffa4 	bl	8003e10 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b64      	cmp	r3, #100	; 0x64
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e2a6      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ed6:	4b6a      	ldr	r3, [pc, #424]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0xc0>
 8007ee2:	e014      	b.n	8007f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fb ff94 	bl	8003e10 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eec:	f7fb ff90 	bl	8003e10 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	; 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e292      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007efe:	4b60      	ldr	r3, [pc, #384]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0xe8>
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d075      	beq.n	8008006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f1a:	4b59      	ldr	r3, [pc, #356]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 030c 	and.w	r3, r3, #12
 8007f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f24:	4b56      	ldr	r3, [pc, #344]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f003 0303 	and.w	r3, r3, #3
 8007f2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b0c      	cmp	r3, #12
 8007f32:	d102      	bne.n	8007f3a <HAL_RCC_OscConfig+0x136>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d002      	beq.n	8007f40 <HAL_RCC_OscConfig+0x13c>
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d11f      	bne.n	8007f80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f40:	4b4f      	ldr	r3, [pc, #316]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_RCC_OscConfig+0x154>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e265      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f58:	4b49      	ldr	r3, [pc, #292]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	4946      	ldr	r1, [pc, #280]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f6c:	4b45      	ldr	r3, [pc, #276]	; (8008084 <HAL_RCC_OscConfig+0x280>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fb ff01 	bl	8003d78 <HAL_InitTick>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d043      	beq.n	8008004 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e251      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d023      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f88:	4b3d      	ldr	r3, [pc, #244]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3c      	ldr	r2, [pc, #240]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f94:	f7fb ff3c 	bl	8003e10 <HAL_GetTick>
 8007f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f9c:	f7fb ff38 	bl	8003e10 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e23a      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fae:	4b34      	ldr	r3, [pc, #208]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0f0      	beq.n	8007f9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fba:	4b31      	ldr	r3, [pc, #196]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	061b      	lsls	r3, r3, #24
 8007fc8:	492d      	ldr	r1, [pc, #180]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	604b      	str	r3, [r1, #4]
 8007fce:	e01a      	b.n	8008006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fd0:	4b2b      	ldr	r3, [pc, #172]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a2a      	ldr	r2, [pc, #168]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fb ff18 	bl	8003e10 <HAL_GetTick>
 8007fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fe2:	e008      	b.n	8007ff6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fe4:	f7fb ff14 	bl	8003e10 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e216      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ff6:	4b22      	ldr	r3, [pc, #136]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f0      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x1e0>
 8008002:	e000      	b.n	8008006 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d041      	beq.n	8008096 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01c      	beq.n	8008054 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800801a:	4b19      	ldr	r3, [pc, #100]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 800801c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008020:	4a17      	ldr	r2, [pc, #92]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800802a:	f7fb fef1 	bl	8003e10 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008032:	f7fb feed 	bl	8003e10 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e1ef      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8008046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0ef      	beq.n	8008032 <HAL_RCC_OscConfig+0x22e>
 8008052:	e020      	b.n	8008096 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 8008056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800805a:	4a09      	ldr	r2, [pc, #36]	; (8008080 <HAL_RCC_OscConfig+0x27c>)
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008064:	f7fb fed4 	bl	8003e10 <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800806a:	e00d      	b.n	8008088 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800806c:	f7fb fed0 	bl	8003e10 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d906      	bls.n	8008088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e1d2      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
 800807e:	bf00      	nop
 8008080:	40021000 	.word	0x40021000
 8008084:	20000144 	.word	0x20000144
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008088:	4b8c      	ldr	r3, [pc, #560]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800808a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1ea      	bne.n	800806c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80a6 	beq.w	80081f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080a8:	4b84      	ldr	r3, [pc, #528]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80080aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <HAL_RCC_OscConfig+0x2b4>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <HAL_RCC_OscConfig+0x2b6>
 80080b8:	2300      	movs	r3, #0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00d      	beq.n	80080da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080be:	4b7f      	ldr	r3, [pc, #508]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	4a7e      	ldr	r2, [pc, #504]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80080c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6593      	str	r3, [r2, #88]	; 0x58
 80080ca:	4b7c      	ldr	r3, [pc, #496]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080d6:	2301      	movs	r3, #1
 80080d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080da:	4b79      	ldr	r3, [pc, #484]	; (80082c0 <HAL_RCC_OscConfig+0x4bc>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d118      	bne.n	8008118 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080e6:	4b76      	ldr	r3, [pc, #472]	; (80082c0 <HAL_RCC_OscConfig+0x4bc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a75      	ldr	r2, [pc, #468]	; (80082c0 <HAL_RCC_OscConfig+0x4bc>)
 80080ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080f2:	f7fb fe8d 	bl	8003e10 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fa:	f7fb fe89 	bl	8003e10 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e18b      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800810c:	4b6c      	ldr	r3, [pc, #432]	; (80082c0 <HAL_RCC_OscConfig+0x4bc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d108      	bne.n	8008132 <HAL_RCC_OscConfig+0x32e>
 8008120:	4b66      	ldr	r3, [pc, #408]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008126:	4a65      	ldr	r2, [pc, #404]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008130:	e024      	b.n	800817c <HAL_RCC_OscConfig+0x378>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b05      	cmp	r3, #5
 8008138:	d110      	bne.n	800815c <HAL_RCC_OscConfig+0x358>
 800813a:	4b60      	ldr	r3, [pc, #384]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800813c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008140:	4a5e      	ldr	r2, [pc, #376]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008142:	f043 0304 	orr.w	r3, r3, #4
 8008146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800814a:	4b5c      	ldr	r3, [pc, #368]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800814c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008150:	4a5a      	ldr	r2, [pc, #360]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008152:	f043 0301 	orr.w	r3, r3, #1
 8008156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800815a:	e00f      	b.n	800817c <HAL_RCC_OscConfig+0x378>
 800815c:	4b57      	ldr	r3, [pc, #348]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	4a56      	ldr	r2, [pc, #344]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800816c:	4b53      	ldr	r3, [pc, #332]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008172:	4a52      	ldr	r2, [pc, #328]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008174:	f023 0304 	bic.w	r3, r3, #4
 8008178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d016      	beq.n	80081b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008184:	f7fb fe44 	bl	8003e10 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800818a:	e00a      	b.n	80081a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800818c:	f7fb fe40 	bl	8003e10 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	f241 3288 	movw	r2, #5000	; 0x1388
 800819a:	4293      	cmp	r3, r2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e140      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081a2:	4b46      	ldr	r3, [pc, #280]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0ed      	beq.n	800818c <HAL_RCC_OscConfig+0x388>
 80081b0:	e015      	b.n	80081de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b2:	f7fb fe2d 	bl	8003e10 <HAL_GetTick>
 80081b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081b8:	e00a      	b.n	80081d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ba:	f7fb fe29 	bl	8003e10 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e129      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d0:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1ed      	bne.n	80081ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081de:	7ffb      	ldrb	r3, [r7, #31]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d105      	bne.n	80081f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081e4:	4b35      	ldr	r3, [pc, #212]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80081e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e8:	4a34      	ldr	r2, [pc, #208]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 80081ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d03c      	beq.n	8008276 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01c      	beq.n	800823e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008204:	4b2d      	ldr	r3, [pc, #180]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800820a:	4a2c      	ldr	r2, [pc, #176]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008214:	f7fb fdfc 	bl	8003e10 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800821c:	f7fb fdf8 	bl	8003e10 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e0fa      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800822e:	4b23      	ldr	r3, [pc, #140]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0ef      	beq.n	800821c <HAL_RCC_OscConfig+0x418>
 800823c:	e01b      	b.n	8008276 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800823e:	4b1f      	ldr	r3, [pc, #124]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008244:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824e:	f7fb fddf 	bl	8003e10 <HAL_GetTick>
 8008252:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008254:	e008      	b.n	8008268 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008256:	f7fb fddb 	bl	8003e10 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b02      	cmp	r3, #2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e0dd      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008268:	4b14      	ldr	r3, [pc, #80]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800826a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1ef      	bne.n	8008256 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80d1 	beq.w	8008422 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008280:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 030c 	and.w	r3, r3, #12
 8008288:	2b0c      	cmp	r3, #12
 800828a:	f000 808b 	beq.w	80083a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d15e      	bne.n	8008354 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a08      	ldr	r2, [pc, #32]	; (80082bc <HAL_RCC_OscConfig+0x4b8>)
 800829c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a2:	f7fb fdb5 	bl	8003e10 <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082a8:	e00c      	b.n	80082c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082aa:	f7fb fdb1 	bl	8003e10 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d905      	bls.n	80082c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e0b3      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <HAL_RCC_OscConfig+0x628>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1ec      	bne.n	80082aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082d0:	4b56      	ldr	r3, [pc, #344]	; (800842c <HAL_RCC_OscConfig+0x628>)
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	4b56      	ldr	r3, [pc, #344]	; (8008430 <HAL_RCC_OscConfig+0x62c>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6a11      	ldr	r1, [r2, #32]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082e0:	3a01      	subs	r2, #1
 80082e2:	0112      	lsls	r2, r2, #4
 80082e4:	4311      	orrs	r1, r2
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80082ea:	0212      	lsls	r2, r2, #8
 80082ec:	4311      	orrs	r1, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082f2:	0852      	lsrs	r2, r2, #1
 80082f4:	3a01      	subs	r2, #1
 80082f6:	0552      	lsls	r2, r2, #21
 80082f8:	4311      	orrs	r1, r2
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082fe:	0852      	lsrs	r2, r2, #1
 8008300:	3a01      	subs	r2, #1
 8008302:	0652      	lsls	r2, r2, #25
 8008304:	4311      	orrs	r1, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800830a:	06d2      	lsls	r2, r2, #27
 800830c:	430a      	orrs	r2, r1
 800830e:	4947      	ldr	r1, [pc, #284]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008310:	4313      	orrs	r3, r2
 8008312:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008314:	4b45      	ldr	r3, [pc, #276]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a44      	ldr	r2, [pc, #272]	; (800842c <HAL_RCC_OscConfig+0x628>)
 800831a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800831e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008320:	4b42      	ldr	r3, [pc, #264]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a41      	ldr	r2, [pc, #260]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800832a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800832c:	f7fb fd70 	bl	8003e10 <HAL_GetTick>
 8008330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008332:	e008      	b.n	8008346 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008334:	f7fb fd6c 	bl	8003e10 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e06e      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008346:	4b39      	ldr	r3, [pc, #228]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0f0      	beq.n	8008334 <HAL_RCC_OscConfig+0x530>
 8008352:	e066      	b.n	8008422 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008354:	4b35      	ldr	r3, [pc, #212]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a34      	ldr	r2, [pc, #208]	; (800842c <HAL_RCC_OscConfig+0x628>)
 800835a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800835e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008360:	4b32      	ldr	r3, [pc, #200]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	4a31      	ldr	r2, [pc, #196]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800836c:	4b2f      	ldr	r3, [pc, #188]	; (800842c <HAL_RCC_OscConfig+0x628>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a2e      	ldr	r2, [pc, #184]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008372:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fb fd48 	bl	8003e10 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008384:	f7fb fd44 	bl	8003e10 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e046      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008396:	4b25      	ldr	r3, [pc, #148]	; (800842c <HAL_RCC_OscConfig+0x628>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x580>
 80083a2:	e03e      	b.n	8008422 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e039      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80083b0:	4b1e      	ldr	r3, [pc, #120]	; (800842c <HAL_RCC_OscConfig+0x628>)
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f003 0203 	and.w	r2, r3, #3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d12c      	bne.n	800841e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	3b01      	subs	r3, #1
 80083d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d123      	bne.n	800841e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d11b      	bne.n	800841e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d113      	bne.n	800841e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	3b01      	subs	r3, #1
 8008404:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008406:	429a      	cmp	r2, r3
 8008408:	d109      	bne.n	800841e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	085b      	lsrs	r3, r3, #1
 8008416:	3b01      	subs	r3, #1
 8008418:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800841a:	429a      	cmp	r2, r3
 800841c:	d001      	beq.n	8008422 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3720      	adds	r7, #32
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40021000 	.word	0x40021000
 8008430:	019f800c 	.word	0x019f800c

08008434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e11e      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800844c:	4b91      	ldr	r3, [pc, #580]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d910      	bls.n	800847c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800845a:	4b8e      	ldr	r3, [pc, #568]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f023 020f 	bic.w	r2, r3, #15
 8008462:	498c      	ldr	r1, [pc, #560]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	4313      	orrs	r3, r2
 8008468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800846a:	4b8a      	ldr	r3, [pc, #552]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	429a      	cmp	r2, r3
 8008476:	d001      	beq.n	800847c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e106      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d073      	beq.n	8008570 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d129      	bne.n	80084e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008490:	4b81      	ldr	r3, [pc, #516]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e0f4      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084a0:	f000 f9e2 	bl	8008868 <RCC_GetSysClockFreqFromPLLSource>
 80084a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	4a7c      	ldr	r2, [pc, #496]	; (800869c <HAL_RCC_ClockConfig+0x268>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d93f      	bls.n	800852e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084ae:	4b7a      	ldr	r3, [pc, #488]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d033      	beq.n	800852e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d12f      	bne.n	800852e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084ce:	4b72      	ldr	r3, [pc, #456]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d6:	4a70      	ldr	r2, [pc, #448]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084de:	2380      	movs	r3, #128	; 0x80
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e024      	b.n	800852e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d107      	bne.n	80084fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084ec:	4b6a      	ldr	r3, [pc, #424]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0c6      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084fc:	4b66      	ldr	r3, [pc, #408]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e0be      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800850c:	f000 f914 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 8008510:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	4a61      	ldr	r2, [pc, #388]	; (800869c <HAL_RCC_ClockConfig+0x268>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d909      	bls.n	800852e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800851a:	4b5f      	ldr	r3, [pc, #380]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008522:	4a5d      	ldr	r2, [pc, #372]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800852a:	2380      	movs	r3, #128	; 0x80
 800852c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800852e:	4b5a      	ldr	r3, [pc, #360]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f023 0203 	bic.w	r2, r3, #3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4957      	ldr	r1, [pc, #348]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800853c:	4313      	orrs	r3, r2
 800853e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008540:	f7fb fc66 	bl	8003e10 <HAL_GetTick>
 8008544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008546:	e00a      	b.n	800855e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008548:	f7fb fc62 	bl	8003e10 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	f241 3288 	movw	r2, #5000	; 0x1388
 8008556:	4293      	cmp	r3, r2
 8008558:	d901      	bls.n	800855e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e095      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855e:	4b4e      	ldr	r3, [pc, #312]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 020c 	and.w	r2, r3, #12
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	429a      	cmp	r2, r3
 800856e:	d1eb      	bne.n	8008548 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d023      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008588:	4b43      	ldr	r3, [pc, #268]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	4a42      	ldr	r2, [pc, #264]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800858e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008592:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d007      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085a0:	4b3d      	ldr	r3, [pc, #244]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085a8:	4a3b      	ldr	r2, [pc, #236]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085b0:	4b39      	ldr	r3, [pc, #228]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	4936      	ldr	r1, [pc, #216]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b80      	cmp	r3, #128	; 0x80
 80085c8:	d105      	bne.n	80085d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085ca:	4b33      	ldr	r3, [pc, #204]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	4a32      	ldr	r2, [pc, #200]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 80085d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d21d      	bcs.n	8008620 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085e4:	4b2b      	ldr	r3, [pc, #172]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f023 020f 	bic.w	r2, r3, #15
 80085ec:	4929      	ldr	r1, [pc, #164]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085f4:	f7fb fc0c 	bl	8003e10 <HAL_GetTick>
 80085f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fa:	e00a      	b.n	8008612 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085fc:	f7fb fc08 	bl	8003e10 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	f241 3288 	movw	r2, #5000	; 0x1388
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e03b      	b.n	800868a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008612:	4b20      	ldr	r3, [pc, #128]	; (8008694 <HAL_RCC_ClockConfig+0x260>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d1ed      	bne.n	80085fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d008      	beq.n	800863e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4917      	ldr	r1, [pc, #92]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800863a:	4313      	orrs	r3, r2
 800863c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	490f      	ldr	r1, [pc, #60]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 800865a:	4313      	orrs	r3, r2
 800865c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800865e:	f000 f86b 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 8008662:	4602      	mov	r2, r0
 8008664:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <HAL_RCC_ClockConfig+0x264>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	091b      	lsrs	r3, r3, #4
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	490c      	ldr	r1, [pc, #48]	; (80086a0 <HAL_RCC_ClockConfig+0x26c>)
 8008670:	5ccb      	ldrb	r3, [r1, r3]
 8008672:	f003 031f 	and.w	r3, r3, #31
 8008676:	fa22 f303 	lsr.w	r3, r2, r3
 800867a:	4a0a      	ldr	r2, [pc, #40]	; (80086a4 <HAL_RCC_ClockConfig+0x270>)
 800867c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800867e:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <HAL_RCC_ClockConfig+0x274>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f7fb fb78 	bl	8003d78 <HAL_InitTick>
 8008688:	4603      	mov	r3, r0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40022000 	.word	0x40022000
 8008698:	40021000 	.word	0x40021000
 800869c:	04c4b400 	.word	0x04c4b400
 80086a0:	0800d454 	.word	0x0800d454
 80086a4:	20000140 	.word	0x20000140
 80086a8:	20000144 	.word	0x20000144

080086ac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	; 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80086bc:	2303      	movs	r3, #3
 80086be:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80086d8:	029b      	lsls	r3, r3, #10
 80086da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	f003 030f 	and.w	r3, r3, #15
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80086e6:	4b13      	ldr	r3, [pc, #76]	; (8008734 <HAL_RCC_MCOConfig+0x88>)
 80086e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086ea:	2101      	movs	r1, #1
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	fa01 f303 	lsl.w	r3, r1, r3
 80086f2:	4910      	ldr	r1, [pc, #64]	; (8008734 <HAL_RCC_MCOConfig+0x88>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	0d1b      	lsrs	r3, r3, #20
 8008702:	b2db      	uxtb	r3, r3
 8008704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4619      	mov	r1, r3
 800870c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870e:	f7ff f911 	bl	8007934 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <HAL_RCC_MCOConfig+0x88>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	430b      	orrs	r3, r1
 8008726:	4903      	ldr	r1, [pc, #12]	; (8008734 <HAL_RCC_MCOConfig+0x88>)
 8008728:	4313      	orrs	r3, r2
 800872a:	608b      	str	r3, [r1, #8]
  }
}
 800872c:	bf00      	nop
 800872e:	3730      	adds	r7, #48	; 0x30
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40021000 	.word	0x40021000

08008738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800873e:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	2b04      	cmp	r3, #4
 8008748:	d102      	bne.n	8008750 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	e047      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 030c 	and.w	r3, r3, #12
 8008758:	2b08      	cmp	r3, #8
 800875a:	d102      	bne.n	8008762 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800875c:	4b25      	ldr	r3, [pc, #148]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	e03e      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008762:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 030c 	and.w	r3, r3, #12
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d136      	bne.n	80087dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800876e:	4b20      	ldr	r3, [pc, #128]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	3301      	adds	r3, #1
 8008784:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d10c      	bne.n	80087a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800878c:	4a19      	ldr	r2, [pc, #100]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	fbb2 f3f3 	udiv	r3, r2, r3
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008796:	68d2      	ldr	r2, [r2, #12]
 8008798:	0a12      	lsrs	r2, r2, #8
 800879a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	617b      	str	r3, [r7, #20]
      break;
 80087a4:	e00c      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087a6:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	4a10      	ldr	r2, [pc, #64]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087b0:	68d2      	ldr	r2, [r2, #12]
 80087b2:	0a12      	lsrs	r2, r2, #8
 80087b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]
      break;
 80087be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087c0:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	0e5b      	lsrs	r3, r3, #25
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	3301      	adds	r3, #1
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	613b      	str	r3, [r7, #16]
 80087da:	e001      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087e0:	693b      	ldr	r3, [r7, #16]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40021000 	.word	0x40021000
 80087f4:	00f42400 	.word	0x00f42400

080087f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087fc:	4b03      	ldr	r3, [pc, #12]	; (800880c <HAL_RCC_GetHCLKFreq+0x14>)
 80087fe:	681b      	ldr	r3, [r3, #0]
}
 8008800:	4618      	mov	r0, r3
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20000140 	.word	0x20000140

08008810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008814:	f7ff fff0 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 8008818:	4602      	mov	r2, r0
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	4904      	ldr	r1, [pc, #16]	; (8008838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008826:	5ccb      	ldrb	r3, [r1, r3]
 8008828:	f003 031f 	and.w	r3, r3, #31
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008830:	4618      	mov	r0, r3
 8008832:	bd80      	pop	{r7, pc}
 8008834:	40021000 	.word	0x40021000
 8008838:	0800d464 	.word	0x0800d464

0800883c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008840:	f7ff ffda 	bl	80087f8 <HAL_RCC_GetHCLKFreq>
 8008844:	4602      	mov	r2, r0
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	0adb      	lsrs	r3, r3, #11
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800885c:	4618      	mov	r0, r3
 800885e:	bd80      	pop	{r7, pc}
 8008860:	40021000 	.word	0x40021000
 8008864:	0800d464 	.word	0x0800d464

08008868 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800886e:	4b1e      	ldr	r3, [pc, #120]	; (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008878:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b03      	cmp	r3, #3
 800888a:	d10c      	bne.n	80088a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800888c:	4a17      	ldr	r2, [pc, #92]	; (80088ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	4a14      	ldr	r2, [pc, #80]	; (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008896:	68d2      	ldr	r2, [r2, #12]
 8008898:	0a12      	lsrs	r2, r2, #8
 800889a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800889e:	fb02 f303 	mul.w	r3, r2, r3
 80088a2:	617b      	str	r3, [r7, #20]
    break;
 80088a4:	e00c      	b.n	80088c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088a6:	4a11      	ldr	r2, [pc, #68]	; (80088ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ae:	4a0e      	ldr	r2, [pc, #56]	; (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088b0:	68d2      	ldr	r2, [r2, #12]
 80088b2:	0a12      	lsrs	r2, r2, #8
 80088b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088b8:	fb02 f303 	mul.w	r3, r2, r3
 80088bc:	617b      	str	r3, [r7, #20]
    break;
 80088be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	0e5b      	lsrs	r3, r3, #25
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	3301      	adds	r3, #1
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80088da:	687b      	ldr	r3, [r7, #4]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	371c      	adds	r7, #28
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40021000 	.word	0x40021000
 80088ec:	00f42400 	.word	0x00f42400

080088f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088f8:	2300      	movs	r3, #0
 80088fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088fc:	2300      	movs	r3, #0
 80088fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 8098 	beq.w	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800890e:	2300      	movs	r3, #0
 8008910:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008912:	4b43      	ldr	r3, [pc, #268]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10d      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800891e:	4b40      	ldr	r3, [pc, #256]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008922:	4a3f      	ldr	r2, [pc, #252]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008928:	6593      	str	r3, [r2, #88]	; 0x58
 800892a:	4b3d      	ldr	r3, [pc, #244]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800892c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008936:	2301      	movs	r3, #1
 8008938:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800893a:	4b3a      	ldr	r3, [pc, #232]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a39      	ldr	r2, [pc, #228]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008946:	f7fb fa63 	bl	8003e10 <HAL_GetTick>
 800894a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894c:	e009      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800894e:	f7fb fa5f 	bl	8003e10 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	d902      	bls.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	74fb      	strb	r3, [r7, #19]
        break;
 8008960:	e005      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008962:	4b30      	ldr	r3, [pc, #192]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0ef      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800896e:	7cfb      	ldrb	r3, [r7, #19]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d159      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008974:	4b2a      	ldr	r3, [pc, #168]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d01e      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	429a      	cmp	r2, r3
 800898e:	d019      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008990:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800899c:	4b20      	ldr	r3, [pc, #128]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800899e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a2:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089ac:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	4a1b      	ldr	r2, [pc, #108]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089bc:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d016      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fb fa1f 	bl	8003e10 <HAL_GetTick>
 80089d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089d4:	e00b      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d6:	f7fb fa1b 	bl	8003e10 <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d902      	bls.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	74fb      	strb	r3, [r7, #19]
            break;
 80089ec:	e006      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0ec      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a10:	4903      	ldr	r1, [pc, #12]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a18:	e008      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a1a:	7cfb      	ldrb	r3, [r7, #19]
 8008a1c:	74bb      	strb	r3, [r7, #18]
 8008a1e:	e005      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a20:	40021000 	.word	0x40021000
 8008a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a28:	7cfb      	ldrb	r3, [r7, #19]
 8008a2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a2c:	7c7b      	ldrb	r3, [r7, #17]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d105      	bne.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a32:	4ba6      	ldr	r3, [pc, #664]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	4aa5      	ldr	r2, [pc, #660]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a4a:	4ba0      	ldr	r3, [pc, #640]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	f023 0203 	bic.w	r2, r3, #3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	499c      	ldr	r1, [pc, #624]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a6c:	4b97      	ldr	r3, [pc, #604]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a72:	f023 020c 	bic.w	r2, r3, #12
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4994      	ldr	r1, [pc, #592]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a8e:	4b8f      	ldr	r3, [pc, #572]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	498b      	ldr	r1, [pc, #556]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ab0:	4b86      	ldr	r3, [pc, #536]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	4983      	ldr	r1, [pc, #524]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ad2:	4b7e      	ldr	r3, [pc, #504]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	497a      	ldr	r1, [pc, #488]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008af4:	4b75      	ldr	r3, [pc, #468]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	4972      	ldr	r1, [pc, #456]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b16:	4b6d      	ldr	r3, [pc, #436]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	4969      	ldr	r1, [pc, #420]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b38:	4b64      	ldr	r3, [pc, #400]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	4961      	ldr	r1, [pc, #388]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b5a:	4b5c      	ldr	r3, [pc, #368]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	4958      	ldr	r1, [pc, #352]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d015      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b7c:	4b53      	ldr	r3, [pc, #332]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	4950      	ldr	r1, [pc, #320]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9a:	d105      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b9c:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	4a4a      	ldr	r2, [pc, #296]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ba6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d015      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008bb4:	4b45      	ldr	r3, [pc, #276]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	4942      	ldr	r1, [pc, #264]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd2:	d105      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bd4:	4b3d      	ldr	r3, [pc, #244]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	4a3c      	ldr	r2, [pc, #240]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d015      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bec:	4b37      	ldr	r3, [pc, #220]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	4934      	ldr	r1, [pc, #208]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c0a:	d105      	bne.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	4a2e      	ldr	r2, [pc, #184]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d015      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c24:	4b29      	ldr	r3, [pc, #164]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c32:	4926      	ldr	r1, [pc, #152]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c42:	d105      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c44:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	4a20      	ldr	r2, [pc, #128]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d015      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	4918      	ldr	r1, [pc, #96]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c7a:	d105      	bne.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c7c:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d015      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	490a      	ldr	r1, [pc, #40]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb2:	d105      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	4a04      	ldr	r2, [pc, #16]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008cc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40021000 	.word	0x40021000

08008cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e09d      	b.n	8008e1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d108      	bne.n	8008cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cf2:	d009      	beq.n	8008d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	61da      	str	r2, [r3, #28]
 8008cfa:	e005      	b.n	8008d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fa fafc 	bl	8003320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d48:	d902      	bls.n	8008d50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e002      	b.n	8008d56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d5e:	d007      	beq.n	8008d70 <HAL_SPI_Init+0xa0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d68:	d002      	beq.n	8008d70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008da8:	431a      	orrs	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db2:	ea42 0103 	orr.w	r1, r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	0c1b      	lsrs	r3, r3, #16
 8008dcc:	f003 0204 	and.w	r2, r3, #4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008dec:	ea42 0103 	orr.w	r1, r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69da      	ldr	r2, [r3, #28]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e16c      	b.n	8009122 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008e5e:	7dbb      	ldrb	r3, [r7, #22]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d00d      	beq.n	8008e80 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e6a:	d106      	bne.n	8008e7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d102      	bne.n	8008e7a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008e74:	7dbb      	ldrb	r3, [r7, #22]
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d002      	beq.n	8008e80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e7e:	e14b      	b.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e96:	e13f      	b.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d003      	beq.n	8008eac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2205      	movs	r2, #5
 8008ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	887a      	ldrh	r2, [r7, #2]
 8008ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	887a      	ldrh	r2, [r7, #2]
 8008ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	887a      	ldrh	r2, [r7, #2]
 8008ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	887a      	ldrh	r2, [r7, #2]
 8008ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008ef4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008efe:	d908      	bls.n	8008f12 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f0e:	605a      	str	r2, [r3, #4]
 8008f10:	e06f      	b.n	8008ff2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f20:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2c:	d126      	bne.n	8008f7c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10f      	bne.n	8008f5a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f48:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	085b      	lsrs	r3, r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f58:	e010      	b.n	8008f7c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f68:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3301      	adds	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f86:	d134      	bne.n	8008ff2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f96:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d111      	bne.n	8008fcc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fb6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	085b      	lsrs	r3, r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008fca:	e012      	b.n	8008ff2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fda:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	085b      	lsrs	r3, r3, #1
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3301      	adds	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d108      	bne.n	8009010 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	4a4a      	ldr	r2, [pc, #296]	; (800912c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009004:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	4a49      	ldr	r2, [pc, #292]	; (8009130 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800900c:	62da      	str	r2, [r3, #44]	; 0x2c
 800900e:	e007      	b.n	8009020 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009014:	4a47      	ldr	r2, [pc, #284]	; (8009134 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8009016:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901c:	4a46      	ldr	r2, [pc, #280]	; (8009138 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800901e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009024:	4a45      	ldr	r2, [pc, #276]	; (800913c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8009026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	2200      	movs	r2, #0
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	4619      	mov	r1, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009048:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800904a:	f7fd fb43 	bl	80066d4 <HAL_DMA_Start_IT>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009058:	f043 0210 	orr.w	r2, r3, #16
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800906c:	e054      	b.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0201 	orr.w	r2, r2, #1
 800907c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009082:	2200      	movs	r2, #0
 8009084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908a:	2200      	movs	r2, #0
 800908c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009092:	2200      	movs	r2, #0
 8009094:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	2200      	movs	r2, #0
 800909c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a6:	4619      	mov	r1, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090b6:	f7fd fb0d 	bl	80066d4 <HAL_DMA_Start_IT>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090c4:	f043 0210 	orr.w	r2, r3, #16
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80090d8:	e01e      	b.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b40      	cmp	r3, #64	; 0x40
 80090e6:	d007      	beq.n	80090f8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0220 	orr.w	r2, r2, #32
 8009106:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0202 	orr.w	r2, r2, #2
 8009116:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	080094b1 	.word	0x080094b1
 8009130:	08009379 	.word	0x08009379
 8009134:	080094cd 	.word	0x080094cd
 8009138:	08009421 	.word	0x08009421
 800913c:	080094e9 	.word	0x080094e9

08009140 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10e      	bne.n	8009180 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d004      	beq.n	8009180 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
    return;
 800917e:	e0ce      	b.n	800931e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <HAL_SPI_IRQHandler+0x5e>
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009190:	2b00      	cmp	r3, #0
 8009192:	d004      	beq.n	800919e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
    return;
 800919c:	e0bf      	b.n	800931e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <HAL_SPI_IRQHandler+0x7e>
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d105      	bne.n	80091be <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 80b0 	beq.w	800931e <HAL_SPI_IRQHandler+0x1de>
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80aa 	beq.w	800931e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d023      	beq.n	800921c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d011      	beq.n	8009204 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e4:	f043 0204 	orr.w	r2, r3, #4
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	e00b      	b.n	800921c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	613b      	str	r3, [r7, #16]
 8009218:	693b      	ldr	r3, [r7, #16]
        return;
 800921a:	e080      	b.n	800931e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	2b00      	cmp	r3, #0
 8009224:	d014      	beq.n	8009250 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800922a:	f043 0201 	orr.w	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	f043 0208 	orr.w	r2, r3, #8
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009278:	2b00      	cmp	r3, #0
 800927a:	d04f      	beq.n	800931c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800928a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d104      	bne.n	80092a8 <HAL_SPI_IRQHandler+0x168>
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d034      	beq.n	8009312 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0203 	bic.w	r2, r2, #3
 80092b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d011      	beq.n	80092e4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	4a17      	ldr	r2, [pc, #92]	; (8009324 <HAL_SPI_IRQHandler+0x1e4>)
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fd fad5 	bl	800687c <HAL_DMA_Abort_IT>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d016      	beq.n	800931a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f0:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <HAL_SPI_IRQHandler+0x1e4>)
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fd fabf 	bl	800687c <HAL_DMA_Abort_IT>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009308:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009310:	e003      	b.n	800931a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f826 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009318:	e000      	b.n	800931c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800931a:	bf00      	nop
    return;
 800931c:	bf00      	nop
  }
}
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08009529 	.word	0x08009529

08009328 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009384:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009386:	f7fa fd43 	bl	8003e10 <HAL_GetTick>
 800938a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b20      	cmp	r3, #32
 8009398:	d03c      	beq.n	8009414 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 0220 	bic.w	r2, r2, #32
 80093a8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <SPI_DMAReceiveCplt+0x56>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ba:	d108      	bne.n	80093ce <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0203 	bic.w	r2, r2, #3
 80093ca:	605a      	str	r2, [r3, #4]
 80093cc:	e007      	b.n	80093de <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f022 0201 	bic.w	r2, r2, #1
 80093dc:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2164      	movs	r1, #100	; 0x64
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f9d4 	bl	8009790 <SPI_EndRxTransaction>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2220      	movs	r2, #32
 80093f2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ffa9 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009412:	e002      	b.n	800941a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ff87 	bl	8009328 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800942e:	f7fa fcef 	bl	8003e10 <HAL_GetTick>
 8009432:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b20      	cmp	r3, #32
 8009440:	d030      	beq.n	80094a4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0220 	bic.w	r2, r2, #32
 8009450:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	2164      	movs	r1, #100	; 0x64
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f9f2 	bl	8009840 <SPI_EndRxTxTransaction>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009466:	f043 0220 	orr.w	r2, r3, #32
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0203 	bic.w	r2, r2, #3
 800947c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff ff61 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80094a2:	e002      	b.n	80094aa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7f8 f8a1 	bl	80015ec <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7ff ff3c 	bl	800933c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff ff38 	bl	8009350 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0203 	bic.w	r2, r2, #3
 8009504:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800950a:	f043 0210 	orr.w	r2, r3, #16
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff ff22 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f7ff ff0d 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	4613      	mov	r3, r2
 8009562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009564:	f7fa fc54 	bl	8003e10 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4413      	add	r3, r2
 8009572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009574:	f7fa fc4c 	bl	8003e10 <HAL_GetTick>
 8009578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800957a:	4b39      	ldr	r3, [pc, #228]	; (8009660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	015b      	lsls	r3, r3, #5
 8009580:	0d1b      	lsrs	r3, r3, #20
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	fb02 f303 	mul.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800958a:	e054      	b.n	8009636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d050      	beq.n	8009636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009594:	f7fa fc3c 	bl	8003e10 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d902      	bls.n	80095aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d13d      	bne.n	8009626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095c2:	d111      	bne.n	80095e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095cc:	d004      	beq.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d6:	d107      	bne.n	80095e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f0:	d10f      	bne.n	8009612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e017      	b.n	8009656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	3b01      	subs	r3, #1
 8009634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	4013      	ands	r3, r2
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	bf0c      	ite	eq
 8009646:	2301      	moveq	r3, #1
 8009648:	2300      	movne	r3, #0
 800964a:	b2db      	uxtb	r3, r3
 800964c:	461a      	mov	r2, r3
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	429a      	cmp	r2, r3
 8009652:	d19b      	bne.n	800958c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3720      	adds	r7, #32
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000140 	.word	0x20000140

08009664 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009676:	f7fa fbcb 	bl	8003e10 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	4413      	add	r3, r2
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009686:	f7fa fbc3 	bl	8003e10 <HAL_GetTick>
 800968a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009694:	4b3d      	ldr	r3, [pc, #244]	; (800978c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	00da      	lsls	r2, r3, #3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	0d1b      	lsrs	r3, r3, #20
 80096a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
 80096aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80096ac:	e060      	b.n	8009770 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096b4:	d107      	bne.n	80096c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096cc:	d050      	beq.n	8009770 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ce:	f7fa fb9f 	bl	8003e10 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096da:	429a      	cmp	r2, r3
 80096dc:	d902      	bls.n	80096e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d13d      	bne.n	8009760 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096fc:	d111      	bne.n	8009722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009706:	d004      	beq.n	8009712 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009710:	d107      	bne.n	8009722 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800972a:	d10f      	bne.n	800974c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800974a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e010      	b.n	8009782 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	3b01      	subs	r3, #1
 800976e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4013      	ands	r3, r2
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d196      	bne.n	80096ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3728      	adds	r7, #40	; 0x28
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000140 	.word	0x20000140

08009790 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af02      	add	r7, sp, #8
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097a4:	d111      	bne.n	80097ca <SPI_EndRxTransaction+0x3a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ae:	d004      	beq.n	80097ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b8:	d107      	bne.n	80097ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	2180      	movs	r1, #128	; 0x80
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff febd 	bl	8009554 <SPI_WaitFlagStateUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e023      	b.n	8009838 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097f8:	d11d      	bne.n	8009836 <SPI_EndRxTransaction+0xa6>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009802:	d004      	beq.n	800980e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980c:	d113      	bne.n	8009836 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff ff22 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982a:	f043 0220 	orr.w	r2, r3, #32
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e000      	b.n	8009838 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7ff ff03 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d007      	beq.n	8009874 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009868:	f043 0220 	orr.w	r2, r3, #32
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e027      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f7ff fe68 	bl	8009554 <SPI_WaitFlagStateUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d007      	beq.n	800989a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988e:	f043 0220 	orr.w	r2, r3, #32
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e014      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fedc 	bl	8009664 <SPI_WaitFifoStateUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d007      	beq.n	80098c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b6:	f043 0220 	orr.w	r2, r3, #32
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e000      	b.n	80098c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e049      	b.n	8009972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7fa f882 	bl	80039fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f000 fe74 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	f241 1311 	movw	r3, #4369	; 0x1111
 800998c:	4013      	ands	r3, r2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10f      	bne.n	80099b2 <HAL_TIM_Base_Stop+0x38>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a1a      	ldr	r2, [r3, #32]
 8009998:	f244 4344 	movw	r3, #17476	; 0x4444
 800999c:	4013      	ands	r3, r2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d107      	bne.n	80099b2 <HAL_TIM_Base_Stop+0x38>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f022 0201 	bic.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d001      	beq.n	80099e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e04a      	b.n	8009a76 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68da      	ldr	r2, [r3, #12]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a21      	ldr	r2, [pc, #132]	; (8009a84 <HAL_TIM_Base_Start_IT+0xbc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d018      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x6c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0a:	d013      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x6c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1d      	ldr	r2, [pc, #116]	; (8009a88 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d00e      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x6c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1c      	ldr	r2, [pc, #112]	; (8009a8c <HAL_TIM_Base_Start_IT+0xc4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d009      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x6c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a1a      	ldr	r2, [pc, #104]	; (8009a90 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_TIM_Base_Start_IT+0x6c>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a19      	ldr	r2, [pc, #100]	; (8009a94 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d115      	bne.n	8009a60 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b06      	cmp	r3, #6
 8009a44:	d015      	beq.n	8009a72 <HAL_TIM_Base_Start_IT+0xaa>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4c:	d011      	beq.n	8009a72 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0201 	orr.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5e:	e008      	b.n	8009a72 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e000      	b.n	8009a74 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40000400 	.word	0x40000400
 8009a8c:	40000800 	.word	0x40000800
 8009a90:	40013400 	.word	0x40013400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	00010007 	.word	0x00010007

08009a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e049      	b.n	8009b42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f841 	bl	8009b4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f000 fd8c 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
	...

08009b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <HAL_TIM_PWM_Start+0x24>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	e03c      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d109      	bne.n	8009b9e <HAL_TIM_PWM_Start+0x3e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	bf14      	ite	ne
 8009b96:	2301      	movne	r3, #1
 8009b98:	2300      	moveq	r3, #0
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	e02f      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d109      	bne.n	8009bb8 <HAL_TIM_PWM_Start+0x58>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	bf14      	ite	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	e022      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b0c      	cmp	r3, #12
 8009bbc:	d109      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0x72>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	bf14      	ite	ne
 8009bca:	2301      	movne	r3, #1
 8009bcc:	2300      	moveq	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	e015      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d109      	bne.n	8009bec <HAL_TIM_PWM_Start+0x8c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	bf14      	ite	ne
 8009be4:	2301      	movne	r3, #1
 8009be6:	2300      	moveq	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	e008      	b.n	8009bfe <HAL_TIM_PWM_Start+0x9e>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	bf14      	ite	ne
 8009bf8:	2301      	movne	r3, #1
 8009bfa:	2300      	moveq	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e097      	b.n	8009d36 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <HAL_TIM_PWM_Start+0xb6>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c14:	e023      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d104      	bne.n	8009c26 <HAL_TIM_PWM_Start+0xc6>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c24:	e01b      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_PWM_Start+0xd6>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c34:	e013      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b0c      	cmp	r3, #12
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start+0xe6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c44:	e00b      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start+0xf6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c54:	e003      	b.n	8009c5e <HAL_TIM_PWM_Start+0xfe>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2201      	movs	r2, #1
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 f8e8 	bl	800ae3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a33      	ldr	r2, [pc, #204]	; (8009d40 <HAL_TIM_PWM_Start+0x1e0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <HAL_TIM_PWM_Start+0x13e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a32      	ldr	r2, [pc, #200]	; (8009d44 <HAL_TIM_PWM_Start+0x1e4>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00e      	beq.n	8009c9e <HAL_TIM_PWM_Start+0x13e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a30      	ldr	r2, [pc, #192]	; (8009d48 <HAL_TIM_PWM_Start+0x1e8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d009      	beq.n	8009c9e <HAL_TIM_PWM_Start+0x13e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a2f      	ldr	r2, [pc, #188]	; (8009d4c <HAL_TIM_PWM_Start+0x1ec>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d004      	beq.n	8009c9e <HAL_TIM_PWM_Start+0x13e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a2d      	ldr	r2, [pc, #180]	; (8009d50 <HAL_TIM_PWM_Start+0x1f0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d101      	bne.n	8009ca2 <HAL_TIM_PWM_Start+0x142>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <HAL_TIM_PWM_Start+0x144>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d007      	beq.n	8009cb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <HAL_TIM_PWM_Start+0x1e0>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d018      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x194>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cca:	d013      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x194>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a20      	ldr	r2, [pc, #128]	; (8009d54 <HAL_TIM_PWM_Start+0x1f4>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x194>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a1f      	ldr	r2, [pc, #124]	; (8009d58 <HAL_TIM_PWM_Start+0x1f8>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x194>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a17      	ldr	r2, [pc, #92]	; (8009d44 <HAL_TIM_PWM_Start+0x1e4>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d004      	beq.n	8009cf4 <HAL_TIM_PWM_Start+0x194>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a16      	ldr	r2, [pc, #88]	; (8009d48 <HAL_TIM_PWM_Start+0x1e8>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d115      	bne.n	8009d20 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	4b18      	ldr	r3, [pc, #96]	; (8009d5c <HAL_TIM_PWM_Start+0x1fc>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b06      	cmp	r3, #6
 8009d04:	d015      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x1d2>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d0c:	d011      	beq.n	8009d32 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0201 	orr.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d1e:	e008      	b.n	8009d32 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0201 	orr.w	r2, r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e000      	b.n	8009d34 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	40012c00 	.word	0x40012c00
 8009d44:	40013400 	.word	0x40013400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	40014400 	.word	0x40014400
 8009d50:	40014800 	.word	0x40014800
 8009d54:	40000400 	.word	0x40000400
 8009d58:	40000800 	.word	0x40000800
 8009d5c:	00010007 	.word	0x00010007

08009d60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 f862 	bl	800ae3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a3e      	ldr	r2, [pc, #248]	; (8009e78 <HAL_TIM_PWM_Stop+0x118>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d013      	beq.n	8009daa <HAL_TIM_PWM_Stop+0x4a>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a3d      	ldr	r2, [pc, #244]	; (8009e7c <HAL_TIM_PWM_Stop+0x11c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00e      	beq.n	8009daa <HAL_TIM_PWM_Stop+0x4a>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a3b      	ldr	r2, [pc, #236]	; (8009e80 <HAL_TIM_PWM_Stop+0x120>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d009      	beq.n	8009daa <HAL_TIM_PWM_Stop+0x4a>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a3a      	ldr	r2, [pc, #232]	; (8009e84 <HAL_TIM_PWM_Stop+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d004      	beq.n	8009daa <HAL_TIM_PWM_Stop+0x4a>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a38      	ldr	r2, [pc, #224]	; (8009e88 <HAL_TIM_PWM_Stop+0x128>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d101      	bne.n	8009dae <HAL_TIM_PWM_Stop+0x4e>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e000      	b.n	8009db0 <HAL_TIM_PWM_Stop+0x50>
 8009dae:	2300      	movs	r3, #0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d017      	beq.n	8009de4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6a1a      	ldr	r2, [r3, #32]
 8009dba:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10f      	bne.n	8009de4 <HAL_TIM_PWM_Stop+0x84>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	6a1a      	ldr	r2, [r3, #32]
 8009dca:	f244 4344 	movw	r3, #17476	; 0x4444
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d107      	bne.n	8009de4 <HAL_TIM_PWM_Stop+0x84>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009de2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <HAL_TIM_PWM_Stop+0xb4>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a1a      	ldr	r2, [r3, #32]
 8009dfa:	f244 4344 	movw	r3, #17476	; 0x4444
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d107      	bne.n	8009e14 <HAL_TIM_PWM_Stop+0xb4>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 0201 	bic.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <HAL_TIM_PWM_Stop+0xc4>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e22:	e023      	b.n	8009e6c <HAL_TIM_PWM_Stop+0x10c>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d104      	bne.n	8009e34 <HAL_TIM_PWM_Stop+0xd4>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e32:	e01b      	b.n	8009e6c <HAL_TIM_PWM_Stop+0x10c>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d104      	bne.n	8009e44 <HAL_TIM_PWM_Stop+0xe4>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e42:	e013      	b.n	8009e6c <HAL_TIM_PWM_Stop+0x10c>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b0c      	cmp	r3, #12
 8009e48:	d104      	bne.n	8009e54 <HAL_TIM_PWM_Stop+0xf4>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e52:	e00b      	b.n	8009e6c <HAL_TIM_PWM_Stop+0x10c>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b10      	cmp	r3, #16
 8009e58:	d104      	bne.n	8009e64 <HAL_TIM_PWM_Stop+0x104>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e62:	e003      	b.n	8009e6c <HAL_TIM_PWM_Stop+0x10c>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40012c00 	.word	0x40012c00
 8009e7c:	40013400 	.word	0x40013400
 8009e80:	40014000 	.word	0x40014000
 8009e84:	40014400 	.word	0x40014400
 8009e88:	40014800 	.word	0x40014800

08009e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d122      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d11b      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0202 	mvn.w	r2, #2
 8009eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fb74 	bl	800a5bc <HAL_TIM_IC_CaptureCallback>
 8009ed4:	e005      	b.n	8009ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fb66 	bl	800a5a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fb77 	bl	800a5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d122      	bne.n	8009f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d11b      	bne.n	8009f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0204 	mvn.w	r2, #4
 8009f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2202      	movs	r2, #2
 8009f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fb4a 	bl	800a5bc <HAL_TIM_IC_CaptureCallback>
 8009f28:	e005      	b.n	8009f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fb3c 	bl	800a5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fb4d 	bl	800a5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b08      	cmp	r3, #8
 8009f48:	d122      	bne.n	8009f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d11b      	bne.n	8009f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f06f 0208 	mvn.w	r2, #8
 8009f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2204      	movs	r2, #4
 8009f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fb20 	bl	800a5bc <HAL_TIM_IC_CaptureCallback>
 8009f7c:	e005      	b.n	8009f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb12 	bl	800a5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb23 	bl	800a5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0310 	and.w	r3, r3, #16
 8009f9a:	2b10      	cmp	r3, #16
 8009f9c:	d122      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d11b      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f06f 0210 	mvn.w	r2, #16
 8009fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2208      	movs	r2, #8
 8009fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 faf6 	bl	800a5bc <HAL_TIM_IC_CaptureCallback>
 8009fd0:	e005      	b.n	8009fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fae8 	bl	800a5a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 faf9 	bl	800a5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0201 	mvn.w	r2, #1
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7f7 fbda 	bl	80017c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01a:	2b80      	cmp	r3, #128	; 0x80
 800a01c:	d10e      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a028:	2b80      	cmp	r3, #128	; 0x80
 800a02a:	d107      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 f964 	bl	800b304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04a:	d10e      	bne.n	800a06a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a056:	2b80      	cmp	r3, #128	; 0x80
 800a058:	d107      	bne.n	800a06a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 f957 	bl	800b318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d10e      	bne.n	800a096 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a082:	2b40      	cmp	r3, #64	; 0x40
 800a084:	d107      	bne.n	800a096 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a08e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 faa7 	bl	800a5e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d10e      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d107      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f06f 0220 	mvn.w	r2, #32
 800a0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f001 f917 	bl	800b2f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0d0:	d10f      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0e0:	d107      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f91d 	bl	800b32c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a100:	d10f      	bne.n	800a122 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a10c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a110:	d107      	bne.n	800a122 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f90f 	bl	800b340 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a130:	d10f      	bne.n	800a152 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a13c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a140:	d107      	bne.n	800a152 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 f901 	bl	800b354 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a15c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a160:	d10f      	bne.n	800a182 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a16c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a170:	d107      	bne.n	800a182 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a17a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f8f3 	bl	800b368 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e0ff      	b.n	800a3aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b14      	cmp	r3, #20
 800a1b6:	f200 80f0 	bhi.w	800a39a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a215 	.word	0x0800a215
 800a1c4:	0800a39b 	.word	0x0800a39b
 800a1c8:	0800a39b 	.word	0x0800a39b
 800a1cc:	0800a39b 	.word	0x0800a39b
 800a1d0:	0800a255 	.word	0x0800a255
 800a1d4:	0800a39b 	.word	0x0800a39b
 800a1d8:	0800a39b 	.word	0x0800a39b
 800a1dc:	0800a39b 	.word	0x0800a39b
 800a1e0:	0800a297 	.word	0x0800a297
 800a1e4:	0800a39b 	.word	0x0800a39b
 800a1e8:	0800a39b 	.word	0x0800a39b
 800a1ec:	0800a39b 	.word	0x0800a39b
 800a1f0:	0800a2d7 	.word	0x0800a2d7
 800a1f4:	0800a39b 	.word	0x0800a39b
 800a1f8:	0800a39b 	.word	0x0800a39b
 800a1fc:	0800a39b 	.word	0x0800a39b
 800a200:	0800a319 	.word	0x0800a319
 800a204:	0800a39b 	.word	0x0800a39b
 800a208:	0800a39b 	.word	0x0800a39b
 800a20c:	0800a39b 	.word	0x0800a39b
 800a210:	0800a359 	.word	0x0800a359
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f000 fa7c 	bl	800a718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0208 	orr.w	r2, r2, #8
 800a22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0204 	bic.w	r2, r2, #4
 800a23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6999      	ldr	r1, [r3, #24]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	619a      	str	r2, [r3, #24]
      break;
 800a252:	e0a5      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 faec 	bl	800a838 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a26e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	699a      	ldr	r2, [r3, #24]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a27e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6999      	ldr	r1, [r3, #24]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	021a      	lsls	r2, r3, #8
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	619a      	str	r2, [r3, #24]
      break;
 800a294:	e084      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68b9      	ldr	r1, [r7, #8]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fb55 	bl	800a94c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f042 0208 	orr.w	r2, r2, #8
 800a2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69da      	ldr	r2, [r3, #28]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0204 	bic.w	r2, r2, #4
 800a2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69d9      	ldr	r1, [r3, #28]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	61da      	str	r2, [r3, #28]
      break;
 800a2d4:	e064      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68b9      	ldr	r1, [r7, #8]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fbbd 	bl	800aa5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69da      	ldr	r2, [r3, #28]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69d9      	ldr	r1, [r3, #28]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	021a      	lsls	r2, r3, #8
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	61da      	str	r2, [r3, #28]
      break;
 800a316:	e043      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68b9      	ldr	r1, [r7, #8]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fc26 	bl	800ab70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0208 	orr.w	r2, r2, #8
 800a332:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0204 	bic.w	r2, r2, #4
 800a342:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	691a      	ldr	r2, [r3, #16]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a356:	e023      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68b9      	ldr	r1, [r7, #8]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fc6a 	bl	800ac38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a372:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a382:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	021a      	lsls	r2, r3, #8
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	430a      	orrs	r2, r1
 800a396:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a398:	e002      	b.n	800a3a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
      break;
 800a39e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop

0800a3b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e0de      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1da>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a3ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a63      	ldr	r2, [pc, #396]	; (800a598 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	f000 80a9 	beq.w	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a410:	4a61      	ldr	r2, [pc, #388]	; (800a598 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	f200 80ae 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a418:	4a60      	ldr	r2, [pc, #384]	; (800a59c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	f000 80a1 	beq.w	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a420:	4a5e      	ldr	r2, [pc, #376]	; (800a59c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a422:	4293      	cmp	r3, r2
 800a424:	f200 80a6 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a428:	4a5d      	ldr	r2, [pc, #372]	; (800a5a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	f000 8099 	beq.w	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a430:	4a5b      	ldr	r2, [pc, #364]	; (800a5a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a432:	4293      	cmp	r3, r2
 800a434:	f200 809e 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a438:	4a5a      	ldr	r2, [pc, #360]	; (800a5a4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	f000 8091 	beq.w	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a440:	4a58      	ldr	r2, [pc, #352]	; (800a5a4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a442:	4293      	cmp	r3, r2
 800a444:	f200 8096 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a448:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a44c:	f000 8089 	beq.w	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a450:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a454:	f200 808e 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a45c:	d03e      	beq.n	800a4dc <HAL_TIM_ConfigClockSource+0x128>
 800a45e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a462:	f200 8087 	bhi.w	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a46a:	f000 8086 	beq.w	800a57a <HAL_TIM_ConfigClockSource+0x1c6>
 800a46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a472:	d87f      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a474:	2b70      	cmp	r3, #112	; 0x70
 800a476:	d01a      	beq.n	800a4ae <HAL_TIM_ConfigClockSource+0xfa>
 800a478:	2b70      	cmp	r3, #112	; 0x70
 800a47a:	d87b      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a47c:	2b60      	cmp	r3, #96	; 0x60
 800a47e:	d050      	beq.n	800a522 <HAL_TIM_ConfigClockSource+0x16e>
 800a480:	2b60      	cmp	r3, #96	; 0x60
 800a482:	d877      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a484:	2b50      	cmp	r3, #80	; 0x50
 800a486:	d03c      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x14e>
 800a488:	2b50      	cmp	r3, #80	; 0x50
 800a48a:	d873      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	d058      	beq.n	800a542 <HAL_TIM_ConfigClockSource+0x18e>
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d86f      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a494:	2b30      	cmp	r3, #48	; 0x30
 800a496:	d064      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a498:	2b30      	cmp	r3, #48	; 0x30
 800a49a:	d86b      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d060      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4a0:	2b20      	cmp	r3, #32
 800a4a2:	d867      	bhi.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d05c      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4a8:	2b10      	cmp	r3, #16
 800a4aa:	d05a      	beq.n	800a562 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4ac:	e062      	b.n	800a574 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	6899      	ldr	r1, [r3, #8]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f000 fc9d 	bl	800adfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	609a      	str	r2, [r3, #8]
      break;
 800a4da:	e04f      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	6899      	ldr	r1, [r3, #8]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f000 fc86 	bl	800adfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689a      	ldr	r2, [r3, #8]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4fe:	609a      	str	r2, [r3, #8]
      break;
 800a500:	e03c      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	6859      	ldr	r1, [r3, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	461a      	mov	r2, r3
 800a510:	f000 fbf8 	bl	800ad04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2150      	movs	r1, #80	; 0x50
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fc51 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a520:	e02c      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	6859      	ldr	r1, [r3, #4]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	461a      	mov	r2, r3
 800a530:	f000 fc17 	bl	800ad62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2160      	movs	r1, #96	; 0x60
 800a53a:	4618      	mov	r0, r3
 800a53c:	f000 fc41 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a540:	e01c      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	6859      	ldr	r1, [r3, #4]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	461a      	mov	r2, r3
 800a550:	f000 fbd8 	bl	800ad04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2140      	movs	r1, #64	; 0x40
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fc31 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a560:	e00c      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f000 fc28 	bl	800adc2 <TIM_ITRx_SetConfig>
      break;
 800a572:	e003      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
      break;
 800a578:	e000      	b.n	800a57c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a57a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	00100070 	.word	0x00100070
 800a59c:	00100040 	.word	0x00100040
 800a5a0:	00100030 	.word	0x00100030
 800a5a4:	00100020 	.word	0x00100020

0800a5a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a3c      	ldr	r2, [pc, #240]	; (800a6fc <TIM_Base_SetConfig+0x104>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00f      	beq.n	800a630 <TIM_Base_SetConfig+0x38>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a616:	d00b      	beq.n	800a630 <TIM_Base_SetConfig+0x38>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a39      	ldr	r2, [pc, #228]	; (800a700 <TIM_Base_SetConfig+0x108>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d007      	beq.n	800a630 <TIM_Base_SetConfig+0x38>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a38      	ldr	r2, [pc, #224]	; (800a704 <TIM_Base_SetConfig+0x10c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_Base_SetConfig+0x38>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a37      	ldr	r2, [pc, #220]	; (800a708 <TIM_Base_SetConfig+0x110>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d108      	bne.n	800a642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a2d      	ldr	r2, [pc, #180]	; (800a6fc <TIM_Base_SetConfig+0x104>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d01b      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a650:	d017      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a2a      	ldr	r2, [pc, #168]	; (800a700 <TIM_Base_SetConfig+0x108>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d013      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a29      	ldr	r2, [pc, #164]	; (800a704 <TIM_Base_SetConfig+0x10c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d00f      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a28      	ldr	r2, [pc, #160]	; (800a708 <TIM_Base_SetConfig+0x110>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d00b      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a27      	ldr	r2, [pc, #156]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d007      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a26      	ldr	r2, [pc, #152]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d003      	beq.n	800a682 <TIM_Base_SetConfig+0x8a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a25      	ldr	r2, [pc, #148]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d108      	bne.n	800a694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4313      	orrs	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689a      	ldr	r2, [r3, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <TIM_Base_SetConfig+0x104>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00f      	beq.n	800a6e0 <TIM_Base_SetConfig+0xe8>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a11      	ldr	r2, [pc, #68]	; (800a708 <TIM_Base_SetConfig+0x110>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00b      	beq.n	800a6e0 <TIM_Base_SetConfig+0xe8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a10      	ldr	r2, [pc, #64]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d007      	beq.n	800a6e0 <TIM_Base_SetConfig+0xe8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a0f      	ldr	r2, [pc, #60]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_Base_SetConfig+0xe8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a0e      	ldr	r2, [pc, #56]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d103      	bne.n	800a6e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	691a      	ldr	r2, [r3, #16]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	615a      	str	r2, [r3, #20]
}
 800a6ee:	bf00      	nop
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40012c00 	.word	0x40012c00
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40013400 	.word	0x40013400
 800a70c:	40014000 	.word	0x40014000
 800a710:	40014400 	.word	0x40014400
 800a714:	40014800 	.word	0x40014800

0800a718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f023 0302 	bic.w	r3, r3, #2
 800a764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a2c      	ldr	r2, [pc, #176]	; (800a824 <TIM_OC1_SetConfig+0x10c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00f      	beq.n	800a798 <TIM_OC1_SetConfig+0x80>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a2b      	ldr	r2, [pc, #172]	; (800a828 <TIM_OC1_SetConfig+0x110>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00b      	beq.n	800a798 <TIM_OC1_SetConfig+0x80>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a2a      	ldr	r2, [pc, #168]	; (800a82c <TIM_OC1_SetConfig+0x114>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_OC1_SetConfig+0x80>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a29      	ldr	r2, [pc, #164]	; (800a830 <TIM_OC1_SetConfig+0x118>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_OC1_SetConfig+0x80>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a28      	ldr	r2, [pc, #160]	; (800a834 <TIM_OC1_SetConfig+0x11c>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d10c      	bne.n	800a7b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f023 0308 	bic.w	r3, r3, #8
 800a79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f023 0304 	bic.w	r3, r3, #4
 800a7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a1b      	ldr	r2, [pc, #108]	; (800a824 <TIM_OC1_SetConfig+0x10c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00f      	beq.n	800a7da <TIM_OC1_SetConfig+0xc2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a1a      	ldr	r2, [pc, #104]	; (800a828 <TIM_OC1_SetConfig+0x110>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d00b      	beq.n	800a7da <TIM_OC1_SetConfig+0xc2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a19      	ldr	r2, [pc, #100]	; (800a82c <TIM_OC1_SetConfig+0x114>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d007      	beq.n	800a7da <TIM_OC1_SetConfig+0xc2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a18      	ldr	r2, [pc, #96]	; (800a830 <TIM_OC1_SetConfig+0x118>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d003      	beq.n	800a7da <TIM_OC1_SetConfig+0xc2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a17      	ldr	r2, [pc, #92]	; (800a834 <TIM_OC1_SetConfig+0x11c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d111      	bne.n	800a7fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	621a      	str	r2, [r3, #32]
}
 800a818:	bf00      	nop
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	40012c00 	.word	0x40012c00
 800a828:	40013400 	.word	0x40013400
 800a82c:	40014000 	.word	0x40014000
 800a830:	40014400 	.word	0x40014400
 800a834:	40014800 	.word	0x40014800

0800a838 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	f023 0210 	bic.w	r2, r3, #16
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	021b      	lsls	r3, r3, #8
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f023 0320 	bic.w	r3, r3, #32
 800a886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4313      	orrs	r3, r2
 800a892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a28      	ldr	r2, [pc, #160]	; (800a938 <TIM_OC2_SetConfig+0x100>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d003      	beq.n	800a8a4 <TIM_OC2_SetConfig+0x6c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a27      	ldr	r2, [pc, #156]	; (800a93c <TIM_OC2_SetConfig+0x104>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d10d      	bne.n	800a8c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <TIM_OC2_SetConfig+0x100>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d00f      	beq.n	800a8e8 <TIM_OC2_SetConfig+0xb0>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a1c      	ldr	r2, [pc, #112]	; (800a93c <TIM_OC2_SetConfig+0x104>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d00b      	beq.n	800a8e8 <TIM_OC2_SetConfig+0xb0>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a1b      	ldr	r2, [pc, #108]	; (800a940 <TIM_OC2_SetConfig+0x108>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d007      	beq.n	800a8e8 <TIM_OC2_SetConfig+0xb0>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a1a      	ldr	r2, [pc, #104]	; (800a944 <TIM_OC2_SetConfig+0x10c>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d003      	beq.n	800a8e8 <TIM_OC2_SetConfig+0xb0>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a19      	ldr	r2, [pc, #100]	; (800a948 <TIM_OC2_SetConfig+0x110>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d113      	bne.n	800a910 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	4313      	orrs	r3, r2
 800a902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	621a      	str	r2, [r3, #32]
}
 800a92a:	bf00      	nop
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	40012c00 	.word	0x40012c00
 800a93c:	40013400 	.word	0x40013400
 800a940:	40014000 	.word	0x40014000
 800a944:	40014400 	.word	0x40014400
 800a948:	40014800 	.word	0x40014800

0800a94c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	021b      	lsls	r3, r3, #8
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a27      	ldr	r2, [pc, #156]	; (800aa48 <TIM_OC3_SetConfig+0xfc>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d003      	beq.n	800a9b6 <TIM_OC3_SetConfig+0x6a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a26      	ldr	r2, [pc, #152]	; (800aa4c <TIM_OC3_SetConfig+0x100>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d10d      	bne.n	800a9d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	021b      	lsls	r3, r3, #8
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a1c      	ldr	r2, [pc, #112]	; (800aa48 <TIM_OC3_SetConfig+0xfc>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00f      	beq.n	800a9fa <TIM_OC3_SetConfig+0xae>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a1b      	ldr	r2, [pc, #108]	; (800aa4c <TIM_OC3_SetConfig+0x100>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d00b      	beq.n	800a9fa <TIM_OC3_SetConfig+0xae>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a1a      	ldr	r2, [pc, #104]	; (800aa50 <TIM_OC3_SetConfig+0x104>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d007      	beq.n	800a9fa <TIM_OC3_SetConfig+0xae>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a19      	ldr	r2, [pc, #100]	; (800aa54 <TIM_OC3_SetConfig+0x108>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d003      	beq.n	800a9fa <TIM_OC3_SetConfig+0xae>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a18      	ldr	r2, [pc, #96]	; (800aa58 <TIM_OC3_SetConfig+0x10c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d113      	bne.n	800aa22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	621a      	str	r2, [r3, #32]
}
 800aa3c:	bf00      	nop
 800aa3e:	371c      	adds	r7, #28
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	40012c00 	.word	0x40012c00
 800aa4c:	40013400 	.word	0x40013400
 800aa50:	40014000 	.word	0x40014000
 800aa54:	40014400 	.word	0x40014400
 800aa58:	40014800 	.word	0x40014800

0800aa5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aaaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	031b      	lsls	r3, r3, #12
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a28      	ldr	r2, [pc, #160]	; (800ab5c <TIM_OC4_SetConfig+0x100>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_OC4_SetConfig+0x6c>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a27      	ldr	r2, [pc, #156]	; (800ab60 <TIM_OC4_SetConfig+0x104>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d10d      	bne.n	800aae4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	031b      	lsls	r3, r3, #12
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a1d      	ldr	r2, [pc, #116]	; (800ab5c <TIM_OC4_SetConfig+0x100>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00f      	beq.n	800ab0c <TIM_OC4_SetConfig+0xb0>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a1c      	ldr	r2, [pc, #112]	; (800ab60 <TIM_OC4_SetConfig+0x104>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00b      	beq.n	800ab0c <TIM_OC4_SetConfig+0xb0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a1b      	ldr	r2, [pc, #108]	; (800ab64 <TIM_OC4_SetConfig+0x108>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_OC4_SetConfig+0xb0>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a1a      	ldr	r2, [pc, #104]	; (800ab68 <TIM_OC4_SetConfig+0x10c>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_OC4_SetConfig+0xb0>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a19      	ldr	r2, [pc, #100]	; (800ab6c <TIM_OC4_SetConfig+0x110>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d113      	bne.n	800ab34 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	019b      	lsls	r3, r3, #6
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	019b      	lsls	r3, r3, #6
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	621a      	str	r2, [r3, #32]
}
 800ab4e:	bf00      	nop
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	40012c00 	.word	0x40012c00
 800ab60:	40013400 	.word	0x40013400
 800ab64:	40014000 	.word	0x40014000
 800ab68:	40014400 	.word	0x40014400
 800ab6c:	40014800 	.word	0x40014800

0800ab70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800abb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	041b      	lsls	r3, r3, #16
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a17      	ldr	r2, [pc, #92]	; (800ac24 <TIM_OC5_SetConfig+0xb4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d00f      	beq.n	800abea <TIM_OC5_SetConfig+0x7a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <TIM_OC5_SetConfig+0xb8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00b      	beq.n	800abea <TIM_OC5_SetConfig+0x7a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <TIM_OC5_SetConfig+0xbc>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d007      	beq.n	800abea <TIM_OC5_SetConfig+0x7a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a14      	ldr	r2, [pc, #80]	; (800ac30 <TIM_OC5_SetConfig+0xc0>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC5_SetConfig+0x7a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a13      	ldr	r2, [pc, #76]	; (800ac34 <TIM_OC5_SetConfig+0xc4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d109      	bne.n	800abfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	40012c00 	.word	0x40012c00
 800ac28:	40013400 	.word	0x40013400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a18      	ldr	r2, [pc, #96]	; (800acf0 <TIM_OC6_SetConfig+0xb8>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00f      	beq.n	800acb4 <TIM_OC6_SetConfig+0x7c>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a17      	ldr	r2, [pc, #92]	; (800acf4 <TIM_OC6_SetConfig+0xbc>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00b      	beq.n	800acb4 <TIM_OC6_SetConfig+0x7c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a16      	ldr	r2, [pc, #88]	; (800acf8 <TIM_OC6_SetConfig+0xc0>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d007      	beq.n	800acb4 <TIM_OC6_SetConfig+0x7c>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a15      	ldr	r2, [pc, #84]	; (800acfc <TIM_OC6_SetConfig+0xc4>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d003      	beq.n	800acb4 <TIM_OC6_SetConfig+0x7c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a14      	ldr	r2, [pc, #80]	; (800ad00 <TIM_OC6_SetConfig+0xc8>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d109      	bne.n	800acc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	029b      	lsls	r3, r3, #10
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	621a      	str	r2, [r3, #32]
}
 800ace2:	bf00      	nop
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40012c00 	.word	0x40012c00
 800acf4:	40013400 	.word	0x40013400
 800acf8:	40014000 	.word	0x40014000
 800acfc:	40014400 	.word	0x40014400
 800ad00:	40014800 	.word	0x40014800

0800ad04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	f023 0201 	bic.w	r2, r3, #1
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f023 030a 	bic.w	r3, r3, #10
 800ad40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	621a      	str	r2, [r3, #32]
}
 800ad56:	bf00      	nop
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b087      	sub	sp, #28
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0210 	bic.w	r2, r3, #16
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	031b      	lsls	r3, r3, #12
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	011b      	lsls	r3, r3, #4
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b085      	sub	sp, #20
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800add8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800addc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f043 0307 	orr.w	r3, r3, #7
 800ade8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	609a      	str	r2, [r3, #8]
}
 800adf0:	bf00      	nop
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	021a      	lsls	r2, r3, #8
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	609a      	str	r2, [r3, #8]
}
 800ae30:	bf00      	nop
 800ae32:	371c      	adds	r7, #28
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b087      	sub	sp, #28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f003 031f 	and.w	r3, r3, #31
 800ae4e:	2201      	movs	r2, #1
 800ae50:	fa02 f303 	lsl.w	r3, r2, r3
 800ae54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	401a      	ands	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6a1a      	ldr	r2, [r3, #32]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	f003 031f 	and.w	r3, r3, #31
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	fa01 f303 	lsl.w	r3, r1, r3
 800ae74:	431a      	orrs	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	621a      	str	r2, [r3, #32]
}
 800ae7a:	bf00      	nop
 800ae7c:	371c      	adds	r7, #28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
	...

0800ae88 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d109      	bne.n	800aeac <HAL_TIMEx_PWMN_Start+0x24>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	bf14      	ite	ne
 800aea4:	2301      	movne	r3, #1
 800aea6:	2300      	moveq	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	e022      	b.n	800aef2 <HAL_TIMEx_PWMN_Start+0x6a>
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d109      	bne.n	800aec6 <HAL_TIMEx_PWMN_Start+0x3e>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	bf14      	ite	ne
 800aebe:	2301      	movne	r3, #1
 800aec0:	2300      	moveq	r3, #0
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	e015      	b.n	800aef2 <HAL_TIMEx_PWMN_Start+0x6a>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d109      	bne.n	800aee0 <HAL_TIMEx_PWMN_Start+0x58>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	bf14      	ite	ne
 800aed8:	2301      	movne	r3, #1
 800aeda:	2300      	moveq	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	e008      	b.n	800aef2 <HAL_TIMEx_PWMN_Start+0x6a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	bf14      	ite	ne
 800aeec:	2301      	movne	r3, #1
 800aeee:	2300      	moveq	r3, #0
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e069      	b.n	800afce <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d104      	bne.n	800af0a <HAL_TIMEx_PWMN_Start+0x82>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af08:	e013      	b.n	800af32 <HAL_TIMEx_PWMN_Start+0xaa>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d104      	bne.n	800af1a <HAL_TIMEx_PWMN_Start+0x92>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af18:	e00b      	b.n	800af32 <HAL_TIMEx_PWMN_Start+0xaa>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d104      	bne.n	800af2a <HAL_TIMEx_PWMN_Start+0xa2>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af28:	e003      	b.n	800af32 <HAL_TIMEx_PWMN_Start+0xaa>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2202      	movs	r2, #2
 800af2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2204      	movs	r2, #4
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fa1e 	bl	800b37c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a20      	ldr	r2, [pc, #128]	; (800afd8 <HAL_TIMEx_PWMN_Start+0x150>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d018      	beq.n	800af8c <HAL_TIMEx_PWMN_Start+0x104>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af62:	d013      	beq.n	800af8c <HAL_TIMEx_PWMN_Start+0x104>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a1c      	ldr	r2, [pc, #112]	; (800afdc <HAL_TIMEx_PWMN_Start+0x154>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d00e      	beq.n	800af8c <HAL_TIMEx_PWMN_Start+0x104>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1b      	ldr	r2, [pc, #108]	; (800afe0 <HAL_TIMEx_PWMN_Start+0x158>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d009      	beq.n	800af8c <HAL_TIMEx_PWMN_Start+0x104>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a19      	ldr	r2, [pc, #100]	; (800afe4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d004      	beq.n	800af8c <HAL_TIMEx_PWMN_Start+0x104>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a18      	ldr	r2, [pc, #96]	; (800afe8 <HAL_TIMEx_PWMN_Start+0x160>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d115      	bne.n	800afb8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	4b16      	ldr	r3, [pc, #88]	; (800afec <HAL_TIMEx_PWMN_Start+0x164>)
 800af94:	4013      	ands	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b06      	cmp	r3, #6
 800af9c:	d015      	beq.n	800afca <HAL_TIMEx_PWMN_Start+0x142>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa4:	d011      	beq.n	800afca <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f042 0201 	orr.w	r2, r2, #1
 800afb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afb6:	e008      	b.n	800afca <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f042 0201 	orr.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	e000      	b.n	800afcc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	40012c00 	.word	0x40012c00
 800afdc:	40000400 	.word	0x40000400
 800afe0:	40000800 	.word	0x40000800
 800afe4:	40013400 	.word	0x40013400
 800afe8:	40014000 	.word	0x40014000
 800afec:	00010007 	.word	0x00010007

0800aff0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2200      	movs	r2, #0
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f9ba 	bl	800b37c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6a1a      	ldr	r2, [r3, #32]
 800b00e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b012:	4013      	ands	r3, r2
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10f      	bne.n	800b038 <HAL_TIMEx_PWMN_Stop+0x48>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6a1a      	ldr	r2, [r3, #32]
 800b01e:	f244 4344 	movw	r3, #17476	; 0x4444
 800b022:	4013      	ands	r3, r2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d107      	bne.n	800b038 <HAL_TIMEx_PWMN_Stop+0x48>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b036:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6a1a      	ldr	r2, [r3, #32]
 800b03e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b042:	4013      	ands	r3, r2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10f      	bne.n	800b068 <HAL_TIMEx_PWMN_Stop+0x78>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	f244 4344 	movw	r3, #17476	; 0x4444
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <HAL_TIMEx_PWMN_Stop+0x78>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 0201 	bic.w	r2, r2, #1
 800b066:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d104      	bne.n	800b078 <HAL_TIMEx_PWMN_Stop+0x88>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b076:	e013      	b.n	800b0a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b04      	cmp	r3, #4
 800b07c:	d104      	bne.n	800b088 <HAL_TIMEx_PWMN_Stop+0x98>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b086:	e00b      	b.n	800b0a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b08      	cmp	r3, #8
 800b08c:	d104      	bne.n	800b098 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b096:	e003      	b.n	800b0a0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e065      	b.n	800b190 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a2c      	ldr	r2, [pc, #176]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a2b      	ldr	r2, [pc, #172]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d108      	bne.n	800b10a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b114:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1b      	ldr	r2, [pc, #108]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d018      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13a:	d013      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a18      	ldr	r2, [pc, #96]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00e      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d009      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a12      	ldr	r2, [pc, #72]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d004      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a13      	ldr	r2, [pc, #76]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d10c      	bne.n	800b17e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b16a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	4313      	orrs	r3, r2
 800b174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	40012c00 	.word	0x40012c00
 800b1a0:	40013400 	.word	0x40013400
 800b1a4:	40000400 	.word	0x40000400
 800b1a8:	40000800 	.word	0x40000800
 800b1ac:	40014000 	.word	0x40014000

0800b1b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d101      	bne.n	800b1cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e087      	b.n	800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	4313      	orrs	r3, r2
 800b234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	041b      	lsls	r3, r3, #16
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a27      	ldr	r2, [pc, #156]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d004      	beq.n	800b25a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a25      	ldr	r2, [pc, #148]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d106      	bne.n	800b268 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a1e      	ldr	r2, [pc, #120]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d004      	beq.n	800b27c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d126      	bne.n	800b2ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b286:	051b      	lsls	r3, r3, #20
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a0e      	ldr	r2, [pc, #56]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d004      	beq.n	800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a0d      	ldr	r2, [pc, #52]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d106      	bne.n	800b2ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	40012c00 	.word	0x40012c00
 800b2ec:	40013400 	.word	0x40013400

0800b2f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f003 031f 	and.w	r3, r3, #31
 800b38e:	2204      	movs	r2, #4
 800b390:	fa02 f303 	lsl.w	r3, r2, r3
 800b394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a1a      	ldr	r2, [r3, #32]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	43db      	mvns	r3, r3
 800b39e:	401a      	ands	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a1a      	ldr	r2, [r3, #32]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f003 031f 	and.w	r3, r3, #31
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	621a      	str	r2, [r3, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	371c      	adds	r7, #28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e042      	b.n	800b45e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d106      	bne.n	800b3f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7f8 fbf4 	bl	8003bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2224      	movs	r2, #36	; 0x24
 800b3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0201 	bic.w	r2, r2, #1
 800b406:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fc01 	bl	800bc10 <UART_SetConfig>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e022      	b.n	800b45e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fec1 	bl	800c1a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b434:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b444:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f042 0201 	orr.w	r2, r2, #1
 800b454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 ff48 	bl	800c2ec <UART_CheckIdleState>
 800b45c:	4603      	mov	r3, r0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b47c:	2b20      	cmp	r3, #32
 800b47e:	d17a      	bne.n	800b576 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <HAL_UART_Transmit_DMA+0x24>
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e073      	b.n	800b578 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_UART_Transmit_DMA+0x36>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e06c      	b.n	800b578 <HAL_UART_Transmit_DMA+0x110>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	88fa      	ldrh	r2, [r7, #6]
 800b4b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	88fa      	ldrh	r2, [r7, #6]
 800b4b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2221      	movs	r2, #33	; 0x21
 800b4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d02c      	beq.n	800b52e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4d8:	4a29      	ldr	r2, [pc, #164]	; (800b580 <HAL_UART_Transmit_DMA+0x118>)
 800b4da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4e0:	4a28      	ldr	r2, [pc, #160]	; (800b584 <HAL_UART_Transmit_DMA+0x11c>)
 800b4e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4e8:	4a27      	ldr	r2, [pc, #156]	; (800b588 <HAL_UART_Transmit_DMA+0x120>)
 800b4ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3328      	adds	r3, #40	; 0x28
 800b504:	461a      	mov	r2, r3
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	f7fb f8e4 	bl	80066d4 <HAL_DMA_Start_IT>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00d      	beq.n	800b52e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2210      	movs	r2, #16
 800b516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2220      	movs	r2, #32
 800b526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e024      	b.n	800b578 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2240      	movs	r2, #64	; 0x40
 800b534:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3308      	adds	r3, #8
 800b544:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	e853 3f00 	ldrex	r3, [r3]
 800b54c:	613b      	str	r3, [r7, #16]
   return(result);
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b554:	627b      	str	r3, [r7, #36]	; 0x24
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3308      	adds	r3, #8
 800b55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b55e:	623a      	str	r2, [r7, #32]
 800b560:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	69f9      	ldr	r1, [r7, #28]
 800b564:	6a3a      	ldr	r2, [r7, #32]
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e5      	bne.n	800b53e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	e000      	b.n	800b578 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b576:	2302      	movs	r3, #2
  }
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3728      	adds	r7, #40	; 0x28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	0800c661 	.word	0x0800c661
 800b584:	0800c6fb 	.word	0x0800c6fb
 800b588:	0800c717 	.word	0x0800c717

0800b58c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b0ba      	sub	sp, #232	; 0xe8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b5b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b5c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d11b      	bne.n	800b600 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d015      	beq.n	800b600 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d105      	bne.n	800b5ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f000 82d6 	beq.w	800bba2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
      }
      return;
 800b5fe:	e2d0      	b.n	800bba2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 811f 	beq.w	800b848 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b60a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b60e:	4b8b      	ldr	r3, [pc, #556]	; (800b83c <HAL_UART_IRQHandler+0x2b0>)
 800b610:	4013      	ands	r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d106      	bne.n	800b624 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b616:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b61a:	4b89      	ldr	r3, [pc, #548]	; (800b840 <HAL_UART_IRQHandler+0x2b4>)
 800b61c:	4013      	ands	r3, r2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8112 	beq.w	800b848 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d011      	beq.n	800b654 <HAL_UART_IRQHandler+0xc8>
 800b630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00b      	beq.n	800b654 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2201      	movs	r2, #1
 800b642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b64a:	f043 0201 	orr.w	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d011      	beq.n	800b684 <HAL_UART_IRQHandler+0xf8>
 800b660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2202      	movs	r2, #2
 800b672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b67a:	f043 0204 	orr.w	r2, r3, #4
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d011      	beq.n	800b6b4 <HAL_UART_IRQHandler+0x128>
 800b690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2204      	movs	r2, #4
 800b6a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6aa:	f043 0202 	orr.w	r2, r3, #2
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b8:	f003 0308 	and.w	r3, r3, #8
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d017      	beq.n	800b6f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6c4:	f003 0320 	and.w	r3, r3, #32
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d105      	bne.n	800b6d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6d0:	4b5a      	ldr	r3, [pc, #360]	; (800b83c <HAL_UART_IRQHandler+0x2b0>)
 800b6d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00b      	beq.n	800b6f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2208      	movs	r2, #8
 800b6de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e6:	f043 0208 	orr.w	r2, r3, #8
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d012      	beq.n	800b722 <HAL_UART_IRQHandler+0x196>
 800b6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b700:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00c      	beq.n	800b722 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b718:	f043 0220 	orr.w	r2, r3, #32
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 823c 	beq.w	800bba6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0320 	and.w	r3, r3, #32
 800b736:	2b00      	cmp	r3, #0
 800b738:	d013      	beq.n	800b762 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d105      	bne.n	800b752 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d007      	beq.n	800b762 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b776:	2b40      	cmp	r3, #64	; 0x40
 800b778:	d005      	beq.n	800b786 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b77a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b77e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b782:	2b00      	cmp	r3, #0
 800b784:	d04f      	beq.n	800b826 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 ff04 	bl	800c594 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b796:	2b40      	cmp	r3, #64	; 0x40
 800b798:	d141      	bne.n	800b81e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3308      	adds	r3, #8
 800b7a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1d9      	bne.n	800b79a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d013      	beq.n	800b816 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7f2:	4a14      	ldr	r2, [pc, #80]	; (800b844 <HAL_UART_IRQHandler+0x2b8>)
 800b7f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fb f83e 	bl	800687c <HAL_DMA_Abort_IT>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d017      	beq.n	800b836 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b810:	4610      	mov	r0, r2
 800b812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b814:	e00f      	b.n	800b836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f9e4 	bl	800bbe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b81c:	e00b      	b.n	800b836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f9e0 	bl	800bbe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b824:	e007      	b.n	800b836 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f9dc 	bl	800bbe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b834:	e1b7      	b.n	800bba6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b836:	bf00      	nop
    return;
 800b838:	e1b5      	b.n	800bba6 <HAL_UART_IRQHandler+0x61a>
 800b83a:	bf00      	nop
 800b83c:	10000001 	.word	0x10000001
 800b840:	04000120 	.word	0x04000120
 800b844:	0800c797 	.word	0x0800c797

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	f040 814a 	bne.w	800bae6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b856:	f003 0310 	and.w	r3, r3, #16
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 8143 	beq.w	800bae6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b864:	f003 0310 	and.w	r3, r3, #16
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 813c 	beq.w	800bae6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2210      	movs	r2, #16
 800b874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b40      	cmp	r3, #64	; 0x40
 800b882:	f040 80b5 	bne.w	800b9f0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b892:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 8187 	beq.w	800bbaa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	f080 817f 	bcs.w	800bbaa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f040 8086 	bne.w	800b9d4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b8dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b90a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1da      	bne.n	800b8c8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b91c:	e853 3f00 	ldrex	r3, [r3]
 800b920:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b924:	f023 0301 	bic.w	r3, r3, #1
 800b928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3308      	adds	r3, #8
 800b932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b936:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b93a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b93e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b942:	e841 2300 	strex	r3, r2, [r1]
 800b946:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e1      	bne.n	800b912 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3308      	adds	r3, #8
 800b954:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b958:	e853 3f00 	ldrex	r3, [r3]
 800b95c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3308      	adds	r3, #8
 800b96e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b972:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e3      	bne.n	800b94e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a4:	f023 0310 	bic.w	r3, r3, #16
 800b9a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e4      	bne.n	800b994 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fa fefb 	bl	80067ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f905 	bl	800bbf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9ee:	e0dc      	b.n	800bbaa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 80ce 	beq.w	800bbae <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ba12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80c9 	beq.w	800bbae <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba3e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e4      	bne.n	800ba1c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	623b      	str	r3, [r7, #32]
   return(result);
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba68:	f023 0301 	bic.w	r3, r3, #1
 800ba6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3308      	adds	r3, #8
 800ba76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba7a:	633a      	str	r2, [r7, #48]	; 0x30
 800ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba82:	e841 2300 	strex	r3, r2, [r1]
 800ba86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1e1      	bne.n	800ba52 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	e853 3f00 	ldrex	r3, [r3]
 800baae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 0310 	bic.w	r3, r3, #16
 800bab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac8:	69b9      	ldr	r1, [r7, #24]
 800baca:	69fa      	ldr	r2, [r7, #28]
 800bacc:	e841 2300 	strex	r3, r2, [r1]
 800bad0:	617b      	str	r3, [r7, #20]
   return(result);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e4      	bne.n	800baa2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f88a 	bl	800bbf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bae4:	e063      	b.n	800bbae <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00e      	beq.n	800bb10 <HAL_UART_IRQHandler+0x584>
 800baf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d008      	beq.n	800bb10 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fe85 	bl	800c818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb0e:	e051      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d014      	beq.n	800bb46 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d105      	bne.n	800bb34 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d03a      	beq.n	800bbb2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
    }
    return;
 800bb44:	e035      	b.n	800bbb2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d009      	beq.n	800bb66 <HAL_UART_IRQHandler+0x5da>
 800bb52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fe2f 	bl	800c7c2 <UART_EndTransmit_IT>
    return;
 800bb64:	e026      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_UART_IRQHandler+0x5fa>
 800bb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fe5e 	bl	800c840 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb84:	e016      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d010      	beq.n	800bbb4 <HAL_UART_IRQHandler+0x628>
 800bb92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da0c      	bge.n	800bbb4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fe46 	bl	800c82c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bba0:	e008      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
      return;
 800bba2:	bf00      	nop
 800bba4:	e006      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
    return;
 800bba6:	bf00      	nop
 800bba8:	e004      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
      return;
 800bbaa:	bf00      	nop
 800bbac:	e002      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
      return;
 800bbae:	bf00      	nop
 800bbb0:	e000      	b.n	800bbb4 <HAL_UART_IRQHandler+0x628>
    return;
 800bbb2:	bf00      	nop
  }
}
 800bbb4:	37e8      	adds	r7, #232	; 0xe8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop

0800bbbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc14:	b08c      	sub	sp, #48	; 0x30
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	4313      	orrs	r3, r2
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	4bab      	ldr	r3, [pc, #684]	; (800beec <UART_SetConfig+0x2dc>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4aa0      	ldr	r2, [pc, #640]	; (800bef0 <UART_SetConfig+0x2e0>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d004      	beq.n	800bc7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bc86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	6812      	ldr	r2, [r2, #0]
 800bc8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc90:	430b      	orrs	r3, r1
 800bc92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	f023 010f 	bic.w	r1, r3, #15
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a91      	ldr	r2, [pc, #580]	; (800bef4 <UART_SetConfig+0x2e4>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d125      	bne.n	800bd00 <UART_SetConfig+0xf0>
 800bcb4:	4b90      	ldr	r3, [pc, #576]	; (800bef8 <UART_SetConfig+0x2e8>)
 800bcb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcba:	f003 0303 	and.w	r3, r3, #3
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d81a      	bhi.n	800bcf8 <UART_SetConfig+0xe8>
 800bcc2:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <UART_SetConfig+0xb8>)
 800bcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc8:	0800bcd9 	.word	0x0800bcd9
 800bccc:	0800bce9 	.word	0x0800bce9
 800bcd0:	0800bce1 	.word	0x0800bce1
 800bcd4:	0800bcf1 	.word	0x0800bcf1
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcde:	e0d6      	b.n	800be8e <UART_SetConfig+0x27e>
 800bce0:	2302      	movs	r3, #2
 800bce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bce6:	e0d2      	b.n	800be8e <UART_SetConfig+0x27e>
 800bce8:	2304      	movs	r3, #4
 800bcea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcee:	e0ce      	b.n	800be8e <UART_SetConfig+0x27e>
 800bcf0:	2308      	movs	r3, #8
 800bcf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcf6:	e0ca      	b.n	800be8e <UART_SetConfig+0x27e>
 800bcf8:	2310      	movs	r3, #16
 800bcfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcfe:	e0c6      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a7d      	ldr	r2, [pc, #500]	; (800befc <UART_SetConfig+0x2ec>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d138      	bne.n	800bd7c <UART_SetConfig+0x16c>
 800bd0a:	4b7b      	ldr	r3, [pc, #492]	; (800bef8 <UART_SetConfig+0x2e8>)
 800bd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd10:	f003 030c 	and.w	r3, r3, #12
 800bd14:	2b0c      	cmp	r3, #12
 800bd16:	d82d      	bhi.n	800bd74 <UART_SetConfig+0x164>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <UART_SetConfig+0x110>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd55 	.word	0x0800bd55
 800bd24:	0800bd75 	.word	0x0800bd75
 800bd28:	0800bd75 	.word	0x0800bd75
 800bd2c:	0800bd75 	.word	0x0800bd75
 800bd30:	0800bd65 	.word	0x0800bd65
 800bd34:	0800bd75 	.word	0x0800bd75
 800bd38:	0800bd75 	.word	0x0800bd75
 800bd3c:	0800bd75 	.word	0x0800bd75
 800bd40:	0800bd5d 	.word	0x0800bd5d
 800bd44:	0800bd75 	.word	0x0800bd75
 800bd48:	0800bd75 	.word	0x0800bd75
 800bd4c:	0800bd75 	.word	0x0800bd75
 800bd50:	0800bd6d 	.word	0x0800bd6d
 800bd54:	2300      	movs	r3, #0
 800bd56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd5a:	e098      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd62:	e094      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd64:	2304      	movs	r3, #4
 800bd66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd6a:	e090      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd6c:	2308      	movs	r3, #8
 800bd6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd72:	e08c      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd74:	2310      	movs	r3, #16
 800bd76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd7a:	e088      	b.n	800be8e <UART_SetConfig+0x27e>
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a5f      	ldr	r2, [pc, #380]	; (800bf00 <UART_SetConfig+0x2f0>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d125      	bne.n	800bdd2 <UART_SetConfig+0x1c2>
 800bd86:	4b5c      	ldr	r3, [pc, #368]	; (800bef8 <UART_SetConfig+0x2e8>)
 800bd88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd90:	2b30      	cmp	r3, #48	; 0x30
 800bd92:	d016      	beq.n	800bdc2 <UART_SetConfig+0x1b2>
 800bd94:	2b30      	cmp	r3, #48	; 0x30
 800bd96:	d818      	bhi.n	800bdca <UART_SetConfig+0x1ba>
 800bd98:	2b20      	cmp	r3, #32
 800bd9a:	d00a      	beq.n	800bdb2 <UART_SetConfig+0x1a2>
 800bd9c:	2b20      	cmp	r3, #32
 800bd9e:	d814      	bhi.n	800bdca <UART_SetConfig+0x1ba>
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <UART_SetConfig+0x19a>
 800bda4:	2b10      	cmp	r3, #16
 800bda6:	d008      	beq.n	800bdba <UART_SetConfig+0x1aa>
 800bda8:	e00f      	b.n	800bdca <UART_SetConfig+0x1ba>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdb0:	e06d      	b.n	800be8e <UART_SetConfig+0x27e>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdb8:	e069      	b.n	800be8e <UART_SetConfig+0x27e>
 800bdba:	2304      	movs	r3, #4
 800bdbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdc0:	e065      	b.n	800be8e <UART_SetConfig+0x27e>
 800bdc2:	2308      	movs	r3, #8
 800bdc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdc8:	e061      	b.n	800be8e <UART_SetConfig+0x27e>
 800bdca:	2310      	movs	r3, #16
 800bdcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdd0:	e05d      	b.n	800be8e <UART_SetConfig+0x27e>
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a4b      	ldr	r2, [pc, #300]	; (800bf04 <UART_SetConfig+0x2f4>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d125      	bne.n	800be28 <UART_SetConfig+0x218>
 800bddc:	4b46      	ldr	r3, [pc, #280]	; (800bef8 <UART_SetConfig+0x2e8>)
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bde6:	2bc0      	cmp	r3, #192	; 0xc0
 800bde8:	d016      	beq.n	800be18 <UART_SetConfig+0x208>
 800bdea:	2bc0      	cmp	r3, #192	; 0xc0
 800bdec:	d818      	bhi.n	800be20 <UART_SetConfig+0x210>
 800bdee:	2b80      	cmp	r3, #128	; 0x80
 800bdf0:	d00a      	beq.n	800be08 <UART_SetConfig+0x1f8>
 800bdf2:	2b80      	cmp	r3, #128	; 0x80
 800bdf4:	d814      	bhi.n	800be20 <UART_SetConfig+0x210>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <UART_SetConfig+0x1f0>
 800bdfa:	2b40      	cmp	r3, #64	; 0x40
 800bdfc:	d008      	beq.n	800be10 <UART_SetConfig+0x200>
 800bdfe:	e00f      	b.n	800be20 <UART_SetConfig+0x210>
 800be00:	2300      	movs	r3, #0
 800be02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be06:	e042      	b.n	800be8e <UART_SetConfig+0x27e>
 800be08:	2302      	movs	r3, #2
 800be0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be0e:	e03e      	b.n	800be8e <UART_SetConfig+0x27e>
 800be10:	2304      	movs	r3, #4
 800be12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be16:	e03a      	b.n	800be8e <UART_SetConfig+0x27e>
 800be18:	2308      	movs	r3, #8
 800be1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be1e:	e036      	b.n	800be8e <UART_SetConfig+0x27e>
 800be20:	2310      	movs	r3, #16
 800be22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be26:	e032      	b.n	800be8e <UART_SetConfig+0x27e>
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a30      	ldr	r2, [pc, #192]	; (800bef0 <UART_SetConfig+0x2e0>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d12a      	bne.n	800be88 <UART_SetConfig+0x278>
 800be32:	4b31      	ldr	r3, [pc, #196]	; (800bef8 <UART_SetConfig+0x2e8>)
 800be34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be40:	d01a      	beq.n	800be78 <UART_SetConfig+0x268>
 800be42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be46:	d81b      	bhi.n	800be80 <UART_SetConfig+0x270>
 800be48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be4c:	d00c      	beq.n	800be68 <UART_SetConfig+0x258>
 800be4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be52:	d815      	bhi.n	800be80 <UART_SetConfig+0x270>
 800be54:	2b00      	cmp	r3, #0
 800be56:	d003      	beq.n	800be60 <UART_SetConfig+0x250>
 800be58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be5c:	d008      	beq.n	800be70 <UART_SetConfig+0x260>
 800be5e:	e00f      	b.n	800be80 <UART_SetConfig+0x270>
 800be60:	2300      	movs	r3, #0
 800be62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be66:	e012      	b.n	800be8e <UART_SetConfig+0x27e>
 800be68:	2302      	movs	r3, #2
 800be6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be6e:	e00e      	b.n	800be8e <UART_SetConfig+0x27e>
 800be70:	2304      	movs	r3, #4
 800be72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be76:	e00a      	b.n	800be8e <UART_SetConfig+0x27e>
 800be78:	2308      	movs	r3, #8
 800be7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be7e:	e006      	b.n	800be8e <UART_SetConfig+0x27e>
 800be80:	2310      	movs	r3, #16
 800be82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be86:	e002      	b.n	800be8e <UART_SetConfig+0x27e>
 800be88:	2310      	movs	r3, #16
 800be8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a17      	ldr	r2, [pc, #92]	; (800bef0 <UART_SetConfig+0x2e0>)
 800be94:	4293      	cmp	r3, r2
 800be96:	f040 80a8 	bne.w	800bfea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	d834      	bhi.n	800bf0c <UART_SetConfig+0x2fc>
 800bea2:	a201      	add	r2, pc, #4	; (adr r2, 800bea8 <UART_SetConfig+0x298>)
 800bea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800bf0d 	.word	0x0800bf0d
 800beb0:	0800bed5 	.word	0x0800bed5
 800beb4:	0800bf0d 	.word	0x0800bf0d
 800beb8:	0800bedb 	.word	0x0800bedb
 800bebc:	0800bf0d 	.word	0x0800bf0d
 800bec0:	0800bf0d 	.word	0x0800bf0d
 800bec4:	0800bf0d 	.word	0x0800bf0d
 800bec8:	0800bee3 	.word	0x0800bee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800becc:	f7fc fca0 	bl	8008810 <HAL_RCC_GetPCLK1Freq>
 800bed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bed2:	e021      	b.n	800bf18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bed4:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <UART_SetConfig+0x2f8>)
 800bed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bed8:	e01e      	b.n	800bf18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beda:	f7fc fc2d 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 800bede:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bee0:	e01a      	b.n	800bf18 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bee8:	e016      	b.n	800bf18 <UART_SetConfig+0x308>
 800beea:	bf00      	nop
 800beec:	cfff69f3 	.word	0xcfff69f3
 800bef0:	40008000 	.word	0x40008000
 800bef4:	40013800 	.word	0x40013800
 800bef8:	40021000 	.word	0x40021000
 800befc:	40004400 	.word	0x40004400
 800bf00:	40004800 	.word	0x40004800
 800bf04:	40004c00 	.word	0x40004c00
 800bf08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 812a 	beq.w	800c174 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf24:	4a9e      	ldr	r2, [pc, #632]	; (800c1a0 <UART_SetConfig+0x590>)
 800bf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf32:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	69ba      	ldr	r2, [r7, #24]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d305      	bcc.n	800bf50 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d903      	bls.n	800bf58 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf56:	e10d      	b.n	800c174 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	60bb      	str	r3, [r7, #8]
 800bf5e:	60fa      	str	r2, [r7, #12]
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	4a8e      	ldr	r2, [pc, #568]	; (800c1a0 <UART_SetConfig+0x590>)
 800bf66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	607a      	str	r2, [r7, #4]
 800bf72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf7a:	f7f4 f9a9 	bl	80002d0 <__aeabi_uldivmod>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4610      	mov	r0, r2
 800bf84:	4619      	mov	r1, r3
 800bf86:	f04f 0200 	mov.w	r2, #0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	020b      	lsls	r3, r1, #8
 800bf90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf94:	0202      	lsls	r2, r0, #8
 800bf96:	6979      	ldr	r1, [r7, #20]
 800bf98:	6849      	ldr	r1, [r1, #4]
 800bf9a:	0849      	lsrs	r1, r1, #1
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	eb12 0804 	adds.w	r8, r2, r4
 800bfa6:	eb43 0905 	adc.w	r9, r3, r5
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	469a      	mov	sl, r3
 800bfb2:	4693      	mov	fp, r2
 800bfb4:	4652      	mov	r2, sl
 800bfb6:	465b      	mov	r3, fp
 800bfb8:	4640      	mov	r0, r8
 800bfba:	4649      	mov	r1, r9
 800bfbc:	f7f4 f988 	bl	80002d0 <__aeabi_uldivmod>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfc8:	6a3b      	ldr	r3, [r7, #32]
 800bfca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfce:	d308      	bcc.n	800bfe2 <UART_SetConfig+0x3d2>
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd6:	d204      	bcs.n	800bfe2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6a3a      	ldr	r2, [r7, #32]
 800bfde:	60da      	str	r2, [r3, #12]
 800bfe0:	e0c8      	b.n	800c174 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bfe8:	e0c4      	b.n	800c174 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bff2:	d167      	bne.n	800c0c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800bff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bff8:	2b08      	cmp	r3, #8
 800bffa:	d828      	bhi.n	800c04e <UART_SetConfig+0x43e>
 800bffc:	a201      	add	r2, pc, #4	; (adr r2, 800c004 <UART_SetConfig+0x3f4>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c029 	.word	0x0800c029
 800c008:	0800c031 	.word	0x0800c031
 800c00c:	0800c039 	.word	0x0800c039
 800c010:	0800c04f 	.word	0x0800c04f
 800c014:	0800c03f 	.word	0x0800c03f
 800c018:	0800c04f 	.word	0x0800c04f
 800c01c:	0800c04f 	.word	0x0800c04f
 800c020:	0800c04f 	.word	0x0800c04f
 800c024:	0800c047 	.word	0x0800c047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c028:	f7fc fbf2 	bl	8008810 <HAL_RCC_GetPCLK1Freq>
 800c02c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c02e:	e014      	b.n	800c05a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c030:	f7fc fc04 	bl	800883c <HAL_RCC_GetPCLK2Freq>
 800c034:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c036:	e010      	b.n	800c05a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c038:	4b5a      	ldr	r3, [pc, #360]	; (800c1a4 <UART_SetConfig+0x594>)
 800c03a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c03c:	e00d      	b.n	800c05a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c03e:	f7fc fb7b 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 800c042:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c044:	e009      	b.n	800c05a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c04c:	e005      	b.n	800c05a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 8089 	beq.w	800c174 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	4a4e      	ldr	r2, [pc, #312]	; (800c1a0 <UART_SetConfig+0x590>)
 800c068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c06c:	461a      	mov	r2, r3
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	fbb3 f3f2 	udiv	r3, r3, r2
 800c074:	005a      	lsls	r2, r3, #1
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	085b      	lsrs	r3, r3, #1
 800c07c:	441a      	add	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	fbb2 f3f3 	udiv	r3, r2, r3
 800c086:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	2b0f      	cmp	r3, #15
 800c08c:	d916      	bls.n	800c0bc <UART_SetConfig+0x4ac>
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d212      	bcs.n	800c0bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f023 030f 	bic.w	r3, r3, #15
 800c09e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	085b      	lsrs	r3, r3, #1
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	8bfb      	ldrh	r3, [r7, #30]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	8bfa      	ldrh	r2, [r7, #30]
 800c0b8:	60da      	str	r2, [r3, #12]
 800c0ba:	e05b      	b.n	800c174 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c0c2:	e057      	b.n	800c174 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0c8:	2b08      	cmp	r3, #8
 800c0ca:	d828      	bhi.n	800c11e <UART_SetConfig+0x50e>
 800c0cc:	a201      	add	r2, pc, #4	; (adr r2, 800c0d4 <UART_SetConfig+0x4c4>)
 800c0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d2:	bf00      	nop
 800c0d4:	0800c0f9 	.word	0x0800c0f9
 800c0d8:	0800c101 	.word	0x0800c101
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	0800c11f 	.word	0x0800c11f
 800c0e4:	0800c10f 	.word	0x0800c10f
 800c0e8:	0800c11f 	.word	0x0800c11f
 800c0ec:	0800c11f 	.word	0x0800c11f
 800c0f0:	0800c11f 	.word	0x0800c11f
 800c0f4:	0800c117 	.word	0x0800c117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0f8:	f7fc fb8a 	bl	8008810 <HAL_RCC_GetPCLK1Freq>
 800c0fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c0fe:	e014      	b.n	800c12a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c100:	f7fc fb9c 	bl	800883c <HAL_RCC_GetPCLK2Freq>
 800c104:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c106:	e010      	b.n	800c12a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c108:	4b26      	ldr	r3, [pc, #152]	; (800c1a4 <UART_SetConfig+0x594>)
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c10c:	e00d      	b.n	800c12a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c10e:	f7fc fb13 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 800c112:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c114:	e009      	b.n	800c12a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c11a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c11c:	e005      	b.n	800c12a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c128:	bf00      	nop
    }

    if (pclk != 0U)
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d021      	beq.n	800c174 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	4a1a      	ldr	r2, [pc, #104]	; (800c1a0 <UART_SetConfig+0x590>)
 800c136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c13a:	461a      	mov	r2, r3
 800c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	085b      	lsrs	r3, r3, #1
 800c148:	441a      	add	r2, r3
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c152:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c154:	6a3b      	ldr	r3, [r7, #32]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	d909      	bls.n	800c16e <UART_SetConfig+0x55e>
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c160:	d205      	bcs.n	800c16e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	b29a      	uxth	r2, r3
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60da      	str	r2, [r3, #12]
 800c16c:	e002      	b.n	800c174 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2201      	movs	r2, #1
 800c178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2201      	movs	r2, #1
 800c180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2200      	movs	r2, #0
 800c188:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2200      	movs	r2, #0
 800c18e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c190:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c194:	4618      	mov	r0, r3
 800c196:	3730      	adds	r7, #48	; 0x30
 800c198:	46bd      	mov	sp, r7
 800c19a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c19e:	bf00      	nop
 800c1a0:	0800d47c 	.word	0x0800d47c
 800c1a4:	00f42400 	.word	0x00f42400

0800c1a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d6:	f003 0302 	and.w	r3, r3, #2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f8:	f003 0304 	and.w	r3, r3, #4
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00a      	beq.n	800c216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21a:	f003 0308 	and.w	r3, r3, #8
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00a      	beq.n	800c238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23c:	f003 0310 	and.w	r3, r3, #16
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c25e:	f003 0320 	and.w	r3, r3, #32
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00a      	beq.n	800c27c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	430a      	orrs	r2, r1
 800c27a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01a      	beq.n	800c2be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	430a      	orrs	r2, r1
 800c29c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a6:	d10a      	bne.n	800c2be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	430a      	orrs	r2, r1
 800c2bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00a      	beq.n	800c2e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	605a      	str	r2, [r3, #4]
  }
}
 800c2e0:	bf00      	nop
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2fc:	f7f7 fd88 	bl	8003e10 <HAL_GetTick>
 800c300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 0308 	and.w	r3, r3, #8
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	d10e      	bne.n	800c32e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f82f 	bl	800c382 <UART_WaitOnFlagUntilTimeout>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c32a:	2303      	movs	r3, #3
 800c32c:	e025      	b.n	800c37a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d10e      	bne.n	800c35a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c33c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f819 	bl	800c382 <UART_WaitOnFlagUntilTimeout>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e00f      	b.n	800c37a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2220      	movs	r2, #32
 800c35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2220      	movs	r2, #32
 800c366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b09c      	sub	sp, #112	; 0x70
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	603b      	str	r3, [r7, #0]
 800c38e:	4613      	mov	r3, r2
 800c390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c392:	e0a9      	b.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39a:	f000 80a5 	beq.w	800c4e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c39e:	f7f7 fd37 	bl	8003e10 <HAL_GetTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d302      	bcc.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c3ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d140      	bne.n	800c436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e6      	bne.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	f023 0301 	bic.w	r3, r3, #1
 800c3fc:	663b      	str	r3, [r7, #96]	; 0x60
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3308      	adds	r3, #8
 800c404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c406:	64ba      	str	r2, [r7, #72]	; 0x48
 800c408:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c40c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c40e:	e841 2300 	strex	r3, r2, [r1]
 800c412:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1e5      	bne.n	800c3e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2220      	movs	r2, #32
 800c41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2220      	movs	r2, #32
 800c426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e069      	b.n	800c50a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d051      	beq.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c44e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c452:	d149      	bne.n	800c4e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c45c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c466:	e853 3f00 	ldrex	r3, [r3]
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c472:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
 800c47e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1e6      	bne.n	800c45e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3308      	adds	r3, #8
 800c496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	e853 3f00 	ldrex	r3, [r3]
 800c49e:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	f023 0301 	bic.w	r3, r3, #1
 800c4a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4b0:	623a      	str	r2, [r7, #32]
 800c4b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b4:	69f9      	ldr	r1, [r7, #28]
 800c4b6:	6a3a      	ldr	r2, [r7, #32]
 800c4b8:	e841 2300 	strex	r3, r2, [r1]
 800c4bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1e5      	bne.n	800c490 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2220      	movs	r2, #32
 800c4d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2220      	movs	r2, #32
 800c4d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e010      	b.n	800c50a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69da      	ldr	r2, [r3, #28]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2301      	moveq	r3, #1
 800c4fa:	2300      	movne	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	461a      	mov	r2, r3
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	429a      	cmp	r2, r3
 800c504:	f43f af46 	beq.w	800c394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3770      	adds	r7, #112	; 0x70
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c512:	b480      	push	{r7}
 800c514:	b08f      	sub	sp, #60	; 0x3c
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	61fb      	str	r3, [r7, #28]
   return(result);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c52e:	637b      	str	r3, [r7, #52]	; 0x34
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c53a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c53e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e6      	bne.n	800c51a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3308      	adds	r3, #8
 800c552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c562:	633b      	str	r3, [r7, #48]	; 0x30
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	3308      	adds	r3, #8
 800c56a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c56c:	61ba      	str	r2, [r7, #24]
 800c56e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6979      	ldr	r1, [r7, #20]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	613b      	str	r3, [r7, #16]
   return(result);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e5      	bne.n	800c54c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2220      	movs	r2, #32
 800c584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c588:	bf00      	nop
 800c58a:	373c      	adds	r7, #60	; 0x3c
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b095      	sub	sp, #84	; 0x54
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c5bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5c2:	e841 2300 	strex	r3, r2, [r1]
 800c5c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1e6      	bne.n	800c59c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	e853 3f00 	ldrex	r3, [r3]
 800c5dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5e4:	f023 0301 	bic.w	r3, r3, #1
 800c5e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5fa:	e841 2300 	strex	r3, r2, [r1]
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1e3      	bne.n	800c5ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d118      	bne.n	800c640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f023 0310 	bic.w	r3, r3, #16
 800c622:	647b      	str	r3, [r7, #68]	; 0x44
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c62c:	61bb      	str	r3, [r7, #24]
 800c62e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6979      	ldr	r1, [r7, #20]
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	613b      	str	r3, [r7, #16]
   return(result);
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e6      	bne.n	800c60e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2220      	movs	r2, #32
 800c644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c654:	bf00      	nop
 800c656:	3754      	adds	r7, #84	; 0x54
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b090      	sub	sp, #64	; 0x40
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0320 	and.w	r3, r3, #32
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d137      	bne.n	800c6ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	2200      	movs	r2, #0
 800c680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3308      	adds	r3, #8
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	e853 3f00 	ldrex	r3, [r3]
 800c692:	623b      	str	r3, [r7, #32]
   return(result);
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c69a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6a4:	633a      	str	r2, [r7, #48]	; 0x30
 800c6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ac:	e841 2300 	strex	r3, r2, [r1]
 800c6b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e5      	bne.n	800c684 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	e853 3f00 	ldrex	r3, [r3]
 800c6c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6da:	69b9      	ldr	r1, [r7, #24]
 800c6dc:	69fa      	ldr	r2, [r7, #28]
 800c6de:	e841 2300 	strex	r3, r2, [r1]
 800c6e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1e6      	bne.n	800c6b8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c6ea:	e002      	b.n	800c6f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c6ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c6ee:	f7ff fa65 	bl	800bbbc <HAL_UART_TxCpltCallback>
}
 800c6f2:	bf00      	nop
 800c6f4:	3740      	adds	r7, #64	; 0x40
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c706:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f7ff fa61 	bl	800bbd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b086      	sub	sp, #24
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c732:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c73e:	2b80      	cmp	r3, #128	; 0x80
 800c740:	d109      	bne.n	800c756 <UART_DMAError+0x40>
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2b21      	cmp	r3, #33	; 0x21
 800c746:	d106      	bne.n	800c756 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c750:	6978      	ldr	r0, [r7, #20]
 800c752:	f7ff fede 	bl	800c512 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c760:	2b40      	cmp	r3, #64	; 0x40
 800c762:	d109      	bne.n	800c778 <UART_DMAError+0x62>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b22      	cmp	r3, #34	; 0x22
 800c768:	d106      	bne.n	800c778 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c772:	6978      	ldr	r0, [r7, #20]
 800c774:	f7ff ff0e 	bl	800c594 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c77e:	f043 0210 	orr.w	r2, r3, #16
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c788:	6978      	ldr	r0, [r7, #20]
 800c78a:	f7ff fa2b 	bl	800bbe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c78e:	bf00      	nop
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f7ff fa15 	bl	800bbe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ba:	bf00      	nop
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b088      	sub	sp, #32
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	61bb      	str	r3, [r7, #24]
 800c7ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	6979      	ldr	r1, [r7, #20]
 800c7ee:	69ba      	ldr	r2, [r7, #24]
 800c7f0:	e841 2300 	strex	r3, r2, [r1]
 800c7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2220      	movs	r2, #32
 800c800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff f9d6 	bl	800bbbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c810:	bf00      	nop
 800c812:	3720      	adds	r7, #32
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_UARTEx_DisableFifoMode+0x16>
 800c866:	2302      	movs	r3, #2
 800c868:	e027      	b.n	800c8ba <HAL_UARTEx_DisableFifoMode+0x66>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2224      	movs	r2, #36	; 0x24
 800c876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f022 0201 	bic.w	r2, r2, #1
 800c890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2220      	movs	r2, #32
 800c8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d101      	bne.n	800c8de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e02d      	b.n	800c93a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2224      	movs	r2, #36	; 0x24
 800c8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f022 0201 	bic.w	r2, r2, #1
 800c904:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f850 	bl	800c9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2220      	movs	r2, #32
 800c92c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c956:	2302      	movs	r3, #2
 800c958:	e02d      	b.n	800c9b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2224      	movs	r2, #36	; 0x24
 800c966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 0201 	bic.w	r2, r2, #1
 800c980:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	430a      	orrs	r2, r1
 800c994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f812 	bl	800c9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d108      	bne.n	800c9e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9e0:	e031      	b.n	800ca46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	0e5b      	lsrs	r3, r3, #25
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	f003 0307 	and.w	r3, r3, #7
 800c9f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	0f5b      	lsrs	r3, r3, #29
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 0307 	and.w	r3, r3, #7
 800ca08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca0a:	7bbb      	ldrb	r3, [r7, #14]
 800ca0c:	7b3a      	ldrb	r2, [r7, #12]
 800ca0e:	4911      	ldr	r1, [pc, #68]	; (800ca54 <UARTEx_SetNbDataToProcess+0x94>)
 800ca10:	5c8a      	ldrb	r2, [r1, r2]
 800ca12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca16:	7b3a      	ldrb	r2, [r7, #12]
 800ca18:	490f      	ldr	r1, [pc, #60]	; (800ca58 <UARTEx_SetNbDataToProcess+0x98>)
 800ca1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca28:	7bfb      	ldrb	r3, [r7, #15]
 800ca2a:	7b7a      	ldrb	r2, [r7, #13]
 800ca2c:	4909      	ldr	r1, [pc, #36]	; (800ca54 <UARTEx_SetNbDataToProcess+0x94>)
 800ca2e:	5c8a      	ldrb	r2, [r1, r2]
 800ca30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca34:	7b7a      	ldrb	r2, [r7, #13]
 800ca36:	4908      	ldr	r1, [pc, #32]	; (800ca58 <UARTEx_SetNbDataToProcess+0x98>)
 800ca38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	0800d494 	.word	0x0800d494
 800ca58:	0800d49c 	.word	0x0800d49c

0800ca5c <_vsniprintf_r>:
 800ca5c:	b530      	push	{r4, r5, lr}
 800ca5e:	4614      	mov	r4, r2
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	b09b      	sub	sp, #108	; 0x6c
 800ca64:	4605      	mov	r5, r0
 800ca66:	461a      	mov	r2, r3
 800ca68:	da05      	bge.n	800ca76 <_vsniprintf_r+0x1a>
 800ca6a:	238b      	movs	r3, #139	; 0x8b
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca72:	b01b      	add	sp, #108	; 0x6c
 800ca74:	bd30      	pop	{r4, r5, pc}
 800ca76:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ca7e:	bf14      	ite	ne
 800ca80:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca84:	4623      	moveq	r3, r4
 800ca86:	9302      	str	r3, [sp, #8]
 800ca88:	9305      	str	r3, [sp, #20]
 800ca8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca8e:	9100      	str	r1, [sp, #0]
 800ca90:	9104      	str	r1, [sp, #16]
 800ca92:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ca96:	4669      	mov	r1, sp
 800ca98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ca9a:	f000 f9ad 	bl	800cdf8 <_svfiprintf_r>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	bfbc      	itt	lt
 800caa2:	238b      	movlt	r3, #139	; 0x8b
 800caa4:	602b      	strlt	r3, [r5, #0]
 800caa6:	2c00      	cmp	r4, #0
 800caa8:	d0e3      	beq.n	800ca72 <_vsniprintf_r+0x16>
 800caaa:	9b00      	ldr	r3, [sp, #0]
 800caac:	2200      	movs	r2, #0
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	e7df      	b.n	800ca72 <_vsniprintf_r+0x16>
	...

0800cab4 <vsniprintf>:
 800cab4:	b507      	push	{r0, r1, r2, lr}
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	460a      	mov	r2, r1
 800cabc:	4601      	mov	r1, r0
 800cabe:	4803      	ldr	r0, [pc, #12]	; (800cacc <vsniprintf+0x18>)
 800cac0:	6800      	ldr	r0, [r0, #0]
 800cac2:	f7ff ffcb 	bl	800ca5c <_vsniprintf_r>
 800cac6:	b003      	add	sp, #12
 800cac8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cacc:	20000198 	.word	0x20000198

0800cad0 <memset>:
 800cad0:	4402      	add	r2, r0
 800cad2:	4603      	mov	r3, r0
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d100      	bne.n	800cada <memset+0xa>
 800cad8:	4770      	bx	lr
 800cada:	f803 1b01 	strb.w	r1, [r3], #1
 800cade:	e7f9      	b.n	800cad4 <memset+0x4>

0800cae0 <__errno>:
 800cae0:	4b01      	ldr	r3, [pc, #4]	; (800cae8 <__errno+0x8>)
 800cae2:	6818      	ldr	r0, [r3, #0]
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	20000198 	.word	0x20000198

0800caec <__libc_init_array>:
 800caec:	b570      	push	{r4, r5, r6, lr}
 800caee:	4d0d      	ldr	r5, [pc, #52]	; (800cb24 <__libc_init_array+0x38>)
 800caf0:	4c0d      	ldr	r4, [pc, #52]	; (800cb28 <__libc_init_array+0x3c>)
 800caf2:	1b64      	subs	r4, r4, r5
 800caf4:	10a4      	asrs	r4, r4, #2
 800caf6:	2600      	movs	r6, #0
 800caf8:	42a6      	cmp	r6, r4
 800cafa:	d109      	bne.n	800cb10 <__libc_init_array+0x24>
 800cafc:	4d0b      	ldr	r5, [pc, #44]	; (800cb2c <__libc_init_array+0x40>)
 800cafe:	4c0c      	ldr	r4, [pc, #48]	; (800cb30 <__libc_init_array+0x44>)
 800cb00:	f000 fc6a 	bl	800d3d8 <_init>
 800cb04:	1b64      	subs	r4, r4, r5
 800cb06:	10a4      	asrs	r4, r4, #2
 800cb08:	2600      	movs	r6, #0
 800cb0a:	42a6      	cmp	r6, r4
 800cb0c:	d105      	bne.n	800cb1a <__libc_init_array+0x2e>
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb14:	4798      	blx	r3
 800cb16:	3601      	adds	r6, #1
 800cb18:	e7ee      	b.n	800caf8 <__libc_init_array+0xc>
 800cb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb1e:	4798      	blx	r3
 800cb20:	3601      	adds	r6, #1
 800cb22:	e7f2      	b.n	800cb0a <__libc_init_array+0x1e>
 800cb24:	0800d4e0 	.word	0x0800d4e0
 800cb28:	0800d4e0 	.word	0x0800d4e0
 800cb2c:	0800d4e0 	.word	0x0800d4e0
 800cb30:	0800d4e4 	.word	0x0800d4e4

0800cb34 <__retarget_lock_acquire_recursive>:
 800cb34:	4770      	bx	lr

0800cb36 <__retarget_lock_release_recursive>:
 800cb36:	4770      	bx	lr

0800cb38 <memcpy>:
 800cb38:	440a      	add	r2, r1
 800cb3a:	4291      	cmp	r1, r2
 800cb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb40:	d100      	bne.n	800cb44 <memcpy+0xc>
 800cb42:	4770      	bx	lr
 800cb44:	b510      	push	{r4, lr}
 800cb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb4e:	4291      	cmp	r1, r2
 800cb50:	d1f9      	bne.n	800cb46 <memcpy+0xe>
 800cb52:	bd10      	pop	{r4, pc}

0800cb54 <_free_r>:
 800cb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb56:	2900      	cmp	r1, #0
 800cb58:	d044      	beq.n	800cbe4 <_free_r+0x90>
 800cb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb5e:	9001      	str	r0, [sp, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f1a1 0404 	sub.w	r4, r1, #4
 800cb66:	bfb8      	it	lt
 800cb68:	18e4      	addlt	r4, r4, r3
 800cb6a:	f000 f8df 	bl	800cd2c <__malloc_lock>
 800cb6e:	4a1e      	ldr	r2, [pc, #120]	; (800cbe8 <_free_r+0x94>)
 800cb70:	9801      	ldr	r0, [sp, #4]
 800cb72:	6813      	ldr	r3, [r2, #0]
 800cb74:	b933      	cbnz	r3, 800cb84 <_free_r+0x30>
 800cb76:	6063      	str	r3, [r4, #4]
 800cb78:	6014      	str	r4, [r2, #0]
 800cb7a:	b003      	add	sp, #12
 800cb7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb80:	f000 b8da 	b.w	800cd38 <__malloc_unlock>
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	d908      	bls.n	800cb9a <_free_r+0x46>
 800cb88:	6825      	ldr	r5, [r4, #0]
 800cb8a:	1961      	adds	r1, r4, r5
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf01      	itttt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	1949      	addeq	r1, r1, r5
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	e7ed      	b.n	800cb76 <_free_r+0x22>
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	b10b      	cbz	r3, 800cba4 <_free_r+0x50>
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	d9fa      	bls.n	800cb9a <_free_r+0x46>
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	1855      	adds	r5, r2, r1
 800cba8:	42a5      	cmp	r5, r4
 800cbaa:	d10b      	bne.n	800cbc4 <_free_r+0x70>
 800cbac:	6824      	ldr	r4, [r4, #0]
 800cbae:	4421      	add	r1, r4
 800cbb0:	1854      	adds	r4, r2, r1
 800cbb2:	42a3      	cmp	r3, r4
 800cbb4:	6011      	str	r1, [r2, #0]
 800cbb6:	d1e0      	bne.n	800cb7a <_free_r+0x26>
 800cbb8:	681c      	ldr	r4, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	6053      	str	r3, [r2, #4]
 800cbbe:	440c      	add	r4, r1
 800cbc0:	6014      	str	r4, [r2, #0]
 800cbc2:	e7da      	b.n	800cb7a <_free_r+0x26>
 800cbc4:	d902      	bls.n	800cbcc <_free_r+0x78>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	6003      	str	r3, [r0, #0]
 800cbca:	e7d6      	b.n	800cb7a <_free_r+0x26>
 800cbcc:	6825      	ldr	r5, [r4, #0]
 800cbce:	1961      	adds	r1, r4, r5
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	bf04      	itt	eq
 800cbd4:	6819      	ldreq	r1, [r3, #0]
 800cbd6:	685b      	ldreq	r3, [r3, #4]
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	bf04      	itt	eq
 800cbdc:	1949      	addeq	r1, r1, r5
 800cbde:	6021      	streq	r1, [r4, #0]
 800cbe0:	6054      	str	r4, [r2, #4]
 800cbe2:	e7ca      	b.n	800cb7a <_free_r+0x26>
 800cbe4:	b003      	add	sp, #12
 800cbe6:	bd30      	pop	{r4, r5, pc}
 800cbe8:	20000d98 	.word	0x20000d98

0800cbec <sbrk_aligned>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	4e0e      	ldr	r6, [pc, #56]	; (800cc28 <sbrk_aligned+0x3c>)
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	6831      	ldr	r1, [r6, #0]
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	b911      	cbnz	r1, 800cbfe <sbrk_aligned+0x12>
 800cbf8:	f000 fba6 	bl	800d348 <_sbrk_r>
 800cbfc:	6030      	str	r0, [r6, #0]
 800cbfe:	4621      	mov	r1, r4
 800cc00:	4628      	mov	r0, r5
 800cc02:	f000 fba1 	bl	800d348 <_sbrk_r>
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	d00a      	beq.n	800cc20 <sbrk_aligned+0x34>
 800cc0a:	1cc4      	adds	r4, r0, #3
 800cc0c:	f024 0403 	bic.w	r4, r4, #3
 800cc10:	42a0      	cmp	r0, r4
 800cc12:	d007      	beq.n	800cc24 <sbrk_aligned+0x38>
 800cc14:	1a21      	subs	r1, r4, r0
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 fb96 	bl	800d348 <_sbrk_r>
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	d101      	bne.n	800cc24 <sbrk_aligned+0x38>
 800cc20:	f04f 34ff 	mov.w	r4, #4294967295
 800cc24:	4620      	mov	r0, r4
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	20000d9c 	.word	0x20000d9c

0800cc2c <_malloc_r>:
 800cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc30:	1ccd      	adds	r5, r1, #3
 800cc32:	f025 0503 	bic.w	r5, r5, #3
 800cc36:	3508      	adds	r5, #8
 800cc38:	2d0c      	cmp	r5, #12
 800cc3a:	bf38      	it	cc
 800cc3c:	250c      	movcc	r5, #12
 800cc3e:	2d00      	cmp	r5, #0
 800cc40:	4607      	mov	r7, r0
 800cc42:	db01      	blt.n	800cc48 <_malloc_r+0x1c>
 800cc44:	42a9      	cmp	r1, r5
 800cc46:	d905      	bls.n	800cc54 <_malloc_r+0x28>
 800cc48:	230c      	movs	r3, #12
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	2600      	movs	r6, #0
 800cc4e:	4630      	mov	r0, r6
 800cc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd28 <_malloc_r+0xfc>
 800cc58:	f000 f868 	bl	800cd2c <__malloc_lock>
 800cc5c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc60:	461c      	mov	r4, r3
 800cc62:	bb5c      	cbnz	r4, 800ccbc <_malloc_r+0x90>
 800cc64:	4629      	mov	r1, r5
 800cc66:	4638      	mov	r0, r7
 800cc68:	f7ff ffc0 	bl	800cbec <sbrk_aligned>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	4604      	mov	r4, r0
 800cc70:	d155      	bne.n	800cd1e <_malloc_r+0xf2>
 800cc72:	f8d8 4000 	ldr.w	r4, [r8]
 800cc76:	4626      	mov	r6, r4
 800cc78:	2e00      	cmp	r6, #0
 800cc7a:	d145      	bne.n	800cd08 <_malloc_r+0xdc>
 800cc7c:	2c00      	cmp	r4, #0
 800cc7e:	d048      	beq.n	800cd12 <_malloc_r+0xe6>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	4631      	mov	r1, r6
 800cc84:	4638      	mov	r0, r7
 800cc86:	eb04 0903 	add.w	r9, r4, r3
 800cc8a:	f000 fb5d 	bl	800d348 <_sbrk_r>
 800cc8e:	4581      	cmp	r9, r0
 800cc90:	d13f      	bne.n	800cd12 <_malloc_r+0xe6>
 800cc92:	6821      	ldr	r1, [r4, #0]
 800cc94:	1a6d      	subs	r5, r5, r1
 800cc96:	4629      	mov	r1, r5
 800cc98:	4638      	mov	r0, r7
 800cc9a:	f7ff ffa7 	bl	800cbec <sbrk_aligned>
 800cc9e:	3001      	adds	r0, #1
 800cca0:	d037      	beq.n	800cd12 <_malloc_r+0xe6>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	442b      	add	r3, r5
 800cca6:	6023      	str	r3, [r4, #0]
 800cca8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d038      	beq.n	800cd22 <_malloc_r+0xf6>
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	42a2      	cmp	r2, r4
 800ccb4:	d12b      	bne.n	800cd0e <_malloc_r+0xe2>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	605a      	str	r2, [r3, #4]
 800ccba:	e00f      	b.n	800ccdc <_malloc_r+0xb0>
 800ccbc:	6822      	ldr	r2, [r4, #0]
 800ccbe:	1b52      	subs	r2, r2, r5
 800ccc0:	d41f      	bmi.n	800cd02 <_malloc_r+0xd6>
 800ccc2:	2a0b      	cmp	r2, #11
 800ccc4:	d917      	bls.n	800ccf6 <_malloc_r+0xca>
 800ccc6:	1961      	adds	r1, r4, r5
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	6025      	str	r5, [r4, #0]
 800cccc:	bf18      	it	ne
 800ccce:	6059      	strne	r1, [r3, #4]
 800ccd0:	6863      	ldr	r3, [r4, #4]
 800ccd2:	bf08      	it	eq
 800ccd4:	f8c8 1000 	streq.w	r1, [r8]
 800ccd8:	5162      	str	r2, [r4, r5]
 800ccda:	604b      	str	r3, [r1, #4]
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f104 060b 	add.w	r6, r4, #11
 800cce2:	f000 f829 	bl	800cd38 <__malloc_unlock>
 800cce6:	f026 0607 	bic.w	r6, r6, #7
 800ccea:	1d23      	adds	r3, r4, #4
 800ccec:	1af2      	subs	r2, r6, r3
 800ccee:	d0ae      	beq.n	800cc4e <_malloc_r+0x22>
 800ccf0:	1b9b      	subs	r3, r3, r6
 800ccf2:	50a3      	str	r3, [r4, r2]
 800ccf4:	e7ab      	b.n	800cc4e <_malloc_r+0x22>
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	6862      	ldr	r2, [r4, #4]
 800ccfa:	d1dd      	bne.n	800ccb8 <_malloc_r+0x8c>
 800ccfc:	f8c8 2000 	str.w	r2, [r8]
 800cd00:	e7ec      	b.n	800ccdc <_malloc_r+0xb0>
 800cd02:	4623      	mov	r3, r4
 800cd04:	6864      	ldr	r4, [r4, #4]
 800cd06:	e7ac      	b.n	800cc62 <_malloc_r+0x36>
 800cd08:	4634      	mov	r4, r6
 800cd0a:	6876      	ldr	r6, [r6, #4]
 800cd0c:	e7b4      	b.n	800cc78 <_malloc_r+0x4c>
 800cd0e:	4613      	mov	r3, r2
 800cd10:	e7cc      	b.n	800ccac <_malloc_r+0x80>
 800cd12:	230c      	movs	r3, #12
 800cd14:	603b      	str	r3, [r7, #0]
 800cd16:	4638      	mov	r0, r7
 800cd18:	f000 f80e 	bl	800cd38 <__malloc_unlock>
 800cd1c:	e797      	b.n	800cc4e <_malloc_r+0x22>
 800cd1e:	6025      	str	r5, [r4, #0]
 800cd20:	e7dc      	b.n	800ccdc <_malloc_r+0xb0>
 800cd22:	605b      	str	r3, [r3, #4]
 800cd24:	deff      	udf	#255	; 0xff
 800cd26:	bf00      	nop
 800cd28:	20000d98 	.word	0x20000d98

0800cd2c <__malloc_lock>:
 800cd2c:	4801      	ldr	r0, [pc, #4]	; (800cd34 <__malloc_lock+0x8>)
 800cd2e:	f7ff bf01 	b.w	800cb34 <__retarget_lock_acquire_recursive>
 800cd32:	bf00      	nop
 800cd34:	20000d94 	.word	0x20000d94

0800cd38 <__malloc_unlock>:
 800cd38:	4801      	ldr	r0, [pc, #4]	; (800cd40 <__malloc_unlock+0x8>)
 800cd3a:	f7ff befc 	b.w	800cb36 <__retarget_lock_release_recursive>
 800cd3e:	bf00      	nop
 800cd40:	20000d94 	.word	0x20000d94

0800cd44 <__ssputs_r>:
 800cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd48:	688e      	ldr	r6, [r1, #8]
 800cd4a:	461f      	mov	r7, r3
 800cd4c:	42be      	cmp	r6, r7
 800cd4e:	680b      	ldr	r3, [r1, #0]
 800cd50:	4682      	mov	sl, r0
 800cd52:	460c      	mov	r4, r1
 800cd54:	4690      	mov	r8, r2
 800cd56:	d82c      	bhi.n	800cdb2 <__ssputs_r+0x6e>
 800cd58:	898a      	ldrh	r2, [r1, #12]
 800cd5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd5e:	d026      	beq.n	800cdae <__ssputs_r+0x6a>
 800cd60:	6965      	ldr	r5, [r4, #20]
 800cd62:	6909      	ldr	r1, [r1, #16]
 800cd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd68:	eba3 0901 	sub.w	r9, r3, r1
 800cd6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd70:	1c7b      	adds	r3, r7, #1
 800cd72:	444b      	add	r3, r9
 800cd74:	106d      	asrs	r5, r5, #1
 800cd76:	429d      	cmp	r5, r3
 800cd78:	bf38      	it	cc
 800cd7a:	461d      	movcc	r5, r3
 800cd7c:	0553      	lsls	r3, r2, #21
 800cd7e:	d527      	bpl.n	800cdd0 <__ssputs_r+0x8c>
 800cd80:	4629      	mov	r1, r5
 800cd82:	f7ff ff53 	bl	800cc2c <_malloc_r>
 800cd86:	4606      	mov	r6, r0
 800cd88:	b360      	cbz	r0, 800cde4 <__ssputs_r+0xa0>
 800cd8a:	6921      	ldr	r1, [r4, #16]
 800cd8c:	464a      	mov	r2, r9
 800cd8e:	f7ff fed3 	bl	800cb38 <memcpy>
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9c:	81a3      	strh	r3, [r4, #12]
 800cd9e:	6126      	str	r6, [r4, #16]
 800cda0:	6165      	str	r5, [r4, #20]
 800cda2:	444e      	add	r6, r9
 800cda4:	eba5 0509 	sub.w	r5, r5, r9
 800cda8:	6026      	str	r6, [r4, #0]
 800cdaa:	60a5      	str	r5, [r4, #8]
 800cdac:	463e      	mov	r6, r7
 800cdae:	42be      	cmp	r6, r7
 800cdb0:	d900      	bls.n	800cdb4 <__ssputs_r+0x70>
 800cdb2:	463e      	mov	r6, r7
 800cdb4:	6820      	ldr	r0, [r4, #0]
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	4641      	mov	r1, r8
 800cdba:	f000 faab 	bl	800d314 <memmove>
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	1b9b      	subs	r3, r3, r6
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	4433      	add	r3, r6
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	f000 fac9 	bl	800d368 <_realloc_r>
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d1e0      	bne.n	800cd9e <__ssputs_r+0x5a>
 800cddc:	6921      	ldr	r1, [r4, #16]
 800cdde:	4650      	mov	r0, sl
 800cde0:	f7ff feb8 	bl	800cb54 <_free_r>
 800cde4:	230c      	movs	r3, #12
 800cde6:	f8ca 3000 	str.w	r3, [sl]
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdf0:	81a3      	strh	r3, [r4, #12]
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	e7e9      	b.n	800cdcc <__ssputs_r+0x88>

0800cdf8 <_svfiprintf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	4698      	mov	r8, r3
 800cdfe:	898b      	ldrh	r3, [r1, #12]
 800ce00:	061b      	lsls	r3, r3, #24
 800ce02:	b09d      	sub	sp, #116	; 0x74
 800ce04:	4607      	mov	r7, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	4614      	mov	r4, r2
 800ce0a:	d50e      	bpl.n	800ce2a <_svfiprintf_r+0x32>
 800ce0c:	690b      	ldr	r3, [r1, #16]
 800ce0e:	b963      	cbnz	r3, 800ce2a <_svfiprintf_r+0x32>
 800ce10:	2140      	movs	r1, #64	; 0x40
 800ce12:	f7ff ff0b 	bl	800cc2c <_malloc_r>
 800ce16:	6028      	str	r0, [r5, #0]
 800ce18:	6128      	str	r0, [r5, #16]
 800ce1a:	b920      	cbnz	r0, 800ce26 <_svfiprintf_r+0x2e>
 800ce1c:	230c      	movs	r3, #12
 800ce1e:	603b      	str	r3, [r7, #0]
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	e0d0      	b.n	800cfc8 <_svfiprintf_r+0x1d0>
 800ce26:	2340      	movs	r3, #64	; 0x40
 800ce28:	616b      	str	r3, [r5, #20]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce2e:	2320      	movs	r3, #32
 800ce30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce38:	2330      	movs	r3, #48	; 0x30
 800ce3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cfe0 <_svfiprintf_r+0x1e8>
 800ce3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce42:	f04f 0901 	mov.w	r9, #1
 800ce46:	4623      	mov	r3, r4
 800ce48:	469a      	mov	sl, r3
 800ce4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce4e:	b10a      	cbz	r2, 800ce54 <_svfiprintf_r+0x5c>
 800ce50:	2a25      	cmp	r2, #37	; 0x25
 800ce52:	d1f9      	bne.n	800ce48 <_svfiprintf_r+0x50>
 800ce54:	ebba 0b04 	subs.w	fp, sl, r4
 800ce58:	d00b      	beq.n	800ce72 <_svfiprintf_r+0x7a>
 800ce5a:	465b      	mov	r3, fp
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	4638      	mov	r0, r7
 800ce62:	f7ff ff6f 	bl	800cd44 <__ssputs_r>
 800ce66:	3001      	adds	r0, #1
 800ce68:	f000 80a9 	beq.w	800cfbe <_svfiprintf_r+0x1c6>
 800ce6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce6e:	445a      	add	r2, fp
 800ce70:	9209      	str	r2, [sp, #36]	; 0x24
 800ce72:	f89a 3000 	ldrb.w	r3, [sl]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 80a1 	beq.w	800cfbe <_svfiprintf_r+0x1c6>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce86:	f10a 0a01 	add.w	sl, sl, #1
 800ce8a:	9304      	str	r3, [sp, #16]
 800ce8c:	9307      	str	r3, [sp, #28]
 800ce8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce92:	931a      	str	r3, [sp, #104]	; 0x68
 800ce94:	4654      	mov	r4, sl
 800ce96:	2205      	movs	r2, #5
 800ce98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9c:	4850      	ldr	r0, [pc, #320]	; (800cfe0 <_svfiprintf_r+0x1e8>)
 800ce9e:	f7f3 f9c7 	bl	8000230 <memchr>
 800cea2:	9a04      	ldr	r2, [sp, #16]
 800cea4:	b9d8      	cbnz	r0, 800cede <_svfiprintf_r+0xe6>
 800cea6:	06d0      	lsls	r0, r2, #27
 800cea8:	bf44      	itt	mi
 800ceaa:	2320      	movmi	r3, #32
 800ceac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb0:	0711      	lsls	r1, r2, #28
 800ceb2:	bf44      	itt	mi
 800ceb4:	232b      	movmi	r3, #43	; 0x2b
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceba:	f89a 3000 	ldrb.w	r3, [sl]
 800cebe:	2b2a      	cmp	r3, #42	; 0x2a
 800cec0:	d015      	beq.n	800ceee <_svfiprintf_r+0xf6>
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4654      	mov	r4, sl
 800cec6:	2000      	movs	r0, #0
 800cec8:	f04f 0c0a 	mov.w	ip, #10
 800cecc:	4621      	mov	r1, r4
 800cece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced2:	3b30      	subs	r3, #48	; 0x30
 800ced4:	2b09      	cmp	r3, #9
 800ced6:	d94d      	bls.n	800cf74 <_svfiprintf_r+0x17c>
 800ced8:	b1b0      	cbz	r0, 800cf08 <_svfiprintf_r+0x110>
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	e014      	b.n	800cf08 <_svfiprintf_r+0x110>
 800cede:	eba0 0308 	sub.w	r3, r0, r8
 800cee2:	fa09 f303 	lsl.w	r3, r9, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	46a2      	mov	sl, r4
 800ceec:	e7d2      	b.n	800ce94 <_svfiprintf_r+0x9c>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	1d19      	adds	r1, r3, #4
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	9103      	str	r1, [sp, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bfbb      	ittet	lt
 800cefa:	425b      	neglt	r3, r3
 800cefc:	f042 0202 	orrlt.w	r2, r2, #2
 800cf00:	9307      	strge	r3, [sp, #28]
 800cf02:	9307      	strlt	r3, [sp, #28]
 800cf04:	bfb8      	it	lt
 800cf06:	9204      	strlt	r2, [sp, #16]
 800cf08:	7823      	ldrb	r3, [r4, #0]
 800cf0a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf0c:	d10c      	bne.n	800cf28 <_svfiprintf_r+0x130>
 800cf0e:	7863      	ldrb	r3, [r4, #1]
 800cf10:	2b2a      	cmp	r3, #42	; 0x2a
 800cf12:	d134      	bne.n	800cf7e <_svfiprintf_r+0x186>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1d1a      	adds	r2, r3, #4
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	9203      	str	r2, [sp, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bfb8      	it	lt
 800cf20:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf24:	3402      	adds	r4, #2
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cff0 <_svfiprintf_r+0x1f8>
 800cf2c:	7821      	ldrb	r1, [r4, #0]
 800cf2e:	2203      	movs	r2, #3
 800cf30:	4650      	mov	r0, sl
 800cf32:	f7f3 f97d 	bl	8000230 <memchr>
 800cf36:	b138      	cbz	r0, 800cf48 <_svfiprintf_r+0x150>
 800cf38:	9b04      	ldr	r3, [sp, #16]
 800cf3a:	eba0 000a 	sub.w	r0, r0, sl
 800cf3e:	2240      	movs	r2, #64	; 0x40
 800cf40:	4082      	lsls	r2, r0
 800cf42:	4313      	orrs	r3, r2
 800cf44:	3401      	adds	r4, #1
 800cf46:	9304      	str	r3, [sp, #16]
 800cf48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf4c:	4825      	ldr	r0, [pc, #148]	; (800cfe4 <_svfiprintf_r+0x1ec>)
 800cf4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf52:	2206      	movs	r2, #6
 800cf54:	f7f3 f96c 	bl	8000230 <memchr>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d038      	beq.n	800cfce <_svfiprintf_r+0x1d6>
 800cf5c:	4b22      	ldr	r3, [pc, #136]	; (800cfe8 <_svfiprintf_r+0x1f0>)
 800cf5e:	bb1b      	cbnz	r3, 800cfa8 <_svfiprintf_r+0x1b0>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	3307      	adds	r3, #7
 800cf64:	f023 0307 	bic.w	r3, r3, #7
 800cf68:	3308      	adds	r3, #8
 800cf6a:	9303      	str	r3, [sp, #12]
 800cf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf6e:	4433      	add	r3, r6
 800cf70:	9309      	str	r3, [sp, #36]	; 0x24
 800cf72:	e768      	b.n	800ce46 <_svfiprintf_r+0x4e>
 800cf74:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf78:	460c      	mov	r4, r1
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	e7a6      	b.n	800cecc <_svfiprintf_r+0xd4>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	3401      	adds	r4, #1
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	4619      	mov	r1, r3
 800cf86:	f04f 0c0a 	mov.w	ip, #10
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf90:	3a30      	subs	r2, #48	; 0x30
 800cf92:	2a09      	cmp	r2, #9
 800cf94:	d903      	bls.n	800cf9e <_svfiprintf_r+0x1a6>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d0c6      	beq.n	800cf28 <_svfiprintf_r+0x130>
 800cf9a:	9105      	str	r1, [sp, #20]
 800cf9c:	e7c4      	b.n	800cf28 <_svfiprintf_r+0x130>
 800cf9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e7f0      	b.n	800cf8a <_svfiprintf_r+0x192>
 800cfa8:	ab03      	add	r3, sp, #12
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	462a      	mov	r2, r5
 800cfae:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <_svfiprintf_r+0x1f4>)
 800cfb0:	a904      	add	r1, sp, #16
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f3af 8000 	nop.w
 800cfb8:	1c42      	adds	r2, r0, #1
 800cfba:	4606      	mov	r6, r0
 800cfbc:	d1d6      	bne.n	800cf6c <_svfiprintf_r+0x174>
 800cfbe:	89ab      	ldrh	r3, [r5, #12]
 800cfc0:	065b      	lsls	r3, r3, #25
 800cfc2:	f53f af2d 	bmi.w	800ce20 <_svfiprintf_r+0x28>
 800cfc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfc8:	b01d      	add	sp, #116	; 0x74
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	ab03      	add	r3, sp, #12
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <_svfiprintf_r+0x1f4>)
 800cfd6:	a904      	add	r1, sp, #16
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f000 f879 	bl	800d0d0 <_printf_i>
 800cfde:	e7eb      	b.n	800cfb8 <_svfiprintf_r+0x1c0>
 800cfe0:	0800d4a4 	.word	0x0800d4a4
 800cfe4:	0800d4ae 	.word	0x0800d4ae
 800cfe8:	00000000 	.word	0x00000000
 800cfec:	0800cd45 	.word	0x0800cd45
 800cff0:	0800d4aa 	.word	0x0800d4aa

0800cff4 <_printf_common>:
 800cff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff8:	4616      	mov	r6, r2
 800cffa:	4699      	mov	r9, r3
 800cffc:	688a      	ldr	r2, [r1, #8]
 800cffe:	690b      	ldr	r3, [r1, #16]
 800d000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d004:	4293      	cmp	r3, r2
 800d006:	bfb8      	it	lt
 800d008:	4613      	movlt	r3, r2
 800d00a:	6033      	str	r3, [r6, #0]
 800d00c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d010:	4607      	mov	r7, r0
 800d012:	460c      	mov	r4, r1
 800d014:	b10a      	cbz	r2, 800d01a <_printf_common+0x26>
 800d016:	3301      	adds	r3, #1
 800d018:	6033      	str	r3, [r6, #0]
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	0699      	lsls	r1, r3, #26
 800d01e:	bf42      	ittt	mi
 800d020:	6833      	ldrmi	r3, [r6, #0]
 800d022:	3302      	addmi	r3, #2
 800d024:	6033      	strmi	r3, [r6, #0]
 800d026:	6825      	ldr	r5, [r4, #0]
 800d028:	f015 0506 	ands.w	r5, r5, #6
 800d02c:	d106      	bne.n	800d03c <_printf_common+0x48>
 800d02e:	f104 0a19 	add.w	sl, r4, #25
 800d032:	68e3      	ldr	r3, [r4, #12]
 800d034:	6832      	ldr	r2, [r6, #0]
 800d036:	1a9b      	subs	r3, r3, r2
 800d038:	42ab      	cmp	r3, r5
 800d03a:	dc26      	bgt.n	800d08a <_printf_common+0x96>
 800d03c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d040:	1e13      	subs	r3, r2, #0
 800d042:	6822      	ldr	r2, [r4, #0]
 800d044:	bf18      	it	ne
 800d046:	2301      	movne	r3, #1
 800d048:	0692      	lsls	r2, r2, #26
 800d04a:	d42b      	bmi.n	800d0a4 <_printf_common+0xb0>
 800d04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d050:	4649      	mov	r1, r9
 800d052:	4638      	mov	r0, r7
 800d054:	47c0      	blx	r8
 800d056:	3001      	adds	r0, #1
 800d058:	d01e      	beq.n	800d098 <_printf_common+0xa4>
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	6922      	ldr	r2, [r4, #16]
 800d05e:	f003 0306 	and.w	r3, r3, #6
 800d062:	2b04      	cmp	r3, #4
 800d064:	bf02      	ittt	eq
 800d066:	68e5      	ldreq	r5, [r4, #12]
 800d068:	6833      	ldreq	r3, [r6, #0]
 800d06a:	1aed      	subeq	r5, r5, r3
 800d06c:	68a3      	ldr	r3, [r4, #8]
 800d06e:	bf0c      	ite	eq
 800d070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d074:	2500      	movne	r5, #0
 800d076:	4293      	cmp	r3, r2
 800d078:	bfc4      	itt	gt
 800d07a:	1a9b      	subgt	r3, r3, r2
 800d07c:	18ed      	addgt	r5, r5, r3
 800d07e:	2600      	movs	r6, #0
 800d080:	341a      	adds	r4, #26
 800d082:	42b5      	cmp	r5, r6
 800d084:	d11a      	bne.n	800d0bc <_printf_common+0xc8>
 800d086:	2000      	movs	r0, #0
 800d088:	e008      	b.n	800d09c <_printf_common+0xa8>
 800d08a:	2301      	movs	r3, #1
 800d08c:	4652      	mov	r2, sl
 800d08e:	4649      	mov	r1, r9
 800d090:	4638      	mov	r0, r7
 800d092:	47c0      	blx	r8
 800d094:	3001      	adds	r0, #1
 800d096:	d103      	bne.n	800d0a0 <_printf_common+0xac>
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a0:	3501      	adds	r5, #1
 800d0a2:	e7c6      	b.n	800d032 <_printf_common+0x3e>
 800d0a4:	18e1      	adds	r1, r4, r3
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	2030      	movs	r0, #48	; 0x30
 800d0aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0ae:	4422      	add	r2, r4
 800d0b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0b8:	3302      	adds	r3, #2
 800d0ba:	e7c7      	b.n	800d04c <_printf_common+0x58>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	4622      	mov	r2, r4
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	47c0      	blx	r8
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d0e6      	beq.n	800d098 <_printf_common+0xa4>
 800d0ca:	3601      	adds	r6, #1
 800d0cc:	e7d9      	b.n	800d082 <_printf_common+0x8e>
	...

0800d0d0 <_printf_i>:
 800d0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	7e0f      	ldrb	r7, [r1, #24]
 800d0d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0d8:	2f78      	cmp	r7, #120	; 0x78
 800d0da:	4691      	mov	r9, r2
 800d0dc:	4680      	mov	r8, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	469a      	mov	sl, r3
 800d0e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0e6:	d807      	bhi.n	800d0f8 <_printf_i+0x28>
 800d0e8:	2f62      	cmp	r7, #98	; 0x62
 800d0ea:	d80a      	bhi.n	800d102 <_printf_i+0x32>
 800d0ec:	2f00      	cmp	r7, #0
 800d0ee:	f000 80d4 	beq.w	800d29a <_printf_i+0x1ca>
 800d0f2:	2f58      	cmp	r7, #88	; 0x58
 800d0f4:	f000 80c0 	beq.w	800d278 <_printf_i+0x1a8>
 800d0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d100:	e03a      	b.n	800d178 <_printf_i+0xa8>
 800d102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d106:	2b15      	cmp	r3, #21
 800d108:	d8f6      	bhi.n	800d0f8 <_printf_i+0x28>
 800d10a:	a101      	add	r1, pc, #4	; (adr r1, 800d110 <_printf_i+0x40>)
 800d10c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d110:	0800d169 	.word	0x0800d169
 800d114:	0800d17d 	.word	0x0800d17d
 800d118:	0800d0f9 	.word	0x0800d0f9
 800d11c:	0800d0f9 	.word	0x0800d0f9
 800d120:	0800d0f9 	.word	0x0800d0f9
 800d124:	0800d0f9 	.word	0x0800d0f9
 800d128:	0800d17d 	.word	0x0800d17d
 800d12c:	0800d0f9 	.word	0x0800d0f9
 800d130:	0800d0f9 	.word	0x0800d0f9
 800d134:	0800d0f9 	.word	0x0800d0f9
 800d138:	0800d0f9 	.word	0x0800d0f9
 800d13c:	0800d281 	.word	0x0800d281
 800d140:	0800d1a9 	.word	0x0800d1a9
 800d144:	0800d23b 	.word	0x0800d23b
 800d148:	0800d0f9 	.word	0x0800d0f9
 800d14c:	0800d0f9 	.word	0x0800d0f9
 800d150:	0800d2a3 	.word	0x0800d2a3
 800d154:	0800d0f9 	.word	0x0800d0f9
 800d158:	0800d1a9 	.word	0x0800d1a9
 800d15c:	0800d0f9 	.word	0x0800d0f9
 800d160:	0800d0f9 	.word	0x0800d0f9
 800d164:	0800d243 	.word	0x0800d243
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	1d1a      	adds	r2, r3, #4
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	602a      	str	r2, [r5, #0]
 800d170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d178:	2301      	movs	r3, #1
 800d17a:	e09f      	b.n	800d2bc <_printf_i+0x1ec>
 800d17c:	6820      	ldr	r0, [r4, #0]
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	0607      	lsls	r7, r0, #24
 800d182:	f103 0104 	add.w	r1, r3, #4
 800d186:	6029      	str	r1, [r5, #0]
 800d188:	d501      	bpl.n	800d18e <_printf_i+0xbe>
 800d18a:	681e      	ldr	r6, [r3, #0]
 800d18c:	e003      	b.n	800d196 <_printf_i+0xc6>
 800d18e:	0646      	lsls	r6, r0, #25
 800d190:	d5fb      	bpl.n	800d18a <_printf_i+0xba>
 800d192:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d196:	2e00      	cmp	r6, #0
 800d198:	da03      	bge.n	800d1a2 <_printf_i+0xd2>
 800d19a:	232d      	movs	r3, #45	; 0x2d
 800d19c:	4276      	negs	r6, r6
 800d19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1a2:	485a      	ldr	r0, [pc, #360]	; (800d30c <_printf_i+0x23c>)
 800d1a4:	230a      	movs	r3, #10
 800d1a6:	e012      	b.n	800d1ce <_printf_i+0xfe>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	1d19      	adds	r1, r3, #4
 800d1ae:	6029      	str	r1, [r5, #0]
 800d1b0:	0605      	lsls	r5, r0, #24
 800d1b2:	d501      	bpl.n	800d1b8 <_printf_i+0xe8>
 800d1b4:	681e      	ldr	r6, [r3, #0]
 800d1b6:	e002      	b.n	800d1be <_printf_i+0xee>
 800d1b8:	0641      	lsls	r1, r0, #25
 800d1ba:	d5fb      	bpl.n	800d1b4 <_printf_i+0xe4>
 800d1bc:	881e      	ldrh	r6, [r3, #0]
 800d1be:	4853      	ldr	r0, [pc, #332]	; (800d30c <_printf_i+0x23c>)
 800d1c0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1c2:	bf0c      	ite	eq
 800d1c4:	2308      	moveq	r3, #8
 800d1c6:	230a      	movne	r3, #10
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1ce:	6865      	ldr	r5, [r4, #4]
 800d1d0:	60a5      	str	r5, [r4, #8]
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	bfa2      	ittt	ge
 800d1d6:	6821      	ldrge	r1, [r4, #0]
 800d1d8:	f021 0104 	bicge.w	r1, r1, #4
 800d1dc:	6021      	strge	r1, [r4, #0]
 800d1de:	b90e      	cbnz	r6, 800d1e4 <_printf_i+0x114>
 800d1e0:	2d00      	cmp	r5, #0
 800d1e2:	d04b      	beq.n	800d27c <_printf_i+0x1ac>
 800d1e4:	4615      	mov	r5, r2
 800d1e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1ea:	fb03 6711 	mls	r7, r3, r1, r6
 800d1ee:	5dc7      	ldrb	r7, [r0, r7]
 800d1f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1f4:	4637      	mov	r7, r6
 800d1f6:	42bb      	cmp	r3, r7
 800d1f8:	460e      	mov	r6, r1
 800d1fa:	d9f4      	bls.n	800d1e6 <_printf_i+0x116>
 800d1fc:	2b08      	cmp	r3, #8
 800d1fe:	d10b      	bne.n	800d218 <_printf_i+0x148>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	07de      	lsls	r6, r3, #31
 800d204:	d508      	bpl.n	800d218 <_printf_i+0x148>
 800d206:	6923      	ldr	r3, [r4, #16]
 800d208:	6861      	ldr	r1, [r4, #4]
 800d20a:	4299      	cmp	r1, r3
 800d20c:	bfde      	ittt	le
 800d20e:	2330      	movle	r3, #48	; 0x30
 800d210:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d214:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d218:	1b52      	subs	r2, r2, r5
 800d21a:	6122      	str	r2, [r4, #16]
 800d21c:	f8cd a000 	str.w	sl, [sp]
 800d220:	464b      	mov	r3, r9
 800d222:	aa03      	add	r2, sp, #12
 800d224:	4621      	mov	r1, r4
 800d226:	4640      	mov	r0, r8
 800d228:	f7ff fee4 	bl	800cff4 <_printf_common>
 800d22c:	3001      	adds	r0, #1
 800d22e:	d14a      	bne.n	800d2c6 <_printf_i+0x1f6>
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	b004      	add	sp, #16
 800d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	f043 0320 	orr.w	r3, r3, #32
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	4833      	ldr	r0, [pc, #204]	; (800d310 <_printf_i+0x240>)
 800d244:	2778      	movs	r7, #120	; 0x78
 800d246:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	6829      	ldr	r1, [r5, #0]
 800d24e:	061f      	lsls	r7, r3, #24
 800d250:	f851 6b04 	ldr.w	r6, [r1], #4
 800d254:	d402      	bmi.n	800d25c <_printf_i+0x18c>
 800d256:	065f      	lsls	r7, r3, #25
 800d258:	bf48      	it	mi
 800d25a:	b2b6      	uxthmi	r6, r6
 800d25c:	07df      	lsls	r7, r3, #31
 800d25e:	bf48      	it	mi
 800d260:	f043 0320 	orrmi.w	r3, r3, #32
 800d264:	6029      	str	r1, [r5, #0]
 800d266:	bf48      	it	mi
 800d268:	6023      	strmi	r3, [r4, #0]
 800d26a:	b91e      	cbnz	r6, 800d274 <_printf_i+0x1a4>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	f023 0320 	bic.w	r3, r3, #32
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	2310      	movs	r3, #16
 800d276:	e7a7      	b.n	800d1c8 <_printf_i+0xf8>
 800d278:	4824      	ldr	r0, [pc, #144]	; (800d30c <_printf_i+0x23c>)
 800d27a:	e7e4      	b.n	800d246 <_printf_i+0x176>
 800d27c:	4615      	mov	r5, r2
 800d27e:	e7bd      	b.n	800d1fc <_printf_i+0x12c>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	6826      	ldr	r6, [r4, #0]
 800d284:	6961      	ldr	r1, [r4, #20]
 800d286:	1d18      	adds	r0, r3, #4
 800d288:	6028      	str	r0, [r5, #0]
 800d28a:	0635      	lsls	r5, r6, #24
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	d501      	bpl.n	800d294 <_printf_i+0x1c4>
 800d290:	6019      	str	r1, [r3, #0]
 800d292:	e002      	b.n	800d29a <_printf_i+0x1ca>
 800d294:	0670      	lsls	r0, r6, #25
 800d296:	d5fb      	bpl.n	800d290 <_printf_i+0x1c0>
 800d298:	8019      	strh	r1, [r3, #0]
 800d29a:	2300      	movs	r3, #0
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	4615      	mov	r5, r2
 800d2a0:	e7bc      	b.n	800d21c <_printf_i+0x14c>
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	1d1a      	adds	r2, r3, #4
 800d2a6:	602a      	str	r2, [r5, #0]
 800d2a8:	681d      	ldr	r5, [r3, #0]
 800d2aa:	6862      	ldr	r2, [r4, #4]
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f7f2 ffbe 	bl	8000230 <memchr>
 800d2b4:	b108      	cbz	r0, 800d2ba <_printf_i+0x1ea>
 800d2b6:	1b40      	subs	r0, r0, r5
 800d2b8:	6060      	str	r0, [r4, #4]
 800d2ba:	6863      	ldr	r3, [r4, #4]
 800d2bc:	6123      	str	r3, [r4, #16]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2c4:	e7aa      	b.n	800d21c <_printf_i+0x14c>
 800d2c6:	6923      	ldr	r3, [r4, #16]
 800d2c8:	462a      	mov	r2, r5
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	47d0      	blx	sl
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	d0ad      	beq.n	800d230 <_printf_i+0x160>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	079b      	lsls	r3, r3, #30
 800d2d8:	d413      	bmi.n	800d302 <_printf_i+0x232>
 800d2da:	68e0      	ldr	r0, [r4, #12]
 800d2dc:	9b03      	ldr	r3, [sp, #12]
 800d2de:	4298      	cmp	r0, r3
 800d2e0:	bfb8      	it	lt
 800d2e2:	4618      	movlt	r0, r3
 800d2e4:	e7a6      	b.n	800d234 <_printf_i+0x164>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	47d0      	blx	sl
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d09d      	beq.n	800d230 <_printf_i+0x160>
 800d2f4:	3501      	adds	r5, #1
 800d2f6:	68e3      	ldr	r3, [r4, #12]
 800d2f8:	9903      	ldr	r1, [sp, #12]
 800d2fa:	1a5b      	subs	r3, r3, r1
 800d2fc:	42ab      	cmp	r3, r5
 800d2fe:	dcf2      	bgt.n	800d2e6 <_printf_i+0x216>
 800d300:	e7eb      	b.n	800d2da <_printf_i+0x20a>
 800d302:	2500      	movs	r5, #0
 800d304:	f104 0619 	add.w	r6, r4, #25
 800d308:	e7f5      	b.n	800d2f6 <_printf_i+0x226>
 800d30a:	bf00      	nop
 800d30c:	0800d4b5 	.word	0x0800d4b5
 800d310:	0800d4c6 	.word	0x0800d4c6

0800d314 <memmove>:
 800d314:	4288      	cmp	r0, r1
 800d316:	b510      	push	{r4, lr}
 800d318:	eb01 0402 	add.w	r4, r1, r2
 800d31c:	d902      	bls.n	800d324 <memmove+0x10>
 800d31e:	4284      	cmp	r4, r0
 800d320:	4623      	mov	r3, r4
 800d322:	d807      	bhi.n	800d334 <memmove+0x20>
 800d324:	1e43      	subs	r3, r0, #1
 800d326:	42a1      	cmp	r1, r4
 800d328:	d008      	beq.n	800d33c <memmove+0x28>
 800d32a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d32e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d332:	e7f8      	b.n	800d326 <memmove+0x12>
 800d334:	4402      	add	r2, r0
 800d336:	4601      	mov	r1, r0
 800d338:	428a      	cmp	r2, r1
 800d33a:	d100      	bne.n	800d33e <memmove+0x2a>
 800d33c:	bd10      	pop	{r4, pc}
 800d33e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d346:	e7f7      	b.n	800d338 <memmove+0x24>

0800d348 <_sbrk_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d06      	ldr	r5, [pc, #24]	; (800d364 <_sbrk_r+0x1c>)
 800d34c:	2300      	movs	r3, #0
 800d34e:	4604      	mov	r4, r0
 800d350:	4608      	mov	r0, r1
 800d352:	602b      	str	r3, [r5, #0]
 800d354:	f7f6 f9f4 	bl	8003740 <_sbrk>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	d102      	bne.n	800d362 <_sbrk_r+0x1a>
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	b103      	cbz	r3, 800d362 <_sbrk_r+0x1a>
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	bd38      	pop	{r3, r4, r5, pc}
 800d364:	20000d90 	.word	0x20000d90

0800d368 <_realloc_r>:
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	4680      	mov	r8, r0
 800d36e:	4614      	mov	r4, r2
 800d370:	460e      	mov	r6, r1
 800d372:	b921      	cbnz	r1, 800d37e <_realloc_r+0x16>
 800d374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d378:	4611      	mov	r1, r2
 800d37a:	f7ff bc57 	b.w	800cc2c <_malloc_r>
 800d37e:	b92a      	cbnz	r2, 800d38c <_realloc_r+0x24>
 800d380:	f7ff fbe8 	bl	800cb54 <_free_r>
 800d384:	4625      	mov	r5, r4
 800d386:	4628      	mov	r0, r5
 800d388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d38c:	f000 f81b 	bl	800d3c6 <_malloc_usable_size_r>
 800d390:	4284      	cmp	r4, r0
 800d392:	4607      	mov	r7, r0
 800d394:	d802      	bhi.n	800d39c <_realloc_r+0x34>
 800d396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d39a:	d812      	bhi.n	800d3c2 <_realloc_r+0x5a>
 800d39c:	4621      	mov	r1, r4
 800d39e:	4640      	mov	r0, r8
 800d3a0:	f7ff fc44 	bl	800cc2c <_malloc_r>
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d0ed      	beq.n	800d386 <_realloc_r+0x1e>
 800d3aa:	42bc      	cmp	r4, r7
 800d3ac:	4622      	mov	r2, r4
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	bf28      	it	cs
 800d3b2:	463a      	movcs	r2, r7
 800d3b4:	f7ff fbc0 	bl	800cb38 <memcpy>
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	f7ff fbca 	bl	800cb54 <_free_r>
 800d3c0:	e7e1      	b.n	800d386 <_realloc_r+0x1e>
 800d3c2:	4635      	mov	r5, r6
 800d3c4:	e7df      	b.n	800d386 <_realloc_r+0x1e>

0800d3c6 <_malloc_usable_size_r>:
 800d3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3ca:	1f18      	subs	r0, r3, #4
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bfbc      	itt	lt
 800d3d0:	580b      	ldrlt	r3, [r1, r0]
 800d3d2:	18c0      	addlt	r0, r0, r3
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <_init>:
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	bf00      	nop
 800d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3de:	bc08      	pop	{r3}
 800d3e0:	469e      	mov	lr, r3
 800d3e2:	4770      	bx	lr

0800d3e4 <_fini>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	bf00      	nop
 800d3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ea:	bc08      	pop	{r3}
 800d3ec:	469e      	mov	lr, r3
 800d3ee:	4770      	bx	lr
